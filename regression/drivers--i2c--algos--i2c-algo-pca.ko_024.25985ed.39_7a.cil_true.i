/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 50 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 70 "include/asm-generic/bug.h"
struct completion;
#line 71
struct pt_regs;
#line 289 "include/linux/kernel.h"
struct pid;
#line 639
struct timespec;
#line 640
struct compat_timespec;
#line 641 "include/linux/kernel.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 641 "include/linux/kernel.h"
struct __anonstruct_nanosleep_10 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 641
struct pollfd;
#line 641 "include/linux/kernel.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 641 "include/linux/kernel.h"
union __anonunion_ldv_1806_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 641 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1806_8 ldv_1806 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 21 "include/asm-generic/getorder.h"
struct task_struct;
#line 22
struct exec_domain;
#line 23
struct mm_struct;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2056_12 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2056_12 ldv_2056 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 288
struct file;
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2266_19 {
   unsigned int a ;
   unsigned int b ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2281_20 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2282_18 {
   struct __anonstruct_ldv_2266_19 ldv_2266 ;
   struct __anonstruct_ldv_2281_20 ldv_2281 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2282_18 ldv_2282 ;
};
#line 122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct thread_struct;
#line 124
struct cpumask;
#line 320 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4894_24 {
   u64 rip ;
   u64 rdp ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4900_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4901_23 {
   struct __anonstruct_ldv_4894_24 ldv_4894 ;
   struct __anonstruct_ldv_4900_25 ldv_4900 ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4910_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4901_23 ldv_4901 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4910_26 ldv_4910 ;
};
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 421
struct kmem_cache;
#line 422
struct perf_event;
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 17
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 549 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5914_31 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5915_30 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5914_31 ldv_5914 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5915_30 ldv_5915 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 235 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 645 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 162
struct rw_semaphore;
#line 163 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 175 "include/linux/ioport.h"
struct device;
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 443 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 288 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   unsigned char in_suspend : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 467 "include/linux/pm.h"
struct dev_power_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
   unsigned short ia32_compat ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 71 "include/asm-generic/iomap.h"
struct vm_area_struct;
#line 35 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 109 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 117 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 124 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 141 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 219
struct kernel_param;
#line 220 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 44 "include/linux/moduleparam.h"
struct kparam_string;
#line 44
struct kparam_array;
#line 44 "include/linux/moduleparam.h"
union __anonunion_ldv_11925_124 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 44 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11925_124 ldv_11925 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 398 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 778 "include/linux/rcupdate.h"
struct tracepoint;
#line 779 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 84 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 127 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 66
struct module_param_attrs;
#line 66 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 78
struct exception_table_entry;
#line 217
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 223 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 416
struct module_sect_attrs;
#line 416
struct module_notes_attrs;
#line 416
struct ftrace_event_call;
#line 416 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 215 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 518
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 49 "include/linux/device.h"
struct device_attribute;
#line 49
struct driver_attribute;
#line 49 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 155 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 216
struct device_type;
#line 255 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 306 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 333 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 394 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 403
struct dma_coherent_mem;
#line 403 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_power_domain *pwr_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct of_device_id  const  *of_match ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 458 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 105
struct user_namespace;
#line 564 "include/linux/capability.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 168
struct prio_tree_node;
#line 168 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 115
struct address_space;
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_13881_128 {
   u16 inuse ;
   u16 objects ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_13882_127 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13881_128 ldv_13881 ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_13887_130 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_13890_129 {
   struct __anonstruct_ldv_13887_130 ldv_13887 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_13894_131 {
   unsigned long index ;
   void *freelist ;
};
#line 116 "include/linux/prio_tree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_13882_127 ldv_13882 ;
   union __anonunion_ldv_13890_129 ldv_13890 ;
   union __anonunion_ldv_13894_131 ldv_13894 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_133 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_132 {
   struct __anonstruct_vm_set_133 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_132 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   atomic_t oom_disable_count ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_134 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_134 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_136 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_137 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_138 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_139 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_140 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_141 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_135 {
   int _pad[28U] ;
   struct __anonstruct__kill_136 _kill ;
   struct __anonstruct__timer_137 _timer ;
   struct __anonstruct__rt_138 _rt ;
   struct __anonstruct__sigchld_139 _sigchld ;
   struct __anonstruct__sigfault_140 _sigfault ;
   struct __anonstruct__sigpoll_141 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_135 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 12 "include/linux/signal.h"
struct user_struct;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 387
struct pid_namespace;
#line 387 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_144 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_144 seccomp_t;
#line 427 "include/linux/rculist.h"
struct plist_head {
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 20 "include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct plist_head wait_list ;
   struct task_struct *owner ;
   int save_state ;
   char const   *name ;
   char const   *file ;
   int line ;
   void *magic ;
};
#line 38
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 161 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[3U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 452 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct cred;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_15965_147 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_148 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_149 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_15965_147 ldv_15965 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_148 type_data ;
   union __anonunion_payload_149 payload ;
};
#line 297
struct audit_context;
#line 28 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 361
struct futex_pi_state;
#line 362
struct robust_list_head;
#line 363
struct bio_list;
#line 364
struct fs_struct;
#line 365
struct perf_event_context;
#line 366
struct blk_plug;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 405 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct autogroup;
#line 517
struct tty_struct;
#line 517
struct taskstats;
#line 517
struct tty_audit_buf;
#line 517 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 674 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 719
struct backing_dev_info;
#line 720
struct reclaim_state;
#line 721 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 738 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1014
struct io_context;
#line 1036
struct pipe_inode_info;
#line 1038
struct rq;
#line 1039 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1100 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1105 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1140 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1166
struct rt_rq;
#line 1166 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1190
struct mem_cgroup;
#line 1190 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1536
struct files_struct;
#line 1536
struct irqaction;
#line 1536
struct css_set;
#line 1536
struct compat_robust_list_head;
#line 1536 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 26 "include/linux/of.h"
typedef u32 phandle;
#line 28 "include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 37
struct proc_dir_entry;
#line 37 "include/linux/of.h"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 40 "include/linux/i2c.h"
struct i2c_msg;
#line 41
struct i2c_algorithm;
#line 42
struct i2c_adapter;
#line 45
union i2c_smbus_data;
#line 317 "include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter * , struct i2c_msg * , int  ) ;
   int (*smbus_xfer)(struct i2c_adapter * , u16  , unsigned short  , char  , u8  ,
                     int  , union i2c_smbus_data * ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
#line 349 "include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   struct rt_mutex bus_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
};
#line 471 "include/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 523 "include/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 573 "include/linux/i2c.h"
struct i2c_algo_pca_data {
   void *data ;
   void (*write_byte)(void * , int  , int  ) ;
   int (*read_byte)(void * , int  ) ;
   int (*wait_for_completion)(void * ) ;
   void (*reset_chip)(void * ) ;
   unsigned int i2c_clock ;
};
#line 99 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv_spin_lock_node_size_lock_of_pglist_data(void) ;
#line 44
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 649 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 658
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 430 "include/linux/i2c.h"
extern int i2c_add_adapter(struct i2c_adapter * ) ;
#line 432
extern int i2c_add_numbered_adapter(struct i2c_adapter * ) ;
#line 67 "include/linux/i2c-algo-pca.h"
int i2c_pca_add_bus(struct i2c_adapter *adap ) ;
#line 68
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int i2c_debug  ;
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca9665_reset(void *pd ) 
{ 
  struct i2c_algo_pca_data *adap ;

  {
#line 96
  adap = (struct i2c_algo_pca_data *)pd;
#line 97
  (*(adap->write_byte))(adap->data, 0, 5);
#line 98
  (*(adap->write_byte))(adap->data, 2, 165);
#line 99
  (*(adap->write_byte))(adap->data, 2, 90);
#line 100
  return;
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
#line 109
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 109
  sta = tmp;
#line 110
  if (i2c_debug > 1) {
#line 110
    printk("<7>=== START\n");
  } else {

  }
#line 111
  sta = sta | 32;
#line 112
  sta = sta & -25;
#line 113
  (*(adap->write_byte))(adap->data, 3, sta);
#line 114
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 114
  return (tmp___0);
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_repeated_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
#line 124
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 124
  sta = tmp;
#line 125
  if (i2c_debug > 1) {
#line 125
    printk("<7>=== REPEATED START\n");
  } else {

  }
#line 126
  sta = sta | 32;
#line 127
  sta = sta & -25;
#line 128
  (*(adap->write_byte))(adap->data, 3, sta);
#line 129
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 129
  return (tmp___0);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca_stop(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;

  {
#line 143
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 143
  sta = tmp;
#line 144
  if (i2c_debug > 1) {
#line 144
    printk("<7>=== STOP\n");
  } else {

  }
#line 145
  sta = sta | 16;
#line 146
  sta = sta & -41;
#line 147
  (*(adap->write_byte))(adap->data, 3, sta);
#line 148
  return;
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_address(struct i2c_algo_pca_data *adap , struct i2c_msg *msg ) 
{ 
  int sta ;
  int tmp ;
  int addr ;
  int tmp___0 ;

  {
#line 158
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 158
  sta = tmp;
#line 161
  addr = ((int )msg->addr << 1) & 255;
#line 162
  if ((int )msg->flags & 1) {
#line 163
    addr = addr | 1;
  } else {

  }
#line 164
  if (i2c_debug > 1) {
#line 164
    printk("<7>=== SLAVE ADDRESS %#04x+%c=%#04x\n", (int )msg->addr, (int )msg->flags & 1 ? 82 : 87,
           addr);
  } else {

  }
#line 167
  (*(adap->write_byte))(adap->data, 1, addr);
#line 169
  sta = sta & -57;
#line 170
  (*(adap->write_byte))(adap->data, 3, sta);
#line 172
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 172
  return (tmp___0);
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_tx_byte(struct i2c_algo_pca_data *adap , __u8 b ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
#line 183
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 183
  sta = tmp;
#line 184
  if (i2c_debug > 1) {
#line 184
    printk("<7>=== WRITE %#04x\n", (int )b);
  } else {

  }
#line 185
  (*(adap->write_byte))(adap->data, 1, (int )b);
#line 187
  sta = sta & -57;
#line 188
  (*(adap->write_byte))(adap->data, 3, sta);
#line 190
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 190
  return (tmp___0);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca_rx_byte(struct i2c_algo_pca_data *adap , __u8 *b , int ack ) 
{ 
  int tmp ;

  {
#line 201
  tmp = (*(adap->read_byte))(adap->data, 1);
#line 201
  *b = (__u8 )tmp;
#line 202
  if (i2c_debug > 1) {
#line 202
    printk("<7>=== READ %#04x %s\n", (int )*b, ack != 0 ? (char *)"ACK" : (char *)"NACK");
  } else {

  }
#line 203
  return;
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_rx_ack(struct i2c_algo_pca_data *adap , int ack ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
#line 213
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 213
  sta = tmp;
#line 215
  sta = sta & -185;
#line 217
  if (ack != 0) {
#line 218
    sta = sta | 128;
  } else {

  }
#line 220
  (*(adap->write_byte))(adap->data, 3, sta);
#line 221
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 221
  return (tmp___0);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_xfer(struct i2c_adapter *i2c_adap , struct i2c_msg *msgs , int num ) 
{ 
  struct i2c_algo_pca_data *adap ;
  struct i2c_msg *msg ;
  int curmsg ;
  int numbytes ;
  int state ;
  int ret ;
  int completed ;
  unsigned long timeout ;
  int addr ;
  int i ;
  int tmp ;
  int tmp___0 ;

  {
#line 228
  adap = (struct i2c_algo_pca_data *)i2c_adap->algo_data;
#line 229
  msg = 0;
#line 231
  numbytes = 0;
#line 234
  completed = 1;
#line 235
  timeout = (unsigned long )i2c_adap->timeout + (unsigned long )jiffies;
#line 237
  goto ldv_18044;
  ldv_18043: ;
#line 238
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )timeout < 0L) {
#line 239
    msleep(10U);
  } else {
#line 241
    dev_printk("<7>", (struct device  const  *)(& i2c_adap->dev), "bus is not idle. status is %#04x\n",
               state);
#line 243
    return (-11);
  }
  ldv_18044: 
#line 237
  state = (*(adap->read_byte))(adap->data, 0);
#line 237
  if (state != 248) {
#line 238
    goto ldv_18043;
  } else {

  }

#line 247
  if (i2c_debug > 0) {
#line 247
    printk("<7>{{{ XFER %d messages\n", num);
  } else {

  }
#line 249
  if (i2c_debug > 1) {
#line 250
    curmsg = 0;
#line 250
    goto ldv_18052;
    ldv_18051: 
#line 252
    msg = msgs + (unsigned long )curmsg;
#line 254
    addr = (int )msg->addr & 127;
#line 256
    if ((int )msg->flags & 1) {
#line 257
      printk("<6>    [%02d] RD %d bytes from %#02x [%#02x, ...]\n", curmsg, (int )msg->len,
             addr, (addr << 1) | 1);
    } else {
#line 260
      printk("<6>    [%02d] WR %d bytes to %#02x [%#02x%s", curmsg, (int )msg->len,
             addr, addr << 1, (unsigned int )msg->len == 0U ? (char *)"" : (char *)", ");
#line 263
      i = 0;
#line 263
      goto ldv_18049;
      ldv_18048: 
#line 264
      printk("%#04x%s", (int )*(msg->buf + (unsigned long )i), (int )msg->len + -1 == i ? (char *)"" : (char *)", ");
#line 263
      i = i + 1;
      ldv_18049: ;
#line 263
      if ((int )msg->len > i) {
#line 264
        goto ldv_18048;
      } else {

      }
#line 265
      printk("]\n");
    }
#line 250
    curmsg = curmsg + 1;
    ldv_18052: ;
#line 250
    if (curmsg < num) {
#line 251
      goto ldv_18051;
    } else {

    }

  } else {

  }
#line 270
  curmsg = 0;
#line 271
  ret = -121;
#line 272
  goto ldv_18073;
  ldv_18072: 
#line 273
  state = (*(adap->read_byte))(adap->data, 0);
#line 275
  if (i2c_debug > 2) {
#line 275
    printk("<7>STATE is 0x%02x\n", state);
  } else {

  }
#line 276
  msg = msgs + (unsigned long )curmsg;
#line 278
  switch (state) {
  case 248: 
#line 280
  completed = pca_start(adap);
#line 281
  goto ldv_18055;
  case 8: ;
  case 16: 
#line 285
  completed = pca_address(adap, msg);
#line 286
  goto ldv_18055;
  case 24: ;
  case 40: ;
#line 290
  if ((int )msg->len > numbytes) {
#line 291
    completed = pca_tx_byte(adap, (int )*(msg->buf + (unsigned long )numbytes));
#line 293
    numbytes = numbytes + 1;
#line 294
    goto ldv_18055;
  } else {

  }
#line 296
  curmsg = curmsg + 1;
#line 296
  numbytes = 0;
#line 297
  if (curmsg == num) {
#line 298
    pca_stop(adap);
  } else {
#line 300
    completed = pca_repeated_start(adap);
  }
#line 301
  goto ldv_18055;
  case 32: ;
#line 304
  if (i2c_debug > 1) {
#line 304
    printk("<7>NOT ACK received after SLA+W\n");
  } else {

  }
#line 305
  pca_stop(adap);
#line 306
  goto out;
  case 64: 
#line 309
  completed = pca_rx_ack(adap, (unsigned int )msg->len > 1U);
#line 310
  goto ldv_18055;
  case 80: ;
#line 313
  if ((int )msg->len > numbytes) {
#line 314
    pca_rx_byte(adap, msg->buf + (unsigned long )numbytes, 1);
#line 315
    numbytes = numbytes + 1;
#line 316
    completed = pca_rx_ack(adap, (int )msg->len + -1 > numbytes);
#line 318
    goto ldv_18055;
  } else {

  }
#line 320
  curmsg = curmsg + 1;
#line 320
  numbytes = 0;
#line 321
  if (curmsg == num) {
#line 322
    pca_stop(adap);
  } else {
#line 324
    completed = pca_repeated_start(adap);
  }
#line 325
  goto ldv_18055;
  case 72: ;
#line 328
  if (i2c_debug > 1) {
#line 328
    printk("<7>NOT ACK received after SLA+R\n");
  } else {

  }
#line 329
  pca_stop(adap);
#line 330
  goto out;
  case 48: ;
#line 333
  if (i2c_debug > 1) {
#line 333
    printk("<7>NOT ACK received after data byte\n");
  } else {

  }
#line 334
  pca_stop(adap);
#line 335
  goto out;
  case 56: ;
#line 338
  if (i2c_debug > 1) {
#line 338
    printk("<7>Arbitration lost\n");
  } else {

  }
#line 348
  pca_start(adap);
#line 349
  goto out;
  case 88: ;
#line 352
  if ((int )msg->len + -1 == numbytes) {
#line 353
    pca_rx_byte(adap, msg->buf + (unsigned long )numbytes, 0);
#line 354
    curmsg = curmsg + 1;
#line 354
    numbytes = 0;
#line 355
    if (curmsg == num) {
#line 356
      pca_stop(adap);
    } else {
#line 358
      completed = pca_repeated_start(adap);
    }
  } else {
#line 360
    if (i2c_debug > 1) {
#line 360
      printk("<7>NOT ACK sent after data byte received. Not final byte. numbytes %d. len %d\n",
             numbytes, (int )msg->len);
    } else {

    }
#line 363
    pca_stop(adap);
#line 364
    goto out;
  }
#line 366
  goto ldv_18055;
  case 112: ;
#line 368
  if (i2c_debug > 1) {
#line 368
    printk("<7>BUS ERROR - SDA Stuck low\n");
  } else {

  }
#line 369
  (*(adap->reset_chip))(adap->data);
#line 370
  goto out;
  case 144: ;
#line 372
  if (i2c_debug > 1) {
#line 372
    printk("<7>BUS ERROR - SCL Stuck low\n");
  } else {

  }
#line 373
  (*(adap->reset_chip))(adap->data);
#line 374
  goto out;
  case 0: ;
#line 376
  if (i2c_debug > 1) {
#line 376
    printk("<7>BUS ERROR - Illegal START or STOP\n");
  } else {

  }
#line 377
  (*(adap->reset_chip))(adap->data);
#line 378
  goto out;
  default: 
#line 380
  dev_err((struct device  const  *)(& i2c_adap->dev), "unhandled SIO state 0x%02x\n",
          state);
#line 381
  goto ldv_18055;
  }
  ldv_18055: ;
#line 384
  if (completed == 0) {
#line 385
    goto out;
  } else {

  }
  ldv_18073: ;
#line 272
  if (curmsg < num) {
#line 273
    goto ldv_18072;
  } else {

  }
#line 388
  ret = curmsg;
  out: ;
#line 390
  if (i2c_debug > 0) {
#line 390
    tmp = (*(adap->read_byte))(adap->data, 3);
#line 390
    tmp___0 = (*(adap->read_byte))(adap->data, 0);
#line 390
    printk("<7>}}} transferred %d/%d messages. status is %#04x. control is %#04x\n",
           curmsg, num, tmp___0, tmp);
  } else {

  }
#line 394
  return (ret);
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static u32 pca_func(struct i2c_adapter *adap ) 
{ 


  {
#line 399
  return (251592713U);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static struct i2c_algorithm  const  pca_algo  =    {& pca_xfer, 0, & pca_func};
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static unsigned int pca_probe_chip(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int tmp ;

  {
#line 409
  pca_data = (struct i2c_algo_pca_data *)adap->algo_data;
#line 415
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
#line 416
  (*(pca_data->write_byte))(pca_data->data, 2, 170);
#line 417
  (*(pca_data->write_byte))(pca_data->data, 0, 4);
#line 418
  (*(pca_data->write_byte))(pca_data->data, 2, 0);
#line 419
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
#line 420
  tmp = (*(pca_data->read_byte))(pca_data->data, 2);
#line 420
  if (tmp == 170) {
#line 421
    printk("<6>%s: PCA9665 detected.\n", (char *)(& adap->name));
#line 422
    return (1U);
  } else {
#line 424
    printk("<6>%s: PCA9564 detected.\n", (char *)(& adap->name));
#line 425
    return (0U);
  }
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_init(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int freqs[8U] ;
  int clock ;
  int clock___0 ;
  int mode ;
  int tlow ;
  int thi ;
  int min_tlow ;
  int min_thi ;
  int raise_fall_time ;
  unsigned int tmp ;

  {
#line 431
  pca_data = (struct i2c_algo_pca_data *)adap->algo_data;
#line 433
  adap->algo = & pca_algo;
#line 435
  tmp = pca_probe_chip(adap);
#line 435
  if (tmp == 0U) {
#line 436
    freqs[0] = 330;
#line 436
    freqs[1] = 288;
#line 436
    freqs[2] = 217;
#line 436
    freqs[3] = 146;
#line 436
    freqs[4] = 88;
#line 436
    freqs[5] = 59;
#line 436
    freqs[6] = 44;
#line 436
    freqs[7] = 36;
#line 439
    if (pca_data->i2c_clock > 7U) {
#line 440
      switch (pca_data->i2c_clock) {
      case 330000U: 
#line 442
      pca_data->i2c_clock = 0U;
#line 443
      goto ldv_18090;
      case 288000U: 
#line 445
      pca_data->i2c_clock = 1U;
#line 446
      goto ldv_18090;
      case 217000U: 
#line 448
      pca_data->i2c_clock = 2U;
#line 449
      goto ldv_18090;
      case 146000U: 
#line 451
      pca_data->i2c_clock = 3U;
#line 452
      goto ldv_18090;
      case 88000U: 
#line 454
      pca_data->i2c_clock = 4U;
#line 455
      goto ldv_18090;
      case 59000U: 
#line 457
      pca_data->i2c_clock = 5U;
#line 458
      goto ldv_18090;
      case 44000U: 
#line 460
      pca_data->i2c_clock = 6U;
#line 461
      goto ldv_18090;
      case 36000U: 
#line 463
      pca_data->i2c_clock = 7U;
#line 464
      goto ldv_18090;
      default: 
#line 466
      printk("<4>%s: Invalid I2C clock speed selected. Using default 59kHz.\n", (char *)(& adap->name));
#line 469
      pca_data->i2c_clock = 5U;
      }
      ldv_18090: ;
    } else {
#line 472
      printk("<4>%s: Choosing the clock frequency based on index is deprecated. Use the nominal frequency.\n",
             (char *)(& adap->name));
    }
#line 478
    (*(pca_data->reset_chip))(pca_data->data);
#line 480
    clock = (int )pca_data->i2c_clock;
#line 481
    printk("<6>%s: Clock frequency is %dkHz\n", (char *)(& adap->name), freqs[clock]);
#line 484
    (*(pca_data->write_byte))(pca_data->data, 3, clock | 64);
  } else {
#line 503
    pca_data->reset_chip = & pca9665_reset;
#line 505
    if (pca_data->i2c_clock > 1265800U) {
#line 506
      printk("<4>%s: I2C clock speed too high. Using 1265.8kHz.\n", (char *)(& adap->name));
#line 508
      pca_data->i2c_clock = 1265800U;
    } else {

    }
#line 511
    if (pca_data->i2c_clock <= 60299U) {
#line 512
      printk("<4>%s: I2C clock speed too low. Using 60.3kHz.\n", (char *)(& adap->name));
#line 514
      pca_data->i2c_clock = 60300U;
    } else {

    }
#line 518
    clock___0 = (int )(pca_data->i2c_clock / 100U);
#line 520
    if (pca_data->i2c_clock > 10000U) {
#line 521
      mode = 3;
#line 522
      min_tlow = 14;
#line 523
      min_thi = 5;
#line 524
      raise_fall_time = 22;
    } else
#line 525
    if (pca_data->i2c_clock > 4000U) {
#line 526
      mode = 2;
#line 527
      min_tlow = 17;
#line 528
      min_thi = 9;
#line 529
      raise_fall_time = 22;
    } else
#line 530
    if (pca_data->i2c_clock > 1000U) {
#line 531
      mode = 1;
#line 532
      min_tlow = 44;
#line 533
      min_thi = 20;
#line 534
      raise_fall_time = 58;
    } else {
#line 536
      mode = 0;
#line 537
      min_tlow = 157;
#line 538
      min_thi = 134;
#line 539
      raise_fall_time = 127;
    }
#line 546
    if (clock___0 <= 647) {
#line 547
      tlow = 255;
#line 548
      thi = 1000000 - clock___0 * raise_fall_time;
#line 549
      thi = thi / (clock___0 * 3 - tlow);
    } else {
#line 551
      tlow = (1000000 - clock___0 * raise_fall_time) * min_tlow;
#line 552
      tlow = tlow / ((clock___0 * 3) * (min_thi + min_tlow));
#line 553
      thi = (tlow * min_thi) / min_tlow;
    }
#line 556
    (*(pca_data->reset_chip))(pca_data->data);
#line 558
    printk("<6>%s: Clock frequency is %dHz\n", (char *)(& adap->name), clock___0 * 100);
#line 561
    (*(pca_data->write_byte))(pca_data->data, 0, 6);
#line 562
    (*(pca_data->write_byte))(pca_data->data, 2, mode);
#line 563
    (*(pca_data->write_byte))(pca_data->data, 0, 2);
#line 564
    (*(pca_data->write_byte))(pca_data->data, 2, tlow);
#line 565
    (*(pca_data->write_byte))(pca_data->data, 0, 3);
#line 566
    (*(pca_data->write_byte))(pca_data->data, 2, thi);
#line 568
    (*(pca_data->write_byte))(pca_data->data, 3, 64);
  }
#line 570
  __const_udelay(2147500UL);
#line 572
  return (0);
}
}
#line 578 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int i2c_pca_add_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int tmp ;

  {
#line 582
  rval = pca_init(adap);
#line 583
  if (rval != 0) {
#line 584
    return (rval);
  } else {

  }
#line 586
  tmp = i2c_add_adapter(adap);
#line 586
  return (tmp);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int tmp ;

  {
#line 594
  rval = pca_init(adap);
#line 595
  if (rval != 0) {
#line 596
    return (rval);
  } else {

  }
#line 598
  tmp = i2c_add_numbered_adapter(adap);
#line 598
  return (tmp);
}
}
#line 625
void ldv_check_final_state(void) ;
#line 634
void ldv_initialize(void) ;
#line 637
extern void ldv_handler_precall(void) ;
#line 640
extern int nondet_int(void) ;
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct i2c_adapter *var_group1 ;
  struct i2c_msg *var_group2 ;
  int var_pca_xfer_8_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 700
  LDV_IN_INTERRUPT = 1;
#line 709
  ldv_initialize();
#line 713
  goto ldv_18164;
  ldv_18163: 
#line 716
  tmp = nondet_int();
#line 716
  switch (tmp) {
  case 0: 
#line 741
  ldv_handler_precall();
#line 742
  pca_xfer(var_group1, var_group2, var_pca_xfer_8_p2);
#line 749
  goto ldv_18160;
  case 1: 
#line 773
  ldv_handler_precall();
#line 774
  pca_func(var_group1);
#line 781
  goto ldv_18160;
  default: ;
#line 782
  goto ldv_18160;
  }
  ldv_18160: ;
  ldv_18164: 
#line 713
  tmp___0 = nondet_int();
#line 713
  if (tmp___0 != 0) {
#line 714
    goto ldv_18163;
  } else {

  }


#line 791
  ldv_check_final_state();
#line 794
  return;
}
}
#line 830 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 835
  ldv_spin_lock_node_size_lock_of_pglist_data();
#line 837
  __ldv_spin_lock(ldv_func_arg1);
#line 838
  return;
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 856
  ldv_spin_lock_siglock_of_sighand_struct();
#line 858
  __ldv_spin_lock(ldv_func_arg1);
#line 859
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 139
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 148
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 183
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_node_size_lock_of_pglist_data  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 264
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_node_size_lock_of_pglist_data = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 273
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 308
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 389
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_siglock_of_sighand_struct = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 398
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_siglock_of_sighand_struct = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_siglock_of_sighand_struct = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 433
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_siglock_of_sighand_struct = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 513
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 515
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 517
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 519
  ldv_spin_siglock_of_sighand_struct = 1;
#line 520
  return;
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 526
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 526
    ldv_error();
  }
#line 528
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 528
    ldv_error();
  }
#line 530
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 530
    ldv_error();
  }
#line 532
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 532
    ldv_error();
  }
#line 533
  return;
}
}
