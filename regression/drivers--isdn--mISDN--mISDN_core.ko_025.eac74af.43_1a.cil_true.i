/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_809_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_813_3 {
   unsigned long miss ;
   unsigned long hit ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
union __anonunion_ldv_815_1 {
   struct __anonstruct_ldv_809_2 ldv_809 ;
   struct __anonstruct_ldv_813_3 ldv_813 ;
   unsigned long miss_hit[2U] ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion_ldv_815_1 ldv_815 ;
};
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 88 "include/linux/types.h"
typedef unsigned char u_char;
#line 90 "include/linux/types.h"
typedef unsigned int u_int;
#line 91 "include/linux/types.h"
typedef unsigned long u_long;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 109
struct pt_regs;
#line 207
struct pid;
#line 673
struct task_struct;
#line 674
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 240 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1843_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1843_8 ldv_1843 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 272
struct page;
#line 280
struct file;
#line 302
struct seq_file;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2137_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2152_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2153_14 {
   struct __anonstruct_ldv_2137_15 ldv_2137 ;
   struct __anonstruct_ldv_2152_16 ldv_2152 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2153_14 ldv_2153 ;
};
#line 292 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1093
struct thread_struct;
#line 351 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct raw_spinlock;
#line 272 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 149 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6251_18 {
   u64 rip ;
   u64 rdp ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6257_19 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6258_17 {
   struct __anonstruct_ldv_6251_18 ldv_6251 ;
   struct __anonstruct_ldv_6257_19 ldv_6257 ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6267_20 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_6258_17 ldv_6258 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_6267_20 ldv_6267 ;
};
#line 333 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 411
struct kmem_cache;
#line 415 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
};
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_22 {
   unsigned long seg ;
};
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_22 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_6760_24 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_25 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_26 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_27 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_6782_23 {
   struct __anonstruct_ldv_6760_24 ldv_6760 ;
   struct __anonstruct_futex_25 futex ;
   struct __anonstruct_nanosleep_26 nanosleep ;
   struct __anonstruct_poll_27 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6782_23 ldv_6782 ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_28 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_28 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 21 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 164 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_29 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_29 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_30 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_31 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_31 seqlock_t;
#line 104 "include/linux/math64.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 220 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_32 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_32 nodemask_t;
#line 634 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 153
struct rw_semaphore;
#line 155 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 743 "include/linux/mmzone.h"
struct ctl_table;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 186
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 196 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_80 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_80 mm_context_t;
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 405
struct kobject;
#line 406 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10921_90 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10921_90 ldv_10921 ;
};
#line 50 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 56 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 225
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 34 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
#line 210 "include/linux/marker.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 272 "include/linux/rcupdate.h"
struct tracepoint;
#line 273 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 238 "include/linux/timer.h"
struct hrtimer;
#line 239
enum hrtimer_restart;
#line 251
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 80 "include/trace/kmemtrace.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 180
struct module_sect_attrs;
#line 180
struct module_notes_attrs;
#line 180 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 519
struct device_driver;
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 34 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 35 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 147 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 241 "include/linux/mISDNif.h"
struct sockaddr_mISDN {
   sa_family_t family ;
   unsigned char dev ;
   unsigned char channel ;
   unsigned char sapi ;
   unsigned char tei ;
};
#line 379
enum ldv_14589 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 51 "include/linux/net.h"
typedef enum ldv_14589 socket_state;
#line 124 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 125
struct pipe_inode_info;
#line 126
struct inode;
#line 127
struct net;
#line 144
struct fasync_struct;
#line 144
struct sock;
#line 144
struct proto_ops;
#line 144 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 142 "include/linux/net.h"
struct kiocb;
#line 143 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 841 "include/linux/sysctl.h"
struct nsproxy;
#line 842
struct ctl_table_root;
#line 843 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 958
struct ctl_table_header;
#line 976 "include/linux/sysctl.h"
typedef int ctl_handler(struct ctl_table * , void * , size_t * , void * , size_t  );
#line 980 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , struct file * , void * , size_t * ,
                         loff_t * );
#line 1009 "include/linux/sysctl.h"
struct ctl_table {
   int ctl_name ;
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   ctl_handler *strategy ;
   void *extra1 ;
   void *extra2 ;
};
#line 1066 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1074 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 184 "include/linux/ioport.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct driver_private;
#line 16
struct class;
#line 17
struct class_private;
#line 18
struct bus_type;
#line 19
struct bus_type_private;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 152 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 182
struct class_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 207
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 270 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
#line 299 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 360 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 369
struct dma_coherent_mem;
#line 369 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 39 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 74 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/scatterlist.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160
struct prio_tree_node;
#line 160 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 115
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_15223_93 {
   u16 inuse ;
   u16 objects ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_15224_92 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15223_93 ldv_15223 ;
};
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_15229_95 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_15233_94 {
   struct __anonstruct_ldv_15229_95 ldv_15229 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_15237_96 {
   unsigned long index ;
   void *freelist ;
};
#line 29 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_15224_92 ldv_15224 ;
   union __anonunion_ldv_15233_94 ldv_15233 ;
   union __anonunion_ldv_15237_96 ldv_15237 ;
   struct list_head lru ;
};
#line 119 "include/linux/mm_types.h"
struct __anonstruct_vm_set_98 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 119 "include/linux/mm_types.h"
union __anonunion_shared_97 {
   struct __anonstruct_vm_set_98 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 119
struct anon_vma;
#line 119
struct vm_operations_struct;
#line 119
struct mempolicy;
#line 119 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_97 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 181 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 187 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 193
struct mmu_notifier_mm;
#line 193 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 281
struct file_ra_state;
#line 282
struct user_struct;
#line 283
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 174 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 264 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 271 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 488
struct hrtimer_clock_base;
#line 489
struct hrtimer_cpu_base;
#line 495
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 500 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 126 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 150 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 463
struct net_device;
#line 464 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 101 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 111 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 252 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 253
struct dst_entry;
#line 253
struct rtable;
#line 253 "include/linux/skbuff.h"
union __anonunion_ldv_19087_101 {
   struct dst_entry *dst ;
   struct rtable *rtable ;
};
#line 253
struct sec_path;
#line 253 "include/linux/skbuff.h"
struct __anonstruct_ldv_19100_103 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 253 "include/linux/skbuff.h"
union __anonunion_ldv_19101_102 {
   __wsum csum ;
   struct __anonstruct_ldv_19100_103 ldv_19100 ;
};
#line 253 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   struct sock *sk ;
   ktime_t tstamp ;
   struct net_device *dev ;
   union __anonunion_ldv_19087_101 ldv_19087 ;
   struct sec_path *sp ;
   char cb[48U] ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19101_102 ldv_19101 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int iif ;
   __u16 queue_mapping ;
   __u16 tc_index ;
   __u16 tc_verd ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char do_not_encrypt : 1 ;
   unsigned char requeue : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   __u32 mark ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 2056
struct hlist_nulls_node;
#line 2056 "include/linux/skbuff.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_104 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_104 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_105 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_105 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_106 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_106 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_107 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_107 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_108 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_108 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_109 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_109 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_110 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_110 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_111 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_111 ifs_ifsu ;
};
#line 156 "include/linux/if.h"
union __anonunion_ifr_ifrn_112 {
   char ifrn_name[16U] ;
};
#line 156 "include/linux/if.h"
union __anonunion_ifr_ifru_113 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 156 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_112 ifr_ifrn ;
   union __anonunion_ifr_ifru_113 ifr_ifru ;
};
#line 368 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u16 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 50 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 68 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 83 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 91 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 196 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 218 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 257 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 266 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 283 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 305 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 312 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 318 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 324 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 336 "include/linux/ethtool.h"
union __anonunion_h_u_115 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 336 "include/linux/ethtool.h"
union __anonunion_m_u_116 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 336 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_115 h_u ;
   union __anonunion_m_u_116 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 353 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 382 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*self_test_count)(struct net_device * ) ;
   int (*get_stats_count)(struct net_device * ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
};
#line 491
struct prot_inuse;
#line 492 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[75U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[26U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   rwlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 69 "include/net/netns/ipv4.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 28 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 28
struct rt6_info;
#line 28
struct rt6_statistics;
#line 28
struct fib6_table;
#line 28
struct dst_ops;
#line 28
struct mfc6_cache;
#line 28
struct mif_device;
#line 28 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops *ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 69 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_127 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_127 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 375 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 198
struct pid_namespace;
#line 198 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 570 "include/linux/capability.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 409 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 468 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 117 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 150 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 186 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 208
struct quota_format_type;
#line 209 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 251 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 279 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 293 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 319 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 334 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 558 "include/linux/fs.h"
union __anonunion_arg_130 {
   char *buf ;
   void *data ;
};
#line 558 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_129 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_130 arg ;
   int error ;
};
#line 558 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_129 read_descriptor_t;
#line 561 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 609
struct backing_dev_info;
#line 610 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 631
struct hd_struct;
#line 631
struct gendisk;
#line 631 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 701
struct inode_operations;
#line 701
struct file_operations;
#line 701
struct file_lock;
#line 701
struct cdev;
#line 701 "include/linux/fs.h"
union __anonunion_ldv_22972_131 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 701
struct dnotify_struct;
#line 701 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22972_131 ldv_22972 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 864 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 872 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 895 "include/linux/fs.h"
union __anonunion_f_u_132 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 895 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_132 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1018
struct files_struct;
#line 1018 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1019 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1024 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 162 "include/linux/nfs.h"
struct nlm_lockowner;
#line 163 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_134 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_133 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_134 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_133 fl_u ;
};
#line 1126 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1303
struct file_system_type;
#line 1303
struct super_operations;
#line 1303
struct xattr_handler;
#line 1303
struct mtd_info;
#line 1303 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
#line 1428 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1472 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1512 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1554 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1738 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2178
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 352 "include/linux/netfilter.h"
struct ebt_table;
#line 353 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 15 "include/net/netns/x_tables.h"
struct nf_conntrack_ecache;
#line 16
struct ip_conntrack_stat;
#line 16 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct ip_conntrack_stat *stat ;
   struct nf_conntrack_ecache *ecache ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
};
#line 465 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 15 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 54
struct net_generic;
#line 55 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct work_struct work ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_xfrm xfrm ;
   struct net_generic *gen ;
};
#line 83 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
};
#line 52 "include/net/dcbnl.h"
struct vlan_group;
#line 53
struct netpoll_info;
#line 54
struct wireless_dev;
#line 55 "include/net/dcbnl.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 172 "include/linux/netdevice.h"
struct neighbour;
#line 173
struct neigh_parms;
#line 193 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 223 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 251 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 458
struct Qdisc;
#line 458 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 481 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   int (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
};
#line 628
enum ldv_22430 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 637
struct iw_handler_def;
#line 637
struct iw_public_data;
#line 637
struct net_bridge_port;
#line 637
struct macvlan_port;
#line 637
struct garp_port;
#line 637
struct rtnl_link_ops;
#line 637 "include/linux/netdevice.h"
struct __anonstruct_ldv_26252_136 {
   int (*init)(struct net_device * ) ;
   void (*uninit)(struct net_device * ) ;
   int (*open)(struct net_device * ) ;
   int (*stop)(struct net_device * ) ;
   int (*hard_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*change_rx_flags)(struct net_device * , int  ) ;
   void (*set_rx_mode)(struct net_device * ) ;
   void (*set_multicast_list)(struct net_device * ) ;
   int (*set_mac_address)(struct net_device * , void * ) ;
   int (*validate_addr)(struct net_device * ) ;
   int (*do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*set_config)(struct net_device * , struct ifmap * ) ;
   int (*change_mtu)(struct net_device * , int  ) ;
   int (*neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*get_stats)(struct net_device * ) ;
   void (*vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*poll_controller)(struct net_device * ) ;
};
#line 637 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *uc_list ;
   int uc_count ;
   int uc_promisc ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct list_head dev_addr_list ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct net_device *link_watch_next ;
   enum ldv_22430 reg_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[3U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct __anonstruct_ldv_26252_136 ldv_26252 ;
};
#line 1083
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_137 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_137 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_139 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_140 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_141 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_142 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_143 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_144 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_138 {
   int _pad[28U] ;
   struct __anonstruct__kill_139 _kill ;
   struct __anonstruct__timer_140 _timer ;
   struct __anonstruct__rt_141 _rt ;
   struct __anonstruct__sigchld_142 _sigchld ;
   struct __anonstruct__sigfault_143 _sigfault ;
   struct __anonstruct__sigpoll_144 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_138 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_147 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_147 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_type_data_148 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_149 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_148 type_data ;
   union __anonunion_payload_149 payload ;
};
#line 285 "include/linux/key.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 75 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 89 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 211
struct futex_pi_state;
#line 212
struct robust_list_head;
#line 214
struct fs_struct;
#line 142 "include/linux/sched.h"
struct cfs_rq;
#line 143
struct task_group;
#line 344
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_150 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_150 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 413 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 473 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 500
struct tty_struct;
#line 500
struct taskstats;
#line 500
struct tty_audit_buf;
#line 500 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 636 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 682
struct reclaim_state;
#line 683 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 701 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 743
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 825 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 848
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 862 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 947
struct io_context;
#line 968
struct audit_context;
#line 970
struct rq;
#line 971 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   int (*needs_post_schedule)(struct rq * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1025 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1030 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1099
struct rt_rq;
#line 1099 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1115
struct linux_binfmt;
#line 1115
struct irqaction;
#line 1115
struct css_set;
#line 1115
struct compat_robust_list_head;
#line 1115
struct ftrace_ret_stack;
#line 1115 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
#line 75 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 1994 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(long  , struct pt_regs * , struct file * , unsigned long  ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 77 "include/linux/security.h"
struct xfrm_policy;
#line 78
struct xfrm_state;
#line 2968 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 39 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 118 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 791 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
};
#line 85
struct neigh_table;
#line 85 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 91
struct neigh_ops;
#line 91 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops *ops ;
   u8 primary_key[0U] ;
};
#line 123 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 134 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 145 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct timer_list gc_timer ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   unsigned int hash_chain_gc ;
   struct pneigh_entry **phash_buckets ;
};
#line 361
struct dn_route;
#line 361 "include/net/neighbour.h"
union __anonunion_ldv_33265_155 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 361 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[13U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_33265_155 ldv_33265 ;
};
#line 104 "include/net/dst.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
   struct net *dst_net ;
};
#line 98 "include/net/sock.h"
struct __anonstruct_socket_lock_t_156 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 98 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_156 socket_lock_t;
#line 98
struct proto;
#line 99 "include/net/sock.h"
union __anonunion_ldv_33463_157 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 99 "include/net/sock.h"
struct sock_common {
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_33463_157 ldv_33463 ;
   struct hlist_node skc_bind_node ;
   atomic_t skc_refcnt ;
   unsigned int skc_hash ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 137 "include/net/sock.h"
struct __anonstruct_sk_backlog_158 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 137 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_158 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 591
struct request_sock_ops;
#line 592
struct timewait_sock_ops;
#line 593
struct inet_hashinfo;
#line 594
struct raw_hashinfo;
#line 595
struct udp_table;
#line 595 "include/net/sock.h"
union __anonunion_h_159 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 595 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_159 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 1484
struct mISDNchannel;
#line 1485
struct mISDNdevice;
#line 1486
struct mISDNstack;
#line 1488 "include/net/sock.h"
struct channel_req {
   u_int protocol ;
   struct sockaddr_mISDN adr ;
   struct mISDNchannel *ch ;
};
#line 429 "include/linux/mISDNif.h"
typedef int ctrl_func_t(struct mISDNchannel * , u_int  , void * );
#line 430 "include/linux/mISDNif.h"
typedef int send_func_t(struct mISDNchannel * , struct sk_buff * );
#line 431 "include/linux/mISDNif.h"
typedef int create_func_t(struct channel_req * );
#line 432 "include/linux/mISDNif.h"
struct Bprotocol {
   struct list_head list ;
   char *name ;
   u_int Bprotocols ;
   create_func_t *create ;
};
#line 439 "include/linux/mISDNif.h"
struct mISDNchannel {
   struct list_head list ;
   u_int protocol ;
   u_int nr ;
   u_long opt ;
   u_int addr ;
   struct mISDNstack *st ;
   struct mISDNchannel *peer ;
   send_func_t *send ;
   send_func_t *recv ;
   ctrl_func_t *ctrl ;
};
#line 452 "include/linux/mISDNif.h"
struct mISDN_sock_list {
   struct hlist_head head ;
   rwlock_t lock ;
};
#line 464 "include/linux/mISDNif.h"
struct mISDNdevice {
   struct mISDNchannel D ;
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int nrbchan ;
   u_char channelmap[16U] ;
   struct list_head bchannels ;
   struct mISDNchannel *teimgr ;
   struct device dev ;
};
#line 478 "include/linux/mISDNif.h"
struct mISDNstack {
   u_long status ;
   struct mISDNdevice *dev ;
   struct task_struct *thread ;
   struct completion *notify ;
   wait_queue_head_t workq ;
   struct sk_buff_head msgq ;
   struct list_head layer2 ;
   struct mISDNchannel *layer1 ;
   struct mISDNchannel own ;
   struct mutex lmutex ;
   struct mISDN_sock_list l1sock ;
};
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
struct FsmInst;
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
typedef void (*FSMFNPTR)(struct FsmInst * , int  , void * );
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct Fsm {
   FSMFNPTR (**jumpmatrix)(struct FsmInst * , int  , void * ) ;
   int state_count ;
   int event_count ;
   char **strEvent ;
   char **strState ;
};
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmInst {
   struct Fsm *fsm ;
   int state ;
   int debug ;
   void *userdata ;
   int userint ;
   void (*printdebug)(struct FsmInst * , char *  , ...) ;
};
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmNode {
   int state ;
   int event ;
   void (*routine)(struct FsmInst * , int  , void * ) ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmTimer {
   struct FsmInst *fi ;
   struct timer_list tl ;
   int event ;
   void *arg ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_suseconds_t;
#line 18 "include/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 327 "include/linux/socket.h"
struct mISDNhead {
   unsigned int prim ;
   unsigned int id ;
};
#line 271 "include/linux/mISDNif.h"
struct mISDNversion {
   unsigned char major ;
   unsigned char minor ;
   unsigned short release ;
};
#line 277 "include/linux/mISDNif.h"
struct mISDN_devinfo {
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int protocol ;
   u_char channelmap[16U] ;
   u_int nrbchan ;
   char name[20U] ;
};
#line 287 "include/linux/mISDNif.h"
struct mISDN_devrename {
   u_int id ;
   char name[20U] ;
};
#line 343 "include/linux/mISDNif.h"
struct mISDN_ctrl_req {
   int op ;
   int channel ;
   int p1 ;
   int p2 ;
};
#line 194 "include/linux/net.h"
struct net_proto_family {
   int family ;
   int (*create)(struct net * , struct socket * , int  ) ;
   struct module *owner ;
};
#line 453 "include/net/sock.h"
enum sock_flags {
    SOCK_DEAD = 0,
    SOCK_DONE = 1,
    SOCK_URGINLINE = 2,
    SOCK_KEEPOPEN = 3,
    SOCK_LINGER = 4,
    SOCK_DESTROY = 5,
    SOCK_BROADCAST = 6,
    SOCK_TIMESTAMP = 7,
    SOCK_ZAPPED = 8,
    SOCK_USE_WRITE_QUEUE = 9,
    SOCK_DBG = 10,
    SOCK_RCVTSTAMP = 11,
    SOCK_RCVTSTAMPNS = 12,
    SOCK_LOCALROUTE = 13,
    SOCK_QUEUE_SHRUNK = 14,
    SOCK_TIMESTAMPING_TX_HARDWARE = 15,
    SOCK_TIMESTAMPING_TX_SOFTWARE = 16,
    SOCK_TIMESTAMPING_RX_HARDWARE = 17,
    SOCK_TIMESTAMPING_RX_SOFTWARE = 18,
    SOCK_TIMESTAMPING_SOFTWARE = 19,
    SOCK_TIMESTAMPING_RAW_HARDWARE = 20,
    SOCK_TIMESTAMPING_SYS_HARDWARE = 21
} ;
#line 457 "include/linux/mISDNif.h"
struct mISDN_sock {
   struct sock sk ;
   struct mISDNchannel ch ;
   u_int cmask ;
   struct mISDNdevice *dev ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 1487 "include/net/sock.h"
struct mISDNclock;
#line 498 "include/linux/mISDNif.h"
typedef int clockctl_func_t(void * , int  );
#line 499 "include/linux/mISDNif.h"
struct mISDNclock {
   struct list_head list ;
   char name[64U] ;
   int pri ;
   clockctl_func_t *ctl ;
   void *priv ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 574 "include/linux/mISDNif.h"
struct dchannel {
   struct mISDNdevice dev ;
   u_long Flags ;
   struct work_struct workq ;
   void (*phfunc)(struct dchannel * ) ;
   u_int state ;
   void *l1 ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff_head squeue ;
   struct sk_buff_head rqueue ;
   struct sk_buff *tx_skb ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 146 "include/linux/mISDNhw.h"
struct bchannel {
   struct mISDNchannel ch ;
   int nr ;
   u_long Flags ;
   struct work_struct workq ;
   u_int state ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff *next_skb ;
   struct sk_buff *tx_skb ;
   struct sk_buff_head rqueue ;
   int rcount ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.o.c"
struct __va_list_tag;
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.o.c"
typedef struct __va_list_tag __va_list_tag;
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_91 {
   atomic_long_t a ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_91 local_t;
#line 115 "include/linux/mISDNhw.h"
typedef int dchannel_l1callback(struct dchannel * , u_int  );
#line 117
struct layer1;
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
struct layer1 {
   u_long Flags ;
   struct FsmInst l1m ;
   struct FsmTimer timer ;
   int delay ;
   struct dchannel *dch ;
   dchannel_l1callback *dcb ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct manager {
   struct mISDNchannel ch ;
   struct mISDNchannel bcast ;
   u_long options ;
   struct list_head layer2 ;
   rwlock_t lock ;
   struct FsmInst deact ;
   struct FsmTimer datimer ;
   struct sk_buff_head sendq ;
   struct mISDNchannel *up ;
   u_int nextid ;
   u_int lastid ;
};
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct teimgr {
   int ri ;
   int rcnt ;
   struct FsmInst tei_m ;
   struct FsmTimer timer ;
   int tval ;
   int nval ;
   struct layer2 *l2 ;
   struct manager *mgr ;
};
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct laddr {
   u_char A ;
   u_char B ;
};
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 {
   struct list_head list ;
   struct mISDNchannel ch ;
   u_long flag ;
   int id ;
   struct mISDNchannel *up ;
   signed char sapi ;
   signed char tei ;
   struct laddr addr ;
   u_int maxlen ;
   struct teimgr *tm ;
   u_int vs ;
   u_int va ;
   u_int vr ;
   int rc ;
   u_int window ;
   u_int sow ;
   struct FsmInst l2m ;
   struct FsmTimer t200 ;
   struct FsmTimer t203 ;
   int T200 ;
   int N200 ;
   int T203 ;
   u_int next_id ;
   u_int down_id ;
   struct sk_buff *windowar[8U] ;
   struct sk_buff_head i_queue ;
   struct sk_buff_head ui_queue ;
   struct sk_buff_head down_queue ;
   struct sk_buff_head tmp_queue ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 239
enum hrtimer_restart;
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 35 "include/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 117 "include/linux/vmalloc.h"
struct miscdevice {
   int minor ;
   char const   *name ;
   struct file_operations  const  *fops ;
   struct list_head list ;
   struct device *parent ;
   struct device *this_device ;
};
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct mISDNtimerdev {
   int next_id ;
   struct list_head pending ;
   struct list_head expired ;
   wait_queue_head_t wait ;
   u_int work ;
   spinlock_t lock ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct mISDNtimer {
   struct list_head list ;
   struct mISDNtimerdev *dev ;
   struct timer_list tl ;
   int id ;
};
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
enum __anonenum_101 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 178 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 238
extern int printk(char const   *  , ...) ;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 54
extern char *strcpy(char * , char const   * ) ;
#line 51 "include/linux/list.h"
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 27 "include/linux/spinlock_api_smp.h"
extern void _read_lock(rwlock_t * ) ;
#line 41
extern unsigned long _write_lock_irqsave(rwlock_t * ) ;
#line 48
extern void _read_unlock(rwlock_t * ) ;
#line 60
extern void _write_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
#line 227 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 230
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 206
extern int add_uevent_var(struct kobj_uevent_env * , char const   *  , ...) ;
#line 218 "include/linux/slub_def.h"
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 221
void *ldv_kmem_cache_alloc_7(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 86 "include/linux/module.h"
extern struct module __this_module ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
void ldv_check_alloc_flags(gfp_t flags ) ;
#line 324 "include/linux/mISDNif.h"
__inline static int test_channelmap(u_int nr , u_char *map ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 326
  ______f.func = "test_channelmap";
#line 326
  ______f.file = "include/linux/mISDNif.h";
#line 326
  ______f.line = 326U;
#line 326
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 326
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 326
  ______r = nr <= 127U;
#line 326
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 326
  if (______r != 0) {
#line 327
    return ((int )*(map + (unsigned long )(nr >> 3)) & (1 << ((int )nr & 7)));
  } else {
#line 329
    return (0);
  }
}
}
#line 215 "include/linux/device.h"
extern int __class_register(struct class * , struct lock_class_key * ) ;
#line 217
extern void class_unregister(struct class * ) ;
#line 234
extern int class_for_each_device(struct class * , struct device * , void * , int (*)(struct device * ,
                                                                                     void * ) ) ;
#line 237
extern struct device *class_find_device(struct class * , struct device * , void * ,
                                        int (*)(struct device * , void * ) ) ;
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 427
  tmp = kobject_name(& dev->kobj);
#line 427
  return (tmp);
}
}
#line 430
extern int dev_set_name(struct device * , char const   *  , ...) ;
#line 452 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 454
  return ((void *)dev->driver_data);
}
}
#line 457 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 459
  dev->driver_data = data;
#line 460
  return;
}
}
#line 484
extern void device_initialize(struct device * ) ;
#line 485
extern int device_add(struct device * ) ;
#line 486
extern void device_del(struct device * ) ;
#line 547
extern void put_device(struct device * ) ;
#line 457 "include/linux/skbuff.h"
extern struct sk_buff *skb_clone(struct sk_buff * , gfp_t  ) ;
#line 461
struct sk_buff *ldv_skb_clone_14(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 463
extern struct sk_buff *skb_copy(struct sk_buff  const  * , gfp_t  ) ;
#line 467
struct sk_buff *ldv_skb_copy_16(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 471
extern int pskb_expand_head(struct sk_buff * , int  , int  , gfp_t  ) ;
#line 476
int ldv_pskb_expand_head_18(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) ;
#line 1459
extern struct sk_buff *__netdev_alloc_skb(struct net_device * , unsigned int  , gfp_t  ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_17(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) ;
#line 554 "include/linux/mISDNif.h"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) ;
#line 556
void mISDN_unregister_device(struct mISDNdevice *dev ) ;
#line 557
int mISDN_register_Bprotocol(struct Bprotocol *bp ) ;
#line 558
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) ;
#line 563 "include/linux/mISDNif.h"
__inline static struct mISDNdevice *dev_to_mISDN(struct device *dev ) 
{ 
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 565
  ______f.func = "dev_to_mISDN";
#line 565
  ______f.file = "include/linux/mISDNif.h";
#line 565
  ______f.line = 565U;
#line 565
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 565
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 565
  ______r = (unsigned long )dev != (unsigned long )((struct device *)0);
#line 565
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 565
  if (______r != 0) {
#line 566
    tmp = dev_get_drvdata((struct device  const  *)dev);
#line 566
    return ((struct mISDNdevice *)tmp);
  } else {
#line 568
    return (0);
  }
}
}
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
struct mISDNdevice *get_mdevice(u_int id ) ;
#line 19
int get_mdevice_count(void) ;
#line 54
int create_stack(struct mISDNdevice *dev ) ;
#line 58
void delete_stack(struct mISDNdevice *dev ) ;
#line 59
void mISDN_initstack(u_int *dp ) ;
#line 60
int misdn_sock_init(u_int *deb ) ;
#line 61
void misdn_sock_cleanup(void) ;
#line 65
u_int get_all_Bprotocols(void) ;
#line 66
struct Bprotocol *get_Bprotocol4mask(u_int m ) ;
#line 67
struct Bprotocol *get_Bprotocol4id(u_int id ) ;
#line 69
int mISDN_inittimer(u_int *deb ) ;
#line 70
void mISDN_timer_cleanup(void) ;
#line 72
int l1_init(u_int *deb ) ;
#line 73
void l1_cleanup(void) ;
#line 74
int Isdnl2_Init(u_int *deb ) ;
#line 75
void Isdnl2_cleanup(void) ;
#line 77
void mISDN_init_clock(u_int *dp ) ;
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static u_int debug  ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static u64 device_ids  ;
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static struct list_head Bprotocols  =    {& Bprotocols, & Bprotocols};
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static rwlock_t bp_lock  =    {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "bp_lock",
                                                                  0, 0UL}};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_dev_release(struct device *dev ) 
{ 


  {
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_id(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 57
  tmp = dev_to_mISDN(dev);
#line 57
  mdev = tmp;
#line 59
  ______f.func = "_show_id";
#line 59
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 59
  ______f.line = 59U;
#line 59
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 59
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 59
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 59
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 59
  if (______r != 0) {
#line 60
    return (-19L);
  } else {

  }
#line 61
  tmp___0 = sprintf(buf, "%d\n", mdev->id);
#line 61
  return ((ssize_t )tmp___0);
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_nrbchan(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 67
  tmp = dev_to_mISDN(dev);
#line 67
  mdev = tmp;
#line 69
  ______f.func = "_show_nrbchan";
#line 69
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 69
  ______f.line = 69U;
#line 69
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 69
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 69
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 69
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 69
  if (______r != 0) {
#line 70
    return (-19L);
  } else {

  }
#line 71
  tmp___0 = sprintf(buf, "%d\n", mdev->nrbchan);
#line 71
  return ((ssize_t )tmp___0);
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_d_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 77
  tmp = dev_to_mISDN(dev);
#line 77
  mdev = tmp;
#line 79
  ______f.func = "_show_d_protocols";
#line 79
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 79
  ______f.line = 79U;
#line 79
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 79
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 79
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 79
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 79
  if (______r != 0) {
#line 80
    return (-19L);
  } else {

  }
#line 81
  tmp___0 = sprintf(buf, "%d\n", mdev->Dprotocols);
#line 81
  return ((ssize_t )tmp___0);
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_b_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_int tmp___0 ;
  int tmp___1 ;

  {
#line 87
  tmp = dev_to_mISDN(dev);
#line 87
  mdev = tmp;
#line 89
  ______f.func = "_show_b_protocols";
#line 89
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 89
  ______f.line = 89U;
#line 89
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 89
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 89
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 89
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 89
  if (______r != 0) {
#line 90
    return (-19L);
  } else {

  }
#line 91
  tmp___0 = get_all_Bprotocols();
#line 91
  tmp___1 = sprintf(buf, "%d\n", mdev->Bprotocols | tmp___0);
#line 91
  return ((ssize_t )tmp___1);
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_protocol(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 97
  tmp = dev_to_mISDN(dev);
#line 97
  mdev = tmp;
#line 99
  ______f.func = "_show_protocol";
#line 99
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 99
  ______f.line = 99U;
#line 99
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 99
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 99
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 99
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 99
  if (______r != 0) {
#line 100
    return (-19L);
  } else {

  }
#line 101
  tmp___0 = sprintf(buf, "%d\n", mdev->D.protocol);
#line 101
  return ((ssize_t )tmp___0);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_name(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  char const   *tmp ;
  size_t tmp___0 ;

  {
#line 107
  tmp = dev_name((struct device  const  *)dev);
#line 107
  strcpy(buf, tmp);
#line 108
  tmp___0 = strlen((char const   *)buf);
#line 108
  return ((ssize_t )tmp___0);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_channelmap(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  char *bp ;
  int i ;
  char *tmp___0 ;
  int tmp___1 ;

  {
#line 135
  tmp = dev_to_mISDN(dev);
#line 135
  mdev = tmp;
#line 136
  bp = buf;
#line 139
  i = 0;
#line 139
  goto ldv_34749;
  ldv_34748: 
#line 140
  tmp___0 = bp;
#line 140
  bp = bp + 1;
#line 140
  tmp___1 = test_channelmap((u_int )i, (u_char *)(& mdev->channelmap));
#line 140
  *tmp___0 = tmp___1 != 0 ? 49 : 48;
#line 139
  i = i + 1;
  ldv_34749: ;
#line 139
  if ((u_int )i <= mdev->nrbchan) {
#line 140
    goto ldv_34748;
  } else {

  }

#line 142
  return ((long )bp - (long )buf);
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static struct device_attribute mISDN_dev_attrs[8U]  = {      {{"id", 0, 292U}, & _show_id, 0}, 
        {{"d_protocols", 0, 292U}, & _show_d_protocols, 0}, 
        {{"b_protocols", 0, 292U}, & _show_b_protocols, 0}, 
        {{"protocol", 0, 292U}, & _show_protocol, 0}, 
        {{"channelmap", 0, 292U}, & _show_channelmap, 0}, 
        {{"nrbchan", 0, 292U}, & _show_nrbchan, 0}, 
        {{"name", 0, 292U}, & _show_name, 0}};
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static int mISDN_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;

  {
#line 160
  tmp = dev_to_mISDN(dev);
#line 160
  mdev = tmp;
#line 162
  ______f.func = "mISDN_uevent";
#line 162
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 162
  ______f.line = 162U;
#line 162
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 162
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 162
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 162
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 162
  if (______r != 0) {
#line 163
    return (0);
  } else {

  }
#line 165
  ______f___0.func = "mISDN_uevent";
#line 165
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 165
  ______f___0.line = 165U;
#line 165
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 165
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 165
  tmp___0 = add_uevent_var(env, "nchans=%d", mdev->nrbchan);
#line 165
  ______r___0 = tmp___0 != 0;
#line 165
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 165
  if (______r___0 != 0) {
#line 166
    return (-12);
  } else {

  }
#line 168
  return (0);
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_class_release(struct class *cls ) 
{ 


  {
#line 174
  return;
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static struct class mISDN_class  = 
#line 177
     {"mISDN", & __this_module, 0, (struct device_attribute *)(& mISDN_dev_attrs), 0,
    & mISDN_uevent, & mISDN_class_release, & mISDN_dev_release, 0, 0, 0, 0};
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static int _get_mdevice(struct device *dev , void *id ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 191
  tmp = dev_to_mISDN(dev);
#line 191
  mdev = tmp;
#line 193
  ______f.func = "_get_mdevice";
#line 193
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 193
  ______f.line = 193U;
#line 193
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 193
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 193
  ______r = (unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0);
#line 193
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 193
  if (______r != 0) {
#line 194
    return (0);
  } else {

  }
#line 195
  ______f___0.func = "_get_mdevice";
#line 195
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 195
  ______f___0.line = 195U;
#line 195
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 195
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 195
  ______r___0 = mdev->id != *((u_int *)id);
#line 195
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 195
  if (______r___0 != 0) {
#line 196
    return (0);
  } else {

  }
#line 197
  return (1);
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct mISDNdevice *get_mdevice(u_int id ) 
{ 
  struct device *tmp ;
  struct mISDNdevice *tmp___0 ;

  {
#line 203
  tmp = class_find_device(& mISDN_class, 0, (void *)(& id), & _get_mdevice);
#line 203
  tmp___0 = dev_to_mISDN(tmp);
#line 203
  return (tmp___0);
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static int _get_mdevice_count(struct device *dev , void *cnt ) 
{ 


  {
#line 210
  *((int *)cnt) = *((int *)cnt) + 1;
#line 211
  return (0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
int get_mdevice_count(void) 
{ 
  int cnt ;

  {
#line 217
  cnt = 0;
#line 219
  class_for_each_device(& mISDN_class, 0, (void *)(& cnt), & _get_mdevice_count);
#line 220
  return (cnt);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static int get_free_devid(void) 
{ 
  u_int i ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 228
  i = 0U;
#line 228
  goto ldv_34801;
  ldv_34800: 
#line 229
  ______f.func = "get_free_devid";
#line 229
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 229
  ______f.line = 229U;
#line 229
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 229
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 229
  tmp = test_and_set_bit((int )i, (unsigned long volatile   *)(& device_ids));
#line 229
  ______r = tmp == 0;
#line 229
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 229
  if (______r != 0) {
#line 230
    goto ldv_34799;
  } else {

  }
#line 228
  i = i + (u_int )1;
  ldv_34801: ;
#line 228
  if (i <= 63U) {
#line 229
    goto ldv_34800;
  } else {

  }
  ldv_34799: 
#line 231
  ______f___0.func = "get_free_devid";
#line 231
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 231
  ______f___0.line = 231U;
#line 231
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 231
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 231
  ______r___0 = i > 63U;
#line 231
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 231
  if (______r___0 != 0) {
#line 232
    return (-16);
  } else {

  }
#line 233
  return ((int )i);
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) 
{ 
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  char const   *tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 242
  err = get_free_devid();
#line 243
  ______f.func = "mISDN_register_device";
#line 243
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 243
  ______f.line = 243U;
#line 243
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 243
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 243
  ______r = err < 0;
#line 243
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 243
  if (______r != 0) {
#line 244
    goto error1;
  } else {

  }
#line 245
  dev->id = (u_int )err;
#line 247
  device_initialize(& dev->dev);
#line 248
  ______f___0.func = "mISDN_register_device";
#line 248
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 248
  ______f___0.line = 248U;
#line 248
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 248
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 248
  ______r___0 = (unsigned long )name != (unsigned long )((char *)0) && (int )((signed char )*name) != 0;
#line 248
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 248
  if (______r___0 != 0) {
#line 249
    dev_set_name(& dev->dev, "%s", name);
  } else {
#line 251
    dev_set_name(& dev->dev, "mISDN%d", dev->id);
  }
#line 252
  ______f___1.func = "mISDN_register_device";
#line 252
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 252
  ______f___1.line = 252U;
#line 252
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 252
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 252
  ______r___1 = (debug & 255U) != 0U;
#line 252
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 252
  if (______r___1 != 0) {
#line 253
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 253
    printk("<7>mISDN_register %s %d\n", tmp, dev->id);
  } else {

  }
#line 255
  err = create_stack(dev);
#line 256
  ______f___2.func = "mISDN_register_device";
#line 256
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 256
  ______f___2.line = 256U;
#line 256
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 256
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 256
  ______r___2 = err != 0;
#line 256
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 256
  if (______r___2 != 0) {
#line 257
    goto error1;
  } else {

  }
#line 259
  dev->dev.class = & mISDN_class;
#line 260
  dev->dev.platform_data = (void *)dev;
#line 261
  dev->dev.parent = parent;
#line 262
  dev_set_drvdata(& dev->dev, (void *)dev);
#line 264
  err = device_add(& dev->dev);
#line 265
  ______f___3.func = "mISDN_register_device";
#line 265
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 265
  ______f___3.line = 265U;
#line 265
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 265
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 265
  ______r___3 = err != 0;
#line 265
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 265
  if (______r___3 != 0) {
#line 266
    goto error3;
  } else {

  }
#line 267
  return (0);
  error3: 
#line 270
  delete_stack(dev);
#line 271
  return (err);
  error1: ;
#line 273
  return (err);
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
void mISDN_unregister_device(struct mISDNdevice *dev ) 
{ 
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 280
  ______f.func = "mISDN_unregister_device";
#line 280
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 280
  ______f.line = 280U;
#line 280
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 280
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 280
  ______r = (debug & 255U) != 0U;
#line 280
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 280
  if (______r != 0) {
#line 281
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 281
    printk("<7>mISDN_unregister %s %d\n", tmp, dev->id);
  } else {

  }
#line 284
  device_del(& dev->dev);
#line 285
  dev_set_drvdata(& dev->dev, 0);
#line 287
  test_and_clear_bit((int )dev->id, (unsigned long volatile   *)(& device_ids));
#line 288
  delete_stack(dev);
#line 289
  put_device(& dev->dev);
#line 290
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
u_int get_all_Bprotocols(void) 
{ 
  struct Bprotocol *bp ;
  u_int m ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 297
  m = 0U;
#line 299
  _read_lock(& bp_lock);
#line 300
  __mptr = (struct list_head  const  *)Bprotocols.next;
#line 300
  bp = (struct Bprotocol *)__mptr;
#line 300
  goto ldv_34860;
  ldv_34859: 
#line 301
  m = bp->Bprotocols | m;
#line 300
  __mptr___0 = (struct list_head  const  *)bp->list.next;
#line 300
  bp = (struct Bprotocol *)__mptr___0;
  ldv_34860: 
#line 300
  __builtin_prefetch((void const   *)bp->list.next);
#line 300
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
#line 301
    goto ldv_34859;
  } else {

  }
#line 302
  _read_unlock(& bp_lock);
#line 303
  return (m);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct Bprotocol *get_Bprotocol4mask(u_int m ) 
{ 
  struct Bprotocol *bp ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;

  {
#line 311
  _read_lock(& bp_lock);
#line 312
  __mptr = (struct list_head  const  *)Bprotocols.next;
#line 312
  bp = (struct Bprotocol *)__mptr;
#line 312
  goto ldv_34875;
  ldv_34874: 
#line 313
  ______f.func = "get_Bprotocol4mask";
#line 313
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 313
  ______f.line = 313U;
#line 313
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 313
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 313
  ______r = (bp->Bprotocols & m) != 0U;
#line 313
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 313
  if (______r != 0) {
#line 314
    _read_unlock(& bp_lock);
#line 315
    return (bp);
  } else {

  }
#line 312
  __mptr___0 = (struct list_head  const  *)bp->list.next;
#line 312
  bp = (struct Bprotocol *)__mptr___0;
  ldv_34875: 
#line 312
  __builtin_prefetch((void const   *)bp->list.next);
#line 312
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
#line 313
    goto ldv_34874;
  } else {

  }
#line 317
  _read_unlock(& bp_lock);
#line 318
  return (0);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct Bprotocol *get_Bprotocol4id(u_int id ) 
{ 
  u_int m ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct Bprotocol *tmp ;

  {
#line 326
  ______f.func = "get_Bprotocol4id";
#line 326
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 326
  ______f.line = 326U;
#line 326
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 326
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 326
  ______r = id <= 31U || id > 63U;
#line 326
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 326
  if (______r != 0) {
#line 327
    printk("<4>%s id not in range  %d\n", "get_Bprotocol4id", id);
#line 329
    return (0);
  } else {

  }
#line 331
  m = (u_int )(1 << ((int )id & 31));
#line 332
  tmp = get_Bprotocol4mask(m);
#line 332
  return (tmp);
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
int mISDN_register_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  struct Bprotocol *old ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 341
  ______f.func = "mISDN_register_Bprotocol";
#line 341
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 341
  ______f.line = 341U;
#line 341
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 341
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 341
  ______r = (debug & 255U) != 0U;
#line 341
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 341
  if (______r != 0) {
#line 342
    printk("<7>%s: %s/%x\n", "mISDN_register_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 344
  old = get_Bprotocol4mask(bp->Bprotocols);
#line 345
  ______f___0.func = "mISDN_register_Bprotocol";
#line 345
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 345
  ______f___0.line = 345U;
#line 345
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 345
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 345
  ______r___0 = (unsigned long )old != (unsigned long )((struct Bprotocol *)0);
#line 345
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 345
  if (______r___0 != 0) {
#line 346
    printk("<4>register duplicate protocol old %s/%x new %s/%x\n", old->name, old->Bprotocols,
           bp->name, bp->Bprotocols);
#line 349
    return (-16);
  } else {

  }
#line 351
  flags = _write_lock_irqsave(& bp_lock);
#line 352
  list_add_tail(& bp->list, & Bprotocols);
#line 353
  _write_unlock_irqrestore(& bp_lock, flags);
#line 354
  return (0);
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 363
  ______f.func = "mISDN_unregister_Bprotocol";
#line 363
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 363
  ______f.line = 363U;
#line 363
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 363
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 363
  ______r = (debug & 255U) != 0U;
#line 363
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 363
  if (______r != 0) {
#line 364
    printk("<7>%s: %s/%x\n", "mISDN_unregister_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 366
  flags = _write_lock_irqsave(& bp_lock);
#line 367
  list_del(& bp->list);
#line 368
  _write_unlock_irqrestore(& bp_lock, flags);
#line 369
  return;
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static int mISDNInit(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 377
  printk("<6>Modular ISDN core version %d.%d.%d\n", 1, 1, 20);
#line 379
  mISDN_init_clock(& debug);
#line 380
  mISDN_initstack(& debug);
#line 381
  tmp = __class_register(& mISDN_class, & __key);
#line 381
  err = tmp;
#line 382
  ______f.func = "mISDNInit";
#line 382
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 382
  ______f.line = 382U;
#line 382
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 382
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 382
  ______r = err != 0;
#line 382
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 382
  if (______r != 0) {
#line 383
    goto error1;
  } else {

  }
#line 384
  err = mISDN_inittimer(& debug);
#line 385
  ______f___0.func = "mISDNInit";
#line 385
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 385
  ______f___0.line = 385U;
#line 385
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 385
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 385
  ______r___0 = err != 0;
#line 385
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 385
  if (______r___0 != 0) {
#line 386
    goto error2;
  } else {

  }
#line 387
  err = l1_init(& debug);
#line 388
  ______f___1.func = "mISDNInit";
#line 388
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 388
  ______f___1.line = 388U;
#line 388
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 388
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 388
  ______r___1 = err != 0;
#line 388
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 388
  if (______r___1 != 0) {
#line 389
    goto error3;
  } else {

  }
#line 390
  err = Isdnl2_Init(& debug);
#line 391
  ______f___2.func = "mISDNInit";
#line 391
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 391
  ______f___2.line = 391U;
#line 391
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 391
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 391
  ______r___2 = err != 0;
#line 391
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 391
  if (______r___2 != 0) {
#line 392
    goto error4;
  } else {

  }
#line 393
  err = misdn_sock_init(& debug);
#line 394
  ______f___3.func = "mISDNInit";
#line 394
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 394
  ______f___3.line = 394U;
#line 394
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 394
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 394
  ______r___3 = err != 0;
#line 394
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 394
  if (______r___3 != 0) {
#line 395
    goto error5;
  } else {

  }
#line 396
  return (0);
  error5: 
#line 399
  Isdnl2_cleanup();
  error4: 
#line 401
  l1_cleanup();
  error3: 
#line 403
  mISDN_timer_cleanup();
  error2: 
#line 405
  class_unregister(& mISDN_class);
  error1: ;
#line 407
  return (err);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_cleanup(void) 
{ 


  {
#line 412
  misdn_sock_cleanup();
#line 413
  Isdnl2_cleanup();
#line 414
  l1_cleanup();
#line 415
  mISDN_timer_cleanup();
#line 416
  class_unregister(& mISDN_class);
#line 418
  printk("<7>mISDNcore unloaded\n");
#line 419
  return;
}
}
#line 441
extern void ldv_check_final_state(void) ;
#line 450
extern void ldv_initialize(void) ;
#line 453
extern void ldv_handler_precall(void) ;
#line 456
extern int nondet_int(void) ;
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
void main(void) 
{ 
  struct device *var_group1 ;
  struct kobj_uevent_env *var_group2 ;
  struct class *var_group3 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 518
  LDV_IN_INTERRUPT = 1;
#line 527
  ldv_initialize();
#line 541
  ldv_handler_precall();
#line 542
  ______f.func = "main";
#line 542
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared";
#line 542
  ______f.line = 542U;
#line 542
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 542
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 542
  tmp = mISDNInit();
#line 542
  ______r = tmp != 0;
#line 542
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 542
  if (______r != 0) {
#line 543
    goto ldv_final;
  } else {

  }
#line 547
  goto ldv_34999;
  ldv_34998: 
#line 550
  tmp___0 = nondet_int();
#line 550
  switch (tmp___0) {
  case 0: 
#line 565
  ldv_handler_precall();
#line 566
  mISDN_uevent(var_group1, var_group2);
#line 578
  goto ldv_34994;
  case 1: 
#line 589
  ldv_handler_precall();
#line 590
  mISDN_dev_release(var_group1);
#line 605
  goto ldv_34994;
  case 2: 
#line 620
  ldv_handler_precall();
#line 621
  mISDN_class_release(var_group3);
#line 632
  goto ldv_34994;
  default: ;
#line 633
  goto ldv_34994;
  }
  ldv_34994: ;
  ldv_34999: 
#line 547
  tmp___1 = nondet_int();
#line 547
  if (tmp___1 != 0) {
#line 548
    goto ldv_34998;
  } else {

  }

#line 653
  ldv_handler_precall();
#line 654
  mISDN_cleanup();
  ldv_final: 
#line 657
  ldv_check_final_state();
#line 660
  return;
}
}
#line 675 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 681
  ldv_check_alloc_flags(ldv_func_arg1);
#line 683
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 683
  return (tmp);
}
}
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
void *ldv_kmem_cache_alloc_7(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 736
  ldv_check_alloc_flags(ldv_func_arg2);
#line 738
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 739
  return ((void *)0);
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct sk_buff *ldv_skb_clone_14(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 812
  ldv_check_alloc_flags(ldv_func_arg2);
#line 814
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 814
  return (tmp);
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct sk_buff *ldv_skb_copy_16(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 834
  ldv_check_alloc_flags(ldv_func_arg2);
#line 836
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 836
  return (tmp);
}
}
#line 839 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_17(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 846
  ldv_check_alloc_flags(ldv_func_arg3);
#line 848
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 848
  return (tmp);
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/core.c.prepared"
int ldv_pskb_expand_head_18(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 859
  ldv_check_alloc_flags(ldv_func_arg4);
#line 861
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 861
  return (tmp);
}
}
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_26(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 157 "include/linux/timer.h"
__inline static int timer_pending(struct timer_list  const  *timer ) 
{ 


  {
#line 159
  return ((unsigned long )timer->entry.next != (unsigned long )((struct list_head */* const  */)0));
}
}
#line 163
extern int del_timer(struct timer_list * ) ;
#line 224
extern void add_timer(struct timer_list * ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_31(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) ;
#line 59
void mISDN_FsmFree(struct Fsm *fsm ) ;
#line 60
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) ;
#line 61
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) ;
#line 62
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) ;
#line 63
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) ;
#line 64
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) ;
#line 65
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) ;
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) 
{ 
  int i ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 49
  tmp = kzalloc(((unsigned long )fsm->state_count * (unsigned long )fsm->event_count) * 8UL,
                208U);
#line 49
  fsm->jumpmatrix = (FSMFNPTR (**)(struct FsmInst * , int  , void * ))tmp;
#line 52
  i = 0;
#line 52
  goto ldv_12709;
  ldv_12708: 
#line 53
  ______f.func = "mISDN_FsmNew";
#line 53
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 53
  ______f.line = 54U;
#line 53
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 53
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 53
  ______r = (fnlist + (unsigned long )i)->state >= fsm->state_count || (fnlist + (unsigned long )i)->event >= fsm->event_count;
#line 53
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 53
  if (______r != 0) {
#line 55
    printk("<3>mISDN_FsmNew Error: %d st(%ld/%ld) ev(%ld/%ld)\n", i, (long )(fnlist + (unsigned long )i)->state,
           (long )fsm->state_count, (long )(fnlist + (unsigned long )i)->event, (long )fsm->event_count);
  } else {
#line 60
    *(fsm->jumpmatrix + (unsigned long )(fsm->state_count * (fnlist + (unsigned long )i)->event + (fnlist + (unsigned long )i)->state)) = (fnlist + (unsigned long )i)->routine;
  }
#line 52
  i = i + 1;
  ldv_12709: ;
#line 52
  if (i < fncount) {
#line 53
    goto ldv_12708;
  } else {

  }

#line 57
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmFree(struct Fsm *fsm ) 
{ 


  {
#line 68
  kfree((void const   *)fsm->jumpmatrix);
#line 69
  return;
}
}
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) 
{ 
  void (*r)(struct FsmInst * , int  , void * ) ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 77
  ______f.func = "mISDN_FsmEvent";
#line 77
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 77
  ______f.line = 78U;
#line 77
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 77
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 77
  ______r = fi->state >= (fi->fsm)->state_count || (fi->fsm)->event_count <= event;
#line 77
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 77
  if (______r != 0) {
#line 79
    printk("<3>mISDN_FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n", (long )fi->state, (long )(fi->fsm)->state_count,
           event, (long )(fi->fsm)->event_count);
#line 83
    return (1);
  } else {

  }
#line 85
  r = *((fi->fsm)->jumpmatrix + (unsigned long )((fi->fsm)->state_count * event + fi->state));
#line 86
  ______f___2.func = "mISDN_FsmEvent";
#line 86
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 86
  ______f___2.line = 86U;
#line 86
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 86
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 86
  ______r___2 = (unsigned long )r != (unsigned long )((void (*)(struct FsmInst * ,
                                                                int  , void * ))0);
#line 86
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 86
  if (______r___2 != 0) {
#line 87
    ______f___0.func = "mISDN_FsmEvent";
#line 87
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 87
    ______f___0.line = 87U;
#line 87
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 87
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 87
    ______r___0 = fi->debug != 0;
#line 87
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 87
    if (______r___0 != 0) {
#line 88
      (*(fi->printdebug))(fi, (char *)"State %s Event %s", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
#line 91
    (*r)(fi, event, arg);
#line 92
    return (0);
  } else {
#line 94
    ______f___1.func = "mISDN_FsmEvent";
#line 94
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 94
    ______f___1.line = 94U;
#line 94
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 94
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 94
    ______r___1 = fi->debug != 0;
#line 94
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 94
    if (______r___1 != 0) {
#line 95
      (*(fi->printdebug))(fi, (char *)"State %s Event %s no action", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
#line 98
    return (1);
  }
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 106
  fi->state = newstate;
#line 107
  ______f.func = "mISDN_FsmChangeState";
#line 107
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 107
  ______f.line = 107U;
#line 107
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 107
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 107
  ______r = fi->debug != 0;
#line 107
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 107
  if (______r != 0) {
#line 108
    (*(fi->printdebug))(fi, (char *)"ChangeState %s", *((fi->fsm)->strState + (unsigned long )newstate));
  } else {

  }
#line 110
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
static void FsmExpireTimer(struct FsmTimer *ft ) 
{ 


  {
#line 120
  mISDN_FsmEvent(ft->fi, ft->event, ft->arg);
#line 121
  return;
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) 
{ 
  struct lock_class_key __key ;

  {
#line 126
  ft->fi = fi;
#line 127
  ft->tl.function = (void (*)(unsigned long  ))(& FsmExpireTimer);
#line 128
  ft->tl.data = (unsigned long )ft;
#line 133
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 135
  return;
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) 
{ 


  {
#line 145
  del_timer(& ft->tl);
#line 146
  return;
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  struct lock_class_key __key ;

  {
#line 160
  ______f___0.func = "mISDN_FsmAddTimer";
#line 160
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 160
  ______f___0.line = 160U;
#line 160
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 160
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 160
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
#line 160
  ______r___0 = tmp != 0;
#line 160
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 160
  if (______r___0 != 0) {
#line 161
    ______f.func = "mISDN_FsmAddTimer";
#line 161
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 161
    ______f.line = 161U;
#line 161
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 161
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 161
    ______r = (ft->fi)->debug != 0;
#line 161
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 161
    if (______r != 0) {
#line 162
      printk("<4>mISDN_FsmAddTimer: timer already active!\n");
#line 164
      (*((ft->fi)->printdebug))(ft->fi, (char *)"mISDN_FsmAddTimer already active!");
    } else {

    }
#line 167
    return (-1);
  } else {

  }
#line 169
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 170
  ft->event = event;
#line 171
  ft->arg = arg;
#line 172
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
#line 173
  add_timer(& ft->tl);
#line 174
  return (0);
}
}
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  struct lock_class_key __key ;

  {
#line 189
  ______f.func = "mISDN_FsmRestartTimer";
#line 189
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared";
#line 189
  ______f.line = 189U;
#line 189
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 189
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 189
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
#line 189
  ______r = tmp != 0;
#line 189
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 189
  if (______r != 0) {
#line 190
    del_timer(& ft->tl);
  } else {

  }
#line 191
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 192
  ft->event = event;
#line 193
  ft->arg = arg;
#line 194
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
#line 195
  add_timer(& ft->tl);
#line 196
  return;
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
unsigned long ldv___get_free_pages_26(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 216
  ldv_check_alloc_flags(ldv_func_arg1);
#line 218
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 218
  return (tmp);
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
void *ldv_kmem_cache_alloc_31(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 271
  ldv_check_alloc_flags(ldv_func_arg2);
#line 273
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 274
  return ((void *)0);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/fsm.c.prepared"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 282
  ldv_check_alloc_flags(flags);
#line 283
  return ((void *)0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 81 "include/linux/compiler.h"
extern void ftrace_likely_update(struct ftrace_branch_data * , int  , int  ) ;
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 151 "include/linux/kernel.h"
extern void might_fault(void) ;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 557 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 559
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 567 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 569
  next = n->next;
#line 570
  pprev = n->pprev;
#line 571
  *pprev = next;
#line 572
  ______f.func = "__hlist_del";
#line 572
  ______f.file = "include/linux/list.h";
#line 572
  ______f.line = 572U;
#line 572
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 572
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 572
  ______r = (unsigned long )next != (unsigned long )((struct hlist_node *)0);
#line 572
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 572
  if (______r != 0) {
#line 573
    next->pprev = pprev;
  } else {

  }
#line 574
  return;
}
}
#line 591 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 593
  first = h->first;
#line 594
  n->next = first;
#line 595
  ______f.func = "hlist_add_head";
#line 595
  ______f.file = "include/linux/list.h";
#line 595
  ______f.line = 595U;
#line 595
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 595
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 595
  ______r = (unsigned long )first != (unsigned long )((struct hlist_node *)0);
#line 595
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 595
  if (______r != 0) {
#line 596
    first->pprev = & n->next;
  } else {

  }
#line 597
  h->first = n;
#line 598
  n->pprev = & h->first;
#line 599
  return;
}
}
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 87
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 90
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 100
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
#line 103
  return;
}
}
#line 113 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 117
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
#line 120
  return ((unsigned int )c != 0U);
}
}
#line 30 "include/linux/spinlock_api_smp.h"
extern void _read_lock_bh(rwlock_t * ) ;
#line 31
extern void _write_lock_bh(rwlock_t * ) ;
#line 51
extern void _read_unlock_bh(rwlock_t * ) ;
#line 52
extern void _write_unlock_bh(rwlock_t * ) ;
#line 178 "include/linux/time.h"
extern struct timeval ns_to_timeval(s64 const    ) ;
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_37(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_42(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 312 "include/linux/socket.h"
extern int memcpy_fromiovec(unsigned char * , struct iovec * , int  ) ;
#line 326
extern int put_cmsg(struct msghdr * , int  , int  , int  , void * ) ;
#line 213 "include/linux/net.h"
extern int sock_register(struct net_proto_family  const  * ) ;
#line 214
extern void sock_unregister(int  ) ;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 24
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 491 "include/linux/device.h"
extern int device_rename(struct device * , char * ) ;
#line 307 "include/linux/hrtimer.h"
extern ktime_t ktime_get_real(void) ;
#line 429 "include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff * ) ;
#line 432
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
#line 434 "include/linux/skbuff.h"
__inline static struct sk_buff *ldv_alloc_skb_46(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
#line 437
  tmp = __alloc_skb(size, priority, 0, -1);
#line 437
  return (tmp);
}
}
#line 434
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) ;
#line 461
struct sk_buff *ldv_skb_clone_49(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_51(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 476
int ldv_pskb_expand_head_53(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) ;
#line 958
extern void skb_queue_head(struct sk_buff_head * , struct sk_buff * ) ;
#line 1108
extern unsigned char *skb_put(struct sk_buff * , unsigned int  ) ;
#line 1118
extern unsigned char *skb_push(struct sk_buff * , unsigned int  ) ;
#line 1126
extern unsigned char *skb_pull(struct sk_buff * , unsigned int  ) ;
#line 1189 "include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
#line 1191
  skb->data = skb->data + (unsigned long )len;
#line 1192
  skb->tail = skb->tail + (sk_buff_data_t )len;
#line 1193
  return;
}
}
#line 1428
extern void skb_queue_purge(struct sk_buff_head * ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_52(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) ;
#line 1709
extern struct sk_buff *skb_recv_datagram(struct sock * , unsigned int  , int  , int * ) ;
#line 1711
extern unsigned int datagram_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
#line 1713
extern int skb_copy_datagram_iovec(struct sk_buff  const  * , int  , struct iovec * ,
                                   int  ) ;
#line 1729
extern void skb_free_datagram(struct sock * , struct sk_buff * ) ;
#line 1813 "include/linux/skbuff.h"
__inline static void skb_get_timestamp(struct sk_buff  const  *skb , struct timeval *stamp ) 
{ 


  {
#line 1816
  *stamp = ns_to_timeval(skb->tstamp.tv64);
#line 1817
  return;
}
}
#line 1825 "include/linux/skbuff.h"
__inline static void __net_timestamp(struct sk_buff *skb ) 
{ 


  {
#line 1827
  skb->tstamp = ktime_get_real();
#line 1828
  return;
}
}
#line 334 "include/net/sock.h"
__inline static int sk_unhashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
#line 336
  tmp = hlist_unhashed(& sk->__sk_common.ldv_33463.skc_node);
#line 336
  return (tmp);
}
}
#line 339 "include/net/sock.h"
__inline static int sk_hashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
#line 341
  tmp = sk_unhashed(sk);
#line 341
  return (tmp == 0);
}
}
#line 344 "include/net/sock.h"
__inline static void sk_node_init(struct hlist_node *node ) 
{ 


  {
#line 346
  node->pprev = 0;
#line 347
  return;
}
}
#line 354 "include/net/sock.h"
__inline static void __sk_del_node(struct sock *sk ) 
{ 


  {
#line 356
  __hlist_del(& sk->__sk_common.ldv_33463.skc_node);
#line 357
  return;
}
}
#line 359 "include/net/sock.h"
__inline static int __sk_del_node_init(struct sock *sk ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 361
  ______f.func = "__sk_del_node_init";
#line 361
  ______f.file = "include/net/sock.h";
#line 361
  ______f.line = 361U;
#line 361
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 361
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 361
  tmp = sk_hashed((struct sock  const  *)sk);
#line 361
  ______r = tmp != 0;
#line 361
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 361
  if (______r != 0) {
#line 362
    __sk_del_node(sk);
#line 363
    sk_node_init(& sk->__sk_common.ldv_33463.skc_node);
#line 364
    return (1);
  } else {

  }
#line 366
  return (0);
}
}
#line 375 "include/net/sock.h"
__inline static void sock_hold(struct sock *sk ) 
{ 


  {
#line 377
  atomic_inc(& sk->__sk_common.skc_refcnt);
#line 378
  return;
}
}
#line 383 "include/net/sock.h"
__inline static void __sock_put(struct sock *sk ) 
{ 


  {
#line 385
  atomic_dec(& sk->__sk_common.skc_refcnt);
#line 386
  return;
}
}
#line 388 "include/net/sock.h"
__inline static int sk_del_node_init(struct sock *sk ) 
{ 
  int rc ;
  int tmp ;
  int __ret_warn_on ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  long tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 390
  tmp = __sk_del_node_init(sk);
#line 390
  rc = tmp;
#line 392
  ______f___2.func = "sk_del_node_init";
#line 392
  ______f___2.file = "include/net/sock.h";
#line 392
  ______f___2.line = 392U;
#line 392
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 392
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 392
  ______r___2 = rc != 0;
#line 392
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 392
  if (______r___2 != 0) {
#line 394
    __ret_warn_on = (int )sk->__sk_common.skc_refcnt.counter == 1;
#line 394
    ______f.func = "sk_del_node_init";
#line 394
    ______f.file = "include/net/sock.h";
#line 394
    ______f.line = 394U;
#line 394
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 394
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 394
    ______f___0.func = "sk_del_node_init";
#line 394
    ______f___0.file = "include/net/sock.h";
#line 394
    ______f___0.line = 394U;
#line 394
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 394
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 394
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 1L);
#line 394
    ______r___0 = (int )tmp___0;
#line 394
    ftrace_likely_update(& ______f___0, ______r___0, 0);
#line 394
    ______r = ______r___0 != 0;
#line 394
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 394
    if (______r != 0) {
#line 394
      warn_slowpath_null("include/net/sock.h", 394);
    } else {

    }
#line 394
    ______f___1.func = "sk_del_node_init";
#line 394
    ______f___1.file = "include/net/sock.h";
#line 394
    ______f___1.line = 394U;
#line 394
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 394
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 394
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 1L);
#line 394
    ______r___1 = (int )tmp___1;
#line 394
    ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 395
    __sock_put(sk);
  } else {

  }
#line 397
  return (rc);
}
}
#line 421 "include/net/sock.h"
__inline static void __sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 423
  hlist_add_head(& sk->__sk_common.ldv_33463.skc_node, list);
#line 424
  return;
}
}
#line 426 "include/net/sock.h"
__inline static void sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 428
  sock_hold(sk);
#line 429
  __sk_add_node(sk, list);
#line 430
  return;
}
}
#line 505 "include/net/sock.h"
__inline static void sock_set_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 507
  __set_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
#line 508
  return;
}
}
#line 510 "include/net/sock.h"
__inline static void sock_reset_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 512
  __clear_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
#line 513
  return;
}
}
#line 910
extern void lock_sock_nested(struct sock * , int  ) ;
#line 912 "include/net/sock.h"
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
#line 914
  lock_sock_nested(sk, 0);
#line 915
  return;
}
}
#line 917
extern void release_sock(struct sock * ) ;
#line 926
extern struct sock *sk_alloc(struct net * , int  , gfp_t  , struct proto * ) ;
#line 929
extern void sk_free(struct sock * ) ;
#line 970
extern int sock_no_connect(struct socket * , struct sockaddr * , int  , int  ) ;
#line 972
extern int sock_no_socketpair(struct socket * , struct socket * ) ;
#line 974
extern int sock_no_accept(struct socket * , struct socket * , int  ) ;
#line 976
extern int sock_no_getname(struct socket * , struct sockaddr * , int * , int  ) ;
#line 978
extern unsigned int sock_no_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
#line 982
extern int sock_no_listen(struct socket * , int  ) ;
#line 983
extern int sock_no_shutdown(struct socket * , int  ) ;
#line 984
extern int sock_no_getsockopt(struct socket * , int  , int  , char * , int * ) ;
#line 986
extern int sock_no_setsockopt(struct socket * , int  , int  , char * , int  ) ;
#line 988
extern int sock_no_sendmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
#line 990
extern int sock_no_recvmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ,
                           int  ) ;
#line 992
extern int sock_no_mmap(struct file * , struct socket * , struct vm_area_struct * ) ;
#line 1022
extern void sock_init_data(struct socket * , struct sock * ) ;
#line 1077 "include/net/sock.h"
__inline static void sock_put(struct sock *sk ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 1079
  ______f.func = "sock_put";
#line 1079
  ______f.file = "include/net/sock.h";
#line 1079
  ______f.line = 1079U;
#line 1079
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1079
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1079
  tmp = atomic_dec_and_test(& sk->__sk_common.skc_refcnt);
#line 1079
  ______r = tmp != 0;
#line 1079
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1079
  if (______r != 0) {
#line 1080
    sk_free(sk);
  } else {

  }
#line 1081
  return;
}
}
#line 1086 "include/net/sock.h"
__inline static void sk_set_socket(struct sock *sk , struct socket *sock ) 
{ 


  {
#line 1088
  sk->sk_socket = sock;
#line 1089
  return;
}
}
#line 1098 "include/net/sock.h"
__inline static void sock_orphan(struct sock *sk ) 
{ 


  {
#line 1100
  _write_lock_bh(& sk->sk_callback_lock);
#line 1101
  sock_set_flag(sk, SOCK_DEAD);
#line 1102
  sk_set_socket(sk, 0);
#line 1103
  sk->sk_sleep = 0;
#line 1104
  _write_unlock_bh(& sk->sk_callback_lock);
#line 1105
  return;
}
}
#line 1239
extern int sock_queue_rcv_skb(struct sock * , struct sk_buff * ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 49
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 51
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) ;
#line 57
void delete_channel(struct mISDNchannel *ch ) ;
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static u_int *debug___0  ;
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto mISDN_proto  = 
#line 38
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1256U, 0, 0, 0, 0, {0}, & __this_module, {'m', 'i', 's', 'd', 'n',
                                                          '\000'}, {0, 0}};
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct mISDN_sock_list data_sockets  =    {{0}, {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "data_sockets.lock",
                                                                        0, 0UL}}};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct mISDN_sock_list base_sockets  =    {{0}, {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "base_sockets.lock",
                                                                        0, 0UL}}};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
__inline static struct sk_buff *_l2_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  long tmp ;

  {
#line 61
  skb = alloc_skb(len + 4U, gfp_mask);
#line 62
  ______f.func = "_l2_alloc_skb";
#line 62
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 62
  ______f.line = 62U;
#line 62
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 62
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 62
  ______f___0.func = "_l2_alloc_skb";
#line 62
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 62
  ______f___0.line = 62U;
#line 62
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 62
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 62
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 62
  ______r___0 = (int )tmp;
#line 62
  ftrace_likely_update(& ______f___0, ______r___0, 1);
#line 62
  ______r = ______r___0 != 0;
#line 62
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 62
  if (______r != 0) {
#line 63
    skb_reserve(skb, 4);
  } else {

  }
#line 64
  return (skb);
}
}
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static void mISDN_sock_link(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 70
  _write_lock_bh(& l->lock);
#line 71
  sk_add_node(sk, & l->head);
#line 72
  _write_unlock_bh(& l->lock);
#line 73
  return;
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static void mISDN_sock_unlink(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 77
  _write_lock_bh(& l->lock);
#line 78
  sk_del_node_init(sk);
#line 79
  _write_unlock_bh(& l->lock);
#line 80
  return;
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct mISDN_sock *msk ;
  int err ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 88
  __mptr = (struct mISDNchannel  const  *)ch;
#line 88
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb78UL;
#line 89
  ______f.func = "mISDN_send";
#line 89
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 89
  ______f.line = 89U;
#line 89
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 89
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 89
  ______r = (*debug___0 & 4U) != 0U;
#line 89
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 89
  if (______r != 0) {
#line 90
    printk("<7>%s len %d %p\n", "mISDN_send", skb->len, skb);
  } else {

  }
#line 91
  ______f___0.func = "mISDN_send";
#line 91
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 91
  ______f___0.line = 91U;
#line 91
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 91
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 91
  ______r___0 = (unsigned int )((unsigned char )msk->sk.__sk_common.skc_state) == 3U;
#line 91
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 91
  if (______r___0 != 0) {
#line 92
    return (-49);
  } else {

  }
#line 93
  __net_timestamp(skb);
#line 94
  err = sock_queue_rcv_skb(& msk->sk, skb);
#line 95
  ______f___1.func = "mISDN_send";
#line 95
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 95
  ______f___1.line = 95U;
#line 95
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 95
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 95
  ______r___1 = err != 0;
#line 95
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 95
  if (______r___1 != 0) {
#line 96
    printk("<4>%s: error %d\n", "mISDN_send", err);
  } else {

  }
#line 97
  return (err);
}
}
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 105
  __mptr = (struct mISDNchannel  const  *)ch;
#line 105
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb78UL;
#line 106
  ______f.func = "mISDN_ctrl";
#line 106
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 106
  ______f.line = 106U;
#line 106
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 106
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 106
  ______r = (*debug___0 & 4U) != 0U;
#line 106
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 106
  if (______r != 0) {
#line 107
    printk("<7>%s(%p, %x, %p)\n", "mISDN_ctrl", ch, cmd, arg);
  } else {

  }
#line 108
  switch (cmd) {
  case (u_int )512: 
#line 110
  msk->sk.__sk_common.skc_state = 3U;
#line 111
  goto ldv_34731;
  }
  ldv_34731: ;
#line 113
  return (0);
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
__inline static void mISDN_sock_cmsg(struct sock *sk , struct msghdr *msg , struct sk_buff *skb ) 
{ 
  struct timeval tv ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 121
  ______f.func = "mISDN_sock_cmsg";
#line 121
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 121
  ______f.line = 121U;
#line 121
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 121
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 121
  ______r = (int )((struct mISDN_sock *)sk)->cmask & 1;
#line 121
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 121
  if (______r != 0) {
#line 122
    skb_get_timestamp((struct sk_buff  const  *)skb, & tv);
#line 123
    put_cmsg(msg, 0, 1, 16, (void *)(& tv));
  } else {

  }
#line 125
  return;
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_recvmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len , int flags ) 
{ 
  struct sk_buff *skb ;
  struct sock *sk ;
  struct sockaddr_mISDN *maddr ;
  int copied ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 132
  sk = sock->sk;
#line 137
  ______f.func = "mISDN_sock_recvmsg";
#line 137
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 137
  ______f.line = 137U;
#line 137
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 137
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 137
  ______r = (*debug___0 & 4U) != 0U;
#line 137
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 137
  if (______r != 0) {
#line 138
    printk("<7>%s: len %d, flags %x ch.nr %d, proto %x\n", "mISDN_sock_recvmsg", (int )len,
           flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
#line 141
  ______f___0.func = "mISDN_sock_recvmsg";
#line 141
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 141
  ______f___0.line = 141U;
#line 141
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 141
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 141
  ______r___0 = flags & 1;
#line 141
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 141
  if (______r___0 != 0) {
#line 142
    return (-95);
  } else {

  }
#line 144
  ______f___1.func = "mISDN_sock_recvmsg";
#line 144
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 144
  ______f___1.line = 144U;
#line 144
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 144
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 144
  ______r___1 = (unsigned int )((unsigned char )sk->__sk_common.skc_state) == 3U;
#line 144
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 144
  if (______r___1 != 0) {
#line 145
    return (0);
  } else {

  }
#line 147
  skb = skb_recv_datagram(sk, (unsigned int )flags, flags & 64, & err);
#line 148
  ______f___2.func = "mISDN_sock_recvmsg";
#line 148
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 148
  ______f___2.line = 148U;
#line 148
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 148
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 148
  ______r___2 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 148
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 148
  if (______r___2 != 0) {
#line 149
    return (err);
  } else {

  }
#line 151
  ______f___5.func = "mISDN_sock_recvmsg";
#line 151
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 151
  ______f___5.line = 151U;
#line 151
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 151
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 151
  ______r___5 = (unsigned int )msg->msg_namelen > 5U;
#line 151
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 151
  if (______r___5 != 0) {
#line 152
    msg->msg_namelen = 6;
#line 153
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 154
    maddr->family = 34U;
#line 155
    maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
#line 156
    ______f___3.func = "mISDN_sock_recvmsg";
#line 156
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 156
    ______f___3.line = 157U;
#line 156
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 156
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 156
    ______r___3 = (unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U;
#line 156
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 156
    if (______r___3 != 0) {
#line 158
      maddr->channel = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 16);
#line 159
      maddr->tei = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 8);
#line 160
      maddr->sapi = (unsigned char )((struct mISDNhead *)(& skb->cb))->id;
    } else {
#line 162
      maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
#line 163
      maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
#line 164
      maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
    }
  } else {
#line 167
    ______f___4.func = "mISDN_sock_recvmsg";
#line 167
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 167
    ______f___4.line = 167U;
#line 167
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 167
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 167
    ______r___4 = msg->msg_namelen != 0;
#line 167
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 167
    if (______r___4 != 0) {
#line 168
      printk("<4>%s: too small namelen %d\n", "mISDN_sock_recvmsg", msg->msg_namelen);
    } else {

    }
#line 170
    msg->msg_namelen = 0;
  }
#line 173
  copied = (int )(skb->len + 8U);
#line 174
  ______f___7.func = "mISDN_sock_recvmsg";
#line 174
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 174
  ______f___7.line = 174U;
#line 174
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 174
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 174
  ______r___7 = (size_t )copied > len;
#line 174
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 174
  if (______r___7 != 0) {
#line 175
    ______f___6.func = "mISDN_sock_recvmsg";
#line 175
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 175
    ______f___6.line = 175U;
#line 175
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 175
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 175
    ______r___6 = (flags & 2) != 0;
#line 175
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 175
    if (______r___6 != 0) {
#line 176
      atomic_dec(& skb->users);
    } else {
#line 178
      skb_queue_head(& sk->sk_receive_queue, skb);
    }
#line 179
    return (-28);
  } else {

  }
#line 181
  __len = 8UL;
#line 181
  ______f___8.func = "mISDN_sock_recvmsg";
#line 181
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 181
  ______f___8.line = 182U;
#line 181
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 181
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 181
  ______r___8 = __len > 63UL;
#line 181
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 181
  if (______r___8 != 0) {
#line 181
    tmp = skb_push(skb, 8U);
#line 181
    __ret = __memcpy((void *)tmp, (void const   *)(& skb->cb), __len);
  } else {
#line 181
    tmp___0 = skb_push(skb, 8U);
#line 181
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)(& skb->cb), __len);
  }
#line 184
  err = skb_copy_datagram_iovec((struct sk_buff  const  *)skb, 0, msg->msg_iov, copied);
#line 186
  mISDN_sock_cmsg(sk, msg, skb);
#line 188
  skb_free_datagram(sk, skb);
#line 190
  return (err != 0 ? err : copied);
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_sendmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len ) 
{ 
  struct sock *sk ;
  struct sk_buff *skb ;
  int err ;
  struct sockaddr_mISDN *maddr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  unsigned char *tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;

  {
#line 197
  sk = sock->sk;
#line 199
  err = -12;
#line 202
  ______f.func = "mISDN_sock_sendmsg";
#line 202
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 202
  ______f.line = 202U;
#line 202
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 202
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 202
  ______r = (*debug___0 & 4U) != 0U;
#line 202
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 202
  if (______r != 0) {
#line 203
    printk("<7>%s: len %d flags %x ch %d proto %x\n", "mISDN_sock_sendmsg", (int )len,
           msg->msg_flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
#line 207
  ______f___0.func = "mISDN_sock_sendmsg";
#line 207
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 207
  ______f___0.line = 207U;
#line 207
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 207
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 207
  ______r___0 = (int )msg->msg_flags & 1;
#line 207
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 207
  if (______r___0 != 0) {
#line 208
    return (-95);
  } else {

  }
#line 210
  ______f___1.func = "mISDN_sock_sendmsg";
#line 210
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 210
  ______f___1.line = 210U;
#line 210
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 210
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 210
  ______r___1 = (msg->msg_flags & 4294942655U) != 0U;
#line 210
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 210
  if (______r___1 != 0) {
#line 211
    return (-22);
  } else {

  }
#line 213
  ______f___2.func = "mISDN_sock_sendmsg";
#line 213
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 213
  ______f___2.line = 213U;
#line 213
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 213
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 213
  ______r___2 = len <= 7UL;
#line 213
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 213
  if (______r___2 != 0) {
#line 214
    return (-22);
  } else {

  }
#line 216
  ______f___3.func = "mISDN_sock_sendmsg";
#line 216
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 216
  ______f___3.line = 216U;
#line 216
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 216
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 216
  ______r___3 = (unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U;
#line 216
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 216
  if (______r___3 != 0) {
#line 217
    return (-77);
  } else {

  }
#line 219
  lock_sock(sk);
#line 221
  skb = _l2_alloc_skb((unsigned int )len, 208U);
#line 222
  ______f___4.func = "mISDN_sock_sendmsg";
#line 222
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 222
  ______f___4.line = 222U;
#line 222
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 222
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 222
  ______r___4 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 222
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 222
  if (______r___4 != 0) {
#line 223
    goto done;
  } else {

  }
#line 225
  ______f___5.func = "mISDN_sock_sendmsg";
#line 225
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 225
  ______f___5.line = 225U;
#line 225
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 225
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 225
  tmp = skb_put(skb, (unsigned int )len);
#line 225
  tmp___0 = memcpy_fromiovec(tmp, msg->msg_iov, (int )len);
#line 225
  ______r___5 = tmp___0 != 0;
#line 225
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 225
  if (______r___5 != 0) {
#line 226
    err = -14;
#line 227
    goto done;
  } else {

  }
#line 230
  __len = 8UL;
#line 230
  ______f___6.func = "mISDN_sock_sendmsg";
#line 230
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 230
  ______f___6.line = 230U;
#line 230
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 230
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 230
  ______r___6 = __len > 63UL;
#line 230
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 230
  if (______r___6 != 0) {
#line 230
    __ret = __memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  } else {
#line 230
    __ret = __builtin_memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  }
#line 231
  skb_pull(skb, 8U);
#line 233
  ______f___8.func = "mISDN_sock_sendmsg";
#line 233
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 233
  ______f___8.line = 233U;
#line 233
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 233
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 233
  ______r___8 = (unsigned int )msg->msg_namelen > 5U;
#line 233
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 233
  if (______r___8 != 0) {
#line 235
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 236
    ((struct mISDNhead *)(& skb->cb))->id = (unsigned int )maddr->channel;
  } else {
#line 238
    ______f___7.func = "mISDN_sock_sendmsg";
#line 238
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 238
    ______f___7.line = 239U;
#line 238
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 238
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 238
    ______r___7 = (unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U;
#line 238
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 238
    if (______r___7 != 0) {
#line 240
      ((struct mISDNhead *)(& skb->cb))->id = ((struct mISDN_sock *)sk)->ch.nr;
    } else {

    }
  }
#line 243
  ______f___9.func = "mISDN_sock_sendmsg";
#line 243
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 243
  ______f___9.line = 243U;
#line 243
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 243
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 243
  ______r___9 = (*debug___0 & 4U) != 0U;
#line 243
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 243
  if (______r___9 != 0) {
#line 244
    printk("<7>%s: ID:%x\n", "mISDN_sock_sendmsg", ((struct mISDNhead *)(& skb->cb))->id);
  } else {

  }
#line 247
  err = -19;
#line 248
  ______f___10.func = "mISDN_sock_sendmsg";
#line 248
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 248
  ______f___10.line = 248U;
#line 248
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 248
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 248
  ______r___10 = (unsigned long )((struct mISDN_sock *)sk)->ch.peer == (unsigned long )((struct mISDNchannel *)0);
#line 248
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 248
  if (______r___10 != 0) {
#line 249
    goto done;
  } else {

  }
#line 250
  err = (*(((struct mISDN_sock *)sk)->ch.recv))(((struct mISDN_sock *)sk)->ch.peer,
                                                skb);
#line 251
  ______f___11.func = "mISDN_sock_sendmsg";
#line 251
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 251
  ______f___11.line = 251U;
#line 251
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 251
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 251
  ______r___11 = err != 0;
#line 251
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 251
  if (______r___11 != 0) {

  } else {
#line 254
    skb = 0;
#line 255
    err = (int )len;
  }
  done: 
#line 259
  ______f___12.func = "mISDN_sock_sendmsg";
#line 259
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 259
  ______f___12.line = 259U;
#line 259
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 259
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 259
  ______r___12 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 259
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 259
  if (______r___12 != 0) {
#line 260
    kfree_skb(skb);
  } else {

  }
#line 261
  release_sock(sk);
#line 262
  return (err);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 268
  sk = sock->sk;
#line 270
  ______f.func = "data_sock_release";
#line 270
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 270
  ______f.line = 270U;
#line 270
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 270
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 270
  ______r = (*debug___0 & 4U) != 0U;
#line 270
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 270
  if (______r != 0) {
#line 271
    printk("<7>%s(%p) sk=%p\n", "data_sock_release", sock, sk);
  } else {

  }
#line 272
  ______f___0.func = "data_sock_release";
#line 272
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 272
  ______f___0.line = 272U;
#line 272
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 272
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 272
  ______r___0 = (unsigned long )sk == (unsigned long )((struct sock *)0);
#line 272
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 272
  if (______r___0 != 0) {
#line 273
    return (0);
  } else {

  }
#line 274
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: 
#line 279
  ______f___1.func = "data_sock_release";
#line 279
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 279
  ______f___1.line = 279U;
#line 279
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 279
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 279
  ______r___1 = (unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U;
#line 279
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 279
  if (______r___1 != 0) {
#line 280
    delete_channel(& ((struct mISDN_sock *)sk)->ch);
  } else {
#line 282
    mISDN_sock_unlink(& data_sockets, sk);
  }
#line 283
  goto ldv_34863;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 292
  delete_channel(& ((struct mISDN_sock *)sk)->ch);
#line 293
  mISDN_sock_unlink(& data_sockets, sk);
#line 294
  goto ldv_34863;
  }
  ldv_34863: 
#line 297
  lock_sock(sk);
#line 299
  sock_orphan(sk);
#line 300
  skb_queue_purge(& sk->sk_receive_queue);
#line 302
  release_sock(sk);
#line 303
  sock_put(sk);
#line 305
  return (0);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_ioctl_bound(struct sock *sk , unsigned int cmd , void *p ) 
{ 
  struct mISDN_ctrl_req cq ;
  int err ;
  int val[2U] ;
  struct mISDNchannel *bchan ;
  struct mISDNchannel *next ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  unsigned long tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  struct list_head  const  *__mptr___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  unsigned long tmp___0 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___1 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int __ret_gu___2 ;
  unsigned long __val_gu___2 ;
  int tmp___2 ;

  {
#line 312
  err = -22;
#line 315
  lock_sock(sk);
#line 316
  ______f.func = "data_sock_ioctl_bound";
#line 316
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 316
  ______f.line = 316U;
#line 316
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 316
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 316
  ______r = (unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0);
#line 316
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 316
  if (______r != 0) {
#line 317
    err = -19;
#line 318
    goto done;
  } else {

  }
#line 320
  switch (cmd) {
  case 2147764549U: 
#line 322
  ______f___0.func = "data_sock_ioctl_bound";
#line 322
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 322
  ______f___0.line = 322U;
#line 322
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 322
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 322
  tmp = copy_from_user((void *)(& cq), (void const   *)p, 16U);
#line 322
  ______r___0 = tmp != 0UL;
#line 322
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 322
  if (______r___0 != 0) {
#line 323
    err = -14;
#line 324
    goto ldv_34891;
  } else {

  }
#line 326
  ______f___2.func = "data_sock_ioctl_bound";
#line 326
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 326
  ______f___2.line = 326U;
#line 326
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 326
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 326
  ______r___2 = ((int )sk->sk_protocol & -32) == 32;
#line 326
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 326
  if (______r___2 != 0) {
#line 327
    __mptr = (struct list_head  const  *)(((struct mISDN_sock *)sk)->dev)->bchannels.next;
#line 327
    bchan = (struct mISDNchannel *)__mptr;
#line 327
    __mptr___0 = (struct list_head  const  *)bchan->list.next;
#line 327
    next = (struct mISDNchannel *)__mptr___0;
#line 327
    goto ldv_34906;
    ldv_34905: 
#line 329
    ______f___1.func = "data_sock_ioctl_bound";
#line 329
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 329
    ______f___1.line = 329U;
#line 329
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 329
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 329
    ______r___1 = bchan->nr == (u_int )cq.channel;
#line 329
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 329
    if (______r___1 != 0) {
#line 330
      err = (*(bchan->ctrl))(bchan, 768U, (void *)(& cq));
#line 332
      goto ldv_34904;
    } else {

    }
#line 327
    bchan = next;
#line 327
    __mptr___1 = (struct list_head  const  *)next->list.next;
#line 327
    next = (struct mISDNchannel *)__mptr___1;
    ldv_34906: ;
#line 327
    if ((unsigned long )(& bchan->list) != (unsigned long )(& (((struct mISDN_sock *)sk)->dev)->bchannels)) {
#line 328
      goto ldv_34905;
    } else {

    }
    ldv_34904: ;
  } else {
#line 336
    err = (*((((struct mISDN_sock *)sk)->dev)->D.ctrl))(& (((struct mISDN_sock *)sk)->dev)->D,
                                                        768U, (void *)(& cq));
  }
#line 338
  ______f___3.func = "data_sock_ioctl_bound";
#line 338
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 338
  ______f___3.line = 338U;
#line 338
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 338
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 338
  ______r___3 = err != 0;
#line 338
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 338
  if (______r___3 != 0) {
#line 339
    goto ldv_34891;
  } else {

  }
#line 340
  ______f___4.func = "data_sock_ioctl_bound";
#line 340
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 340
  ______f___4.line = 340U;
#line 340
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 340
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 340
  tmp___0 = copy_to_user(p, (void const   *)(& cq), 16U);
#line 340
  ______r___4 = tmp___0 != 0UL;
#line 340
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 340
  if (______r___4 != 0) {
#line 341
    err = -14;
  } else {

  }
#line 342
  goto ldv_34891;
  case 2147764550U: 
#line 344
  ______f___5.func = "data_sock_ioctl_bound";
#line 344
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 344
  ______f___5.line = 344U;
#line 344
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 344
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 344
  ______r___5 = (unsigned int )sk->sk_protocol != 17U;
#line 344
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 344
  if (______r___5 != 0) {
#line 345
    err = -22;
#line 346
    goto ldv_34891;
  } else {

  }
#line 348
  val[0] = (int )cmd;
#line 349
  if (0) {
#line 349
    might_fault();
#line 349
    switch (4UL) {
    case 1UL: 
#line 349
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 349
    goto ldv_34929;
    case 2UL: 
#line 349
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 349
    goto ldv_34929;
    case 4UL: 
#line 349
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 349
    goto ldv_34929;
    case 8UL: 
#line 349
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 349
    goto ldv_34929;
    default: 
#line 349
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 349
    goto ldv_34929;
    }
    ldv_34929: 
#line 349
    val[1] = (int )__val_gu;
#line 349
    tmp___1 = __ret_gu != 0;
  } else {
#line 349
    ______f___6.func = "data_sock_ioctl_bound";
#line 349
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 349
    ______f___6.line = 349U;
#line 349
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 349
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 349
    might_fault();
#line 349
    switch (4UL) {
    case 1UL: 
#line 349
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 349
    goto ldv_34940;
    case 2UL: 
#line 349
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 349
    goto ldv_34940;
    case 4UL: 
#line 349
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 349
    goto ldv_34940;
    case 8UL: 
#line 349
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 349
    goto ldv_34940;
    default: 
#line 349
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 349
    goto ldv_34940;
    }
    ldv_34940: 
#line 349
    val[1] = (int )__val_gu___0;
#line 349
    ______r___6 = __ret_gu___0 != 0;
#line 349
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 349
    tmp___1 = ______r___6 != 0;
  }
#line 349
  if (tmp___1) {
#line 350
    err = -14;
#line 351
    goto ldv_34891;
  } else {

  }
#line 353
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768U, (void *)(& val));
#line 355
  goto ldv_34891;
  case 2147764552U: 
#line 357
  ______f___7.func = "data_sock_ioctl_bound";
#line 357
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 357
  ______f___7.line = 358U;
#line 357
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 357
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 357
  ______r___7 = (unsigned int )sk->sk_protocol != 17U && (unsigned int )sk->sk_protocol != 16U;
#line 357
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 357
  if (______r___7 != 0) {
#line 359
    err = -22;
#line 360
    goto ldv_34891;
  } else {

  }
#line 362
  val[0] = (int )cmd;
#line 363
  if (0) {
#line 363
    might_fault();
#line 363
    switch (4UL) {
    case 1UL: 
#line 363
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 363
    goto ldv_34963;
    case 2UL: 
#line 363
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 363
    goto ldv_34963;
    case 4UL: 
#line 363
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 363
    goto ldv_34963;
    case 8UL: 
#line 363
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 363
    goto ldv_34963;
    default: 
#line 363
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 363
    goto ldv_34963;
    }
    ldv_34963: 
#line 363
    val[1] = (int )__val_gu___1;
#line 363
    tmp___2 = __ret_gu___1 != 0;
  } else {
#line 363
    ______f___8.func = "data_sock_ioctl_bound";
#line 363
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 363
    ______f___8.line = 363U;
#line 363
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 363
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 363
    might_fault();
#line 363
    switch (4UL) {
    case 1UL: 
#line 363
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)p));
#line 363
    goto ldv_34974;
    case 2UL: 
#line 363
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)p));
#line 363
    goto ldv_34974;
    case 4UL: 
#line 363
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)p));
#line 363
    goto ldv_34974;
    case 8UL: 
#line 363
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)p));
#line 363
    goto ldv_34974;
    default: 
#line 363
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)p));
#line 363
    goto ldv_34974;
    }
    ldv_34974: 
#line 363
    val[1] = (int )__val_gu___2;
#line 363
    ______r___8 = __ret_gu___2 != 0;
#line 363
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 363
    tmp___2 = ______r___8 != 0;
  }
#line 363
  if (tmp___2) {
#line 364
    err = -14;
#line 365
    goto ldv_34891;
  } else {

  }
#line 367
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768U, (void *)(& val));
#line 369
  goto ldv_34891;
  default: 
#line 371
  err = -22;
#line 372
  goto ldv_34891;
  }
  ldv_34891: ;
  done: 
#line 375
  release_sock(sk);
#line 376
  return (err);
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct sock *sk ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned long tmp ;
  int __ret_pu ;
  int __pu_val ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___0 ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___1 ;
  struct mISDN_devinfo di ;
  u_int tmp___2 ;
  size_t __len ;
  void *__ret ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  char const   *tmp___3 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  unsigned long tmp___4 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 382
  err = 0;
#line 383
  sk = sock->sk;
#line 387
  switch (cmd) {
  case 2147764546U: 
#line 389
  ver.major = 1U;
#line 390
  ver.minor = 1U;
#line 391
  ver.release = 20U;
#line 392
  ______f.func = "data_sock_ioctl";
#line 392
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 392
  ______f.line = 392U;
#line 392
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 392
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 392
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
#line 392
  ______r = tmp != 0UL;
#line 392
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 392
  if (______r != 0) {
#line 393
    err = -14;
  } else {

  }
#line 394
  goto ldv_34997;
  case 2147764547U: 
#line 396
  id = get_mdevice_count();
#line 397
  if (0) {
#line 397
    might_fault();
#line 397
    __pu_val = id;
#line 397
    switch (4UL) {
    case 1UL: 
#line 397
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35011;
    case 2UL: 
#line 397
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35011;
    case 4UL: 
#line 397
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35011;
    case 8UL: 
#line 397
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35011;
    default: 
#line 397
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35011;
    }
    ldv_35011: 
#line 397
    tmp___0 = __ret_pu != 0;
  } else {
#line 397
    ______f___0.func = "data_sock_ioctl";
#line 397
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 397
    ______f___0.line = 397U;
#line 397
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 397
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 397
    might_fault();
#line 397
    __pu_val___0 = id;
#line 397
    switch (4UL) {
    case 1UL: 
#line 397
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35022;
    case 2UL: 
#line 397
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35022;
    case 4UL: 
#line 397
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35022;
    case 8UL: 
#line 397
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35022;
    default: 
#line 397
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 397
    goto ldv_35022;
    }
    ldv_35022: 
#line 397
    ______r___0 = __ret_pu___0 != 0;
#line 397
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 397
    tmp___0 = ______r___0 != 0;
  }
#line 397
  if (tmp___0) {
#line 398
    err = -14;
  } else {

  }
#line 399
  goto ldv_34997;
  case 2147764548U: ;
#line 401
  if (0) {
#line 401
    might_fault();
#line 401
    switch (4UL) {
    case 1UL: 
#line 401
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 401
    goto ldv_35042;
    case 2UL: 
#line 401
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 401
    goto ldv_35042;
    case 4UL: 
#line 401
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 401
    goto ldv_35042;
    case 8UL: 
#line 401
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 401
    goto ldv_35042;
    default: 
#line 401
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 401
    goto ldv_35042;
    }
    ldv_35042: 
#line 401
    id = (int )__val_gu;
#line 401
    tmp___1 = __ret_gu != 0;
  } else {
#line 401
    ______f___1.func = "data_sock_ioctl";
#line 401
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 401
    ______f___1.line = 401U;
#line 401
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 401
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 401
    might_fault();
#line 401
    switch (4UL) {
    case 1UL: 
#line 401
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 401
    goto ldv_35053;
    case 2UL: 
#line 401
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 401
    goto ldv_35053;
    case 4UL: 
#line 401
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 401
    goto ldv_35053;
    case 8UL: 
#line 401
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 401
    goto ldv_35053;
    default: 
#line 401
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 401
    goto ldv_35053;
    }
    ldv_35053: 
#line 401
    id = (int )__val_gu___0;
#line 401
    ______r___1 = __ret_gu___0 != 0;
#line 401
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 401
    tmp___1 = ______r___1 != 0;
  }
#line 401
  if (tmp___1) {
#line 402
    err = -14;
#line 403
    goto ldv_34997;
  } else {

  }
#line 405
  dev = get_mdevice((u_int )id);
#line 406
  ______f___4.func = "data_sock_ioctl";
#line 406
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 406
  ______f___4.line = 406U;
#line 406
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 406
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 406
  ______r___4 = (unsigned long )dev != (unsigned long )((struct mISDNdevice *)0);
#line 406
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 406
  if (______r___4 != 0) {
#line 409
    di.id = dev->id;
#line 410
    di.Dprotocols = dev->Dprotocols;
#line 411
    tmp___2 = get_all_Bprotocols();
#line 411
    di.Bprotocols = dev->Bprotocols | tmp___2;
#line 412
    di.protocol = dev->D.protocol;
#line 413
    __len = 16UL;
#line 413
    ______f___2.func = "data_sock_ioctl";
#line 413
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 413
    ______f___2.line = 414U;
#line 413
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 413
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 413
    ______r___2 = __len > 63UL;
#line 413
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 413
    if (______r___2 != 0) {
#line 413
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
#line 413
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
#line 415
    di.nrbchan = dev->nrbchan;
#line 416
    tmp___3 = dev_name((struct device  const  *)(& dev->dev));
#line 416
    strcpy((char *)(& di.name), tmp___3);
#line 417
    ______f___3.func = "data_sock_ioctl";
#line 417
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 417
    ______f___3.line = 417U;
#line 417
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 417
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 417
    tmp___4 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
#line 417
    ______r___3 = tmp___4 != 0UL;
#line 417
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 417
    if (______r___3 != 0) {
#line 418
      err = -14;
    } else {

    }
  } else {
#line 420
    err = -19;
  }
#line 421
  goto ldv_34997;
  default: 
#line 423
  ______f___5.func = "data_sock_ioctl";
#line 423
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 423
  ______f___5.line = 423U;
#line 423
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 423
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 423
  ______r___5 = (unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U;
#line 423
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 423
  if (______r___5 != 0) {
#line 424
    err = data_sock_ioctl_bound(sk, cmd, (void *)arg);
  } else {
#line 427
    err = -107;
  }
  }
  ldv_34997: ;
#line 429
  return (err);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_setsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int len ) 
{ 
  struct sock *sk ;
  int err ;
  int opt ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 435
  sk = sock->sk;
#line 436
  err = 0;
#line 436
  opt = 0;
#line 438
  ______f.func = "data_sock_setsockopt";
#line 438
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 438
  ______f.line = 438U;
#line 438
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 438
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 438
  ______r = (*debug___0 & 4U) != 0U;
#line 438
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 438
  if (______r != 0) {
#line 439
    printk("<7>%s(%p, %d, %x, %p, %d)\n", "data_sock_setsockopt", sock, level, optname,
           optval, len);
  } else {

  }
#line 442
  lock_sock(sk);
#line 444
  switch (optname) {
  case 1: ;
#line 446
  if (0) {
#line 446
    might_fault();
#line 446
    switch (4UL) {
    case 1UL: 
#line 446
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 446
    goto ldv_35104;
    case 2UL: 
#line 446
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 446
    goto ldv_35104;
    case 4UL: 
#line 446
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 446
    goto ldv_35104;
    case 8UL: 
#line 446
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 446
    goto ldv_35104;
    default: 
#line 446
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 446
    goto ldv_35104;
    }
    ldv_35104: 
#line 446
    opt = (int )__val_gu;
#line 446
    tmp = __ret_gu != 0;
  } else {
#line 446
    ______f___0.func = "data_sock_setsockopt";
#line 446
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 446
    ______f___0.line = 446U;
#line 446
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 446
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 446
    might_fault();
#line 446
    switch (4UL) {
    case 1UL: 
#line 446
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 446
    goto ldv_35115;
    case 2UL: 
#line 446
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 446
    goto ldv_35115;
    case 4UL: 
#line 446
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 446
    goto ldv_35115;
    case 8UL: 
#line 446
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 446
    goto ldv_35115;
    default: 
#line 446
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 446
    goto ldv_35115;
    }
    ldv_35115: 
#line 446
    opt = (int )__val_gu___0;
#line 446
    ______r___0 = __ret_gu___0 != 0;
#line 446
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 446
    tmp = ______r___0 != 0;
  }
#line 446
  if (tmp) {
#line 447
    err = -14;
#line 448
    goto ldv_35122;
  } else {

  }
#line 451
  ______f___1.func = "data_sock_setsockopt";
#line 451
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 451
  ______f___1.line = 451U;
#line 451
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 451
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 451
  ______r___1 = opt != 0;
#line 451
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 451
  if (______r___1 != 0) {
#line 452
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask | 1U;
  } else {
#line 454
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask & 4294967294U;
  }
#line 455
  goto ldv_35122;
  default: 
#line 457
  err = -92;
#line 458
  goto ldv_35122;
  }
  ldv_35122: 
#line 460
  release_sock(sk);
#line 461
  return (err);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_getsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int *optlen ) 
{ 
  struct sock *sk ;
  int len ;
  int opt ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret_pu ;
  char __pu_val ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int __ret_pu___0 ;
  char __pu_val___0 ;
  int tmp___0 ;

  {
#line 467
  sk = sock->sk;
#line 470
  if (0) {
#line 470
    might_fault();
#line 470
    switch (4UL) {
    case 1UL: 
#line 470
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 470
    goto ldv_35149;
    case 2UL: 
#line 470
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 470
    goto ldv_35149;
    case 4UL: 
#line 470
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 470
    goto ldv_35149;
    case 8UL: 
#line 470
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 470
    goto ldv_35149;
    default: 
#line 470
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 470
    goto ldv_35149;
    }
    ldv_35149: 
#line 470
    len = (int )__val_gu;
#line 470
    tmp = __ret_gu != 0;
  } else {
#line 470
    ______f.func = "data_sock_getsockopt";
#line 470
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 470
    ______f.line = 470U;
#line 470
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 470
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 470
    might_fault();
#line 470
    switch (4UL) {
    case 1UL: 
#line 470
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 470
    goto ldv_35161;
    case 2UL: 
#line 470
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 470
    goto ldv_35161;
    case 4UL: 
#line 470
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 470
    goto ldv_35161;
    case 8UL: 
#line 470
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 470
    goto ldv_35161;
    default: 
#line 470
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 470
    goto ldv_35161;
    }
    ldv_35161: 
#line 470
    len = (int )__val_gu___0;
#line 470
    ______r = __ret_gu___0 != 0;
#line 470
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 470
    tmp = ______r != 0;
  }
#line 470
  if (tmp) {
#line 471
    return (-14);
  } else {

  }
#line 473
  switch (optname) {
  case 1: 
#line 475
  ______f___0.func = "data_sock_getsockopt";
#line 475
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 475
  ______f___0.line = 475U;
#line 475
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 475
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 475
  ______r___0 = (int )((struct mISDN_sock *)sk)->cmask & 1;
#line 475
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 475
  if (______r___0 != 0) {
#line 476
    opt = 1;
  } else {
#line 478
    opt = 0;
  }
#line 480
  if (0) {
#line 480
    might_fault();
#line 480
    __pu_val = (char )opt;
#line 480
    switch (1UL) {
    case 1UL: 
#line 480
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 480
    goto ldv_35184;
    case 2UL: 
#line 480
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 480
    goto ldv_35184;
    case 4UL: 
#line 480
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 480
    goto ldv_35184;
    case 8UL: 
#line 480
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 480
    goto ldv_35184;
    default: 
#line 480
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 480
    goto ldv_35184;
    }
    ldv_35184: 
#line 480
    tmp___0 = __ret_pu != 0;
  } else {
#line 480
    ______f___1.func = "data_sock_getsockopt";
#line 480
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 480
    ______f___1.line = 480U;
#line 480
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 480
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 480
    might_fault();
#line 480
    __pu_val___0 = (char )opt;
#line 480
    switch (1UL) {
    case 1UL: 
#line 480
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (optval): "ebx");
#line 480
    goto ldv_35195;
    case 2UL: 
#line 480
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (optval): "ebx");
#line 480
    goto ldv_35195;
    case 4UL: 
#line 480
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (optval): "ebx");
#line 480
    goto ldv_35195;
    case 8UL: 
#line 480
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (optval): "ebx");
#line 480
    goto ldv_35195;
    default: 
#line 480
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (optval): "ebx");
#line 480
    goto ldv_35195;
    }
    ldv_35195: 
#line 480
    ______r___1 = __ret_pu___0 != 0;
#line 480
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 480
    tmp___0 = ______r___1 != 0;
  }
#line 480
  if (tmp___0) {
#line 481
    return (-14);
  } else {

  }
#line 482
  goto ldv_35202;
  default: ;
#line 484
  return (-92);
  }
  ldv_35202: ;
#line 487
  return (0);
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  struct hlist_node *node ;
  struct sock *csk ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  struct hlist_node  const  *__mptr ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;

  {
#line 493
  maddr = (struct sockaddr_mISDN *)addr;
#line 494
  sk = sock->sk;
#line 497
  err = 0;
#line 499
  ______f.func = "data_sock_bind";
#line 499
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 499
  ______f.line = 499U;
#line 499
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 499
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 499
  ______r = (*debug___0 & 4U) != 0U;
#line 499
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 499
  if (______r != 0) {
#line 500
    printk("<7>%s(%p) sk=%p\n", "data_sock_bind", sock, sk);
  } else {

  }
#line 501
  ______f___0.func = "data_sock_bind";
#line 501
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 501
  ______f___0.line = 501U;
#line 501
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 501
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 501
  ______r___0 = addr_len != 6;
#line 501
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 501
  if (______r___0 != 0) {
#line 502
    return (-22);
  } else {

  }
#line 503
  ______f___1.func = "data_sock_bind";
#line 503
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 503
  ______f___1.line = 503U;
#line 503
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 503
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 503
  ______r___1 = (unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U;
#line 503
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 503
  if (______r___1 != 0) {
#line 504
    return (-22);
  } else {

  }
#line 506
  lock_sock(sk);
#line 508
  ______f___2.func = "data_sock_bind";
#line 508
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 508
  ______f___2.line = 508U;
#line 508
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 508
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 508
  ______r___2 = (unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0);
#line 508
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 508
  if (______r___2 != 0) {
#line 509
    err = -114;
#line 510
    goto done;
  } else {

  }
#line 512
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
#line 513
  ______f___3.func = "data_sock_bind";
#line 513
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 513
  ______f___3.line = 513U;
#line 513
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 513
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 513
  ______r___3 = (unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0);
#line 513
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 513
  if (______r___3 != 0) {
#line 514
    err = -19;
#line 515
    goto done;
  } else {

  }
#line 518
  ______f___8.func = "data_sock_bind";
#line 518
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 518
  ______f___8.line = 518U;
#line 518
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 518
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 518
  ______r___8 = (unsigned int )sk->sk_protocol <= 31U;
#line 518
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 518
  if (______r___8 != 0) {
#line 519
    _read_lock_bh(& data_sockets.lock);
#line 520
    node = data_sockets.head.first;
#line 520
    goto ldv_35252;
    ldv_35251: 
#line 521
    ______f___4.func = "data_sock_bind";
#line 521
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 521
    ______f___4.line = 521U;
#line 521
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 521
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 521
    ______r___4 = (unsigned long )sk == (unsigned long )csk;
#line 521
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 521
    if (______r___4 != 0) {
#line 522
      goto ldv_35241;
    } else {

    }
#line 523
    ______f___5.func = "data_sock_bind";
#line 523
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 523
    ______f___5.line = 523U;
#line 523
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 523
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 523
    ______r___5 = (unsigned long )((struct mISDN_sock *)csk)->dev != (unsigned long )((struct mISDN_sock *)sk)->dev;
#line 523
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 523
    if (______r___5 != 0) {
#line 524
      goto ldv_35241;
    } else {

    }
#line 525
    ______f___6.func = "data_sock_bind";
#line 525
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 525
    ______f___6.line = 525U;
#line 525
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 525
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 525
    ______r___6 = (unsigned int )csk->sk_protocol > 31U;
#line 525
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 525
    if (______r___6 != 0) {
#line 526
      goto ldv_35241;
    } else {

    }
#line 527
    ______f___7.func = "data_sock_bind";
#line 527
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 527
    ______f___7.line = 528U;
#line 527
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 527
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 527
    ______r___7 = ! ((_Bool )((((unsigned int )csk->sk_protocol == 1U || (unsigned int )csk->sk_protocol == 3U) || (unsigned int )csk->sk_protocol == 5U) || (unsigned int )csk->sk_protocol == 16U)) ^ (int )((_Bool )((((unsigned int )sk->sk_protocol == 1U || (unsigned int )sk->sk_protocol == 3U) || (unsigned int )sk->sk_protocol == 5U) || (unsigned int )sk->sk_protocol == 16U));
#line 527
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 527
    if (______r___7 != 0) {
#line 529
      goto ldv_35241;
    } else {

    }
#line 530
    _read_unlock_bh(& data_sockets.lock);
#line 531
    err = -16;
#line 532
    goto done;
    ldv_35241: 
#line 520
    node = node->next;
    ldv_35252: ;
#line 520
    if ((unsigned long )node != (unsigned long )((struct hlist_node *)0)) {
#line 520
      __builtin_prefetch((void const   *)node->next);
#line 520
      if (1 != 0) {
#line 520
        __mptr = (struct hlist_node  const  *)node;
#line 520
        csk = (struct sock *)__mptr + 0xfffffffffffffff8UL;
#line 520
        if (1 != 0) {
#line 521
          goto ldv_35251;
        } else {
#line 523
          goto ldv_35253;
        }
      } else {
#line 523
        goto ldv_35253;
      }
    } else {

    }
    ldv_35253: 
#line 534
    _read_unlock_bh(& data_sockets.lock);
  } else {

  }
#line 537
  ((struct mISDN_sock *)sk)->ch.send = & mISDN_send;
#line 538
  ((struct mISDN_sock *)sk)->ch.ctrl = & mISDN_ctrl;
#line 540
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: 
#line 545
  mISDN_sock_unlink(& data_sockets, sk);
#line 546
  err = connect_layer1(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
#line 548
  ______f___9.func = "data_sock_bind";
#line 548
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 548
  ______f___9.line = 548U;
#line 548
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 548
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 548
  ______r___9 = err != 0;
#line 548
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 548
  if (______r___9 != 0) {
#line 549
    mISDN_sock_link(& data_sockets, sk);
  } else {

  }
#line 550
  goto ldv_35261;
  case 16: ;
  case 17: 
#line 553
  err = create_l2entity(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                        (u_int )sk->sk_protocol, maddr);
#line 555
  goto ldv_35261;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 562
  err = connect_Bstack(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
#line 564
  goto ldv_35261;
  default: 
#line 566
  err = -93;
  }
  ldv_35261: 
#line 568
  ______f___10.func = "data_sock_bind";
#line 568
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 568
  ______f___10.line = 568U;
#line 568
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 568
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 568
  ______r___10 = err != 0;
#line 568
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 568
  if (______r___10 != 0) {
#line 569
    goto done;
  } else {

  }
#line 570
  sk->__sk_common.skc_state = 2U;
#line 571
  ((struct mISDN_sock *)sk)->ch.protocol = (u_int )sk->sk_protocol;
  done: 
#line 574
  release_sock(sk);
#line 575
  return (err);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_getname(struct socket *sock , struct sockaddr *addr , int *addr_len ,
                             int peer ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 582
  maddr = (struct sockaddr_mISDN *)addr;
#line 583
  sk = sock->sk;
#line 585
  ______f.func = "data_sock_getname";
#line 585
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 585
  ______f.line = 585U;
#line 585
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 585
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 585
  ______r = (unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0);
#line 585
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 585
  if (______r != 0) {
#line 586
    return (-77);
  } else {

  }
#line 588
  lock_sock(sk);
#line 590
  *addr_len = 6;
#line 591
  maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
#line 592
  maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
#line 593
  maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
#line 594
  maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
#line 595
  release_sock(sk);
#line 596
  return (0);
}
}
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto_ops  const  data_sock_ops  = 
#line 599
     {34, & __this_module, & data_sock_release, & data_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & data_sock_getname, & datagram_poll,
    & data_sock_ioctl, 0, & sock_no_listen, & sock_no_shutdown, & data_sock_setsockopt,
    & data_sock_getsockopt, 0, 0, & mISDN_sock_sendmsg, & mISDN_sock_recvmsg, & sock_no_mmap,
    0, 0};
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 624
  ______f.func = "data_sock_create";
#line 624
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 624
  ______f.line = 624U;
#line 624
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 624
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 624
  ______r = (int )sock->type != 2;
#line 624
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 624
  if (______r != 0) {
#line 625
    return (-94);
  } else {

  }
#line 627
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
#line 628
  ______f___0.func = "data_sock_create";
#line 628
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 628
  ______f___0.line = 628U;
#line 628
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 628
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 628
  ______r___0 = (unsigned long )sk == (unsigned long )((struct sock *)0);
#line 628
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 628
  if (______r___0 != 0) {
#line 629
    return (-12);
  } else {

  }
#line 631
  sock_init_data(sock, sk);
#line 633
  sock->ops = & data_sock_ops;
#line 634
  sock->state = SS_UNCONNECTED;
#line 635
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 637
  sk->sk_protocol = (unsigned char )protocol;
#line 638
  sk->__sk_common.skc_state = 1U;
#line 639
  mISDN_sock_link(& data_sockets, sk);
#line 641
  return (0);
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 647
  sk = sock->sk;
#line 649
  printk("<7>%s(%p) sk=%p\n", "base_sock_release", sock, sk);
#line 650
  ______f.func = "base_sock_release";
#line 650
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 650
  ______f.line = 650U;
#line 650
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 650
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 650
  ______r = (unsigned long )sk == (unsigned long )((struct sock *)0);
#line 650
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 650
  if (______r != 0) {
#line 651
    return (0);
  } else {

  }
#line 653
  mISDN_sock_unlink(& base_sockets, sk);
#line 654
  sock_orphan(sk);
#line 655
  sock_put(sk);
#line 657
  return (0);
}
}
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned long tmp ;
  int __ret_pu ;
  int __pu_val ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___0 ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___1 ;
  struct mISDN_devinfo di ;
  u_int tmp___2 ;
  size_t __len ;
  void *__ret ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  char const   *tmp___3 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  unsigned long tmp___4 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  struct mISDN_devrename dn ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  unsigned long tmp___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;

  {
#line 663
  err = 0;
#line 667
  switch (cmd) {
  case 2147764546U: 
#line 669
  ver.major = 1U;
#line 670
  ver.minor = 1U;
#line 671
  ver.release = 20U;
#line 672
  ______f.func = "base_sock_ioctl";
#line 672
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 672
  ______f.line = 672U;
#line 672
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 672
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 672
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
#line 672
  ______r = tmp != 0UL;
#line 672
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 672
  if (______r != 0) {
#line 673
    err = -14;
  } else {

  }
#line 674
  goto ldv_35322;
  case 2147764547U: 
#line 676
  id = get_mdevice_count();
#line 677
  if (0) {
#line 677
    might_fault();
#line 677
    __pu_val = id;
#line 677
    switch (4UL) {
    case 1UL: 
#line 677
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35336;
    case 2UL: 
#line 677
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35336;
    case 4UL: 
#line 677
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35336;
    case 8UL: 
#line 677
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35336;
    default: 
#line 677
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35336;
    }
    ldv_35336: 
#line 677
    tmp___0 = __ret_pu != 0;
  } else {
#line 677
    ______f___0.func = "base_sock_ioctl";
#line 677
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 677
    ______f___0.line = 677U;
#line 677
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 677
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 677
    might_fault();
#line 677
    __pu_val___0 = id;
#line 677
    switch (4UL) {
    case 1UL: 
#line 677
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35347;
    case 2UL: 
#line 677
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35347;
    case 4UL: 
#line 677
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35347;
    case 8UL: 
#line 677
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35347;
    default: 
#line 677
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 677
    goto ldv_35347;
    }
    ldv_35347: 
#line 677
    ______r___0 = __ret_pu___0 != 0;
#line 677
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 677
    tmp___0 = ______r___0 != 0;
  }
#line 677
  if (tmp___0) {
#line 678
    err = -14;
  } else {

  }
#line 679
  goto ldv_35322;
  case 2147764548U: ;
#line 681
  if (0) {
#line 681
    might_fault();
#line 681
    switch (4UL) {
    case 1UL: 
#line 681
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 681
    goto ldv_35367;
    case 2UL: 
#line 681
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 681
    goto ldv_35367;
    case 4UL: 
#line 681
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 681
    goto ldv_35367;
    case 8UL: 
#line 681
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 681
    goto ldv_35367;
    default: 
#line 681
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 681
    goto ldv_35367;
    }
    ldv_35367: 
#line 681
    id = (int )__val_gu;
#line 681
    tmp___1 = __ret_gu != 0;
  } else {
#line 681
    ______f___1.func = "base_sock_ioctl";
#line 681
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 681
    ______f___1.line = 681U;
#line 681
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 681
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 681
    might_fault();
#line 681
    switch (4UL) {
    case 1UL: 
#line 681
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 681
    goto ldv_35378;
    case 2UL: 
#line 681
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 681
    goto ldv_35378;
    case 4UL: 
#line 681
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 681
    goto ldv_35378;
    case 8UL: 
#line 681
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 681
    goto ldv_35378;
    default: 
#line 681
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 681
    goto ldv_35378;
    }
    ldv_35378: 
#line 681
    id = (int )__val_gu___0;
#line 681
    ______r___1 = __ret_gu___0 != 0;
#line 681
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 681
    tmp___1 = ______r___1 != 0;
  }
#line 681
  if (tmp___1) {
#line 682
    err = -14;
#line 683
    goto ldv_35322;
  } else {

  }
#line 685
  dev = get_mdevice((u_int )id);
#line 686
  ______f___4.func = "base_sock_ioctl";
#line 686
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 686
  ______f___4.line = 686U;
#line 686
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 686
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 686
  ______r___4 = (unsigned long )dev != (unsigned long )((struct mISDNdevice *)0);
#line 686
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 686
  if (______r___4 != 0) {
#line 689
    di.id = dev->id;
#line 690
    di.Dprotocols = dev->Dprotocols;
#line 691
    tmp___2 = get_all_Bprotocols();
#line 691
    di.Bprotocols = dev->Bprotocols | tmp___2;
#line 692
    di.protocol = dev->D.protocol;
#line 693
    __len = 16UL;
#line 693
    ______f___2.func = "base_sock_ioctl";
#line 693
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 693
    ______f___2.line = 694U;
#line 693
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 693
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 693
    ______r___2 = __len > 63UL;
#line 693
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 693
    if (______r___2 != 0) {
#line 693
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
#line 693
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
#line 695
    di.nrbchan = dev->nrbchan;
#line 696
    tmp___3 = dev_name((struct device  const  *)(& dev->dev));
#line 696
    strcpy((char *)(& di.name), tmp___3);
#line 697
    ______f___3.func = "base_sock_ioctl";
#line 697
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 697
    ______f___3.line = 697U;
#line 697
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 697
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 697
    tmp___4 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
#line 697
    ______r___3 = tmp___4 != 0UL;
#line 697
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 697
    if (______r___3 != 0) {
#line 698
      err = -14;
    } else {

    }
  } else {
#line 700
    err = -19;
  }
#line 701
  goto ldv_35322;
  case 2149075271U: 
#line 705
  ______f___5.func = "base_sock_ioctl";
#line 705
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 705
  ______f___5.line = 706U;
#line 705
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 705
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 705
  tmp___5 = copy_from_user((void *)(& dn), (void const   *)arg, 24U);
#line 705
  ______r___5 = tmp___5 != 0UL;
#line 705
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 705
  if (______r___5 != 0) {
#line 707
    err = -14;
#line 708
    goto ldv_35322;
  } else {

  }
#line 710
  dev = get_mdevice(dn.id);
#line 711
  ______f___6.func = "base_sock_ioctl";
#line 711
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 711
  ______f___6.line = 711U;
#line 711
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 711
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 711
  ______r___6 = (unsigned long )dev != (unsigned long )((struct mISDNdevice *)0);
#line 711
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 711
  if (______r___6 != 0) {
#line 712
    err = device_rename(& dev->dev, (char *)(& dn.name));
  } else {
#line 714
    err = -19;
  }
#line 716
  goto ldv_35322;
  default: 
#line 718
  err = -22;
  }
  ldv_35322: ;
#line 720
  return (err);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 726
  maddr = (struct sockaddr_mISDN *)addr;
#line 727
  sk = sock->sk;
#line 728
  err = 0;
#line 730
  ______f.func = "base_sock_bind";
#line 730
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 730
  ______f.line = 730U;
#line 730
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 730
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 730
  ______r = (unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U;
#line 730
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 730
  if (______r != 0) {
#line 731
    return (-22);
  } else {

  }
#line 733
  lock_sock(sk);
#line 735
  ______f___0.func = "base_sock_bind";
#line 735
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 735
  ______f___0.line = 735U;
#line 735
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 735
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 735
  ______r___0 = (unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0);
#line 735
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 735
  if (______r___0 != 0) {
#line 736
    err = -114;
#line 737
    goto done;
  } else {

  }
#line 740
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
#line 741
  ______f___1.func = "base_sock_bind";
#line 741
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 741
  ______f___1.line = 741U;
#line 741
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 741
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 741
  ______r___1 = (unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0);
#line 741
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 741
  if (______r___1 != 0) {
#line 742
    err = -19;
#line 743
    goto done;
  } else {

  }
#line 745
  sk->__sk_common.skc_state = 2U;
  done: 
#line 748
  release_sock(sk);
#line 749
  return (err);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto_ops  const  base_sock_ops  = 
#line 752
     {34, & __this_module, & base_sock_release, & base_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & sock_no_getname, & sock_no_poll, & base_sock_ioctl,
    0, & sock_no_listen, & sock_no_shutdown, & sock_no_setsockopt, & sock_no_getsockopt,
    0, 0, & sock_no_sendmsg, & sock_no_recvmsg, & sock_no_mmap, 0, 0};
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 778
  ______f.func = "base_sock_create";
#line 778
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 778
  ______f.line = 778U;
#line 778
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 778
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 778
  ______r = (int )sock->type != 3;
#line 778
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 778
  if (______r != 0) {
#line 779
    return (-94);
  } else {

  }
#line 781
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
#line 782
  ______f___0.func = "base_sock_create";
#line 782
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 782
  ______f___0.line = 782U;
#line 782
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 782
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 782
  ______r___0 = (unsigned long )sk == (unsigned long )((struct sock *)0);
#line 782
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 782
  if (______r___0 != 0) {
#line 783
    return (-12);
  } else {

  }
#line 785
  sock_init_data(sock, sk);
#line 786
  sock->ops = & base_sock_ops;
#line 787
  sock->state = SS_UNCONNECTED;
#line 788
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 789
  sk->sk_protocol = (unsigned char )protocol;
#line 790
  sk->__sk_common.skc_state = 1U;
#line 791
  mISDN_sock_link(& base_sockets, sk);
#line 793
  return (0);
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_create(struct net *net , struct socket *sock , int proto ) 
{ 
  int err ;

  {
#line 799
  err = -93;
#line 801
  switch (proto) {
  case 0: 
#line 803
  err = base_sock_create(net, sock, proto);
#line 804
  goto ldv_35447;
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: ;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 817
  err = data_sock_create(net, sock, proto);
#line 818
  goto ldv_35447;
  default: ;
#line 820
  return (err);
  }
  ldv_35447: ;
#line 823
  return (err);
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
static struct net_proto_family mISDN_sock_family_ops  =    {34, & mISDN_sock_create, & __this_module};
#line 834 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
int misdn_sock_init(u_int *deb ) 
{ 
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 838
  debug___0 = deb;
#line 839
  err = sock_register((struct net_proto_family  const  *)(& mISDN_sock_family_ops));
#line 840
  ______f.func = "misdn_sock_init";
#line 840
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 840
  ______f.line = 840U;
#line 840
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 840
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 840
  ______r = err != 0;
#line 840
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 840
  if (______r != 0) {
#line 841
    printk("<3>%s: error(%d)\n", "misdn_sock_init", err);
  } else {

  }
#line 842
  return (err);
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
void misdn_sock_cleanup(void) 
{ 


  {
#line 848
  sock_unregister(34);
#line 849
  return;
}
}
#line 889 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
void ldv_main2_sequence_infinite_withcheck_stateful(void) 
{ 
  struct socket *var_group1 ;
  unsigned int var_data_sock_ioctl_10_p1 ;
  unsigned long var_data_sock_ioctl_10_p2 ;
  struct sockaddr *var_group2 ;
  int var_data_sock_bind_13_p2 ;
  int *var_data_sock_getname_14_p2 ;
  int var_data_sock_getname_14_p3 ;
  struct kiocb *var_group3 ;
  struct msghdr *var_mISDN_sock_sendmsg_7_p2 ;
  size_t var_mISDN_sock_sendmsg_7_p3 ;
  struct msghdr *var_mISDN_sock_recvmsg_6_p2 ;
  size_t var_mISDN_sock_recvmsg_6_p3 ;
  int var_mISDN_sock_recvmsg_6_p4 ;
  int var_data_sock_setsockopt_11_p1 ;
  int var_data_sock_setsockopt_11_p2 ;
  char *var_data_sock_setsockopt_11_p3 ;
  int var_data_sock_setsockopt_11_p4 ;
  int var_data_sock_getsockopt_12_p1 ;
  int var_data_sock_getsockopt_12_p2 ;
  char *var_data_sock_getsockopt_12_p3 ;
  int *var_data_sock_getsockopt_12_p4 ;
  unsigned int var_base_sock_ioctl_17_p1 ;
  unsigned long var_base_sock_ioctl_17_p2 ;
  int var_base_sock_bind_18_p2 ;
  struct net *var_group4 ;
  int var_mISDN_sock_create_20_p2 ;
  int ldv_s_data_sock_ops_proto_ops ;
  int ldv_s_base_sock_ops_proto_ops ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;

  {
#line 1029
  ldv_s_data_sock_ops_proto_ops = 0;
#line 1032
  ldv_s_base_sock_ops_proto_ops = 0;
#line 1019
  LDV_IN_INTERRUPT = 1;
#line 1028
  ldv_initialize();
#line 1038
  goto ldv_35539;
  ldv_35538: 
#line 1043
  tmp = nondet_int();
#line 1043
  switch (tmp) {
  case 0: 
#line 1048
  ______f.func = "ldv_main2_sequence_infinite_withcheck_stateful";
#line 1048
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 1048
  ______f.line = 1048U;
#line 1048
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1048
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1048
  ______r = ldv_s_data_sock_ops_proto_ops == 0;
#line 1048
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1048
  if (______r != 0) {
#line 1056
    ldv_handler_precall();
#line 1057
    data_sock_release(var_group1);
#line 1058
    ldv_s_data_sock_ops_proto_ops = 0;
  } else {

  }
#line 1064
  goto ldv_35522;
  case 1: 
#line 1076
  ldv_handler_precall();
#line 1077
  data_sock_ioctl(var_group1, var_data_sock_ioctl_10_p1, var_data_sock_ioctl_10_p2);
#line 1084
  goto ldv_35522;
  case 2: 
#line 1096
  ldv_handler_precall();
#line 1097
  data_sock_bind(var_group1, var_group2, var_data_sock_bind_13_p2);
#line 1104
  goto ldv_35522;
  case 3: 
#line 1116
  ldv_handler_precall();
#line 1117
  data_sock_getname(var_group1, var_group2, var_data_sock_getname_14_p2, var_data_sock_getname_14_p3);
#line 1124
  goto ldv_35522;
  case 4: 
#line 1136
  ldv_handler_precall();
#line 1137
  mISDN_sock_sendmsg(var_group3, var_group1, var_mISDN_sock_sendmsg_7_p2, var_mISDN_sock_sendmsg_7_p3);
#line 1144
  goto ldv_35522;
  case 5: 
#line 1156
  ldv_handler_precall();
#line 1157
  mISDN_sock_recvmsg(var_group3, var_group1, var_mISDN_sock_recvmsg_6_p2, var_mISDN_sock_recvmsg_6_p3,
                     var_mISDN_sock_recvmsg_6_p4);
#line 1164
  goto ldv_35522;
  case 6: 
#line 1176
  ldv_handler_precall();
#line 1177
  data_sock_setsockopt(var_group1, var_data_sock_setsockopt_11_p1, var_data_sock_setsockopt_11_p2,
                       var_data_sock_setsockopt_11_p3, var_data_sock_setsockopt_11_p4);
#line 1184
  goto ldv_35522;
  case 7: 
#line 1196
  ldv_handler_precall();
#line 1197
  data_sock_getsockopt(var_group1, var_data_sock_getsockopt_12_p1, var_data_sock_getsockopt_12_p2,
                       var_data_sock_getsockopt_12_p3, var_data_sock_getsockopt_12_p4);
#line 1204
  goto ldv_35522;
  case 8: 
#line 1208
  ______f___0.func = "ldv_main2_sequence_infinite_withcheck_stateful";
#line 1208
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared";
#line 1208
  ______f___0.line = 1208U;
#line 1208
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1208
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1208
  ______r___0 = ldv_s_base_sock_ops_proto_ops == 0;
#line 1208
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1208
  if (______r___0 != 0) {
#line 1216
    ldv_handler_precall();
#line 1217
    base_sock_release(var_group1);
#line 1218
    ldv_s_base_sock_ops_proto_ops = 0;
  } else {

  }
#line 1224
  goto ldv_35522;
  case 9: 
#line 1236
  ldv_handler_precall();
#line 1237
  base_sock_ioctl(var_group1, var_base_sock_ioctl_17_p1, var_base_sock_ioctl_17_p2);
#line 1244
  goto ldv_35522;
  case 10: 
#line 1256
  ldv_handler_precall();
#line 1257
  base_sock_bind(var_group1, var_group2, var_base_sock_bind_18_p2);
#line 1264
  goto ldv_35522;
  case 11: 
#line 1276
  ldv_handler_precall();
#line 1277
  mISDN_sock_create(var_group4, var_group1, var_mISDN_sock_create_20_p2);
#line 1284
  goto ldv_35522;
  default: ;
#line 1285
  goto ldv_35522;
  }
  ldv_35522: ;
  ldv_35539: 
#line 1038
  tmp___0 = nondet_int();
#line 1038
  if ((tmp___0 != 0 || ldv_s_data_sock_ops_proto_ops != 0) || ldv_s_base_sock_ops_proto_ops != 0) {
#line 1041
    goto ldv_35538;
  } else {

  }


#line 1294
  ldv_check_final_state();
#line 1297
  return;
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
unsigned long ldv___get_free_pages_37(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 1318
  ldv_check_alloc_flags(ldv_func_arg1);
#line 1320
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 1320
  return (tmp);
}
}
#line 1367 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
void *ldv_kmem_cache_alloc_42(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 1373
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1375
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 1376
  return ((void *)0);
}
}
#line 1410 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1416
  ldv_check_alloc_flags(priority);
#line 1418
  tmp = ldv_alloc_skb_46(size, priority);
#line 1418
  return (tmp);
}
}
#line 1443 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
struct sk_buff *ldv_skb_clone_49(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1449
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1451
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 1451
  return (tmp);
}
}
#line 1465 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
struct sk_buff *ldv_skb_copy_51(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1471
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1473
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 1473
  return (tmp);
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_52(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1483
  ldv_check_alloc_flags(ldv_func_arg3);
#line 1485
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 1485
  return (tmp);
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/socket.c.prepared"
int ldv_pskb_expand_head_53(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 1496
  ldv_check_alloc_flags(ldv_func_arg4);
#line 1498
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 1498
  return (tmp);
}
}
#line 27 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 39 "include/linux/spinlock_api_smp.h"
extern unsigned long _read_lock_irqsave(rwlock_t * ) ;
#line 58
extern void _read_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
#line 116 "include/linux/time.h"
extern void do_gettimeofday(struct timeval * ) ;
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_61(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_66(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 461 "include/linux/skbuff.h"
struct sk_buff *ldv_skb_clone_73(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_75(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 476
int ldv_pskb_expand_head_77(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_76(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) ;
#line 559 "include/linux/mISDNif.h"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) ;
#line 561
void mISDN_unregister_clock(struct mISDNclock *iclock ) ;
#line 572
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) ;
#line 573
unsigned short mISDN_clock_get(void) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static u_int *debug___1  ;
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static struct list_head iclock_list  =    {& iclock_list, & iclock_list};
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static rwlock_t iclock_lock  =    {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "iclock_lock",
                                                                  0, 0UL}};
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static u16 iclock_count  ;
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static struct timeval iclock_tv  ;
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static int iclock_tv_valid  ;
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static struct mISDNclock *iclock_current  ;
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_init_clock(u_int *dp ) 
{ 


  {
#line 67
  debug___1 = dp;
#line 68
  do_gettimeofday(& iclock_tv);
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
static void select_iclock(void) 
{ 
  struct mISDNclock *iclock ;
  struct mISDNclock *bestclock ;
  struct mISDNclock *lastclock ;
  int pri ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  struct list_head  const  *__mptr___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 74
  bestclock = 0;
#line 74
  lastclock = 0;
#line 75
  pri = -128;
#line 77
  __mptr = (struct list_head  const  *)iclock_list.next;
#line 77
  iclock = (struct mISDNclock *)__mptr;
#line 77
  goto ldv_34698;
  ldv_34697: 
#line 78
  ______f.func = "select_iclock";
#line 78
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 78
  ______f.line = 78U;
#line 78
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 78
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 78
  ______r = iclock->pri > pri;
#line 78
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 78
  if (______r != 0) {
#line 79
    pri = iclock->pri;
#line 80
    bestclock = iclock;
  } else {

  }
#line 82
  ______f___0.func = "select_iclock";
#line 82
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 82
  ______f___0.line = 82U;
#line 82
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 82
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 82
  ______r___0 = (unsigned long )iclock_current == (unsigned long )iclock;
#line 82
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 82
  if (______r___0 != 0) {
#line 83
    lastclock = iclock;
  } else {

  }
#line 77
  __mptr___0 = (struct list_head  const  *)iclock->list.next;
#line 77
  iclock = (struct mISDNclock *)__mptr___0;
  ldv_34698: 
#line 77
  __builtin_prefetch((void const   *)iclock->list.next);
#line 77
  if ((unsigned long )(& iclock->list) != (unsigned long )(& iclock_list)) {
#line 78
    goto ldv_34697;
  } else {

  }
#line 85
  ______f___2.func = "select_iclock";
#line 85
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 85
  ______f___2.line = 85U;
#line 85
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 85
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 85
  ______r___2 = (unsigned long )lastclock != (unsigned long )((struct mISDNclock *)0) && (unsigned long )bestclock != (unsigned long )lastclock;
#line 85
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 85
  if (______r___2 != 0) {
#line 87
    ______f___1.func = "select_iclock";
#line 87
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 87
    ______f___1.line = 87U;
#line 87
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 87
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 87
    ______r___1 = (*debug___1 & 33554432U) != 0U;
#line 87
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 87
    if (______r___1 != 0) {
#line 88
      printk("<7>Old clock source \'%s\' disable.\n", (char *)(& lastclock->name));
    } else {

    }
#line 90
    (*(lastclock->ctl))(lastclock->priv, 0);
  } else {

  }
#line 92
  ______f___4.func = "select_iclock";
#line 92
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 92
  ______f___4.line = 92U;
#line 92
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 92
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 92
  ______r___4 = (unsigned long )bestclock != (unsigned long )((struct mISDNclock *)0) && (unsigned long )bestclock != (unsigned long )iclock_current;
#line 92
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 92
  if (______r___4 != 0) {
#line 94
    ______f___3.func = "select_iclock";
#line 94
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 94
    ______f___3.line = 94U;
#line 94
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 94
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 94
    ______r___3 = (*debug___1 & 33554432U) != 0U;
#line 94
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 94
    if (______r___3 != 0) {
#line 95
      printk("<7>New clock source \'%s\' enable.\n", (char *)(& bestclock->name));
    } else {

    }
#line 97
    (*(bestclock->ctl))(bestclock->priv, 1);
  } else {

  }
#line 99
  ______f___5.func = "select_iclock";
#line 99
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 99
  ______f___5.line = 99U;
#line 99
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 99
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 99
  ______r___5 = (unsigned long )bestclock != (unsigned long )iclock_current;
#line 99
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 99
  if (______r___5 != 0) {
#line 101
    iclock_tv_valid = 0;
  } else {

  }
#line 103
  iclock_current = bestclock;
#line 104
  return;
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) 
{ 
  u_long flags ;
  struct mISDNclock *iclock ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  void *tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 112
  ______f.func = "mISDN_register_clock";
#line 112
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 112
  ______f.line = 112U;
#line 112
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 112
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 112
  ______r = (*debug___1 & 33554687U) != 0U;
#line 112
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 112
  if (______r != 0) {
#line 113
    printk("<7>%s: %s %d\n", "mISDN_register_clock", name, pri);
  } else {

  }
#line 114
  tmp = kzalloc(104UL, 32U);
#line 114
  iclock = (struct mISDNclock *)tmp;
#line 115
  ______f___0.func = "mISDN_register_clock";
#line 115
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 115
  ______f___0.line = 115U;
#line 115
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 115
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 115
  ______r___0 = (unsigned long )iclock == (unsigned long )((struct mISDNclock *)0);
#line 115
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 115
  if (______r___0 != 0) {
#line 116
    printk("<3>%s: No memory for clock entry.\n", "mISDN_register_clock");
#line 117
    return (0);
  } else {

  }
#line 119
  strncpy((char *)(& iclock->name), (char const   *)name, 63UL);
#line 120
  iclock->pri = pri;
#line 121
  iclock->priv = priv;
#line 122
  iclock->ctl = ctl;
#line 123
  flags = _write_lock_irqsave(& iclock_lock);
#line 124
  list_add_tail(& iclock->list, & iclock_list);
#line 125
  select_iclock();
#line 126
  _write_unlock_irqrestore(& iclock_lock, flags);
#line 127
  return (iclock);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_unregister_clock(struct mISDNclock *iclock ) 
{ 
  u_long flags ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 136
  ______f.func = "mISDN_unregister_clock";
#line 136
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 136
  ______f.line = 136U;
#line 136
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 136
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 136
  ______r = (*debug___1 & 33554687U) != 0U;
#line 136
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 136
  if (______r != 0) {
#line 137
    printk("<7>%s: %s %d\n", "mISDN_unregister_clock", (char *)(& iclock->name), iclock->pri);
  } else {

  }
#line 139
  flags = _write_lock_irqsave(& iclock_lock);
#line 140
  ______f___1.func = "mISDN_unregister_clock";
#line 140
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 140
  ______f___1.line = 140U;
#line 140
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 140
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 140
  ______r___1 = (unsigned long )iclock_current == (unsigned long )iclock;
#line 140
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 140
  if (______r___1 != 0) {
#line 141
    ______f___0.func = "mISDN_unregister_clock";
#line 141
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 141
    ______f___0.line = 141U;
#line 141
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 141
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 141
    ______r___0 = (*debug___1 & 33554432U) != 0U;
#line 141
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 141
    if (______r___0 != 0) {
#line 142
      printk("<7>Current clock source \'%s\' unregisters.\n", (char *)(& iclock->name));
    } else {

    }
#line 145
    (*(iclock->ctl))(iclock->priv, 0);
  } else {

  }
#line 147
  list_del(& iclock->list);
#line 148
  select_iclock();
#line 149
  _write_unlock_irqrestore(& iclock_lock, flags);
#line 150
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 161
  flags = _write_lock_irqsave(& iclock_lock);
#line 162
  ______f.func = "mISDN_clock_update";
#line 162
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 162
  ______f.line = 162U;
#line 162
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 162
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 162
  ______r = (unsigned long )iclock_current != (unsigned long )iclock;
#line 162
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 162
  if (______r != 0) {
#line 163
    printk("<3>%s: \'%s\' sends us clock updates, but we do listen to \'%s\'. This is a bug!\n",
           "mISDN_clock_update", (char *)(& iclock->name), (unsigned long )iclock_current != (unsigned long )((struct mISDNclock *)0) ? (char *)(& iclock_current->name) : (char *)"nothing");
#line 167
    (*(iclock->ctl))(iclock->priv, 0);
#line 168
    _write_unlock_irqrestore(& iclock_lock, flags);
#line 169
    return;
  } else {

  }
#line 171
  ______f___4.func = "mISDN_clock_update";
#line 171
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 171
  ______f___4.line = 171U;
#line 171
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 171
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 171
  ______r___4 = iclock_tv_valid != 0;
#line 171
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 171
  if (______r___4 != 0) {
#line 173
    iclock_count = (u16 )((int )((short )samples) + (int )((short )iclock_count));
#line 174
    ______f___0.func = "mISDN_clock_update";
#line 174
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 174
    ______f___0.line = 174U;
#line 174
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 174
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 174
    ______r___0 = (unsigned long )tv != (unsigned long )((struct timeval *)0);
#line 174
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 174
    if (______r___0 != 0) {
#line 175
      iclock_tv.tv_sec = tv->tv_sec;
#line 176
      iclock_tv.tv_usec = tv->tv_usec;
    } else {
#line 178
      do_gettimeofday(& iclock_tv);
    }
  } else {
#line 181
    ______f___1.func = "mISDN_clock_update";
#line 181
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 181
    ______f___1.line = 181U;
#line 181
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 181
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 181
    ______r___1 = (unsigned long )tv != (unsigned long )((struct timeval *)0);
#line 181
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 181
    if (______r___1 != 0) {
#line 182
      tv_now.tv_sec = tv->tv_sec;
#line 183
      tv_now.tv_usec = tv->tv_usec;
    } else {
#line 185
      do_gettimeofday(& tv_now);
    }
#line 186
    elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 187
    elapsed_8000th = (int )(tv_now.tv_usec / 125L) - (int )(iclock_tv.tv_usec / 125L);
#line 189
    ______f___2.func = "mISDN_clock_update";
#line 189
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 189
    ______f___2.line = 189U;
#line 189
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 189
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 189
    ______r___2 = elapsed_8000th < 0;
#line 189
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 189
    if (______r___2 != 0) {
#line 190
      elapsed_sec = elapsed_sec - 1L;
#line 191
      elapsed_8000th = elapsed_8000th + 8000;
    } else {

    }
#line 194
    iclock_count = (u16 )(((int )((short )elapsed_sec) * 8000 + (int )((short )elapsed_8000th)) + (int )((short )iclock_count));
#line 195
    iclock_tv.tv_sec = tv_now.tv_sec;
#line 196
    iclock_tv.tv_usec = tv_now.tv_usec;
#line 197
    iclock_tv_valid = 1;
#line 198
    ______f___3.func = "mISDN_clock_update";
#line 198
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 198
    ______f___3.line = 198U;
#line 198
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 198
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 198
    ______r___3 = (*debug___1 & 33554432U) != 0U;
#line 198
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 198
    if (______r___3 != 0) {
#line 199
      printk("Received first clock from source \'%s\'.\n", (unsigned long )iclock_current != (unsigned long )((struct mISDNclock *)0) ? (char *)(& iclock_current->name) : (char *)"nothing");
    } else {

    }
  }
#line 202
  _write_unlock_irqrestore(& iclock_lock, flags);
#line 203
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
unsigned short mISDN_clock_get(void) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;
  u16 count ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 215
  flags = _read_lock_irqsave(& iclock_lock);
#line 217
  do_gettimeofday(& tv_now);
#line 218
  elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 219
  elapsed_8000th = (int )(tv_now.tv_usec / 125L) - (int )(iclock_tv.tv_usec / 125L);
#line 220
  ______f.func = "mISDN_clock_get";
#line 220
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared";
#line 220
  ______f.line = 220U;
#line 220
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 220
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 220
  ______r = elapsed_8000th < 0;
#line 220
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 220
  if (______r != 0) {
#line 221
    elapsed_sec = elapsed_sec - 1L;
#line 222
    elapsed_8000th = elapsed_8000th + 8000;
  } else {

  }
#line 225
  count = (u16 )(((int )((short )elapsed_sec) * 8000 + (int )((short )iclock_count)) + (int )((short )elapsed_8000th));
#line 226
  _read_unlock_irqrestore(& iclock_lock, flags);
#line 227
  return (count);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
unsigned long ldv___get_free_pages_61(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 248
  ldv_check_alloc_flags(ldv_func_arg1);
#line 250
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 250
  return (tmp);
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
void *ldv_kmem_cache_alloc_66(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 303
  ldv_check_alloc_flags(ldv_func_arg2);
#line 305
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 306
  return ((void *)0);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
struct sk_buff *ldv_skb_clone_73(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 379
  ldv_check_alloc_flags(ldv_func_arg2);
#line 381
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 381
  return (tmp);
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
struct sk_buff *ldv_skb_copy_75(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 401
  ldv_check_alloc_flags(ldv_func_arg2);
#line 403
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 403
  return (tmp);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_76(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                          gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 413
  ldv_check_alloc_flags(ldv_func_arg3);
#line 415
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 415
  return (tmp);
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/clock.c.prepared"
int ldv_pskb_expand_head_77(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                            gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 426
  ldv_check_alloc_flags(ldv_func_arg4);
#line 428
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 428
  return (tmp);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 236 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_85(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 209 "include/linux/workqueue.h"
extern void flush_scheduled_work(void) ;
#line 211
extern int schedule_work(struct work_struct * ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_90(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 430 "include/linux/skbuff.h"
extern void consume_skb(struct sk_buff * ) ;
#line 434
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) ;
#line 461
struct sk_buff *ldv_skb_clone_97(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_99(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 476
int ldv_pskb_expand_head_101(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 799 "include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct sk_buff *tmp ;

  {
#line 801
  tmp = (struct sk_buff *)list;
#line 801
  list->next = tmp;
#line 801
  list->prev = tmp;
#line 802
  list->qlen = 0U;
#line 803
  return;
}
}
#line 813 "include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct lock_class_key __key ;

  {
#line 815
  __spin_lock_init(& list->lock, "&list->lock", & __key);
#line 816
  __skb_queue_head_init(list);
#line 817
  return;
}
}
#line 975
extern void skb_queue_tail(struct sk_buff_head * , struct sk_buff * ) ;
#line 1007
extern struct sk_buff *skb_dequeue(struct sk_buff_head * ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_100(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 511 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  long tmp ;

  {
#line 515
  skb = alloc_skb(len + 8U, gfp_mask);
#line 516
  ______f.func = "mI_alloc_skb";
#line 516
  ______f.file = "include/linux/mISDNif.h";
#line 516
  ______f.line = 516U;
#line 516
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  ______f___0.func = "mI_alloc_skb";
#line 516
  ______f___0.file = "include/linux/mISDNif.h";
#line 516
  ______f___0.line = 516U;
#line 516
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 516
  ______r___0 = (int )tmp;
#line 516
  ftrace_likely_update(& ______f___0, ______r___0, 1);
#line 516
  ______r = ______r___0 != 0;
#line 516
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 516
  if (______r != 0) {
#line 517
    skb_reserve(skb, 8);
  } else {

  }
#line 518
  return (skb);
}
}
#line 522 "include/linux/mISDNif.h"
__inline static struct sk_buff *_alloc_mISDN_skb(u_int prim , u_int id , u_int len ,
                                                 void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 524
  tmp = mI_alloc_skb(len, gfp_mask);
#line 524
  skb = tmp;
#line 527
  ______f.func = "_alloc_mISDN_skb";
#line 527
  ______f.file = "include/linux/mISDNif.h";
#line 527
  ______f.line = 527U;
#line 527
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 527
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 527
  ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 527
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 527
  if (______r != 0) {
#line 528
    return (0);
  } else {

  }
#line 529
  ______f___0.func = "_alloc_mISDN_skb";
#line 529
  ______f___0.file = "include/linux/mISDNif.h";
#line 529
  ______f___0.line = 529U;
#line 529
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 529
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 529
  ______r___0 = len != 0U;
#line 529
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 529
  if (______r___0 != 0) {
#line 530
    __len = (size_t )len;
#line 530
    tmp___1 = skb_put(skb, len);
#line 530
    __ret = __builtin_memcpy((void *)tmp___1, (void const   *)dp, __len);
  } else {

  }
#line 531
  hh = (struct mISDNhead *)(& skb->cb);
#line 532
  hh->prim = prim;
#line 533
  hh->id = id;
#line 534
  return (skb);
}
}
#line 538 "include/linux/mISDNif.h"
__inline static void _queue_data(struct mISDNchannel *ch , u_int prim , u_int id ,
                                 u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;

  {
#line 543
  ______f.func = "_queue_data";
#line 543
  ______f.file = "include/linux/mISDNif.h";
#line 543
  ______f.line = 543U;
#line 543
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 543
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 543
  ______r = (unsigned long )ch->peer == (unsigned long )((struct mISDNchannel *)0);
#line 543
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 543
  if (______r != 0) {
#line 544
    return;
  } else {

  }
#line 545
  skb = _alloc_mISDN_skb(prim, id, len, dp, gfp_mask);
#line 546
  ______f___0.func = "_queue_data";
#line 546
  ______f___0.file = "include/linux/mISDNif.h";
#line 546
  ______f___0.line = 546U;
#line 546
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 546
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 546
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 546
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 546
  if (______r___0 != 0) {
#line 547
    return;
  } else {

  }
#line 548
  ______f___1.func = "_queue_data";
#line 548
  ______f___1.file = "include/linux/mISDNif.h";
#line 548
  ______f___1.line = 548U;
#line 548
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 548
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 548
  tmp = (*(ch->recv))(ch->peer, skb);
#line 548
  ______r___1 = tmp != 0;
#line 548
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 548
  if (______r___1 != 0) {
#line 549
    consume_skb(skb);
  } else {

  }
#line 550
  return;
}
}
#line 178 "include/linux/mISDNhw.h"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) ;
#line 179
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) ;
#line 180
int mISDN_freedchannel(struct dchannel *ch ) ;
#line 181
int mISDN_freebchannel(struct bchannel *ch ) ;
#line 182
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) ;
#line 184
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) ;
#line 185
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) ;
#line 186
void recv_Dchannel(struct dchannel *dch ) ;
#line 187
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) ;
#line 188
void recv_Bchannel(struct bchannel *bch , unsigned int id ) ;
#line 189
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) ;
#line 190
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) ;
#line 191
void confirm_Bsend(struct bchannel *bch ) ;
#line 192
int get_next_bframe(struct bchannel *bch ) ;
#line 193
int get_next_dframe(struct dchannel *dch ) ;
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void dchannel_bh(struct work_struct *ws ) 
{ 
  struct dchannel *dch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___0 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___1 ;

  {
#line 38
  __mptr = (struct work_struct  const  *)ws;
#line 38
  dch = (struct dchannel *)__mptr + 0xfffffffffffffd98UL;
#line 42
  ______f___2.func = "dchannel_bh";
#line 42
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 42
  ______f___2.line = 42U;
#line 42
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 42
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 42
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 42
  ______r___2 = tmp___0 != 0;
#line 42
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 42
  if (______r___2 != 0) {
#line 43
    goto ldv_34758;
    ldv_34757: 
#line 44
    ______f___0.func = "dchannel_bh";
#line 44
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 44
    ______f___0.line = 44U;
#line 44
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 44
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 44
    ______f___1.func = "dchannel_bh";
#line 44
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 44
    ______f___1.line = 44U;
#line 44
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 44
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 44
    tmp = __builtin_expect((unsigned long )dch->dev.D.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
#line 44
    ______r___1 = (int )tmp;
#line 44
    ftrace_likely_update(& ______f___1, ______r___1, 1);
#line 44
    ______r___0 = ______r___1 != 0;
#line 44
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 44
    if (______r___0 != 0) {
#line 45
      err = (*(dch->dev.D.recv))(dch->dev.D.peer, skb);
#line 46
      ______f.func = "dchannel_bh";
#line 46
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 46
      ______f.line = 46U;
#line 46
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 46
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 46
      ______r = err != 0;
#line 46
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 46
      if (______r != 0) {
#line 47
        consume_skb(skb);
      } else {

      }
    } else {
#line 49
      consume_skb(skb);
    }
    ldv_34758: 
#line 43
    skb = skb_dequeue(& dch->rqueue);
#line 43
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 44
      goto ldv_34757;
    } else {

    }

  } else {

  }
#line 52
  ______f___4.func = "dchannel_bh";
#line 52
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 52
  ______f___4.line = 52U;
#line 52
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 52
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 52
  tmp___1 = test_and_clear_bit(31, (unsigned long volatile   *)(& dch->Flags));
#line 52
  ______r___4 = tmp___1 != 0;
#line 52
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 52
  if (______r___4 != 0) {
#line 53
    ______f___3.func = "dchannel_bh";
#line 53
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 53
    ______f___3.line = 53U;
#line 53
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 53
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 53
    ______r___3 = (unsigned long )dch->phfunc != (unsigned long )((void (*)(struct dchannel * ))0);
#line 53
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 53
    if (______r___3 != 0) {
#line 54
      (*(dch->phfunc))(dch);
    } else {

    }
  } else {

  }
#line 55
  return;
}
}
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void bchannel_bh(struct work_struct *ws ) 
{ 
  struct bchannel *bch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___0 ;

  {
#line 61
  __mptr = (struct work_struct  const  *)ws;
#line 61
  bch = (struct bchannel *)__mptr + 0xffffffffffffffa0UL;
#line 65
  ______f___2.func = "bchannel_bh";
#line 65
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 65
  ______f___2.line = 65U;
#line 65
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 65
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 65
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 65
  ______r___2 = tmp___0 != 0;
#line 65
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 65
  if (______r___2 != 0) {
#line 66
    goto ldv_34794;
    ldv_34793: 
#line 67
    bch->rcount = bch->rcount - 1;
#line 68
    ______f___0.func = "bchannel_bh";
#line 68
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 68
    ______f___0.line = 68U;
#line 68
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 68
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 68
    ______f___1.func = "bchannel_bh";
#line 68
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 68
    ______f___1.line = 68U;
#line 68
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 68
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 68
    tmp = __builtin_expect((unsigned long )bch->ch.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
#line 68
    ______r___1 = (int )tmp;
#line 68
    ftrace_likely_update(& ______f___1, ______r___1, 1);
#line 68
    ______r___0 = ______r___1 != 0;
#line 68
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 68
    if (______r___0 != 0) {
#line 69
      err = (*(bch->ch.recv))(bch->ch.peer, skb);
#line 70
      ______f.func = "bchannel_bh";
#line 70
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 70
      ______f.line = 70U;
#line 70
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 70
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 70
      ______r = err != 0;
#line 70
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 70
      if (______r != 0) {
#line 71
        consume_skb(skb);
      } else {

      }
    } else {
#line 73
      consume_skb(skb);
    }
    ldv_34794: 
#line 66
    skb = skb_dequeue(& bch->rqueue);
#line 66
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 67
      goto ldv_34793;
    } else {

    }

  } else {

  }
#line 72
  return;
}
}
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 81
  test_and_set_bit(13, (unsigned long volatile   *)(& ch->Flags));
#line 82
  ch->maxlen = maxlen;
#line 83
  ch->hw = 0;
#line 84
  ch->rx_skb = 0;
#line 85
  ch->tx_skb = 0;
#line 86
  ch->tx_idx = 0;
#line 87
  ch->phfunc = (void (*)(struct dchannel * ))phf;
#line 88
  skb_queue_head_init(& ch->squeue);
#line 89
  skb_queue_head_init(& ch->rqueue);
#line 90
  INIT_LIST_HEAD(& ch->dev.bchannels);
#line 91
  __constr_expr_0.counter = 0L;
#line 91
  ch->workq.data = __constr_expr_0;
#line 91
  lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key, 0);
#line 91
  INIT_LIST_HEAD(& ch->workq.entry);
#line 91
  ch->workq.func = & dchannel_bh;
#line 92
  return (0);
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 99
  ch->Flags = 0UL;
#line 100
  ch->maxlen = maxlen;
#line 101
  ch->hw = 0;
#line 102
  ch->rx_skb = 0;
#line 103
  ch->tx_skb = 0;
#line 104
  ch->tx_idx = 0;
#line 105
  skb_queue_head_init(& ch->rqueue);
#line 106
  ch->rcount = 0;
#line 107
  ch->next_skb = 0;
#line 108
  __constr_expr_0.counter = 0L;
#line 108
  ch->workq.data = __constr_expr_0;
#line 108
  lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key, 0);
#line 108
  INIT_LIST_HEAD(& ch->workq.entry);
#line 108
  ch->workq.func = & bchannel_bh;
#line 109
  return (0);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_freedchannel(struct dchannel *ch ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 116
  ______f.func = "mISDN_freedchannel";
#line 116
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 116
  ______f.line = 116U;
#line 116
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 116
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 116
  ______r = (unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0);
#line 116
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 116
  if (______r != 0) {
#line 117
    consume_skb(ch->tx_skb);
#line 118
    ch->tx_skb = 0;
  } else {

  }
#line 120
  ______f___0.func = "mISDN_freedchannel";
#line 120
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 120
  ______f___0.line = 120U;
#line 120
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 120
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 120
  ______r___0 = (unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0);
#line 120
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 120
  if (______r___0 != 0) {
#line 121
    consume_skb(ch->rx_skb);
#line 122
    ch->rx_skb = 0;
  } else {

  }
#line 124
  skb_queue_purge(& ch->squeue);
#line 125
  skb_queue_purge(& ch->rqueue);
#line 126
  flush_scheduled_work();
#line 127
  return (0);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_freebchannel(struct bchannel *ch ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 134
  ______f.func = "mISDN_freebchannel";
#line 134
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 134
  ______f.line = 134U;
#line 134
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 134
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 134
  ______r = (unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0);
#line 134
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 134
  if (______r != 0) {
#line 135
    consume_skb(ch->tx_skb);
#line 136
    ch->tx_skb = 0;
  } else {

  }
#line 138
  ______f___0.func = "mISDN_freebchannel";
#line 138
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 138
  ______f___0.line = 138U;
#line 138
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 138
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 138
  ______r___0 = (unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0);
#line 138
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 138
  if (______r___0 != 0) {
#line 139
    consume_skb(ch->rx_skb);
#line 140
    ch->rx_skb = 0;
  } else {

  }
#line 142
  ______f___1.func = "mISDN_freebchannel";
#line 142
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 142
  ______f___1.line = 142U;
#line 142
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 142
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 142
  ______r___1 = (unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0);
#line 142
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 142
  if (______r___1 != 0) {
#line 143
    consume_skb(ch->next_skb);
#line 144
    ch->next_skb = 0;
  } else {

  }
#line 146
  skb_queue_purge(& ch->rqueue);
#line 147
  ch->rcount = 0;
#line 148
  flush_scheduled_work();
#line 149
  return (0);
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
__inline static u_int get_sapi_tei(u_char *p ) 
{ 
  u_int sapi ;
  u_int tei ;

  {
#line 158
  sapi = (u_int )((int )*p >> 2);
#line 159
  tei = (u_int )((int )*(p + 1UL) >> 1);
#line 160
  return ((tei << 8) | sapi);
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Dchannel(struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 168
  ______f.func = "recv_Dchannel";
#line 168
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 168
  ______f.line = 168U;
#line 168
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 168
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 168
  ______r = (dch->rx_skb)->len <= 1U;
#line 168
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 168
  if (______r != 0) {
#line 169
    consume_skb(dch->rx_skb);
#line 170
    dch->rx_skb = 0;
#line 171
    return;
  } else {

  }
#line 173
  hh = (struct mISDNhead *)(& (dch->rx_skb)->cb);
#line 174
  hh->prim = 8194U;
#line 175
  hh->id = get_sapi_tei((dch->rx_skb)->data);
#line 176
  skb_queue_tail(& dch->rqueue, dch->rx_skb);
#line 177
  dch->rx_skb = 0;
#line 178
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 178
  schedule_work(& dch->workq);
#line 179
  return;
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 187
  ______f.func = "recv_Echannel";
#line 187
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 187
  ______f.line = 187U;
#line 187
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 187
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 187
  ______r = (ech->rx_skb)->len <= 1U;
#line 187
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 187
  if (______r != 0) {
#line 188
    consume_skb(ech->rx_skb);
#line 189
    ech->rx_skb = 0;
#line 190
    return;
  } else {

  }
#line 192
  hh = (struct mISDNhead *)(& (ech->rx_skb)->cb);
#line 193
  hh->prim = 12290U;
#line 194
  hh->id = get_sapi_tei((ech->rx_skb)->data);
#line 195
  skb_queue_tail(& dch->rqueue, ech->rx_skb);
#line 196
  ech->rx_skb = 0;
#line 197
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 197
  schedule_work(& dch->workq);
#line 198
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Bchannel(struct bchannel *bch , unsigned int id ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 206
  hh = (struct mISDNhead *)(& (bch->rx_skb)->cb);
#line 207
  hh->prim = 8194U;
#line 208
  hh->id = id;
#line 209
  ______f.func = "recv_Bchannel";
#line 209
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 209
  ______f.line = 209U;
#line 209
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 209
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 209
  ______r = bch->rcount > 63;
#line 209
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 209
  if (______r != 0) {
#line 210
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 212
    skb_queue_purge(& bch->rqueue);
#line 213
    bch->rcount = 0;
#line 214
    return;
  } else {

  }
#line 216
  bch->rcount = bch->rcount + 1;
#line 217
  skb_queue_tail(& bch->rqueue, bch->rx_skb);
#line 218
  bch->rx_skb = 0;
#line 219
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 219
  schedule_work(& bch->workq);
#line 220
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) 
{ 


  {
#line 226
  skb_queue_tail(& dch->rqueue, skb);
#line 227
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 227
  schedule_work(& dch->workq);
#line 228
  return;
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 234
  ______f.func = "recv_Bchannel_skb";
#line 234
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 234
  ______f.line = 234U;
#line 234
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 234
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 234
  ______r = bch->rcount > 63;
#line 234
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 234
  if (______r != 0) {
#line 235
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 237
    skb_queue_purge(& bch->rqueue);
#line 238
    bch->rcount = 0;
  } else {

  }
#line 240
  bch->rcount = bch->rcount + 1;
#line 241
  skb_queue_tail(& bch->rqueue, skb);
#line 242
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 242
  schedule_work(& bch->workq);
#line 243
  return;
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void confirm_Dsend(struct dchannel *dch ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 251
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id,
                         0U, 0, 32U);
#line 253
  ______f.func = "confirm_Dsend";
#line 253
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 253
  ______f.line = 253U;
#line 253
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 253
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 253
  ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 253
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 253
  if (______r != 0) {
#line 254
    printk("<3>%s: no skb id %x\n", "confirm_Dsend", ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id);
#line 256
    return;
  } else {

  }
#line 258
  skb_queue_tail(& dch->rqueue, skb);
#line 259
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 259
  schedule_work(& dch->workq);
#line 260
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int get_next_dframe(struct dchannel *dch ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 265
  dch->tx_idx = 0;
#line 266
  dch->tx_skb = skb_dequeue(& dch->squeue);
#line 267
  ______f.func = "get_next_dframe";
#line 267
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 267
  ______f.line = 267U;
#line 267
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 267
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 267
  ______r = (unsigned long )dch->tx_skb != (unsigned long )((struct sk_buff *)0);
#line 267
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 267
  if (______r != 0) {
#line 268
    confirm_Dsend(dch);
#line 269
    return (1);
  } else {

  }
#line 271
  dch->tx_skb = 0;
#line 272
  test_and_clear_bit(0, (unsigned long volatile   *)(& dch->Flags));
#line 273
  return (0);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void confirm_Bsend(struct bchannel *bch ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 282
  ______f.func = "confirm_Bsend";
#line 282
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 282
  ______f.line = 282U;
#line 282
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 282
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 282
  ______r = bch->rcount > 63;
#line 282
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 282
  if (______r != 0) {
#line 283
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 285
    skb_queue_purge(& bch->rqueue);
#line 286
    bch->rcount = 0;
  } else {

  }
#line 288
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id,
                         0U, 0, 32U);
#line 290
  ______f___0.func = "confirm_Bsend";
#line 290
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 290
  ______f___0.line = 290U;
#line 290
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 290
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 290
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 290
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 290
  if (______r___0 != 0) {
#line 291
    printk("<3>%s: no skb id %x\n", "confirm_Bsend", ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id);
#line 293
    return;
  } else {

  }
#line 295
  bch->rcount = bch->rcount + 1;
#line 296
  skb_queue_tail(& bch->rqueue, skb);
#line 297
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 297
  schedule_work(& bch->workq);
#line 298
  return;
}
}
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int get_next_bframe(struct bchannel *bch ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___0 ;

  {
#line 304
  bch->tx_idx = 0;
#line 305
  ______f___1.func = "get_next_bframe";
#line 305
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 305
  ______f___1.line = 305U;
#line 305
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 305
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 305
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& bch->Flags));
#line 305
  ______r___1 = tmp___0 != 0;
#line 305
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 305
  if (______r___1 != 0) {
#line 306
    bch->tx_skb = bch->next_skb;
#line 307
    ______f___0.func = "get_next_bframe";
#line 307
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 307
    ______f___0.line = 307U;
#line 307
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 307
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 307
    ______r___0 = (unsigned long )bch->tx_skb != (unsigned long )((struct sk_buff *)0);
#line 307
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 307
    if (______r___0 != 0) {
#line 308
      bch->next_skb = 0;
#line 309
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
#line 310
      ______f.func = "get_next_bframe";
#line 310
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 310
      ______f.line = 310U;
#line 310
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 310
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 310
      tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& bch->Flags));
#line 310
      ______r = tmp == 0;
#line 310
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 310
      if (______r != 0) {
#line 311
        confirm_Bsend(bch);
      } else {

      }
#line 312
      return (1);
    } else {
#line 314
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
#line 315
      printk("<4>B TX_NEXT without skb\n");
    }
  } else {

  }
#line 318
  bch->tx_skb = 0;
#line 319
  test_and_clear_bit(0, (unsigned long volatile   *)(& bch->Flags));
#line 320
  return (0);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 329
  ______f___1.func = "queue_ch_frame";
#line 329
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 329
  ______f___1.line = 329U;
#line 329
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 329
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 329
  ______r___1 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 329
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 329
  if (______r___1 != 0) {
#line 330
    _queue_data(ch, pr, (u_int )id, 0U, 0, 32U);
  } else {
#line 332
    ______f___0.func = "queue_ch_frame";
#line 332
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 332
    ______f___0.line = 332U;
#line 332
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 332
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 332
    ______r___0 = (unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0);
#line 332
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 332
    if (______r___0 != 0) {
#line 333
      hh = (struct mISDNhead *)(& skb->cb);
#line 334
      hh->prim = pr;
#line 335
      hh->id = (unsigned int )id;
#line 336
      ______f.func = "queue_ch_frame";
#line 336
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 336
      ______f.line = 336U;
#line 336
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 336
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 336
      tmp = (*(ch->recv))(ch->peer, skb);
#line 336
      ______r = tmp == 0;
#line 336
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 336
      if (______r != 0) {
#line 337
        return;
      } else {

      }
    } else {

    }
#line 339
    consume_skb(skb);
  }
#line 341
  return;
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;

  {
#line 348
  ______f.func = "dchannel_senddata";
#line 348
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 348
  ______f.line = 348U;
#line 348
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 348
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 348
  ______r = skb->len == 0U;
#line 348
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 348
  if (______r != 0) {
#line 349
    printk("<4>%s: skb too small\n", "dchannel_senddata");
#line 350
    return (-22);
  } else {

  }
#line 352
  ______f___0.func = "dchannel_senddata";
#line 352
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 352
  ______f___0.line = 352U;
#line 352
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 352
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 352
  ______r___0 = skb->len > (unsigned int )ch->maxlen;
#line 352
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 352
  if (______r___0 != 0) {
#line 353
    printk("<4>%s: skb too large(%d/%d)\n", "dchannel_senddata", skb->len, ch->maxlen);
#line 355
    return (-22);
  } else {

  }
#line 358
  ______f___1.func = "dchannel_senddata";
#line 358
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 358
  ______f___1.line = 358U;
#line 358
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 358
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 358
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
#line 358
  ______r___1 = tmp != 0;
#line 358
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 358
  if (______r___1 != 0) {
#line 359
    skb_queue_tail(& ch->squeue, skb);
#line 360
    return (0);
  } else {
#line 363
    ch->tx_skb = skb;
#line 364
    ch->tx_idx = 0;
#line 365
    return (1);
  }
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp ;

  {
#line 375
  ______f.func = "bchannel_senddata";
#line 375
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 375
  ______f.line = 375U;
#line 375
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 375
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 375
  ______r = skb->len == 0U;
#line 375
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 375
  if (______r != 0) {
#line 376
    printk("<4>%s: skb too small\n", "bchannel_senddata");
#line 377
    return (-22);
  } else {

  }
#line 379
  ______f___0.func = "bchannel_senddata";
#line 379
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 379
  ______f___0.line = 379U;
#line 379
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 379
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 379
  ______r___0 = skb->len > (unsigned int )ch->maxlen;
#line 379
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 379
  if (______r___0 != 0) {
#line 380
    printk("<4>%s: skb too large(%d/%d)\n", "bchannel_senddata", skb->len, ch->maxlen);
#line 382
    return (-22);
  } else {

  }
#line 386
  ______f___1.func = "bchannel_senddata";
#line 386
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 386
  ______f___1.line = 386U;
#line 386
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 386
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 386
  ______r___1 = (unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0);
#line 386
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 386
  if (______r___1 != 0) {
#line 387
    printk("<4>%s: next_skb exist ERROR (skb->len=%d next_skb->len=%d)\n", "bchannel_senddata",
           skb->len, (ch->next_skb)->len);
#line 390
    return (-16);
  } else {

  }
#line 392
  ______f___2.func = "bchannel_senddata";
#line 392
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared";
#line 392
  ______f___2.line = 392U;
#line 392
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 392
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 392
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
#line 392
  ______r___2 = tmp != 0;
#line 392
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 392
  if (______r___2 != 0) {
#line 393
    test_and_set_bit(1, (unsigned long volatile   *)(& ch->Flags));
#line 394
    ch->next_skb = skb;
#line 395
    return (0);
  } else {
#line 398
    ch->tx_skb = skb;
#line 399
    ch->tx_idx = 0;
#line 400
    return (1);
  }
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
unsigned long ldv___get_free_pages_85(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 422
  ldv_check_alloc_flags(ldv_func_arg1);
#line 424
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 424
  return (tmp);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
void *ldv_kmem_cache_alloc_90(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 477
  ldv_check_alloc_flags(ldv_func_arg2);
#line 479
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 480
  return ((void *)0);
}
}
#line 547 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
struct sk_buff *ldv_skb_clone_97(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 553
  ldv_check_alloc_flags(ldv_func_arg2);
#line 555
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 555
  return (tmp);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
struct sk_buff *ldv_skb_copy_99(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 575
  ldv_check_alloc_flags(ldv_func_arg2);
#line 577
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 577
  return (tmp);
}
}
#line 580 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_100(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 587
  ldv_check_alloc_flags(ldv_func_arg3);
#line 589
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 589
  return (tmp);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/hwchannel.c.prepared"
int ldv_pskb_expand_head_101(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 600
  ldv_check_alloc_flags(ldv_func_arg4);
#line 602
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 602
  return (tmp);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1917: ;
#line 14
  return (ret__);
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  long tmp ;

  {
#line 34
  ______f.func = "IS_ERR";
#line 34
  ______f.file = "include/linux/err.h";
#line 34
  ______f.line = 34U;
#line 34
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 34
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 1L);
#line 34
  ______r = (int )tmp;
#line 34
  ftrace_likely_update(& ______f, ______r, 0);
#line 34
  return ((long )______r);
}
}
#line 174 "include/linux/list.h"
__inline static int list_is_last(struct list_head  const  *list , struct list_head  const  *head ) 
{ 


  {
#line 177
  return ((unsigned long )((struct list_head  const  *)list->next) == (unsigned long )head);
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 562 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 564
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 86
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 86
  return (tmp);
}
}
#line 109 "include/linux/spinlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 137
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 435
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 437
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 440
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 126
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 152
extern void mutex_unlock(struct mutex * ) ;
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_109(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 


  {
#line 75
  x->done = 0U;
#line 76
  init_waitqueue_head(& x->wait);
#line 77
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 89
extern void complete(struct completion * ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_114(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 461 "include/linux/skbuff.h"
struct sk_buff *ldv_skb_clone_121(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_123(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 471
struct sk_buff *ldv_skb_copy_126(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 475
struct sk_buff *ldv_skb_copy_127(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 484
int ldv_pskb_expand_head_125(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 534 "include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head  const  *list ) 
{ 


  {
#line 536
  return ((unsigned long )((struct sk_buff *)list->next) == (unsigned long )((struct sk_buff *)list));
}
}
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_124(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 166 "include/linux/signal.h"
__inline static void sigfillset(sigset_t *set ) 
{ 


  {
#line 168
  switch (1) {
  default: 
#line 170
  memset((void *)set, -1, 8UL);
#line 171
  goto ldv_26702;
  case 2: 
#line 172
  set->sig[1] = 0xffffffffffffffffUL;
  case 1: 
#line 173
  set->sig[0] = 0xffffffffffffffffUL;
#line 174
  goto ldv_26702;
  }
  ldv_26702: ;
#line 177
  return;
}
}
#line 342 "include/linux/sched.h"
extern void schedule(void) ;
#line 1875
extern int wake_up_process(struct task_struct * ) ;
#line 2161 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2163
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2163
  return (tmp);
}
}
#line 2187 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  long tmp___0 ;

  {
#line 2189
  ______f.func = "signal_pending";
#line 2189
  ______f.file = "include/linux/sched.h";
#line 2189
  ______f.line = 2189U;
#line 2189
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2189
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2189
  tmp = test_tsk_thread_flag(p, 2);
#line 2189
  tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 2189
  ______r = (int )tmp___0;
#line 2189
  ftrace_likely_update(& ______f, ______r, 0);
#line 2189
  return (______r);
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 571 "include/linux/mISDNif.h"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int create_teimanager(struct mISDNdevice *dev ) ;
#line 56
void delete_teimanager(struct mISDNchannel *ch ) ;
#line 62
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 63
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static u_int *debug___2  ;
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
__inline static void _queue_message(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  long tmp___0 ;

  {
#line 41
  hh = (struct mISDNhead *)(& skb->cb);
#line 43
  ______f.func = "_queue_message";
#line 43
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 43
  ______f.line = 43U;
#line 43
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 43
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 43
  ______r = (*debug___2 & 64U) != 0U;
#line 43
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 43
  if (______r != 0) {
#line 44
    printk("<7>%s prim(%x) id(%x) %p\n", "_queue_message", hh->prim, hh->id, skb);
  } else {

  }
#line 46
  skb_queue_tail(& st->msgq, skb);
#line 47
  ______f___0.func = "_queue_message";
#line 47
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 47
  ______f___0.line = 47U;
#line 47
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 47
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 47
  ______f___1.func = "_queue_message";
#line 47
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 47
  ______f___1.line = 47U;
#line 47
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 47
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 47
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 47
  tmp___0 = __builtin_expect(tmp == 0, 1L);
#line 47
  ______r___1 = (int )tmp___0;
#line 47
  ftrace_likely_update(& ______f___1, ______r___1, 1);
#line 47
  ______r___0 = ______r___1 != 0;
#line 47
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 47
  if (______r___0 != 0) {
#line 48
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
#line 49
    __wake_up(& st->workq, 1U, 1, 0);
  } else {

  }
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static int mISDN_queue_message(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
#line 56
  _queue_message(ch->st, skb);
#line 57
  return (0);
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static struct mISDNchannel *get_channel4id(struct mISDNstack *st , u_int id ) 
{ 
  struct mISDNchannel *ch ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;

  {
#line 65
  mutex_lock_nested(& st->lmutex, 0U);
#line 66
  __mptr = (struct list_head  const  *)st->layer2.next;
#line 66
  ch = (struct mISDNchannel *)__mptr;
#line 66
  goto ldv_34736;
  ldv_34735: 
#line 67
  ______f.func = "get_channel4id";
#line 67
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 67
  ______f.line = 67U;
#line 67
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 67
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 67
  ______r = ch->nr == id;
#line 67
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 67
  if (______r != 0) {
#line 68
    goto unlock;
  } else {

  }
#line 66
  __mptr___0 = (struct list_head  const  *)ch->list.next;
#line 66
  ch = (struct mISDNchannel *)__mptr___0;
  ldv_34736: 
#line 66
  __builtin_prefetch((void const   *)ch->list.next);
#line 66
  if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 67
    goto ldv_34735;
  } else {

  }
#line 70
  ch = 0;
  unlock: 
#line 72
  mutex_unlock(& st->lmutex);
#line 73
  return (ch);
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static void send_socklist(struct mISDN_sock_list *sl , struct sk_buff *skb ) 
{ 
  struct hlist_node *node ;
  struct sock *sk ;
  struct sk_buff *cskb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 81
  cskb = 0;
#line 83
  _read_lock(& sl->lock);
#line 84
  node = sl->head.first;
#line 84
  goto ldv_34765;
  ldv_34764: 
#line 85
  ______f.func = "send_socklist";
#line 85
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 85
  ______f.line = 85U;
#line 85
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 85
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 85
  ______r = (unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U;
#line 85
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 85
  if (______r != 0) {
#line 86
    goto ldv_34753;
  } else {

  }
#line 87
  ______f___0.func = "send_socklist";
#line 87
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 87
  ______f___0.line = 87U;
#line 87
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 87
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 87
  ______r___0 = (unsigned long )cskb == (unsigned long )((struct sk_buff *)0);
#line 87
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 87
  if (______r___0 != 0) {
#line 88
    cskb = ldv_skb_copy_126((struct sk_buff  const  *)skb, 208U);
  } else {

  }
#line 89
  ______f___1.func = "send_socklist";
#line 89
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 89
  ______f___1.line = 89U;
#line 89
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 89
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 89
  ______r___1 = (unsigned long )cskb == (unsigned long )((struct sk_buff *)0);
#line 89
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 89
  if (______r___1 != 0) {
#line 90
    printk("<4>%s no skb\n", "send_socklist");
#line 91
    goto ldv_34760;
  } else {

  }
#line 93
  ______f___2.func = "send_socklist";
#line 93
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 93
  ______f___2.line = 93U;
#line 93
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 93
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 93
  tmp = sock_queue_rcv_skb(sk, cskb);
#line 93
  ______r___2 = tmp == 0;
#line 93
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 93
  if (______r___2 != 0) {
#line 94
    cskb = 0;
  } else {

  }
  ldv_34753: 
#line 84
  node = node->next;
  ldv_34765: ;
#line 84
  if ((unsigned long )node != (unsigned long )((struct hlist_node *)0)) {
#line 84
    __builtin_prefetch((void const   *)node->next);
#line 84
    if (1 != 0) {
#line 84
      __mptr = (struct hlist_node  const  *)node;
#line 84
      sk = (struct sock *)__mptr + 0xfffffffffffffff8UL;
#line 84
      if (1 != 0) {
#line 85
        goto ldv_34764;
      } else {
#line 87
        goto ldv_34760;
      }
    } else {
#line 87
      goto ldv_34760;
    }
  } else {

  }
  ldv_34760: 
#line 96
  _read_unlock(& sl->lock);
#line 97
  ______f___3.func = "send_socklist";
#line 97
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 97
  ______f___3.line = 97U;
#line 97
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 97
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 97
  ______r___3 = (unsigned long )cskb != (unsigned long )((struct sk_buff *)0);
#line 97
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 97
  if (______r___3 != 0) {
#line 98
    consume_skb(cskb);
  } else {

  }
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static void send_layer2(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct sk_buff *cskb ;
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  struct list_head  const  *__mptr___2 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;

  {
#line 105
  hh = (struct mISDNhead *)(& skb->cb);
#line 109
  ______f.func = "send_layer2";
#line 109
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 109
  ______f.line = 109U;
#line 109
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 109
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 109
  ______r = (unsigned long )st == (unsigned long )((struct mISDNstack *)0);
#line 109
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 109
  if (______r != 0) {
#line 110
    return;
  } else {

  }
#line 111
  mutex_lock_nested(& st->lmutex, 0U);
#line 112
  ______f___8.func = "send_layer2";
#line 112
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 112
  ______f___8.line = 112U;
#line 112
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 112
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 112
  ______r___8 = (hh->id & 65535U) == 65535U;
#line 112
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 112
  if (______r___8 != 0) {
#line 113
    __mptr = (struct list_head  const  *)st->layer2.next;
#line 113
    ch = (struct mISDNchannel *)__mptr;
#line 113
    goto ldv_34802;
    ldv_34801: 
#line 114
    ______f___0.func = "send_layer2";
#line 114
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 114
    ______f___0.line = 114U;
#line 114
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 114
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 114
    tmp = list_is_last((struct list_head  const  *)(& ch->list), (struct list_head  const  *)(& st->layer2));
#line 114
    ______r___0 = tmp != 0;
#line 114
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 114
    if (______r___0 != 0) {
#line 115
      cskb = skb;
#line 116
      skb = 0;
    } else {
#line 118
      cskb = ldv_skb_copy_127((struct sk_buff  const  *)skb, 208U);
    }
#line 120
    ______f___3.func = "send_layer2";
#line 120
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 120
    ______f___3.line = 120U;
#line 120
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 120
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 120
    ______r___3 = (unsigned long )cskb != (unsigned long )((struct sk_buff *)0);
#line 120
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 120
    if (______r___3 != 0) {
#line 121
      ret = (*(ch->send))(ch, cskb);
#line 122
      ______f___2.func = "send_layer2";
#line 122
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 122
      ______f___2.line = 122U;
#line 122
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 122
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 122
      ______r___2 = ret != 0;
#line 122
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 122
      if (______r___2 != 0) {
#line 123
        ______f___1.func = "send_layer2";
#line 123
        ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 123
        ______f___1.line = 123U;
#line 123
        ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 123
        ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 123
        ______r___1 = (*debug___2 & 16U) != 0U;
#line 123
        ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 123
        if (______r___1 != 0) {
#line 124
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr, hh->prim,
                 ch->addr, ret);
        } else {

        }
#line 129
        consume_skb(cskb);
      } else {

      }
    } else {
#line 132
      printk("<4>%s ch%d addr %x no mem\n", "send_layer2", ch->nr, ch->addr);
#line 134
      goto out;
    }
#line 113
    __mptr___0 = (struct list_head  const  *)ch->list.next;
#line 113
    ch = (struct mISDNchannel *)__mptr___0;
    ldv_34802: 
#line 113
    __builtin_prefetch((void const   *)ch->list.next);
#line 113
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 114
      goto ldv_34801;
    } else {

    }

  } else {
#line 138
    __mptr___1 = (struct list_head  const  *)st->layer2.next;
#line 138
    ch = (struct mISDNchannel *)__mptr___1;
#line 138
    goto ldv_34815;
    ldv_34814: 
#line 139
    ______f___5.func = "send_layer2";
#line 139
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 139
    ______f___5.line = 139U;
#line 139
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 139
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 139
    ______r___5 = (hh->id & 65535U) == ch->addr;
#line 139
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 139
    if (______r___5 != 0) {
#line 140
      ret = (*(ch->send))(ch, skb);
#line 141
      ______f___4.func = "send_layer2";
#line 141
      ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 141
      ______f___4.line = 141U;
#line 141
      ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 141
      ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 141
      ______r___4 = ret == 0;
#line 141
      ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 141
      if (______r___4 != 0) {
#line 142
        skb = 0;
      } else {

      }
#line 143
      goto out;
    } else {

    }
#line 138
    __mptr___2 = (struct list_head  const  *)ch->list.next;
#line 138
    ch = (struct mISDNchannel *)__mptr___2;
    ldv_34815: 
#line 138
    __builtin_prefetch((void const   *)ch->list.next);
#line 138
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 139
      goto ldv_34814;
    } else {

    }
#line 146
    ret = (*(((st->dev)->teimgr)->ctrl))((st->dev)->teimgr, 1024U, (void *)skb);
#line 147
    ______f___7.func = "send_layer2";
#line 147
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 147
    ______f___7.line = 147U;
#line 147
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 147
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 147
    ______r___7 = ret == 0;
#line 147
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 147
    if (______r___7 != 0) {
#line 148
      skb = 0;
    } else {
#line 149
      ______f___6.func = "send_layer2";
#line 149
      ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 149
      ______f___6.line = 149U;
#line 149
      ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 149
      ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 149
      ______r___6 = (*debug___2 & 16U) != 0U;
#line 149
      ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 149
      if (______r___6 != 0) {
#line 150
        printk("<7>%s ch%d mgr prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr,
               hh->prim, ch->addr, ret);
      } else {

      }
    }
  }
  out: 
#line 155
  mutex_unlock(& st->lmutex);
#line 156
  ______f___9.func = "send_layer2";
#line 156
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 156
  ______f___9.line = 156U;
#line 156
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 156
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 156
  ______r___9 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 156
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 156
  if (______r___9 != 0) {
#line 157
    consume_skb(skb);
  } else {

  }
#line 158
  return;
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
__inline static int send_msg_to_layer(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int lm ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int __ret_warn_on ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  long tmp___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  long tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  char const   *tmp___8 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;

  {
#line 163
  hh = (struct mISDNhead *)(& skb->cb);
#line 167
  lm = (int )hh->prim & 255;
#line 168
  ______f.func = "send_msg_to_layer";
#line 168
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 168
  ______f.line = 168U;
#line 168
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 168
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 168
  ______r = (*debug___2 & 64U) != 0U;
#line 168
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 168
  if (______r != 0) {
#line 169
    printk("<7>%s prim(%x) id(%x) %p\n", "send_msg_to_layer", hh->prim, hh->id, skb);
  } else {

  }
#line 171
  ______f___10.func = "send_msg_to_layer";
#line 171
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 171
  ______f___10.line = 171U;
#line 171
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 171
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 171
  ______r___10 = lm == 1;
#line 171
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 171
  if (______r___10 != 0) {
#line 172
    ______f___0.func = "send_msg_to_layer";
#line 172
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 172
    ______f___0.line = 172U;
#line 172
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 172
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 172
    tmp = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 172
    ______r___0 = tmp == 0;
#line 172
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 172
    if (______r___0 != 0) {
#line 173
      __net_timestamp(skb);
#line 174
      send_socklist(& st->l1sock, skb);
    } else {

    }
#line 176
    tmp___0 = (*((st->layer1)->send))(st->layer1, skb);
#line 176
    return (tmp___0);
  } else {
#line 177
    ______f___9.func = "send_msg_to_layer";
#line 177
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 177
    ______f___9.line = 177U;
#line 177
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 177
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 177
    ______r___9 = lm == 2;
#line 177
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 177
    if (______r___9 != 0) {
#line 178
      ______f___1.func = "send_msg_to_layer";
#line 178
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 178
      ______f___1.line = 178U;
#line 178
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 178
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 178
      tmp___1 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 178
      ______r___1 = tmp___1 == 0;
#line 178
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 178
      if (______r___1 != 0) {
#line 179
        send_socklist(& st->l1sock, skb);
      } else {

      }
#line 180
      send_layer2(st, skb);
#line 181
      return (0);
    } else {
#line 182
      ______f___8.func = "send_msg_to_layer";
#line 182
      ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 182
      ______f___8.line = 182U;
#line 182
      ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 182
      ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 182
      ______r___8 = lm == 4;
#line 182
      ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 182
      if (______r___8 != 0) {
#line 183
        ch = get_channel4id(st, hh->id);
#line 184
        ______f___2.func = "send_msg_to_layer";
#line 184
        ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 184
        ______f___2.line = 184U;
#line 184
        ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 184
        ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 184
        ______r___2 = (unsigned long )ch != (unsigned long )((struct mISDNchannel *)0);
#line 184
        ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 184
        if (______r___2 != 0) {
#line 185
          tmp___2 = (*(ch->send))(ch, skb);
#line 185
          return (tmp___2);
        } else {
#line 187
          tmp___3 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 187
          printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer",
                 tmp___3, hh->prim, hh->id);
        }
      } else {
#line 191
        ______f___7.func = "send_msg_to_layer";
#line 191
        ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 191
        ______f___7.line = 191U;
#line 191
        ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 191
        ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 191
        ______r___7 = lm == 8;
#line 191
        ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 191
        if (______r___7 != 0) {
#line 192
          __ret_warn_on = lm == 8;
#line 192
          ______f___3.func = "send_msg_to_layer";
#line 192
          ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 192
          ______f___3.line = 192U;
#line 192
          ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 192
          ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 192
          ______f___4.func = "send_msg_to_layer";
#line 192
          ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 192
          ______f___4.line = 192U;
#line 192
          ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 192
          ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 192
          tmp___4 = __builtin_expect(__ret_warn_on != 0, 1L);
#line 192
          ______r___4 = (int )tmp___4;
#line 192
          ftrace_likely_update(& ______f___4, ______r___4, 0);
#line 192
          ______r___3 = ______r___4 != 0;
#line 192
          ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 192
          if (______r___3 != 0) {
#line 192
            warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared",
                               192);
          } else {

          }
#line 192
          ______f___5.func = "send_msg_to_layer";
#line 192
          ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 192
          ______f___5.line = 192U;
#line 192
          ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 192
          ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 192
          tmp___5 = __builtin_expect(__ret_warn_on != 0, 1L);
#line 192
          ______r___5 = (int )tmp___5;
#line 192
          ftrace_likely_update(& ______f___5, ______r___5, 0);
#line 193
          ch = get_channel4id(st, hh->id);
#line 194
          ______f___6.func = "send_msg_to_layer";
#line 194
          ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 194
          ______f___6.line = 194U;
#line 194
          ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 194
          ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 194
          ______r___6 = (unsigned long )ch != (unsigned long )((struct mISDNchannel *)0);
#line 194
          ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 194
          if (______r___6 != 0) {
#line 195
            tmp___6 = (*(ch->send))(ch, skb);
#line 195
            return (tmp___6);
          } else {
#line 197
            tmp___7 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 197
            printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer",
                   tmp___7, hh->prim, hh->id);
          }
        } else {
#line 203
          tmp___8 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 203
          printk("<4>%s: dev(%s) prim %x not delivered\n", "send_msg_to_layer", tmp___8,
                 hh->prim);
        }
      }
    }
  }
#line 206
  return (-3);
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static void do_clear_stack(struct mISDNstack *st ) 
{ 


  {
#line 212
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static int mISDNStackd(void *data ) 
{ 
  struct mISDNstack *st ;
  int err ;
  struct task_struct *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  struct sk_buff *skb ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;
  long tmp___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  char const   *tmp___3 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  long tmp___4 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int tmp___8 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int tmp___9 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int tmp___10 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int tmp___11 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  char const   *tmp___15 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int tmp___16 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;

  {
#line 217
  st = (struct mISDNstack *)data;
#line 218
  err = 0;
#line 221
  lock_kernel();
#line 223
  tmp = get_current();
#line 223
  sigfillset(& tmp->blocked);
#line 225
  unlock_kernel();
#line 227
  ______f.func = "mISDNStackd";
#line 227
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 227
  ______f.line = 227U;
#line 227
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 227
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 227
  ______r = (*debug___2 & 32U) != 0U;
#line 227
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 227
  if (______r != 0) {
#line 228
    tmp___0 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 228
    printk("<7>mISDNStackd %s started\n", tmp___0);
  } else {

  }
#line 231
  ______f___0.func = "mISDNStackd";
#line 231
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 231
  ______f___0.line = 231U;
#line 231
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 231
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 231
  ______r___0 = (unsigned long )st->notify != (unsigned long )((struct completion *)0);
#line 231
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 231
  if (______r___0 != 0) {
#line 232
    complete(st->notify);
#line 233
    st->notify = 0;
  } else {

  }
  ldv_34979: 
#line 239
  ______f___1.func = "mISDNStackd";
#line 239
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 239
  ______f___1.line = 239U;
#line 239
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 239
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 239
  ______f___2.func = "mISDNStackd";
#line 239
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 239
  ______f___2.line = 239U;
#line 239
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 239
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 239
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 239
  tmp___2 = __builtin_expect(tmp___1 != 0, 1L);
#line 239
  ______r___2 = (int )tmp___2;
#line 239
  ftrace_likely_update(& ______f___2, ______r___2, 0);
#line 239
  ______r___1 = ______r___2 != 0;
#line 239
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 239
  if (______r___1 != 0) {
#line 240
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 241
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {
#line 243
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
  }
#line 244
  goto ldv_34912;
  ldv_34941: 
#line 245
  skb = skb_dequeue(& st->msgq);
#line 246
  ______f___4.func = "mISDNStackd";
#line 246
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 246
  ______f___4.line = 246U;
#line 246
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 246
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 246
  ______r___4 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 246
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 246
  if (______r___4 != 0) {
#line 247
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 250
    skb = skb_dequeue(& st->msgq);
#line 251
    ______f___3.func = "mISDNStackd";
#line 251
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 251
    ______f___3.line = 251U;
#line 251
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 251
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 251
    ______r___3 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 251
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 251
    if (______r___3 != 0) {
#line 252
      goto ldv_34912;
    } else {

    }
#line 253
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 259
  err = send_msg_to_layer(st, skb);
#line 260
  ______f___6.func = "mISDNStackd";
#line 260
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 260
  ______f___6.line = 260U;
#line 260
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 260
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 260
  ______f___7.func = "mISDNStackd";
#line 260
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 260
  ______f___7.line = 260U;
#line 260
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 260
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 260
  tmp___4 = __builtin_expect(err != 0, 1L);
#line 260
  ______r___7 = (int )tmp___4;
#line 260
  ftrace_likely_update(& ______f___7, ______r___7, 0);
#line 260
  ______r___6 = ______r___7 != 0;
#line 260
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 260
  if (______r___6 != 0) {
#line 261
    ______f___5.func = "mISDNStackd";
#line 261
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 261
    ______f___5.line = 261U;
#line 261
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 261
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 261
    ______r___5 = (*debug___2 & 16U) != 0U;
#line 261
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 261
    if (______r___5 != 0) {
#line 262
      tmp___3 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 262
      printk("<7>%s: %s prim(%x) id(%x) send call(%d)\n", "mISDNStackd", tmp___3,
             ((struct mISDNhead *)(& skb->cb))->prim, ((struct mISDNhead *)(& skb->cb))->id,
             err);
    } else {

    }
#line 268
    consume_skb(skb);
#line 269
    goto ldv_34912;
  } else {

  }
#line 271
  ______f___8.func = "mISDNStackd";
#line 271
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 271
  ______f___8.line = 272U;
#line 271
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 271
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 271
  ______f___9.func = "mISDNStackd";
#line 271
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 271
  ______f___9.line = 272U;
#line 271
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 271
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 271
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 271
  tmp___6 = __builtin_expect(tmp___5 != 0, 1L);
#line 271
  ______r___9 = (int )tmp___6;
#line 271
  ftrace_likely_update(& ______f___9, ______r___9, 0);
#line 271
  ______r___8 = ______r___9 != 0;
#line 271
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 271
  if (______r___8 != 0) {
#line 273
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 275
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 277
    goto ldv_34940;
  } else {

  }
  ldv_34912: 
#line 244
  tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& st->status));
#line 244
  if (tmp___7 != 0) {
#line 245
    goto ldv_34941;
  } else {

  }
  ldv_34940: 
#line 280
  ______f___10.func = "mISDNStackd";
#line 280
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 280
  ______f___10.line = 280U;
#line 280
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 280
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 280
  tmp___8 = constant_test_bit(2U, (unsigned long const volatile   *)(& st->status));
#line 280
  ______r___10 = tmp___8 != 0;
#line 280
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 280
  if (______r___10 != 0) {
#line 281
    test_and_set_bit(16, (unsigned long volatile   *)(& st->status));
#line 282
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 283
    do_clear_stack(st);
#line 284
    test_and_clear_bit(2, (unsigned long volatile   *)(& st->status));
#line 285
    test_and_set_bit(3, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 287
  ______f___12.func = "mISDNStackd";
#line 287
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 287
  ______f___12.line = 287U;
#line 287
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 287
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 287
  tmp___10 = test_and_clear_bit(3, (unsigned long volatile   *)(& st->status));
#line 287
  ______r___12 = tmp___10 != 0;
#line 287
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 287
  if (______r___12 != 0) {
#line 288
    test_and_clear_bit(16, (unsigned long volatile   *)(& st->status));
#line 289
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
#line 290
    ______f___11.func = "mISDNStackd";
#line 290
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 290
    ______f___11.line = 290U;
#line 290
    ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 290
    ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 290
    tmp___9 = skb_queue_empty((struct sk_buff_head  const  *)(& st->msgq));
#line 290
    ______r___11 = tmp___9 == 0;
#line 290
    ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 290
    if (______r___11 != 0) {
#line 291
      test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
    } else {

    }
  } else {

  }
#line 294
  ______f___13.func = "mISDNStackd";
#line 294
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 294
  ______f___13.line = 294U;
#line 294
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 294
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 294
  tmp___11 = constant_test_bit(15U, (unsigned long const volatile   *)(& st->status));
#line 294
  ______r___13 = tmp___11 != 0;
#line 294
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 294
  if (______r___13 != 0) {
#line 295
    goto ldv_34954;
  } else {

  }
#line 296
  ______f___14.func = "mISDNStackd";
#line 296
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 296
  ______f___14.line = 296U;
#line 296
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 296
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 296
  ______r___14 = (unsigned long )st->notify != (unsigned long )((struct completion *)0);
#line 296
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 296
  if (______r___14 != 0) {
#line 297
    complete(st->notify);
#line 298
    st->notify = 0;
  } else {

  }
#line 303
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
#line 304
  __ret = 0;
#line 304
  ______f___17.func = "mISDNStackd";
#line 304
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 304
  ______f___17.line = 305U;
#line 304
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 304
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 304
  ______r___17 = (st->status & 65535UL) == 0UL;
#line 304
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 304
  if (______r___17 != 0) {
#line 304
    tmp___12 = get_current();
#line 304
    __wait.flags = 0U;
#line 304
    __wait.private = (void *)tmp___12;
#line 304
    __wait.func = & autoremove_wake_function;
#line 304
    __wait.task_list.next = & __wait.task_list;
#line 304
    __wait.task_list.prev = & __wait.task_list;
    ldv_34971: 
#line 304
    prepare_to_wait(& st->workq, & __wait, 1);
#line 304
    ______f___15.func = "mISDNStackd";
#line 304
    ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 304
    ______f___15.line = 305U;
#line 304
    ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 304
    ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 304
    ______r___15 = (st->status & 65535UL) != 0UL;
#line 304
    ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 304
    if (______r___15 != 0) {
#line 304
      goto ldv_34966;
    } else {

    }
#line 304
    ______f___16.func = "mISDNStackd";
#line 304
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 304
    ______f___16.line = 305U;
#line 304
    ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 304
    ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 304
    tmp___13 = get_current();
#line 304
    tmp___14 = signal_pending(tmp___13);
#line 304
    ______r___16 = tmp___14 == 0;
#line 304
    ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 304
    if (______r___16 != 0) {
#line 304
      schedule();
#line 304
      goto ldv_34970;
    } else {

    }
#line 304
    __ret = -512;
#line 304
    goto ldv_34966;
    ldv_34970: ;
#line 304
    goto ldv_34971;
    ldv_34966: 
#line 304
    finish_wait(& st->workq, & __wait);
  } else {

  }
#line 306
  ______f___18.func = "mISDNStackd";
#line 306
  ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 306
  ______f___18.line = 306U;
#line 306
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 306
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 306
  ______r___18 = (*debug___2 & 32U) != 0U;
#line 306
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 306
  if (______r___18 != 0) {
#line 307
    tmp___15 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 307
    printk("<7>%s: %s wake status %08lx\n", "mISDNStackd", tmp___15, st->status);
  } else {

  }
#line 309
  test_and_set_bit(29, (unsigned long volatile   *)(& st->status));
#line 311
  test_and_clear_bit(4, (unsigned long volatile   *)(& st->status));
#line 313
  ______f___19.func = "mISDNStackd";
#line 313
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 313
  ______f___19.line = 313U;
#line 313
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 313
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 313
  tmp___16 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 313
  ______r___19 = tmp___16 != 0;
#line 313
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 313
  if (______r___19 != 0) {
#line 314
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 319
  goto ldv_34979;
  ldv_34954: 
#line 334
  test_and_set_bit(31, (unsigned long volatile   *)(& st->status));
#line 335
  test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 336
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
#line 337
  test_and_clear_bit(15, (unsigned long volatile   *)(& st->status));
#line 338
  skb_queue_purge(& st->msgq);
#line 339
  st->thread = 0;
#line 340
  ______f___20.func = "mISDNStackd";
#line 340
  ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 340
  ______f___20.line = 340U;
#line 340
  ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 340
  ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 340
  ______r___20 = (unsigned long )st->notify != (unsigned long )((struct completion *)0);
#line 340
  ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 340
  if (______r___20 != 0) {
#line 341
    complete(st->notify);
#line 342
    st->notify = 0;
  } else {

  }
#line 344
  return (0);
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static int l1_receive(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 350
  ______f.func = "l1_receive";
#line 350
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 350
  ______f.line = 350U;
#line 350
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 350
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 350
  ______r = (unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0);
#line 350
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 350
  if (______r != 0) {
#line 351
    return (-19);
  } else {

  }
#line 352
  __net_timestamp(skb);
#line 353
  _queue_message(ch->st, skb);
#line 354
  return (0);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) 
{ 


  {
#line 360
  ch->addr = (tei << 8) | sapi;
#line 361
  return;
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 366
  list_add_tail(& ch->list, & st->layer2);
#line 367
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 372
  mutex_lock_nested(& st->lmutex, 0U);
#line 373
  __add_layer2(ch, st);
#line 374
  mutex_unlock(& st->lmutex);
#line 375
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
static int st_own_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 380
  ______f.func = "st_own_ctrl";
#line 380
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 380
  ______f.line = 380U;
#line 380
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 380
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 380
  ______r = (unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0) || (unsigned long )(ch->st)->layer1 != (unsigned long )((struct mISDNchannel *)0);
#line 380
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 380
  if (______r != 0) {
#line 381
    return (-22);
  } else {

  }
#line 382
  tmp = (*(((ch->st)->layer1)->ctrl))((ch->st)->layer1, cmd, arg);
#line 382
  return (tmp);
}
}
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
int create_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *newst ;
  int err ;
  struct completion done ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  char const   *tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  struct task_struct *__k ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  long tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  long tmp___6 ;

  {
#line 390
  init_completion(& done);
#line 390
  done = done;
#line 392
  tmp = kzalloc(528UL, 208U);
#line 392
  newst = (struct mISDNstack *)tmp;
#line 393
  ______f.func = "create_stack";
#line 393
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 393
  ______f.line = 393U;
#line 393
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 393
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 393
  ______r = (unsigned long )newst == (unsigned long )((struct mISDNstack *)0);
#line 393
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 393
  if (______r != 0) {
#line 394
    printk("<3>kmalloc mISDN_stack failed\n");
#line 395
    return (-12);
  } else {

  }
#line 397
  newst->dev = dev;
#line 398
  INIT_LIST_HEAD(& newst->layer2);
#line 399
  newst->l1sock.head.first = 0;
#line 400
  __rwlock_init(& newst->l1sock.lock, "&newst->l1sock.lock", & __key);
#line 401
  init_waitqueue_head(& newst->workq);
#line 402
  skb_queue_head_init(& newst->msgq);
#line 403
  __mutex_init(& newst->lmutex, "&newst->lmutex", & __key___0);
#line 404
  dev->D.st = newst;
#line 405
  err = create_teimanager(dev);
#line 406
  ______f___0.func = "create_stack";
#line 406
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 406
  ______f___0.line = 406U;
#line 406
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 406
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 406
  ______r___0 = err != 0;
#line 406
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 406
  if (______r___0 != 0) {
#line 407
    printk("<3>kmalloc teimanager failed\n");
#line 408
    kfree((void const   *)newst);
#line 409
    return (err);
  } else {

  }
#line 411
  (dev->teimgr)->peer = & newst->own;
#line 412
  (dev->teimgr)->recv = & mISDN_queue_message;
#line 413
  (dev->teimgr)->st = newst;
#line 414
  newst->layer1 = & dev->D;
#line 415
  dev->D.recv = & l1_receive;
#line 416
  dev->D.peer = & newst->own;
#line 417
  newst->own.st = newst;
#line 418
  newst->own.ctrl = & st_own_ctrl;
#line 419
  newst->own.send = & mISDN_queue_message;
#line 420
  newst->own.recv = & mISDN_queue_message;
#line 421
  ______f___1.func = "create_stack";
#line 421
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 421
  ______f___1.line = 421U;
#line 421
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 421
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 421
  ______r___1 = (*debug___2 & 2U) != 0U;
#line 421
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 421
  if (______r___1 != 0) {
#line 422
    tmp___0 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 422
    printk("<7>%s: st(%s)\n", "create_stack", tmp___0);
  } else {

  }
#line 424
  newst->notify = & done;
#line 425
  tmp___1 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 425
  tmp___2 = kthread_create(& mISDNStackd, (void *)newst, "mISDN_%s", tmp___1);
#line 425
  __k = tmp___2;
#line 425
  ______f___2.func = "create_stack";
#line 425
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 425
  ______f___2.line = 426U;
#line 425
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 425
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 425
  tmp___3 = IS_ERR((void const   *)__k);
#line 425
  ______r___2 = tmp___3 == 0L;
#line 425
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 425
  if (______r___2 != 0) {
#line 425
    wake_up_process(__k);
  } else {

  }
#line 425
  newst->thread = __k;
#line 427
  ______f___3.func = "create_stack";
#line 427
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 427
  ______f___3.line = 427U;
#line 427
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 427
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 427
  tmp___6 = IS_ERR((void const   *)newst->thread);
#line 427
  ______r___3 = tmp___6 != 0L;
#line 427
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 427
  if (______r___3 != 0) {
#line 428
    tmp___4 = PTR_ERR((void const   *)newst->thread);
#line 428
    err = (int )tmp___4;
#line 429
    tmp___5 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 429
    printk("<3>mISDN:cannot create kernel thread for %s (%d)\n", tmp___5, err);
#line 432
    delete_teimanager(dev->teimgr);
#line 433
    kfree((void const   *)newst);
  } else {
#line 435
    wait_for_completion(& done);
  }
#line 436
  return (err);
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct channel_req rq ;
  int err ;
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 443
  __mptr = (struct mISDNchannel  const  *)ch;
#line 443
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb78UL;
#line 448
  ______f.func = "connect_layer1";
#line 448
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 448
  ______f.line = 448U;
#line 448
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 448
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 448
  ______r = (*debug___2 & 2U) != 0U;
#line 448
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 448
  if (______r != 0) {
#line 449
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 449
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_layer1", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 452
  switch (protocol) {
  case (u_int )2: ;
  case (u_int )4: ;
  case (u_int )1: ;
  case (u_int )3: 
#line 457
  ch->recv = & mISDN_queue_message;
#line 458
  ch->peer = & (dev->D.st)->own;
#line 459
  ch->st = dev->D.st;
#line 460
  rq.protocol = protocol;
#line 461
  rq.adr.channel = adr->channel;
#line 462
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 463
  printk("<7>%s: ret %d (dev %d)\n", "connect_layer1", err, dev->id);
#line 465
  ______f___0.func = "connect_layer1";
#line 465
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 465
  ______f___0.line = 465U;
#line 465
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 465
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 465
  ______r___0 = err != 0;
#line 465
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 465
  if (______r___0 != 0) {
#line 466
    return (err);
  } else {

  }
#line 467
  _write_lock_bh(& (dev->D.st)->l1sock.lock);
#line 468
  sk_add_node(& msk->sk, & (dev->D.st)->l1sock.head);
#line 469
  _write_unlock_bh(& (dev->D.st)->l1sock.lock);
#line 470
  goto ldv_35062;
  default: ;
#line 472
  return (-92);
  }
  ldv_35062: ;
#line 474
  return (0);
}
}
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  struct channel_req rq2 ;
  int pmask ;
  int err ;
  struct Bprotocol *bp ;
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 485
  ______f.func = "connect_Bstack";
#line 485
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 485
  ______f.line = 485U;
#line 485
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 485
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 485
  ______r = (*debug___2 & 2U) != 0U;
#line 485
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 485
  if (______r != 0) {
#line 486
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 486
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_Bstack", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 490
  ch->st = dev->D.st;
#line 491
  pmask = 1 << ((int )protocol & 31);
#line 492
  ______f___4.func = "connect_Bstack";
#line 492
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 492
  ______f___4.line = 492U;
#line 492
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 492
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 492
  ______r___4 = (dev->Bprotocols & (u_int )pmask) != 0U;
#line 492
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 492
  if (______r___4 != 0) {
#line 493
    rq.protocol = protocol;
#line 494
    rq.adr = *adr;
#line 495
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 496
    ______f___0.func = "connect_Bstack";
#line 496
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 496
    ______f___0.line = 496U;
#line 496
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 496
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 496
    ______r___0 = err != 0;
#line 496
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 496
    if (______r___0 != 0) {
#line 497
      return (err);
    } else {

    }
#line 498
    ch->recv = (rq.ch)->send;
#line 499
    ch->peer = rq.ch;
#line 500
    (rq.ch)->recv = ch->send;
#line 501
    (rq.ch)->peer = ch;
#line 502
    (rq.ch)->st = dev->D.st;
  } else {
#line 504
    bp = get_Bprotocol4mask((u_int )pmask);
#line 505
    ______f___1.func = "connect_Bstack";
#line 505
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 505
    ______f___1.line = 505U;
#line 505
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 505
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 505
    ______r___1 = (unsigned long )bp == (unsigned long )((struct Bprotocol *)0);
#line 505
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 505
    if (______r___1 != 0) {
#line 506
      return (-92);
    } else {

    }
#line 507
    rq2.protocol = protocol;
#line 508
    rq2.adr = *adr;
#line 509
    rq2.ch = ch;
#line 510
    err = (*(bp->create))(& rq2);
#line 511
    ______f___2.func = "connect_Bstack";
#line 511
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 511
    ______f___2.line = 511U;
#line 511
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 511
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 511
    ______r___2 = err != 0;
#line 511
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 511
    if (______r___2 != 0) {
#line 512
      return (err);
    } else {

    }
#line 513
    ch->recv = (rq2.ch)->send;
#line 514
    ch->peer = rq2.ch;
#line 515
    (rq2.ch)->st = dev->D.st;
#line 516
    rq.protocol = rq2.protocol;
#line 517
    rq.adr = *adr;
#line 518
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 519
    ______f___3.func = "connect_Bstack";
#line 519
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 519
    ______f___3.line = 519U;
#line 519
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 519
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 519
    ______r___3 = err != 0;
#line 519
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 519
    if (______r___3 != 0) {
#line 520
      (*((rq2.ch)->ctrl))(rq2.ch, 512U, 0);
#line 521
      return (err);
    } else {

    }
#line 523
    (rq2.ch)->recv = (rq.ch)->send;
#line 524
    (rq2.ch)->peer = rq.ch;
#line 525
    (rq.ch)->recv = (rq2.ch)->send;
#line 526
    (rq.ch)->peer = rq2.ch;
#line 527
    (rq.ch)->st = dev->D.st;
  }
#line 529
  ch->protocol = protocol;
#line 530
  ch->nr = (rq.ch)->nr;
#line 531
  return (0);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  int err ;
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 541
  ______f.func = "create_l2entity";
#line 541
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 541
  ______f.line = 541U;
#line 541
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 541
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 541
  ______r = (*debug___2 & 2U) != 0U;
#line 541
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 541
  if (______r != 0) {
#line 542
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 542
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_l2entity", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 546
  rq.protocol = 1U;
#line 547
  ______f___0.func = "create_l2entity";
#line 547
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 547
  ______f___0.line = 547U;
#line 547
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 547
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 547
  ______r___0 = (dev->Dprotocols & 8U) != 0U;
#line 547
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 547
  if (______r___0 != 0) {
#line 548
    rq.protocol = 3U;
  } else {

  }
#line 549
  switch (protocol) {
  case (u_int )17: 
#line 551
  rq.protocol = 2U;
#line 552
  ______f___1.func = "create_l2entity";
#line 552
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 552
  ______f___1.line = 552U;
#line 552
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 552
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 552
  ______r___1 = (dev->Dprotocols & 16U) != 0U;
#line 552
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 552
  if (______r___1 != 0) {
#line 553
    rq.protocol = 4U;
  } else {

  }
  case (u_int )16: 
#line 555
  ch->recv = & mISDN_queue_message;
#line 556
  ch->peer = & (dev->D.st)->own;
#line 557
  ch->st = dev->D.st;
#line 558
  rq.adr.channel = 0U;
#line 559
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 560
  printk("<7>%s: ret 1 %d\n", "create_l2entity", err);
#line 561
  ______f___2.func = "create_l2entity";
#line 561
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 561
  ______f___2.line = 561U;
#line 561
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 561
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 561
  ______r___2 = err != 0;
#line 561
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 561
  if (______r___2 != 0) {
#line 562
    goto ldv_35117;
  } else {

  }
#line 563
  rq.protocol = protocol;
#line 564
  rq.adr = *adr;
#line 565
  rq.ch = ch;
#line 566
  err = (*((dev->teimgr)->ctrl))(dev->teimgr, 256U, (void *)(& rq));
#line 567
  printk("<7>%s: ret 2 %d\n", "create_l2entity", err);
#line 568
  ______f___4.func = "create_l2entity";
#line 568
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 568
  ______f___4.line = 568U;
#line 568
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 568
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 568
  ______r___4 = err == 0;
#line 568
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 568
  if (______r___4 != 0) {
#line 569
    ______f___3.func = "create_l2entity";
#line 569
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 569
    ______f___3.line = 569U;
#line 569
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 569
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 569
    ______r___3 = protocol == 17U && (unsigned long )rq.ch == (unsigned long )((struct mISDNchannel *)0);
#line 569
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 569
    if (______r___3 != 0) {
#line 570
      goto ldv_35117;
    } else {

    }
#line 571
    add_layer2(rq.ch, dev->D.st);
#line 572
    (rq.ch)->recv = & mISDN_queue_message;
#line 573
    (rq.ch)->peer = & (dev->D.st)->own;
#line 574
    (*((rq.ch)->ctrl))(rq.ch, 256U, 0);
  } else {

  }
#line 576
  goto ldv_35117;
  default: 
#line 578
  err = -93;
  }
  ldv_35117: ;
#line 580
  return (err);
}
}
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void delete_channel(struct mISDNchannel *ch ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNchannel *pch ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  char const   *tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 586
  __mptr = (struct mISDNchannel  const  *)ch;
#line 586
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb78UL;
#line 589
  ______f.func = "delete_channel";
#line 589
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 589
  ______f.line = 589U;
#line 589
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 589
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 589
  ______r = (unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0);
#line 589
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 589
  if (______r != 0) {
#line 590
    printk("<4>%s: no stack\n", "delete_channel");
#line 591
    return;
  } else {

  }
#line 593
  ______f___0.func = "delete_channel";
#line 593
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 593
  ______f___0.line = 593U;
#line 593
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 593
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 593
  ______r___0 = (*debug___2 & 2U) != 0U;
#line 593
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 593
  if (______r___0 != 0) {
#line 594
    tmp = dev_name((struct device  const  *)(& ((ch->st)->dev)->dev));
#line 594
    printk("<7>%s: st(%s) protocol(%x)\n", "delete_channel", tmp, ch->protocol);
  } else {

  }
#line 596
  ______f___2.func = "delete_channel";
#line 596
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 596
  ______f___2.line = 596U;
#line 596
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 596
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 596
  ______r___2 = ch->protocol > 31U;
#line 596
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 596
  if (______r___2 != 0) {
#line 597
    ______f___1.func = "delete_channel";
#line 597
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 597
    ______f___1.line = 597U;
#line 597
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 597
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 597
    ______r___1 = (unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0);
#line 597
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 597
    if (______r___1 != 0) {
#line 598
      (*((ch->peer)->ctrl))(ch->peer, 512U, 0);
#line 599
      ch->peer = 0;
    } else {

    }
#line 601
    return;
  } else {

  }
#line 603
  switch (ch->protocol) {
  case (u_int )2: ;
  case (u_int )1: ;
  case (u_int )4: ;
  case (u_int )3: 
#line 608
  _write_lock_bh(& (ch->st)->l1sock.lock);
#line 609
  sk_del_node_init(& msk->sk);
#line 610
  _write_unlock_bh(& (ch->st)->l1sock.lock);
#line 611
  (*(((ch->st)->dev)->D.ctrl))(& ((ch->st)->dev)->D, 512U, 0);
#line 612
  goto ldv_35149;
  case (u_int )16: 
#line 614
  pch = get_channel4id(ch->st, ch->nr);
#line 615
  ______f___3.func = "delete_channel";
#line 615
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 615
  ______f___3.line = 615U;
#line 615
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 615
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 615
  ______r___3 = (unsigned long )pch != (unsigned long )((struct mISDNchannel *)0);
#line 615
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 615
  if (______r___3 != 0) {
#line 616
    mutex_lock_nested(& (ch->st)->lmutex, 0U);
#line 617
    list_del(& pch->list);
#line 618
    mutex_unlock(& (ch->st)->lmutex);
#line 619
    (*(pch->ctrl))(pch, 512U, 0);
#line 620
    pch = ((ch->st)->dev)->teimgr;
#line 621
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
#line 623
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 625
  goto ldv_35149;
  case (u_int )17: 
#line 627
  pch = ((ch->st)->dev)->teimgr;
#line 628
  ______f___4.func = "delete_channel";
#line 628
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 628
  ______f___4.line = 628U;
#line 628
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 628
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 628
  ______r___4 = (unsigned long )pch != (unsigned long )((struct mISDNchannel *)0);
#line 628
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 628
  if (______r___4 != 0) {
#line 629
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
#line 631
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 633
  goto ldv_35149;
  default: ;
#line 635
  goto ldv_35149;
  }
  ldv_35149: ;
#line 637
  return;
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void delete_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *st ;
  struct completion done ;
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___1 ;

  {
#line 643
  st = dev->D.st;
#line 644
  init_completion(& done);
#line 644
  done = done;
#line 646
  ______f.func = "delete_stack";
#line 646
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 646
  ______f.line = 646U;
#line 646
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 646
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 646
  ______r = (*debug___2 & 2U) != 0U;
#line 646
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 646
  if (______r != 0) {
#line 647
    tmp = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 647
    printk("<7>%s: st(%s)\n", "delete_stack", tmp);
  } else {

  }
#line 649
  ______f___0.func = "delete_stack";
#line 649
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 649
  ______f___0.line = 649U;
#line 649
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 649
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 649
  ______r___0 = (unsigned long )dev->teimgr != (unsigned long )((struct mISDNchannel *)0);
#line 649
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 649
  if (______r___0 != 0) {
#line 650
    delete_teimanager(dev->teimgr);
  } else {

  }
#line 651
  ______f___2.func = "delete_stack";
#line 651
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 651
  ______f___2.line = 651U;
#line 651
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 651
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 651
  ______r___2 = (unsigned long )st->thread != (unsigned long )((struct task_struct *)0);
#line 651
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 651
  if (______r___2 != 0) {
#line 652
    ______f___1.func = "delete_stack";
#line 652
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 652
    ______f___1.line = 652U;
#line 652
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 652
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 652
    ______r___1 = (unsigned long )st->notify != (unsigned long )((struct completion *)0);
#line 652
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 652
    if (______r___1 != 0) {
#line 653
      printk("<4>%s: notifier in use\n", "delete_stack");
#line 655
      complete(st->notify);
    } else {

    }
#line 657
    st->notify = & done;
#line 658
    test_and_set_bit(15, (unsigned long volatile   *)(& st->status));
#line 659
    test_and_set_bit(4, (unsigned long volatile   *)(& st->status));
#line 660
    __wake_up(& st->workq, 1U, 1, 0);
#line 661
    wait_for_completion(& done);
  } else {

  }
#line 663
  ______f___3.func = "delete_stack";
#line 663
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 663
  ______f___3.line = 663U;
#line 663
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 663
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 663
  tmp___0 = list_empty((struct list_head  const  *)(& st->layer2));
#line 663
  ______r___3 = tmp___0 == 0;
#line 663
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 663
  if (______r___3 != 0) {
#line 664
    printk("<4>%s: layer2 list not empty\n", "delete_stack");
  } else {

  }
#line 666
  ______f___4.func = "delete_stack";
#line 666
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared";
#line 666
  ______f___4.line = 666U;
#line 666
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 666
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 666
  tmp___1 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 666
  ______r___4 = tmp___1 == 0;
#line 666
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 666
  if (______r___4 != 0) {
#line 667
    printk("<4>%s: layer1 list not empty\n", "delete_stack");
  } else {

  }
#line 669
  kfree((void const   *)st);
#line 670
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void mISDN_initstack(u_int *dp ) 
{ 


  {
#line 675
  debug___2 = dp;
#line 676
  return;
}
}
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
unsigned long ldv___get_free_pages_109(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 695
  ldv_check_alloc_flags(ldv_func_arg1);
#line 697
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 697
  return (tmp);
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
void *ldv_kmem_cache_alloc_114(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 750
  ldv_check_alloc_flags(ldv_func_arg2);
#line 752
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 753
  return ((void *)0);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
struct sk_buff *ldv_skb_clone_121(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 826
  ldv_check_alloc_flags(ldv_func_arg2);
#line 828
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 828
  return (tmp);
}
}
#line 842 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
struct sk_buff *ldv_skb_copy_123(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 848
  ldv_check_alloc_flags(ldv_func_arg2);
#line 850
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 850
  return (tmp);
}
}
#line 853 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_124(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 860
  ldv_check_alloc_flags(ldv_func_arg3);
#line 862
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 862
  return (tmp);
}
}
#line 865 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
int ldv_pskb_expand_head_125(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 873
  ldv_check_alloc_flags(ldv_func_arg4);
#line 875
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 875
  return (tmp);
}
}
#line 878 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
struct sk_buff *ldv_skb_copy_126(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 884
  ldv_check_alloc_flags(ldv_func_arg2);
#line 886
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 886
  return (tmp);
}
}
#line 889 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/stack.c.prepared"
struct sk_buff *ldv_skb_copy_127(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 895
  ldv_check_alloc_flags(ldv_func_arg2);
#line 897
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 897
  return (tmp);
}
}
#line 1 "<compiler builtins>"
void __builtin_va_end(__builtin_va_list  ) ;
#line 1
void __builtin_va_start(__builtin_va_list  ) ;
#line 236 "include/linux/kernel.h"
extern int vprintk(char const   * , __va_list_tag * ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int per_cpu__cpu_number ;
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_137(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_142(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
__inline static void local_inc(local_t *l ) 
{ 


  {
#line 21
  __asm__  volatile   (" incq %0": "+m" (l->a.counter));
#line 23
  return;
}
}
#line 436 "include/linux/module.h"
__inline static local_t *__module_ref_addr(struct module *mod , int cpu ) 
{ 


  {
#line 439
  return ((local_t *)(mod->refptr + __per_cpu_offset[cpu]));
}
}
#line 447 "include/linux/module.h"
__inline static void __module_get(struct module *module ) 
{ 
  int ret__ ;
  local_t *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 449
  ______f.func = "__module_get";
#line 449
  ______f.file = "include/linux/module.h";
#line 449
  ______f.line = 449U;
#line 449
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 449
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 449
  ______r = (unsigned long )module != (unsigned long )((struct module *)0);
#line 449
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 449
  if (______r != 0) {
#line 450
    switch (4UL) {
    case 1UL: 
#line 450
    __asm__  ("movb %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    goto ldv_12543;
    case 2UL: 
#line 450
    __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    goto ldv_12543;
    case 4UL: 
#line 450
    __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    goto ldv_12543;
    case 8UL: 
#line 450
    __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    goto ldv_12543;
    default: 
#line 450
    __bad_percpu_size();
    }
    ldv_12543: 
#line 450
    tmp = __module_ref_addr(module, ret__);
#line 450
    local_inc(tmp);
  } else {

  }
#line 453
  return;
}
}
#line 470
extern void module_put(struct module * ) ;
#line 461 "include/linux/skbuff.h"
struct sk_buff *ldv_skb_clone_149(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_151(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 476
int ldv_pskb_expand_head_153(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_152(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 116 "include/linux/mISDNhw.h"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) ;
#line 145
int l1_event(struct layer1 *l1 , u_int event ) ;
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static u_int *debug___3  ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static struct Fsm l1fsm_s  =    {0, 0, 0, 0, 0};
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static char *strL1SState[7U]  = {      (char *)"ST_L1_F2",      (char *)"ST_L1_F3",      (char *)"ST_L1_F4",      (char *)"ST_L1_F5", 
        (char *)"ST_L1_F6",      (char *)"ST_L1_F7",      (char *)"ST_L1_F8"};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static char *strL1Event[12U]  = 
#line 95
  {      (char *)"EV_PH_ACTIVATE",      (char *)"EV_PH_DEACTIVATE",      (char *)"EV_RESET_IND",      (char *)"EV_DEACT_CNF", 
        (char *)"EV_DEACT_IND",      (char *)"EV_POWER_UP",      (char *)"EV_ANYSIG_IND",      (char *)"EV_INFO2_IND", 
        (char *)"EV_INFO4_IND",      (char *)"EV_TIMER_DEACT",      (char *)"EV_TIMER_ACT",      (char *)"EV_TIMER3"};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer1 *l1 ;
  va_list va ;
  char const   *tmp ;

  {
#line 114
  l1 = (struct layer1 *)fi->userdata;
#line 117
  __builtin_va_start((__va_list_tag *)(& va));
#line 118
  tmp = dev_name((struct device  const  *)(& (l1->dch)->dev.dev));
#line 118
  printk("<7>%s: ", tmp);
#line 119
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
#line 120
  printk("\n");
#line 121
  __builtin_va_end((__va_list_tag *)(& va));
#line 122
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_reset(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 127
  mISDN_FsmChangeState(fi, 1);
#line 128
  return;
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_deact_cnf(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 133
  l1 = (struct layer1 *)fi->userdata;
#line 135
  mISDN_FsmChangeState(fi, 1);
#line 136
  ______f.func = "l1_deact_cnf";
#line 136
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 136
  ______f.line = 136U;
#line 136
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 136
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 136
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l1->Flags));
#line 136
  ______r = tmp != 0;
#line 136
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 136
  if (______r != 0) {
#line 137
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
#line 138
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_deact_req_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 143
  l1 = (struct layer1 *)fi->userdata;
#line 145
  mISDN_FsmChangeState(fi, 1);
#line 146
  mISDN_FsmRestartTimer(& l1->timer, 550, 9, 0, 2);
#line 147
  test_and_set_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 148
  return;
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_power_up_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 153
  l1 = (struct layer1 *)fi->userdata;
#line 155
  ______f.func = "l1_power_up_s";
#line 155
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 155
  ______f.line = 155U;
#line 155
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 155
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 155
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l1->Flags));
#line 155
  ______r = tmp != 0;
#line 155
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 155
  if (______r != 0) {
#line 156
    mISDN_FsmChangeState(fi, 2);
#line 157
    (*(l1->dcb))(l1->dch, 33538U);
  } else {
#line 159
    mISDN_FsmChangeState(fi, 1);
  }
#line 160
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_go_F5(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 165
  mISDN_FsmChangeState(fi, 3);
#line 166
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_go_F8(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 171
  mISDN_FsmChangeState(fi, 6);
#line 172
  return;
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_info2_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 177
  l1 = (struct layer1 *)fi->userdata;
#line 179
  mISDN_FsmChangeState(fi, 4);
#line 180
  (*(l1->dcb))(l1->dch, 33538U);
#line 181
  return;
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_info4_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;

  {
#line 186
  l1 = (struct layer1 *)fi->userdata;
#line 188
  mISDN_FsmChangeState(fi, 5);
#line 189
  (*(l1->dcb))(l1->dch, 33538U);
#line 190
  ______f.func = "l1_info4_ind";
#line 190
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 190
  ______f.line = 190U;
#line 190
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 190
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 190
  tmp = test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 190
  ______r = tmp != 0;
#line 190
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 190
  if (______r != 0) {
#line 191
    mISDN_FsmDelTimer(& l1->timer, 4);
  } else {

  }
#line 192
  ______f___1.func = "l1_info4_ind";
#line 192
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 192
  ______f___1.line = 192U;
#line 192
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 192
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 192
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& l1->Flags));
#line 192
  ______r___1 = tmp___1 == 0;
#line 192
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 192
  if (______r___1 != 0) {
#line 193
    ______f___0.func = "l1_info4_ind";
#line 193
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 193
    ______f___0.line = 193U;
#line 193
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 193
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 193
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 193
    ______r___0 = tmp___0 != 0;
#line 193
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 193
    if (______r___0 != 0) {
#line 194
      mISDN_FsmDelTimer(& l1->timer, 3);
    } else {

    }
#line 195
    mISDN_FsmRestartTimer(& l1->timer, 110, 10, 0, 2);
#line 196
    test_and_set_bit(4, (unsigned long volatile   *)(& l1->Flags));
  } else {

  }
#line 198
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 203
  l1 = (struct layer1 *)fi->userdata;
#line 205
  test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 206
  ______f___0.func = "l1_timer3";
#line 206
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 206
  ______f___0.line = 206U;
#line 206
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 206
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 206
  tmp___0 = test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 206
  ______r___0 = tmp___0 != 0;
#line 206
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 206
  if (______r___0 != 0) {
#line 207
    ______f.func = "l1_timer3";
#line 207
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 207
    ______f.line = 207U;
#line 207
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 207
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 207
    tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 207
    ______r = tmp != 0;
#line 207
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 207
    if (______r != 0) {
#line 208
      (*(l1->dcb))(l1->dch, 36610U);
    } else {

    }
#line 209
    (*(l1->dcb))(l1->dch, 514U);
  } else {

  }
#line 211
  ______f___1.func = "l1_timer3";
#line 211
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 211
  ______f___1.line = 211U;
#line 211
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 211
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 211
  ______r___1 = l1->l1m.state != 4;
#line 211
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 211
  if (______r___1 != 0) {
#line 212
    mISDN_FsmChangeState(fi, 1);
#line 213
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
#line 215
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer_act(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 220
  l1 = (struct layer1 *)fi->userdata;
#line 222
  test_and_clear_bit(4, (unsigned long volatile   *)(& l1->Flags));
#line 223
  test_and_set_bit(2, (unsigned long volatile   *)(& l1->Flags));
#line 224
  (*(l1->dcb))(l1->dch, 258U);
#line 225
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer_deact(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 230
  l1 = (struct layer1 *)fi->userdata;
#line 232
  test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 233
  test_and_clear_bit(2, (unsigned long volatile   *)(& l1->Flags));
#line 234
  ______f.func = "l1_timer_deact";
#line 234
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 234
  ______f.line = 234U;
#line 234
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 234
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 234
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 234
  ______r = tmp != 0;
#line 234
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 234
  if (______r != 0) {
#line 235
    (*(l1->dcb))(l1->dch, 36610U);
  } else {

  }
#line 236
  (*(l1->dcb))(l1->dch, 514U);
#line 237
  (*(l1->dcb))(l1->dch, 35842U);
#line 238
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_activate_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 243
  l1 = (struct layer1 *)fi->userdata;
#line 245
  mISDN_FsmRestartTimer(& l1->timer, 7000, 11, 0, 2);
#line 246
  test_and_set_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 247
  (*(l1->dcb))(l1->dch, 35330U);
#line 248
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_activate_no(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 253
  l1 = (struct layer1 *)fi->userdata;
#line 255
  ______f___0.func = "l1_activate_no";
#line 255
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 255
  ______f___0.line = 256U;
#line 255
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 255
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 255
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l1->Flags));
#line 255
  if (tmp___0 == 0) {
#line 255
    tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& l1->Flags));
#line 255
    if (tmp___1 == 0) {
#line 255
      tmp___2 = 1;
    } else {
#line 255
      tmp___2 = 0;
    }
  } else {
#line 255
    tmp___2 = 0;
  }
#line 255
  ______r___0 = tmp___2;
#line 255
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 255
  if (______r___0 != 0) {
#line 257
    test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 258
    ______f.func = "l1_activate_no";
#line 258
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 258
    ______f.line = 258U;
#line 258
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 258
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 258
    tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 258
    ______r = tmp != 0;
#line 258
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 258
    if (______r != 0) {
#line 259
      (*(l1->dcb))(l1->dch, 36610U);
    } else {

    }
#line 260
    (*(l1->dcb))(l1->dch, 514U);
  } else {

  }
#line 262
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static struct FsmNode L1SFnList[44U]  = 
#line 264
  {      {1, 0, & l1_activate_s}, 
        {4, 0, & l1_activate_no}, 
        {6, 0, & l1_activate_no}, 
        {1, 2, & l1_reset}, 
        {2, 2, & l1_reset}, 
        {3, 2, & l1_reset}, 
        {4, 2, & l1_reset}, 
        {5, 2, & l1_reset}, 
        {6, 2, & l1_reset}, 
        {1, 3, & l1_deact_cnf}, 
        {2, 3, & l1_deact_cnf}, 
        {3, 3, & l1_deact_cnf}, 
        {4, 3, & l1_deact_cnf}, 
        {5, 3, & l1_deact_cnf}, 
        {6, 3, & l1_deact_cnf}, 
        {4, 4, & l1_deact_req_s}, 
        {5, 4, & l1_deact_req_s}, 
        {6, 4, & l1_deact_req_s}, 
        {1, 5, & l1_power_up_s}, 
        {2, 6, & l1_go_F5}, 
        {4, 6, & l1_go_F8}, 
        {5, 6, & l1_go_F8}, 
        {1, 7, & l1_info2_ind}, 
        {2, 7, & l1_info2_ind}, 
        {3, 7, & l1_info2_ind}, 
        {5, 7, & l1_info2_ind}, 
        {6, 7, & l1_info2_ind}, 
        {1, 8, & l1_info4_ind}, 
        {2, 8, & l1_info4_ind}, 
        {3, 8, & l1_info4_ind}, 
        {4, 8, & l1_info4_ind}, 
        {6, 8, & l1_info4_ind}, 
        {1, 11, & l1_timer3}, 
        {2, 11, & l1_timer3}, 
        {3, 11, & l1_timer3}, 
        {4, 11, & l1_timer3}, 
        {6, 11, & l1_timer3}, 
        {5, 10, & l1_timer_act}, 
        {1, 9, & l1_timer_deact}, 
        {2, 9, & l1_timer_deact}, 
        {3, 9, & l1_timer_deact}, 
        {4, 9, & l1_timer_deact}, 
        {5, 9, & l1_timer_deact}, 
        {6, 9, & l1_timer_deact}};
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
static void release_l1(struct layer1 *l1 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 314
  mISDN_FsmDelTimer(& l1->timer, 0);
#line 315
  ______f.func = "release_l1";
#line 315
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 315
  ______f.line = 315U;
#line 315
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 315
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 315
  ______r = (unsigned long )l1->dch != (unsigned long )((struct dchannel *)0);
#line 315
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 315
  if (______r != 0) {
#line 316
    (l1->dch)->l1 = 0;
  } else {

  }
#line 317
  module_put(& __this_module);
#line 318
  kfree((void const   *)l1);
#line 319
  return;
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
int l1_event(struct layer1 *l1 , u_int event ) 
{ 
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 324
  err = 0;
#line 326
  ______f.func = "l1_event";
#line 326
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 326
  ______f.line = 326U;
#line 326
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 326
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 326
  ______r = (unsigned long )l1 == (unsigned long )((struct layer1 *)0);
#line 326
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 326
  if (______r != 0) {
#line 327
    return (-22);
  } else {

  }
#line 328
  switch (event) {
  case (u_int )36866: 
#line 330
  mISDN_FsmEvent(& l1->l1m, 2, 0);
#line 331
  goto ldv_35022;
  case (u_int )37378: 
#line 333
  mISDN_FsmEvent(& l1->l1m, 4, 0);
#line 334
  goto ldv_35022;
  case (u_int )37122: 
#line 336
  mISDN_FsmEvent(& l1->l1m, 5, 0);
#line 337
  goto ldv_35022;
  case (u_int )37890: 
#line 339
  mISDN_FsmEvent(& l1->l1m, 3, 0);
#line 340
  goto ldv_35022;
  case (u_int )34818: 
#line 342
  mISDN_FsmEvent(& l1->l1m, 6, 0);
#line 343
  goto ldv_35022;
  case (u_int )34562: 
#line 345
  mISDN_FsmEvent(& l1->l1m, 6, 0);
#line 346
  goto ldv_35022;
  case (u_int )33282: 
#line 348
  mISDN_FsmEvent(& l1->l1m, 7, 0);
#line 349
  goto ldv_35022;
  case (u_int )34050: 
#line 351
  mISDN_FsmEvent(& l1->l1m, 8, 0);
#line 352
  goto ldv_35022;
  case (u_int )34306: 
#line 354
  mISDN_FsmEvent(& l1->l1m, 8, 0);
#line 355
  goto ldv_35022;
  case (u_int )257: 
#line 357
  ______f___0.func = "l1_event";
#line 357
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 357
  ______f___0.line = 357U;
#line 357
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 357
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 357
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l1->Flags));
#line 357
  ______r___0 = tmp != 0;
#line 357
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 357
  if (______r___0 != 0) {
#line 358
    (*(l1->dcb))(l1->dch, 258U);
  } else {
#line 360
    test_and_set_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 361
    mISDN_FsmEvent(& l1->l1m, 0, 0);
  }
#line 363
  goto ldv_35022;
  case (u_int )512: 
#line 365
  release_l1(l1);
#line 366
  goto ldv_35022;
  default: 
#line 368
  ______f___1.func = "l1_event";
#line 368
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 368
  ______f___1.line = 368U;
#line 368
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 368
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 368
  ______r___1 = (*debug___3 & 65280U) != 0U;
#line 368
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 368
  if (______r___1 != 0) {
#line 369
    printk("<7>%s %x unhandled\n", "l1_event", event);
  } else {

  }
#line 371
  err = -22;
  }
  ldv_35022: ;
#line 373
  return (err);
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) 
{ 
  struct layer1 *nl1 ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 381
  tmp = kzalloc(216UL, 32U);
#line 381
  nl1 = (struct layer1 *)tmp;
#line 382
  ______f.func = "create_l1";
#line 382
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared";
#line 382
  ______f.line = 382U;
#line 382
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 382
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 382
  ______r = (unsigned long )nl1 == (unsigned long )((struct layer1 *)0);
#line 382
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 382
  if (______r != 0) {
#line 383
    printk("<3>kmalloc struct layer1 failed\n");
#line 384
    return (-12);
  } else {

  }
#line 386
  nl1->l1m.fsm = & l1fsm_s;
#line 387
  nl1->l1m.state = 1;
#line 388
  nl1->Flags = 0UL;
#line 389
  nl1->l1m.debug = (int )*debug___3 & 512;
#line 390
  nl1->l1m.userdata = (void *)nl1;
#line 391
  nl1->l1m.userint = 0;
#line 392
  nl1->l1m.printdebug = & l1m_debug;
#line 393
  nl1->dch = dch;
#line 394
  nl1->dcb = dcb;
#line 395
  mISDN_FsmInitTimer(& nl1->l1m, & nl1->timer);
#line 396
  __module_get(& __this_module);
#line 397
  dch->l1 = (void *)nl1;
#line 398
  return (0);
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
int l1_init(u_int *deb ) 
{ 


  {
#line 405
  debug___3 = deb;
#line 406
  l1fsm_s.state_count = 7;
#line 407
  l1fsm_s.event_count = 12;
#line 408
  l1fsm_s.strEvent = (char **)(& strL1Event);
#line 409
  l1fsm_s.strState = (char **)(& strL1SState);
#line 410
  mISDN_FsmNew(& l1fsm_s, (struct FsmNode *)(& L1SFnList), 44);
#line 411
  return (0);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
void l1_cleanup(void) 
{ 


  {
#line 417
  mISDN_FsmFree(& l1fsm_s);
#line 418
  return;
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
unsigned long ldv___get_free_pages_137(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 437
  ldv_check_alloc_flags(ldv_func_arg1);
#line 439
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 439
  return (tmp);
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
void *ldv_kmem_cache_alloc_142(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 492
  ldv_check_alloc_flags(ldv_func_arg2);
#line 494
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 495
  return ((void *)0);
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
struct sk_buff *ldv_skb_clone_149(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 568
  ldv_check_alloc_flags(ldv_func_arg2);
#line 570
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 570
  return (tmp);
}
}
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
struct sk_buff *ldv_skb_copy_151(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 590
  ldv_check_alloc_flags(ldv_func_arg2);
#line 592
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 592
  return (tmp);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_152(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 602
  ldv_check_alloc_flags(ldv_func_arg3);
#line 604
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 604
  return (tmp);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer1.c.prepared"
int ldv_pskb_expand_head_153(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 615
  ldv_check_alloc_flags(ldv_func_arg4);
#line 617
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 617
  return (tmp);
}
}
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_161(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_166(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 434 "include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) ;
#line 461
struct sk_buff *ldv_skb_clone_173(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 465
struct sk_buff *ldv_skb_clone_178(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 471
struct sk_buff *ldv_skb_copy_175(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 480
int ldv_pskb_expand_head_177(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 784 "include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head  const  *list_ ) 
{ 


  {
#line 786
  return ((__u32 )list_->qlen);
}
}
#line 1165 "include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff  const  *skb ) 
{ 


  {
#line 1167
  return ((unsigned int )((int )((long )skb->data) - (int )((long )skb->head)));
}
}
#line 1374
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_176(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 511 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___0(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  long tmp ;

  {
#line 515
  skb = alloc_skb(len + 8U, gfp_mask);
#line 516
  ______f.func = "mI_alloc_skb";
#line 516
  ______f.file = "include/linux/mISDNif.h";
#line 516
  ______f.line = 516U;
#line 516
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  ______f___0.func = "mI_alloc_skb";
#line 516
  ______f___0.file = "include/linux/mISDNif.h";
#line 516
  ______f___0.line = 516U;
#line 516
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 516
  ______r___0 = (int )tmp;
#line 516
  ftrace_likely_update(& ______f___0, ______r___0, 1);
#line 516
  ______r = ______r___0 != 0;
#line 516
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 516
  if (______r != 0) {
#line 517
    skb_reserve(skb, 8);
  } else {

  }
#line 518
  return (skb);
}
}
#line 92 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) ;
#line 94
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 98
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 99
void TEIrelease(struct layer2 *l2 ) ;
#line 100
int TEIInit(u_int *deb ) ;
#line 101
void TEIFree(void) ;
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static u_int *debug___4  ;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static struct Fsm l2fsm  =    {0, 0, 0, 0, 0};
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static char *strL2State[8U]  = 
#line 43
  {      (char *)"ST_L2_1",      (char *)"ST_L2_2",      (char *)"ST_L2_3",      (char *)"ST_L2_4", 
        (char *)"ST_L2_5",      (char *)"ST_L2_6",      (char *)"ST_L2_7",      (char *)"ST_L2_8"};
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static char *strL2Event[22U]  = 
#line 82
  {      (char *)"EV_L2_UI",      (char *)"EV_L2_SABME",      (char *)"EV_L2_DISC",      (char *)"EV_L2_DM", 
        (char *)"EV_L2_UA",      (char *)"EV_L2_FRMR",      (char *)"EV_L2_SUPER",      (char *)"EV_L2_I", 
        (char *)"EV_L2_DL_DATA",      (char *)"EV_L2_ACK_PULL",      (char *)"EV_L2_DL_UNITDATA",      (char *)"EV_L2_DL_ESTABLISH_REQ", 
        (char *)"EV_L2_DL_RELEASE_REQ",      (char *)"EV_L2_MDL_ASSIGN",      (char *)"EV_L2_MDL_REMOVE",      (char *)"EV_L2_MDL_ERROR", 
        (char *)"EV_L1_DEACTIVATE",      (char *)"EV_L2_T200",      (char *)"EV_L2_T203",      (char *)"EV_L2_SET_OWN_BUSY", 
        (char *)"EV_L2_CLEAR_OWN_BUSY",      (char *)"EV_L2_FRAME_ERROR"};
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer2 *l2 ;
  va_list va ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 111
  l2 = (struct layer2 *)fi->userdata;
#line 114
  ______f.func = "l2m_debug";
#line 114
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 114
  ______f.line = 114U;
#line 114
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 114
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 114
  ______r = (*debug___4 & 131072U) == 0U;
#line 114
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 114
  if (______r != 0) {
#line 115
    return;
  } else {

  }
#line 116
  __builtin_va_start((__va_list_tag *)(& va));
#line 117
  printk("<7>l2 (sapi %d tei %d): ", (int )l2->sapi, (int )l2->tei);
#line 118
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
#line 119
  printk("\n");
#line 120
  __builtin_va_end((__va_list_tag *)(& va));
#line 121
  return;
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_int l2headersize(struct layer2 *l2 , int ui ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 126
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 126
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 126
  return ((u_int )((tmp != 0 && ui == 0 ? 2 : 1) + (tmp___0 != 0 ? 2 : 1)));
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_int l2addrsize(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 133
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 133
  return (tmp != 0 ? 2U : 1U);
}
}
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static u_int l2_newid(struct layer2 *l2 ) 
{ 
  u_int id ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 141
  tmp = l2->next_id;
#line 141
  l2->next_id = l2->next_id + (u_int )1;
#line 141
  id = tmp;
#line 142
  ______f.func = "l2_newid";
#line 142
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 142
  ______f.line = 142U;
#line 142
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 142
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 142
  ______r = id == 32767U;
#line 142
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 142
  if (______r != 0) {
#line 143
    l2->next_id = 1U;
  } else {

  }
#line 144
  id = id << 16;
#line 145
  id = (u_int )((int )l2->tei << 8) | id;
#line 146
  id = (u_int )l2->sapi | id;
#line 147
  return (id);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2up(struct layer2 *l2 , u_int prim , struct sk_buff *skb ) 
{ 
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 155
  ______f.func = "l2up";
#line 155
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 155
  ______f.line = 155U;
#line 155
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 155
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 155
  ______r = (unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0);
#line 155
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 155
  if (______r != 0) {
#line 156
    return;
  } else {

  }
#line 157
  ((struct mISDNhead *)(& skb->cb))->prim = prim;
#line 158
  ((struct mISDNhead *)(& skb->cb))->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 159
  err = (*((l2->up)->send))(l2->up, skb);
#line 160
  ______f___0.func = "l2up";
#line 160
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 160
  ______f___0.line = 160U;
#line 160
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 160
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 160
  ______r___0 = err != 0;
#line 160
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 160
  if (______r___0 != 0) {
#line 161
    printk("<4>%s: err=%d\n", "l2up", err);
#line 162
    consume_skb(skb);
  } else {

  }
#line 164
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2up_create(struct layer2 *l2 , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 173
  ______f.func = "l2up_create";
#line 173
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 173
  ______f.line = 173U;
#line 173
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 173
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 173
  ______r = (unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0);
#line 173
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 173
  if (______r != 0) {
#line 174
    return;
  } else {

  }
#line 175
  skb = mI_alloc_skb___0((unsigned int )len, 32U);
#line 176
  ______f___0.func = "l2up_create";
#line 176
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 176
  ______f___0.line = 176U;
#line 176
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 176
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 176
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 176
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 176
  if (______r___0 != 0) {
#line 177
    return;
  } else {

  }
#line 178
  hh = (struct mISDNhead *)(& skb->cb);
#line 179
  hh->prim = prim;
#line 180
  hh->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 181
  ______f___1.func = "l2up_create";
#line 181
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 181
  ______f___1.line = 181U;
#line 181
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 181
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 181
  ______r___1 = len != 0;
#line 181
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 181
  if (______r___1 != 0) {
#line 182
    __len = (size_t )len;
#line 182
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 182
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 183
  err = (*((l2->up)->send))(l2->up, skb);
#line 184
  ______f___2.func = "l2up_create";
#line 184
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 184
  ______f___2.line = 184U;
#line 184
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 184
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 184
  ______r___2 = err != 0;
#line 184
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 184
  if (______r___2 != 0) {
#line 185
    printk("<4>%s: err=%d\n", "l2up_create", err);
#line 186
    consume_skb(skb);
  } else {

  }
#line 188
  return;
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_skb(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 194
  ret = (*(l2->ch.recv))(l2->ch.peer, skb);
#line 195
  ______f.func = "l2down_skb";
#line 195
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 195
  ______f.line = 195U;
#line 195
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 195
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 195
  ______r = ret != 0 && (*debug___4 & 524288U) != 0U;
#line 195
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 195
  if (______r != 0) {
#line 196
    printk("<7>l2down_skb: ret(%d)\n", ret);
  } else {

  }
#line 197
  return (ret);
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_raw(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;

  {
#line 203
  hh = (struct mISDNhead *)(& skb->cb);
#line 205
  ______f___0.func = "l2down_raw";
#line 205
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 205
  ______f___0.line = 205U;
#line 205
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 205
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 205
  ______r___0 = hh->prim == 8193U;
#line 205
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 205
  if (______r___0 != 0) {
#line 206
    ______f.func = "l2down_raw";
#line 206
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 206
    ______f.line = 206U;
#line 206
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 206
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 206
    tmp = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 206
    ______r = tmp != 0;
#line 206
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 206
    if (______r != 0) {
#line 207
      skb_queue_tail(& l2->down_queue, skb);
#line 208
      return (0);
    } else {

    }
#line 210
    l2->down_id = ((struct mISDNhead *)(& skb->cb))->id;
  } else {

  }
#line 212
  tmp___0 = l2down_skb(l2, skb);
#line 212
  return (tmp___0);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down(struct layer2 *l2 , u_int prim , u_int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
#line 218
  hh = (struct mISDNhead *)(& skb->cb);
#line 220
  hh->prim = prim;
#line 221
  hh->id = id;
#line 222
  tmp = l2down_raw(l2, skb);
#line 222
  return (tmp);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_create(struct layer2 *l2 , u_int prim , u_int id , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  int err ;
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 232
  skb = mI_alloc_skb___0((unsigned int )len, 32U);
#line 233
  ______f.func = "l2down_create";
#line 233
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 233
  ______f.line = 233U;
#line 233
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 233
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 233
  ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 233
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 233
  if (______r != 0) {
#line 234
    return (-12);
  } else {

  }
#line 235
  hh = (struct mISDNhead *)(& skb->cb);
#line 236
  hh->prim = prim;
#line 237
  hh->id = id;
#line 238
  ______f___0.func = "l2down_create";
#line 238
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 238
  ______f___0.line = 238U;
#line 238
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 238
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 238
  ______r___0 = len != 0;
#line 238
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 238
  if (______r___0 != 0) {
#line 239
    __len = (size_t )len;
#line 239
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 239
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 240
  err = l2down_raw(l2, skb);
#line 241
  ______f___1.func = "l2down_create";
#line 241
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 241
  ______f___1.line = 241U;
#line 241
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 241
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 241
  ______r___1 = err != 0;
#line 241
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 241
  if (______r___1 != 0) {
#line 242
    consume_skb(skb);
  } else {

  }
#line 243
  return (err);
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int ph_data_confirm(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  struct sk_buff *nskb ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___0 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___1 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int tmp___2 ;

  {
#line 248
  nskb = skb;
#line 249
  ret = -11;
#line 251
  ______f___4.func = "ph_data_confirm";
#line 251
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 251
  ______f___4.line = 251U;
#line 251
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 251
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 251
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& l2->flag));
#line 251
  ______r___4 = tmp___0 != 0;
#line 251
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 251
  if (______r___4 != 0) {
#line 252
    ______f___3.func = "ph_data_confirm";
#line 252
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 252
    ______f___3.line = 252U;
#line 252
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 252
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 252
    ______r___3 = hh->id == l2->down_id;
#line 252
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 252
    if (______r___3 != 0) {
#line 253
      nskb = skb_dequeue(& l2->down_queue);
#line 254
      ______f___0.func = "ph_data_confirm";
#line 254
      ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 254
      ______f___0.line = 254U;
#line 254
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 254
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 254
      ______r___0 = (unsigned long )nskb != (unsigned long )((struct sk_buff *)0);
#line 254
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 254
      if (______r___0 != 0) {
#line 255
        l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
#line 256
        ______f.func = "ph_data_confirm";
#line 256
        ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 256
        ______f.line = 256U;
#line 256
        ______f.ldv_815.ldv_809.correct = 0UL;
#line 256
        ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 256
        tmp = l2down_skb(l2, nskb);
#line 256
        ______r = tmp != 0;
#line 256
        ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 256
        if (______r != 0) {
#line 257
          consume_skb(nskb);
#line 258
          l2->down_id = 65534U;
        } else {

        }
      } else {
#line 261
        l2->down_id = 65534U;
      }
#line 262
      ______f___1.func = "ph_data_confirm";
#line 262
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 262
      ______f___1.line = 262U;
#line 262
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 262
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 262
      ______r___1 = ret != 0;
#line 262
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 262
      if (______r___1 != 0) {
#line 263
        consume_skb(skb);
#line 264
        ret = 0;
      } else {

      }
#line 266
      ______f___2.func = "ph_data_confirm";
#line 266
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 266
      ______f___2.line = 266U;
#line 266
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 266
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 266
      ______r___2 = l2->down_id == 65534U;
#line 266
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 266
      if (______r___2 != 0) {
#line 267
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 268
        mISDN_FsmEvent(& l2->l2m, 9, 0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 272
  ______f___7.func = "ph_data_confirm";
#line 272
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 272
  ______f___7.line = 272U;
#line 272
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 272
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 272
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 272
  ______r___7 = tmp___2 == 0;
#line 272
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 272
  if (______r___7 != 0) {
#line 273
    nskb = skb_dequeue(& l2->down_queue);
#line 274
    ______f___6.func = "ph_data_confirm";
#line 274
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 274
    ______f___6.line = 274U;
#line 274
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 274
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 274
    ______r___6 = (unsigned long )nskb != (unsigned long )((struct sk_buff *)0);
#line 274
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 274
    if (______r___6 != 0) {
#line 275
      l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
#line 276
      ______f___5.func = "ph_data_confirm";
#line 276
      ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 276
      ______f___5.line = 276U;
#line 276
      ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 276
      ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 276
      tmp___1 = l2down_skb(l2, nskb);
#line 276
      ______r___5 = tmp___1 != 0;
#line 276
      ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 276
      if (______r___5 != 0) {
#line 277
        consume_skb(nskb);
#line 278
        l2->down_id = 65534U;
#line 279
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
      } else {

      }
    } else {
#line 282
      test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
    }
  } else {

  }
#line 284
  return (ret);
}
}
#line 288 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2mgr(struct layer2 *l2 , u_int prim , void *arg ) 
{ 
  long c ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 289
  c = (long )arg;
#line 291
  printk("<4>l2mgr: addr:%x prim %x %c\n", l2->id, prim, (int )((char )c));
#line 293
  ______f.func = "l2mgr";
#line 293
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 293
  ______f.line = 294U;
#line 293
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 293
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 293
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 293
  if (tmp != 0) {
#line 293
    tmp___0 = constant_test_bit(15U, (unsigned long const volatile   *)(& l2->flag));
#line 293
    if (tmp___0 == 0) {
#line 293
      tmp___1 = 1;
    } else {
#line 293
      tmp___1 = 0;
    }
  } else {
#line 293
    tmp___1 = 0;
  }
#line 293
  ______r = tmp___1;
#line 293
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 293
  if (______r != 0) {
#line 295
    switch (c) {
    case 67L: ;
    case 68L: ;
    case 71L: ;
    case 72L: 
#line 300
    l2_tei(l2, prim, (unsigned long )arg);
#line 301
    goto ldv_35015;
    }
    ldv_35015: ;
  } else {

  }
#line 304
  return (0);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void set_peer_busy(struct layer2 *l2 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 309
  test_and_set_bit(10, (unsigned long volatile   *)(& l2->flag));
#line 310
  ______f.func = "set_peer_busy";
#line 310
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 310
  ______f.line = 310U;
#line 310
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 310
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 310
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 310
  if (tmp != 0U) {
#line 310
    tmp___1 = 1;
  } else {
#line 310
    tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
#line 310
    if (tmp___0 != 0U) {
#line 310
      tmp___1 = 1;
    } else {
#line 310
      tmp___1 = 0;
    }
  }
#line 310
  ______r = tmp___1;
#line 310
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 310
  if (______r != 0) {
#line 311
    test_and_set_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 312
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void clear_peer_busy(struct layer2 *l2 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 316
  ______f.func = "clear_peer_busy";
#line 316
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 316
  ______f.line = 316U;
#line 316
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 316
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 316
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& l2->flag));
#line 316
  ______r = tmp != 0;
#line 316
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 316
  if (______r != 0) {
#line 317
    test_and_clear_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 318
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void InitWin(struct layer2 *l2 ) 
{ 
  int i ;

  {
#line 325
  i = 0;
#line 325
  goto ldv_35035;
  ldv_35034: 
#line 326
  l2->windowar[i] = 0;
#line 325
  i = i + 1;
  ldv_35035: ;
#line 325
  if (i <= 7) {
#line 326
    goto ldv_35034;
  } else {

  }

#line 330
  return;
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int freewin(struct layer2 *l2 ) 
{ 
  int i ;
  int cnt ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 332
  cnt = 0;
#line 334
  i = 0;
#line 334
  goto ldv_35047;
  ldv_35046: 
#line 335
  ______f.func = "freewin";
#line 335
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 335
  ______f.line = 335U;
#line 335
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 335
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 335
  ______r = (unsigned long )l2->windowar[i] != (unsigned long )((struct sk_buff *)0);
#line 335
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 335
  if (______r != 0) {
#line 336
    cnt = cnt + 1;
#line 337
    consume_skb(l2->windowar[i]);
#line 338
    l2->windowar[i] = 0;
  } else {

  }
#line 334
  i = i + 1;
  ldv_35047: ;
#line 334
  if (i <= 7) {
#line 335
    goto ldv_35046;
  } else {

  }

#line 341
  return (cnt);
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void ReleaseWin(struct layer2 *l2 ) 
{ 
  int cnt ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 347
  tmp = freewin(l2);
#line 347
  cnt = tmp;
#line 349
  ______f.func = "ReleaseWin";
#line 349
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 349
  ______f.line = 349U;
#line 349
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 349
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 349
  ______r = cnt != 0;
#line 349
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 349
  if (______r != 0) {
#line 350
    printk("<4>isdnl2 freed %d skbuffs in release\n", cnt);
  } else {

  }
#line 351
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline unsigned int cansend(struct layer2 *l2 ) 
{ 
  unsigned int p1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 359
  ______f.func = "cansend";
#line 359
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 359
  ______f.line = 359U;
#line 359
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 359
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 359
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 359
  ______r = tmp != 0;
#line 359
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 359
  if (______r != 0) {
#line 360
    p1 = (l2->vs - l2->va) & 127U;
  } else {
#line 362
    p1 = (l2->vs - l2->va) & 7U;
  }
#line 363
  if (l2->window > p1) {
#line 363
    tmp___0 = constant_test_bit(10U, (unsigned long const volatile   *)(& l2->flag));
#line 363
    if (tmp___0 == 0) {
#line 363
      tmp___1 = 1;
    } else {
#line 363
      tmp___1 = 0;
    }
  } else {
#line 363
    tmp___1 = 0;
  }
#line 363
  return ((unsigned int )tmp___1);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void clear_exception(struct layer2 *l2 ) 
{ 


  {
#line 369
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 370
  test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 371
  test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 372
  clear_peer_busy(l2);
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int sethdraddr(struct layer2 *l2 , u_char *header , int rsp ) 
{ 
  u_char *ptr ;
  int crbit ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  u_char *tmp___0 ;
  u_char *tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___2 ;
  u_char *tmp___3 ;
  u_char *tmp___4 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___5 ;

  {
#line 378
  ptr = header;
#line 379
  crbit = rsp;
#line 381
  ______f___2.func = "sethdraddr";
#line 381
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 381
  ______f___2.line = 381U;
#line 381
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 381
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 381
  tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 381
  ______r___2 = tmp___5 != 0;
#line 381
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 381
  if (______r___2 != 0) {
#line 382
    ______f.func = "sethdraddr";
#line 382
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 382
    ______f.line = 382U;
#line 382
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 382
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 382
    tmp = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 382
    ______r = tmp != 0;
#line 382
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 382
    if (______r != 0) {
#line 383
      crbit = crbit == 0;
    } else {

    }
#line 384
    tmp___0 = ptr;
#line 384
    ptr = ptr + 1;
#line 384
    *tmp___0 = (u_char )((int )((signed char )((int )l2->sapi << 2)) | (crbit != 0 ? 2 : 0));
#line 385
    tmp___1 = ptr;
#line 385
    ptr = ptr + 1;
#line 385
    *tmp___1 = (u_char )((int )((signed char )((int )l2->tei << 1)) | 1);
#line 386
    return (2);
  } else {
#line 388
    ______f___0.func = "sethdraddr";
#line 388
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 388
    ______f___0.line = 388U;
#line 388
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 388
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 388
    tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 388
    ______r___0 = tmp___2 != 0;
#line 388
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 388
    if (______r___0 != 0) {
#line 389
      crbit = crbit == 0;
    } else {

    }
#line 390
    ______f___1.func = "sethdraddr";
#line 390
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 390
    ______f___1.line = 390U;
#line 390
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 390
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 390
    ______r___1 = crbit != 0;
#line 390
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 390
    if (______r___1 != 0) {
#line 391
      tmp___3 = ptr;
#line 391
      ptr = ptr + 1;
#line 391
      *tmp___3 = l2->addr.B;
    } else {
#line 393
      tmp___4 = ptr;
#line 393
      ptr = ptr + 1;
#line 393
      *tmp___4 = l2->addr.A;
    }
#line 394
    return (1);
  }
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline static void enqueue_super(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_int tmp ;
  int tmp___0 ;

  {
#line 401
  ______f.func = "enqueue_super";
#line 401
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 401
  ______f.line = 401U;
#line 401
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 401
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 401
  tmp = l2_newid(l2);
#line 401
  tmp___0 = l2down(l2, 8193U, tmp, skb);
#line 401
  ______r = tmp___0 != 0;
#line 401
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 401
  if (______r != 0) {
#line 402
    consume_skb(skb);
  } else {

  }
#line 403
  return;
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline static void enqueue_ui(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  u_int tmp ;
  int tmp___0 ;

  {
#line 408
  ______f.func = "enqueue_ui";
#line 408
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 408
  ______f.line = 408U;
#line 408
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 408
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 408
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 408
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 408
  if (______r != 0) {
#line 409
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
#line 410
  ______f___0.func = "enqueue_ui";
#line 410
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 410
  ______f___0.line = 410U;
#line 410
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 410
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 410
  tmp = l2_newid(l2);
#line 410
  tmp___0 = l2down(l2, 8193U, tmp, skb);
#line 410
  ______r___0 = tmp___0 != 0;
#line 410
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 410
  if (______r___0 != 0) {
#line 411
    consume_skb(skb);
  } else {

  }
#line 412
  return;
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsUI(u_char *data ) 
{ 


  {
#line 417
  return (((int )*data & 239) == 3);
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsUA(u_char *data ) 
{ 


  {
#line 423
  return (((int )*data & 239) == 99);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsDM(u_char *data ) 
{ 


  {
#line 429
  return (((int )*data & 239) == 15);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsDISC(u_char *data ) 
{ 


  {
#line 435
  return (((int )*data & 239) == 67);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsSFrame(u_char *data , struct layer2 *l2 ) 
{ 
  register u_char d ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 450
  d = *data;
#line 452
  ______f.func = "IsSFrame";
#line 452
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 452
  ______f.line = 452U;
#line 452
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 452
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 452
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 452
  ______r = tmp == 0;
#line 452
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 452
  if (______r != 0) {
#line 453
    d = (unsigned int )d & 15U;
  } else {

  }
#line 454
  return (((int )d & 243) == 1 && ((int )d & 12) != 12);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsSABME(u_char *data , struct layer2 *l2 ) 
{ 
  u_char d ;
  int tmp ;

  {
#line 460
  d = (unsigned int )*data & 239U;
#line 462
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 462
  return (tmp != 0 ? (unsigned int )d == 111U : (unsigned int )d == 47U);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsREJ(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 468
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 468
  return (tmp != 0 ? (unsigned int )*data == 9U : ((int )*data & 15) == 9);
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsFRMR(u_char *data ) 
{ 


  {
#line 475
  return (((int )*data & 239) == 135);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsRNR(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 481
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 481
  return (tmp != 0 ? (unsigned int )*data == 5U : ((int )*data & 15) == 5);
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int iframe_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int i ;
  int rsp ;
  u_int tmp ;
  int tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 489
  rsp = (int )*(skb->data) & 2;
#line 491
  tmp = l2addrsize(l2);
#line 491
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 491
  i = tmp + (tmp___0 != 0 ? 2U : 1U);
#line 492
  ______f.func = "iframe_error";
#line 492
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 492
  ______f.line = 492U;
#line 492
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 492
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 492
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 492
  ______r = tmp___1 != 0;
#line 492
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 492
  if (______r != 0) {
#line 493
    rsp = rsp == 0;
  } else {

  }
#line 494
  ______f___0.func = "iframe_error";
#line 494
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 494
  ______f___0.line = 494U;
#line 494
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 494
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 494
  ______r___0 = rsp != 0;
#line 494
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 494
  if (______r___0 != 0) {
#line 495
    return (76);
  } else {

  }
#line 496
  ______f___1.func = "iframe_error";
#line 496
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 496
  ______f___1.line = 496U;
#line 496
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 496
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 496
  ______r___1 = skb->len < i;
#line 496
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 496
  if (______r___1 != 0) {
#line 497
    return (78);
  } else {

  }
#line 498
  ______f___2.func = "iframe_error";
#line 498
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 498
  ______f___2.line = 498U;
#line 498
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 498
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 498
  ______r___2 = skb->len - i > l2->maxlen;
#line 498
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 498
  if (______r___2 != 0) {
#line 499
    return (79);
  } else {

  }
#line 500
  return (0);
}
}
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int super_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_int tmp ;
  int tmp___0 ;

  {
#line 506
  ______f.func = "super_error";
#line 506
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 506
  ______f.line = 507U;
#line 506
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 506
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 506
  tmp = l2addrsize(l2);
#line 506
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 506
  ______r = skb->len != tmp + (tmp___0 != 0 ? 2U : 1U);
#line 506
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 506
  if (______r != 0) {
#line 508
    return (78);
  } else {

  }
#line 509
  return (0);
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int unnum_error(struct layer2 *l2 , struct sk_buff *skb , int wantrsp ) 
{ 
  int rsp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  u_int tmp___0 ;

  {
#line 515
  rsp = ((int )*(skb->data) & 2) >> 1;
#line 516
  ______f.func = "unnum_error";
#line 516
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 516
  ______f.line = 516U;
#line 516
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 516
  ______r = tmp != 0;
#line 516
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 516
  if (______r != 0) {
#line 517
    rsp = rsp == 0;
  } else {

  }
#line 518
  ______f___0.func = "unnum_error";
#line 518
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 518
  ______f___0.line = 518U;
#line 518
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 518
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 518
  ______r___0 = rsp != wantrsp;
#line 518
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 518
  if (______r___0 != 0) {
#line 519
    return (76);
  } else {

  }
#line 520
  ______f___1.func = "unnum_error";
#line 520
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 520
  ______f___1.line = 520U;
#line 520
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 520
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 520
  tmp___0 = l2addrsize(l2);
#line 520
  ______r___1 = skb->len != tmp___0 + 1U;
#line 520
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 520
  if (______r___1 != 0) {
#line 521
    return (78);
  } else {

  }
#line 522
  return (0);
}
}
#line 526 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int UI_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int rsp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  u_int tmp___0 ;

  {
#line 528
  rsp = (int )*(skb->data) & 2;
#line 529
  ______f.func = "UI_error";
#line 529
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 529
  ______f.line = 529U;
#line 529
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 529
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 529
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 529
  ______r = tmp != 0;
#line 529
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 529
  if (______r != 0) {
#line 530
    rsp = rsp == 0;
  } else {

  }
#line 531
  ______f___0.func = "UI_error";
#line 531
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 531
  ______f___0.line = 531U;
#line 531
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 531
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 531
  ______r___0 = rsp != 0;
#line 531
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 531
  if (______r___0 != 0) {
#line 532
    return (76);
  } else {

  }
#line 533
  ______f___1.func = "UI_error";
#line 533
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 533
  ______f___1.line = 533U;
#line 533
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 533
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 533
  tmp___0 = l2addrsize(l2);
#line 533
  ______r___1 = skb->len > (l2->maxlen + tmp___0) + 1U;
#line 533
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 533
  if (______r___1 != 0) {
#line 534
    return (79);
  } else {

  }
#line 535
  return (0);
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int FRMR_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int headers ;
  u_int tmp ;
  u_char *datap ;
  int rsp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___1 ;

  {
#line 541
  tmp = l2addrsize(l2);
#line 541
  headers = tmp + 1U;
#line 542
  datap = skb->data + (unsigned long )headers;
#line 543
  rsp = (int )*(skb->data) & 2;
#line 545
  ______f.func = "FRMR_error";
#line 545
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 545
  ______f.line = 545U;
#line 545
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 545
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 545
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 545
  ______r = tmp___0 != 0;
#line 545
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 545
  if (______r != 0) {
#line 546
    rsp = rsp == 0;
  } else {

  }
#line 547
  ______f___0.func = "FRMR_error";
#line 547
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 547
  ______f___0.line = 547U;
#line 547
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 547
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 547
  ______r___0 = rsp == 0;
#line 547
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 547
  if (______r___0 != 0) {
#line 548
    return (76);
  } else {

  }
#line 549
  ______f___5.func = "FRMR_error";
#line 549
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 549
  ______f___5.line = 549U;
#line 549
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 549
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 549
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 549
  ______r___5 = tmp___1 != 0;
#line 549
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 549
  if (______r___5 != 0) {
#line 550
    ______f___4.func = "FRMR_error";
#line 550
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 550
    ______f___4.line = 550U;
#line 550
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 550
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 550
    ______r___4 = skb->len < headers + 5U;
#line 550
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 550
    if (______r___4 != 0) {
#line 551
      return (78);
    } else {
#line 552
      ______f___3.func = "FRMR_error";
#line 552
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 552
      ______f___3.line = 552U;
#line 552
      ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 552
      ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 552
      ______r___3 = (*debug___4 & 16711680U) != 0U;
#line 552
      ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 552
      if (______r___3 != 0) {
#line 553
        l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x %2x %2x", (int )*datap,
                  (int )*(datap + 1UL), (int )*(datap + 2UL), (int )*(datap + 3UL),
                  (int )*(datap + 4UL));
      } else {
#line 557
        ______f___2.func = "FRMR_error";
#line 557
        ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 557
        ______f___2.line = 557U;
#line 557
        ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 557
        ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 557
        ______r___2 = skb->len < headers + 3U;
#line 557
        ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 557
        if (______r___2 != 0) {
#line 558
          return (78);
        } else {
#line 559
          ______f___1.func = "FRMR_error";
#line 559
          ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 559
          ______f___1.line = 559U;
#line 559
          ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 559
          ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 559
          ______r___1 = (*debug___4 & 16711680U) != 0U;
#line 559
          ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 559
          if (______r___1 != 0) {
#line 560
            l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x", (int )*datap,
                      (int )*(datap + 1UL), (int )*(datap + 2UL));
          } else {

          }
        }
      }
    }
  } else {

  }
#line 564
  return (0);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static unsigned int legalnr(struct layer2 *l2 , unsigned int nr ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 570
  ______f.func = "legalnr";
#line 570
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 570
  ______f.line = 570U;
#line 570
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 570
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 570
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 570
  ______r = tmp != 0;
#line 570
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 570
  if (______r != 0) {
#line 571
    return (((nr - l2->va) & 127U) <= ((l2->vs - l2->va) & 127U));
  } else {
#line 573
    return (((nr - l2->va) & 7U) <= ((l2->vs - l2->va) & 7U));
  }
}
}
#line 577 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void setva(struct layer2 *l2 , unsigned int nr ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 581
  goto ldv_35260;
  ldv_35259: 
#line 582
  l2->va = l2->va + (u_int )1;
#line 583
  ______f.func = "setva";
#line 583
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 583
  ______f.line = 583U;
#line 583
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 583
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 583
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 583
  ______r = tmp != 0;
#line 583
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 583
  if (______r != 0) {
#line 584
    l2->va = l2->va & 127U;
  } else {
#line 586
    l2->va = l2->va & 7U;
  }
#line 587
  ______f___0.func = "setva";
#line 587
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 587
  ______f___0.line = 587U;
#line 587
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 587
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 587
  ______r___0 = (unsigned long )l2->windowar[l2->sow] != (unsigned long )((struct sk_buff *)0);
#line 587
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 587
  if (______r___0 != 0) {
#line 588
    skb_trim(l2->windowar[l2->sow], 0U);
#line 589
    skb_queue_tail(& l2->tmp_queue, l2->windowar[l2->sow]);
#line 590
    l2->windowar[l2->sow] = 0;
  } else {

  }
#line 592
  l2->sow = (l2->sow + 1U) % l2->window;
  ldv_35260: ;
#line 581
  if (l2->va != nr) {
#line 582
    goto ldv_35259;
  } else {

  }
#line 594
  skb = skb_dequeue(& l2->tmp_queue);
#line 595
  goto ldv_35263;
  ldv_35262: 
#line 596
  consume_skb(skb);
#line 597
  skb = skb_dequeue(& l2->tmp_queue);
  ldv_35263: ;
#line 595
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 596
    goto ldv_35262;
  } else {

  }

#line 600
  return;
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void send_uframe(struct layer2 *l2 , struct sk_buff *skb , u_char cmd , u_char cr ) 
{ 
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
#line 607
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
#line 608
  tmp___0 = i;
#line 608
  i = i + 1;
#line 608
  tmp[tmp___0] = cmd;
#line 609
  ______f___0.func = "send_uframe";
#line 609
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 609
  ______f___0.line = 609U;
#line 609
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 609
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 609
  ______r___0 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 609
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 609
  if (______r___0 != 0) {
#line 610
    skb_trim(skb, 0U);
  } else {
#line 612
    skb = mI_alloc_skb___0((unsigned int )i, 32U);
#line 613
    ______f.func = "send_uframe";
#line 613
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 613
    ______f.line = 613U;
#line 613
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 613
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 613
    ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 613
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 613
    if (______r != 0) {
#line 614
      printk("<4>%s: can\'t alloc skbuff\n", "send_uframe");
#line 616
      return;
    } else {

    }
  }
#line 619
  __len = (size_t )i;
#line 619
  tmp___2 = skb_put(skb, (unsigned int )i);
#line 619
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& tmp), __len);
#line 620
  enqueue_super(l2, skb);
#line 621
  return;
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_char get_PollFlag(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;

  {
#line 627
  tmp = l2addrsize(l2);
#line 627
  return ((unsigned int )*(skb->data + (unsigned long )tmp) & 16U);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_char get_PollFlagFree(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_char PF ;

  {
#line 635
  PF = get_PollFlag(l2, skb);
#line 636
  consume_skb(skb);
#line 637
  return (PF);
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void start_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 643
  mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, i);
#line 644
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 645
  return;
}
}
#line 648 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void restart_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 650
  mISDN_FsmRestartTimer(& l2->t200, l2->T200, 17, 0, i);
#line 651
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 652
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void stop_t200(struct layer2 *l2 , int i ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 657
  ______f.func = "stop_t200";
#line 657
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 657
  ______f.line = 657U;
#line 657
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 657
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 657
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 657
  ______r = tmp != 0;
#line 657
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 657
  if (______r != 0) {
#line 658
    mISDN_FsmDelTimer(& l2->t200, i);
  } else {

  }
#line 659
  return;
}
}
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void st5_dl_release_l2l3(struct layer2 *l2 ) 
{ 
  int pr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 666
  ______f.func = "st5_dl_release_l2l3";
#line 666
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 666
  ______f.line = 666U;
#line 666
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 666
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 666
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 666
  ______r = tmp != 0;
#line 666
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 666
  if (______r != 0) {
#line 667
    pr = 20744;
  } else {
#line 669
    pr = 4360;
  }
#line 670
  l2up_create(l2, (u_int )pr, 0, 0);
#line 671
  return;
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void lapb_dl_release_l2l3(struct layer2 *l2 , int f ) 
{ 
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 676
  ______f.func = "lapb_dl_release_l2l3";
#line 676
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 676
  ______f.line = 676U;
#line 676
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 676
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 676
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 676
  ______r = tmp___0 != 0;
#line 676
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 676
  if (______r != 0) {
#line 677
    tmp = l2_newid(l2);
#line 677
    l2down_create(l2, 513U, tmp, 0, 0);
  } else {

  }
#line 678
  l2up_create(l2, (u_int )f, 0, 0);
#line 679
  return;
}
}
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void establishlink(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;
  u_char cmd ;
  int tmp ;

  {
#line 684
  l2 = (struct layer2 *)fi->userdata;
#line 687
  clear_exception(l2);
#line 688
  l2->rc = 0;
#line 689
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 689
  cmd = tmp != 0 ? 127U : 63U;
#line 690
  send_uframe(l2, 0, (int )cmd, 0);
#line 691
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 692
  restart_t200(l2, 1);
#line 693
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 694
  freewin(l2);
#line 695
  mISDN_FsmChangeState(fi, 4);
#line 696
  return;
}
}
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_error_ua(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;

  {
#line 701
  skb = (struct sk_buff *)arg;
#line 702
  l2 = (struct layer2 *)fi->userdata;
#line 704
  ______f.func = "l2_mdl_error_ua";
#line 704
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 704
  ______f.line = 704U;
#line 704
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 704
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 704
  tmp = get_PollFlagFree(l2, skb);
#line 704
  ______r = (unsigned int )tmp != 0U;
#line 704
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 704
  if (______r != 0) {
#line 705
    l2mgr(l2, 7940U, 67);
  } else {
#line 707
    l2mgr(l2, 7940U, 68);
  }
#line 708
  return;
}
}
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;

  {
#line 714
  skb = (struct sk_buff *)arg;
#line 715
  l2 = (struct layer2 *)fi->userdata;
#line 717
  ______f.func = "l2_mdl_error_dm";
#line 717
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 717
  ______f.line = 717U;
#line 717
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 717
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 717
  tmp = get_PollFlagFree(l2, skb);
#line 717
  ______r = (unsigned int )tmp != 0U;
#line 717
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 717
  if (______r != 0) {
#line 718
    l2mgr(l2, 7940U, 66);
  } else {
#line 720
    l2mgr(l2, 7940U, 69);
#line 721
    establishlink(fi);
#line 722
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  }
#line 724
  return;
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;

  {
#line 729
  skb = (struct sk_buff *)arg;
#line 730
  l2 = (struct layer2 *)fi->userdata;
#line 732
  ______f.func = "l2_st8_mdl_error_dm";
#line 732
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 732
  ______f.line = 732U;
#line 732
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 732
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 732
  tmp = get_PollFlagFree(l2, skb);
#line 732
  ______r = (unsigned int )tmp != 0U;
#line 732
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 732
  if (______r != 0) {
#line 733
    l2mgr(l2, 7940U, 66);
  } else {
#line 735
    l2mgr(l2, 7940U, 69);
  }
#line 736
  establishlink(fi);
#line 737
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 738
  return;
}
}
#line 741 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_go_st3(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 743
  consume_skb((struct sk_buff *)arg);
#line 744
  mISDN_FsmChangeState(fi, 2);
#line 745
  return;
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 750
  l2 = (struct layer2 *)fi->userdata;
#line 752
  mISDN_FsmChangeState(fi, 2);
#line 753
  consume_skb((struct sk_buff *)arg);
#line 754
  l2_tei(l2, 6404U, 0UL);
#line 755
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_queue_ui_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 760
  l2 = (struct layer2 *)fi->userdata;
#line 761
  skb = (struct sk_buff *)arg;
#line 763
  skb_queue_tail(& l2->ui_queue, skb);
#line 764
  mISDN_FsmChangeState(fi, 1);
#line 765
  l2_tei(l2, 6404U, 0UL);
#line 766
  return;
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_queue_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 771
  l2 = (struct layer2 *)fi->userdata;
#line 772
  skb = (struct sk_buff *)arg;
#line 774
  skb_queue_tail(& l2->ui_queue, skb);
#line 775
  return;
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void tx_ui(struct layer2 *l2 ) 
{ 
  struct sk_buff *skb ;
  u_char header[4U] ;
  int i ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
#line 784
  i = sethdraddr(l2, (u_char *)(& header), 0);
#line 785
  ______f.func = "tx_ui";
#line 785
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 785
  ______f.line = 785U;
#line 785
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 785
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 785
  tmp = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 785
  ______r = tmp != 0;
#line 785
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 785
  if (______r != 0) {
#line 786
    header[1] = 255U;
  } else {

  }
#line 787
  tmp___0 = i;
#line 787
  i = i + 1;
#line 787
  header[tmp___0] = 3U;
#line 788
  goto ldv_35407;
  ldv_35406: 
#line 789
  __len = (size_t )i;
#line 789
  tmp___2 = skb_push(skb, (unsigned int )i);
#line 789
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& header), __len);
#line 790
  enqueue_ui(l2, skb);
  ldv_35407: 
#line 788
  skb = skb_dequeue(& l2->ui_queue);
#line 788
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 789
    goto ldv_35406;
  } else {

  }

#line 793
  return;
}
}
#line 795 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 797
  l2 = (struct layer2 *)fi->userdata;
#line 798
  skb = (struct sk_buff *)arg;
#line 800
  skb_queue_tail(& l2->ui_queue, skb);
#line 801
  tx_ui(l2);
#line 802
  return;
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 807
  l2 = (struct layer2 *)fi->userdata;
#line 808
  skb = (struct sk_buff *)arg;
#line 810
  tmp = l2headersize(l2, 1);
#line 810
  skb_pull(skb, tmp);
#line 815
  ______f.func = "l2_got_ui";
#line 815
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 815
  ______f.line = 815U;
#line 815
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 815
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 815
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 815
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 815
  if (______r != 0) {
#line 816
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
#line 817
  l2up(l2, 12552U, skb);
#line 818
  return;
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_establish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 823
  skb = (struct sk_buff *)arg;
#line 824
  l2 = (struct layer2 *)fi->userdata;
#line 826
  establishlink(fi);
#line 827
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 828
  consume_skb(skb);
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_discard_i_setl3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 834
  skb = (struct sk_buff *)arg;
#line 835
  l2 = (struct layer2 *)fi->userdata;
#line 837
  skb_queue_purge(& l2->i_queue);
#line 838
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 839
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 840
  consume_skb(skb);
#line 841
  return;
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_l3_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 846
  skb = (struct sk_buff *)arg;
#line 847
  l2 = (struct layer2 *)fi->userdata;
#line 849
  skb_queue_purge(& l2->i_queue);
#line 850
  establishlink(fi);
#line 851
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 852
  consume_skb(skb);
#line 853
  return;
}
}
#line 856 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 858
  l2 = (struct layer2 *)fi->userdata;
#line 859
  skb = (struct sk_buff *)arg;
#line 861
  skb_trim(skb, 0U);
#line 862
  l2up(l2, 20744U, skb);
#line 863
  return;
}
}
#line 866 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_pend_rel(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 868
  skb = (struct sk_buff *)arg;
#line 869
  l2 = (struct layer2 *)fi->userdata;
#line 871
  test_and_set_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 872
  consume_skb(skb);
#line 873
  return;
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_disconnect(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 878
  l2 = (struct layer2 *)fi->userdata;
#line 879
  skb = (struct sk_buff *)arg;
#line 881
  skb_queue_purge(& l2->i_queue);
#line 882
  freewin(l2);
#line 883
  mISDN_FsmChangeState(fi, 5);
#line 884
  l2->rc = 0;
#line 885
  send_uframe(l2, 0, 83, 0);
#line 886
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 887
  restart_t200(l2, 2);
#line 888
  ______f.func = "l2_disconnect";
#line 888
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 888
  ______f.line = 888U;
#line 888
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 888
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 888
  ______r = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 888
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 888
  if (______r != 0) {
#line 889
    consume_skb(skb);
  } else {

  }
#line 890
  return;
}
}
#line 893 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_start_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 895
  l2 = (struct layer2 *)fi->userdata;
#line 896
  skb = (struct sk_buff *)arg;
#line 898
  l2->vs = 0U;
#line 899
  l2->va = 0U;
#line 900
  l2->vr = 0U;
#line 901
  l2->sow = 0U;
#line 902
  clear_exception(l2);
#line 903
  tmp = get_PollFlag(l2, skb);
#line 903
  send_uframe(l2, 0, (int )((unsigned int )tmp | 99U), 1);
#line 904
  mISDN_FsmChangeState(fi, 6);
#line 905
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 3);
#line 906
  skb_trim(skb, 0U);
#line 907
  l2up(l2, 4104U, skb);
#line 908
  ______f.func = "l2_start_multi";
#line 908
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 908
  ______f.line = 908U;
#line 908
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 908
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 908
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 908
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 908
  if (______r != 0) {
#line 909
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
#line 910
  return;
}
}
#line 913 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_UA(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 915
  l2 = (struct layer2 *)fi->userdata;
#line 916
  skb = (struct sk_buff *)arg;
#line 918
  tmp = get_PollFlag(l2, skb);
#line 918
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 919
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_DM(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 924
  l2 = (struct layer2 *)fi->userdata;
#line 925
  skb = (struct sk_buff *)arg;
#line 927
  tmp = get_PollFlag(l2, skb);
#line 927
  send_uframe(l2, skb, (int )((unsigned int )tmp | 15U), 1);
#line 928
  return;
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_restart_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int est ;
  u_char tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  __u32 tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;

  {
#line 933
  l2 = (struct layer2 *)fi->userdata;
#line 934
  skb = (struct sk_buff *)arg;
#line 935
  est = 0;
#line 937
  tmp = get_PollFlag(l2, skb);
#line 937
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 939
  l2mgr(l2, 7940U, 70);
#line 941
  ______f.func = "l2_restart_multi";
#line 941
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 941
  ______f.line = 941U;
#line 941
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 941
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 941
  ______r = l2->vs != l2->va;
#line 941
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 941
  if (______r != 0) {
#line 942
    skb_queue_purge(& l2->i_queue);
#line 943
    est = 1;
  } else {

  }
#line 946
  clear_exception(l2);
#line 947
  l2->vs = 0U;
#line 948
  l2->va = 0U;
#line 949
  l2->vr = 0U;
#line 950
  l2->sow = 0U;
#line 951
  mISDN_FsmChangeState(fi, 6);
#line 952
  stop_t200(l2, 3);
#line 953
  mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 3);
#line 955
  ______f___0.func = "l2_restart_multi";
#line 955
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 955
  ______f___0.line = 955U;
#line 955
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 955
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 955
  ______r___0 = est != 0;
#line 955
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 955
  if (______r___0 != 0) {
#line 956
    l2up_create(l2, 4104U, 0, 0);
  } else {

  }
#line 961
  ______f___1.func = "l2_restart_multi";
#line 961
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 961
  ______f___1.line = 961U;
#line 961
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 961
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 961
  tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 961
  if (tmp___0 != 0U) {
#line 961
    tmp___1 = cansend(l2);
#line 961
    if (tmp___1 != 0U) {
#line 961
      tmp___2 = 1;
    } else {
#line 961
      tmp___2 = 0;
    }
  } else {
#line 961
    tmp___2 = 0;
  }
#line 961
  ______r___1 = tmp___2;
#line 961
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 961
  if (______r___1 != 0) {
#line 962
    mISDN_FsmEvent(fi, 9, 0);
  } else {

  }
#line 963
  return;
}
}
#line 966 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_stop_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 968
  l2 = (struct layer2 *)fi->userdata;
#line 969
  skb = (struct sk_buff *)arg;
#line 971
  mISDN_FsmChangeState(fi, 3);
#line 972
  mISDN_FsmDelTimer(& l2->t203, 3);
#line 973
  stop_t200(l2, 4);
#line 975
  tmp = get_PollFlag(l2, skb);
#line 975
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 976
  skb_queue_purge(& l2->i_queue);
#line 977
  freewin(l2);
#line 978
  lapb_dl_release_l2l3(l2, 4360);
#line 979
  ______f.func = "l2_stop_multi";
#line 979
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 979
  ______f.line = 979U;
#line 979
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 979
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 979
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 979
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 979
  if (______r != 0) {
#line 980
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 981
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_connected(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int pr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  __u32 tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 986
  l2 = (struct layer2 *)fi->userdata;
#line 987
  skb = (struct sk_buff *)arg;
#line 988
  pr = -1;
#line 990
  ______f.func = "l2_connected";
#line 990
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 990
  ______f.line = 990U;
#line 990
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 990
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 990
  tmp = get_PollFlag(l2, skb);
#line 990
  ______r = (unsigned int )tmp == 0U;
#line 990
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 990
  if (______r != 0) {
#line 991
    l2_mdl_error_ua(fi, event, arg);
#line 992
    return;
  } else {

  }
#line 994
  consume_skb(skb);
#line 995
  ______f___0.func = "l2_connected";
#line 995
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 995
  ______f___0.line = 995U;
#line 995
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 995
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 995
  tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 995
  ______r___0 = tmp___0 != 0;
#line 995
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 995
  if (______r___0 != 0) {
#line 996
    l2_disconnect(fi, event, 0);
  } else {

  }
#line 997
  ______f___2.func = "l2_connected";
#line 997
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 997
  ______f___2.line = 997U;
#line 997
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 997
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 997
  tmp___1 = test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 997
  ______r___2 = tmp___1 != 0;
#line 997
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 997
  if (______r___2 != 0) {
#line 998
    pr = 20488;
  } else {
#line 999
    ______f___1.func = "l2_connected";
#line 999
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 999
    ______f___1.line = 999U;
#line 999
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 999
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 999
    ______r___1 = l2->vs != l2->va;
#line 999
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 999
    if (______r___1 != 0) {
#line 1000
      skb_queue_purge(& l2->i_queue);
#line 1001
      pr = 4104;
    } else {

    }
  }
#line 1003
  stop_t200(l2, 5);
#line 1004
  l2->vr = 0U;
#line 1005
  l2->vs = 0U;
#line 1006
  l2->va = 0U;
#line 1007
  l2->sow = 0U;
#line 1008
  mISDN_FsmChangeState(fi, 6);
#line 1009
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 4);
#line 1010
  ______f___3.func = "l2_connected";
#line 1010
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1010
  ______f___3.line = 1010U;
#line 1010
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1010
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1010
  ______r___3 = pr != -1;
#line 1010
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1010
  if (______r___3 != 0) {
#line 1011
    l2up_create(l2, (u_int )pr, 0, 0);
  } else {

  }
#line 1013
  ______f___4.func = "l2_connected";
#line 1013
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1013
  ______f___4.line = 1013U;
#line 1013
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1013
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1013
  tmp___2 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1013
  if (tmp___2 != 0U) {
#line 1013
    tmp___3 = cansend(l2);
#line 1013
    if (tmp___3 != 0U) {
#line 1013
      tmp___4 = 1;
    } else {
#line 1013
      tmp___4 = 0;
    }
  } else {
#line 1013
    tmp___4 = 0;
  }
#line 1013
  ______r___4 = tmp___4;
#line 1013
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1013
  if (______r___4 != 0) {
#line 1014
    mISDN_FsmEvent(fi, 9, 0);
  } else {

  }
#line 1016
  ______f___5.func = "l2_connected";
#line 1016
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1016
  ______f___5.line = 1016U;
#line 1016
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1016
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1016
  ______r___5 = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1016
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1016
  if (______r___5 != 0) {
#line 1017
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
#line 1018
  return;
}
}
#line 1021 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_released(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1023
  l2 = (struct layer2 *)fi->userdata;
#line 1024
  skb = (struct sk_buff *)arg;
#line 1026
  ______f.func = "l2_released";
#line 1026
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1026
  ______f.line = 1026U;
#line 1026
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1026
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1026
  tmp = get_PollFlag(l2, skb);
#line 1026
  ______r = (unsigned int )tmp == 0U;
#line 1026
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1026
  if (______r != 0) {
#line 1027
    l2_mdl_error_ua(fi, event, arg);
#line 1028
    return;
  } else {

  }
#line 1030
  consume_skb(skb);
#line 1031
  stop_t200(l2, 6);
#line 1032
  lapb_dl_release_l2l3(l2, 20744);
#line 1033
  mISDN_FsmChangeState(fi, 3);
#line 1034
  ______f___0.func = "l2_released";
#line 1034
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1034
  ______f___0.line = 1034U;
#line 1034
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1034
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1034
  ______r___0 = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1034
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1034
  if (______r___0 != 0) {
#line 1035
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1036
  return;
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char tmp ;

  {
#line 1041
  l2 = (struct layer2 *)fi->userdata;
#line 1042
  skb = (struct sk_buff *)arg;
#line 1044
  ______f.func = "l2_reestablish";
#line 1044
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1044
  ______f.line = 1044U;
#line 1044
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1044
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1044
  tmp = get_PollFlagFree(l2, skb);
#line 1044
  ______r = (unsigned int )tmp == 0U;
#line 1044
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1044
  if (______r != 0) {
#line 1045
    establishlink(fi);
#line 1046
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1048
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  u_int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___1 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  u_char tmp___2 ;

  {
#line 1053
  l2 = (struct layer2 *)fi->userdata;
#line 1054
  skb = (struct sk_buff *)arg;
#line 1056
  ______f___2.func = "l2_st5_dm_release";
#line 1056
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1056
  ______f___2.line = 1056U;
#line 1056
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1056
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1056
  tmp___2 = get_PollFlagFree(l2, skb);
#line 1056
  ______r___2 = (unsigned int )tmp___2 != 0U;
#line 1056
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1056
  if (______r___2 != 0) {
#line 1057
    stop_t200(l2, 7);
#line 1058
    ______f.func = "l2_st5_dm_release";
#line 1058
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1058
    ______f.line = 1058U;
#line 1058
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1058
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1058
    tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& l2->flag));
#line 1058
    ______r = tmp == 0;
#line 1058
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1058
    if (______r != 0) {
#line 1059
      skb_queue_purge(& l2->i_queue);
    } else {

    }
#line 1060
    ______f___0.func = "l2_st5_dm_release";
#line 1060
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1060
    ______f___0.line = 1060U;
#line 1060
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1060
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1060
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1060
    ______r___0 = tmp___1 != 0;
#line 1060
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1060
    if (______r___0 != 0) {
#line 1061
      tmp___0 = l2_newid(l2);
#line 1061
      l2down_create(l2, 513U, tmp___0, 0, 0);
    } else {

    }
#line 1063
    st5_dl_release_l2l3(l2);
#line 1064
    mISDN_FsmChangeState(fi, 3);
#line 1065
    ______f___1.func = "l2_st5_dm_release";
#line 1065
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1065
    ______f___1.line = 1065U;
#line 1065
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1065
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1065
    ______r___1 = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1065
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1065
    if (______r___1 != 0) {
#line 1066
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
#line 1068
  return;
}
}
#line 1071 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  u_char tmp ;

  {
#line 1073
  l2 = (struct layer2 *)fi->userdata;
#line 1074
  skb = (struct sk_buff *)arg;
#line 1076
  ______f___0.func = "l2_st6_dm_release";
#line 1076
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1076
  ______f___0.line = 1076U;
#line 1076
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1076
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1076
  tmp = get_PollFlagFree(l2, skb);
#line 1076
  ______r___0 = (unsigned int )tmp != 0U;
#line 1076
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1076
  if (______r___0 != 0) {
#line 1077
    stop_t200(l2, 8);
#line 1078
    lapb_dl_release_l2l3(l2, 20744);
#line 1079
    mISDN_FsmChangeState(fi, 3);
#line 1080
    ______f.func = "l2_st6_dm_release";
#line 1080
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1080
    ______f.line = 1080U;
#line 1080
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1080
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1080
    ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1080
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1080
    if (______r != 0) {
#line 1081
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
#line 1083
  return;
}
}
#line 1086 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void enquiry_cr(struct layer2 *l2 , u_char typ , u_char cr , u_char pf ) 
{ 
  struct sk_buff *skb ;
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___3 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___5 ;

  {
#line 1092
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
#line 1093
  ______f.func = "enquiry_cr";
#line 1093
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1093
  ______f.line = 1093U;
#line 1093
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1093
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1093
  tmp___3 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1093
  ______r = tmp___3 != 0;
#line 1093
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1093
  if (______r != 0) {
#line 1094
    tmp___0 = i;
#line 1094
    i = i + 1;
#line 1094
    tmp[tmp___0] = typ;
#line 1095
    tmp___1 = i;
#line 1095
    i = i + 1;
#line 1095
    tmp[tmp___1] = (unsigned int )((int )((u_char )l2->vr) << 1U) | ((unsigned int )pf != 0U ? 1U : 0U);
  } else {
#line 1097
    tmp___2 = i;
#line 1097
    i = i + 1;
#line 1097
    tmp[tmp___2] = (unsigned int )(((int )((u_char )l2->vr) << 5U) | (int )typ) | ((unsigned int )pf != 0U ? 16U : 0U);
  }
#line 1098
  skb = mI_alloc_skb___0((unsigned int )i, 32U);
#line 1099
  ______f___0.func = "enquiry_cr";
#line 1099
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1099
  ______f___0.line = 1099U;
#line 1099
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1099
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1099
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 1099
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1099
  if (______r___0 != 0) {
#line 1100
    printk("<4>isdnl2 can\'t alloc sbbuff for enquiry_cr\n");
#line 1102
    return;
  } else {

  }
#line 1104
  __len = (size_t )i;
#line 1104
  tmp___5 = skb_put(skb, (unsigned int )i);
#line 1104
  __ret = __builtin_memcpy((void *)tmp___5, (void const   *)(& tmp), __len);
#line 1105
  enqueue_super(l2, skb);
#line 1106
  return;
}
}
#line 1109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void enquiry_response(struct layer2 *l2 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 1111
  ______f.func = "enquiry_response";
#line 1111
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1111
  ______f.line = 1111U;
#line 1111
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1111
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1111
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1111
  ______r = tmp != 0;
#line 1111
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1111
  if (______r != 0) {
#line 1112
    enquiry_cr(l2, 5, 1, 1);
  } else {
#line 1114
    enquiry_cr(l2, 1, 1, 1);
  }
#line 1115
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1116
  return;
}
}
#line 1119 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void transmit_enquiry(struct layer2 *l2 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 1121
  ______f.func = "transmit_enquiry";
#line 1121
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1121
  ______f.line = 1121U;
#line 1121
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1121
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1121
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1121
  ______r = tmp != 0;
#line 1121
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1121
  if (______r != 0) {
#line 1122
    enquiry_cr(l2, 5, 0, 1);
  } else {
#line 1124
    enquiry_cr(l2, 1, 0, 1);
  }
#line 1125
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1126
  start_t200(l2, 9);
#line 1127
  return;
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void nrerrorrecovery(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;

  {
#line 1133
  l2 = (struct layer2 *)fi->userdata;
#line 1135
  l2mgr(l2, 7940U, 74);
#line 1136
  establishlink(fi);
#line 1137
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 1138
  return;
}
}
#line 1141 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void invoke_retransmission(struct layer2 *l2 , unsigned int nr ) 
{ 
  u_int p1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 1145
  ______f___1.func = "invoke_retransmission";
#line 1145
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1145
  ______f___1.line = 1145U;
#line 1145
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1145
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1145
  ______r___1 = l2->vs != nr;
#line 1145
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1145
  if (______r___1 != 0) {
#line 1146
    goto ldv_35672;
    ldv_35671: 
#line 1147
    l2->vs = l2->vs - (u_int )1;
#line 1148
    ______f.func = "invoke_retransmission";
#line 1148
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1148
    ______f.line = 1148U;
#line 1148
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1148
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1148
    tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1148
    ______r = tmp != 0;
#line 1148
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1148
    if (______r != 0) {
#line 1149
      l2->vs = l2->vs & 127U;
#line 1150
      p1 = (l2->vs - l2->va) & 127U;
    } else {
#line 1152
      l2->vs = l2->vs & 7U;
#line 1153
      p1 = (l2->vs - l2->va) & 7U;
    }
#line 1155
    p1 = (l2->sow + p1) % l2->window;
#line 1156
    ______f___0.func = "invoke_retransmission";
#line 1156
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1156
    ______f___0.line = 1156U;
#line 1156
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1156
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1156
    ______r___0 = (unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0);
#line 1156
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1156
    if (______r___0 != 0) {
#line 1157
      skb_queue_head(& l2->i_queue, l2->windowar[p1]);
    } else {
#line 1159
      printk("<4>%s: windowar[%d] is NULL\n", "invoke_retransmission", p1);
    }
#line 1162
    l2->windowar[p1] = 0;
    ldv_35672: ;
#line 1146
    if (l2->vs != nr) {
#line 1147
      goto ldv_35671;
    } else {

    }
#line 1164
    mISDN_FsmEvent(& l2->l2m, 9, 0);
  } else {

  }
#line 1166
  return;
}
}
#line 1169 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int typ ;
  unsigned int nr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  u_int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___1 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___2 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___3 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___4 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  __u32 tmp___5 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  unsigned int tmp___6 ;

  {
#line 1171
  l2 = (struct layer2 *)fi->userdata;
#line 1172
  skb = (struct sk_buff *)arg;
#line 1173
  typ = 1;
#line 1176
  rsp = (int )*(skb->data) & 2;
#line 1177
  ______f.func = "l2_st7_got_super";
#line 1177
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1177
  ______f.line = 1177U;
#line 1177
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1177
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1177
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1177
  ______r = tmp != 0;
#line 1177
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1177
  if (______r != 0) {
#line 1178
    rsp = rsp == 0;
  } else {

  }
#line 1180
  tmp___0 = l2addrsize(l2);
#line 1180
  skb_pull(skb, tmp___0);
#line 1181
  ______f___0.func = "l2_st7_got_super";
#line 1181
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1181
  ______f___0.line = 1181U;
#line 1181
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1181
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1181
  tmp___1 = IsRNR(skb->data, l2);
#line 1181
  ______r___0 = tmp___1 != 0;
#line 1181
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1181
  if (______r___0 != 0) {
#line 1182
    set_peer_busy(l2);
#line 1183
    typ = 5;
  } else {
#line 1185
    clear_peer_busy(l2);
  }
#line 1186
  ______f___1.func = "l2_st7_got_super";
#line 1186
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1186
  ______f___1.line = 1186U;
#line 1186
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1186
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1186
  tmp___2 = IsREJ(skb->data, l2);
#line 1186
  ______r___1 = tmp___2 != 0;
#line 1186
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1186
  if (______r___1 != 0) {
#line 1187
    typ = 9;
  } else {

  }
#line 1189
  ______f___2.func = "l2_st7_got_super";
#line 1189
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1189
  ______f___2.line = 1189U;
#line 1189
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1189
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1189
  tmp___3 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1189
  ______r___2 = tmp___3 != 0;
#line 1189
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1189
  if (______r___2 != 0) {
#line 1190
    PollFlag = (int )*(skb->data + 1UL) & 1;
#line 1191
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
#line 1193
    PollFlag = (int )*(skb->data) & 16;
#line 1194
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
#line 1196
  consume_skb(skb);
#line 1198
  ______f___4.func = "l2_st7_got_super";
#line 1198
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1198
  ______f___4.line = 1198U;
#line 1198
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1198
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1198
  ______r___4 = PollFlag != 0;
#line 1198
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1198
  if (______r___4 != 0) {
#line 1199
    ______f___3.func = "l2_st7_got_super";
#line 1199
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1199
    ______f___3.line = 1199U;
#line 1199
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1199
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1199
    ______r___3 = rsp != 0;
#line 1199
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1199
    if (______r___3 != 0) {
#line 1200
      l2mgr(l2, 7940U, 65);
    } else {
#line 1202
      enquiry_response(l2);
    }
  } else {

  }
#line 1204
  ______f___11.func = "l2_st7_got_super";
#line 1204
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1204
  ______f___11.line = 1204U;
#line 1204
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1204
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1204
  tmp___6 = legalnr(l2, nr);
#line 1204
  ______r___11 = tmp___6 != 0U;
#line 1204
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1204
  if (______r___11 != 0) {
#line 1205
    ______f___9.func = "l2_st7_got_super";
#line 1205
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1205
    ______f___9.line = 1205U;
#line 1205
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1205
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1205
    ______r___9 = typ == 9;
#line 1205
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1205
    if (______r___9 != 0) {
#line 1206
      setva(l2, nr);
#line 1207
      invoke_retransmission(l2, nr);
#line 1208
      stop_t200(l2, 10);
#line 1209
      ______f___5.func = "l2_st7_got_super";
#line 1209
      ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1209
      ______f___5.line = 1210U;
#line 1209
      ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1209
      ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1209
      tmp___4 = mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 6);
#line 1209
      ______r___5 = tmp___4 != 0;
#line 1209
      ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1209
      if (______r___5 != 0) {
#line 1211
        l2m_debug(& l2->l2m, (char *)"Restart T203 ST7 REJ");
      } else {

      }
    } else {
#line 1212
      ______f___8.func = "l2_st7_got_super";
#line 1212
      ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1212
      ______f___8.line = 1212U;
#line 1212
      ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1212
      ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1212
      ______r___8 = l2->vs == nr && typ == 1;
#line 1212
      ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1212
      if (______r___8 != 0) {
#line 1213
        setva(l2, nr);
#line 1214
        stop_t200(l2, 11);
#line 1215
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
      } else {
#line 1217
        ______f___7.func = "l2_st7_got_super";
#line 1217
        ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1217
        ______f___7.line = 1217U;
#line 1217
        ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1217
        ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1217
        ______r___7 = l2->va != nr || typ == 5;
#line 1217
        ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1217
        if (______r___7 != 0) {
#line 1218
          setva(l2, nr);
#line 1219
          ______f___6.func = "l2_st7_got_super";
#line 1219
          ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1219
          ______f___6.line = 1219U;
#line 1219
          ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1219
          ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1219
          ______r___6 = typ != 1;
#line 1219
          ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1219
          if (______r___6 != 0) {
#line 1220
            mISDN_FsmDelTimer(& l2->t203, 9);
          } else {

          }
#line 1221
          restart_t200(l2, 12);
        } else {

        }
      }
    }
#line 1223
    ______f___10.func = "l2_st7_got_super";
#line 1223
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1223
    ______f___10.line = 1223U;
#line 1223
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1223
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1223
    tmp___5 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1223
    ______r___10 = tmp___5 != 0U && typ == 1;
#line 1223
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1223
    if (______r___10 != 0) {
#line 1224
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {
#line 1226
    nrerrorrecovery(fi);
  }
#line 1227
  return;
}
}
#line 1230 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_i_if_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 1232
  l2 = (struct layer2 *)fi->userdata;
#line 1233
  skb = (struct sk_buff *)arg;
#line 1235
  ______f.func = "l2_feed_i_if_reest";
#line 1235
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1235
  ______f.line = 1235U;
#line 1235
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1235
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1235
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& l2->flag));
#line 1235
  ______r = tmp == 0;
#line 1235
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1235
  if (______r != 0) {
#line 1236
    skb_queue_tail(& l2->i_queue, skb);
  } else {
#line 1238
    consume_skb(skb);
  }
#line 1239
  return;
}
}
#line 1242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_i_pull(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1244
  l2 = (struct layer2 *)fi->userdata;
#line 1245
  skb = (struct sk_buff *)arg;
#line 1247
  skb_queue_tail(& l2->i_queue, skb);
#line 1248
  mISDN_FsmEvent(fi, 9, 0);
#line 1249
  return;
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1254
  l2 = (struct layer2 *)fi->userdata;
#line 1255
  skb = (struct sk_buff *)arg;
#line 1257
  skb_queue_tail(& l2->i_queue, skb);
#line 1258
  return;
}
}
#line 1261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_iframe(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int i ;
  u_int ns ;
  u_int nr ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  u_int tmp___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___3 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___4 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int tmp___5 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  unsigned int tmp___6 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  __u32 tmp___7 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int tmp___8 ;

  {
#line 1263
  l2 = (struct layer2 *)fi->userdata;
#line 1264
  skb = (struct sk_buff *)arg;
#line 1268
  tmp = l2addrsize(l2);
#line 1268
  i = (int )tmp;
#line 1269
  ______f.func = "l2_got_iframe";
#line 1269
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1269
  ______f.line = 1269U;
#line 1269
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1269
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1269
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1269
  ______r = tmp___0 != 0;
#line 1269
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1269
  if (______r != 0) {
#line 1270
    PollFlag = (int )*(skb->data + ((unsigned long )i + 1UL)) & 1;
#line 1271
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1);
#line 1272
    nr = (u_int )((int )*(skb->data + ((unsigned long )i + 1UL)) >> 1) & 127U;
  } else {
#line 1274
    PollFlag = (int )*(skb->data + (unsigned long )i) & 16;
#line 1275
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1) & 7U;
#line 1276
    nr = (u_int )((int )*(skb->data + (unsigned long )i) >> 5) & 7U;
  }
#line 1278
  ______f___6.func = "l2_got_iframe";
#line 1278
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1278
  ______f___6.line = 1278U;
#line 1278
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1278
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1278
  tmp___4 = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1278
  ______r___6 = tmp___4 != 0;
#line 1278
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1278
  if (______r___6 != 0) {
#line 1279
    consume_skb(skb);
#line 1280
    ______f___0.func = "l2_got_iframe";
#line 1280
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1280
    ______f___0.line = 1280U;
#line 1280
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1280
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1280
    ______r___0 = PollFlag != 0;
#line 1280
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1280
    if (______r___0 != 0) {
#line 1281
      enquiry_response(l2);
    } else {

    }
  } else {
#line 1283
    ______f___5.func = "l2_got_iframe";
#line 1283
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1283
    ______f___5.line = 1283U;
#line 1283
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1283
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1283
    ______r___5 = l2->vr == ns;
#line 1283
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1283
    if (______r___5 != 0) {
#line 1284
      l2->vr = l2->vr + (u_int )1;
#line 1285
      ______f___1.func = "l2_got_iframe";
#line 1285
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1285
      ______f___1.line = 1285U;
#line 1285
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1285
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1285
      tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1285
      ______r___1 = tmp___1 != 0;
#line 1285
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1285
      if (______r___1 != 0) {
#line 1286
        l2->vr = l2->vr & 127U;
      } else {
#line 1288
        l2->vr = l2->vr & 7U;
      }
#line 1289
      test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 1290
      ______f___2.func = "l2_got_iframe";
#line 1290
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1290
      ______f___2.line = 1290U;
#line 1290
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1290
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1290
      ______r___2 = PollFlag != 0;
#line 1290
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1290
      if (______r___2 != 0) {
#line 1291
        enquiry_response(l2);
      } else {
#line 1293
        test_and_set_bit(7, (unsigned long volatile   *)(& l2->flag));
      }
#line 1294
      tmp___2 = l2headersize(l2, 0);
#line 1294
      skb_pull(skb, tmp___2);
#line 1295
      l2up(l2, 12296U, skb);
    } else {
#line 1298
      consume_skb(skb);
#line 1299
      ______f___4.func = "l2_got_iframe";
#line 1299
      ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1299
      ______f___4.line = 1299U;
#line 1299
      ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1299
      ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1299
      tmp___3 = test_and_set_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 1299
      ______r___4 = tmp___3 != 0;
#line 1299
      ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1299
      if (______r___4 != 0) {
#line 1300
        ______f___3.func = "l2_got_iframe";
#line 1300
        ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1300
        ______f___3.line = 1300U;
#line 1300
        ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1300
        ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1300
        ______r___3 = PollFlag != 0;
#line 1300
        ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1300
        if (______r___3 != 0) {
#line 1301
          enquiry_response(l2);
        } else {
#line 1303
          enquiry_cr(l2, 9, 1, (int )((u_char )PollFlag));
#line 1304
          test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
        }
      } else {

      }
    }
  }
#line 1308
  ______f___10.func = "l2_got_iframe";
#line 1308
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1308
  ______f___10.line = 1308U;
#line 1308
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1308
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1308
  tmp___6 = legalnr(l2, nr);
#line 1308
  ______r___10 = tmp___6 != 0U;
#line 1308
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1308
  if (______r___10 != 0) {
#line 1309
    ______f___9.func = "l2_got_iframe";
#line 1309
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1309
    ______f___9.line = 1310U;
#line 1309
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1309
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1309
    tmp___5 = constant_test_bit(10U, (unsigned long const volatile   *)(& l2->flag));
#line 1309
    ______r___9 = tmp___5 == 0 && fi->state == 6;
#line 1309
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1309
    if (______r___9 != 0) {
#line 1311
      ______f___8.func = "l2_got_iframe";
#line 1311
      ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1311
      ______f___8.line = 1311U;
#line 1311
      ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1311
      ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1311
      ______r___8 = l2->vs == nr;
#line 1311
      ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1311
      if (______r___8 != 0) {
#line 1312
        stop_t200(l2, 13);
#line 1313
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
      } else {
#line 1315
        ______f___7.func = "l2_got_iframe";
#line 1315
        ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1315
        ______f___7.line = 1315U;
#line 1315
        ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1315
        ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1315
        ______r___7 = l2->va != nr;
#line 1315
        ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1315
        if (______r___7 != 0) {
#line 1316
          restart_t200(l2, 14);
        } else {

        }
      }
    } else {

    }
#line 1318
    setva(l2, nr);
  } else {
#line 1320
    nrerrorrecovery(fi);
#line 1321
    return;
  }
#line 1323
  ______f___11.func = "l2_got_iframe";
#line 1323
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1323
  ______f___11.line = 1323U;
#line 1323
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1323
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1323
  tmp___7 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1323
  ______r___11 = tmp___7 != 0U && fi->state == 6;
#line 1323
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1323
  if (______r___11 != 0) {
#line 1324
    mISDN_FsmEvent(fi, 9, 0);
  } else {

  }
#line 1325
  ______f___12.func = "l2_got_iframe";
#line 1325
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1325
  ______f___12.line = 1325U;
#line 1325
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1325
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1325
  tmp___8 = test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1325
  ______r___12 = tmp___8 != 0;
#line 1325
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1325
  if (______r___12 != 0) {
#line 1326
    enquiry_cr(l2, 1, 1, 0);
  } else {

  }
#line 1327
  return;
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_tei(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int info ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  __u32 tmp ;

  {
#line 1332
  l2 = (struct layer2 *)fi->userdata;
#line 1335
  l2->tei = (signed char )((long )arg);
#line 1336
  set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
#line 1337
  info = 1U;
#line 1338
  l2up_create(l2, 8U, 4, (void *)(& info));
#line 1339
  ______f.func = "l2_got_tei";
#line 1339
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1339
  ______f.line = 1339U;
#line 1339
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1339
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1339
  ______r = fi->state == 2;
#line 1339
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1339
  if (______r != 0) {
#line 1340
    establishlink(fi);
#line 1341
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 1343
    mISDN_FsmChangeState(fi, 3);
  }
#line 1344
  ______f___0.func = "l2_got_tei";
#line 1344
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1344
  ______f___0.line = 1344U;
#line 1344
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1344
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1344
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
#line 1344
  ______r___0 = tmp != 0U;
#line 1344
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1344
  if (______r___0 != 0) {
#line 1345
    tx_ui(l2);
  } else {

  }
#line 1346
  return;
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___1 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1351
  l2 = (struct layer2 *)fi->userdata;
#line 1353
  ______f___2.func = "l2_st5_tout_200";
#line 1353
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1353
  ______f___2.line = 1354U;
#line 1353
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1353
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1353
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1353
  if (tmp___2 != 0) {
#line 1353
    tmp___3 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1353
    if (tmp___3 != 0) {
#line 1353
      tmp___4 = 1;
    } else {
#line 1353
      tmp___4 = 0;
    }
  } else {
#line 1353
    tmp___4 = 0;
  }
#line 1353
  ______r___2 = tmp___4;
#line 1353
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1353
  if (______r___2 != 0) {
#line 1355
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
  } else {
#line 1356
    ______f___1.func = "l2_st5_tout_200";
#line 1356
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1356
    ______f___1.line = 1356U;
#line 1356
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1356
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1356
    ______r___1 = l2->rc == l2->N200;
#line 1356
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1356
    if (______r___1 != 0) {
#line 1357
      mISDN_FsmChangeState(fi, 3);
#line 1358
      test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1359
      skb_queue_purge(& l2->i_queue);
#line 1360
      l2mgr(l2, 7940U, 71);
#line 1361
      ______f.func = "l2_st5_tout_200";
#line 1361
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1361
      ______f.line = 1361U;
#line 1361
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 1361
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1361
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1361
      ______r = tmp___0 != 0;
#line 1361
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1361
      if (______r != 0) {
#line 1362
        tmp = l2_newid(l2);
#line 1362
        l2down_create(l2, 513U, tmp, 0, 0);
      } else {

      }
#line 1364
      st5_dl_release_l2l3(l2);
#line 1365
      ______f___0.func = "l2_st5_tout_200";
#line 1365
      ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1365
      ______f___0.line = 1365U;
#line 1365
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1365
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1365
      ______r___0 = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1365
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1365
      if (______r___0 != 0) {
#line 1366
        l2_tei(l2, 7428U, 0UL);
      } else {

      }
    } else {
#line 1368
      l2->rc = l2->rc + 1;
#line 1369
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1370
      tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1370
      send_uframe(l2, 0, tmp___1 != 0 ? 127 : 63, 0);
    }
  }
#line 1372
  return;
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1378
  l2 = (struct layer2 *)fi->userdata;
#line 1380
  ______f___1.func = "l2_st6_tout_200";
#line 1380
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1380
  ______f___1.line = 1381U;
#line 1380
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1380
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1380
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1380
  if (tmp != 0) {
#line 1380
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1380
    if (tmp___0 != 0) {
#line 1380
      tmp___1 = 1;
    } else {
#line 1380
      tmp___1 = 0;
    }
  } else {
#line 1380
    tmp___1 = 0;
  }
#line 1380
  ______r___1 = tmp___1;
#line 1380
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1380
  if (______r___1 != 0) {
#line 1382
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
  } else {
#line 1383
    ______f___0.func = "l2_st6_tout_200";
#line 1383
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1383
    ______f___0.line = 1383U;
#line 1383
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1383
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1383
    ______r___0 = l2->rc == l2->N200;
#line 1383
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1383
    if (______r___0 != 0) {
#line 1384
      mISDN_FsmChangeState(fi, 3);
#line 1385
      test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1386
      l2mgr(l2, 7940U, 72);
#line 1387
      lapb_dl_release_l2l3(l2, 20744);
#line 1388
      ______f.func = "l2_st6_tout_200";
#line 1388
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1388
      ______f.line = 1388U;
#line 1388
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 1388
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1388
      ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1388
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1388
      if (______r != 0) {
#line 1389
        l2_tei(l2, 7428U, 0UL);
      } else {

      }
    } else {
#line 1391
      l2->rc = l2->rc + 1;
#line 1392
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1394
      send_uframe(l2, 0, 83, 0);
    }
  }
#line 1396
  return;
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1401
  l2 = (struct layer2 *)fi->userdata;
#line 1403
  ______f.func = "l2_st7_tout_200";
#line 1403
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1403
  ______f.line = 1404U;
#line 1403
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1403
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1403
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1403
  if (tmp != 0) {
#line 1403
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1403
    if (tmp___0 != 0) {
#line 1403
      tmp___1 = 1;
    } else {
#line 1403
      tmp___1 = 0;
    }
  } else {
#line 1403
    tmp___1 = 0;
  }
#line 1403
  ______r = tmp___1;
#line 1403
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1403
  if (______r != 0) {
#line 1405
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1406
    return;
  } else {

  }
#line 1408
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1409
  l2->rc = 0;
#line 1410
  mISDN_FsmChangeState(fi, 7);
#line 1411
  transmit_enquiry(l2);
#line 1412
  l2->rc = l2->rc + 1;
#line 1413
  return;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1418
  l2 = (struct layer2 *)fi->userdata;
#line 1420
  ______f.func = "l2_st8_tout_200";
#line 1420
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1420
  ______f.line = 1421U;
#line 1420
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1420
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1420
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1420
  if (tmp != 0) {
#line 1420
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1420
    if (tmp___0 != 0) {
#line 1420
      tmp___1 = 1;
    } else {
#line 1420
      tmp___1 = 0;
    }
  } else {
#line 1420
    tmp___1 = 0;
  }
#line 1420
  ______r = tmp___1;
#line 1420
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1420
  if (______r != 0) {
#line 1422
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1423
    return;
  } else {

  }
#line 1425
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1426
  ______f___0.func = "l2_st8_tout_200";
#line 1426
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1426
  ______f___0.line = 1426U;
#line 1426
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1426
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1426
  ______r___0 = l2->rc == l2->N200;
#line 1426
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1426
  if (______r___0 != 0) {
#line 1427
    l2mgr(l2, 7940U, 73);
#line 1428
    establishlink(fi);
#line 1429
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 1431
    transmit_enquiry(l2);
#line 1432
    l2->rc = l2->rc + 1;
  }
#line 1434
  return;
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_tout_203(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1439
  l2 = (struct layer2 *)fi->userdata;
#line 1441
  ______f.func = "l2_st7_tout_203";
#line 1441
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1441
  ______f.line = 1442U;
#line 1441
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1441
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1441
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1441
  if (tmp != 0) {
#line 1441
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1441
    if (tmp___0 != 0) {
#line 1441
      tmp___1 = 1;
    } else {
#line 1441
      tmp___1 = 0;
    }
  } else {
#line 1441
    tmp___1 = 0;
  }
#line 1441
  ______r = tmp___1;
#line 1441
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1441
  if (______r != 0) {
#line 1443
    mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 9);
#line 1444
    return;
  } else {

  }
#line 1446
  mISDN_FsmChangeState(fi, 7);
#line 1447
  transmit_enquiry(l2);
#line 1448
  l2->rc = 0;
#line 1449
  return;
}
}
#line 1452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_pull_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  struct sk_buff *nskb ;
  struct sk_buff *oskb ;
  u_char header[4U] ;
  u_int i ;
  u_int p1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___0 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;
  u_int tmp___2 ;
  u_int tmp___3 ;
  u_int tmp___4 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___5 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___7 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  unsigned char *tmp___9 ;
  size_t __len___1 ;
  void *__ret___1 ;
  unsigned char *tmp___11 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  u_int tmp___12 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___13 ;

  {
#line 1454
  l2 = (struct layer2 *)fi->userdata;
#line 1459
  ______f.func = "l2_pull_iqueue";
#line 1459
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1459
  ______f.line = 1459U;
#line 1459
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1459
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1459
  tmp = cansend(l2);
#line 1459
  ______r = tmp == 0U;
#line 1459
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1459
  if (______r != 0) {
#line 1460
    return;
  } else {

  }
#line 1462
  skb = skb_dequeue(& l2->i_queue);
#line 1463
  ______f___0.func = "l2_pull_iqueue";
#line 1463
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1463
  ______f___0.line = 1463U;
#line 1463
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1463
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1463
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 1463
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1463
  if (______r___0 != 0) {
#line 1464
    return;
  } else {

  }
#line 1466
  ______f___1.func = "l2_pull_iqueue";
#line 1466
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1466
  ______f___1.line = 1466U;
#line 1466
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1466
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1466
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1466
  ______r___1 = tmp___0 != 0;
#line 1466
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1466
  if (______r___1 != 0) {
#line 1467
    p1 = (l2->vs - l2->va) & 127U;
  } else {
#line 1469
    p1 = (l2->vs - l2->va) & 7U;
  }
#line 1470
  p1 = (l2->sow + p1) % l2->window;
#line 1471
  ______f___2.func = "l2_pull_iqueue";
#line 1471
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1471
  ______f___2.line = 1471U;
#line 1471
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1471
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1471
  ______r___2 = (unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0);
#line 1471
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1471
  if (______r___2 != 0) {
#line 1472
    printk("<4>isdnl2 try overwrite ack queue entry %d\n", p1);
#line 1474
    consume_skb(l2->windowar[p1]);
  } else {

  }
#line 1476
  l2->windowar[p1] = skb;
#line 1477
  tmp___1 = sethdraddr(l2, (u_char *)(& header), 0);
#line 1477
  i = (u_int )tmp___1;
#line 1478
  ______f___3.func = "l2_pull_iqueue";
#line 1478
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1478
  ______f___3.line = 1478U;
#line 1478
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1478
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1478
  tmp___5 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1478
  ______r___3 = tmp___5 != 0;
#line 1478
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1478
  if (______r___3 != 0) {
#line 1479
    tmp___2 = i;
#line 1479
    i = i + (u_int )1;
#line 1479
    header[tmp___2] = (int )((u_char )l2->vs) << 1U;
#line 1480
    tmp___3 = i;
#line 1480
    i = i + (u_int )1;
#line 1480
    header[tmp___3] = (int )((u_char )l2->vr) << 1U;
#line 1481
    l2->vs = (l2->vs + 1U) & 127U;
  } else {
#line 1483
    tmp___4 = i;
#line 1483
    i = i + (u_int )1;
#line 1483
    header[tmp___4] = ((int )((u_char )l2->vr) << 5U) | ((int )((u_char )l2->vs) << 1U);
#line 1484
    l2->vs = (l2->vs + 1U) & 7U;
  }
#line 1487
  nskb = ldv_skb_clone_178(skb, 32U);
#line 1488
  p1 = skb_headroom((struct sk_buff  const  *)nskb);
#line 1489
  ______f___5.func = "l2_pull_iqueue";
#line 1489
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1489
  ______f___5.line = 1489U;
#line 1489
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1489
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1489
  ______r___5 = p1 >= i;
#line 1489
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1489
  if (______r___5 != 0) {
#line 1490
    __len = (size_t )i;
#line 1490
    tmp___7 = skb_push(nskb, i);
#line 1490
    __ret = __builtin_memcpy((void *)tmp___7, (void const   *)(& header), __len);
  } else {
#line 1492
    printk("<4>isdnl2 pull_iqueue skb header(%d/%d) too short\n", i, p1);
#line 1494
    oskb = nskb;
#line 1495
    nskb = mI_alloc_skb___0(oskb->len + i, 32U);
#line 1496
    ______f___4.func = "l2_pull_iqueue";
#line 1496
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1496
    ______f___4.line = 1496U;
#line 1496
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1496
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1496
    ______r___4 = (unsigned long )nskb == (unsigned long )((struct sk_buff *)0);
#line 1496
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1496
    if (______r___4 != 0) {
#line 1497
      consume_skb(oskb);
#line 1498
      printk("<4>%s: no skb mem\n", "l2_pull_iqueue");
#line 1499
      return;
    } else {

    }
#line 1501
    __len___0 = (size_t )i;
#line 1501
    tmp___9 = skb_put(nskb, i);
#line 1501
    __ret___0 = __builtin_memcpy((void *)tmp___9, (void const   *)(& header), __len___0);
#line 1502
    __len___1 = (size_t )oskb->len;
#line 1502
    tmp___11 = skb_put(nskb, oskb->len);
#line 1502
    __ret___1 = __builtin_memcpy((void *)tmp___11, (void const   *)oskb->data, __len___1);
#line 1503
    consume_skb(oskb);
  }
#line 1505
  tmp___12 = l2_newid(l2);
#line 1505
  l2down(l2, 8193U, tmp___12, nskb);
#line 1506
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1507
  ______f___6.func = "l2_pull_iqueue";
#line 1507
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1507
  ______f___6.line = 1507U;
#line 1507
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1507
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1507
  tmp___13 = test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1507
  ______r___6 = tmp___13 == 0;
#line 1507
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1507
  if (______r___6 != 0) {
#line 1508
    mISDN_FsmDelTimer(& l2->t203, 13);
#line 1509
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 11);
  } else {

  }
#line 1511
  return;
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int rnr ;
  unsigned int nr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  u_int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___1 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___2 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  unsigned int tmp___6 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  unsigned int tmp___7 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;

  {
#line 1516
  l2 = (struct layer2 *)fi->userdata;
#line 1517
  skb = (struct sk_buff *)arg;
#line 1518
  rnr = 0;
#line 1521
  rsp = (int )*(skb->data) & 2;
#line 1522
  ______f.func = "l2_st8_got_super";
#line 1522
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1522
  ______f.line = 1522U;
#line 1522
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1522
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1522
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1522
  ______r = tmp != 0;
#line 1522
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1522
  if (______r != 0) {
#line 1523
    rsp = rsp == 0;
  } else {

  }
#line 1525
  tmp___0 = l2addrsize(l2);
#line 1525
  skb_pull(skb, tmp___0);
#line 1527
  ______f___0.func = "l2_st8_got_super";
#line 1527
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1527
  ______f___0.line = 1527U;
#line 1527
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1527
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1527
  tmp___1 = IsRNR(skb->data, l2);
#line 1527
  ______r___0 = tmp___1 != 0;
#line 1527
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1527
  if (______r___0 != 0) {
#line 1528
    set_peer_busy(l2);
#line 1529
    rnr = 1;
  } else {
#line 1531
    clear_peer_busy(l2);
  }
#line 1533
  ______f___1.func = "l2_st8_got_super";
#line 1533
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1533
  ______f___1.line = 1533U;
#line 1533
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1533
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1533
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1533
  ______r___1 = tmp___2 != 0;
#line 1533
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1533
  if (______r___1 != 0) {
#line 1534
    PollFlag = (int )*(skb->data + 1UL) & 1;
#line 1535
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
#line 1537
    PollFlag = (int )*(skb->data) & 16;
#line 1538
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
#line 1540
  consume_skb(skb);
#line 1541
  ______f___7.func = "l2_st8_got_super";
#line 1541
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1541
  ______f___7.line = 1541U;
#line 1541
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1541
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1541
  ______r___7 = rsp != 0 && PollFlag != 0;
#line 1541
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1541
  if (______r___7 != 0) {
#line 1542
    ______f___4.func = "l2_st8_got_super";
#line 1542
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1542
    ______f___4.line = 1542U;
#line 1542
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1542
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1542
    tmp___6 = legalnr(l2, nr);
#line 1542
    ______r___4 = tmp___6 != 0U;
#line 1542
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1542
    if (______r___4 != 0) {
#line 1543
      ______f___2.func = "l2_st8_got_super";
#line 1543
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1543
      ______f___2.line = 1543U;
#line 1543
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1543
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1543
      ______r___2 = rnr != 0;
#line 1543
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1543
      if (______r___2 != 0) {
#line 1544
        restart_t200(l2, 15);
      } else {
#line 1546
        stop_t200(l2, 16);
#line 1547
        mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 5);
#line 1549
        setva(l2, nr);
      }
#line 1551
      invoke_retransmission(l2, nr);
#line 1552
      mISDN_FsmChangeState(fi, 6);
#line 1553
      ______f___3.func = "l2_st8_got_super";
#line 1553
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1553
      ______f___3.line = 1553U;
#line 1553
      ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1553
      ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1553
      tmp___3 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1553
      if (tmp___3 != 0U) {
#line 1553
        tmp___4 = cansend(l2);
#line 1553
        if (tmp___4 != 0U) {
#line 1553
          tmp___5 = 1;
        } else {
#line 1553
          tmp___5 = 0;
        }
      } else {
#line 1553
        tmp___5 = 0;
      }
#line 1553
      ______r___3 = tmp___5;
#line 1553
      ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1553
      if (______r___3 != 0) {
#line 1554
        mISDN_FsmEvent(fi, 9, 0);
      } else {

      }
    } else {
#line 1556
      nrerrorrecovery(fi);
    }
  } else {
#line 1558
    ______f___5.func = "l2_st8_got_super";
#line 1558
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1558
    ______f___5.line = 1558U;
#line 1558
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1558
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1558
    ______r___5 = rsp == 0 && PollFlag != 0;
#line 1558
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1558
    if (______r___5 != 0) {
#line 1559
      enquiry_response(l2);
    } else {

    }
#line 1560
    ______f___6.func = "l2_st8_got_super";
#line 1560
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1560
    ______f___6.line = 1560U;
#line 1560
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1560
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1560
    tmp___7 = legalnr(l2, nr);
#line 1560
    ______r___6 = tmp___7 != 0U;
#line 1560
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1560
    if (______r___6 != 0) {
#line 1561
      setva(l2, nr);
    } else {
#line 1563
      nrerrorrecovery(fi);
    }
  }
#line 1565
  return;
}
}
#line 1568 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_FRMR(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1570
  l2 = (struct layer2 *)fi->userdata;
#line 1571
  skb = (struct sk_buff *)arg;
#line 1573
  tmp = l2addrsize(l2);
#line 1573
  skb_pull(skb, tmp + 1U);
#line 1575
  ______f.func = "l2_got_FRMR";
#line 1575
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1575
  ______f.line = 1576U;
#line 1575
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1575
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1575
  if (((int )*(skb->data) & 1) == 0 || ((int )*(skb->data) & 3) == 1) {
#line 1575
    tmp___1 = 1;
  } else {
#line 1575
    tmp___0 = IsUA(skb->data);
#line 1575
    if (tmp___0 != 0 && fi->state == 6) {
#line 1575
      tmp___1 = 1;
    } else {
#line 1575
      tmp___1 = 0;
    }
  }
#line 1575
  ______r = tmp___1;
#line 1575
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1575
  if (______r != 0) {
#line 1577
    l2mgr(l2, 7940U, 75);
#line 1578
    establishlink(fi);
#line 1579
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1581
  consume_skb(skb);
#line 1582
  return;
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st24_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1587
  l2 = (struct layer2 *)fi->userdata;
#line 1589
  skb_queue_purge(& l2->ui_queue);
#line 1590
  l2->tei = 127;
#line 1591
  mISDN_FsmChangeState(fi, 0);
#line 1592
  return;
}
}
#line 1595 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st3_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1597
  l2 = (struct layer2 *)fi->userdata;
#line 1599
  skb_queue_purge(& l2->ui_queue);
#line 1600
  l2->tei = 127;
#line 1601
  l2up_create(l2, 4360U, 0, 0);
#line 1602
  mISDN_FsmChangeState(fi, 0);
#line 1603
  return;
}
}
#line 1606 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1608
  l2 = (struct layer2 *)fi->userdata;
#line 1610
  skb_queue_purge(& l2->i_queue);
#line 1611
  skb_queue_purge(& l2->ui_queue);
#line 1612
  freewin(l2);
#line 1613
  l2->tei = 127;
#line 1614
  stop_t200(l2, 17);
#line 1615
  st5_dl_release_l2l3(l2);
#line 1616
  mISDN_FsmChangeState(fi, 0);
#line 1617
  return;
}
}
#line 1620 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1622
  l2 = (struct layer2 *)fi->userdata;
#line 1624
  skb_queue_purge(& l2->ui_queue);
#line 1625
  l2->tei = 127;
#line 1626
  stop_t200(l2, 18);
#line 1627
  l2up_create(l2, 4360U, 0, 0);
#line 1628
  mISDN_FsmChangeState(fi, 0);
#line 1629
  return;
}
}
#line 1632 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1634
  l2 = (struct layer2 *)fi->userdata;
#line 1636
  skb_queue_purge(& l2->i_queue);
#line 1637
  skb_queue_purge(& l2->ui_queue);
#line 1638
  freewin(l2);
#line 1639
  l2->tei = 127;
#line 1640
  stop_t200(l2, 17);
#line 1641
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1642
  l2up_create(l2, 4360U, 0, 0);
#line 1647
  mISDN_FsmChangeState(fi, 0);
#line 1648
  return;
}
}
#line 1651 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st14_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 1653
  l2 = (struct layer2 *)fi->userdata;
#line 1654
  skb = (struct sk_buff *)arg;
#line 1656
  skb_queue_purge(& l2->i_queue);
#line 1657
  skb_queue_purge(& l2->ui_queue);
#line 1658
  ______f.func = "l2_st14_persistant_da";
#line 1658
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1658
  ______f.line = 1658U;
#line 1658
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1658
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1658
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
#line 1658
  ______r = tmp != 0;
#line 1658
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1658
  if (______r != 0) {
#line 1659
    l2up(l2, 4360U, skb);
  } else {
#line 1661
    consume_skb(skb);
  }
#line 1662
  return;
}
}
#line 1665 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 1667
  l2 = (struct layer2 *)fi->userdata;
#line 1668
  skb = (struct sk_buff *)arg;
#line 1670
  skb_queue_purge(& l2->i_queue);
#line 1671
  skb_queue_purge(& l2->ui_queue);
#line 1672
  freewin(l2);
#line 1673
  stop_t200(l2, 19);
#line 1674
  st5_dl_release_l2l3(l2);
#line 1675
  mISDN_FsmChangeState(fi, 3);
#line 1676
  ______f.func = "l2_st5_persistant_da";
#line 1676
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1676
  ______f.line = 1676U;
#line 1676
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1676
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1676
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1676
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1676
  if (______r != 0) {
#line 1677
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1678
  consume_skb(skb);
#line 1679
  return;
}
}
#line 1682 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 1684
  l2 = (struct layer2 *)fi->userdata;
#line 1685
  skb = (struct sk_buff *)arg;
#line 1687
  skb_queue_purge(& l2->ui_queue);
#line 1688
  stop_t200(l2, 20);
#line 1689
  l2up(l2, 20744U, skb);
#line 1690
  mISDN_FsmChangeState(fi, 3);
#line 1691
  ______f.func = "l2_st6_persistant_da";
#line 1691
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1691
  ______f.line = 1691U;
#line 1691
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1691
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1691
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1691
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1691
  if (______r != 0) {
#line 1692
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1693
  return;
}
}
#line 1696 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 1698
  l2 = (struct layer2 *)fi->userdata;
#line 1699
  skb = (struct sk_buff *)arg;
#line 1701
  skb_queue_purge(& l2->i_queue);
#line 1702
  skb_queue_purge(& l2->ui_queue);
#line 1703
  freewin(l2);
#line 1704
  stop_t200(l2, 19);
#line 1705
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1706
  l2up(l2, 4360U, skb);
#line 1707
  mISDN_FsmChangeState(fi, 3);
#line 1708
  ______f.func = "l2_persistant_da";
#line 1708
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1708
  ______f.line = 1708U;
#line 1708
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1708
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1708
  ______r = (unsigned long )l2->tm != (unsigned long )((struct teimgr *)0);
#line 1708
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1708
  if (______r != 0) {
#line 1709
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1710
  return;
}
}
#line 1713 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_set_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1715
  l2 = (struct layer2 *)fi->userdata;
#line 1716
  skb = (struct sk_buff *)arg;
#line 1718
  ______f.func = "l2_set_own_busy";
#line 1718
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1718
  ______f.line = 1718U;
#line 1718
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1718
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1718
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 1718
  ______r = tmp == 0;
#line 1718
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1718
  if (______r != 0) {
#line 1719
    enquiry_cr(l2, 5, 1, 0);
#line 1720
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1722
  ______f___0.func = "l2_set_own_busy";
#line 1722
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1722
  ______f___0.line = 1722U;
#line 1722
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1722
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1722
  ______r___0 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 1722
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1722
  if (______r___0 != 0) {
#line 1723
    consume_skb(skb);
  } else {

  }
#line 1724
  return;
}
}
#line 1727 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_clear_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1729
  l2 = (struct layer2 *)fi->userdata;
#line 1730
  skb = (struct sk_buff *)arg;
#line 1732
  ______f.func = "l2_clear_own_busy";
#line 1732
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1732
  ______f.line = 1732U;
#line 1732
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1732
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1732
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 1732
  ______r = tmp == 0;
#line 1732
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1732
  if (______r != 0) {
#line 1733
    enquiry_cr(l2, 1, 1, 0);
#line 1734
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1736
  ______f___0.func = "l2_clear_own_busy";
#line 1736
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1736
  ______f___0.line = 1736U;
#line 1736
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1736
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1736
  ______r___0 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 1736
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1736
  if (______r___0 != 0) {
#line 1737
    consume_skb(skb);
  } else {

  }
#line 1738
  return;
}
}
#line 1741 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_frame_error(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1743
  l2 = (struct layer2 *)fi->userdata;
#line 1745
  l2mgr(l2, 7940U, arg);
#line 1746
  return;
}
}
#line 1749 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_frame_error_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1751
  l2 = (struct layer2 *)fi->userdata;
#line 1753
  l2mgr(l2, 7940U, arg);
#line 1754
  establishlink(fi);
#line 1755
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 1756
  return;
}
}
#line 1758 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static struct FsmNode L2FnList[88U]  = 
#line 1758
  {      {0, 11, & l2_mdl_assign}, 
        {1, 11, & l2_go_st3}, 
        {3, 11, & l2_establish}, 
        {4, 11, & l2_discard_i_setl3}, 
        {6, 11, & l2_l3_reestablish}, 
        {7, 11, & l2_l3_reestablish}, 
        {3, 12, & l2_release}, 
        {4, 12, & l2_pend_rel}, 
        {6, 12, & l2_disconnect}, 
        {7, 12, & l2_disconnect}, 
        {4, 8, & l2_feed_i_if_reest}, 
        {6, 8, & l2_feed_i_pull}, 
        {7, 8, & l2_feed_iqueue}, 
        {0, 10, & l2_queue_ui_assign}, 
        {1, 10, & l2_queue_ui}, 
        {2, 10, & l2_queue_ui}, 
        {3, 10, & l2_send_ui}, 
        {4, 10, & l2_send_ui}, 
        {5, 10, & l2_send_ui}, 
        {6, 10, & l2_send_ui}, 
        {7, 10, & l2_send_ui}, 
        {0, 13, & l2_got_tei}, 
        {1, 13, & l2_got_tei}, 
        {2, 13, & l2_got_tei}, 
        {1, 15, & l2_st24_tei_remove}, 
        {2, 15, & l2_st3_tei_remove}, 
        {3, 14, & l2_st24_tei_remove}, 
        {4, 14, & l2_st5_tei_remove}, 
        {5, 14, & l2_st6_tei_remove}, 
        {6, 14, & l2_tei_remove}, 
        {7, 14, & l2_tei_remove}, 
        {3, 1, & l2_start_multi}, 
        {4, 1, & l2_send_UA}, 
        {5, 1, & l2_send_DM}, 
        {6, 1, & l2_restart_multi}, 
        {7, 1, & l2_restart_multi}, 
        {3, 2, & l2_send_DM}, 
        {4, 2, & l2_send_DM}, 
        {5, 2, & l2_send_UA}, 
        {6, 2, & l2_stop_multi}, 
        {7, 2, & l2_stop_multi}, 
        {3, 4, & l2_mdl_error_ua}, 
        {4, 4, & l2_connected}, 
        {5, 4, & l2_released}, 
        {6, 4, & l2_mdl_error_ua}, 
        {7, 4, & l2_mdl_error_ua}, 
        {3, 3, & l2_reestablish}, 
        {4, 3, & l2_st5_dm_release}, 
        {5, 3, & l2_st6_dm_release}, 
        {6, 3, & l2_mdl_error_dm}, 
        {7, 3, & l2_st8_mdl_error_dm}, 
        {0, 0, & l2_got_ui}, 
        {1, 0, & l2_got_ui}, 
        {2, 0, & l2_got_ui}, 
        {3, 0, & l2_got_ui}, 
        {4, 0, & l2_got_ui}, 
        {5, 0, & l2_got_ui}, 
        {6, 0, & l2_got_ui}, 
        {7, 0, & l2_got_ui}, 
        {6, 5, & l2_got_FRMR}, 
        {7, 5, & l2_got_FRMR}, 
        {6, 6, & l2_st7_got_super}, 
        {7, 6, & l2_st8_got_super}, 
        {6, 7, & l2_got_iframe}, 
        {7, 7, & l2_got_iframe}, 
        {4, 17, & l2_st5_tout_200}, 
        {5, 17, & l2_st6_tout_200}, 
        {6, 17, & l2_st7_tout_200}, 
        {7, 17, & l2_st8_tout_200}, 
        {6, 18, & l2_st7_tout_203}, 
        {6, 9, & l2_pull_iqueue}, 
        {6, 19, & l2_set_own_busy}, 
        {7, 19, & l2_set_own_busy}, 
        {6, 20, & l2_clear_own_busy}, 
        {7, 20, & l2_clear_own_busy}, 
        {3, 21, & l2_frame_error}, 
        {4, 21, & l2_frame_error}, 
        {5, 21, & l2_frame_error}, 
        {6, 21, & l2_frame_error_reest}, 
        {7, 21, & l2_frame_error_reest}, 
        {0, 16, & l2_st14_persistant_da}, 
        {1, 16, & l2_st24_tei_remove}, 
        {2, 16, & l2_st3_tei_remove}, 
        {3, 16, & l2_st14_persistant_da}, 
        {4, 16, & l2_st5_persistant_da}, 
        {5, 16, & l2_st6_persistant_da}, 
        {6, 16, & l2_persistant_da}, 
        {7, 16, & l2_persistant_da}};
#line 1853 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int ph_data_indication(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  u_char *datap ;
  int ret ;
  int psapi ;
  int ptei ;
  u_int l ;
  int c ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___1 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int tmp___2 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int tmp___3 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int tmp___4 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int tmp___5 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int tmp___6 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int tmp___7 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int tmp___8 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;

  {
#line 1855
  datap = skb->data;
#line 1856
  ret = -22;
#line 1859
  c = 0;
#line 1861
  l = l2addrsize(l2);
#line 1862
  ______f.func = "ph_data_indication";
#line 1862
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1862
  ______f.line = 1862U;
#line 1862
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1862
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1862
  ______r = skb->len <= l;
#line 1862
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1862
  if (______r != 0) {
#line 1863
    mISDN_FsmEvent(& l2->l2m, 21, 78);
#line 1864
    return (ret);
  } else {

  }
#line 1866
  ______f___5.func = "ph_data_indication";
#line 1866
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1866
  ______f___5.line = 1866U;
#line 1866
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1866
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1866
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1866
  ______r___5 = tmp___1 != 0;
#line 1866
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1866
  if (______r___5 != 0) {
#line 1867
    tmp = datap;
#line 1867
    datap = datap + 1;
#line 1867
    psapi = (int )*tmp;
#line 1868
    tmp___0 = datap;
#line 1868
    datap = datap + 1;
#line 1868
    ptei = (int )*tmp___0;
#line 1869
    ______f___0.func = "ph_data_indication";
#line 1869
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1869
    ______f___0.line = 1869U;
#line 1869
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1869
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1869
    ______r___0 = psapi & 1 || (ptei & 1) == 0;
#line 1869
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1869
    if (______r___0 != 0) {
#line 1870
      printk("<4>l2 D-channel frame wrong EA0/EA1\n");
#line 1872
      return (ret);
    } else {

    }
#line 1874
    psapi = psapi >> 2;
#line 1875
    ptei = ptei >> 1;
#line 1876
    ______f___2.func = "ph_data_indication";
#line 1876
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1876
    ______f___2.line = 1876U;
#line 1876
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1876
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1876
    ______r___2 = (int )l2->sapi != psapi;
#line 1876
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1876
    if (______r___2 != 0) {
#line 1878
      ______f___1.func = "ph_data_indication";
#line 1878
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1878
      ______f___1.line = 1878U;
#line 1878
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1878
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1878
      ______r___1 = (*debug___4 & 16711680U) != 0U;
#line 1878
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1878
      if (______r___1 != 0) {
#line 1879
        printk("<7>%s: sapi %d/%d mismatch\n", "ph_data_indication", psapi, (int )l2->sapi);
      } else {

      }
#line 1881
      consume_skb(skb);
#line 1882
      return (0);
    } else {

    }
#line 1884
    ______f___4.func = "ph_data_indication";
#line 1884
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1884
    ______f___4.line = 1884U;
#line 1884
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1884
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1884
    ______r___4 = (int )l2->tei != ptei && ptei != 127;
#line 1884
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1884
    if (______r___4 != 0) {
#line 1886
      ______f___3.func = "ph_data_indication";
#line 1886
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1886
      ______f___3.line = 1886U;
#line 1886
      ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1886
      ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1886
      ______r___3 = (*debug___4 & 16711680U) != 0U;
#line 1886
      ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1886
      if (______r___3 != 0) {
#line 1887
        printk("<7>%s: tei %d/%d mismatch\n", "ph_data_indication", ptei, (int )l2->tei);
      } else {

      }
#line 1889
      consume_skb(skb);
#line 1890
      return (0);
    } else {

    }
  } else {
#line 1893
    datap = datap + (unsigned long )l;
  }
#line 1894
  ______f___21.func = "ph_data_indication";
#line 1894
  ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1894
  ______f___21.line = 1894U;
#line 1894
  ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 1894
  ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 1894
  ______r___21 = ((int )*datap & 1) == 0;
#line 1894
  ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 1894
  if (______r___21 != 0) {
#line 1895
    c = iframe_error(l2, skb);
#line 1896
    ______f___6.func = "ph_data_indication";
#line 1896
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1896
    ______f___6.line = 1896U;
#line 1896
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1896
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1896
    ______r___6 = c == 0;
#line 1896
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1896
    if (______r___6 != 0) {
#line 1897
      ret = mISDN_FsmEvent(& l2->l2m, 7, (void *)skb);
    } else {

    }
  } else {
#line 1898
    ______f___20.func = "ph_data_indication";
#line 1898
    ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1898
    ______f___20.line = 1898U;
#line 1898
    ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 1898
    ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 1898
    tmp___8 = IsSFrame(datap, l2);
#line 1898
    ______r___20 = tmp___8 != 0;
#line 1898
    ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 1898
    if (______r___20 != 0) {
#line 1899
      c = super_error(l2, skb);
#line 1900
      ______f___7.func = "ph_data_indication";
#line 1900
      ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1900
      ______f___7.line = 1900U;
#line 1900
      ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1900
      ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1900
      ______r___7 = c == 0;
#line 1900
      ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1900
      if (______r___7 != 0) {
#line 1901
        ret = mISDN_FsmEvent(& l2->l2m, 6, (void *)skb);
      } else {

      }
    } else {
#line 1902
      ______f___19.func = "ph_data_indication";
#line 1902
      ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1902
      ______f___19.line = 1902U;
#line 1902
      ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 1902
      ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 1902
      tmp___7 = IsUI(datap);
#line 1902
      ______r___19 = tmp___7 != 0;
#line 1902
      ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 1902
      if (______r___19 != 0) {
#line 1903
        c = UI_error(l2, skb);
#line 1904
        ______f___8.func = "ph_data_indication";
#line 1904
        ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1904
        ______f___8.line = 1904U;
#line 1904
        ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1904
        ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1904
        ______r___8 = c == 0;
#line 1904
        ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1904
        if (______r___8 != 0) {
#line 1905
          ret = mISDN_FsmEvent(& l2->l2m, 0, (void *)skb);
        } else {

        }
      } else {
#line 1906
        ______f___18.func = "ph_data_indication";
#line 1906
        ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1906
        ______f___18.line = 1906U;
#line 1906
        ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 1906
        ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 1906
        tmp___6 = IsSABME(datap, l2);
#line 1906
        ______r___18 = tmp___6 != 0;
#line 1906
        ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 1906
        if (______r___18 != 0) {
#line 1907
          c = unnum_error(l2, skb, 0);
#line 1908
          ______f___9.func = "ph_data_indication";
#line 1908
          ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1908
          ______f___9.line = 1908U;
#line 1908
          ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1908
          ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1908
          ______r___9 = c == 0;
#line 1908
          ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1908
          if (______r___9 != 0) {
#line 1909
            ret = mISDN_FsmEvent(& l2->l2m, 1, (void *)skb);
          } else {

          }
        } else {
#line 1910
          ______f___17.func = "ph_data_indication";
#line 1910
          ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1910
          ______f___17.line = 1910U;
#line 1910
          ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 1910
          ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 1910
          tmp___5 = IsUA(datap);
#line 1910
          ______r___17 = tmp___5 != 0;
#line 1910
          ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 1910
          if (______r___17 != 0) {
#line 1911
            c = unnum_error(l2, skb, 1);
#line 1912
            ______f___10.func = "ph_data_indication";
#line 1912
            ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1912
            ______f___10.line = 1912U;
#line 1912
            ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1912
            ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1912
            ______r___10 = c == 0;
#line 1912
            ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1912
            if (______r___10 != 0) {
#line 1913
              ret = mISDN_FsmEvent(& l2->l2m, 4, (void *)skb);
            } else {

            }
          } else {
#line 1914
            ______f___16.func = "ph_data_indication";
#line 1914
            ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1914
            ______f___16.line = 1914U;
#line 1914
            ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 1914
            ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 1914
            tmp___4 = IsDISC(datap);
#line 1914
            ______r___16 = tmp___4 != 0;
#line 1914
            ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 1914
            if (______r___16 != 0) {
#line 1915
              c = unnum_error(l2, skb, 0);
#line 1916
              ______f___11.func = "ph_data_indication";
#line 1916
              ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1916
              ______f___11.line = 1916U;
#line 1916
              ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1916
              ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1916
              ______r___11 = c == 0;
#line 1916
              ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1916
              if (______r___11 != 0) {
#line 1917
                ret = mISDN_FsmEvent(& l2->l2m, 2, (void *)skb);
              } else {

              }
            } else {
#line 1918
              ______f___15.func = "ph_data_indication";
#line 1918
              ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1918
              ______f___15.line = 1918U;
#line 1918
              ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 1918
              ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 1918
              tmp___3 = IsDM(datap);
#line 1918
              ______r___15 = tmp___3 != 0;
#line 1918
              ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 1918
              if (______r___15 != 0) {
#line 1919
                c = unnum_error(l2, skb, 1);
#line 1920
                ______f___12.func = "ph_data_indication";
#line 1920
                ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1920
                ______f___12.line = 1920U;
#line 1920
                ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1920
                ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1920
                ______r___12 = c == 0;
#line 1920
                ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1920
                if (______r___12 != 0) {
#line 1921
                  ret = mISDN_FsmEvent(& l2->l2m, 3, (void *)skb);
                } else {

                }
              } else {
#line 1922
                ______f___14.func = "ph_data_indication";
#line 1922
                ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1922
                ______f___14.line = 1922U;
#line 1922
                ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 1922
                ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 1922
                tmp___2 = IsFRMR(datap);
#line 1922
                ______r___14 = tmp___2 != 0;
#line 1922
                ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 1922
                if (______r___14 != 0) {
#line 1923
                  c = FRMR_error(l2, skb);
#line 1924
                  ______f___13.func = "ph_data_indication";
#line 1924
                  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1924
                  ______f___13.line = 1924U;
#line 1924
                  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1924
                  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1924
                  ______r___13 = c == 0;
#line 1924
                  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1924
                  if (______r___13 != 0) {
#line 1925
                    ret = mISDN_FsmEvent(& l2->l2m, 5, (void *)skb);
                  } else {

                  }
                } else {
#line 1927
                  c = 76;
                }
              }
            }
          }
        }
      }
    }
  }
#line 1928
  ______f___22.func = "ph_data_indication";
#line 1928
  ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1928
  ______f___22.line = 1928U;
#line 1928
  ______f___22.ldv_815.ldv_809.correct = 0UL;
#line 1928
  ______f___22.ldv_815.ldv_809.incorrect = 0UL;
#line 1928
  ______r___22 = c != 0;
#line 1928
  ______f___22.ldv_815.miss_hit[______r___22] = ______f___22.ldv_815.miss_hit[______r___22] + 1UL;
#line 1928
  if (______r___22 != 0) {
#line 1929
    printk("<4>l2 D-channel frame error %c\n", c);
#line 1930
    mISDN_FsmEvent(& l2->l2m, 21, (void *)((long )c));
  } else {

  }
#line 1932
  return (ret);
}
}
#line 1936 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___0 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  u_int tmp___4 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___8 ;
  u_int tmp___9 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___10 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 1938
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1938
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
#line 1939
  hh = (struct mISDNhead *)(& skb->cb);
#line 1940
  ret = -22;
#line 1942
  ______f.func = "l2_send";
#line 1942
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1942
  ______f.line = 1942U;
#line 1942
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1942
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1942
  ______r = (*debug___4 & 524288U) != 0U;
#line 1942
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1942
  if (______r != 0) {
#line 1943
    printk("<7>%s: prim(%x) id(%x) sapi(%d) tei(%d)\n", "l2_send", hh->prim, hh->id,
           (int )l2->sapi, (int )l2->tei);
  } else {

  }
#line 1945
  switch (hh->prim) {
  case 8194U: 
#line 1947
  ret = ph_data_indication(l2, hh, skb);
#line 1948
  goto ldv_36204;
  case 24578U: 
#line 1950
  ret = ph_data_confirm(l2, hh, skb);
#line 1951
  goto ldv_36204;
  case 258U: 
#line 1953
  test_and_set_bit(12, (unsigned long volatile   *)(& l2->flag));
#line 1954
  l2up_create(l2, 1282U, 0, 0);
#line 1955
  ______f___0.func = "l2_send";
#line 1955
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1955
  ______f___0.line = 1955U;
#line 1955
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1955
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1955
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
#line 1955
  ______r___0 = tmp != 0;
#line 1955
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1955
  if (______r___0 != 0) {
#line 1956
    ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
  } else {

  }
#line 1958
  goto ldv_36204;
  case 514U: 
#line 1960
  test_and_clear_bit(12, (unsigned long volatile   *)(& l2->flag));
#line 1961
  l2up_create(l2, 1538U, 0, 0);
#line 1962
  ret = mISDN_FsmEvent(& l2->l2m, 16, (void *)skb);
#line 1963
  goto ldv_36204;
  case 1794U: 
#line 1965
  ______f___1.func = "l2_send";
#line 1965
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1965
  ______f___1.line = 1965U;
#line 1965
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1965
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1965
  ______r___1 = (unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0);
#line 1965
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1965
  if (______r___1 != 0) {
#line 1966
    goto ldv_36204;
  } else {

  }
#line 1967
  ret = (*((l2->up)->send))(l2->up, skb);
#line 1968
  goto ldv_36204;
  case 12292U: 
#line 1970
  ret = mISDN_FsmEvent(& l2->l2m, 8, (void *)skb);
#line 1971
  goto ldv_36204;
  case 12548U: 
#line 1973
  ret = mISDN_FsmEvent(& l2->l2m, 10, (void *)skb);
#line 1974
  goto ldv_36204;
  case 4100U: 
#line 1976
  ______f___2.func = "l2_send";
#line 1976
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1976
  ______f___2.line = 1976U;
#line 1976
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1976
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1976
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1976
  ______r___2 = tmp___0 != 0;
#line 1976
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1976
  if (______r___2 != 0) {
#line 1977
    test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1978
  ______f___5.func = "l2_send";
#line 1978
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1978
  ______f___5.line = 1978U;
#line 1978
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1978
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1978
  tmp___8 = constant_test_bit(12U, (unsigned long const volatile   *)(& l2->flag));
#line 1978
  ______r___5 = tmp___8 != 0;
#line 1978
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1978
  if (______r___5 != 0) {
#line 1979
    ______f___4.func = "l2_send";
#line 1979
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1979
    ______f___4.line = 1980U;
#line 1979
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1979
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1979
    tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1979
    if (tmp___5 != 0) {
#line 1979
      tmp___7 = 1;
    } else {
#line 1979
      tmp___6 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1979
      if (tmp___6 != 0) {
#line 1979
        tmp___7 = 1;
      } else {
#line 1979
        tmp___7 = 0;
      }
    }
#line 1979
    ______r___4 = tmp___7;
#line 1979
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1979
    if (______r___4 != 0) {
#line 1981
      ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
    } else {
#line 1984
      ______f___3.func = "l2_send";
#line 1984
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1984
      ______f___3.line = 1985U;
#line 1984
      ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1984
      ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1984
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1984
      if (tmp___1 != 0) {
#line 1984
        tmp___3 = 1;
      } else {
#line 1984
        tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1984
        if (tmp___2 != 0) {
#line 1984
          tmp___3 = 1;
        } else {
#line 1984
          tmp___3 = 0;
        }
      }
#line 1984
      ______r___3 = tmp___3;
#line 1984
      ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1984
      if (______r___3 != 0) {
#line 1986
        test_and_set_bit(13, (unsigned long volatile   *)(& l2->flag));
      } else {

      }
#line 1989
      tmp___4 = l2_newid(l2);
#line 1989
      ret = l2down(l2, 257U, tmp___4, skb);
    }
  } else {

  }
#line 1992
  goto ldv_36204;
  case 4356U: 
#line 1994
  ______f___6.func = "l2_send";
#line 1994
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 1994
  ______f___6.line = 1994U;
#line 1994
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1994
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1994
  tmp___10 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1994
  ______r___6 = tmp___10 != 0;
#line 1994
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1994
  if (______r___6 != 0) {
#line 1995
    tmp___9 = l2_newid(l2);
#line 1995
    l2down_create(l2, 513U, tmp___9, 0, 0);
  } else {

  }
#line 1997
  ret = mISDN_FsmEvent(& l2->l2m, 12, (void *)skb);
#line 1999
  goto ldv_36204;
  default: 
#line 2001
  ______f___7.func = "l2_send";
#line 2001
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2001
  ______f___7.line = 2001U;
#line 2001
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2001
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2001
  ______r___7 = (*debug___4 & 16711680U) != 0U;
#line 2001
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2001
  if (______r___7 != 0) {
#line 2002
    l2m_debug(& l2->l2m, (char *)"l2 unknown pr %04x", hh->prim);
  } else {

  }
  }
  ldv_36204: 
#line 2005
  ______f___8.func = "l2_send";
#line 2005
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2005
  ______f___8.line = 2005U;
#line 2005
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2005
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2005
  ______r___8 = ret != 0;
#line 2005
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2005
  if (______r___8 != 0) {
#line 2006
    consume_skb(skb);
#line 2007
    ret = 0;
  } else {

  }
#line 2009
  return (ret);
}
}
#line 2013 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 2015
  ret = -22;
#line 2017
  ______f.func = "tei_l2";
#line 2017
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2017
  ______f.line = 2017U;
#line 2017
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2017
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2017
  ______r = (*debug___4 & 1048576U) != 0U;
#line 2017
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2017
  if (______r != 0) {
#line 2018
    printk("<7>%s: cmd(%x)\n", "tei_l2", cmd);
  } else {

  }
#line 2019
  switch (cmd) {
  case (u_int )6148: 
#line 2021
  ret = mISDN_FsmEvent(& l2->l2m, 13, (void *)arg);
#line 2022
  goto ldv_36252;
  case (u_int )6660: 
#line 2024
  ret = mISDN_FsmEvent(& l2->l2m, 14, 0);
#line 2025
  goto ldv_36252;
  case (u_int )7940: 
#line 2027
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
#line 2028
  goto ldv_36252;
  case (u_int )24324: 
#line 2031
  printk("<5>MDL_ERROR|REQ (tei_l2)\n");
#line 2032
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
#line 2033
  goto ldv_36252;
  }
  ldv_36252: ;
#line 2035
  return (ret);
}
}
#line 2039 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static void release_l2(struct layer2 *l2 ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;

  {
#line 2041
  mISDN_FsmDelTimer(& l2->t200, 21);
#line 2042
  mISDN_FsmDelTimer(& l2->t203, 16);
#line 2043
  skb_queue_purge(& l2->i_queue);
#line 2044
  skb_queue_purge(& l2->ui_queue);
#line 2045
  skb_queue_purge(& l2->down_queue);
#line 2046
  ReleaseWin(l2);
#line 2047
  ______f___0.func = "release_l2";
#line 2047
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2047
  ______f___0.line = 2047U;
#line 2047
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2047
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2047
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2047
  ______r___0 = tmp != 0;
#line 2047
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2047
  if (______r___0 != 0) {
#line 2048
    TEIrelease(l2);
#line 2049
    ______f.func = "release_l2";
#line 2049
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2049
    ______f.line = 2049U;
#line 2049
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 2049
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2049
    ______r = (unsigned long )l2->ch.st != (unsigned long )((struct mISDNstack *)0);
#line 2049
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2049
    if (______r != 0) {
#line 2050
      (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 512U, 0);
    } else {

    }
  } else {

  }
#line 2053
  kfree((void const   *)l2);
#line 2054
  return;
}
}
#line 2057 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  u_int info ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 2059
  __mptr = (struct mISDNchannel  const  *)ch;
#line 2059
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
#line 2062
  ______f.func = "l2_ctrl";
#line 2062
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2062
  ______f.line = 2062U;
#line 2062
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2062
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2062
  ______r = (*debug___4 & 262144U) != 0U;
#line 2062
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2062
  if (______r != 0) {
#line 2063
    printk("<7>%s:(%x)\n", "l2_ctrl", cmd);
  } else {

  }
#line 2065
  switch (cmd) {
  case (u_int )256: 
#line 2067
  ______f___0.func = "l2_ctrl";
#line 2067
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2067
  ______f___0.line = 2067U;
#line 2067
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2067
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2067
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2067
  ______r___0 = tmp != 0;
#line 2067
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2067
  if (______r___0 != 0) {
#line 2068
    set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
#line 2069
    info = 1U;
#line 2070
    l2up_create(l2, 8U, 4, (void *)(& info));
  } else {

  }
#line 2073
  goto ldv_36283;
  case (u_int )512: 
#line 2075
  ______f___1.func = "l2_ctrl";
#line 2075
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2075
  ______f___1.line = 2075U;
#line 2075
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2075
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2075
  ______r___1 = (unsigned long )l2->ch.peer != (unsigned long )((struct mISDNchannel *)0);
#line 2075
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2075
  if (______r___1 != 0) {
#line 2076
    (*((l2->ch.peer)->ctrl))(l2->ch.peer, 512U, 0);
  } else {

  }
#line 2077
  release_l2(l2);
#line 2078
  goto ldv_36283;
  }
  ldv_36283: ;
#line 2080
  return (0);
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) 
{ 
  struct layer2 *l2 ;
  struct channel_req rq ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int tmp___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 2090
  tmp = kzalloc(928UL, 208U);
#line 2090
  l2 = (struct layer2 *)tmp;
#line 2091
  ______f.func = "create_l2";
#line 2091
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2091
  ______f.line = 2091U;
#line 2091
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2091
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2091
  ______r = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 2091
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2091
  if (______r != 0) {
#line 2092
    printk("<3>kzalloc layer2 failed\n");
#line 2093
    return (0);
  } else {

  }
#line 2095
  l2->next_id = 1U;
#line 2096
  l2->down_id = 65534U;
#line 2097
  l2->up = ch;
#line 2098
  l2->ch.st = ch->st;
#line 2099
  l2->ch.send = & l2_send;
#line 2100
  l2->ch.ctrl = & l2_ctrl;
#line 2101
  switch (protocol) {
  case (u_int )17: 
#line 2103
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
#line 2104
  test_and_set_bit(18, (unsigned long volatile   *)(& l2->flag));
#line 2105
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
#line 2106
  l2->sapi = (signed char )sapi;
#line 2107
  l2->maxlen = 260U;
#line 2108
  ______f___0.func = "create_l2";
#line 2108
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2108
  ______f___0.line = 2108U;
#line 2108
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2108
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2108
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2108
  ______r___0 = tmp___0 != 0;
#line 2108
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2108
  if (______r___0 != 0) {
#line 2109
    l2->window = 7U;
  } else {
#line 2111
    l2->window = 1U;
  }
#line 2112
  ______f___1.func = "create_l2";
#line 2112
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2112
  ______f___1.line = 2112U;
#line 2112
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2112
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2112
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& options));
#line 2112
  ______r___1 = tmp___1 != 0;
#line 2112
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2112
  if (______r___1 != 0) {
#line 2113
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2114
  ______f___2.func = "create_l2";
#line 2114
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2114
  ______f___2.line = 2114U;
#line 2114
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2114
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2114
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& options));
#line 2114
  ______r___2 = tmp___2 != 0;
#line 2114
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2114
  if (______r___2 != 0) {
#line 2115
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2116
  l2->tei = (signed char )tei;
#line 2117
  l2->T200 = 1000;
#line 2118
  l2->N200 = 3;
#line 2119
  l2->T203 = 10000;
#line 2120
  ______f___3.func = "create_l2";
#line 2120
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2120
  ______f___3.line = 2120U;
#line 2120
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2120
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2120
  tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2120
  ______r___3 = tmp___3 != 0;
#line 2120
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2120
  if (______r___3 != 0) {
#line 2121
    rq.protocol = 4U;
  } else {
#line 2123
    rq.protocol = 2U;
  }
#line 2124
  rq.adr.channel = 0U;
#line 2125
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
#line 2126
  goto ldv_36314;
  case (u_int )16: 
#line 2128
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
#line 2129
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
#line 2130
  test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
#line 2131
  l2->sapi = (signed char )sapi;
#line 2132
  l2->maxlen = 260U;
#line 2133
  ______f___4.func = "create_l2";
#line 2133
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2133
  ______f___4.line = 2133U;
#line 2133
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2133
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2133
  tmp___4 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2133
  ______r___4 = tmp___4 != 0;
#line 2133
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2133
  if (______r___4 != 0) {
#line 2134
    l2->window = 7U;
  } else {
#line 2136
    l2->window = 1U;
  }
#line 2137
  ______f___5.func = "create_l2";
#line 2137
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2137
  ______f___5.line = 2137U;
#line 2137
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 2137
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 2137
  tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& options));
#line 2137
  ______r___5 = tmp___5 != 0;
#line 2137
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 2137
  if (______r___5 != 0) {
#line 2138
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2139
  ______f___6.func = "create_l2";
#line 2139
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2139
  ______f___6.line = 2139U;
#line 2139
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 2139
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 2139
  tmp___6 = constant_test_bit(3U, (unsigned long const volatile   *)(& options));
#line 2139
  ______r___6 = tmp___6 != 0;
#line 2139
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 2139
  if (______r___6 != 0) {
#line 2140
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2141
  l2->tei = (signed char )tei;
#line 2142
  l2->T200 = 1000;
#line 2143
  l2->N200 = 3;
#line 2144
  l2->T203 = 10000;
#line 2145
  ______f___7.func = "create_l2";
#line 2145
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2145
  ______f___7.line = 2145U;
#line 2145
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2145
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2145
  tmp___7 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2145
  ______r___7 = tmp___7 != 0;
#line 2145
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2145
  if (______r___7 != 0) {
#line 2146
    rq.protocol = 3U;
  } else {
#line 2148
    rq.protocol = 1U;
  }
#line 2149
  rq.adr.channel = 0U;
#line 2150
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
#line 2151
  goto ldv_36314;
  case (u_int )35: 
#line 2153
  test_and_set_bit(0, (unsigned long volatile   *)(& l2->flag));
#line 2154
  l2->window = 7U;
#line 2155
  l2->maxlen = 2048U;
#line 2156
  l2->T200 = 1000;
#line 2157
  l2->N200 = 4;
#line 2158
  l2->T203 = 5000;
#line 2159
  l2->addr.A = 3U;
#line 2160
  l2->addr.B = 1U;
#line 2161
  goto ldv_36314;
  default: 
#line 2163
  printk("<3>layer2 create failed prt %x\n", protocol);
#line 2165
  kfree((void const   *)l2);
#line 2166
  return (0);
  }
  ldv_36314: 
#line 2168
  skb_queue_head_init(& l2->i_queue);
#line 2169
  skb_queue_head_init(& l2->ui_queue);
#line 2170
  skb_queue_head_init(& l2->down_queue);
#line 2171
  skb_queue_head_init(& l2->tmp_queue);
#line 2172
  InitWin(l2);
#line 2173
  l2->l2m.fsm = & l2fsm;
#line 2174
  ______f___8.func = "create_l2";
#line 2174
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2174
  ______f___8.line = 2176U;
#line 2174
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2174
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2174
  tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 2174
  if (tmp___8 != 0) {
#line 2174
    tmp___11 = 1;
  } else {
#line 2174
    tmp___9 = constant_test_bit(14U, (unsigned long const volatile   *)(& l2->flag));
#line 2174
    if (tmp___9 != 0) {
#line 2174
      tmp___11 = 1;
    } else {
#line 2174
      tmp___10 = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 2174
      if (tmp___10 != 0) {
#line 2174
        tmp___11 = 1;
      } else {
#line 2174
        tmp___11 = 0;
      }
    }
  }
#line 2174
  ______r___8 = tmp___11;
#line 2174
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2174
  if (______r___8 != 0) {
#line 2177
    l2->l2m.state = 3;
  } else {
#line 2179
    l2->l2m.state = 0;
  }
#line 2180
  l2->l2m.debug = (int )*debug___4;
#line 2181
  l2->l2m.userdata = (void *)l2;
#line 2182
  l2->l2m.userint = 0;
#line 2183
  l2->l2m.printdebug = & l2m_debug;
#line 2185
  mISDN_FsmInitTimer(& l2->l2m, & l2->t200);
#line 2186
  mISDN_FsmInitTimer(& l2->l2m, & l2->t203);
#line 2187
  return (l2);
}
}
#line 2191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static int x75create(struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 2195
  ______f.func = "x75create";
#line 2195
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2195
  ______f.line = 2195U;
#line 2195
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2195
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2195
  ______r = crq->protocol != 35U;
#line 2195
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2195
  if (______r != 0) {
#line 2196
    return (-93);
  } else {

  }
#line 2197
  l2 = create_l2(crq->ch, crq->protocol, 0UL, 0, 0);
#line 2198
  ______f___0.func = "x75create";
#line 2198
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared";
#line 2198
  ______f___0.line = 2198U;
#line 2198
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2198
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2198
  ______r___0 = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 2198
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2198
  if (______r___0 != 0) {
#line 2199
    return (-12);
  } else {

  }
#line 2200
  crq->ch = & l2->ch;
#line 2201
  crq->protocol = 34U;
#line 2202
  return (0);
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
static struct Bprotocol X75SLP  =    {{0, 0}, (char *)"X75SLP", 8U, & x75create};
#line 2212 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
int Isdnl2_Init(u_int *deb ) 
{ 


  {
#line 2214
  debug___4 = deb;
#line 2215
  mISDN_register_Bprotocol(& X75SLP);
#line 2216
  l2fsm.state_count = 8;
#line 2217
  l2fsm.event_count = 22;
#line 2218
  l2fsm.strEvent = (char **)(& strL2Event);
#line 2219
  l2fsm.strState = (char **)(& strL2State);
#line 2220
  mISDN_FsmNew(& l2fsm, (struct FsmNode *)(& L2FnList), 88);
#line 2221
  TEIInit(deb);
#line 2222
  return (0);
}
}
#line 2226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
void Isdnl2_cleanup(void) 
{ 


  {
#line 2228
  mISDN_unregister_Bprotocol(& X75SLP);
#line 2229
  TEIFree();
#line 2230
  mISDN_FsmFree(& l2fsm);
#line 2231
  return;
}
}
#line 2271 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
void ldv_main7_sequence_infinite_withcheck_stateful(void) 
{ 
  struct channel_req *var_group1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 2292
  LDV_IN_INTERRUPT = 1;
#line 2301
  ldv_initialize();
#line 2305
  goto ldv_36372;
  ldv_36371: 
#line 2308
  tmp = nondet_int();
#line 2308
  switch (tmp) {
  case 0: 
#line 2321
  ldv_handler_precall();
#line 2322
  x75create(var_group1);
#line 2329
  goto ldv_36369;
  default: ;
#line 2330
  goto ldv_36369;
  }
  ldv_36369: ;
  ldv_36372: 
#line 2305
  tmp___0 = nondet_int();
#line 2305
  if (tmp___0 != 0) {
#line 2306
    goto ldv_36371;
  } else {

  }


#line 2339
  ldv_check_final_state();
#line 2342
  return;
}
}
#line 2357 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
unsigned long ldv___get_free_pages_161(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 2363
  ldv_check_alloc_flags(ldv_func_arg1);
#line 2365
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 2365
  return (tmp);
}
}
#line 2412 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
void *ldv_kmem_cache_alloc_166(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 2418
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2420
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 2421
  return ((void *)0);
}
}
#line 2488 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
struct sk_buff *ldv_skb_clone_173(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 2494
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2496
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 2496
  return (tmp);
}
}
#line 2510 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
struct sk_buff *ldv_skb_copy_175(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 2516
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2518
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 2518
  return (tmp);
}
}
#line 2521 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_176(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 2528
  ldv_check_alloc_flags(ldv_func_arg3);
#line 2530
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 2530
  return (tmp);
}
}
#line 2533 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
int ldv_pskb_expand_head_177(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 2541
  ldv_check_alloc_flags(ldv_func_arg4);
#line 2543
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 2543
  return (tmp);
}
}
#line 2546 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/layer2.c.prepared"
struct sk_buff *ldv_skb_clone_178(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 2552
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2554
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 2554
  return (tmp);
}
}
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_187(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 221 "include/linux/slub_def.h"
void *ldv_kmem_cache_alloc_192(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 434 "include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) ;
#line 461
struct sk_buff *ldv_skb_clone_199(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_201(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 471
struct sk_buff *ldv_skb_copy_204(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 480
int ldv_pskb_expand_head_203(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_202(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 511 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___1(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  long tmp ;

  {
#line 515
  skb = alloc_skb(len + 8U, gfp_mask);
#line 516
  ______f.func = "mI_alloc_skb";
#line 516
  ______f.file = "include/linux/mISDNif.h";
#line 516
  ______f.line = 516U;
#line 516
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  ______f___0.func = "mI_alloc_skb";
#line 516
  ______f___0.file = "include/linux/mISDNif.h";
#line 516
  ______f___0.line = 516U;
#line 516
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 516
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 516
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 516
  ______r___0 = (int )tmp;
#line 516
  ftrace_likely_update(& ______f___0, ______r___0, 1);
#line 516
  ______r = ______r___0 != 0;
#line 516
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 516
  if (______r != 0) {
#line 517
    skb_reserve(skb, 8);
  } else {

  }
#line 518
  return (skb);
}
}
#line 522 "include/linux/mISDNif.h"
__inline static struct sk_buff *_alloc_mISDN_skb___0(u_int prim , u_int id , u_int len ,
                                                     void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 524
  tmp = mI_alloc_skb___1(len, gfp_mask);
#line 524
  skb = tmp;
#line 527
  ______f.func = "_alloc_mISDN_skb";
#line 527
  ______f.file = "include/linux/mISDNif.h";
#line 527
  ______f.line = 527U;
#line 527
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 527
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 527
  ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 527
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 527
  if (______r != 0) {
#line 528
    return (0);
  } else {

  }
#line 529
  ______f___0.func = "_alloc_mISDN_skb";
#line 529
  ______f___0.file = "include/linux/mISDNif.h";
#line 529
  ______f___0.line = 529U;
#line 529
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 529
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 529
  ______r___0 = len != 0U;
#line 529
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 529
  if (______r___0 != 0) {
#line 530
    __len = (size_t )len;
#line 530
    tmp___1 = skb_put(skb, len);
#line 530
    __ret = __builtin_memcpy((void *)tmp___1, (void const   *)dp, __len);
  } else {

  }
#line 531
  hh = (struct mISDNhead *)(& skb->cb);
#line 532
  hh->prim = prim;
#line 533
  hh->id = id;
#line 534
  return (skb);
}
}
#line 538 "include/linux/mISDNif.h"
__inline static void _queue_data___0(struct mISDNchannel *ch , u_int prim , u_int id ,
                                     u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;

  {
#line 543
  ______f.func = "_queue_data";
#line 543
  ______f.file = "include/linux/mISDNif.h";
#line 543
  ______f.line = 543U;
#line 543
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 543
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 543
  ______r = (unsigned long )ch->peer == (unsigned long )((struct mISDNchannel *)0);
#line 543
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 543
  if (______r != 0) {
#line 544
    return;
  } else {

  }
#line 545
  skb = _alloc_mISDN_skb___0(prim, id, len, dp, gfp_mask);
#line 546
  ______f___0.func = "_queue_data";
#line 546
  ______f___0.file = "include/linux/mISDNif.h";
#line 546
  ______f___0.line = 546U;
#line 546
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 546
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 546
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 546
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 546
  if (______r___0 != 0) {
#line 547
    return;
  } else {

  }
#line 548
  ______f___1.func = "_queue_data";
#line 548
  ______f___1.file = "include/linux/mISDNif.h";
#line 548
  ______f___1.line = 548U;
#line 548
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 548
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 548
  tmp = (*(ch->recv))(ch->peer, skb);
#line 548
  ______r___1 = tmp != 0;
#line 548
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 548
  if (______r___1 != 0) {
#line 549
    consume_skb(skb);
  } else {

  }
#line 550
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static u_int *debug___5  ;
#line 52 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm deactfsm  =    {0, 0, 0, 0, 0};
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm teifsmu  =    {0, 0, 0, 0, 0};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm teifsmn  =    {0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static char *strDeactState[3U]  = {      (char *)"ST_L1_DEACT",      (char *)"ST_L1_DEACT_PENDING",      (char *)"ST_L1_ACTIV"};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static char *strDeactEvent[6U]  = {      (char *)"EV_ACTIVATE",      (char *)"EV_ACTIVATE_IND",      (char *)"EV_DEACTIVATE",      (char *)"EV_DEACTIVATE_IND", 
        (char *)"EV_UI",      (char *)"EV_DATIMER"};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct manager *mgr ;
  va_list va ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 94
  mgr = (struct manager *)fi->userdata;
#line 97
  ______f.func = "da_debug";
#line 97
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 97
  ______f.line = 97U;
#line 97
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 97
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 97
  ______r = (*debug___5 & 2097152U) == 0U;
#line 97
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 97
  if (______r != 0) {
#line 98
    return;
  } else {

  }
#line 99
  __builtin_va_start((__va_list_tag *)(& va));
#line 100
  printk("<7>mgr(%d): ", ((mgr->ch.st)->dev)->id);
#line 101
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
#line 102
  printk("\n");
#line 103
  __builtin_va_end((__va_list_tag *)(& va));
#line 104
  return;
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_activate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 109
  mgr = (struct manager *)fi->userdata;
#line 111
  ______f.func = "da_activate";
#line 111
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 111
  ______f.line = 111U;
#line 111
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 111
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 111
  ______r = fi->state == 1;
#line 111
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 111
  if (______r != 0) {
#line 112
    mISDN_FsmDelTimer(& mgr->datimer, 1);
  } else {

  }
#line 113
  mISDN_FsmChangeState(fi, 2);
#line 114
  return;
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_deactivate_ind(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 119
  mISDN_FsmChangeState(fi, 0);
#line 120
  return;
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_deactivate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;

  {
#line 125
  mgr = (struct manager *)fi->userdata;
#line 129
  flags = _read_lock_irqsave(& mgr->lock);
#line 130
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 130
  l2 = (struct layer2 *)__mptr;
#line 130
  goto ldv_34884;
  ldv_34883: 
#line 131
  ______f.func = "da_deactivate";
#line 131
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 131
  ______f.line = 131U;
#line 131
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 131
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 131
  ______r = l2->l2m.state > 3;
#line 131
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 131
  if (______r != 0) {
#line 133
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 134
    return;
  } else {

  }
#line 130
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 130
  l2 = (struct layer2 *)__mptr___0;
  ldv_34884: 
#line 130
  __builtin_prefetch((void const   *)l2->list.next);
#line 130
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 131
    goto ldv_34883;
  } else {

  }
#line 137
  _read_unlock_irqrestore(& mgr->lock, flags);
#line 139
  ______f___0.func = "da_deactivate";
#line 139
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 139
  ______f___0.line = 139U;
#line 139
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 139
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 139
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mgr->options));
#line 139
  ______r___0 = tmp == 0;
#line 139
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 139
  if (______r___0 != 0) {
#line 140
    mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 1);
#line 142
    mISDN_FsmChangeState(fi, 1);
  } else {

  }
#line 144
  return;
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 149
  mgr = (struct manager *)fi->userdata;
#line 152
  ______f.func = "da_ui";
#line 152
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 152
  ______f.line = 152U;
#line 152
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 152
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 152
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mgr->options));
#line 152
  ______r = tmp == 0;
#line 152
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 152
  if (______r != 0) {
#line 153
    mISDN_FsmDelTimer(& mgr->datimer, 2);
#line 154
    mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 2);
  } else {

  }
#line 156
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void da_timer(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;

  {
#line 162
  mgr = (struct manager *)fi->userdata;
#line 167
  flags = _read_lock_irqsave(& mgr->lock);
#line 168
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 168
  l2 = (struct layer2 *)__mptr;
#line 168
  goto ldv_34925;
  ldv_34924: 
#line 169
  ______f.func = "da_timer";
#line 169
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 169
  ______f.line = 169U;
#line 169
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 169
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 169
  ______r = l2->l2m.state > 3;
#line 169
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 169
  if (______r != 0) {
#line 171
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 172
    mISDN_FsmChangeState(fi, 2);
#line 173
    return;
  } else {

  }
#line 168
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 168
  l2 = (struct layer2 *)__mptr___0;
  ldv_34925: 
#line 168
  __builtin_prefetch((void const   *)l2->list.next);
#line 168
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 169
    goto ldv_34924;
  } else {

  }
#line 176
  _read_unlock_irqrestore(& mgr->lock, flags);
#line 178
  mISDN_FsmChangeState(fi, 0);
#line 179
  _queue_data___0(& mgr->ch, 513U, 65535U, 0U, 0, 32U);
#line 180
  return;
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode DeactFnList[6U]  = {      {0, 1, & da_activate}, 
        {2, 3, & da_deactivate_ind}, 
        {2, 2, & da_deactivate}, 
        {1, 0, & da_activate}, 
        {1, 4, & da_ui}, 
        {1, 5, & da_timer}};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static char *strTeiState[3U]  = {      (char *)"ST_TEI_NOP",      (char *)"ST_TEI_IDREQ",      (char *)"ST_TEI_IDVERIFY"};
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static char *strTeiEvent[9U]  = 
#line 222
  {      (char *)"EV_IDREQ",      (char *)"EV_ASSIGN",      (char *)"EV_ASSIGN_REQ",      (char *)"EV_DENIED", 
        (char *)"EV_CHKREQ",      (char *)"EV_CHKRESP",      (char *)"EV_REMOVE",      (char *)"EV_VERIFY", 
        (char *)"EV_TIMER"};
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct teimgr *tm ;
  va_list va ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 238
  tm = (struct teimgr *)fi->userdata;
#line 241
  ______f.func = "tei_debug";
#line 241
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 241
  ______f.line = 241U;
#line 241
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 241
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 241
  ______r = (*debug___5 & 2097152U) == 0U;
#line 241
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 241
  if (______r != 0) {
#line 242
    return;
  } else {

  }
#line 243
  __builtin_va_start((__va_list_tag *)(& va));
#line 244
  printk("<7>sapi(%d) tei(%d): ", (int )(tm->l2)->sapi, (int )(tm->l2)->tei);
#line 245
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
#line 246
  printk("\n");
#line 247
  __builtin_va_end((__va_list_tag *)(& va));
#line 248
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int get_free_id(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;

  {
#line 255
  ids = 0ULL;
#line 259
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 259
  l2 = (struct layer2 *)__mptr;
#line 259
  goto ldv_34972;
  ldv_34971: 
#line 260
  ______f.func = "get_free_id";
#line 260
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 260
  ______f.line = 260U;
#line 260
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 260
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 260
  ______r = l2->ch.nr > 63U;
#line 260
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 260
  if (______r != 0) {
#line 261
    printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 264
    return (-16);
  } else {

  }
#line 266
  test_and_set_bit((int )l2->ch.nr, (unsigned long volatile   *)(& ids));
#line 259
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 259
  l2 = (struct layer2 *)__mptr___0;
  ldv_34972: 
#line 259
  __builtin_prefetch((void const   *)l2->list.next);
#line 259
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 260
    goto ldv_34971;
  } else {

  }
#line 268
  i = 1;
#line 268
  goto ldv_34978;
  ldv_34977: 
#line 269
  ______f___0.func = "get_free_id";
#line 269
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 269
  ______f___0.line = 269U;
#line 269
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 269
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 269
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
#line 269
  ______r___0 = tmp == 0;
#line 269
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 269
  if (______r___0 != 0) {
#line 270
    return (i);
  } else {

  }
#line 268
  i = i + 1;
  ldv_34978: ;
#line 268
  if (i <= 63) {
#line 269
    goto ldv_34977;
  } else {

  }
#line 271
  printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 273
  return (-16);
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int get_free_tei(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  struct list_head  const  *__mptr___0 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp ;

  {
#line 279
  ids = 0ULL;
#line 283
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 283
  l2 = (struct layer2 *)__mptr;
#line 283
  goto ldv_35002;
  ldv_35001: 
#line 284
  ______f.func = "get_free_tei";
#line 284
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 284
  ______f.line = 284U;
#line 284
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 284
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 284
  ______r = l2->ch.nr == 0U;
#line 284
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 284
  if (______r != 0) {
#line 285
    goto ldv_34994;
  } else {

  }
#line 286
  ______f___0.func = "get_free_tei";
#line 286
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 286
  ______f___0.line = 286U;
#line 286
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 286
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 286
  ______r___0 = (l2->ch.addr & 255U) != 0U;
#line 286
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 286
  if (______r___0 != 0) {
#line 287
    goto ldv_34994;
  } else {

  }
#line 288
  i = (int )(l2->ch.addr >> 8);
#line 289
  ______f___1.func = "get_free_tei";
#line 289
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 289
  ______f___1.line = 289U;
#line 289
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 289
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 289
  ______r___1 = i <= 63;
#line 289
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 289
  if (______r___1 != 0) {
#line 290
    goto ldv_34994;
  } else {

  }
#line 291
  i = i - 64;
#line 293
  test_and_set_bit(i, (unsigned long volatile   *)(& ids));
  ldv_34994: 
#line 283
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 283
  l2 = (struct layer2 *)__mptr___0;
  ldv_35002: 
#line 283
  __builtin_prefetch((void const   *)l2->list.next);
#line 283
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 284
    goto ldv_35001;
  } else {

  }
#line 295
  i = 0;
#line 295
  goto ldv_35008;
  ldv_35007: 
#line 296
  ______f___2.func = "get_free_tei";
#line 296
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 296
  ______f___2.line = 296U;
#line 296
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 296
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 296
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
#line 296
  ______r___2 = tmp == 0;
#line 296
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 296
  if (______r___2 != 0) {
#line 297
    return (i + 64);
  } else {

  }
#line 295
  i = i + 1;
  ldv_35008: ;
#line 295
  if (i <= 63) {
#line 296
    goto ldv_35007;
  } else {

  }
#line 298
  printk("<4>%s: more as 63 dynamic tei for one device\n", "get_free_tei");
#line 300
  return (-1);
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void teiup_create(struct manager *mgr , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 310
  skb = mI_alloc_skb___1((unsigned int )len, 32U);
#line 311
  ______f.func = "teiup_create";
#line 311
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 311
  ______f.line = 311U;
#line 311
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 311
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 311
  ______r = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 311
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 311
  if (______r != 0) {
#line 312
    return;
  } else {

  }
#line 313
  hh = (struct mISDNhead *)(& skb->cb);
#line 314
  hh->prim = prim;
#line 315
  hh->id = (mgr->ch.nr << 16) | mgr->ch.addr;
#line 316
  ______f___0.func = "teiup_create";
#line 316
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 316
  ______f___0.line = 316U;
#line 316
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 316
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 316
  ______r___0 = len != 0;
#line 316
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 316
  if (______r___0 != 0) {
#line 317
    __len = (size_t )len;
#line 317
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 317
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 318
  err = (*((mgr->up)->send))(mgr->up, skb);
#line 319
  ______f___1.func = "teiup_create";
#line 319
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 319
  ______f___1.line = 319U;
#line 319
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 319
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 319
  ______r___1 = err != 0;
#line 319
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 319
  if (______r___1 != 0) {
#line 320
    printk("<4>%s: err=%d\n", "teiup_create", err);
#line 321
    consume_skb(skb);
  } else {

  }
#line 323
  return;
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static u_int new_id(struct manager *mgr ) 
{ 
  u_int id ;
  u_int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 330
  tmp = mgr->nextid;
#line 330
  mgr->nextid = mgr->nextid + (u_int )1;
#line 330
  id = tmp;
#line 331
  ______f.func = "new_id";
#line 331
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 331
  ______f.line = 331U;
#line 331
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 331
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 331
  ______r = id == 32767U;
#line 331
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 331
  if (______r != 0) {
#line 332
    mgr->nextid = 1U;
  } else {

  }
#line 333
  id = id << 16;
#line 334
  id = id | 32512U;
#line 335
  id = id | 63U;
#line 336
  return (id);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void do_send(struct manager *mgr ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  struct sk_buff *skb ;
  struct sk_buff *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___2 ;

  {
#line 342
  ______f.func = "do_send";
#line 342
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 342
  ______f.line = 342U;
#line 342
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 342
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 342
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 342
  ______r = tmp == 0;
#line 342
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 342
  if (______r != 0) {
#line 343
    return;
  } else {

  }
#line 345
  ______f___2.func = "do_send";
#line 345
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 345
  ______f___2.line = 345U;
#line 345
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 345
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 345
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 345
  ______r___2 = tmp___2 == 0;
#line 345
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 345
  if (______r___2 != 0) {
#line 346
    tmp___0 = skb_dequeue(& mgr->sendq);
#line 346
    skb = tmp___0;
#line 348
    ______f___0.func = "do_send";
#line 348
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 348
    ______f___0.line = 348U;
#line 348
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 348
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 348
    ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 348
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 348
    if (______r___0 != 0) {
#line 349
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 350
      return;
    } else {

    }
#line 352
    mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
#line 353
    mISDN_FsmEvent(& mgr->deact, 4, 0);
#line 354
    ______f___1.func = "do_send";
#line 354
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 354
    ______f___1.line = 354U;
#line 354
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 354
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 354
    tmp___1 = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 354
    ______r___1 = tmp___1 != 0;
#line 354
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 354
    if (______r___1 != 0) {
#line 355
      consume_skb(skb);
#line 356
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 357
      mgr->lastid = 65534U;
    } else {

    }
  } else {

  }
#line 360
  return;
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void do_ack(struct manager *mgr , u_int id ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___0 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___1 ;

  {
#line 365
  ______f___3.func = "do_ack";
#line 365
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 365
  ______f___3.line = 365U;
#line 365
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 365
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 365
  tmp___1 = constant_test_bit(17U, (unsigned long const volatile   *)(& mgr->options));
#line 365
  ______r___3 = tmp___1 != 0;
#line 365
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 365
  if (______r___3 != 0) {
#line 366
    ______f___2.func = "do_ack";
#line 366
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 366
    ______f___2.line = 366U;
#line 366
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 366
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 366
    ______r___2 = mgr->lastid == id;
#line 366
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 366
    if (______r___2 != 0) {
#line 367
      ______f___1.func = "do_ack";
#line 367
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 367
      ______f___1.line = 367U;
#line 367
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 367
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 367
      tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 367
      ______r___1 = tmp___0 != 0;
#line 367
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 367
      if (______r___1 != 0) {
#line 370
        skb = skb_dequeue(& mgr->sendq);
#line 371
        ______f___0.func = "do_ack";
#line 371
        ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 371
        ______f___0.line = 371U;
#line 371
        ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 371
        ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 371
        ______r___0 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 371
        ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 371
        if (______r___0 != 0) {
#line 372
          mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
#line 373
          ______f.func = "do_ack";
#line 373
          ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 373
          ______f.line = 373U;
#line 373
          ______f.ldv_815.ldv_809.correct = 0UL;
#line 373
          ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 373
          tmp = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 373
          ______r = tmp == 0;
#line 373
          ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 373
          if (______r != 0) {
#line 374
            return;
          } else {

          }
#line 375
          consume_skb(skb);
        } else {

        }
      } else {

      }
#line 378
      mgr->lastid = 65534U;
#line 379
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
#line 381
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void mgr_send_down(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 387
  skb_queue_tail(& mgr->sendq, skb);
#line 388
  ______f.func = "mgr_send_down";
#line 388
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 388
  ______f.line = 388U;
#line 388
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 388
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 388
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 388
  ______r = tmp == 0;
#line 388
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 388
  if (______r != 0) {
#line 389
    _queue_data___0(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {
#line 392
    do_send(mgr);
  }
#line 393
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int dl_unit_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;

  {
#line 399
  ______f.func = "dl_unit_data";
#line 399
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 399
  ______f.line = 399U;
#line 399
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 399
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 399
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 399
  ______r = tmp == 0;
#line 399
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 399
  if (______r != 0) {
#line 400
    return (-22);
  } else {

  }
#line 401
  ______f___0.func = "dl_unit_data";
#line 401
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 401
  ______f___0.line = 401U;
#line 401
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 401
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 401
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 401
  ______r___0 = tmp___0 == 0;
#line 401
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 401
  if (______r___0 != 0) {
#line 402
    _queue_data___0(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {

  }
#line 404
  skb_push(skb, 3U);
#line 405
  *(skb->data) = 2U;
#line 406
  *(skb->data + 1UL) = 255U;
#line 407
  *(skb->data + 2UL) = 3U;
#line 408
  ((struct mISDNhead *)(& skb->cb))->prim = 8193U;
#line 409
  ((struct mISDNhead *)(& skb->cb))->id = new_id(mgr);
#line 410
  skb_queue_tail(& mgr->sendq, skb);
#line 411
  do_send(mgr);
#line 412
  return (0);
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static unsigned int random_ri(void) 
{ 
  u16 x ;

  {
#line 420
  get_random_bytes((void *)(& x), 2);
#line 421
  return ((unsigned int )x);
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct layer2 *findtei(struct manager *mgr , int tei ) 
{ 
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;

  {
#line 430
  flags = _read_lock_irqsave(& mgr->lock);
#line 431
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 431
  l2 = (struct layer2 *)__mptr;
#line 431
  goto ldv_35123;
  ldv_35122: 
#line 432
  ______f.func = "findtei";
#line 432
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 432
  ______f.line = 433U;
#line 432
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 432
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 432
  ______r = (((int )l2->sapi == 0 && (int )l2->tei > 0) && (int )l2->tei != 127) && (int )l2->tei == tei;
#line 432
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 432
  if (______r != 0) {
#line 434
    goto done;
  } else {

  }
#line 431
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 431
  l2 = (struct layer2 *)__mptr___0;
  ldv_35123: 
#line 431
  __builtin_prefetch((void const   *)l2->list.next);
#line 431
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 432
    goto ldv_35122;
  } else {

  }
#line 436
  l2 = 0;
  done: 
#line 438
  _read_unlock_irqrestore(& mgr->lock, flags);
#line 439
  return (l2);
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void put_tei_msg(struct manager *mgr , u_char m_id , unsigned int ri , int tei ) 
{ 
  struct sk_buff *skb ;
  u_char bp[8U] ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  u_int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 448
  bp[0] = 252U;
#line 449
  ______f.func = "put_tei_msg";
#line 449
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 449
  ______f.line = 449U;
#line 449
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 449
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 449
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 449
  ______r = tmp != 0;
#line 449
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 449
  if (______r != 0) {
#line 450
    bp[0] = (u_char )((unsigned int )bp[0] | 2U);
  } else {

  }
#line 451
  bp[1] = 255U;
#line 452
  bp[2] = 3U;
#line 453
  bp[3] = 15U;
#line 454
  bp[4] = (u_char )(ri >> 8);
#line 455
  bp[5] = (u_char )ri;
#line 456
  bp[6] = m_id;
#line 457
  bp[7] = (u_char )((int )((signed char )(tei << 1)) | 1);
#line 458
  tmp___0 = new_id(mgr);
#line 458
  skb = _alloc_mISDN_skb___0(8193U, tmp___0, 8U, (void *)(& bp), 32U);
#line 459
  ______f___0.func = "put_tei_msg";
#line 459
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 459
  ______f___0.line = 459U;
#line 459
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 459
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 459
  ______r___0 = (unsigned long )skb == (unsigned long )((struct sk_buff *)0);
#line 459
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 459
  if (______r___0 != 0) {
#line 460
    printk("<4>%s: no skb for tei msg\n", "put_tei_msg");
#line 461
    return;
  } else {

  }
#line 463
  mgr_send_down(mgr, skb);
#line 464
  return;
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_request(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 469
  tm = (struct teimgr *)fi->userdata;
#line 471
  ______f.func = "tei_id_request";
#line 471
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 471
  ______f.line = 471U;
#line 471
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 471
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 471
  ______r = (int )(tm->l2)->tei != 127;
#line 471
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 471
  if (______r != 0) {
#line 472
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request for allready assigned tei %d",
                              (int )(tm->l2)->tei);
#line 475
    return;
  } else {

  }
#line 477
  tmp = random_ri();
#line 477
  tm->ri = (int )tmp;
#line 478
  ______f___0.func = "tei_id_request";
#line 478
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 478
  ______f___0.line = 478U;
#line 478
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 478
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 478
  ______r___0 = (*debug___5 & 1048576U) != 0U;
#line 478
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 478
  if (______r___0 != 0) {
#line 479
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request ri %d", tm->ri);
  } else {

  }
#line 481
  put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
#line 482
  mISDN_FsmChangeState(fi, 1);
#line 483
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 1);
#line 484
  tm->nval = 3;
#line 485
  return;
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 490
  tm = (struct teimgr *)fi->userdata;
#line 492
  dp = (u_char *)arg;
#line 495
  tmp = dp;
#line 495
  dp = dp + 1;
#line 495
  ri = (int )((unsigned int )*tmp << 8);
#line 496
  tmp___0 = dp;
#line 496
  dp = dp + 1;
#line 496
  ri = (int )*tmp___0 + ri;
#line 497
  dp = dp + 1;
#line 498
  tei = (int )*dp >> 1;
#line 499
  ______f.func = "tei_id_assign";
#line 499
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 499
  ______f.line = 499U;
#line 499
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 499
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 499
  ______r = (*debug___5 & 1048576U) != 0U;
#line 499
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 499
  if (______r != 0) {
#line 500
    (*(tm->tei_m.printdebug))(fi, (char *)"identity assign ri %d tei %d", ri, tei);
  } else {

  }
#line 502
  l2 = findtei(tm->mgr, tei);
#line 503
  ______f___2.func = "tei_id_assign";
#line 503
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 503
  ______f___2.line = 503U;
#line 503
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 503
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 503
  ______r___2 = (unsigned long )l2 != (unsigned long )((struct layer2 *)0);
#line 503
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 503
  if (______r___2 != 0) {
#line 504
    ______f___1.func = "tei_id_assign";
#line 504
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 504
    ______f___1.line = 504U;
#line 504
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 504
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 504
    ______r___1 = (l2->tm)->ri != ri;
#line 504
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 504
    if (______r___1 != 0) {
#line 505
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
#line 507
      tei_l2(l2, 24324U, 0UL);
    } else {
#line 509
      ______f___0.func = "tei_id_assign";
#line 509
      ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 509
      ______f___0.line = 509U;
#line 509
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 509
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 509
      ______r___0 = tm->ri == ri;
#line 509
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 509
      if (______r___0 != 0) {
#line 510
        mISDN_FsmDelTimer(& tm->timer, 1);
#line 511
        mISDN_FsmChangeState(fi, 0);
#line 512
        tei_l2(tm->l2, 6148U, (u_long )tei);
      } else {

      }
    }
  } else {

  }
#line 514
  return;
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_test_dup(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int tei ;
  int ri ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 519
  tm = (struct teimgr *)fi->userdata;
#line 521
  dp = (u_char *)arg;
#line 524
  tmp = dp;
#line 524
  dp = dp + 1;
#line 524
  ri = (int )((unsigned int )*tmp << 8);
#line 525
  tmp___0 = dp;
#line 525
  dp = dp + 1;
#line 525
  ri = (int )*tmp___0 + ri;
#line 526
  dp = dp + 1;
#line 527
  tei = (int )*dp >> 1;
#line 528
  ______f.func = "tei_id_test_dup";
#line 528
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 528
  ______f.line = 528U;
#line 528
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 528
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 528
  ______r = (*debug___5 & 1048576U) != 0U;
#line 528
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 528
  if (______r != 0) {
#line 529
    (*(tm->tei_m.printdebug))(fi, (char *)"foreign identity assign ri %d tei %d",
                              ri, tei);
  } else {

  }
#line 531
  l2 = findtei(tm->mgr, tei);
#line 532
  ______f___1.func = "tei_id_test_dup";
#line 532
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 532
  ______f___1.line = 532U;
#line 532
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 532
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 532
  ______r___1 = (unsigned long )l2 != (unsigned long )((struct layer2 *)0);
#line 532
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 532
  if (______r___1 != 0) {
#line 533
    ______f___0.func = "tei_id_test_dup";
#line 533
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 533
    ______f___0.line = 533U;
#line 533
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 533
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 533
    ______r___0 = (l2->tm)->ri != ri;
#line 533
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 533
    if (______r___0 != 0) {
#line 534
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
#line 536
      mISDN_FsmEvent(& (l2->tm)->tei_m, 7, 0);
    } else {

    }
  } else {

  }
#line 538
  return;
}
}
#line 542 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_denied(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 544
  tm = (struct teimgr *)fi->userdata;
#line 545
  dp = (u_char *)arg;
#line 548
  tmp = dp;
#line 548
  dp = dp + 1;
#line 548
  ri = (int )((unsigned int )*tmp << 8);
#line 549
  tmp___0 = dp;
#line 549
  dp = dp + 1;
#line 549
  ri = (int )*tmp___0 + ri;
#line 550
  dp = dp + 1;
#line 551
  tei = (int )*dp >> 1;
#line 552
  ______f.func = "tei_id_denied";
#line 552
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 552
  ______f.line = 552U;
#line 552
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 552
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 552
  ______r = (*debug___5 & 1048576U) != 0U;
#line 552
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 552
  if (______r != 0) {
#line 553
    (*(tm->tei_m.printdebug))(fi, (char *)"identity denied ri %d tei %d", ri, tei);
  } else {

  }
#line 554
  return;
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 560
  tm = (struct teimgr *)fi->userdata;
#line 561
  dp = (u_char *)arg;
#line 564
  tei = (int )*(dp + 3UL) >> 1;
#line 565
  ______f.func = "tei_id_chk_req";
#line 565
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 565
  ______f.line = 565U;
#line 565
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 565
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 565
  ______r = (*debug___5 & 1048576U) != 0U;
#line 565
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 565
  if (______r != 0) {
#line 566
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check req tei %d", tei);
  } else {

  }
#line 567
  ______f___0.func = "tei_id_chk_req";
#line 567
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 567
  ______f___0.line = 568U;
#line 567
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 567
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 567
  ______r___0 = (int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei);
#line 567
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 567
  if (______r___0 != 0) {
#line 569
    mISDN_FsmDelTimer(& tm->timer, 4);
#line 570
    mISDN_FsmChangeState(& tm->tei_m, 0);
#line 571
    tmp = random_ri();
#line 571
    put_tei_msg(tm->mgr, 5, tmp, (int )(tm->l2)->tei);
  } else {

  }
#line 573
  return;
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 578
  tm = (struct teimgr *)fi->userdata;
#line 579
  dp = (u_char *)arg;
#line 582
  tei = (int )*(dp + 3UL) >> 1;
#line 583
  ______f.func = "tei_id_remove";
#line 583
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 583
  ______f.line = 583U;
#line 583
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 583
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 583
  ______r = (*debug___5 & 1048576U) != 0U;
#line 583
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 583
  if (______r != 0) {
#line 584
    (*(tm->tei_m.printdebug))(fi, (char *)"identity remove tei %d", tei);
  } else {

  }
#line 585
  ______f___0.func = "tei_id_remove";
#line 585
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 585
  ______f___0.line = 586U;
#line 585
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 585
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 585
  ______r___0 = (int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei);
#line 585
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 585
  if (______r___0 != 0) {
#line 587
    mISDN_FsmDelTimer(& tm->timer, 5);
#line 588
    mISDN_FsmChangeState(& tm->tei_m, 0);
#line 589
    tei_l2(tm->l2, 6660U, 0UL);
  } else {

  }
#line 591
  return;
}
}
#line 594 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_verify(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 596
  tm = (struct teimgr *)fi->userdata;
#line 598
  ______f.func = "tei_id_verify";
#line 598
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 598
  ______f.line = 598U;
#line 598
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 598
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 598
  ______r = (*debug___5 & 1048576U) != 0U;
#line 598
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 598
  if (______r != 0) {
#line 599
    (*(tm->tei_m.printdebug))(fi, (char *)"id verify request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
#line 601
  put_tei_msg(tm->mgr, 7, 0U, (int )(tm->l2)->tei);
#line 602
  mISDN_FsmChangeState(& tm->tei_m, 2);
#line 603
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
#line 604
  tm->nval = 2;
#line 605
  return;
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_req_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 610
  tm = (struct teimgr *)fi->userdata;
#line 612
  ______f___0.func = "tei_id_req_tout";
#line 612
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 612
  ______f___0.line = 612U;
#line 612
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 612
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 612
  tm->nval = tm->nval - 1;
#line 612
  ______r___0 = tm->nval != 0;
#line 612
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 612
  if (______r___0 != 0) {
#line 613
    tmp = random_ri();
#line 613
    tm->ri = (int )tmp;
#line 614
    ______f.func = "tei_id_req_tout";
#line 614
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 614
    ______f.line = 614U;
#line 614
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 614
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 614
    ______r = (*debug___5 & 1048576U) != 0U;
#line 614
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 614
    if (______r != 0) {
#line 615
      (*(tm->tei_m.printdebug))(fi, (char *)"assign req(%d) ri %d", 4 - tm->nval,
                                tm->ri);
    } else {

    }
#line 617
    put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
#line 618
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 3);
  } else {
#line 620
    (*(tm->tei_m.printdebug))(fi, (char *)"assign req failed");
#line 621
    tei_l2(tm->l2, 24324U, 0UL);
#line 622
    mISDN_FsmChangeState(fi, 0);
  }
#line 624
  return;
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_ver_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 629
  tm = (struct teimgr *)fi->userdata;
#line 631
  ______f___0.func = "tei_id_ver_tout";
#line 631
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 631
  ______f___0.line = 631U;
#line 631
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 631
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 631
  tm->nval = tm->nval - 1;
#line 631
  ______r___0 = tm->nval != 0;
#line 631
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 631
  if (______r___0 != 0) {
#line 632
    ______f.func = "tei_id_ver_tout";
#line 632
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 632
    ______f.line = 632U;
#line 632
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 632
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 632
    ______r = (*debug___5 & 1048576U) != 0U;
#line 632
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 632
    if (______r != 0) {
#line 633
      (*(tm->tei_m.printdebug))(fi, (char *)"id verify req(%d) for tei %d", 3 - tm->nval,
                                (int )(tm->l2)->tei);
    } else {

    }
#line 636
    put_tei_msg(tm->mgr, 7, 0U, (int )(tm->l2)->tei);
#line 637
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
  } else {
#line 639
    (*(tm->tei_m.printdebug))(fi, (char *)"verify req for tei %d failed", (int )(tm->l2)->tei);
#line 641
    tei_l2(tm->l2, 6660U, 0UL);
#line 642
    mISDN_FsmChangeState(fi, 0);
  }
#line 644
  return;
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode TeiFnListUser[11U]  = 
#line 646
  {      {0, 0, & tei_id_request}, 
        {0, 1, & tei_id_test_dup}, 
        {0, 7, & tei_id_verify}, 
        {0, 6, & tei_id_remove}, 
        {0, 4, & tei_id_chk_req}, 
        {1, 8, & tei_id_req_tout}, 
        {1, 1, & tei_id_assign}, 
        {1, 3, & tei_id_denied}, 
        {2, 8, & tei_id_ver_tout}, 
        {2, 6, & tei_id_remove}, 
        {2, 4, & tei_id_chk_req}};
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_l2remove(struct layer2 *l2 ) 
{ 


  {
#line 664
  put_tei_msg((l2->tm)->mgr, 6, 0U, (int )l2->tei);
#line 665
  tei_l2(l2, 6660U, 0UL);
#line 666
  list_del(& l2->ch.list);
#line 667
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 668
  return;
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_assign_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 673
  tm = (struct teimgr *)fi->userdata;
#line 674
  dp = (u_char *)arg;
#line 676
  ______f.func = "tei_assign_req";
#line 676
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 676
  ______f.line = 676U;
#line 676
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 676
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 676
  ______r = (int )(tm->l2)->tei == 127;
#line 676
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 676
  if (______r != 0) {
#line 677
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net tei assign request without tei");
#line 679
    return;
  } else {

  }
#line 681
  tmp = dp;
#line 681
  dp = dp + 1;
#line 681
  tm->ri = (int )((unsigned int )*tmp << 8);
#line 682
  tmp___0 = dp;
#line 682
  dp = dp + 1;
#line 682
  tm->ri = tm->ri + (int )*tmp___0;
#line 683
  ______f___0.func = "tei_assign_req";
#line 683
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 683
  ______f___0.line = 683U;
#line 683
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 683
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 683
  ______r___0 = (*debug___5 & 1048576U) != 0U;
#line 683
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 683
  if (______r___0 != 0) {
#line 684
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net assign request ri %d teim %d",
                              tm->ri, (int )*dp);
  } else {

  }
#line 686
  put_tei_msg(tm->mgr, 2, (unsigned int )tm->ri, (int )(tm->l2)->tei);
#line 687
  mISDN_FsmChangeState(fi, 0);
#line 688
  return;
}
}
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_req_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 693
  tm = (struct teimgr *)fi->userdata;
#line 695
  ______f.func = "tei_id_chk_req_net";
#line 695
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 695
  ______f.line = 695U;
#line 695
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 695
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 695
  ______r = (*debug___5 & 1048576U) != 0U;
#line 695
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 695
  if (______r != 0) {
#line 696
    (*(tm->tei_m.printdebug))(fi, (char *)"id check request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
#line 698
  tm->rcnt = 0;
#line 699
  put_tei_msg(tm->mgr, 4, 0U, (int )(tm->l2)->tei);
#line 700
  mISDN_FsmChangeState(& tm->tei_m, 2);
#line 701
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
#line 702
  tm->nval = 2;
#line 703
  return;
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_resp(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 708
  tm = (struct teimgr *)fi->userdata;
#line 709
  dp = (u_char *)arg;
#line 712
  tei = (int )*(dp + 3UL) >> 1;
#line 713
  ______f.func = "tei_id_chk_resp";
#line 713
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 713
  ______f.line = 713U;
#line 713
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 713
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 713
  ______r = (*debug___5 & 1048576U) != 0U;
#line 713
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 713
  if (______r != 0) {
#line 714
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check resp tei %d", tei);
  } else {

  }
#line 715
  ______f___0.func = "tei_id_chk_resp";
#line 715
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 715
  ______f___0.line = 715U;
#line 715
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 715
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 715
  ______r___0 = (int )(tm->l2)->tei == tei;
#line 715
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 715
  if (______r___0 != 0) {
#line 716
    tm->rcnt = tm->rcnt + 1;
  } else {

  }
#line 717
  return;
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_verify_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 722
  tm = (struct teimgr *)fi->userdata;
#line 723
  dp = (u_char *)arg;
#line 726
  tei = (int )*(dp + 3UL) >> 1;
#line 727
  ______f.func = "tei_id_verify_net";
#line 727
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 727
  ______f.line = 727U;
#line 727
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 727
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 727
  ______r = (*debug___5 & 1048576U) != 0U;
#line 727
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 727
  if (______r != 0) {
#line 728
    (*(tm->tei_m.printdebug))(fi, (char *)"identity verify req tei %d/%d", tei, (int )(tm->l2)->tei);
  } else {

  }
#line 730
  ______f___0.func = "tei_id_verify_net";
#line 730
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 730
  ______f___0.line = 730U;
#line 730
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 730
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 730
  ______r___0 = (int )(tm->l2)->tei == tei;
#line 730
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 730
  if (______r___0 != 0) {
#line 731
    tei_id_chk_req_net(fi, event, arg);
  } else {

  }
#line 732
  return;
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_ver_tout_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 737
  tm = (struct teimgr *)fi->userdata;
#line 739
  ______f___3.func = "tei_id_ver_tout_net";
#line 739
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 739
  ______f___3.line = 739U;
#line 739
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 739
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 739
  ______r___3 = tm->rcnt == 1;
#line 739
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 739
  if (______r___3 != 0) {
#line 740
    ______f.func = "tei_id_ver_tout_net";
#line 740
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 740
    ______f.line = 740U;
#line 740
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 740
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 740
    ______r = (*debug___5 & 1048576U) != 0U;
#line 740
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 740
    if (______r != 0) {
#line 741
      (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d sucessful\n", (int )(tm->l2)->tei);
    } else {

    }
#line 743
    mISDN_FsmChangeState(fi, 0);
  } else {
#line 744
    ______f___2.func = "tei_id_ver_tout_net";
#line 744
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 744
    ______f___2.line = 744U;
#line 744
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 744
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 744
    ______r___2 = tm->rcnt > 1;
#line 744
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 744
    if (______r___2 != 0) {
#line 746
      tei_l2remove(tm->l2);
    } else {
#line 747
      ______f___1.func = "tei_id_ver_tout_net";
#line 747
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 747
      ______f___1.line = 747U;
#line 747
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 747
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 747
      tm->nval = tm->nval - 1;
#line 747
      ______r___1 = tm->nval != 0;
#line 747
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 747
      if (______r___1 != 0) {
#line 748
        ______f___0.func = "tei_id_ver_tout_net";
#line 748
        ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 748
        ______f___0.line = 748U;
#line 748
        ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 748
        ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 748
        ______r___0 = (*debug___5 & 1048576U) != 0U;
#line 748
        ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 748
        if (______r___0 != 0) {
#line 749
          (*(tm->tei_m.printdebug))(fi, (char *)"id check req(%d) for tei %d", 3 - tm->nval,
                                    (int )(tm->l2)->tei);
        } else {

        }
#line 752
        put_tei_msg(tm->mgr, 4, 0U, (int )(tm->l2)->tei);
#line 753
        mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
      } else {
#line 755
        (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d failed", (int )(tm->l2)->tei);
#line 757
        mISDN_FsmChangeState(fi, 0);
#line 758
        tei_l2remove(tm->l2);
      }
    }
  }
#line 760
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode TeiFnListNet[5U]  = {      {0, 2, & tei_assign_req}, 
        {0, 7, & tei_id_verify_net}, 
        {0, 4, & tei_id_chk_req_net}, 
        {2, 8, & tei_id_ver_tout_net}, 
        {2, 5, & tei_id_chk_resp}};
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_ph_data_ind(struct teimgr *tm , u_int mt , u_char *dp , int len ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;

  {
#line 774
  ______f.func = "tei_ph_data_ind";
#line 774
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 774
  ______f.line = 774U;
#line 774
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 774
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 774
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& (tm->l2)->flag));
#line 774
  ______r = tmp != 0;
#line 774
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 774
  if (______r != 0) {
#line 775
    return;
  } else {

  }
#line 776
  ______f___0.func = "tei_ph_data_ind";
#line 776
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 776
  ______f___0.line = 776U;
#line 776
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 776
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 776
  ______r___0 = (*debug___5 & 1048576U) != 0U;
#line 776
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 776
  if (______r___0 != 0) {
#line 777
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"tei handler mt %x", mt);
  } else {

  }
#line 778
  ______f___6.func = "tei_ph_data_ind";
#line 778
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 778
  ______f___6.line = 778U;
#line 778
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 778
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 778
  ______r___6 = mt == 2U;
#line 778
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 778
  if (______r___6 != 0) {
#line 779
    mISDN_FsmEvent(& tm->tei_m, 1, (void *)dp);
  } else {
#line 780
    ______f___5.func = "tei_ph_data_ind";
#line 780
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 780
    ______f___5.line = 780U;
#line 780
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 780
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 780
    ______r___5 = mt == 3U;
#line 780
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 780
    if (______r___5 != 0) {
#line 781
      mISDN_FsmEvent(& tm->tei_m, 3, (void *)dp);
    } else {
#line 782
      ______f___4.func = "tei_ph_data_ind";
#line 782
      ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 782
      ______f___4.line = 782U;
#line 782
      ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 782
      ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 782
      ______r___4 = mt == 4U;
#line 782
      ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 782
      if (______r___4 != 0) {
#line 783
        mISDN_FsmEvent(& tm->tei_m, 4, (void *)dp);
      } else {
#line 784
        ______f___3.func = "tei_ph_data_ind";
#line 784
        ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 784
        ______f___3.line = 784U;
#line 784
        ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 784
        ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 784
        ______r___3 = mt == 6U;
#line 784
        ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 784
        if (______r___3 != 0) {
#line 785
          mISDN_FsmEvent(& tm->tei_m, 6, (void *)dp);
        } else {
#line 786
          ______f___2.func = "tei_ph_data_ind";
#line 786
          ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 786
          ______f___2.line = 786U;
#line 786
          ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 786
          ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 786
          ______r___2 = mt == 7U;
#line 786
          ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 786
          if (______r___2 != 0) {
#line 787
            mISDN_FsmEvent(& tm->tei_m, 7, (void *)dp);
          } else {
#line 788
            ______f___1.func = "tei_ph_data_ind";
#line 788
            ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 788
            ______f___1.line = 788U;
#line 788
            ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 788
            ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 788
            ______r___1 = mt == 5U;
#line 788
            ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 788
            if (______r___1 != 0) {
#line 789
              mISDN_FsmEvent(& tm->tei_m, 5, (void *)dp);
            } else {

            }
          }
        }
      }
    }
  }
#line 790
  return;
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static struct layer2 *create_new_tei(struct manager *mgr , int tei , int sapi ) 
{ 
  u_long opt ;
  u_long flags ;
  int id ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  void *tmp ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 795
  opt = 0UL;
#line 800
  ______f.func = "create_new_tei";
#line 800
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 800
  ______f.line = 800U;
#line 800
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 800
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 800
  ______r = (unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0);
#line 800
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 800
  if (______r != 0) {
#line 801
    return (0);
  } else {

  }
#line 802
  ______f___0.func = "create_new_tei";
#line 802
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 802
  ______f___0.line = 802U;
#line 802
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 802
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 802
  ______r___0 = tei >= 0 && tei <= 63;
#line 802
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 802
  if (______r___0 != 0) {
#line 803
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 804
  ______f___1.func = "create_new_tei";
#line 804
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 804
  ______f___1.line = 805U;
#line 804
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 804
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 804
  ______r___1 = (((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U;
#line 804
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 804
  if (______r___1 != 0) {
#line 806
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 807
  l2 = create_l2(mgr->up, 17U, opt, tei, sapi);
#line 808
  ______f___2.func = "create_new_tei";
#line 808
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 808
  ______f___2.line = 808U;
#line 808
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 808
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 808
  ______r___2 = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 808
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 808
  if (______r___2 != 0) {
#line 809
    printk("<4>%s:no memory for layer2\n", "create_new_tei");
#line 810
    return (0);
  } else {

  }
#line 812
  tmp = kzalloc(216UL, 208U);
#line 812
  l2->tm = (struct teimgr *)tmp;
#line 813
  ______f___3.func = "create_new_tei";
#line 813
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 813
  ______f___3.line = 813U;
#line 813
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 813
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 813
  ______r___3 = (unsigned long )l2->tm == (unsigned long )((struct teimgr *)0);
#line 813
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 813
  if (______r___3 != 0) {
#line 814
    kfree((void const   *)l2);
#line 815
    printk("<4>%s:no memory for teimgr\n", "create_new_tei");
#line 816
    return (0);
  } else {

  }
#line 818
  (l2->tm)->mgr = mgr;
#line 819
  (l2->tm)->l2 = l2;
#line 820
  (l2->tm)->tei_m.debug = (int )*debug___5 & 2097152;
#line 821
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
#line 822
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 823
  (l2->tm)->tei_m.fsm = & teifsmn;
#line 824
  (l2->tm)->tei_m.state = 0;
#line 825
  (l2->tm)->tval = 2000;
#line 826
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 827
  flags = _write_lock_irqsave(& mgr->lock);
#line 828
  id = get_free_id(mgr);
#line 829
  list_add_tail(& l2->list, & mgr->layer2);
#line 830
  _write_unlock_irqrestore(& mgr->lock, flags);
#line 831
  ______f___4.func = "create_new_tei";
#line 831
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 831
  ______f___4.line = 831U;
#line 831
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 831
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 831
  ______r___4 = id < 0;
#line 831
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 831
  if (______r___4 != 0) {
#line 832
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 833
    printk("<4>%s:no free id\n", "create_new_tei");
#line 834
    return (0);
  } else {
#line 836
    l2->ch.nr = (u_int )id;
#line 837
    __add_layer2(& l2->ch, mgr->ch.st);
#line 838
    l2->ch.recv = mgr->ch.recv;
#line 839
    l2->ch.peer = mgr->ch.peer;
#line 840
    (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
  }
#line 842
  return (l2);
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static void new_tei_req(struct manager *mgr , u_char *dp ) 
{ 
  int tei ;
  int ri ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 851
  ri = (int )*dp << 8;
#line 852
  ri = (int )*(dp + 1UL) + ri;
#line 853
  ______f.func = "new_tei_req";
#line 853
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 853
  ______f.line = 853U;
#line 853
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 853
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 853
  ______r = (unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0);
#line 853
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 853
  if (______r != 0) {
#line 854
    goto denied;
  } else {

  }
#line 855
  ______f___0.func = "new_tei_req";
#line 855
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 855
  ______f___0.line = 855U;
#line 855
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 855
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 855
  ______r___0 = ((int )*(dp + 3UL) & 1) == 0;
#line 855
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 855
  if (______r___0 != 0) {
#line 856
    goto denied;
  } else {

  }
#line 857
  ______f___1.func = "new_tei_req";
#line 857
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 857
  ______f___1.line = 857U;
#line 857
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 857
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 857
  ______r___1 = (unsigned int )*(dp + 3UL) != 255U;
#line 857
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 857
  if (______r___1 != 0) {
#line 858
    tei = (int )*(dp + 3UL) >> 1;
  } else {
#line 860
    tei = get_free_tei(mgr);
  }
#line 861
  ______f___2.func = "new_tei_req";
#line 861
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 861
  ______f___2.line = 861U;
#line 861
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 861
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 861
  ______r___2 = tei < 0;
#line 861
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 861
  if (______r___2 != 0) {
#line 862
    printk("<4>%s:No free tei\n", "new_tei_req");
#line 863
    goto denied;
  } else {

  }
#line 865
  l2 = create_new_tei(mgr, tei, 0);
#line 866
  ______f___3.func = "new_tei_req";
#line 866
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 866
  ______f___3.line = 866U;
#line 866
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 866
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 866
  ______r___3 = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 866
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 866
  if (______r___3 != 0) {
#line 867
    goto denied;
  } else {
#line 869
    mISDN_FsmEvent(& (l2->tm)->tei_m, 2, (void *)dp);
  }
#line 870
  return;
  denied: 
#line 872
  put_tei_msg(mgr, 3, (unsigned int )ri, 127);
#line 873
  return;
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int ph_data_ind(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ret ;
  struct layer2 *l2 ;
  u_long flags ;
  u_char mt ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int tmp ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int tmp___0 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 878
  ret = -22;
#line 883
  ______f___0.func = "ph_data_ind";
#line 883
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 883
  ______f___0.line = 883U;
#line 883
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 883
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 883
  ______r___0 = skb->len <= 7U;
#line 883
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 883
  if (______r___0 != 0) {
#line 884
    ______f.func = "ph_data_ind";
#line 884
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 884
    ______f.line = 884U;
#line 884
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 884
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 884
    ______r = (*debug___5 & 1048576U) != 0U;
#line 884
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 884
    if (______r != 0) {
#line 885
      printk("<7>%s: short mgr frame %d/8\n", "ph_data_ind", skb->len);
    } else {

    }
#line 887
    goto done;
  } else {

  }
#line 890
  ______f___1.func = "ph_data_ind";
#line 890
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 890
  ______f___1.line = 890U;
#line 890
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 890
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 890
  ______r___1 = (unsigned int )((int )*(skb->data) >> 2) != 63U;
#line 890
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 890
  if (______r___1 != 0) {
#line 891
    goto done;
  } else {

  }
#line 892
  ______f___2.func = "ph_data_ind";
#line 892
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 892
  ______f___2.line = 892U;
#line 892
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 892
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 892
  ______r___2 = (int )*(skb->data) & 1;
#line 892
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 892
  if (______r___2 != 0) {
#line 893
    goto done;
  } else {

  }
#line 894
  ______f___3.func = "ph_data_ind";
#line 894
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 894
  ______f___3.line = 894U;
#line 894
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 894
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 894
  ______r___3 = ((int )*(skb->data + 1UL) & 1) == 0;
#line 894
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 894
  if (______r___3 != 0) {
#line 895
    goto done;
  } else {

  }
#line 896
  ______f___4.func = "ph_data_ind";
#line 896
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 896
  ______f___4.line = 896U;
#line 896
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 896
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 896
  ______r___4 = (unsigned int )((int )*(skb->data + 1UL) >> 1) != 127U;
#line 896
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 896
  if (______r___4 != 0) {
#line 897
    goto done;
  } else {

  }
#line 898
  ______f___5.func = "ph_data_ind";
#line 898
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 898
  ______f___5.line = 898U;
#line 898
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 898
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 898
  ______r___5 = ((int )*(skb->data + 2UL) & 239) != 3;
#line 898
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 898
  if (______r___5 != 0) {
#line 899
    goto done;
  } else {

  }
#line 900
  ______f___6.func = "ph_data_ind";
#line 900
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 900
  ______f___6.line = 900U;
#line 900
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 900
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 900
  ______r___6 = (unsigned int )*(skb->data + 3UL) != 15U;
#line 900
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 900
  if (______r___6 != 0) {
#line 901
    goto done;
  } else {

  }
#line 902
  mt = *(skb->data + 6UL);
#line 903
  switch ((int )mt) {
  case 1: ;
  case 5: ;
  case 7: 
#line 907
  ______f___7.func = "ph_data_ind";
#line 907
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 907
  ______f___7.line = 907U;
#line 907
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 907
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 907
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 907
  ______r___7 = tmp == 0;
#line 907
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 907
  if (______r___7 != 0) {
#line 908
    goto done;
  } else {

  }
#line 909
  goto ldv_35488;
  case 2: ;
  case 3: ;
  case 4: ;
  case 6: 
#line 914
  ______f___8.func = "ph_data_ind";
#line 914
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 914
  ______f___8.line = 914U;
#line 914
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 914
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 914
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 914
  ______r___8 = tmp___0 != 0;
#line 914
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 914
  if (______r___8 != 0) {
#line 915
    goto done;
  } else {

  }
#line 916
  goto ldv_35488;
  default: ;
#line 918
  goto done;
  }
  ldv_35488: 
#line 920
  ret = 0;
#line 921
  ______f___9.func = "ph_data_ind";
#line 921
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 921
  ______f___9.line = 921U;
#line 921
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 921
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 921
  ______r___9 = (unsigned int )mt == 1U;
#line 921
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 921
  if (______r___9 != 0) {
#line 922
    new_tei_req(mgr, skb->data + 4U);
#line 923
    goto done;
  } else {

  }
#line 925
  flags = _read_lock_irqsave(& mgr->lock);
#line 926
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 926
  l2 = (struct layer2 *)__mptr;
#line 926
  goto ldv_35508;
  ldv_35507: 
#line 927
  tei_ph_data_ind(l2->tm, (u_int )mt, skb->data + 4U, (int )(skb->len - 4U));
#line 926
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 926
  l2 = (struct layer2 *)__mptr___0;
  ldv_35508: 
#line 926
  __builtin_prefetch((void const   *)l2->list.next);
#line 926
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 927
    goto ldv_35507;
  } else {

  }
#line 929
  _read_unlock_irqrestore(& mgr->lock, flags);
  done: ;
#line 931
  return (ret);
}
}
#line 935 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___0 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___2 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___3 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___4 ;

  {
#line 937
  tm = l2->tm;
#line 939
  ______f.func = "l2_tei";
#line 939
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 939
  ______f.line = 939U;
#line 939
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 939
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 939
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& l2->flag));
#line 939
  ______r = tmp != 0;
#line 939
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 939
  if (______r != 0) {
#line 940
    return (0);
  } else {

  }
#line 941
  ______f___0.func = "l2_tei";
#line 941
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 941
  ______f___0.line = 941U;
#line 941
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 941
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 941
  ______r___0 = (*debug___5 & 1048576U) != 0U;
#line 941
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 941
  if (______r___0 != 0) {
#line 942
    printk("<7>%s: cmd(%x)\n", "l2_tei", cmd);
  } else {

  }
#line 943
  switch (cmd) {
  case (u_int )6404: 
#line 945
  mISDN_FsmEvent(& tm->tei_m, 0, 0);
#line 946
  goto ldv_35527;
  case (u_int )7940: 
#line 948
  ______f___1.func = "l2_tei";
#line 948
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 948
  ______f___1.line = 948U;
#line 948
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 948
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 948
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 948
  ______r___1 = tmp___0 != 0;
#line 948
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 948
  if (______r___1 != 0) {
#line 949
    mISDN_FsmEvent(& tm->tei_m, 4, (void *)(& l2->tei));
  } else {

  }
#line 950
  ______f___2.func = "l2_tei";
#line 950
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 950
  ______f___2.line = 950U;
#line 950
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 950
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 950
  tmp___1 = constant_test_bit(24U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 950
  ______r___2 = tmp___1 != 0;
#line 950
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 950
  if (______r___2 != 0) {
#line 951
    mISDN_FsmEvent(& tm->tei_m, 7, 0);
  } else {

  }
#line 952
  goto ldv_35527;
  case (u_int )7172: 
#line 954
  ______f___3.func = "l2_tei";
#line 954
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 954
  ______f___3.line = 954U;
#line 954
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 954
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 954
  tmp___2 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 954
  ______r___3 = tmp___2 != 0;
#line 954
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 954
  if (______r___3 != 0) {
#line 955
    mISDN_FsmEvent(& (tm->mgr)->deact, 0, 0);
  } else {

  }
#line 956
  goto ldv_35527;
  case (u_int )7428: 
#line 958
  ______f___4.func = "l2_tei";
#line 958
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 958
  ______f___4.line = 958U;
#line 958
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 958
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 958
  tmp___3 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 958
  ______r___4 = tmp___3 != 0;
#line 958
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 958
  if (______r___4 != 0) {
#line 959
    mISDN_FsmEvent(& (tm->mgr)->deact, 2, 0);
  } else {

  }
#line 960
  goto ldv_35527;
  case (u_int )7684: 
#line 962
  ______f___5.func = "l2_tei";
#line 962
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 962
  ______f___5.line = 962U;
#line 962
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 962
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 962
  tmp___4 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 962
  ______r___5 = tmp___4 != 0;
#line 962
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 962
  if (______r___5 != 0) {
#line 963
    mISDN_FsmEvent(& (tm->mgr)->deact, 4, 0);
  } else {

  }
#line 964
  goto ldv_35527;
  }
  ldv_35527: ;
#line 966
  return (0);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
void TEIrelease(struct layer2 *l2 ) 
{ 
  struct teimgr *tm ;
  u_long flags ;

  {
#line 972
  tm = l2->tm;
#line 975
  mISDN_FsmDelTimer(& tm->timer, 1);
#line 976
  flags = _write_lock_irqsave(& (tm->mgr)->lock);
#line 977
  list_del(& l2->list);
#line 978
  _write_unlock_irqrestore(& (tm->mgr)->lock, flags);
#line 979
  l2->tm = 0;
#line 980
  kfree((void const   *)tm);
#line 981
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int create_teimgr(struct manager *mgr , struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  u_long opt ;
  u_long flags ;
  int id ;
  char const   *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int tmp___0 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int tmp___1 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int tmp___2 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  void *tmp___3 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;

  {
#line 987
  opt = 0UL;
#line 991
  ______f.func = "create_teimgr";
#line 991
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 991
  ______f.line = 991U;
#line 991
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 991
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 991
  ______r = (*debug___5 & 1048576U) != 0U;
#line 991
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 991
  if (______r != 0) {
#line 992
    tmp = dev_name((struct device  const  *)(& ((mgr->ch.st)->dev)->dev));
#line 992
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_teimgr", tmp, crq->protocol,
           (int )crq->adr.dev, (int )crq->adr.channel, (int )crq->adr.sapi, (int )crq->adr.tei);
  } else {

  }
#line 996
  ______f___0.func = "create_teimgr";
#line 996
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 996
  ______f___0.line = 996U;
#line 996
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 996
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 996
  ______r___0 = (int )((signed char )crq->adr.tei) < 0;
#line 996
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 996
  if (______r___0 != 0) {
#line 997
    return (-22);
  } else {

  }
#line 998
  ______f___1.func = "create_teimgr";
#line 998
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 998
  ______f___1.line = 998U;
#line 998
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 998
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 998
  ______r___1 = (unsigned int )crq->adr.tei <= 63U;
#line 998
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 998
  if (______r___1 != 0) {
#line 999
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1000
  ______f___2.func = "create_teimgr";
#line 1000
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1000
  ______f___2.line = 1000U;
#line 1000
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1000
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1000
  ______r___2 = (unsigned int )crq->adr.tei == 0U;
#line 1000
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1000
  if (______r___2 != 0) {
#line 1001
    test_and_set_bit(2, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1002
  ______f___11.func = "create_teimgr";
#line 1002
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1002
  ______f___11.line = 1002U;
#line 1002
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1002
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1002
  tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 1002
  ______r___11 = tmp___1 != 0;
#line 1002
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1002
  if (______r___11 != 0) {
#line 1003
    ______f___3.func = "create_teimgr";
#line 1003
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1003
    ______f___3.line = 1003U;
#line 1003
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1003
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1003
    ______r___3 = crq->protocol == 16U;
#line 1003
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1003
    if (______r___3 != 0) {
#line 1004
      return (-93);
    } else {

    }
#line 1005
    ______f___4.func = "create_teimgr";
#line 1005
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1005
    ______f___4.line = 1005U;
#line 1005
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1005
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1005
    ______r___4 = (unsigned int )crq->adr.tei != 0U && (unsigned int )crq->adr.tei != 127U;
#line 1005
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1005
    if (______r___4 != 0) {
#line 1006
      return (-22);
    } else {

    }
#line 1007
    ______f___5.func = "create_teimgr";
#line 1007
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1007
    ______f___5.line = 1007U;
#line 1007
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1007
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1007
    ______r___5 = (unsigned long )mgr->up != (unsigned long )((struct mISDNchannel *)0);
#line 1007
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1007
    if (______r___5 != 0) {
#line 1008
      printk("<4>%s: only one network manager is allowed\n", "create_teimgr");
#line 1011
      return (-16);
    } else {

    }
  } else {
#line 1013
    ______f___10.func = "create_teimgr";
#line 1013
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1013
    ______f___10.line = 1013U;
#line 1013
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1013
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1013
    tmp___0 = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1013
    ______r___10 = tmp___0 != 0;
#line 1013
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1013
    if (______r___10 != 0) {
#line 1014
      ______f___6.func = "create_teimgr";
#line 1014
      ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1014
      ______f___6.line = 1014U;
#line 1014
      ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1014
      ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1014
      ______r___6 = crq->protocol == 17U;
#line 1014
      ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1014
      if (______r___6 != 0) {
#line 1015
        return (-93);
      } else {

      }
#line 1016
      ______f___7.func = "create_teimgr";
#line 1016
      ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1016
      ______f___7.line = 1016U;
#line 1016
      ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1016
      ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1016
      ______r___7 = (unsigned int )crq->adr.tei > 63U && (unsigned int )crq->adr.tei <= 126U;
#line 1016
      ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1016
      if (______r___7 != 0) {
#line 1017
        return (-22);
      } else {

      }
    } else {
#line 1019
      ______f___8.func = "create_teimgr";
#line 1019
      ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1019
      ______f___8.line = 1019U;
#line 1019
      ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1019
      ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1019
      ______r___8 = crq->protocol == 17U;
#line 1019
      ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1019
      if (______r___8 != 0) {
#line 1020
        test_and_set_bit(25, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
#line 1021
      ______f___9.func = "create_teimgr";
#line 1021
      ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1021
      ______f___9.line = 1021U;
#line 1021
      ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1021
      ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1021
      ______r___9 = crq->protocol == 16U;
#line 1021
      ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1021
      if (______r___9 != 0) {
#line 1022
        test_and_set_bit(24, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
    }
  }
#line 1024
  ______f___12.func = "create_teimgr";
#line 1024
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1024
  ______f___12.line = 1025U;
#line 1024
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1024
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1024
  ______r___12 = (((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U;
#line 1024
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1024
  if (______r___12 != 0) {
#line 1026
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1027
  ______f___14.func = "create_teimgr";
#line 1027
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1027
  ______f___14.line = 1027U;
#line 1027
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 1027
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 1027
  ______r___14 = crq->protocol == 17U && (unsigned int )crq->adr.tei == 127U;
#line 1027
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 1027
  if (______r___14 != 0) {
#line 1028
    mgr->up = crq->ch;
#line 1029
    id = 1;
#line 1030
    teiup_create(mgr, 8U, 4, (void *)(& id));
#line 1031
    crq->ch = 0;
#line 1032
    ______f___13.func = "create_teimgr";
#line 1032
    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1032
    ______f___13.line = 1032U;
#line 1032
    ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1032
    ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1032
    tmp___2 = list_empty((struct list_head  const  *)(& mgr->layer2));
#line 1032
    ______r___13 = tmp___2 == 0;
#line 1032
    ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1032
    if (______r___13 != 0) {
#line 1033
      flags = _read_lock_irqsave(& mgr->lock);
#line 1034
      __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 1034
      l2 = (struct layer2 *)__mptr;
#line 1034
      goto ldv_35623;
      ldv_35622: 
#line 1035
      l2->up = mgr->up;
#line 1036
      (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
#line 1034
      __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 1034
      l2 = (struct layer2 *)__mptr___0;
      ldv_35623: 
#line 1034
      __builtin_prefetch((void const   *)l2->list.next);
#line 1034
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1035
        goto ldv_35622;
      } else {

      }
#line 1038
      _read_unlock_irqrestore(& mgr->lock, flags);
    } else {

    }
#line 1040
    return (0);
  } else {

  }
#line 1042
  l2 = create_l2(crq->ch, crq->protocol, opt, (int )crq->adr.tei, (int )crq->adr.sapi);
#line 1044
  ______f___15.func = "create_teimgr";
#line 1044
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1044
  ______f___15.line = 1044U;
#line 1044
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 1044
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 1044
  ______r___15 = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 1044
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 1044
  if (______r___15 != 0) {
#line 1045
    return (-12);
  } else {

  }
#line 1046
  tmp___3 = kzalloc(216UL, 208U);
#line 1046
  l2->tm = (struct teimgr *)tmp___3;
#line 1047
  ______f___16.func = "create_teimgr";
#line 1047
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1047
  ______f___16.line = 1047U;
#line 1047
  ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 1047
  ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 1047
  ______r___16 = (unsigned long )l2->tm == (unsigned long )((struct teimgr *)0);
#line 1047
  ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 1047
  if (______r___16 != 0) {
#line 1048
    kfree((void const   *)l2);
#line 1049
    printk("<3>kmalloc teimgr failed\n");
#line 1050
    return (-12);
  } else {

  }
#line 1052
  (l2->tm)->mgr = mgr;
#line 1053
  (l2->tm)->l2 = l2;
#line 1054
  (l2->tm)->tei_m.debug = (int )*debug___5 & 2097152;
#line 1055
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
#line 1056
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 1057
  ______f___17.func = "create_teimgr";
#line 1057
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1057
  ______f___17.line = 1057U;
#line 1057
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 1057
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 1057
  ______r___17 = crq->protocol == 16U;
#line 1057
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 1057
  if (______r___17 != 0) {
#line 1058
    (l2->tm)->tei_m.fsm = & teifsmu;
#line 1059
    (l2->tm)->tei_m.state = 0;
#line 1060
    (l2->tm)->tval = 1000;
  } else {
#line 1062
    (l2->tm)->tei_m.fsm = & teifsmn;
#line 1063
    (l2->tm)->tei_m.state = 0;
#line 1064
    (l2->tm)->tval = 2000;
  }
#line 1066
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 1067
  flags = _write_lock_irqsave(& mgr->lock);
#line 1068
  id = get_free_id(mgr);
#line 1069
  list_add_tail(& l2->list, & mgr->layer2);
#line 1070
  _write_unlock_irqrestore(& mgr->lock, flags);
#line 1071
  ______f___18.func = "create_teimgr";
#line 1071
  ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1071
  ______f___18.line = 1071U;
#line 1071
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 1071
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 1071
  ______r___18 = id < 0;
#line 1071
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 1071
  if (______r___18 != 0) {
#line 1072
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
  } else {
#line 1074
    l2->ch.nr = (u_int )id;
#line 1075
    (l2->up)->nr = (u_int )id;
#line 1076
    crq->ch = & l2->ch;
#line 1077
    id = 0;
  }
#line 1079
  return (id);
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNhead *hh ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1086
  hh = (struct mISDNhead *)(& skb->cb);
#line 1087
  ret = -22;
#line 1089
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1089
  mgr = (struct manager *)__mptr;
#line 1090
  ______f.func = "mgr_send";
#line 1090
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1090
  ______f.line = 1090U;
#line 1090
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1090
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1090
  ______r = (*debug___5 & 524288U) != 0U;
#line 1090
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1090
  if (______r != 0) {
#line 1091
    printk("<7>%s: prim(%x) id(%x)\n", "mgr_send", hh->prim, hh->id);
  } else {

  }
#line 1093
  switch (hh->prim) {
  case 8194U: 
#line 1095
  mISDN_FsmEvent(& mgr->deact, 4, 0);
#line 1096
  ret = ph_data_ind(mgr, skb);
#line 1097
  goto ldv_35660;
  case 24578U: 
#line 1099
  do_ack(mgr, hh->id);
#line 1100
  ret = 0;
#line 1101
  goto ldv_35660;
  case 258U: 
#line 1103
  test_and_set_bit(16, (unsigned long volatile   *)(& mgr->options));
#line 1104
  mISDN_FsmEvent(& mgr->deact, 1, 0);
#line 1105
  do_send(mgr);
#line 1106
  ret = 0;
#line 1107
  goto ldv_35660;
  case 514U: 
#line 1109
  test_and_clear_bit(16, (unsigned long volatile   *)(& mgr->options));
#line 1110
  mISDN_FsmEvent(& mgr->deact, 3, 0);
#line 1111
  ret = 0;
#line 1112
  goto ldv_35660;
  case 12548U: 
#line 1114
  tmp = dl_unit_data(mgr, skb);
#line 1114
  return (tmp);
  }
  ldv_35660: 
#line 1116
  ______f___0.func = "mgr_send";
#line 1116
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1116
  ______f___0.line = 1116U;
#line 1116
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1116
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1116
  ______r___0 = ret == 0;
#line 1116
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1116
  if (______r___0 != 0) {
#line 1117
    consume_skb(skb);
  } else {

  }
#line 1118
  return (ret);
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int free_teimanager(struct manager *mgr ) 
{ 
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___2 ;

  {
#line 1126
  test_and_clear_bit(5, (unsigned long volatile   *)(& mgr->options));
#line 1127
  ______f___0.func = "free_teimanager";
#line 1127
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1127
  ______f___0.line = 1127U;
#line 1127
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1127
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1127
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 1127
  ______r___0 = tmp___0 != 0;
#line 1127
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1127
  if (______r___0 != 0) {
#line 1129
    mgr->up = 0;
#line 1130
    ______f.func = "free_teimanager";
#line 1130
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1130
    ______f.line = 1130U;
#line 1130
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1130
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1130
    tmp = constant_test_bit(4U, (unsigned long const volatile   *)(& mgr->options));
#line 1130
    ______r = tmp != 0;
#line 1130
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1130
    if (______r != 0) {
#line 1131
      __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 1131
      l2 = (struct layer2 *)__mptr;
#line 1131
      __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 1131
      nl2 = (struct layer2 *)__mptr___0;
#line 1131
      goto ldv_35687;
      ldv_35686: 
#line 1132
      put_tei_msg(mgr, 6, 0U, (int )l2->tei);
#line 1133
      mutex_lock_nested(& (mgr->ch.st)->lmutex, 0U);
#line 1134
      list_del(& l2->ch.list);
#line 1135
      mutex_unlock(& (mgr->ch.st)->lmutex);
#line 1136
      (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 1131
      l2 = nl2;
#line 1131
      __mptr___1 = (struct list_head  const  *)nl2->list.next;
#line 1131
      nl2 = (struct layer2 *)__mptr___1;
      ldv_35687: ;
#line 1131
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1132
        goto ldv_35686;
      } else {

      }
#line 1138
      test_and_clear_bit(25, (unsigned long volatile   *)(& mgr->options));
    } else {
#line 1140
      __mptr___2 = (struct list_head  const  *)mgr->layer2.next;
#line 1140
      l2 = (struct layer2 *)__mptr___2;
#line 1140
      __mptr___3 = (struct list_head  const  *)l2->list.next;
#line 1140
      nl2 = (struct layer2 *)__mptr___3;
#line 1140
      goto ldv_35696;
      ldv_35695: 
#line 1141
      l2->up = 0;
#line 1140
      l2 = nl2;
#line 1140
      __mptr___4 = (struct list_head  const  *)nl2->list.next;
#line 1140
      nl2 = (struct layer2 *)__mptr___4;
      ldv_35696: ;
#line 1140
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1141
        goto ldv_35695;
      } else {

      }

    }
  } else {

  }
#line 1145
  ______f___2.func = "free_teimanager";
#line 1145
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1145
  ______f___2.line = 1145U;
#line 1145
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1145
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1145
  tmp___2 = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1145
  ______r___2 = tmp___2 != 0;
#line 1145
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1145
  if (______r___2 != 0) {
#line 1146
    ______f___1.func = "free_teimanager";
#line 1146
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1146
    ______f___1.line = 1146U;
#line 1146
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1146
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1146
    tmp___1 = list_empty((struct list_head  const  *)(& mgr->layer2));
#line 1146
    ______r___1 = tmp___1 != 0;
#line 1146
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1146
    if (______r___1 != 0) {
#line 1147
      test_and_clear_bit(24, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
#line 1149
  (*(((mgr->ch.st)->dev)->D.ctrl))(& ((mgr->ch.st)->dev)->D, 512U, 0);
#line 1150
  return (0);
}
}
#line 1154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int ctrl_teimanager(struct manager *mgr , void *arg ) 
{ 
  int *val ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1157
  val = (int *)arg;
#line 1158
  ret = 0;
#line 1160
  switch (*val) {
  case -2147202746: 
#line 1162
  ______f.func = "ctrl_teimanager";
#line 1162
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1162
  ______f.line = 1162U;
#line 1162
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1162
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1162
  ______r = *(val + 1UL) != 0;
#line 1162
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1162
  if (______r != 0) {
#line 1163
    test_and_set_bit(4, (unsigned long volatile   *)(& mgr->options));
  } else {
#line 1165
    test_and_clear_bit(4, (unsigned long volatile   *)(& mgr->options));
  }
#line 1166
  goto ldv_35715;
  case -2147202744: 
#line 1168
  ______f___0.func = "ctrl_teimanager";
#line 1168
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1168
  ______f___0.line = 1168U;
#line 1168
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1168
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1168
  ______r___0 = *(val + 1UL) != 0;
#line 1168
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1168
  if (______r___0 != 0) {
#line 1169
    test_and_set_bit(5, (unsigned long volatile   *)(& mgr->options));
  } else {
#line 1171
    test_and_clear_bit(5, (unsigned long volatile   *)(& mgr->options));
  }
#line 1172
  goto ldv_35715;
  default: 
#line 1174
  ret = -22;
  }
  ldv_35715: ;
#line 1176
  return (ret);
}
}
#line 1181 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int check_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ret ;
  int tei ;
  int sapi ;
  struct layer2 *l2 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;

  {
#line 1183
  hh = (struct mISDNhead *)(& skb->cb);
#line 1187
  ______f.func = "check_data";
#line 1187
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1187
  ______f.line = 1187U;
#line 1187
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1187
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1187
  ______r = (*debug___5 & 262144U) != 0U;
#line 1187
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1187
  if (______r != 0) {
#line 1188
    printk("<7>%s: prim(%x) id(%x)\n", "check_data", hh->prim, hh->id);
  } else {

  }
#line 1190
  ______f___0.func = "check_data";
#line 1190
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1190
  ______f___0.line = 1190U;
#line 1190
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1190
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1190
  tmp = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1190
  ______r___0 = tmp != 0;
#line 1190
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1190
  if (______r___0 != 0) {
#line 1191
    return (-107);
  } else {

  }
#line 1192
  ______f___1.func = "check_data";
#line 1192
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1192
  ______f___1.line = 1192U;
#line 1192
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1192
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1192
  ______r___1 = hh->prim != 8194U;
#line 1192
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1192
  if (______r___1 != 0) {
#line 1193
    return (-107);
  } else {

  }
#line 1194
  ______f___2.func = "check_data";
#line 1194
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1194
  ______f___2.line = 1194U;
#line 1194
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1194
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1194
  ______r___2 = skb->len != 3U;
#line 1194
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1194
  if (______r___2 != 0) {
#line 1195
    return (-107);
  } else {

  }
#line 1196
  ______f___3.func = "check_data";
#line 1196
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1196
  ______f___3.line = 1196U;
#line 1196
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1196
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1196
  ______r___3 = ((int )*(skb->data) & 3) != 0;
#line 1196
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1196
  if (______r___3 != 0) {
#line 1197
    return (-22);
  } else {

  }
#line 1198
  sapi = (int )*(skb->data) >> 2;
#line 1199
  ______f___4.func = "check_data";
#line 1199
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1199
  ______f___4.line = 1199U;
#line 1199
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1199
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1199
  ______r___4 = ((int )*(skb->data + 1UL) & 1) == 0;
#line 1199
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1199
  if (______r___4 != 0) {
#line 1200
    return (-22);
  } else {

  }
#line 1201
  tei = (int )*(skb->data + 1UL) >> 1;
#line 1202
  ______f___5.func = "check_data";
#line 1202
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1202
  ______f___5.line = 1202U;
#line 1202
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1202
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1202
  ______r___5 = tei > 63;
#line 1202
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1202
  if (______r___5 != 0) {
#line 1203
    return (-107);
  } else {

  }
#line 1204
  ______f___6.func = "check_data";
#line 1204
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1204
  ______f___6.line = 1204U;
#line 1204
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1204
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1204
  ______r___6 = ((int )*(skb->data + 2UL) & -17) != 111;
#line 1204
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1204
  if (______r___6 != 0) {
#line 1205
    return (-107);
  } else {

  }
#line 1207
  ______f___7.func = "check_data";
#line 1207
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1207
  ______f___7.line = 1207U;
#line 1207
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1207
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1207
  ______r___7 = (*debug___5 & 262144U) != 0U;
#line 1207
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1207
  if (______r___7 != 0) {
#line 1208
    printk("<7>%s: SABME sapi(%d) tei(%d)\n", "check_data", sapi, tei);
  } else {

  }
#line 1210
  l2 = create_new_tei(mgr, tei, sapi);
#line 1211
  ______f___9.func = "check_data";
#line 1211
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1211
  ______f___9.line = 1211U;
#line 1211
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1211
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1211
  ______r___9 = (unsigned long )l2 == (unsigned long )((struct layer2 *)0);
#line 1211
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1211
  if (______r___9 != 0) {
#line 1212
    ______f___8.func = "check_data";
#line 1212
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1212
    ______f___8.line = 1212U;
#line 1212
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1212
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1212
    ______r___8 = (*debug___5 & 262144U) != 0U;
#line 1212
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1212
    if (______r___8 != 0) {
#line 1213
      printk("<7>%s: failed to create new tei\n", "check_data");
    } else {

    }
#line 1215
    return (-12);
  } else {

  }
#line 1217
  ret = (*(l2->ch.send))(& l2->ch, skb);
#line 1218
  return (ret);
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
void delete_teimanager(struct mISDNchannel *ch ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct mISDNchannel  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 1227
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1227
  mgr = (struct manager *)__mptr;
#line 1229
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
#line 1229
  l2 = (struct layer2 *)__mptr___0;
#line 1229
  __mptr___1 = (struct list_head  const  *)l2->list.next;
#line 1229
  nl2 = (struct layer2 *)__mptr___1;
#line 1229
  goto ldv_35779;
  ldv_35778: 
#line 1230
  mutex_lock_nested(& (mgr->ch.st)->lmutex, 0U);
#line 1231
  list_del(& l2->ch.list);
#line 1232
  mutex_unlock(& (mgr->ch.st)->lmutex);
#line 1233
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 1229
  l2 = nl2;
#line 1229
  __mptr___2 = (struct list_head  const  *)nl2->list.next;
#line 1229
  nl2 = (struct layer2 *)__mptr___2;
  ldv_35779: ;
#line 1229
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1230
    goto ldv_35778;
  } else {

  }
#line 1235
  list_del(& mgr->ch.list);
#line 1236
  list_del(& mgr->bcast.list);
#line 1237
  skb_queue_purge(& mgr->sendq);
#line 1238
  kfree((void const   *)mgr);
#line 1239
  return;
}
}
#line 1242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct manager *mgr ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 1245
  ret = -22;
#line 1247
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1247
  mgr = (struct manager *)__mptr;
#line 1248
  ______f.func = "mgr_ctrl";
#line 1248
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1248
  ______f.line = 1248U;
#line 1248
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1248
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1248
  ______r = (*debug___5 & 262144U) != 0U;
#line 1248
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1248
  if (______r != 0) {
#line 1249
    printk("<7>%s(%x, %p)\n", "mgr_ctrl", cmd, arg);
  } else {

  }
#line 1250
  switch (cmd) {
  case (u_int )256: 
#line 1252
  ret = create_teimgr(mgr, (struct channel_req *)arg);
#line 1253
  goto ldv_35795;
  case (u_int )512: 
#line 1255
  ret = free_teimanager(mgr);
#line 1256
  goto ldv_35795;
  case (u_int )768: 
#line 1258
  ret = ctrl_teimanager(mgr, arg);
#line 1259
  goto ldv_35795;
  case (u_int )1024: 
#line 1261
  ret = check_data(mgr, (struct sk_buff *)arg);
#line 1262
  goto ldv_35795;
  }
  ldv_35795: ;
#line 1264
  return (ret);
}
}
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_bcast(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  struct sk_buff *cskb ;
  struct layer2 *l2 ;
  u_long flags ;
  int ret ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  struct list_head  const  *__mptr___1 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;

  {
#line 1270
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1270
  mgr = (struct manager *)__mptr + 0xffffffffffffffb0UL;
#line 1271
  hh = (struct mISDNhead *)(& skb->cb);
#line 1272
  cskb = 0;
#line 1277
  flags = _read_lock_irqsave(& mgr->lock);
#line 1278
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
#line 1278
  l2 = (struct layer2 *)__mptr___0;
#line 1278
  goto ldv_35839;
  ldv_35838: 
#line 1279
  ______f___4.func = "mgr_bcast";
#line 1279
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1279
  ______f___4.line = 1280U;
#line 1279
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1279
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1279
  ______r___4 = ((hh->id ^ l2->ch.addr) & 255U) == 0U;
#line 1279
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1279
  if (______r___4 != 0) {
#line 1281
    ______f___0.func = "mgr_bcast";
#line 1281
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1281
    ______f___0.line = 1281U;
#line 1281
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1281
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1281
    tmp = list_is_last((struct list_head  const  *)(& l2->list), (struct list_head  const  *)(& mgr->layer2));
#line 1281
    ______r___0 = tmp != 0;
#line 1281
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1281
    if (______r___0 != 0) {
#line 1282
      cskb = skb;
#line 1283
      skb = 0;
    } else {
#line 1285
      ______f.func = "mgr_bcast";
#line 1285
      ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1285
      ______f.line = 1285U;
#line 1285
      ______f.ldv_815.ldv_809.correct = 0UL;
#line 1285
      ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1285
      ______r = (unsigned long )cskb == (unsigned long )((struct sk_buff *)0);
#line 1285
      ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1285
      if (______r != 0) {
#line 1286
        cskb = ldv_skb_copy_204((struct sk_buff  const  *)skb, 208U);
      } else {

      }
    }
#line 1288
    ______f___3.func = "mgr_bcast";
#line 1288
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1288
    ______f___3.line = 1288U;
#line 1288
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1288
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1288
    ______r___3 = (unsigned long )cskb != (unsigned long )((struct sk_buff *)0);
#line 1288
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1288
    if (______r___3 != 0) {
#line 1289
      ret = (*(l2->ch.send))(& l2->ch, cskb);
#line 1290
      ______f___2.func = "mgr_bcast";
#line 1290
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1290
      ______f___2.line = 1290U;
#line 1290
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1290
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1290
      ______r___2 = ret != 0;
#line 1290
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1290
      if (______r___2 != 0) {
#line 1291
        ______f___1.func = "mgr_bcast";
#line 1291
        ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1291
        ______f___1.line = 1291U;
#line 1291
        ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1291
        ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1291
        ______r___1 = (*debug___5 & 16U) != 0U;
#line 1291
        ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1291
        if (______r___1 != 0) {
#line 1292
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "mgr_bcast", l2->ch.nr,
                 hh->prim, l2->ch.addr, ret);
        } else {
#line 1298
          cskb = 0;
        }
      } else {

      }
    } else {
#line 1300
      printk("<4>%s ch%d addr %x no mem\n", "mgr_bcast", ch->nr, ch->addr);
#line 1302
      goto out;
    }
  } else {

  }
#line 1278
  __mptr___1 = (struct list_head  const  *)l2->list.next;
#line 1278
  l2 = (struct layer2 *)__mptr___1;
  ldv_35839: 
#line 1278
  __builtin_prefetch((void const   *)l2->list.next);
#line 1278
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1279
    goto ldv_35838;
  } else {

  }

  out: 
#line 1307
  _read_unlock_irqrestore(& mgr->lock, flags);
#line 1308
  ______f___5.func = "mgr_bcast";
#line 1308
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1308
  ______f___5.line = 1308U;
#line 1308
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1308
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1308
  ______r___5 = (unsigned long )cskb != (unsigned long )((struct sk_buff *)0);
#line 1308
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1308
  if (______r___5 != 0) {
#line 1309
    consume_skb(cskb);
  } else {

  }
#line 1310
  ______f___6.func = "mgr_bcast";
#line 1310
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1310
  ______f___6.line = 1310U;
#line 1310
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1310
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1310
  ______r___6 = (unsigned long )skb != (unsigned long )((struct sk_buff *)0);
#line 1310
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1310
  if (______r___6 != 0) {
#line 1311
    consume_skb(skb);
  } else {

  }
#line 1312
  return (0);
}
}
#line 1316 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_bcast_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 


  {
#line 1319
  return (-22);
}
}
#line 1323 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
int create_teimanager(struct mISDNdevice *dev ) 
{ 
  struct manager *mgr ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct lock_class_key __key ;

  {
#line 1327
  tmp = kzalloc(536UL, 208U);
#line 1327
  mgr = (struct manager *)tmp;
#line 1328
  ______f.func = "create_teimanager";
#line 1328
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared";
#line 1328
  ______f.line = 1328U;
#line 1328
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1328
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1328
  ______r = (unsigned long )mgr == (unsigned long )((struct manager *)0);
#line 1328
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1328
  if (______r != 0) {
#line 1329
    return (-12);
  } else {

  }
#line 1330
  INIT_LIST_HEAD(& mgr->layer2);
#line 1331
  __rwlock_init(& mgr->lock, "&mgr->lock", & __key);
#line 1332
  skb_queue_head_init(& mgr->sendq);
#line 1333
  mgr->nextid = 1U;
#line 1334
  mgr->lastid = 65534U;
#line 1335
  mgr->ch.send = & mgr_send;
#line 1336
  mgr->ch.ctrl = & mgr_ctrl;
#line 1337
  mgr->ch.st = dev->D.st;
#line 1338
  set_channel_address(& mgr->ch, 63U, 127U);
#line 1339
  add_layer2(& mgr->ch, dev->D.st);
#line 1340
  mgr->bcast.send = & mgr_bcast;
#line 1341
  mgr->bcast.ctrl = & mgr_bcast_ctrl;
#line 1342
  mgr->bcast.st = dev->D.st;
#line 1343
  set_channel_address(& mgr->bcast, 0U, 127U);
#line 1344
  add_layer2(& mgr->bcast, dev->D.st);
#line 1345
  mgr->deact.debug = (int )*debug___5 & 8;
#line 1346
  mgr->deact.userdata = (void *)mgr;
#line 1347
  mgr->deact.printdebug = & da_debug;
#line 1348
  mgr->deact.fsm = & deactfsm;
#line 1349
  mgr->deact.state = 0;
#line 1350
  mISDN_FsmInitTimer(& mgr->deact, & mgr->datimer);
#line 1351
  dev->teimgr = & mgr->ch;
#line 1352
  return (0);
}
}
#line 1355 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
int TEIInit(u_int *deb ) 
{ 


  {
#line 1357
  debug___5 = deb;
#line 1358
  teifsmu.state_count = 3;
#line 1359
  teifsmu.event_count = 9;
#line 1360
  teifsmu.strEvent = (char **)(& strTeiEvent);
#line 1361
  teifsmu.strState = (char **)(& strTeiState);
#line 1362
  mISDN_FsmNew(& teifsmu, (struct FsmNode *)(& TeiFnListUser), 11);
#line 1363
  teifsmn.state_count = 3;
#line 1364
  teifsmn.event_count = 9;
#line 1365
  teifsmn.strEvent = (char **)(& strTeiEvent);
#line 1366
  teifsmn.strState = (char **)(& strTeiState);
#line 1367
  mISDN_FsmNew(& teifsmn, (struct FsmNode *)(& TeiFnListNet), 5);
#line 1368
  deactfsm.state_count = 3;
#line 1369
  deactfsm.event_count = 6;
#line 1370
  deactfsm.strEvent = (char **)(& strDeactEvent);
#line 1371
  deactfsm.strState = (char **)(& strDeactState);
#line 1372
  mISDN_FsmNew(& deactfsm, (struct FsmNode *)(& DeactFnList), 6);
#line 1373
  return (0);
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
void TEIFree(void) 
{ 


  {
#line 1378
  mISDN_FsmFree(& teifsmu);
#line 1379
  mISDN_FsmFree(& teifsmn);
#line 1380
  mISDN_FsmFree(& deactfsm);
#line 1381
  return;
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
unsigned long ldv___get_free_pages_187(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 1400
  ldv_check_alloc_flags(ldv_func_arg1);
#line 1402
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 1402
  return (tmp);
}
}
#line 1449 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
void *ldv_kmem_cache_alloc_192(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 1455
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1457
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 1458
  return ((void *)0);
}
}
#line 1525 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
struct sk_buff *ldv_skb_clone_199(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1531
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1533
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 1533
  return (tmp);
}
}
#line 1547 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
struct sk_buff *ldv_skb_copy_201(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1553
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1555
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 1555
  return (tmp);
}
}
#line 1558 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_202(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1565
  ldv_check_alloc_flags(ldv_func_arg3);
#line 1567
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 1567
  return (tmp);
}
}
#line 1570 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
int ldv_pskb_expand_head_203(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 1578
  ldv_check_alloc_flags(ldv_func_arg4);
#line 1580
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 1580
  return (tmp);
}
}
#line 1583 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/tei.c.prepared"
struct sk_buff *ldv_skb_copy_204(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1589
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1591
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 1591
  return (tmp);
}
}
#line 2 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_spin_lock(void) ;
#line 3
void ldv_spin_unlock(void) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_5989: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_5989;
  } else {

  }

#line 19
  return (order);
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 230 "include/linux/gfp.h"
unsigned long ldv___get_free_pages_213(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 29 "include/trace/kmemtrace.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 29 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;

  {
#line 23
  ______f___0.func = "trace_kmalloc";
#line 23
  ______f___0.file = "include/trace/kmemtrace.h";
#line 23
  ______f___0.line = 29U;
#line 23
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 23
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 23
  ______f___1.func = "trace_kmalloc";
#line 23
  ______f___1.file = "include/trace/kmemtrace.h";
#line 23
  ______f___1.line = 29U;
#line 23
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 23
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 23
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 1L);
#line 23
  ______r___1 = (int )tmp;
#line 23
  ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 23
  ______r___0 = ______r___1 != 0;
#line 23
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 23
  if (______r___0 != 0) {
#line 23
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
    it_func = _________p1;
#line 23
    ______f.func = "trace_kmalloc";
#line 23
    ______f.file = "include/trace/kmemtrace.h";
#line 23
    ______f.line = 29U;
#line 23
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 23
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 23
    ______r = (unsigned long )it_func != (unsigned long )((void **)0);
#line 23
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 23
    if (______r != 0) {
      ldv_11722: 
#line 23
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 23
      it_func = it_func + 1;
#line 23
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 24
        goto ldv_11722;
      } else {

      }

    } else {

    }
  } else {

  }
#line 30
  return;
}
}
#line 141 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 147 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;

  {
#line 149
  ______f.func = "kmalloc_index";
#line 149
  ______f.file = "include/linux/slub_def.h";
#line 149
  ______f.line = 149U;
#line 149
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 149
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 149
  ______r = size == 0UL;
#line 149
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 149
  if (______r != 0) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______f___0.func = "kmalloc_index";
#line 152
  ______f___0.file = "include/linux/slub_def.h";
#line 152
  ______f___0.line = 152U;
#line 152
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 152
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 152
  ______r___0 = size <= 8UL;
#line 152
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0 != 0) {
#line 153
    return (3);
  } else {

  }
#line 156
  ______f___1.func = "kmalloc_index";
#line 156
  ______f___1.file = "include/linux/slub_def.h";
#line 156
  ______f___1.line = 156U;
#line 156
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 156
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 156
  ______r___1 = size > 64UL && size <= 96UL;
#line 156
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1 != 0) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______f___2.func = "kmalloc_index";
#line 158
  ______f___2.file = "include/linux/slub_def.h";
#line 158
  ______f___2.line = 158U;
#line 158
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 158
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 158
  ______r___2 = size > 128UL && size <= 192UL;
#line 158
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2 != 0) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______f___3.func = "kmalloc_index";
#line 161
  ______f___3.file = "include/linux/slub_def.h";
#line 161
  ______f___3.line = 161U;
#line 161
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 161
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 161
  ______r___3 = size <= 8UL;
#line 161
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3 != 0) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______f___4.func = "kmalloc_index";
#line 162
  ______f___4.file = "include/linux/slub_def.h";
#line 162
  ______f___4.line = 162U;
#line 162
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 162
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 162
  ______r___4 = size <= 16UL;
#line 162
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4 != 0) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______f___5.func = "kmalloc_index";
#line 163
  ______f___5.file = "include/linux/slub_def.h";
#line 163
  ______f___5.line = 163U;
#line 163
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 163
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 163
  ______r___5 = size <= 32UL;
#line 163
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5 != 0) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______f___6.func = "kmalloc_index";
#line 164
  ______f___6.file = "include/linux/slub_def.h";
#line 164
  ______f___6.line = 164U;
#line 164
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 164
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 164
  ______r___6 = size <= 64UL;
#line 164
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6 != 0) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______f___7.func = "kmalloc_index";
#line 165
  ______f___7.file = "include/linux/slub_def.h";
#line 165
  ______f___7.line = 165U;
#line 165
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 165
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 165
  ______r___7 = size <= 128UL;
#line 165
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7 != 0) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______f___8.func = "kmalloc_index";
#line 166
  ______f___8.file = "include/linux/slub_def.h";
#line 166
  ______f___8.line = 166U;
#line 166
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 166
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 166
  ______r___8 = size <= 256UL;
#line 166
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8 != 0) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______f___9.func = "kmalloc_index";
#line 167
  ______f___9.file = "include/linux/slub_def.h";
#line 167
  ______f___9.line = 167U;
#line 167
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 167
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 167
  ______r___9 = size <= 512UL;
#line 167
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9 != 0) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______f___10.func = "kmalloc_index";
#line 168
  ______f___10.file = "include/linux/slub_def.h";
#line 168
  ______f___10.line = 168U;
#line 168
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 168
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 168
  ______r___10 = size <= 1024UL;
#line 168
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10 != 0) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______f___11.func = "kmalloc_index";
#line 169
  ______f___11.file = "include/linux/slub_def.h";
#line 169
  ______f___11.line = 169U;
#line 169
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 169
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 169
  ______r___11 = size <= 2048UL;
#line 169
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11 != 0) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______f___12.func = "kmalloc_index";
#line 170
  ______f___12.file = "include/linux/slub_def.h";
#line 170
  ______f___12.line = 170U;
#line 170
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 170
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 170
  ______r___12 = size <= 4096UL;
#line 170
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12 != 0) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______f___13.func = "kmalloc_index";
#line 175
  ______f___13.file = "include/linux/slub_def.h";
#line 175
  ______f___13.line = 175U;
#line 175
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 175
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 175
  ______r___13 = size <= 8192UL;
#line 175
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13 != 0) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______f___14.func = "kmalloc_index";
#line 176
  ______f___14.file = "include/linux/slub_def.h";
#line 176
  ______f___14.line = 176U;
#line 176
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 176
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 176
  ______r___14 = size <= 16384UL;
#line 176
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14 != 0) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______f___15.func = "kmalloc_index";
#line 177
  ______f___15.file = "include/linux/slub_def.h";
#line 177
  ______f___15.line = 177U;
#line 177
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 177
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 177
  ______r___15 = size <= 32768UL;
#line 177
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15 != 0) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______f___16.func = "kmalloc_index";
#line 178
  ______f___16.file = "include/linux/slub_def.h";
#line 178
  ______f___16.line = 178U;
#line 178
  ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 178
  ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 178
  ______r___16 = size <= 65536UL;
#line 178
  ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16 != 0) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______f___17.func = "kmalloc_index";
#line 179
  ______f___17.file = "include/linux/slub_def.h";
#line 179
  ______f___17.line = 179U;
#line 179
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 179
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 179
  ______r___17 = size <= 131072UL;
#line 179
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17 != 0) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______f___18.func = "kmalloc_index";
#line 180
  ______f___18.file = "include/linux/slub_def.h";
#line 180
  ______f___18.line = 180U;
#line 180
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 180
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 180
  ______r___18 = size <= 262144UL;
#line 180
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18 != 0) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______f___19.func = "kmalloc_index";
#line 181
  ______f___19.file = "include/linux/slub_def.h";
#line 181
  ______f___19.line = 181U;
#line 181
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 181
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 181
  ______r___19 = size <= 524288UL;
#line 181
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19 != 0) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______f___20.func = "kmalloc_index";
#line 182
  ______f___20.file = "include/linux/slub_def.h";
#line 182
  ______f___20.line = 182U;
#line 182
  ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 182
  ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 182
  ______r___20 = size <= 1048576UL;
#line 182
  ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20 != 0) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______f___21.func = "kmalloc_index";
#line 183
  ______f___21.file = "include/linux/slub_def.h";
#line 183
  ______f___21.line = 183U;
#line 183
  ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 183
  ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 183
  ______r___21 = size <= 2097152UL;
#line 183
  ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21 != 0) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 203
  tmp = kmalloc_index(size);
#line 203
  index = tmp;
#line 205
  ______f.func = "kmalloc_slab";
#line 205
  ______f.file = "include/linux/slub_def.h";
#line 205
  ______f.line = 205U;
#line 205
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 205
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 205
  ______r = index == 0;
#line 205
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 205
  if (______r != 0) {
#line 206
    return (0);
  } else {

  }
#line 208
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 221
void *ldv_kmem_cache_alloc_218(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 231 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = (unsigned int )tmp;
#line 234
  tmp___0 = ldv___get_free_pages_213(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *ldv_kmalloc_214(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______f.func = "ldv_kmalloc_214";
#line 246
    ______f.file = "include/linux/slub_def.h";
#line 246
    ______f.line = 246U;
#line 246
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 246
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 246
    ______r = size > 8192UL;
#line 246
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 246
    if (______r != 0) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______f___1.func = "ldv_kmalloc_214";
#line 249
    ______f___1.file = "include/linux/slub_def.h";
#line 249
    ______f___1.line = 249U;
#line 249
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 249
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 249
    ______r___1 = (flags & 1U) == 0U;
#line 249
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1 != 0) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      ______f___0.func = "ldv_kmalloc_214";
#line 252
      ______f___0.file = "include/linux/slub_def.h";
#line 252
      ______f___0.line = 252U;
#line 252
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 252
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 252
      ______r___0 = (unsigned long )s == (unsigned long )((struct kmem_cache *)0);
#line 252
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0 != 0) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 241
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 2222 "include/linux/fs.h"
extern int nonseekable_open(struct inode * , struct file * ) ;
#line 37 "include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 39
  ______f.func = "poll_wait";
#line 39
  ______f.file = "include/linux/poll.h";
#line 39
  ______f.line = 39U;
#line 39
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 39
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 39
  ______r = (unsigned long )p != (unsigned long )((poll_table *)0) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0);
#line 39
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 39
  if (______r != 0) {
#line 40
    (*(p->qproc))(filp, wait_address, p);
  } else {

  }
#line 41
  return;
}
}
#line 46 "include/linux/miscdevice.h"
extern int misc_register(struct miscdevice * ) ;
#line 47
extern int misc_deregister(struct miscdevice * ) ;
#line 461 "include/linux/skbuff.h"
struct sk_buff *ldv_skb_clone_225(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 467
struct sk_buff *ldv_skb_copy_227(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 476
int ldv_pskb_expand_head_229(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) ;
#line 1463
struct sk_buff *ldv___netdev_alloc_skb_228(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static u_int *debug___6  ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static int mISDN_open(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  void *tmp ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  struct lock_class_key __key ;
  int tmp___0 ;

  {
#line 67
  ______f.func = "mISDN_open";
#line 67
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 67
  ______f.line = 67U;
#line 67
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 67
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 67
  ______r = (*debug___6 & 16777216U) != 0U;
#line 67
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 67
  if (______r != 0) {
#line 68
    printk("<7>%s(%p,%p)\n", "mISDN_open", ino, filep);
  } else {

  }
#line 69
  tmp = kmalloc(192UL, 208U);
#line 69
  dev = (struct mISDNtimerdev *)tmp;
#line 70
  ______f___0.func = "mISDN_open";
#line 70
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 70
  ______f___0.line = 70U;
#line 70
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 70
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 70
  ______r___0 = (unsigned long )dev == (unsigned long )((struct mISDNtimerdev *)0);
#line 70
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 70
  if (______r___0 != 0) {
#line 71
    return (-12);
  } else {

  }
#line 72
  dev->next_id = 1;
#line 73
  INIT_LIST_HEAD(& dev->pending);
#line 74
  INIT_LIST_HEAD(& dev->expired);
#line 75
  __spin_lock_init(& dev->lock, "&dev->lock", & __key);
#line 76
  dev->work = 0U;
#line 77
  init_waitqueue_head(& dev->wait);
#line 78
  filep->private_data = (void *)dev;
#line 79
  __module_get(& __this_module);
#line 80
  tmp___0 = nonseekable_open(ino, filep);
#line 80
  return (tmp___0);
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static int mISDN_close(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  struct mISDNtimer *next ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;

  {
#line 86
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 89
  ______f.func = "mISDN_close";
#line 89
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 89
  ______f.line = 89U;
#line 89
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 89
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 89
  ______r = (*debug___6 & 16777216U) != 0U;
#line 89
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 89
  if (______r != 0) {
#line 90
    printk("<7>%s(%p,%p)\n", "mISDN_close", ino, filep);
  } else {

  }
#line 91
  __mptr = (struct list_head  const  *)dev->pending.next;
#line 91
  timer = (struct mISDNtimer *)__mptr;
#line 91
  __mptr___0 = (struct list_head  const  *)timer->list.next;
#line 91
  next = (struct mISDNtimer *)__mptr___0;
#line 91
  goto ldv_34819;
  ldv_34818: 
#line 92
  del_timer(& timer->tl);
#line 93
  kfree((void const   *)timer);
#line 91
  timer = next;
#line 91
  __mptr___1 = (struct list_head  const  *)next->list.next;
#line 91
  next = (struct mISDNtimer *)__mptr___1;
  ldv_34819: ;
#line 91
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
#line 92
    goto ldv_34818;
  } else {

  }
#line 95
  __mptr___2 = (struct list_head  const  *)dev->expired.next;
#line 95
  timer = (struct mISDNtimer *)__mptr___2;
#line 95
  __mptr___3 = (struct list_head  const  *)timer->list.next;
#line 95
  next = (struct mISDNtimer *)__mptr___3;
#line 95
  goto ldv_34828;
  ldv_34827: 
#line 96
  kfree((void const   *)timer);
#line 95
  timer = next;
#line 95
  __mptr___4 = (struct list_head  const  *)next->list.next;
#line 95
  next = (struct mISDNtimer *)__mptr___4;
  ldv_34828: ;
#line 95
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->expired)) {
#line 96
    goto ldv_34827;
  } else {

  }
#line 98
  kfree((void const   *)dev);
#line 99
  module_put(& __this_module);
#line 100
  return (0);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static ssize_t mISDN_read(struct file *filep , char *buf , size_t count , loff_t *off ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___8 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int __ret_pu ;
  int __pu_val ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int tmp___10 ;

  {
#line 106
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 109
  ret = 0;
#line 111
  ______f.func = "mISDN_read";
#line 111
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 111
  ______f.line = 111U;
#line 111
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 111
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 111
  ______r = (*debug___6 & 16777216U) != 0U;
#line 111
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 111
  if (______r != 0) {
#line 112
    printk("<7>%s(%p, %p, %d, %p)\n", "mISDN_read", filep, buf, (int )count, off);
  } else {

  }
#line 114
  ______f___0.func = "mISDN_read";
#line 114
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 114
  ______f___0.line = 114U;
#line 114
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 114
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 114
  ______r___0 = *off != filep->f_pos;
#line 114
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 114
  if (______r___0 != 0) {
#line 115
    return (-29L);
  } else {

  }
#line 117
  ______f___6.func = "mISDN_read";
#line 117
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 117
  ______f___6.line = 117U;
#line 117
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 117
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 117
  tmp___8 = list_empty((struct list_head  const  *)(& dev->expired));
#line 117
  ______r___6 = tmp___8 != 0 && dev->work == 0U;
#line 117
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 117
  if (______r___6 != 0) {
#line 118
    ______f___1.func = "mISDN_read";
#line 118
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 118
    ______f___1.line = 118U;
#line 118
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 118
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 118
    ______r___1 = (filep->f_flags & 2048U) != 0U;
#line 118
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 118
    if (______r___1 != 0) {
#line 119
      return (-11L);
    } else {

    }
#line 120
    __ret = 0;
#line 120
    ______f___4.func = "mISDN_read";
#line 120
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 120
    ______f___4.line = 121U;
#line 120
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 120
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 120
    if (dev->work == 0U) {
#line 120
      tmp___4 = list_empty((struct list_head  const  *)(& dev->expired));
#line 120
      if (tmp___4 != 0) {
#line 120
        tmp___5 = 1;
      } else {
#line 120
        tmp___5 = 0;
      }
    } else {
#line 120
      tmp___5 = 0;
    }
#line 120
    ______r___4 = tmp___5;
#line 120
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 120
    if (______r___4 != 0) {
#line 120
      tmp = get_current();
#line 120
      __wait.flags = 0U;
#line 120
      __wait.private = (void *)tmp;
#line 120
      __wait.func = & autoremove_wake_function;
#line 120
      __wait.task_list.next = & __wait.task_list;
#line 120
      __wait.task_list.prev = & __wait.task_list;
      ldv_34866: 
#line 120
      prepare_to_wait(& dev->wait, & __wait, 1);
#line 120
      ______f___2.func = "mISDN_read";
#line 120
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 120
      ______f___2.line = 121U;
#line 120
      ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 120
      ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 120
      if (dev->work != 0U) {
#line 120
        tmp___1 = 1;
      } else {
#line 120
        tmp___0 = list_empty((struct list_head  const  *)(& dev->expired));
#line 120
        if (tmp___0 == 0) {
#line 120
          tmp___1 = 1;
        } else {
#line 120
          tmp___1 = 0;
        }
      }
#line 120
      ______r___2 = tmp___1;
#line 120
      ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 120
      if (______r___2 != 0) {
#line 120
        goto ldv_34861;
      } else {

      }
#line 120
      ______f___3.func = "mISDN_read";
#line 120
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 120
      ______f___3.line = 121U;
#line 120
      ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 120
      ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 120
      tmp___2 = get_current();
#line 120
      tmp___3 = signal_pending(tmp___2);
#line 120
      ______r___3 = tmp___3 == 0;
#line 120
      ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 120
      if (______r___3 != 0) {
#line 120
        schedule();
#line 120
        goto ldv_34865;
      } else {

      }
#line 120
      __ret = -512;
#line 120
      goto ldv_34861;
      ldv_34865: ;
#line 120
      goto ldv_34866;
      ldv_34861: 
#line 120
      finish_wait(& dev->wait, & __wait);
    } else {

    }
#line 122
    ______f___5.func = "mISDN_read";
#line 122
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 122
    ______f___5.line = 122U;
#line 122
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 122
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 122
    tmp___6 = get_current();
#line 122
    tmp___7 = signal_pending(tmp___6);
#line 122
    ______r___5 = tmp___7 != 0;
#line 122
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 122
    if (______r___5 != 0) {
#line 123
      return (-512L);
    } else {

    }
  } else {

  }
#line 125
  ______f___7.func = "mISDN_read";
#line 125
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 125
  ______f___7.line = 125U;
#line 125
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 125
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 125
  ______r___7 = count <= 3UL;
#line 125
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 125
  if (______r___7 != 0) {
#line 126
    return (-28L);
  } else {

  }
#line 127
  ______f___8.func = "mISDN_read";
#line 127
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 127
  ______f___8.line = 127U;
#line 127
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 127
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 127
  ______r___8 = dev->work != 0U;
#line 127
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 127
  if (______r___8 != 0) {
#line 128
    dev->work = 0U;
  } else {

  }
#line 129
  ______f___10.func = "mISDN_read";
#line 129
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 129
  ______f___10.line = 129U;
#line 129
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 129
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 129
  tmp___10 = list_empty((struct list_head  const  *)(& dev->expired));
#line 129
  ______r___10 = tmp___10 == 0;
#line 129
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 129
  if (______r___10 != 0) {
#line 130
    ldv_spin_lock();
#line 131
    timer = (struct mISDNtimer *)dev->expired.next;
#line 132
    list_del(& timer->list);
#line 133
    ldv_spin_unlock();
#line 134
    if (0) {
#line 134
      might_fault();
#line 134
      __pu_val = timer->id;
#line 134
      switch (4UL) {
      case 1UL: 
#line 134
      __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34892;
      case 2UL: 
#line 134
      __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34892;
      case 4UL: 
#line 134
      __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34892;
      case 8UL: 
#line 134
      __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34892;
      default: 
#line 134
      __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34892;
      }
      ldv_34892: 
#line 134
      tmp___9 = __ret_pu != 0;
    } else {
#line 134
      ______f___9.func = "mISDN_read";
#line 134
      ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 134
      ______f___9.line = 134U;
#line 134
      ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 134
      ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 134
      might_fault();
#line 134
      __pu_val___0 = timer->id;
#line 134
      switch (4UL) {
      case 1UL: 
#line 134
      __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34903;
      case 2UL: 
#line 134
      __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34903;
      case 4UL: 
#line 134
      __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34903;
      case 8UL: 
#line 134
      __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34903;
      default: 
#line 134
      __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((int *)buf): "ebx");
#line 134
      goto ldv_34903;
      }
      ldv_34903: 
#line 134
      ______r___9 = __ret_pu___0 != 0;
#line 134
      ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 134
      tmp___9 = ______r___9 != 0;
    }
#line 134
    if (tmp___9) {
#line 135
      ret = -14;
    } else {
#line 137
      ret = 4;
    }
#line 138
    kfree((void const   *)timer);
  } else {

  }
#line 140
  return ((ssize_t )ret);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static unsigned int mISDN_poll(struct file *filep , poll_table *wait ) 
{ 
  struct mISDNtimerdev *dev ;
  unsigned int mask ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 146
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 147
  mask = 8U;
#line 149
  ______f.func = "mISDN_poll";
#line 149
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 149
  ______f.line = 149U;
#line 149
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 149
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 149
  ______r = (*debug___6 & 16777216U) != 0U;
#line 149
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 149
  if (______r != 0) {
#line 150
    printk("<7>%s(%p, %p)\n", "mISDN_poll", filep, wait);
  } else {

  }
#line 151
  ______f___2.func = "mISDN_poll";
#line 151
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 151
  ______f___2.line = 151U;
#line 151
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 151
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 151
  ______r___2 = (unsigned long )dev != (unsigned long )((struct mISDNtimerdev *)0);
#line 151
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 151
  if (______r___2 != 0) {
#line 152
    poll_wait(filep, & dev->wait, wait);
#line 153
    mask = 0U;
#line 154
    ______f___0.func = "mISDN_poll";
#line 154
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 154
    ______f___0.line = 154U;
#line 154
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 154
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 154
    if (dev->work != 0U) {
#line 154
      tmp___0 = 1;
    } else {
#line 154
      tmp = list_empty((struct list_head  const  *)(& dev->expired));
#line 154
      if (tmp == 0) {
#line 154
        tmp___0 = 1;
      } else {
#line 154
        tmp___0 = 0;
      }
    }
#line 154
    ______r___0 = tmp___0;
#line 154
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 154
    if (______r___0 != 0) {
#line 155
      mask = mask | 65U;
    } else {

    }
#line 156
    ______f___1.func = "mISDN_poll";
#line 156
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 156
    ______f___1.line = 156U;
#line 156
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 156
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 156
    ______r___1 = (*debug___6 & 16777216U) != 0U;
#line 156
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 156
    if (______r___1 != 0) {
#line 157
      tmp___1 = list_empty((struct list_head  const  *)(& dev->expired));
#line 157
      printk("<7>%s work(%d) empty(%d)\n", "mISDN_poll", dev->work, tmp___1);
    } else {

    }
  } else {

  }
#line 160
  return (mask);
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static void dev_expire_timer(unsigned long data ) 
{ 
  struct mISDNtimer *timer ;

  {
#line 166
  timer = (struct mISDNtimer *)data;
#line 169
  ldv_spin_lock();
#line 170
  list_move_tail(& timer->list, & (timer->dev)->expired);
#line 171
  ldv_spin_unlock();
#line 172
  __wake_up(& (timer->dev)->wait, 1U, 1, 0);
#line 173
  return;
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static int misdn_add_timer(struct mISDNtimerdev *dev , int timeout ) 
{ 
  int id ;
  struct mISDNtimer *timer ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  struct lock_class_key __key ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 182
  ______f___1.func = "misdn_add_timer";
#line 182
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 182
  ______f___1.line = 182U;
#line 182
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 182
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 182
  ______r___1 = timeout == 0;
#line 182
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 182
  if (______r___1 != 0) {
#line 183
    dev->work = 1U;
#line 184
    __wake_up(& dev->wait, 1U, 1, 0);
#line 185
    id = 0;
  } else {
#line 187
    tmp = kzalloc(152UL, 208U);
#line 187
    timer = (struct mISDNtimer *)tmp;
#line 188
    ______f.func = "misdn_add_timer";
#line 188
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 188
    ______f.line = 188U;
#line 188
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 188
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 188
    ______r = (unsigned long )timer == (unsigned long )((struct mISDNtimer *)0);
#line 188
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 188
    if (______r != 0) {
#line 189
      return (-12);
    } else {

    }
#line 190
    ldv_spin_lock();
#line 191
    tmp___0 = dev->next_id;
#line 191
    dev->next_id = dev->next_id + 1;
#line 191
    timer->id = tmp___0;
#line 192
    ______f___0.func = "misdn_add_timer";
#line 192
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 192
    ______f___0.line = 192U;
#line 192
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 192
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 192
    ______r___0 = dev->next_id < 0;
#line 192
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 192
    if (______r___0 != 0) {
#line 193
      dev->next_id = 1;
    } else {

    }
#line 194
    list_add_tail(& timer->list, & dev->pending);
#line 195
    ldv_spin_unlock();
#line 196
    timer->dev = dev;
#line 197
    timer->tl.data = (unsigned long )timer;
#line 198
    timer->tl.function = & dev_expire_timer;
#line 199
    init_timer_key(& timer->tl, "&timer->tl", & __key);
#line 200
    timer->tl.expires = ((unsigned long )timeout * 250UL) / 1000UL + (unsigned long )jiffies;
#line 201
    add_timer(& timer->tl);
#line 202
    id = timer->id;
  }
#line 204
  return (id);
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static int misdn_del_timer(struct mISDNtimerdev *dev , int id ) 
{ 
  struct mISDNtimer *timer ;
  int ret ;
  struct list_head  const  *__mptr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct list_head  const  *__mptr___0 ;

  {
#line 212
  ret = 0;
#line 214
  ldv_spin_lock();
#line 215
  __mptr = (struct list_head  const  *)dev->pending.next;
#line 215
  timer = (struct mISDNtimer *)__mptr;
#line 215
  goto ldv_34969;
  ldv_34968: 
#line 216
  ______f.func = "misdn_del_timer";
#line 216
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 216
  ______f.line = 216U;
#line 216
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 216
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 216
  ______r = timer->id == id;
#line 216
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 216
  if (______r != 0) {
#line 217
    list_del_init(& timer->list);
#line 221
    del_timer(& timer->tl);
#line 222
    ret = timer->id;
#line 223
    kfree((void const   *)timer);
#line 224
    goto unlock;
  } else {

  }
#line 215
  __mptr___0 = (struct list_head  const  *)timer->list.next;
#line 215
  timer = (struct mISDNtimer *)__mptr___0;
  ldv_34969: 
#line 215
  __builtin_prefetch((void const   *)timer->list.next);
#line 215
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
#line 216
    goto ldv_34968;
  } else {

  }

  unlock: 
#line 228
  ldv_spin_unlock();
#line 229
  return (ret);
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static int mISDN_ioctl(struct inode *inode , struct file *filep , unsigned int cmd ,
                       unsigned long arg ) 
{ 
  struct mISDNtimerdev *dev ;
  int id ;
  int tout ;
  int ret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int __ret_pu ;
  int __pu_val ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___0 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int __ret_gu___2 ;
  unsigned long __val_gu___2 ;
  int tmp___1 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int __ret_pu___2 ;
  int __pu_val___2 ;
  int tmp___2 ;

  {
#line 236
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 237
  ret = 0;
#line 240
  ______f.func = "mISDN_ioctl";
#line 240
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 240
  ______f.line = 240U;
#line 240
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 240
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 240
  ______r = (*debug___6 & 16777216U) != 0U;
#line 240
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 240
  if (______r != 0) {
#line 241
    printk("<7>%s(%p, %x, %lx)\n", "mISDN_ioctl", filep, cmd, arg);
  } else {

  }
#line 243
  switch (cmd) {
  case 2147764544U: ;
#line 245
  if (0) {
#line 245
    might_fault();
#line 245
    switch (4UL) {
    case 1UL: 
#line 245
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 245
    goto ldv_34998;
    case 2UL: 
#line 245
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 245
    goto ldv_34998;
    case 4UL: 
#line 245
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 245
    goto ldv_34998;
    case 8UL: 
#line 245
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 245
    goto ldv_34998;
    default: 
#line 245
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 245
    goto ldv_34998;
    }
    ldv_34998: 
#line 245
    tout = (int )__val_gu;
#line 245
    tmp = __ret_gu != 0;
  } else {
#line 245
    ______f___0.func = "mISDN_ioctl";
#line 245
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 245
    ______f___0.line = 245U;
#line 245
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 245
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 245
    might_fault();
#line 245
    switch (4UL) {
    case 1UL: 
#line 245
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 245
    goto ldv_35009;
    case 2UL: 
#line 245
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 245
    goto ldv_35009;
    case 4UL: 
#line 245
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 245
    goto ldv_35009;
    case 8UL: 
#line 245
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 245
    goto ldv_35009;
    default: 
#line 245
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 245
    goto ldv_35009;
    }
    ldv_35009: 
#line 245
    tout = (int )__val_gu___0;
#line 245
    ______r___0 = __ret_gu___0 != 0;
#line 245
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 245
    tmp = ______r___0 != 0;
  }
#line 245
  if (tmp) {
#line 246
    ret = -14;
#line 247
    goto ldv_35016;
  } else {

  }
#line 249
  id = misdn_add_timer(dev, tout);
#line 250
  ______f___1.func = "mISDN_ioctl";
#line 250
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 250
  ______f___1.line = 250U;
#line 250
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 250
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 250
  ______r___1 = (*debug___6 & 16777216U) != 0U;
#line 250
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 250
  if (______r___1 != 0) {
#line 251
    printk("<7>%s add %d id %d\n", "mISDN_ioctl", tout, id);
  } else {

  }
#line 253
  ______f___2.func = "mISDN_ioctl";
#line 253
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 253
  ______f___2.line = 253U;
#line 253
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 253
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 253
  ______r___2 = id < 0;
#line 253
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 253
  if (______r___2 != 0) {
#line 254
    ret = id;
#line 255
    goto ldv_35016;
  } else {

  }
#line 257
  if (0) {
#line 257
    might_fault();
#line 257
    __pu_val = id;
#line 257
    switch (4UL) {
    case 1UL: 
#line 257
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35035;
    case 2UL: 
#line 257
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35035;
    case 4UL: 
#line 257
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35035;
    case 8UL: 
#line 257
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35035;
    default: 
#line 257
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35035;
    }
    ldv_35035: 
#line 257
    tmp___0 = __ret_pu != 0;
  } else {
#line 257
    ______f___3.func = "mISDN_ioctl";
#line 257
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 257
    ______f___3.line = 257U;
#line 257
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 257
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 257
    might_fault();
#line 257
    __pu_val___0 = id;
#line 257
    switch (4UL) {
    case 1UL: 
#line 257
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35046;
    case 2UL: 
#line 257
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35046;
    case 4UL: 
#line 257
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35046;
    case 8UL: 
#line 257
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35046;
    default: 
#line 257
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" ((int *)arg): "ebx");
#line 257
    goto ldv_35046;
    }
    ldv_35046: 
#line 257
    ______r___3 = __ret_pu___0 != 0;
#line 257
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 257
    tmp___0 = ______r___3 != 0;
  }
#line 257
  if (tmp___0) {
#line 258
    ret = -14;
  } else {

  }
#line 259
  goto ldv_35016;
  case 2147764545U: ;
#line 261
  if (0) {
#line 261
    might_fault();
#line 261
    switch (4UL) {
    case 1UL: 
#line 261
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 261
    goto ldv_35066;
    case 2UL: 
#line 261
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 261
    goto ldv_35066;
    case 4UL: 
#line 261
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 261
    goto ldv_35066;
    case 8UL: 
#line 261
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 261
    goto ldv_35066;
    default: 
#line 261
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 261
    goto ldv_35066;
    }
    ldv_35066: 
#line 261
    id = (int )__val_gu___1;
#line 261
    tmp___1 = __ret_gu___1 != 0;
  } else {
#line 261
    ______f___4.func = "mISDN_ioctl";
#line 261
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 261
    ______f___4.line = 261U;
#line 261
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 261
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 261
    might_fault();
#line 261
    switch (4UL) {
    case 1UL: 
#line 261
    __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)arg));
#line 261
    goto ldv_35077;
    case 2UL: 
#line 261
    __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)arg));
#line 261
    goto ldv_35077;
    case 4UL: 
#line 261
    __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)arg));
#line 261
    goto ldv_35077;
    case 8UL: 
#line 261
    __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)arg));
#line 261
    goto ldv_35077;
    default: 
#line 261
    __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___2), "=d" (__val_gu___2): "0" ((int *)arg));
#line 261
    goto ldv_35077;
    }
    ldv_35077: 
#line 261
    id = (int )__val_gu___2;
#line 261
    ______r___4 = __ret_gu___2 != 0;
#line 261
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 261
    tmp___1 = ______r___4 != 0;
  }
#line 261
  if (tmp___1) {
#line 262
    ret = -14;
#line 263
    goto ldv_35016;
  } else {

  }
#line 265
  ______f___5.func = "mISDN_ioctl";
#line 265
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 265
  ______f___5.line = 265U;
#line 265
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 265
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 265
  ______r___5 = (*debug___6 & 16777216U) != 0U;
#line 265
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 265
  if (______r___5 != 0) {
#line 266
    printk("<7>%s del id %d\n", "mISDN_ioctl", id);
  } else {

  }
#line 267
  id = misdn_del_timer(dev, id);
#line 268
  if (0) {
#line 268
    might_fault();
#line 268
    __pu_val___1 = id;
#line 268
    switch (4UL) {
    case 1UL: 
#line 268
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35099;
    case 2UL: 
#line 268
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35099;
    case 4UL: 
#line 268
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35099;
    case 8UL: 
#line 268
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35099;
    default: 
#line 268
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35099;
    }
    ldv_35099: 
#line 268
    tmp___2 = __ret_pu___1 != 0;
  } else {
#line 268
    ______f___6.func = "mISDN_ioctl";
#line 268
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 268
    ______f___6.line = 268U;
#line 268
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 268
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 268
    might_fault();
#line 268
    __pu_val___2 = id;
#line 268
    switch (4UL) {
    case 1UL: 
#line 268
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35110;
    case 2UL: 
#line 268
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35110;
    case 4UL: 
#line 268
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35110;
    case 8UL: 
#line 268
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35110;
    default: 
#line 268
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
#line 268
    goto ldv_35110;
    }
    ldv_35110: 
#line 268
    ______r___6 = __ret_pu___2 != 0;
#line 268
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 268
    tmp___2 = ______r___6 != 0;
  }
#line 268
  if (tmp___2) {
#line 269
    ret = -14;
  } else {

  }
#line 270
  goto ldv_35016;
  default: 
#line 272
  ret = -22;
  }
  ldv_35016: ;
#line 274
  return (ret);
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static struct file_operations  const  mISDN_fops  = 
#line 277
     {0, 0, & mISDN_read, 0, 0, 0, 0, & mISDN_poll, & mISDN_ioctl, 0, 0, 0, & mISDN_open,
    0, & mISDN_close, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
static struct miscdevice mISDNtimer  =    {255, "mISDNtimer", & mISDN_fops, {0, 0}, 0, 0};
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
int mISDN_inittimer(u_int *deb ) 
{ 
  int err ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 296
  debug___6 = deb;
#line 297
  err = misc_register(& mISDNtimer);
#line 298
  ______f.func = "mISDN_inittimer";
#line 298
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 298
  ______f.line = 298U;
#line 298
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 298
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 298
  ______r = err != 0;
#line 298
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 298
  if (______r != 0) {
#line 299
    printk("<4>mISDN: Could not register timer device\n");
  } else {

  }
#line 300
  return (err);
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
void mISDN_timer_cleanup(void) 
{ 


  {
#line 305
  misc_deregister(& mISDNtimer);
#line 306
  return;
}
}
#line 327
extern void ldv_check_return_value(int  ) ;
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct file *var_group1 ;
  char *var_mISDN_read_2_p1 ;
  size_t var_mISDN_read_2_p2 ;
  loff_t *var_mISDN_read_2_p3 ;
  ssize_t res_mISDN_read_2 ;
  poll_table *var_mISDN_poll_3_p1 ;
  struct inode *var_group2 ;
  unsigned int var_mISDN_ioctl_7_p2 ;
  unsigned long var_mISDN_ioctl_7_p3 ;
  int res_mISDN_open_0 ;
  unsigned long var_dev_expire_timer_4_p0 ;
  int ldv_s_mISDN_fops_file_operations ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;

  {
#line 405
  ldv_s_mISDN_fops_file_operations = 0;
#line 395
  LDV_IN_INTERRUPT = 1;
#line 404
  ldv_initialize();
#line 411
  goto ldv_35185;
  ldv_35184: 
#line 415
  tmp = nondet_int();
#line 415
  switch (tmp) {
  case 0: 
#line 420
  ______f___0.func = "ldv_main9_sequence_infinite_withcheck_stateful";
#line 420
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 420
  ______f___0.line = 420U;
#line 420
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 420
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 420
  ______r___0 = ldv_s_mISDN_fops_file_operations == 0;
#line 420
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 420
  if (______r___0 != 0) {
#line 425
    ldv_handler_precall();
#line 426
    res_mISDN_open_0 = mISDN_open(var_group2, var_group1);
#line 427
    ldv_check_return_value(res_mISDN_open_0);
#line 428
    ______f.func = "ldv_main9_sequence_infinite_withcheck_stateful";
#line 428
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 428
    ______f.line = 428U;
#line 428
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 428
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 428
    ______r = res_mISDN_open_0 != 0;
#line 428
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 428
    if (______r != 0) {
#line 429
      goto ldv_module_exit;
    } else {

    }
#line 430
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
#line 436
  goto ldv_35168;
  case 1: 
#line 440
  ______f___2.func = "ldv_main9_sequence_infinite_withcheck_stateful";
#line 440
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 440
  ______f___2.line = 440U;
#line 440
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 440
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 440
  ______r___2 = ldv_s_mISDN_fops_file_operations == 1;
#line 440
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 440
  if (______r___2 != 0) {
#line 445
    ldv_handler_precall();
#line 446
    res_mISDN_read_2 = mISDN_read(var_group1, var_mISDN_read_2_p1, var_mISDN_read_2_p2,
                                  var_mISDN_read_2_p3);
#line 447
    ldv_check_return_value((int )res_mISDN_read_2);
#line 448
    ______f___1.func = "ldv_main9_sequence_infinite_withcheck_stateful";
#line 448
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 448
    ______f___1.line = 448U;
#line 448
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 448
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 448
    ______r___1 = res_mISDN_read_2 < 0L;
#line 448
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 448
    if (______r___1 != 0) {
#line 449
      goto ldv_module_exit;
    } else {

    }
#line 450
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
#line 456
  goto ldv_35168;
  case 2: 
#line 460
  ______f___3.func = "ldv_main9_sequence_infinite_withcheck_stateful";
#line 460
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared";
#line 460
  ______f___3.line = 460U;
#line 460
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 460
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 460
  ______r___3 = ldv_s_mISDN_fops_file_operations == 2;
#line 460
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 460
  if (______r___3 != 0) {
#line 465
    ldv_handler_precall();
#line 466
    mISDN_close(var_group2, var_group1);
#line 467
    ldv_s_mISDN_fops_file_operations = 0;
  } else {

  }
#line 473
  goto ldv_35168;
  case 3: 
#line 482
  ldv_handler_precall();
#line 483
  mISDN_poll(var_group1, var_mISDN_poll_3_p1);
#line 490
  goto ldv_35168;
  case 4: 
#line 499
  ldv_handler_precall();
#line 500
  mISDN_ioctl(var_group2, var_group1, var_mISDN_ioctl_7_p2, var_mISDN_ioctl_7_p3);
#line 507
  goto ldv_35168;
  case 5: 
#line 516
  ldv_handler_precall();
#line 517
  dev_expire_timer(var_dev_expire_timer_4_p0);
#line 524
  goto ldv_35168;
  default: ;
#line 525
  goto ldv_35168;
  }
  ldv_35168: ;
  ldv_35185: 
#line 411
  tmp___0 = nondet_int();
#line 411
  if (tmp___0 != 0 || ldv_s_mISDN_fops_file_operations != 0) {
#line 413
    goto ldv_35184;
  } else {

  }

  ldv_module_exit: ;
#line 534
  ldv_check_final_state();
#line 537
  return;
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
unsigned long ldv___get_free_pages_213(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 558
  ldv_check_alloc_flags(ldv_func_arg1);
#line 560
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 560
  return (tmp);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 569
  ldv_check_alloc_flags(flags);
#line 571
  ldv_kmalloc_214(size, flags);
#line 572
  return ((void *)0);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
void *ldv_kmem_cache_alloc_218(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 613
  ldv_check_alloc_flags(ldv_func_arg2);
#line 615
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 616
  return ((void *)0);
}
}
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct sk_buff *ldv_skb_clone_225(struct sk_buff *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 689
  ldv_check_alloc_flags(ldv_func_arg2);
#line 691
  tmp = skb_clone(ldv_func_arg1, ldv_func_arg2);
#line 691
  return (tmp);
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct sk_buff *ldv_skb_copy_227(struct sk_buff  const  *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 711
  ldv_check_alloc_flags(ldv_func_arg2);
#line 713
  tmp = skb_copy(ldv_func_arg1, ldv_func_arg2);
#line 713
  return (tmp);
}
}
#line 716 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
struct sk_buff *ldv___netdev_alloc_skb_228(struct net_device *ldv_func_arg1 , unsigned int ldv_func_arg2 ,
                                           gfp_t ldv_func_arg3 ) 
{ 
  struct sk_buff *tmp ;

  {
#line 723
  ldv_check_alloc_flags(ldv_func_arg3);
#line 725
  tmp = __netdev_alloc_skb(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3);
#line 725
  return (tmp);
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/43_1a/drivers/isdn/mISDN/timerdev.c.prepared"
int ldv_pskb_expand_head_229(struct sk_buff *ldv_func_arg1 , int ldv_func_arg2 , int ldv_func_arg3 ,
                             gfp_t ldv_func_arg4 ) 
{ 
  int tmp ;

  {
#line 736
  ldv_check_alloc_flags(ldv_func_arg4);
#line 738
  tmp = pskb_expand_head(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3, ldv_func_arg4);
#line 738
  return (tmp);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin  =    LDV_SPIN_UNLOCKED;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
#line 28
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 28
    ldv_error();
  }
#line 29
  return;
}
}
#line 31
extern struct page *ldv_some_page(void) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
#line 37
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 37
    ldv_error();
  }
#line 39
  tmp = ldv_some_page();
#line 39
  return (tmp);
}
}
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_nonatomic(void) 
{ 


  {
#line 46
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
#line 46
    ldv_error();
  }
#line 47
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_lock(void) 
{ 


  {
#line 53
  ldv_spin = LDV_SPIN_LOCKED;
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_unlock(void) 
{ 


  {
#line 60
  ldv_spin = LDV_SPIN_UNLOCKED;
#line 61
  return;
}
}
#line 71
int ldv_spin_trylock(void) ;
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___680  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_spin_trylock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c",
    71, {{0UL, 0UL}}};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin_trylock(void) 
{ 
  int is_lock ;
  int ______r ;

  {
#line 69
  is_lock = ldv_undef_int();
#line 71
  ______r = ! (! is_lock);
#line 71
  ______f___680.ldv_815.miss_hit[______r] = ______f___680.ldv_815.miss_hit[______r] + 1UL;
#line 71
  if (______r) {
#line 74
    return (0);
  } else {
#line 79
    ldv_spin = LDV_SPIN_LOCKED;
#line 81
    return (1);
  }
}
}
