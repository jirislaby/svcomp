/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 207
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1208_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1208_8 ldv_1208 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   char primary_hash ;
   char secondary_hash ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
};
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 109 "include/linux/kernel.h"
struct completion;
#line 210
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2054_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2069_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2070_14 {
   struct __anonstruct_ldv_2054_15 ldv_2054 ;
   struct __anonstruct_ldv_2069_16 ldv_2069 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2070_14 ldv_2070 ;
};
#line 121 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct thread_struct;
#line 123
struct cpumask;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4664_20 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4670_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4671_19 {
   struct __anonstruct_ldv_4664_20 ldv_4664 ;
   struct __anonstruct_ldv_4670_21 ldv_4670 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4680_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4671_19 ldv_4671 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4680_22 ldv_4680 ;
};
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426
struct ds_context;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5160_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5183_25 {
   struct __anonstruct_ldv_5160_26 ldv_5160 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5183_25 ldv_5183 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 170 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 539 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5734_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5735_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5734_32 ldv_5734 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5735_31 ldv_5735 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 268 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 643 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 168 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 217
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 227
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 234
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 241 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 416
struct kobject;
#line 417 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 132 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10504_111 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10504_111 ldv_10504 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 435 "include/linux/rcupdate.h"
struct tracepoint;
#line 436 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 57 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 67 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 181
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 187
struct module_sect_attrs;
#line 187
struct module_notes_attrs;
#line 187
struct ftrace_event_call;
#line 187 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 544
struct device_driver;
#line 408 "include/linux/rculist.h"
struct nameidata;
#line 409
struct path;
#line 410
struct vfsmount;
#line 411 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct inode;
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_113 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_113 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 193
struct prio_tree_node;
#line 193 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 568 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct iovec;
#line 41
struct kiocb;
#line 42
struct pipe_inode_info;
#line 43
struct poll_table_struct;
#line 44
struct kstatfs;
#line 45
struct cred;
#line 415 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 474 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 322 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 384 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 415
struct address_space;
#line 416
struct writeback_control;
#line 564 "include/linux/fs.h"
union __anonunion_arg_116 {
   char *buf ;
   void *data ;
};
#line 564 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_115 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_116 arg ;
   int error ;
};
#line 564 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_115 read_descriptor_t;
#line 567 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 616
struct backing_dev_info;
#line 617 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 638
struct hd_struct;
#line 638
struct gendisk;
#line 638 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 706
struct posix_acl;
#line 707
struct inode_operations;
#line 707
struct file_operations;
#line 707
struct file_lock;
#line 707
struct cdev;
#line 707 "include/linux/fs.h"
union __anonunion_ldv_13184_117 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 707 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_13184_117 ldv_13184 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 875 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 883 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 906 "include/linux/fs.h"
union __anonunion_f_u_118 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 906 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_118 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1029
struct files_struct;
#line 1029 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_120 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_119 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_120 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_119 fl_u ;
};
#line 1134 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1311
struct file_system_type;
#line 1311
struct super_operations;
#line 1311
struct xattr_handler;
#line 1311
struct mtd_info;
#line 1311 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1429 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1468 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1508 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1551 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1729 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 6 "include/asm-generic/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm-generic/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm-generic/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "include/asm-generic/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "include/asm-generic/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 30 "include/asm-generic/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 138 "include/asm-generic/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "include/linux/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 36 "include/linux/cdev.h"
struct tty_struct;
#line 37
struct tty_driver;
#line 38 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 278 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 278 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 329 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   atomic_t users ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 70 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 79
struct signal_struct;
#line 80
struct tty_port;
#line 81 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   void (*drop)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 205 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 226 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 356
struct class;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 212 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 234 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 302 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 322 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 545 "include/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __u16 wBytesPerInterval ;
};
#line 602 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 769
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5
} ;
#line 778
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 790
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 146 "include/linux/irq.h"
struct irqaction;
#line 209 "include/linux/hardirq.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160
struct hrtimer_clock_base;
#line 161
struct hrtimer_cpu_base;
#line 170
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 175 "include/linux/rbtree.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 615
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class_private;
#line 20
struct bus_type;
#line 21
struct bus_type_private;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 281 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 308 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 369 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 378
struct dma_coherent_mem;
#line 378 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 30 "include/linux/mm_types.h"
typedef unsigned long mm_counter_t;
#line 31 "include/linux/mm_types.h"
struct __anonstruct_ldv_18084_124 {
   u16 inuse ;
   u16 objects ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_18085_123 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_18084_124 ldv_18084 ;
};
#line 31 "include/linux/mm_types.h"
struct __anonstruct_ldv_18090_126 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_18093_125 {
   struct __anonstruct_ldv_18090_126 ldv_18090 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_18097_127 {
   unsigned long index ;
   void *freelist ;
};
#line 31 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_18085_123 ldv_18085 ;
   union __anonunion_ldv_18093_125 ldv_18093 ;
   union __anonunion_ldv_18097_127 ldv_18097 ;
   struct list_head lru ;
};
#line 128 "include/linux/mm_types.h"
struct __anonstruct_vm_set_129 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 128 "include/linux/mm_types.h"
union __anonunion_shared_128 {
   struct __anonstruct_vm_set_129 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 128
struct anon_vma;
#line 128
struct vm_operations_struct;
#line 128
struct mempolicy;
#line 128 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_128 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 191 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 197 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 203
struct linux_binfmt;
#line 203
struct mmu_notifier_mm;
#line 203 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 147
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_130 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_130 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_132 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_133 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_134 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_135 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_136 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_137 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_131 {
   int _pad[28U] ;
   struct __anonstruct__kill_132 _kill ;
   struct __anonstruct__timer_133 _timer ;
   struct __anonstruct__rt_134 _rt ;
   struct __anonstruct__sigchld_135 _sigchld ;
   struct __anonstruct__sigfault_136 _sigfault ;
   struct __anonstruct__sigpoll_137 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_131 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 299
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_140 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_140 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 76 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 839 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key_type;
#line 35
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_19740_141 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_142 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_143 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_19740_141 ldv_19740 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_142 type_data ;
   union __anonunion_payload_143 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct bts_context;
#line 268
struct perf_event_context;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 361
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct kioctx;
#line 55 "include/linux/uio.h"
union __anonunion_ki_obj_144 {
   void *user ;
   struct task_struct *tsk ;
};
#line 55
struct eventfd_ctx;
#line 55 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_144 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 456 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 498 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 506 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 513 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 530 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 566
struct taskstats;
#line 566
struct tty_audit_buf;
#line 566 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 711 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 753
struct reclaim_state;
#line 754 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 772 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1043
struct io_context;
#line 1066
struct rq;
#line 1067 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  , bool  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1124 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1129 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1200
struct rt_rq;
#line 1200 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1217
struct mem_cgroup;
#line 1217 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1556
struct css_set;
#line 1556
struct compat_robust_list_head;
#line 1556
struct ftrace_ret_stack;
#line 1556 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 2616
struct usb_device;
#line 2617
struct usb_driver;
#line 2618
struct wusb_dev;
#line 2619
struct ep_device;
#line 2620 "include/linux/sched.h"
struct usb_host_ss_ep_comp {
   struct usb_ss_ep_comp_descriptor desc ;
   unsigned char *extra ;
   int extralen ;
};
#line 60 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   struct usb_host_ss_ep_comp *ss_ep_comp ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 87 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 101
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 108 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   unsigned char resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 215 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 242 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 308 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 320
struct mon_bus;
#line 320 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 360
struct usb_tt;
#line 361 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
};
#line 644 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 774 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 786 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 945 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 978
struct urb;
#line 979 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
#line 996
struct usb_sg_request;
#line 996 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct usb_sg_request *sg ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 1364
struct scatterlist;
#line 1411 "include/linux/usb.h"
struct usb_sg_request {
   int status ;
   size_t bytes ;
   spinlock_t lock ;
   struct usb_device *dev ;
   int pipe ;
   struct scatterlist *sg ;
   int nents ;
   int entries ;
   struct urb **urbs ;
   int count ;
   struct completion complete ;
};
#line 59 "include/linux/sysrq.h"
struct kfifo {
   unsigned char *buffer ;
   unsigned int size ;
   unsigned int in ;
   unsigned int out ;
};
#line 615 "include/linux/kfifo.h"
enum port_dev_state {
    PORT_UNREGISTERED = 0,
    PORT_REGISTERING = 1,
    PORT_REGISTERED = 2,
    PORT_UNREGISTERING = 3
} ;
#line 622
struct usb_serial;
#line 622 "include/linux/kfifo.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   struct kfifo write_fifo ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   int tx_bytes_flight ;
   int urbs_in_flight ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   unsigned long sysrq ;
   struct device dev ;
   enum port_dev_state dev_state ;
};
#line 127 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 127 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char attached : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 176 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int max_in_flight_urbs ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*disconnect)(struct usb_serial * ) ;
   void (*release)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * ) ;
   void (*close)(struct usb_serial_port * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   void (*dtr_rts)(struct usb_serial_port * , int  ) ;
   int (*carrier_raised)(struct usb_serial_port * ) ;
   void (*init_termios)(struct tty_struct * ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
enum spcp8x5_type {
    SPCP825_007_TYPE = 0,
    SPCP825_008_TYPE = 1,
    SPCP825_PHILIP_TYPE = 2,
    SPCP825_INTERMATIC_TYPE = 3,
    SPCP835_TYPE = 4
} ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct ringbuf {
   unsigned int buf_size ;
   char *buf_buf ;
   char *buf_get ;
   char *buf_put ;
};
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct spcp8x5_private {
   spinlock_t lock ;
   struct ringbuf *buf ;
   int write_urb_in_use ;
   enum spcp8x5_type type ;
   wait_queue_head_t delta_msr_wait ;
   u8 line_control ;
   u8 line_status ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 8 "include/linux/dynamic_debug.h"
extern long long dynamic_debug_enabled ;
#line 9
extern long long dynamic_debug_enabled2 ;
#line 241 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1907;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1907;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1907;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1907;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1907: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4331: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4331;
  } else {

  }

#line 19
  return (order);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 10 "include/linux/debug_locks.h"
extern int debug_locks ;
#line 304 "include/linux/lockdep.h"
extern int lock_is_held(struct lockdep_map * ) ;
#line 538
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 32 "include/linux/spinlock_api_smp.h"
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 268 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 270
  return (& lock->ldv_5735.rlock);
}
}
#line 334 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 336
  _raw_spin_unlock_irqrestore(& lock->ldv_5735.rlock, flags);
#line 337
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 433
extern void interruptible_sleep_on(wait_queue_head_t * ) ;
#line 228 "include/linux/workqueue.h"
extern int schedule_work(struct work_struct * ) ;
#line 314 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 84 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 108 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_held(void) 
{ 
  int tmp ;

  {
#line 110
  if (debug_locks != 0) {
#line 111
    tmp = lock_is_held(& rcu_lock_map);
#line 111
    return (tmp);
  } else {

  }
#line 112
  return (1);
}
}
#line 303 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 307
  return;
}
}
#line 138 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  void **_________p1 ;
  long tmp___0 ;

  {
#line 81
  tmp___0 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___0 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    if (debug_locks != 0) {
#line 81
      tmp = rcu_read_lock_held();
#line 81
      if (tmp == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10843: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10843;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 142 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 148 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 150
  if (size == 0UL) {
#line 151
    return (0);
  } else {

  }
#line 153
  if (size <= 8UL) {
#line 154
    return (3);
  } else {

  }
#line 156
  if (size > 64UL && size <= 96UL) {
#line 157
    return (1);
  } else {

  }
#line 158
  if (size > 128UL && size <= 192UL) {
#line 159
    return (2);
  } else {

  }
#line 160
  if (size <= 8UL) {
#line 160
    return (3);
  } else {

  }
#line 161
  if (size <= 16UL) {
#line 161
    return (4);
  } else {

  }
#line 162
  if (size <= 32UL) {
#line 162
    return (5);
  } else {

  }
#line 163
  if (size <= 64UL) {
#line 163
    return (6);
  } else {

  }
#line 164
  if (size <= 128UL) {
#line 164
    return (7);
  } else {

  }
#line 165
  if (size <= 256UL) {
#line 165
    return (8);
  } else {

  }
#line 166
  if (size <= 512UL) {
#line 166
    return (9);
  } else {

  }
#line 167
  if (size <= 1024UL) {
#line 167
    return (10);
  } else {

  }
#line 168
  if (size <= 2048UL) {
#line 168
    return (11);
  } else {

  }
#line 169
  if (size <= 4096UL) {
#line 169
    return (12);
  } else {

  }
#line 174
  if (size <= 8192UL) {
#line 174
    return (13);
  } else {

  }
#line 175
  if (size <= 16384UL) {
#line 175
    return (14);
  } else {

  }
#line 176
  if (size <= 32768UL) {
#line 176
    return (15);
  } else {

  }
#line 177
  if (size <= 65536UL) {
#line 177
    return (16);
  } else {

  }
#line 178
  if (size <= 131072UL) {
#line 178
    return (17);
  } else {

  }
#line 179
  if (size <= 262144UL) {
#line 179
    return (18);
  } else {

  }
#line 180
  if (size <= 524288UL) {
#line 180
    return (19);
  } else {

  }
#line 181
  if (size <= 1048576UL) {
#line 181
    return (20);
  } else {

  }
#line 182
  if (size <= 2097152UL) {
#line 182
    return (21);
  } else {

  }
#line 183
  return (-1);
}
}
#line 200 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 202
  tmp = kmalloc_index(size);
#line 202
  index = tmp;
#line 204
  if (index == 0) {
#line 205
    return (0);
  } else {

  }
#line 207
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 218
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 221
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 351 "include/linux/tty.h"
extern struct ktermios tty_std_termios ;
#line 373
extern void tty_kref_put(struct tty_struct * ) ;
#line 412
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 417
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 425
extern int tty_termios_hw_change(struct ktermios * , struct ktermios * ) ;
#line 474
extern struct tty_struct *tty_port_tty_get(struct tty_port * ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct * , size_t  ) ;
#line 6
extern int tty_insert_flip_string_flags(struct tty_struct * , unsigned char const   * ,
                                        char const   * , size_t  ) ;
#line 11 "include/linux/tty_flip.h"
__inline static int tty_insert_flip_char(struct tty_struct *tty , unsigned char ch ,
                                         char flag ) 
{ 
  struct tty_buffer *tb ;
  int tmp ;
  int tmp___0 ;

  {
#line 14
  tb = tty->buf.tail;
#line 15
  if ((unsigned long )tb != (unsigned long )((struct tty_buffer *)0) && tb->used < tb->size) {
#line 16
    *(tb->flag_buf_ptr + (unsigned long )tb->used) = (unsigned char )flag;
#line 17
    tmp = tb->used;
#line 17
    tb->used = tb->used + 1;
#line 17
    *(tb->char_buf_ptr + (unsigned long )tmp) = (char )ch;
#line 18
    return (1);
  } else {

  }
#line 20
  tmp___0 = tty_insert_flip_string_flags(tty, (unsigned char const   *)(& ch), (char const   *)(& flag),
                                         1UL);
#line 20
  return (tmp___0);
}
}
#line 433 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 435
  tmp = kobject_name(& dev->kobj);
#line 435
  return (tmp);
}
}
#line 511
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 512
extern void dev_set_drvdata(struct device * , void * ) ;
#line 592
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 2334 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2336
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2336
  return (tmp);
}
}
#line 2360 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2362
  tmp = test_tsk_thread_flag(p, 2);
#line 2362
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2362
  return ((int )tmp___0);
}
}
#line 927 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 929 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 931
  tmp = usb_register_driver(driver, & __this_module, "spcp8x5");
#line 931
  return (tmp);
}
}
#line 933
extern void usb_deregister(struct usb_driver * ) ;
#line 1320
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1321
extern int usb_unlink_urb(struct urb * ) ;
#line 1386
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1404
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1512 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1515
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 117 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 119
  tmp = dev_get_drvdata((struct device  const  *)(& port->dev));
#line 119
  return (tmp);
}
}
#line 122 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 125
  dev_set_drvdata(& port->dev, data);
#line 126
  return;
}
}
#line 276
extern int usb_serial_register(struct usb_serial_driver * ) ;
#line 277
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
#line 280
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
#line 282
extern void usb_serial_disconnect(struct usb_interface * ) ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int debug  ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_device_id  const  id_table[6U]  = {      {3U, 1137U, 2078U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 516U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 561U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 565U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 513U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static struct ringbuf *alloc_ringbuf(unsigned int size ) 
{ 
  struct ringbuf *pb ;
  void *tmp ;
  void *tmp___0 ;
  char *tmp___1 ;

  {
#line 179
  if (size == 0U) {
#line 180
    return (0);
  } else {

  }
#line 182
  tmp = kmalloc(32UL, 208U);
#line 182
  pb = (struct ringbuf *)tmp;
#line 183
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 184
    return (0);
  } else {

  }
#line 186
  tmp___0 = kmalloc((size_t )size, 208U);
#line 186
  pb->buf_buf = (char *)tmp___0;
#line 187
  if ((unsigned long )pb->buf_buf == (unsigned long )((char *)0)) {
#line 188
    kfree((void const   *)pb);
#line 189
    return (0);
  } else {

  }
#line 192
  pb->buf_size = size;
#line 193
  tmp___1 = pb->buf_buf;
#line 193
  pb->buf_put = tmp___1;
#line 193
  pb->buf_get = tmp___1;
#line 195
  return (pb);
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void free_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 201
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 202
    kfree((void const   *)pb->buf_buf);
#line 203
    kfree((void const   *)pb);
  } else {

  }
#line 205
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void clear_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 210
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 211
    pb->buf_get = pb->buf_put;
  } else {

  }
#line 212
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_data(struct ringbuf *pb ) 
{ 


  {
#line 217
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 218
    return (0U);
  } else {

  }
#line 219
  return ((unsigned int )(((long )(pb->buf_put + (unsigned long )pb->buf_size) - (long )pb->buf_get) % (long )pb->buf_size));
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_space(struct ringbuf *pb ) 
{ 


  {
#line 225
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 226
    return (0U);
  } else {

  }
#line 227
  return ((unsigned int )((((long )(pb->buf_get + (unsigned long )pb->buf_size) - (long )pb->buf_put) + -1L) % (long )pb->buf_size));
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int put_ringbuf(struct ringbuf *pb , char const   *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 236
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 237
    return (0U);
  } else {

  }
#line 239
  len = ringbuf_avail_space(pb);
#line 240
  if (count > len) {
#line 241
    count = len;
  } else {

  }
#line 243
  if (count == 0U) {
#line 244
    return (0U);
  } else {

  }
#line 246
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_put);
#line 247
  if (count > len) {
#line 248
    __len = (size_t )len;
#line 248
    __ret = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len);
#line 249
    __len___0 = (size_t )(count - len);
#line 249
    __ret___0 = __builtin_memcpy((void *)pb->buf_buf, (void const   *)buf + (unsigned long )len,
                                 __len___0);
#line 250
    pb->buf_put = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 252
    __len___1 = (size_t )count;
#line 252
    __ret___1 = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len___1);
#line 253
    if (count < len) {
#line 254
      pb->buf_put = pb->buf_put + (unsigned long )count;
    } else {
#line 256
      pb->buf_put = pb->buf_buf;
    }
  }
#line 258
  return (count);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int get_ringbuf(struct ringbuf *pb , char *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 267
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0) || (unsigned long )buf == (unsigned long )((char *)0)) {
#line 268
    return (0U);
  } else {

  }
#line 270
  len = ringbuf_avail_data(pb);
#line 271
  if (count > len) {
#line 272
    count = len;
  } else {

  }
#line 274
  if (count == 0U) {
#line 275
    return (0U);
  } else {

  }
#line 277
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_get);
#line 278
  if (count > len) {
#line 279
    __len = (size_t )len;
#line 279
    __ret = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len);
#line 280
    __len___0 = (size_t )(count - len);
#line 280
    __ret___0 = __builtin_memcpy((void *)buf + (unsigned long )len, (void const   *)pb->buf_buf,
                                 __len___0);
#line 281
    pb->buf_get = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 283
    __len___1 = (size_t )count;
#line 283
    __ret___1 = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len___1);
#line 284
    if (count < len) {
#line 285
      pb->buf_get = pb->buf_get + (unsigned long )count;
    } else {
#line 287
      pb->buf_get = pb->buf_buf;
    }
  }
#line 290
  return (count);
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_driver spcp8x5_driver  = 
#line 293
     {"spcp8x5", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& id_table),
    {{{{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}}}, {0, 0}}, {{0, 0, 0, 0, (_Bool)0, 0,
                                                          0, 0, 0, 0, 0, 0, 0}, 0},
    1U, (unsigned char)0, (unsigned char)0};
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_startup(struct usb_serial *serial ) 
{ 
  struct spcp8x5_private *priv ;
  int i ;
  enum spcp8x5_type type ;
  u16 product ;
  struct _ddebug descriptor ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __ret ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  void *tmp___5 ;

  {
#line 319
  type = SPCP825_007_TYPE;
#line 320
  product = (serial->dev)->descriptor.idProduct;
#line 322
  if ((unsigned int )product == 513U) {
#line 323
    type = SPCP825_007_TYPE;
  } else
#line 324
  if ((unsigned int )product == 561U) {
#line 325
    type = SPCP835_TYPE;
  } else
#line 326
  if ((unsigned int )product == 565U) {
#line 327
    type = SPCP825_008_TYPE;
  } else
#line 328
  if ((unsigned int )product == 516U) {
#line 329
    type = SPCP825_INTERMATIC_TYPE;
  } else
#line 330
  if ((unsigned int )product == 1137U && (unsigned int )(serial->dev)->descriptor.idVendor == 2078U) {
#line 332
    type = SPCP825_PHILIP_TYPE;
  } else {

  }
#line 333
  descriptor.modname = "spcp8x5";
#line 333
  descriptor.function = "spcp8x5_startup";
#line 333
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 333
  descriptor.format = "device type = %d\n";
#line 333
  descriptor.primary_hash = 7;
#line 333
  descriptor.secondary_hash = 62;
#line 333
  descriptor.lineno = 333U;
#line 333
  descriptor.flags = 0U;
#line 333
  __ret = 0;
#line 333
  tmp___2 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 333
  if (tmp___2 != 0L) {
#line 333
    tmp___3 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                               0L);
#line 333
    if (tmp___3 != 0L) {
#line 333
      tmp___1 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 333
      if (tmp___1 != 0L) {
#line 333
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 333
  if (__ret != 0) {
#line 333
    tmp = dev_name((struct device  const  *)(& (serial->dev)->dev));
#line 333
    tmp___0 = dev_driver_string((struct device  const  *)(& (serial->dev)->dev));
#line 333
    printk("<7>%s %s: device type = %d\n", tmp___0, tmp, (int )type);
  } else {

  }
#line 335
  i = 0;
#line 335
  goto ldv_22610;
  ldv_22609: 
#line 336
  tmp___4 = kzalloc(168UL, 208U);
#line 336
  priv = (struct spcp8x5_private *)tmp___4;
#line 337
  if ((unsigned long )priv == (unsigned long )((struct spcp8x5_private *)0)) {
#line 338
    goto cleanup;
  } else {

  }
#line 340
  spinlock_check(& priv->lock);
#line 340
  __raw_spin_lock_init(& priv->lock.ldv_5735.rlock, "&(&priv->lock)->rlock", & __key);
#line 341
  priv->buf = alloc_ringbuf(1024U);
#line 342
  if ((unsigned long )priv->buf == (unsigned long )((struct ringbuf *)0)) {
#line 343
    goto cleanup2;
  } else {

  }
#line 345
  __init_waitqueue_head(& priv->delta_msr_wait, & __key___0);
#line 346
  priv->type = type;
#line 347
  usb_set_serial_port_data(serial->port[i], (void *)priv);
#line 335
  i = i + 1;
  ldv_22610: ;
#line 335
  if ((int )serial->num_ports > i) {
#line 336
    goto ldv_22609;
  } else {

  }

#line 351
  return (0);
  cleanup2: 
#line 354
  kfree((void const   *)priv);
  cleanup: 
#line 356
  i = i - 1;
#line 356
  goto ldv_22613;
  ldv_22612: 
#line 357
  tmp___5 = usb_get_serial_port_data(serial->port[i]);
#line 357
  priv = (struct spcp8x5_private *)tmp___5;
#line 358
  free_ringbuf(priv->buf);
#line 359
  kfree((void const   *)priv);
#line 360
  usb_set_serial_port_data(serial->port[i], 0);
#line 356
  i = i - 1;
  ldv_22613: ;
#line 356
  if (i >= 0) {
#line 357
    goto ldv_22612;
  } else {

  }

#line 362
  return (-12);
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_release(struct usb_serial *serial ) 
{ 
  int i ;
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
#line 371
  i = 0;
#line 371
  goto ldv_22621;
  ldv_22620: 
#line 372
  tmp = usb_get_serial_port_data(serial->port[i]);
#line 372
  priv = (struct spcp8x5_private *)tmp;
#line 373
  if ((unsigned long )priv != (unsigned long )((struct spcp8x5_private *)0)) {
#line 374
    free_ringbuf(priv->buf);
#line 375
    kfree((void const   *)priv);
  } else {

  }
#line 371
  i = i + 1;
  ldv_22621: ;
#line 371
  if ((int )serial->num_ports > i) {
#line 372
    goto ldv_22620;
  } else {

  }

#line 376
  return;
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_set_ctrlLine(struct usb_device *dev , u8 value , enum spcp8x5_type type ) 
{ 
  int retval ;
  u8 mcr ;
  unsigned int tmp ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
#line 386
  mcr = 0U;
#line 388
  if ((unsigned int )type == 0U) {
#line 389
    return (-1);
  } else {

  }
#line 391
  mcr = value;
#line 392
  tmp = __create_pipe(dev, 0U);
#line 392
  retval = usb_control_msg(dev, tmp | 2147483648U, 35, 64, (int )mcr, 4, 0, 0, 100);
#line 395
  if (retval != 0) {
#line 396
    descriptor.modname = "spcp8x5";
#line 396
    descriptor.function = "spcp8x5_set_ctrlLine";
#line 396
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 396
    descriptor.format = "usb_control_msg return %#x\n";
#line 396
    descriptor.primary_hash = 7;
#line 396
    descriptor.secondary_hash = 62;
#line 396
    descriptor.lineno = 396U;
#line 396
    descriptor.flags = 0U;
#line 396
    __ret = 0;
#line 396
    tmp___3 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 396
    if (tmp___3 != 0L) {
#line 396
      tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                 0L);
#line 396
      if (tmp___4 != 0L) {
#line 396
        tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 396
        if (tmp___2 != 0L) {
#line 396
          __ret = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 396
    if (__ret != 0) {
#line 396
      tmp___0 = dev_name((struct device  const  *)(& dev->dev));
#line 396
      tmp___1 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 396
      printk("<7>%s %s: usb_control_msg return %#x\n", tmp___1, tmp___0, retval);
    } else {

    }
  } else {

  }
#line 397
  return (retval);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_get_msr(struct usb_device *dev , u8 *status , enum spcp8x5_type type ) 
{ 
  u8 *status_buffer ;
  int ret ;
  void *tmp ;
  unsigned int tmp___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int __ret___0 ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;

  {
#line 410
  if ((unsigned int )type == 0U) {
#line 411
    return (-1);
  } else {

  }
#line 412
  if ((unsigned long )status == (unsigned long )((u8 *)0)) {
#line 413
    return (-22);
  } else {

  }
#line 415
  tmp = kmalloc(1UL, 208U);
#line 415
  status_buffer = (u8 *)tmp;
#line 416
  if ((unsigned long )status_buffer == (unsigned long )((u8 *)0)) {
#line 417
    return (-12);
  } else {

  }
#line 418
  *status_buffer = *status;
#line 420
  tmp___0 = __create_pipe(dev, 0U);
#line 420
  ret = usb_control_msg(dev, tmp___0 | 2147483776U, 34, 192, 0, 6, (void *)status_buffer,
                        1, 100);
#line 423
  if (ret < 0) {
#line 424
    descriptor.modname = "spcp8x5";
#line 424
    descriptor.function = "spcp8x5_get_msr";
#line 424
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 424
    descriptor.format = "Get MSR = 0x%p failed (error = %d)";
#line 424
    descriptor.primary_hash = 7;
#line 424
    descriptor.secondary_hash = 62;
#line 424
    descriptor.lineno = 425U;
#line 424
    descriptor.flags = 0U;
#line 424
    __ret = 0;
#line 424
    tmp___4 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 424
    if (tmp___4 != 0L) {
#line 424
      tmp___5 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                 0L);
#line 424
      if (tmp___5 != 0L) {
#line 424
        tmp___3 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 424
        if (tmp___3 != 0L) {
#line 424
          __ret = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 424
    if (__ret != 0) {
#line 424
      tmp___1 = dev_name((struct device  const  *)(& dev->dev));
#line 424
      tmp___2 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 424
      printk("<7>%s %s: Get MSR = 0x%p failed (error = %d)", tmp___2, tmp___1, status_buffer,
             ret);
    } else {

    }
  } else {

  }
#line 427
  descriptor___0.modname = "spcp8x5";
#line 427
  descriptor___0.function = "spcp8x5_get_msr";
#line 427
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 427
  descriptor___0.format = "0xc0:0x22:0:6  %d - 0x%p ";
#line 427
  descriptor___0.primary_hash = 7;
#line 427
  descriptor___0.secondary_hash = 62;
#line 427
  descriptor___0.lineno = 427U;
#line 427
  descriptor___0.flags = 0U;
#line 427
  __ret___0 = 0;
#line 427
  tmp___9 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 427
  if (tmp___9 != 0L) {
#line 427
    tmp___10 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                0L);
#line 427
    if (tmp___10 != 0L) {
#line 427
      tmp___8 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 427
      if (tmp___8 != 0L) {
#line 427
        __ret___0 = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 427
  if (__ret___0 != 0) {
#line 427
    tmp___6 = dev_name((struct device  const  *)(& dev->dev));
#line 427
    tmp___7 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 427
    printk("<7>%s %s: 0xc0:0x22:0:6  %d - 0x%p ", tmp___7, tmp___6, ret, status_buffer);
  } else {

  }
#line 428
  *status = *status_buffer;
#line 429
  kfree((void const   *)status_buffer);
#line 431
  return (ret);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_workMode(struct usb_device *dev , u16 value , u16 index ,
                                 enum spcp8x5_type type ) 
{ 
  int ret ;
  unsigned int tmp ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;

  {
#line 443
  if ((unsigned int )type == 0U) {
#line 444
    return;
  } else {

  }
#line 446
  tmp = __create_pipe(dev, 0U);
#line 446
  ret = usb_control_msg(dev, tmp | 2147483648U, 36, 64, (int )value, (int )index,
                        0, 0, 100);
#line 449
  descriptor.modname = "spcp8x5";
#line 449
  descriptor.function = "spcp8x5_set_workMode";
#line 449
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 449
  descriptor.format = "value = %#x , index = %#x\n";
#line 449
  descriptor.primary_hash = 7;
#line 449
  descriptor.secondary_hash = 62;
#line 449
  descriptor.lineno = 449U;
#line 449
  descriptor.flags = 0U;
#line 449
  __ret = 0;
#line 449
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 449
  if (tmp___3 != 0L) {
#line 449
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                               0L);
#line 449
    if (tmp___4 != 0L) {
#line 449
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 449
      if (tmp___2 != 0L) {
#line 449
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 449
  if (__ret != 0) {
#line 449
    tmp___0 = dev_name((struct device  const  *)(& dev->dev));
#line 449
    tmp___1 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 449
    printk("<7>%s %s: value = %#x , index = %#x\n", tmp___1, tmp___0, (int )value,
           (int )index);
  } else {

  }
#line 450
  if (ret < 0) {
#line 451
    descriptor___0.modname = "spcp8x5";
#line 451
    descriptor___0.function = "spcp8x5_set_workMode";
#line 451
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 451
    descriptor___0.format = "RTSCTS usb_control_msg(enable flowctrl) = %d\n";
#line 451
    descriptor___0.primary_hash = 7;
#line 451
    descriptor___0.secondary_hash = 62;
#line 451
    descriptor___0.lineno = 452U;
#line 451
    descriptor___0.flags = 0U;
#line 451
    __ret___0 = 0;
#line 451
    tmp___8 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 451
    if (tmp___8 != 0L) {
#line 451
      tmp___9 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                 0L);
#line 451
      if (tmp___9 != 0L) {
#line 451
        tmp___7 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 451
        if (tmp___7 != 0L) {
#line 451
          __ret___0 = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 451
    if (__ret___0 != 0) {
#line 451
      tmp___5 = dev_name((struct device  const  *)(& dev->dev));
#line 451
      tmp___6 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 451
      printk("<7>%s %s: RTSCTS usb_control_msg(enable flowctrl) = %d\n", tmp___6,
             tmp___5, ret);
    } else {

    }
  } else {

  }
#line 453
  return;
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_carrier_raised(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
#line 457
  tmp = usb_get_serial_port_data(port);
#line 457
  priv = (struct spcp8x5_private *)tmp;
#line 458
  if ((int )((signed char )priv->line_status) < 0) {
#line 459
    return (1);
  } else {

  }
#line 460
  return (0);
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_dtr_rts(struct usb_serial_port *port , int on ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  u8 control ;
  raw_spinlock_t *tmp___0 ;

  {
#line 465
  tmp = usb_get_serial_port_data(port);
#line 465
  priv = (struct spcp8x5_private *)tmp;
#line 469
  tmp___0 = spinlock_check(& priv->lock);
#line 469
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 470
  if (on != 0) {
#line 471
    priv->line_control = 3U;
  } else {
#line 474
    priv->line_control = (unsigned int )priv->line_control & 252U;
  }
#line 476
  control = priv->line_control;
#line 477
  spin_unlock_irqrestore(& priv->lock, flags);
#line 478
  spcp8x5_set_ctrlLine((port->serial)->dev, (int )control, priv->type);
#line 479
  return;
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_close(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  int result ;
  raw_spinlock_t *tmp___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int __ret___0 ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;

  {
#line 485
  tmp = usb_get_serial_port_data(port);
#line 485
  priv = (struct spcp8x5_private *)tmp;
#line 489
  if (debug != 0) {
#line 489
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_close", (int )port->number);
  } else {

  }
#line 491
  tmp___0 = spinlock_check(& priv->lock);
#line 491
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 493
  clear_ringbuf(priv->buf);
#line 494
  spin_unlock_irqrestore(& priv->lock, flags);
#line 497
  if ((unsigned long )port->write_urb != (unsigned long )((struct urb *)0)) {
#line 498
    result = usb_unlink_urb(port->write_urb);
#line 499
    if (result != 0) {
#line 500
      descriptor.modname = "spcp8x5";
#line 500
      descriptor.function = "spcp8x5_close";
#line 500
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 500
      descriptor.format = "usb_unlink_urb(write_urb) = %d\n";
#line 500
      descriptor.primary_hash = 7;
#line 500
      descriptor.secondary_hash = 62;
#line 500
      descriptor.lineno = 501U;
#line 500
      descriptor.flags = 0U;
#line 500
      __ret = 0;
#line 500
      tmp___4 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 500
      if (tmp___4 != 0L) {
#line 500
        tmp___5 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                   0L);
#line 500
        if (tmp___5 != 0L) {
#line 500
          tmp___3 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 500
          if (tmp___3 != 0L) {
#line 500
            __ret = 1;
          } else {

          }
        } else {

        }
      } else {

      }
#line 500
      if (__ret != 0) {
#line 500
        tmp___1 = dev_name((struct device  const  *)(& port->dev));
#line 500
        tmp___2 = dev_driver_string((struct device  const  *)(& port->dev));
#line 500
        printk("<7>%s %s: usb_unlink_urb(write_urb) = %d\n", tmp___2, tmp___1, result);
      } else {

      }
    } else {

    }
  } else {

  }
#line 503
  result = usb_unlink_urb(port->read_urb);
#line 504
  if (result != 0) {
#line 505
    descriptor___0.modname = "spcp8x5";
#line 505
    descriptor___0.function = "spcp8x5_close";
#line 505
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 505
    descriptor___0.format = "usb_unlink_urb(read_urb) = %d\n";
#line 505
    descriptor___0.primary_hash = 7;
#line 505
    descriptor___0.secondary_hash = 62;
#line 505
    descriptor___0.lineno = 505U;
#line 505
    descriptor___0.flags = 0U;
#line 505
    __ret___0 = 0;
#line 505
    tmp___9 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 505
    if (tmp___9 != 0L) {
#line 505
      tmp___10 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                  0L);
#line 505
      if (tmp___10 != 0L) {
#line 505
        tmp___8 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 505
        if (tmp___8 != 0L) {
#line 505
          __ret___0 = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 505
    if (__ret___0 != 0) {
#line 505
      tmp___6 = dev_name((struct device  const  *)(& port->dev));
#line 505
      tmp___7 = dev_driver_string((struct device  const  *)(& port->dev));
#line 505
      printk("<7>%s %s: usb_unlink_urb(read_urb) = %d\n", tmp___7, tmp___6, result);
    } else {

    }
  } else {

  }
#line 507
  return;
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_init_termios(struct tty_struct *tty ) 
{ 


  {
#line 511
  *(tty->termios) = tty_std_termios;
#line 512
  (tty->termios)->c_cflag = 7346U;
#line 513
  (tty->termios)->c_ispeed = 115200U;
#line 514
  (tty->termios)->c_ospeed = 115200U;
#line 515
  return;
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned short uartdata ;
  unsigned char buf[2U] ;
  int baud ;
  int i ;
  u8 control ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  speed_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 522
  serial = port->serial;
#line 523
  tmp = usb_get_serial_port_data(port);
#line 523
  priv = (struct spcp8x5_private *)tmp;
#line 525
  cflag = (tty->termios)->c_cflag;
#line 526
  old_cflag = old_termios->c_cflag;
#line 528
  buf[0] = 0U;
#line 528
  buf[1] = 0U;
#line 535
  tmp___0 = tty_termios_hw_change(tty->termios, old_termios);
#line 535
  if (tmp___0 == 0) {
#line 536
    return;
  } else {

  }
#line 539
  tmp___1 = spinlock_check(& priv->lock);
#line 539
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 540
  control = priv->line_control;
#line 541
  if ((old_cflag & 4111U) == 0U) {
#line 542
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
#line 543
    if ((int )old_cflag >= 0) {
#line 544
      priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
    } else {

    }
  } else {

  }
#line 546
  if ((int )priv->line_control != (int )control) {
#line 547
    control = priv->line_control;
#line 548
    spin_unlock_irqrestore(& priv->lock, flags);
#line 549
    spcp8x5_set_ctrlLine(serial->dev, (int )control, priv->type);
  } else {
#line 551
    spin_unlock_irqrestore(& priv->lock, flags);
  }
#line 555
  tmp___2 = tty_get_baud_rate(tty);
#line 555
  baud = (int )tmp___2;
#line 556
  switch (baud) {
  case 300: 
#line 557
  buf[0] = 0U;
#line 557
  goto ldv_22714;
  case 600: 
#line 558
  buf[0] = 1U;
#line 558
  goto ldv_22714;
  case 1200: 
#line 559
  buf[0] = 2U;
#line 559
  goto ldv_22714;
  case 2400: 
#line 560
  buf[0] = 3U;
#line 560
  goto ldv_22714;
  case 4800: 
#line 561
  buf[0] = 4U;
#line 561
  goto ldv_22714;
  case 9600: 
#line 562
  buf[0] = 5U;
#line 562
  goto ldv_22714;
  case 19200: 
#line 563
  buf[0] = 7U;
#line 563
  goto ldv_22714;
  case 38400: 
#line 564
  buf[0] = 9U;
#line 564
  goto ldv_22714;
  case 57600: 
#line 565
  buf[0] = 10U;
#line 565
  goto ldv_22714;
  case 115200: 
#line 566
  buf[0] = 11U;
#line 566
  goto ldv_22714;
  case 230400: 
#line 567
  buf[0] = 12U;
#line 567
  goto ldv_22714;
  case 460800: 
#line 568
  buf[0] = 13U;
#line 568
  goto ldv_22714;
  case 921600: 
#line 569
  buf[0] = 14U;
#line 569
  goto ldv_22714;
  case 3000000: 
#line 572
  buf[0] = 17U;
#line 572
  goto ldv_22714;
  case 0: ;
  case 1000000: 
#line 576
  buf[0] = 11U;
#line 576
  goto ldv_22714;
  default: 
#line 578
  tmp___3 = dev_name((struct device  const  *)(& port->dev));
#line 578
  tmp___4 = dev_driver_string((struct device  const  *)(& port->dev));
#line 578
  printk("<3>%s %s: spcp825 driver does not support the baudrate requested, using default of 9600.\n",
         tmp___4, tmp___3);
  }
  ldv_22714: ;
#line 583
  if ((cflag & 48U) != 0U) {
#line 584
    switch (cflag & 48U) {
    case 0U: 
#line 586
    buf[1] = buf[1];
#line 587
    goto ldv_22732;
    case 16U: 
#line 589
    buf[1] = (unsigned int )buf[1] | 1U;
#line 590
    goto ldv_22732;
    case 32U: 
#line 592
    buf[1] = (unsigned int )buf[1] | 2U;
#line 593
    goto ldv_22732;
    default: ;
    case 48U: 
#line 596
    buf[1] = (unsigned int )buf[1] | 3U;
#line 597
    goto ldv_22732;
    }
    ldv_22732: ;
  } else {

  }
#line 602
  buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 64U) != 0U ? 4 : 0));
#line 606
  if ((cflag & 256U) != 0U) {
#line 607
    buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 512U) != 0U ? 16 : 48));
  } else {
#line 610
    buf[1] = buf[1];
  }
#line 612
  uartdata = (unsigned short )((int )((short )buf[0]) | (int )((short )((int )buf[1] << 8)));
#line 614
  tmp___5 = __create_pipe(serial->dev, 0U);
#line 614
  i = usb_control_msg(serial->dev, tmp___5 | 2147483648U, 33, 64, (int )uartdata,
                      0, 0, 0, 100);
#line 617
  if (i < 0) {
#line 618
    tmp___6 = dev_name((struct device  const  *)(& port->dev));
#line 618
    tmp___7 = dev_driver_string((struct device  const  *)(& port->dev));
#line 618
    printk("<3>%s %s: Set UART format %#x failed (error = %d)\n", tmp___7, tmp___6,
           (int )uartdata, i);
  } else {

  }
#line 620
  if (debug != 0) {
#line 620
    printk("<7>%s: 0x21:0x40:0:0  %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           i);
  } else {

  }
#line 622
  if ((int )cflag < 0) {
#line 624
    spcp8x5_set_workMode(serial->dev, 10, 0, priv->type);
  } else {

  }
#line 627
  return;
}
}
#line 632 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_open(struct tty_struct *tty , struct usb_serial_port *port ) 
{ 
  struct ktermios tmp_termios ;
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int ret ;
  unsigned long flags ;
  u8 status ;
  unsigned int tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 635
  serial = port->serial;
#line 636
  tmp = usb_get_serial_port_data(port);
#line 636
  priv = (struct spcp8x5_private *)tmp;
#line 639
  status = 48U;
#line 642
  if (debug != 0) {
#line 642
    printk("<7>%s: %s -  port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open", (int )port->number);
  } else {

  }
#line 644
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 645
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 647
  tmp___0 = __create_pipe(serial->dev, 0U);
#line 647
  ret = usb_control_msg(serial->dev, tmp___0 | 2147483648U, 9, 0, 1, 0, 0, 0, 100);
#line 650
  if (ret != 0) {
#line 651
    return (ret);
  } else {

  }
#line 653
  spcp8x5_set_ctrlLine(serial->dev, (int )priv->line_control, priv->type);
#line 656
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 657
    spcp8x5_set_termios(tty, port, & tmp_termios);
  } else {

  }
#line 659
  spcp8x5_get_msr(serial->dev, & status, priv->type);
#line 662
  tmp___1 = spinlock_check(& priv->lock);
#line 662
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 663
  priv->line_status = (unsigned int )status & 240U;
#line 664
  spin_unlock_irqrestore(& priv->lock, flags);
#line 666
  if (debug != 0) {
#line 666
    printk("<7>%s: %s - submitting read urb\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open");
  } else {

  }
#line 667
  (port->read_urb)->dev = serial->dev;
#line 668
  ret = usb_submit_urb(port->read_urb, 208U);
#line 669
  if (ret != 0) {
#line 670
    spcp8x5_close(port);
#line 671
    return (-71);
  } else {

  }
#line 673
  port->port.drain_delay = 256;
#line 674
  return (0);
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_read_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  struct tty_struct *tty ;
  unsigned char *data ;
  unsigned long flags ;
  int i ;
  int result ;
  u8 status ;
  char tty_flag ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  struct _ddebug descriptor___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int __ret___1 ;
  long tmp___12 ;
  long tmp___13 ;
  long tmp___14 ;
  raw_spinlock_t *tmp___15 ;
  struct _ddebug descriptor___2 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int __ret___2 ;
  long tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  struct _ddebug descriptor___3 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int __ret___3 ;
  long tmp___23 ;
  long tmp___24 ;
  long tmp___25 ;

  {
#line 683
  port = (struct usb_serial_port *)urb->context;
#line 684
  tmp = usb_get_serial_port_data(port);
#line 684
  priv = (struct spcp8x5_private *)tmp;
#line 686
  data = (unsigned char *)urb->transfer_buffer;
#line 689
  result = urb->status;
#line 693
  descriptor.modname = "spcp8x5";
#line 693
  descriptor.function = "spcp8x5_read_bulk_callback";
#line 693
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 693
  descriptor.format = "start, result = %d, urb->actual_length = %d\n,";
#line 693
  descriptor.primary_hash = 7;
#line 693
  descriptor.secondary_hash = 62;
#line 693
  descriptor.lineno = 694U;
#line 693
  descriptor.flags = 0U;
#line 693
  __ret = 0;
#line 693
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 693
  if (tmp___3 != 0L) {
#line 693
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                               0L);
#line 693
    if (tmp___4 != 0L) {
#line 693
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 693
      if (tmp___2 != 0L) {
#line 693
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 693
  if (__ret != 0) {
#line 693
    tmp___0 = dev_name((struct device  const  *)(& port->dev));
#line 693
    tmp___1 = dev_driver_string((struct device  const  *)(& port->dev));
#line 693
    printk("<7>%s %s: start, result = %d, urb->actual_length = %d\n,", tmp___1, tmp___0,
           result, urb->actual_length);
  } else {

  }
#line 697
  if (result != 0) {
#line 698
    if (port->port.count == 0) {
#line 699
      return;
    } else {

    }
#line 700
    if (result == -71) {
#line 703
      urb->dev = (port->serial)->dev;
#line 704
      result = usb_submit_urb(urb, 32U);
#line 705
      if (result != 0) {
#line 706
        descriptor___0.modname = "spcp8x5";
#line 706
        descriptor___0.function = "spcp8x5_read_bulk_callback";
#line 706
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 706
        descriptor___0.format = "failed submitting read urb %d\n";
#line 706
        descriptor___0.primary_hash = 7;
#line 706
        descriptor___0.secondary_hash = 62;
#line 706
        descriptor___0.lineno = 708U;
#line 706
        descriptor___0.flags = 0U;
#line 706
        __ret___0 = 0;
#line 706
        tmp___8 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 706
        if (tmp___8 != 0L) {
#line 706
          tmp___9 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                     0L);
#line 706
          if (tmp___9 != 0L) {
#line 706
            tmp___7 = __builtin_expect((unsigned int )descriptor___0.flags != 0U,
                                       0L);
#line 706
            if (tmp___7 != 0L) {
#line 706
              __ret___0 = 1;
            } else {

            }
          } else {

          }
        } else {

        }
#line 706
        if (__ret___0 != 0) {
#line 706
          tmp___5 = dev_name((struct device  const  *)(& port->dev));
#line 706
          tmp___6 = dev_driver_string((struct device  const  *)(& port->dev));
#line 706
          printk("<7>%s %s: failed submitting read urb %d\n", tmp___6, tmp___5, result);
        } else {

        }
      } else {

      }
#line 709
      return;
    } else {

    }
#line 711
    descriptor___1.modname = "spcp8x5";
#line 711
    descriptor___1.function = "spcp8x5_read_bulk_callback";
#line 711
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 711
    descriptor___1.format = "unable to handle the error, exiting.\n";
#line 711
    descriptor___1.primary_hash = 7;
#line 711
    descriptor___1.secondary_hash = 62;
#line 711
    descriptor___1.lineno = 711U;
#line 711
    descriptor___1.flags = 0U;
#line 711
    __ret___1 = 0;
#line 711
    tmp___13 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 711
    if (tmp___13 != 0L) {
#line 711
      tmp___14 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                  0L);
#line 711
      if (tmp___14 != 0L) {
#line 711
        tmp___12 = __builtin_expect((unsigned int )descriptor___1.flags != 0U, 0L);
#line 711
        if (tmp___12 != 0L) {
#line 711
          __ret___1 = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 711
    if (__ret___1 != 0) {
#line 711
      tmp___10 = dev_name((struct device  const  *)(& port->dev));
#line 711
      tmp___11 = dev_driver_string((struct device  const  *)(& port->dev));
#line 711
      printk("<7>%s %s: unable to handle the error, exiting.\n", tmp___11, tmp___10);
    } else {

    }
#line 712
    return;
  } else {

  }
#line 716
  tty_flag = 0;
#line 718
  tmp___15 = spinlock_check(& priv->lock);
#line 718
  flags = _raw_spin_lock_irqsave(tmp___15);
#line 719
  status = priv->line_status;
#line 720
  priv->line_status = (unsigned int )priv->line_status & 139U;
#line 721
  spin_unlock_irqrestore(& priv->lock, flags);
#line 723
  __wake_up(& priv->delta_msr_wait, 1U, 1, 0);
#line 727
  if (((int )status & 4) != 0) {
#line 728
    tty_flag = 1;
  } else
#line 729
  if (((int )status & 32) != 0) {
#line 730
    tty_flag = 3;
  } else
#line 731
  if (((int )status & 16) != 0) {
#line 732
    tty_flag = 2;
  } else {

  }
#line 733
  descriptor___2.modname = "spcp8x5";
#line 733
  descriptor___2.function = "spcp8x5_read_bulk_callback";
#line 733
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 733
  descriptor___2.format = "tty_flag = %d\n";
#line 733
  descriptor___2.primary_hash = 7;
#line 733
  descriptor___2.secondary_hash = 62;
#line 733
  descriptor___2.lineno = 733U;
#line 733
  descriptor___2.flags = 0U;
#line 733
  __ret___2 = 0;
#line 733
  tmp___19 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 733
  if (tmp___19 != 0L) {
#line 733
    tmp___20 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                0L);
#line 733
    if (tmp___20 != 0L) {
#line 733
      tmp___18 = __builtin_expect((unsigned int )descriptor___2.flags != 0U, 0L);
#line 733
      if (tmp___18 != 0L) {
#line 733
        __ret___2 = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 733
  if (__ret___2 != 0) {
#line 733
    tmp___16 = dev_name((struct device  const  *)(& port->dev));
#line 733
    tmp___17 = dev_driver_string((struct device  const  *)(& port->dev));
#line 733
    printk("<7>%s %s: tty_flag = %d\n", tmp___17, tmp___16, (int )tty_flag);
  } else {

  }
#line 735
  tty = tty_port_tty_get(& port->port);
#line 736
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && urb->actual_length != 0U) {
#line 737
    tty_buffer_request_room(tty, (size_t )(urb->actual_length + 1U));
#line 739
    if (((int )status & 64) != 0) {
#line 740
      tty_insert_flip_char(tty, 0, 4);
    } else {

    }
#line 741
    i = 0;
#line 741
    goto ldv_22780;
    ldv_22779: 
#line 742
    tty_insert_flip_char(tty, (int )*(data + (unsigned long )i), (int )tty_flag);
#line 741
    i = i + 1;
    ldv_22780: ;
#line 741
    if ((u32 )i < urb->actual_length) {
#line 742
      goto ldv_22779;
    } else {

    }
#line 743
    tty_flip_buffer_push(tty);
  } else {

  }
#line 745
  tty_kref_put(tty);
#line 748
  if (port->port.count != 0) {
#line 749
    urb->dev = (port->serial)->dev;
#line 750
    result = usb_submit_urb(urb, 32U);
#line 751
    if (result != 0) {
#line 752
      descriptor___3.modname = "spcp8x5";
#line 752
      descriptor___3.function = "spcp8x5_read_bulk_callback";
#line 752
      descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 752
      descriptor___3.format = "failed submitting read urb %d\n";
#line 752
      descriptor___3.primary_hash = 7;
#line 752
      descriptor___3.secondary_hash = 62;
#line 752
      descriptor___3.lineno = 753U;
#line 752
      descriptor___3.flags = 0U;
#line 752
      __ret___3 = 0;
#line 752
      tmp___24 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 752
      if (tmp___24 != 0L) {
#line 752
        tmp___25 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                    0L);
#line 752
        if (tmp___25 != 0L) {
#line 752
          tmp___23 = __builtin_expect((unsigned int )descriptor___3.flags != 0U, 0L);
#line 752
          if (tmp___23 != 0L) {
#line 752
            __ret___3 = 1;
          } else {

          }
        } else {

        }
      } else {

      }
#line 752
      if (__ret___3 != 0) {
#line 752
        tmp___21 = dev_name((struct device  const  *)(& port->dev));
#line 752
        tmp___22 = dev_driver_string((struct device  const  *)(& port->dev));
#line 752
        printk("<7>%s %s: failed submitting read urb %d\n", tmp___22, tmp___21, result);
      } else {

      }
    } else {

    }
  } else {

  }
#line 756
  return;
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_send(struct usb_serial_port *port ) 
{ 
  int count ;
  int result ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  raw_spinlock_t *tmp___0 ;
  struct _ddebug descriptor ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  unsigned int tmp___6 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int __ret___0 ;
  long tmp___9 ;
  long tmp___10 ;
  long tmp___11 ;

  {
#line 763
  tmp = usb_get_serial_port_data(port);
#line 763
  priv = (struct spcp8x5_private *)tmp;
#line 766
  tmp___0 = spinlock_check(& priv->lock);
#line 766
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 768
  if (priv->write_urb_in_use != 0) {
#line 769
    descriptor.modname = "spcp8x5";
#line 769
    descriptor.function = "spcp8x5_send";
#line 769
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 769
    descriptor.format = "write urb still used\n";
#line 769
    descriptor.primary_hash = 7;
#line 769
    descriptor.secondary_hash = 62;
#line 769
    descriptor.lineno = 769U;
#line 769
    descriptor.flags = 0U;
#line 769
    __ret = 0;
#line 769
    tmp___4 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 769
    if (tmp___4 != 0L) {
#line 769
      tmp___5 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                 0L);
#line 769
      if (tmp___5 != 0L) {
#line 769
        tmp___3 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 769
        if (tmp___3 != 0L) {
#line 769
          __ret = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 769
    if (__ret != 0) {
#line 769
      tmp___1 = dev_name((struct device  const  *)(& port->dev));
#line 769
      tmp___2 = dev_driver_string((struct device  const  *)(& port->dev));
#line 769
      printk("<7>%s %s: write urb still used\n", tmp___2, tmp___1);
    } else {

    }
#line 770
    spin_unlock_irqrestore(& priv->lock, flags);
#line 771
    return;
  } else {

  }
#line 775
  memset((port->write_urb)->transfer_buffer, 0, (size_t )port->bulk_out_size);
#line 776
  tmp___6 = get_ringbuf(priv->buf, (char *)(port->write_urb)->transfer_buffer, (unsigned int )port->bulk_out_size);
#line 776
  count = (int )tmp___6;
#line 779
  if (count == 0) {
#line 780
    spin_unlock_irqrestore(& priv->lock, flags);
#line 781
    return;
  } else {

  }
#line 785
  priv->write_urb_in_use = 1;
#line 787
  spin_unlock_irqrestore(& priv->lock, flags);
#line 789
  (port->write_urb)->transfer_buffer_length = (u32 )count;
#line 790
  (port->write_urb)->dev = (port->serial)->dev;
#line 792
  result = usb_submit_urb(port->write_urb, 32U);
#line 793
  if (result != 0) {
#line 794
    descriptor___0.modname = "spcp8x5";
#line 794
    descriptor___0.function = "spcp8x5_send";
#line 794
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 794
    descriptor___0.format = "failed submitting write urb, error %d\n";
#line 794
    descriptor___0.primary_hash = 7;
#line 794
    descriptor___0.secondary_hash = 62;
#line 794
    descriptor___0.lineno = 795U;
#line 794
    descriptor___0.flags = 0U;
#line 794
    __ret___0 = 0;
#line 794
    tmp___10 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 794
    if (tmp___10 != 0L) {
#line 794
      tmp___11 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                  0L);
#line 794
      if (tmp___11 != 0L) {
#line 794
        tmp___9 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 794
        if (tmp___9 != 0L) {
#line 794
          __ret___0 = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 794
    if (__ret___0 != 0) {
#line 794
      tmp___7 = dev_name((struct device  const  *)(& port->dev));
#line 794
      tmp___8 = dev_driver_string((struct device  const  *)(& port->dev));
#line 794
      printk("<7>%s %s: failed submitting write urb, error %d\n", tmp___8, tmp___7,
             result);
    } else {

    }
#line 796
    priv->write_urb_in_use = 0;
  } else {

  }
#line 801
  schedule_work(& port->work);
#line 802
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_write_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int result ;
  int status ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;

  {
#line 809
  port = (struct usb_serial_port *)urb->context;
#line 810
  tmp = usb_get_serial_port_data(port);
#line 810
  priv = (struct spcp8x5_private *)tmp;
#line 812
  status = urb->status;
#line 814
  switch (status) {
  case 0: ;
#line 817
  goto ldv_22810;
  case -104: ;
  case -2: ;
  case -108: 
#line 822
  descriptor.modname = "spcp8x5";
#line 822
  descriptor.function = "spcp8x5_write_bulk_callback";
#line 822
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 822
  descriptor.format = "urb shutting down with status: %d\n";
#line 822
  descriptor.primary_hash = 7;
#line 822
  descriptor.secondary_hash = 62;
#line 822
  descriptor.lineno = 823U;
#line 822
  descriptor.flags = 0U;
#line 822
  __ret = 0;
#line 822
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 822
  if (tmp___3 != 0L) {
#line 822
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                               0L);
#line 822
    if (tmp___4 != 0L) {
#line 822
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 822
      if (tmp___2 != 0L) {
#line 822
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 822
  if (__ret != 0) {
#line 822
    tmp___0 = dev_name((struct device  const  *)(& port->dev));
#line 822
    tmp___1 = dev_driver_string((struct device  const  *)(& port->dev));
#line 822
    printk("<7>%s %s: urb shutting down with status: %d\n", tmp___1, tmp___0, status);
  } else {

  }
#line 824
  priv->write_urb_in_use = 0;
#line 825
  return;
  default: ;
#line 828
  if (debug != 0) {
#line 828
    printk("<7>%s: %s - Overflow in write\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback");
  } else {

  }
#line 829
  if (debug != 0) {
#line 829
    printk("<7>%s: %s - nonzero write bulk status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback", status);
  } else {

  }
#line 831
  (port->write_urb)->transfer_buffer_length = 1U;
#line 832
  (port->write_urb)->dev = (port->serial)->dev;
#line 833
  result = usb_submit_urb(port->write_urb, 32U);
#line 834
  if (result != 0) {
#line 835
    descriptor___0.modname = "spcp8x5";
#line 835
    descriptor___0.function = "spcp8x5_write_bulk_callback";
#line 835
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 835
    descriptor___0.format = "failed resubmitting write urb %d\n";
#line 835
    descriptor___0.primary_hash = 7;
#line 835
    descriptor___0.secondary_hash = 62;
#line 835
    descriptor___0.lineno = 836U;
#line 835
    descriptor___0.flags = 0U;
#line 835
    __ret___0 = 0;
#line 835
    tmp___8 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 835
    if (tmp___8 != 0L) {
#line 835
      tmp___9 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                                 0L);
#line 835
      if (tmp___9 != 0L) {
#line 835
        tmp___7 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 835
        if (tmp___7 != 0L) {
#line 835
          __ret___0 = 1;
        } else {

        }
      } else {

      }
    } else {

    }
#line 835
    if (__ret___0 != 0) {
#line 835
      tmp___5 = dev_name((struct device  const  *)(& port->dev));
#line 835
      tmp___6 = dev_driver_string((struct device  const  *)(& port->dev));
#line 835
      printk("<7>%s %s: failed resubmitting write urb %d\n", tmp___6, tmp___5, result);
    } else {

    }
  } else {
#line 838
    return;
  }
  }
  ldv_22810: 
#line 841
  priv->write_urb_in_use = 0;
#line 844
  spcp8x5_send(port);
#line 845
  return;
}
}
#line 848 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                         int count ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  raw_spinlock_t *tmp___5 ;
  unsigned int tmp___6 ;

  {
#line 851
  tmp = usb_get_serial_port_data(port);
#line 851
  priv = (struct spcp8x5_private *)tmp;
#line 854
  descriptor.modname = "spcp8x5";
#line 854
  descriptor.function = "spcp8x5_write";
#line 854
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared";
#line 854
  descriptor.format = "%d bytes\n";
#line 854
  descriptor.primary_hash = 7;
#line 854
  descriptor.secondary_hash = 62;
#line 854
  descriptor.lineno = 854U;
#line 854
  descriptor.flags = 0U;
#line 854
  __ret = 0;
#line 854
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 128LL) != 0LL, 0L);
#line 854
  if (tmp___3 != 0L) {
#line 854
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 4611686018427387904LL) != 0LL,
                               0L);
#line 854
    if (tmp___4 != 0L) {
#line 854
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 854
      if (tmp___2 != 0L) {
#line 854
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 854
  if (__ret != 0) {
#line 854
    tmp___0 = dev_name((struct device  const  *)(& port->dev));
#line 854
    tmp___1 = dev_driver_string((struct device  const  *)(& port->dev));
#line 854
    printk("<7>%s %s: %d bytes\n", tmp___1, tmp___0, count);
  } else {

  }
#line 856
  if (count == 0) {
#line 857
    return (count);
  } else {

  }
#line 859
  tmp___5 = spinlock_check(& priv->lock);
#line 859
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 860
  tmp___6 = put_ringbuf(priv->buf, (char const   *)buf, (unsigned int )count);
#line 860
  count = (int )tmp___6;
#line 861
  spin_unlock_irqrestore(& priv->lock, flags);
#line 863
  spcp8x5_send(port);
#line 865
  return (count);
}
}
#line 868 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_wait_modem_info(struct usb_serial_port *port , unsigned int arg ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int prevstatus ;
  unsigned int status ;
  unsigned int changed ;
  raw_spinlock_t *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 871
  tmp = usb_get_serial_port_data(port);
#line 871
  priv = (struct spcp8x5_private *)tmp;
#line 877
  tmp___0 = spinlock_check(& priv->lock);
#line 877
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 878
  prevstatus = (unsigned int )priv->line_status;
#line 879
  spin_unlock_irqrestore(& priv->lock, flags);
  ldv_22852: 
#line 883
  interruptible_sleep_on(& priv->delta_msr_wait);
#line 886
  tmp___1 = get_current();
#line 886
  tmp___2 = signal_pending(tmp___1);
#line 886
  if (tmp___2 != 0) {
#line 887
    return (-512);
  } else {

  }
#line 889
  tmp___3 = spinlock_check(& priv->lock);
#line 889
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 890
  status = (unsigned int )priv->line_status;
#line 891
  spin_unlock_irqrestore(& priv->lock, flags);
#line 893
  changed = prevstatus ^ status;
#line 895
  if (((((arg & 128U) != 0U && (changed & 64U) != 0U) || ((arg & 256U) != 0U && (changed & 32U) != 0U)) || ((arg & 64U) != 0U && (changed & 128U) != 0U)) || ((arg & 32U) != 0U && (changed & 16U) != 0U)) {
#line 899
    return (0);
  } else {

  }
#line 901
  prevstatus = status;
#line 902
  goto ldv_22852;
#line 904
  return (0);
}
}
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  int tmp ;

  {
#line 910
  port = (struct usb_serial_port *)tty->driver_data;
#line 911
  if (debug != 0) {
#line 911
    printk("<7>%s: %s (%d) cmd = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number, cmd);
  } else {

  }
#line 913
  switch (cmd) {
  case 21596U: ;
#line 915
  if (debug != 0) {
#line 915
    printk("<7>%s: %s (%d) TIOCMIWAIT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number);
  } else {

  }
#line 916
  tmp = spcp8x5_wait_modem_info(port, (unsigned int )arg);
#line 916
  return (tmp);
  default: ;
#line 919
  if (debug != 0) {
#line 919
    printk("<7>%s: %s not supported = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", cmd);
  } else {

  }
#line 920
  goto ldv_22863;
  }
  ldv_22863: ;
#line 923
  return (-515);
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  u8 control ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;

  {
#line 929
  port = (struct usb_serial_port *)tty->driver_data;
#line 930
  tmp = usb_get_serial_port_data(port);
#line 930
  priv = (struct spcp8x5_private *)tmp;
#line 934
  tmp___0 = spinlock_check(& priv->lock);
#line 934
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 935
  if ((set & 4U) != 0U) {
#line 936
    priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
  } else {

  }
#line 937
  if ((set & 2U) != 0U) {
#line 938
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
  } else {

  }
#line 939
  if ((clear & 4U) != 0U) {
#line 940
    priv->line_control = (unsigned int )priv->line_control & 253U;
  } else {

  }
#line 941
  if ((clear & 2U) != 0U) {
#line 942
    priv->line_control = (unsigned int )priv->line_control & 254U;
  } else {

  }
#line 943
  control = priv->line_control;
#line 944
  spin_unlock_irqrestore(& priv->lock, flags);
#line 946
  tmp___1 = spcp8x5_set_ctrlLine((port->serial)->dev, (int )control, priv->type);
#line 946
  return (tmp___1);
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int mcr ;
  unsigned int status ;
  unsigned int result ;
  raw_spinlock_t *tmp___0 ;

  {
#line 951
  port = (struct usb_serial_port *)tty->driver_data;
#line 952
  tmp = usb_get_serial_port_data(port);
#line 952
  priv = (struct spcp8x5_private *)tmp;
#line 958
  tmp___0 = spinlock_check(& priv->lock);
#line 958
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 959
  mcr = (unsigned int )priv->line_control;
#line 960
  status = (unsigned int )priv->line_status;
#line 961
  spin_unlock_irqrestore(& priv->lock, flags);
#line 963
  result = (unsigned int )(((((((int )mcr & 1 ? 2 : 0) | ((mcr & 2U) != 0U ? 4 : 0)) | ((status & 16U) != 0U ? 32 : 0)) | ((status & 32U) != 0U ? 256 : 0)) | ((status & 64U) != 0U ? 128 : 0)) | ((status & 128U) != 0U ? 64 : 0));
#line 970
  return ((int )result);
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int room ;
  unsigned long flags ;
  raw_spinlock_t *tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 976
  port = (struct usb_serial_port *)tty->driver_data;
#line 977
  tmp = usb_get_serial_port_data(port);
#line 977
  priv = (struct spcp8x5_private *)tmp;
#line 978
  room = 0;
#line 981
  tmp___0 = spinlock_check(& priv->lock);
#line 981
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 982
  tmp___1 = ringbuf_avail_space(priv->buf);
#line 982
  room = (int )tmp___1;
#line 983
  spin_unlock_irqrestore(& priv->lock, flags);
#line 985
  return (room);
}
}
#line 989 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int chars ;
  unsigned long flags ;
  raw_spinlock_t *tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 991
  port = (struct usb_serial_port *)tty->driver_data;
#line 992
  tmp = usb_get_serial_port_data(port);
#line 992
  priv = (struct spcp8x5_private *)tmp;
#line 993
  chars = 0;
#line 996
  tmp___0 = spinlock_check(& priv->lock);
#line 996
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 997
  tmp___1 = ringbuf_avail_data(priv->buf);
#line 997
  chars = (int )tmp___1;
#line 998
  spin_unlock_irqrestore(& priv->lock, flags);
#line 1000
  return (chars);
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_serial_driver spcp8x5_device  = 
#line 1004
     {0, (struct usb_device_id  const  *)(& id_table), 1, {0, 0}, {"SPCP8x5", 0, & __this_module,
                                                                 0, (_Bool)0, 0, 0,
                                                                 0, 0, 0, 0, 0, 0},
    0, {{{{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}}}, {0, 0}}, 0, 0, & spcp8x5_startup,
    0, 0, & spcp8x5_release, 0, 0, 0, 0, & spcp8x5_open, & spcp8x5_close, & spcp8x5_write,
    & spcp8x5_write_room, & spcp8x5_ioctl, & spcp8x5_set_termios, 0, & spcp8x5_chars_in_buffer,
    0, 0, & spcp8x5_tiocmget, & spcp8x5_tiocmset, & spcp8x5_dtr_rts, & spcp8x5_carrier_raised,
    & spcp8x5_init_termios, 0, 0, & spcp8x5_read_bulk_callback, & spcp8x5_write_bulk_callback};
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_init(void) 
{ 
  int retval ;

  {
#line 1032
  retval = usb_serial_register(& spcp8x5_device);
#line 1033
  if (retval != 0) {
#line 1034
    goto failed_usb_serial_register;
  } else {

  }
#line 1035
  retval = usb_register(& spcp8x5_driver);
#line 1036
  if (retval != 0) {
#line 1037
    goto failed_usb_register;
  } else {

  }
#line 1038
  printk("<6>spcp8x5: v0.04:SPCP8x5 USB to serial adaptor driver\n");
#line 1040
  return (0);
  failed_usb_register: 
#line 1042
  usb_serial_deregister(& spcp8x5_device);
  failed_usb_serial_register: ;
#line 1044
  return (retval);
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_exit(void) 
{ 


  {
#line 1049
  usb_deregister(& spcp8x5_driver);
#line 1050
  usb_serial_deregister(& spcp8x5_device);
#line 1051
  return;
}
}
#line 1079
void ldv_check_final_state(void) ;
#line 1082
extern void ldv_check_return_value(int  ) ;
#line 1088
extern void ldv_initialize(void) ;
#line 1091
extern void ldv_handler_precall(void) ;
#line 1094
extern int nondet_int(void) ;
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1100 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/usb/serial/spcp8x5.c.prepared"
void main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  int res_spcp8x5_open_17 ;
  int var_spcp8x5_dtr_rts_13_p1 ;
  unsigned char const   *var_spcp8x5_write_21_p2 ;
  int var_spcp8x5_write_21_p3 ;
  struct ktermios *var_spcp8x5_set_termios_16_p2 ;
  struct file *var_group3 ;
  unsigned int var_spcp8x5_ioctl_23_p2 ;
  unsigned long var_spcp8x5_ioctl_23_p3 ;
  unsigned int var_spcp8x5_tiocmset_24_p2 ;
  unsigned int var_spcp8x5_tiocmset_24_p3 ;
  struct urb *var_group4 ;
  struct usb_serial *var_group5 ;
  int ldv_s_spcp8x5_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2467
  ldv_s_spcp8x5_device_usb_serial_driver = 0;
#line 2374
  LDV_IN_INTERRUPT = 1;
#line 2383
  ldv_initialize();
#line 2464
  ldv_handler_precall();
#line 2465
  tmp = spcp8x5_init();
#line 2465
  if (tmp != 0) {
#line 2466
    goto ldv_final;
  } else {

  }
#line 2471
  goto ldv_22997;
  ldv_22996: 
#line 2475
  tmp___0 = nondet_int();
#line 2475
  switch (tmp___0) {
  case 0: ;
#line 2480
  if (ldv_s_spcp8x5_device_usb_serial_driver == 0) {
#line 2560
    ldv_handler_precall();
#line 2561
    res_spcp8x5_open_17 = spcp8x5_open(var_group1, var_group2);
#line 2562
    ldv_check_return_value(res_spcp8x5_open_17);
#line 2563
    if (res_spcp8x5_open_17 != 0) {
#line 2564
      goto ldv_module_exit;
    } else {

    }
#line 2565
    ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
  } else {

  }
#line 2571
  goto ldv_22979;
  case 1: ;
#line 2575
  if (ldv_s_spcp8x5_device_usb_serial_driver == 1) {
#line 2655
    ldv_handler_precall();
#line 2656
    spcp8x5_close(var_group2);
#line 2657
    ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
  } else {

  }
#line 2663
  goto ldv_22979;
  case 2: ;
#line 2667
  if (ldv_s_spcp8x5_device_usb_serial_driver == 2) {
#line 2747
    ldv_handler_precall();
#line 2748
    spcp8x5_release(var_group5);
#line 2749
    ldv_s_spcp8x5_device_usb_serial_driver = 0;
  } else {

  }
#line 2755
  goto ldv_22979;
  case 3: 
#line 2839
  ldv_handler_precall();
#line 2840
  spcp8x5_dtr_rts(var_group2, var_spcp8x5_dtr_rts_13_p1);
#line 2847
  goto ldv_22979;
  case 4: 
#line 2931
  ldv_handler_precall();
#line 2932
  spcp8x5_carrier_raised(var_group2);
#line 2939
  goto ldv_22979;
  case 5: 
#line 3023
  ldv_handler_precall();
#line 3024
  spcp8x5_write(var_group1, var_group2, var_spcp8x5_write_21_p2, var_spcp8x5_write_21_p3);
#line 3031
  goto ldv_22979;
  case 6: 
#line 3115
  ldv_handler_precall();
#line 3116
  spcp8x5_set_termios(var_group1, var_group2, var_spcp8x5_set_termios_16_p2);
#line 3123
  goto ldv_22979;
  case 7: 
#line 3207
  ldv_handler_precall();
#line 3208
  spcp8x5_init_termios(var_group1);
#line 3215
  goto ldv_22979;
  case 8: 
#line 3299
  ldv_handler_precall();
#line 3300
  spcp8x5_ioctl(var_group1, var_group3, var_spcp8x5_ioctl_23_p2, var_spcp8x5_ioctl_23_p3);
#line 3307
  goto ldv_22979;
  case 9: 
#line 3391
  ldv_handler_precall();
#line 3392
  spcp8x5_tiocmget(var_group1, var_group3);
#line 3399
  goto ldv_22979;
  case 10: 
#line 3483
  ldv_handler_precall();
#line 3484
  spcp8x5_tiocmset(var_group1, var_group3, var_spcp8x5_tiocmset_24_p2, var_spcp8x5_tiocmset_24_p3);
#line 3491
  goto ldv_22979;
  case 11: 
#line 3575
  ldv_handler_precall();
#line 3576
  spcp8x5_write_room(var_group1);
#line 3583
  goto ldv_22979;
  case 12: 
#line 3667
  ldv_handler_precall();
#line 3668
  spcp8x5_read_bulk_callback(var_group4);
#line 3675
  goto ldv_22979;
  case 13: 
#line 3759
  ldv_handler_precall();
#line 3760
  spcp8x5_write_bulk_callback(var_group4);
#line 3767
  goto ldv_22979;
  case 14: 
#line 3851
  ldv_handler_precall();
#line 3852
  spcp8x5_chars_in_buffer(var_group1);
#line 3859
  goto ldv_22979;
  case 15: 
#line 3943
  ldv_handler_precall();
#line 3944
  spcp8x5_startup(var_group5);
#line 3951
  goto ldv_22979;
  default: ;
#line 3952
  goto ldv_22979;
  }
  ldv_22979: ;
  ldv_22997: 
#line 2471
  tmp___1 = nondet_int();
#line 2471
  if (tmp___1 != 0 || ldv_s_spcp8x5_device_usb_serial_driver != 0) {
#line 2473
    goto ldv_22996;
  } else {

  }

  ldv_module_exit: 
#line 4039
  ldv_handler_precall();
#line 4040
  spcp8x5_exit();
  ldv_final: 
#line 4043
  ldv_check_final_state();
#line 4046
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
