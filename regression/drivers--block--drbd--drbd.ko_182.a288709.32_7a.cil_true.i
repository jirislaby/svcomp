/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 149 "include/linux/types.h"
typedef unsigned long sector_t;
#line 150 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u16 __be16;
#line 182 "include/linux/types.h"
typedef __u32 __be32;
#line 187 "include/linux/types.h"
typedef __u32 __wsum;
#line 195 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 196 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 208 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 208 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 213 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 213 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 214 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 219
struct hlist_node;
#line 219 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 223 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 45 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 132 "include/linux/kernel.h"
struct completion;
#line 133
struct pt_regs;
#line 239
struct pid;
#line 773
struct task_struct;
#line 774
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1880_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1880_8 ldv_1880 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2091_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2106_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2107_14 {
   struct __anonstruct_ldv_2091_15 ldv_2091 ;
   struct __anonstruct_ldv_2106_16 ldv_2106 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2107_14 ldv_2107 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4686_20 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4692_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4693_19 {
   struct __anonstruct_ldv_4686_20 ldv_4686 ;
   struct __anonstruct_ldv_4692_21 ldv_4692 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4702_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4693_19 ldv_4693 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4702_22 ldv_4702 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 372 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 380 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 426
struct kmem_cache;
#line 427
struct perf_event;
#line 428 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 651 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 554 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5619_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5620_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5619_27 ldv_5619 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5620_26 ldv_5620 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 73
struct compat_timespec;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5836_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 74
struct pollfd;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5859_29 {
   struct __anonstruct_ldv_5836_30 ldv_5836 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5859_29 ldv_5859 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 397 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 414
struct hlist_nulls_node;
#line 414 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 639 "include/linux/mmzone.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 753 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "include/linux/ioport.h"
struct device;
#line 54 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 282
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 289
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 297
struct wakeup_source;
#line 298 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 42 "include/linux/moduleparam.h"
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion_ldv_11177_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11177_110 ldv_11177 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 396 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 778 "include/linux/rcupdate.h"
struct tracepoint;
#line 779 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 88 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 386
struct module_sect_attrs;
#line 386
struct module_notes_attrs;
#line 386
struct ftrace_event_call;
#line 386 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12342_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12343_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12342_123 ldv_12342 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12348_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12351_124 {
   struct __anonstruct_ldv_12348_125 ldv_12348 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12355_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12343_122 ldv_12343 ;
   union __anonunion_ldv_12351_124 ldv_12351 ;
   union __anonunion_ldv_12355_126 ldv_12355 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12770 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12770 socket_state;
#line 175 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 176
struct pipe_inode_info;
#line 177
struct inode;
#line 178
struct net;
#line 195
struct fasync_struct;
#line 195 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 459 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 30 "include/linux/range.h"
struct file_ra_state;
#line 31
struct user_struct;
#line 32
struct writeback_control;
#line 165 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 182 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 817
struct hrtimer_clock_base;
#line 818
struct hrtimer_cpu_base;
#line 827
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 832 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_19150_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19151_131 {
   __wsum csum ;
   struct __anonstruct_ldv_19150_132 ldv_19150 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19181_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19151_131 ldv_19151 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19181_133 ldv_19181 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 488
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 432 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 315 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 315 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 398 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 57 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 57 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 206
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 213
struct pid_namespace;
#line 213 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 51 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 412 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 162 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 562 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 562 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 562 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 565 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 614
struct backing_dev_info;
#line 615 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 636
struct hd_struct;
#line 636
struct gendisk;
#line 636 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 706
struct posix_acl;
#line 707
struct inode_operations;
#line 707
struct file_lock;
#line 707
struct cdev;
#line 707 "include/linux/fs.h"
union __anonunion_ldv_23146_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 707 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23146_152 ldv_23146 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 870 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 878 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 901 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 901 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1025
struct files_struct;
#line 1025 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1026 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1031 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1132 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1319
struct file_system_type;
#line 1319
struct super_operations;
#line 1319
struct xattr_handler;
#line 1319
struct mtd_info;
#line 1319 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1439 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1477
struct block_device_operations;
#line 1478 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1517 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1560 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1737 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1233
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 198 "include/linux/irq.h"
struct timer_rand_state;
#line 199
struct irqaction;
#line 100 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_163 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_163 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_166 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_169 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_170 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_164 {
   int _pad[28U] ;
   struct __anonstruct__kill_165 _kill ;
   struct __anonstruct__timer_166 _timer ;
   struct __anonstruct__rt_167 _rt ;
   struct __anonstruct__sigchld_168 _sigchld ;
   struct __anonstruct__sigfault_169 _sigfault ;
   struct __anonstruct__sigpoll_170 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_164 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_173 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_173 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_29300_174 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_175 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_176 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_29300_174 ldv_29300 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_175 type_data ;
   union __anonunion_payload_176 payload ;
};
#line 292
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 360
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_177 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_177 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 401 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 443 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 451 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 458 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 475 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 511
struct tty_struct;
#line 511
struct taskstats;
#line 511
struct tty_audit_buf;
#line 511 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
};
#line 658 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 700
struct reclaim_state;
#line 701 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 719 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 994
struct io_context;
#line 1017
struct rq;
#line 1018 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1081 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1086 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1121 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1147
struct rt_rq;
#line 1147 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1171
struct mem_cgroup;
#line 1171 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1509
struct css_set;
#line 1509
struct compat_robust_list_head;
#line 1509 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 326 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3025 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 785 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_34229_182 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_34229_182 ldv_34229 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_183 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_183 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_34371_184 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34377_185 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34385_186 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_34371_184 ldv_34371 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_34377_185 ldv_34377 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_34385_186 ldv_34385 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_187 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_187 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 697
struct request_sock_ops;
#line 698
struct timewait_sock_ops;
#line 699
struct inet_hashinfo;
#line 700
struct raw_hashinfo;
#line 701
struct udp_table;
#line 701 "include/net/sock.h"
union __anonunion_h_188 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 701 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_188 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 178 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 191 "include/linux/drbd.h"
struct __anonstruct_ldv_35532_189 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 191 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35532_189 ldv_35532 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_190 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_190 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_191 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_191 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 138 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct gendisk *disk ;
   struct hd_struct *part[] ;
};
#line 146
struct request_queue;
#line 146
struct blk_integrity;
#line 146 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 56
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 378 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_39155_199 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_39155_199 ldv_39155 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 189 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 190 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 191 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 192 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 193 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 194 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 202 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 204 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 205 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 206 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 207
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 214 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 220 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 229 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 257 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned int flush_seq ;
   int flush_err ;
   struct request flush_rq ;
   struct request *orig_flush_rq ;
   struct list_head pending_flushes ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1143 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1162 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1163 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1164 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1165 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1166 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1224 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct __anonstruct_ldv_40640_206 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 492 "include/linux/ipv6.h"
union __anonunion_ldv_40642_205 {
   struct __anonstruct_ldv_40640_206 ldv_40640 ;
   struct rcu_head rcu ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_40642_205 ldv_40642 ;
};
#line 49 "include/linux/route.h"
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 227 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1530 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 485 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 509 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 524 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 530 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 573 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
};
#line 651
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 679
struct drbd_work;
#line 689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 693
struct drbd_tl_epoch;
#line 724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 776 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_42956_209 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 776 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_42956_209 ldv_42956 ;
};
#line 834
struct drbd_bitmap;
#line 835 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 886 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 896 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 144 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 938 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 945
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 952 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 958 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
};
#line 1160
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2418 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 145 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 152
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 932 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 1204
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    resend = 21,
    fail_frozen_disk_io = 22,
    restart_frozen_disk_io = 23,
    nothing = 24
} ;
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 261
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 552
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 757
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1168
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1204
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 1495
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3510
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_210 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_210 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 493 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 493 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 493 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 493 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 189 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 294
enum drbd_uuid_index {
    UI_CURRENT = 0,
    UI_BITMAP = 1,
    UI_HISTORY_START = 2,
    UI_HISTORY_END = 3,
    UI_SIZE = 4,
    UI_FLAGS = 5,
    UI_EXTENDED_SIZE = 6
} ;
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 2117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30395 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3944 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 181 "include/linux/types.h"
typedef __u32 __le32;
#line 183 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 695 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 93 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    AFTER_LAST_ERR_CODE = 155
} ;
#line 310 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 348 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 909 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 131 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 140 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 107 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 277
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1956: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4360: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4360;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 553 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 162
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 166
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 168
extern void mutex_unlock(struct mutex * ) ;
#line 171
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 52
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5880;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5880;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5880;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5880;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5880: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5620.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5620.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5620.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5620.rlock, flags);
#line 341
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 64
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 189 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 243 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 245
  return (1);
}
}
#line 635 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 639
  return;
}
}
#line 39 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13817: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13817;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 154 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 160 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 162
  if (size == 0UL) {
#line 163
    return (0);
  } else {

  }
#line 165
  if (size <= 8UL) {
#line 166
    return (3);
  } else {

  }
#line 168
  if (size > 64UL && size <= 96UL) {
#line 169
    return (1);
  } else {

  }
#line 170
  if (size > 128UL && size <= 192UL) {
#line 171
    return (2);
  } else {

  }
#line 172
  if (size <= 8UL) {
#line 172
    return (3);
  } else {

  }
#line 173
  if (size <= 16UL) {
#line 173
    return (4);
  } else {

  }
#line 174
  if (size <= 32UL) {
#line 174
    return (5);
  } else {

  }
#line 175
  if (size <= 64UL) {
#line 175
    return (6);
  } else {

  }
#line 176
  if (size <= 128UL) {
#line 176
    return (7);
  } else {

  }
#line 177
  if (size <= 256UL) {
#line 177
    return (8);
  } else {

  }
#line 178
  if (size <= 512UL) {
#line 178
    return (9);
  } else {

  }
#line 179
  if (size <= 1024UL) {
#line 179
    return (10);
  } else {

  }
#line 180
  if (size <= 2048UL) {
#line 180
    return (11);
  } else {

  }
#line 181
  if (size <= 4096UL) {
#line 181
    return (12);
  } else {

  }
#line 186
  if (size <= 8192UL) {
#line 186
    return (13);
  } else {

  }
#line 187
  if (size <= 16384UL) {
#line 187
    return (14);
  } else {

  }
#line 188
  if (size <= 32768UL) {
#line 188
    return (15);
  } else {

  }
#line 189
  if (size <= 65536UL) {
#line 189
    return (16);
  } else {

  }
#line 190
  if (size <= 131072UL) {
#line 190
    return (17);
  } else {

  }
#line 191
  if (size <= 262144UL) {
#line 191
    return (18);
  } else {

  }
#line 192
  if (size <= 524288UL) {
#line 192
    return (19);
  } else {

  }
#line 193
  if (size <= 1048576UL) {
#line 193
    return (20);
  } else {

  }
#line 194
  if (size <= 2097152UL) {
#line 194
    return (21);
  } else {

  }
#line 195
  return (-1);
}
}
#line 212 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 214
  tmp = kmalloc_index(size);
#line 214
  index = tmp;
#line 216
  if (index == 0) {
#line 217
    return (0);
  } else {

  }
#line 219
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 601 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 603
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2202 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 358 "include/linux/sched.h"
extern void schedule(void) ;
#line 2375
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable();
#line 79
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 717 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 719
  return ((bdev->bd_disk)->queue);
}
}
#line 883
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1187
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1283
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1422
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1423
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1424
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1425
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1426
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1427
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1429
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1432
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1434
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1435
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1436
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1437
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1438
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1439
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1441
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1442
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1443
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1444
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1446
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1447
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1448
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1449
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1452
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1455
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1458
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1459
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1461
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1476
rwlock_t global_state_lock ;
#line 1493
char *ppsize(char *buf , unsigned long long size ) ;
#line 1513
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1770
  _raw_read_lock(& global_state_lock);
#line 1771
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1772
  _raw_read_unlock(& global_state_lock);
#line 1774
  return (rv);
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_43939;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35532.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35532.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_43939;
  }
  ldv_43939: ;
#line 1816
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1829
  if (error != 0) {
#line 1831
    tmp = spinlock_check(& mdev->req_lock);
#line 1831
    flags = _raw_spin_lock_irqsave(tmp);
#line 1832
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1833
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1835
  return;
}
}
#line 1861 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1863
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1866
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1869
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2126
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2126
  i = tmp;
#line 2128
  if (i < 0) {
#line 2128
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2128);
  } else {

  }
#line 2129
  if (i == 0) {
#line 2130
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 2131
      drbd_go_diskless(mdev);
    } else {

    }
#line 2132
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2134
  return;
}
}
#line 2137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2141
  atomic_inc(& mdev->local_cnt);
#line 2142
  io_allowed = (unsigned int )mdev->state.ldv_35532.disk >= (unsigned int )mins;
#line 2143
  if (io_allowed == 0) {
#line 2144
    put_ldev(mdev);
  } else {

  }
#line 2145
  return (io_allowed);
}
}
#line 2391 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2393
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2394
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2395
  return;
}
}
#line 2405 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2409
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2409
  if (tmp != 0) {
#line 2410
    return;
  } else {

  }
#line 2412
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2413
  if (r != 0) {
#line 2414
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 2415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2417
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 147
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 147
  return (tmp);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 153
  b = mdev->bitmap;
#line 154
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 154
  if (tmp == 0) {
#line 155
    return;
  } else {

  }
#line 156
  tmp___9 = get_current();
#line 156
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 156
    tmp___7 = get_current();
#line 156
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 156
      tmp___5 = get_current();
#line 156
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 156
        tmp___3 = get_current();
#line 156
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 156
        tmp___4 = (char *)"worker";
      }
#line 156
      tmp___6 = tmp___4;
    } else {
#line 156
      tmp___6 = (char *)"asender";
    }
#line 156
    tmp___8 = tmp___6;
  } else {
#line 156
    tmp___8 = (char *)"receiver";
  }
#line 156
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 162
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 168
  b = mdev->bitmap;
#line 171
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 172
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 173
    return;
  } else {

  }
#line 176
  tmp = ldv_mutex_trylock_7(& b->bm_change);
#line 176
  trylock_failed = tmp == 0;
#line 178
  if (trylock_failed != 0) {
#line 179
    tmp___9 = get_current();
#line 179
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 179
      tmp___7 = get_current();
#line 179
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 179
        tmp___5 = get_current();
#line 179
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 179
          tmp___3 = get_current();
#line 179
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 179
          tmp___4 = (char *)"worker";
        }
#line 179
        tmp___6 = tmp___4;
      } else {
#line 179
        tmp___6 = (char *)"asender";
      }
#line 179
      tmp___8 = tmp___6;
    } else {
#line 179
      tmp___8 = (char *)"receiver";
    }
#line 179
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 187
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 189
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 189
  if (tmp___10 != 0) {
#line 190
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 192
  b->bm_why = why;
#line 193
  b->bm_task = get_current();
#line 194
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 198
  b = mdev->bitmap;
#line 199
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 201
    return;
  } else {

  }
#line 204
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 204
  if (tmp == 0) {
#line 205
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 207
  b->bm_why = 0;
#line 208
  b->bm_task = 0;
#line 209
  ldv_mutex_unlock_9(& b->bm_change);
#line 210
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 219
  page_nr = offset >> 9;
#line 220
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 220
  if (tmp != 0L) {
#line 220
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (220), "i" (12UL));
    ldv_44216: ;
#line 220
    goto ldv_44216;
  } else {

  }
#line 221
  page = *(b->bm_pages + page_nr);
#line 223
  tmp___0 = kmap_atomic(page, km);
#line 223
  return ((unsigned long *)tmp___0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 228
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 228
  return (tmp);
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 233
  kunmap_atomic_notypecheck((void *)p_addr, km);
#line 234
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 238
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 263
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 264
    return;
  } else {

  }
#line 266
  i = 0UL;
#line 266
  goto ldv_44235;
  ldv_44234: ;
#line 267
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 268
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 271
    goto ldv_44233;
  } else {

  }
#line 273
  __free_pages(*(pages + i), 0U);
#line 274
  *(pages + i) = 0;
  ldv_44233: 
#line 266
  i = i + 1UL;
  ldv_44235: ;
#line 266
  if (i < number) {
#line 267
    goto ldv_44234;
  } else {

  }

#line 271
  return;
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 280
  if (v != 0) {
#line 281
    vfree((void const   *)ptr);
  } else {
#line 283
    kfree((void const   *)ptr);
  }
#line 284
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 291
  old_pages = b->bm_pages;
#line 293
  vmalloced = 0U;
#line 294
  have = b->bm_number_of_pages;
#line 296
  tmp = __builtin_expect(have == 0UL, 0L);
#line 296
  if (tmp != 0L) {
#line 296
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 296
    if (tmp___0 != 0L) {
#line 296
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (296), "i" (12UL));
      ldv_44252: ;
#line 296
      goto ldv_44252;
    } else {

    }
  } else {

  }
#line 297
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 297
  if (tmp___1 != 0L) {
#line 297
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 297
    if (tmp___2 != 0L) {
#line 297
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (297), "i" (12UL));
      ldv_44253: ;
#line 297
      goto ldv_44253;
    } else {

    }
  } else {

  }
#line 299
  if (have == want) {
#line 300
    return (old_pages);
  } else {

  }
#line 307
  bytes = (unsigned int )want * 8U;
#line 308
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 308
  new_pages = (struct page **)tmp___3;
#line 309
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 310
    tmp___4 = vmalloc((unsigned long )bytes);
#line 310
    new_pages = (struct page **)tmp___4;
#line 311
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 312
      return (0);
    } else {

    }
#line 313
    vmalloced = 1U;
  } else {

  }
#line 316
  memset((void *)new_pages, 0, (size_t )bytes);
#line 317
  if (want >= have) {
#line 318
    i = 0U;
#line 318
    goto ldv_44255;
    ldv_44254: 
#line 319
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 318
    i = i + 1U;
    ldv_44255: ;
#line 318
    if ((unsigned long )i < have) {
#line 319
      goto ldv_44254;
    } else {

    }

#line 320
    goto ldv_44258;
    ldv_44257: 
#line 321
    page = alloc_pages(131282U, 0U);
#line 322
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 323
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 324
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 325
      return (0);
    } else {

    }
#line 327
    *(new_pages + (unsigned long )i) = page;
#line 320
    i = i + 1U;
    ldv_44258: ;
#line 320
    if ((unsigned long )i < want) {
#line 321
      goto ldv_44257;
    } else {

    }

  } else {
#line 330
    i = 0U;
#line 330
    goto ldv_44261;
    ldv_44260: 
#line 331
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 330
    i = i + 1U;
    ldv_44261: ;
#line 330
    if ((unsigned long )i < want) {
#line 331
      goto ldv_44260;
    } else {

    }

  }
#line 337
  if (vmalloced != 0U) {
#line 338
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 340
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 342
  return (new_pages);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 351
  b = mdev->bitmap;
#line 352
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 352
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 352
  if (tmp != 0L) {
#line 352
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       352);
  } else {

  }
#line 352
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 353
  tmp___0 = kzalloc(408UL, 208U);
#line 353
  b = (struct drbd_bitmap *)tmp___0;
#line 354
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 355
    return (-12);
  } else {

  }
#line 356
  spinlock_check(& b->bm_lock);
#line 356
  __raw_spin_lock_init(& b->bm_lock.ldv_5620.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 357
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 358
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 360
  mdev->bitmap = b;
#line 362
  return (0);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 367
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 367
  if (_b != 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            367);
  } else {

  }
#line 367
  if (_b != 0) {
#line 367
    return (0UL);
  } else {

  }
#line 368
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 375
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 375
  if (_b != 0) {
#line 375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            375);
  } else {

  }
#line 375
  if (_b != 0) {
#line 375
    return;
  } else {

  }
#line 376
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 377
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 377
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 378
  kfree((void const   *)mdev->bitmap);
#line 379
  mdev->bitmap = 0;
#line 380
  return;
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 389
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 390
  w = b->bm_bits >> 6;
#line 391
  cleared = 0;
#line 394
  p_addr = bm_map_paddr(b, w);
#line 395
  bm = p_addr + (w & 511UL);
#line 396
  if (b->bm_words > w) {
#line 397
    tmp = hweight_long(*bm & ~ mask);
#line 397
    cleared = (int )tmp;
#line 398
    *bm = *bm & mask;
#line 399
    w = w + (size_t )1;
#line 399
    bm = bm + 1;
  } else {

  }
#line 402
  if (b->bm_words > w) {
#line 403
    tmp___0 = hweight_long(*bm);
#line 403
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 404
    *bm = 0UL;
  } else {

  }
#line 406
  bm_unmap(p_addr);
#line 407
  return (cleared);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 412
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 413
  w = b->bm_bits >> 6;
#line 416
  p_addr = bm_map_paddr(b, w);
#line 417
  bm = p_addr + (w & 511UL);
#line 418
  if (b->bm_words > w) {
#line 419
    *bm = *bm | ~ mask;
#line 420
    bm = bm + 1;
#line 420
    w = w + (size_t )1;
  } else {

  }
#line 423
  if (b->bm_words > w) {
#line 424
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 426
  bm_unmap(p_addr);
#line 427
  return;
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 431
  offset = 0UL;
#line 432
  bits = 0UL;
#line 435
  goto ldv_44317;
  ldv_44316: 
#line 436
  __min1 = b->bm_words - offset;
#line 436
  __min2 = 512UL;
#line 436
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 436
  i = do_now;
#line 437
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 438
  bm = p_addr + (offset & 511UL);
#line 439
  goto ldv_44313;
  ldv_44312: 
#line 444
  tmp = bm;
#line 444
  bm = bm + 1;
#line 444
  tmp___0 = hweight_long(*tmp);
#line 444
  bits = tmp___0 + bits;
  ldv_44313: 
#line 439
  tmp___1 = i;
#line 439
  i = i - 1UL;
#line 439
  if (tmp___1 != 0UL) {
#line 440
    goto ldv_44312;
  } else {

  }
#line 446
  __bm_unmap(p_addr, KM_USER0);
#line 447
  offset = offset + do_now;
#line 448
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                448, 0);
#line 448
  _cond_resched();
  ldv_44317: ;
#line 435
  if (b->bm_words > offset) {
#line 436
    goto ldv_44316;
  } else {

  }

#line 451
  return (bits);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 456
  tmp = __bm_count_bits(b, 0);
#line 456
  return (tmp);
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 461
  tmp = __bm_count_bits(b, 1);
#line 461
  return (tmp);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 472
  end = offset + len;
#line 474
  if (b->bm_words < end) {
#line 475
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 476
    return;
  } else {

  }
#line 479
  goto ldv_44340;
  ldv_44339: 
#line 480
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 480
  __min2 = end;
#line 480
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 481
  p_addr = bm_map_paddr(b, offset);
#line 482
  bm = p_addr + (offset & 511UL);
#line 483
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 484
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 486
    goto ldv_44338;
  } else {

  }
#line 488
  memset((void *)bm, c, do_now * 8UL);
#line 489
  bm_unmap(p_addr);
#line 490
  offset = offset + do_now;
  ldv_44340: ;
#line 479
  if (offset < end) {
#line 480
    goto ldv_44339;
  } else {

  }
  ldv_44338: ;
#line 484
  return;
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 504
  b = mdev->bitmap;
#line 507
  opages = 0;
#line 508
  err = 0;
#line 511
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 511
  if (_b != 0) {
#line 511
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            511);
  } else {

  }
#line 511
  if (_b != 0) {
#line 511
    return (-12);
  } else {

  }
#line 513
  drbd_bm_lock(mdev, (char *)"resize");
#line 515
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 518
  if (b->bm_dev_capacity == capacity) {
#line 519
    goto out;
  } else {

  }
#line 521
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 523
  if (capacity == 0UL) {
#line 524
    spin_lock_irq(& b->bm_lock);
#line 525
    opages = b->bm_pages;
#line 526
    onpages = b->bm_number_of_pages;
#line 527
    owords = b->bm_words;
#line 528
    b->bm_pages = 0;
#line 529
    tmp___2 = 0UL;
#line 529
    b->bm_dev_capacity = tmp___2;
#line 529
    tmp___1 = tmp___2;
#line 529
    b->bm_words = tmp___1;
#line 529
    tmp___0 = tmp___1;
#line 529
    b->bm_bits = tmp___0;
#line 529
    tmp = tmp___0;
#line 529
    b->bm_set = tmp;
#line 529
    b->bm_number_of_pages = tmp;
#line 534
    spin_unlock_irq(& b->bm_lock);
#line 535
    bm_free_pages(opages, onpages);
#line 536
    bm_vk_free((void *)opages, opages_vmalloced);
#line 537
    goto out;
  } else {

  }
#line 539
  bits = (capacity + 7UL) >> 3;
#line 546
  words = (bits + 63UL) >> 6;
#line 548
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 548
  if (tmp___3 != 0) {
#line 549
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              549);
    } else {

    }
#line 550
    put_ldev(mdev);
  } else {

  }
#line 554
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 555
  have = b->bm_number_of_pages;
#line 556
  if (want == have) {
#line 557
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 557
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              557);
    } else {

    }
#line 558
    npages = b->bm_pages;
  } else {
#line 560
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 560
    if (tmp___4 != 0) {
#line 561
      npages = 0;
    } else {
#line 563
      npages = bm_realloc_pages(b, want);
    }
  }
#line 566
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 567
    err = -12;
#line 568
    goto out;
  } else {

  }
#line 571
  spin_lock_irq(& b->bm_lock);
#line 572
  opages = b->bm_pages;
#line 573
  owords = b->bm_words;
#line 574
  obits = b->bm_bits;
#line 576
  growing = bits > obits;
#line 577
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 578
    bm_set_surplus(b);
  } else {

  }
#line 580
  b->bm_pages = npages;
#line 581
  b->bm_number_of_pages = want;
#line 582
  b->bm_bits = bits;
#line 583
  b->bm_words = words;
#line 584
  b->bm_dev_capacity = capacity;
#line 586
  if (growing != 0) {
#line 587
    if (set_new_bits != 0) {
#line 588
      bm_memset(b, owords, 255, words - owords);
#line 589
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 591
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 595
  if (want < have) {
#line 597
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 600
  p_addr = bm_map_paddr(b, words);
#line 601
  bm = p_addr + (words & 511UL);
#line 602
  *bm = 2205418087UL;
#line 603
  bm_unmap(p_addr);
#line 605
  bm_clear_surplus(b);
#line 607
  spin_unlock_irq(& b->bm_lock);
#line 608
  if ((unsigned long )opages != (unsigned long )npages) {
#line 609
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 610
  if (growing == 0) {
#line 611
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 615
  drbd_bm_unlock(mdev);
#line 616
  return (err);
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 629
  b = mdev->bitmap;
#line 633
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 633
  if (_b != 0) {
#line 633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            633);
  } else {

  }
#line 633
  if (_b != 0) {
#line 633
    return (0UL);
  } else {

  }
#line 634
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 634
  if (_b___0 != 0) {
#line 634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            634);
  } else {

  }
#line 634
  if (_b___0 != 0) {
#line 634
    return (0UL);
  } else {

  }
#line 636
  tmp = spinlock_check(& b->bm_lock);
#line 636
  flags = _raw_spin_lock_irqsave(tmp);
#line 637
  s = b->bm_set;
#line 638
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 640
  return (s);
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 647
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 647
  if (tmp == 0) {
#line 648
    return (0UL);
  } else {

  }
#line 649
  s = _drbd_bm_total_weight(mdev);
#line 650
  put_ldev(mdev);
#line 651
  return (s);
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 656
  b = mdev->bitmap;
#line 657
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 657
  if (_b != 0) {
#line 657
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            657);
  } else {

  }
#line 657
  if (_b != 0) {
#line 657
    return (0UL);
  } else {

  }
#line 658
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 658
  if (_b___0 != 0) {
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            658);
  } else {

  }
#line 658
  if (_b___0 != 0) {
#line 658
    return (0UL);
  } else {

  }
#line 660
  return (b->bm_words);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 665
  b = mdev->bitmap;
#line 666
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 666
  if (_b != 0) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            666);
  } else {

  }
#line 666
  if (_b != 0) {
#line 666
    return (0UL);
  } else {

  }
#line 668
  return (b->bm_bits);
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 679
  b = mdev->bitmap;
#line 684
  end = offset + number;
#line 686
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 686
  if (_b != 0) {
#line 686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            686);
  } else {

  }
#line 686
  if (_b != 0) {
#line 686
    return;
  } else {

  }
#line 687
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 687
  if (_b___0 != 0) {
#line 687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            687);
  } else {

  }
#line 687
  if (_b___0 != 0) {
#line 687
    return;
  } else {

  }
#line 688
  if (number == 0UL) {
#line 689
    return;
  } else {

  }
#line 690
  __ret_warn_on = b->bm_words <= offset;
#line 690
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 690
  if (tmp != 0L) {
#line 690
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       690);
  } else {

  }
#line 690
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 691
  __ret_warn_on___0 = b->bm_words < end;
#line 691
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 691
  if (tmp___0 != 0L) {
#line 691
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       691);
  } else {

  }
#line 691
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 693
  spin_lock_irq(& b->bm_lock);
#line 694
  goto ldv_44428;
  ldv_44427: 
#line 695
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
  __min2 = end;
#line 695
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
  p_addr = bm_map_paddr(b, offset);
#line 697
  bm = p_addr + (offset & 511UL);
#line 698
  offset = offset + do_now;
#line 699
  goto ldv_44425;
  ldv_44424: 
#line 700
  bits = hweight_long(*bm);
#line 701
  tmp___1 = buffer;
#line 701
  buffer = buffer + 1;
#line 701
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 702
  tmp___2 = bm;
#line 702
  bm = bm + 1;
#line 702
  *tmp___2 = word;
#line 703
  tmp___3 = hweight_long(word);
#line 703
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_44425: 
#line 699
  tmp___4 = do_now;
#line 699
  do_now = do_now - (size_t )1;
#line 699
  if (tmp___4 != 0UL) {
#line 700
    goto ldv_44424;
  } else {

  }
#line 705
  bm_unmap(p_addr);
  ldv_44428: ;
#line 694
  if (offset < end) {
#line 695
    goto ldv_44427;
  } else {

  }

#line 712
  if (b->bm_words == end) {
#line 713
    tmp___5 = bm_clear_surplus(b);
#line 713
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 715
  spin_unlock_irq(& b->bm_lock);
#line 716
  return;
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 724
  b = mdev->bitmap;
#line 728
  end = offset + number;
#line 730
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 730
  if (_b != 0) {
#line 730
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            730);
  } else {

  }
#line 730
  if (_b != 0) {
#line 730
    return;
  } else {

  }
#line 731
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 731
  if (_b___0 != 0) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            731);
  } else {

  }
#line 731
  if (_b___0 != 0) {
#line 731
    return;
  } else {

  }
#line 733
  spin_lock_irq(& b->bm_lock);
#line 734
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 742
    goto ldv_44453;
    ldv_44452: 
#line 743
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 743
    __min2 = end;
#line 743
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 744
    p_addr = bm_map_paddr(b, offset);
#line 745
    bm = p_addr + (offset & 511UL);
#line 746
    offset = offset + do_now;
#line 747
    goto ldv_44450;
    ldv_44449: 
#line 748
    tmp = buffer;
#line 748
    buffer = buffer + 1;
#line 748
    tmp___0 = bm;
#line 748
    bm = bm + 1;
#line 748
    *tmp = *tmp___0;
    ldv_44450: 
#line 747
    tmp___1 = do_now;
#line 747
    do_now = do_now - (size_t )1;
#line 747
    if (tmp___1 != 0UL) {
#line 748
      goto ldv_44449;
    } else {

    }
#line 749
    bm_unmap(p_addr);
    ldv_44453: ;
#line 742
    if (offset < end) {
#line 743
      goto ldv_44452;
    } else {

    }

  }
#line 752
  spin_unlock_irq(& b->bm_lock);
#line 753
  return;
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 758
  b = mdev->bitmap;
#line 759
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 759
  if (_b != 0) {
#line 759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            759);
  } else {

  }
#line 759
  if (_b != 0) {
#line 759
    return;
  } else {

  }
#line 760
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 760
  if (_b___0 != 0) {
#line 760
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            760);
  } else {

  }
#line 760
  if (_b___0 != 0) {
#line 760
    return;
  } else {

  }
#line 762
  spin_lock_irq(& b->bm_lock);
#line 763
  bm_memset(b, 0UL, 255, b->bm_words);
#line 764
  bm_clear_surplus(b);
#line 765
  b->bm_set = b->bm_bits;
#line 766
  spin_unlock_irq(& b->bm_lock);
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 772
  b = mdev->bitmap;
#line 773
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 773
  if (_b != 0) {
#line 773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            773);
  } else {

  }
#line 773
  if (_b != 0) {
#line 773
    return;
  } else {

  }
#line 774
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 774
  if (_b___0 != 0) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            774);
  } else {

  }
#line 774
  if (_b___0 != 0) {
#line 774
    return;
  } else {

  }
#line 776
  spin_lock_irq(& b->bm_lock);
#line 777
  bm_memset(b, 0UL, 0, b->bm_words);
#line 778
  b->bm_set = 0UL;
#line 779
  spin_unlock_irq(& b->bm_lock);
#line 780
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 784
  b = (struct drbd_bitmap *)bio->bi_private;
#line 785
  uptodate = (int )bio->bi_flags & 1;
#line 792
  if (error == 0 && uptodate == 0) {
#line 793
    error = -5;
  } else {

  }
#line 795
  if (error != 0) {
#line 798
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 800
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 800
  if (tmp != 0) {
#line 801
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 803
  bio_put(bio);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 809
  tmp = bio_alloc(208U, 1);
#line 809
  bio = tmp;
#line 811
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 813
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 817
  __min1 = 4096U;
#line 817
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 817
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 817
  len = __min1 < __min2 ? __min1 : __min2;
#line 820
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 821
  bio->bi_sector = on_disk_sector;
#line 822
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 823
  bio->bi_private = (void *)b;
#line 824
  bio->bi_end_io = & bm_async_io_complete;
#line 826
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 826
  if (tmp___1 != 0) {
#line 827
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 828
    bio_endio(bio, -5);
  } else {
#line 830
    submit_bio(rw, bio);
  }
#line 831
  return;
}
}
#line 870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 872
  b = mdev->bitmap;
#line 877
  err = 0;
#line 879
  tmp = bm_is_locked(b);
#line 879
  __ret_warn_on = tmp == 0;
#line 879
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 879
  if (tmp___0 != 0L) {
#line 879
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       879);
  } else {

  }
#line 879
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 883
  tmp___1 = drbd_bm_words(mdev);
#line 883
  bm_words = (int )tmp___1;
#line 884
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 890
  now = jiffies;
#line 891
  atomic_set(& b->bm_async_io, num_pages);
#line 892
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 895
  i = 0;
#line 895
  goto ldv_44505;
  ldv_44504: 
#line 896
  bm_page_io_async(mdev, b, i, rw);
#line 895
  i = i + 1;
  ldv_44505: ;
#line 895
  if (i < num_pages) {
#line 896
    goto ldv_44504;
  } else {

  }
#line 898
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 898
  drbd_blk_run_queue(tmp___2);
#line 899
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 899
  if (tmp___3 == 0) {
#line 899
    goto ldv_44507;
  } else {

  }
#line 899
  tmp___4 = get_current();
#line 899
  __wait.flags = 0U;
#line 899
  __wait.private = (void *)tmp___4;
#line 899
  __wait.func = & autoremove_wake_function;
#line 899
  __wait.task_list.next = & __wait.task_list;
#line 899
  __wait.task_list.prev = & __wait.task_list;
  ldv_44510: 
#line 899
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 899
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 899
  if (tmp___5 == 0) {
#line 899
    goto ldv_44509;
  } else {

  }
#line 899
  schedule();
#line 899
  goto ldv_44510;
  ldv_44509: 
#line 899
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_44507: 
#line 901
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 901
  if (tmp___6 != 0) {
#line 902
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 903
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 904
    err = -5;
  } else {

  }
#line 907
  now = jiffies;
#line 908
  if (rw == 1) {
#line 912
    drbd_md_flush(mdev);
  } else {
#line 915
    b->bm_set = bm_count_bits_swap_endian(b);
#line 916
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 919
  now = b->bm_set;
#line 921
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 921
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 924
  return (err);
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 933
  tmp = bm_rw(mdev, 0);
#line 933
  return (tmp);
}
}
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 942
  tmp = bm_rw(mdev, 1);
#line 942
  return (tmp);
}
}
#line 954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 956
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 959
  err = 0;
#line 961
  ldv_mutex_lock_10(& mdev->md_io_mutex);
#line 962
  tmp = drbd_bm_words(mdev);
#line 962
  bm_words = (int )tmp;
#line 963
  offset = (int )(enr << 6);
#line 964
  _min1 = 64;
#line 964
  _min2 = bm_words - offset;
#line 964
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 965
  if (num_words <= 63) {
#line 966
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 966
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 967
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 967
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 969
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 969
  if (tmp___2 == 0) {
#line 971
    err = -5;
#line 972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 975
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 976
    i = 0;
#line 976
    goto ldv_44533;
    ldv_44532: 
#line 977
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 976
    i = i + 1;
    ldv_44533: ;
#line 976
    if (i <= 3) {
#line 977
      goto ldv_44532;
    } else {

    }

  } else {

  }
#line 979
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 980
  ldv_mutex_unlock_11(& mdev->md_io_mutex);
#line 981
  return (err);
}
}
#line 991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 994
  b = mdev->bitmap;
#line 995
  i = 0xffffffffffffffffUL;
#line 999
  if (b->bm_bits < bm_fo) {
#line 1000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 1002
    goto ldv_44549;
    ldv_44548: 
#line 1004
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1005
    offset = bit_offset >> 6;
#line 1006
    p_addr = __bm_map_paddr(b, offset, km);
#line 1008
    if ((int )find_zero_bit != 0) {
#line 1009
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 1011
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 1013
    __bm_unmap(p_addr, km);
#line 1014
    if (i <= 32767UL) {
#line 1015
      i = bit_offset + i;
#line 1016
      if (b->bm_bits <= i) {
#line 1017
        goto ldv_44546;
      } else {

      }
#line 1018
      goto found;
    } else {

    }
#line 1020
    bm_fo = bit_offset + 32768UL;
    ldv_44549: ;
#line 1002
    if (b->bm_bits > bm_fo) {
#line 1003
      goto ldv_44548;
    } else {

    }
    ldv_44546: 
#line 1022
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1025
  return (i);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 1031
  b = mdev->bitmap;
#line 1032
  i = 0xffffffffffffffffUL;
#line 1034
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1034
  if (_b != 0) {
#line 1034
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1034);
  } else {

  }
#line 1034
  if (_b != 0) {
#line 1034
    return (i);
  } else {

  }
#line 1035
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1035
  if (_b___0 != 0) {
#line 1035
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1035);
  } else {

  }
#line 1035
  if (_b___0 != 0) {
#line 1035
    return (i);
  } else {

  }
#line 1037
  spin_lock_irq(& b->bm_lock);
#line 1038
  tmp = bm_is_locked(b);
#line 1038
  if (tmp != 0) {
#line 1039
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1041
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1043
  spin_unlock_irq(& b->bm_lock);
#line 1044
  return (i);
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1049
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1049
  return (tmp);
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1065
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1065
  return (tmp);
}
}
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1071
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1071
  return (tmp);
}
}
#line 1080 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1083
  b = mdev->bitmap;
#line 1084
  p_addr = 0;
#line 1086
  last_page_nr = 0xffffffffffffffffUL;
#line 1087
  c = 0;
#line 1089
  if (b->bm_bits <= e) {
#line 1090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1092
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1094
  bitnr = s;
#line 1094
  goto ldv_44589;
  ldv_44588: 
#line 1095
  offset = bitnr >> 6;
#line 1096
  page_nr = offset >> 9;
#line 1097
  if (page_nr != last_page_nr) {
#line 1098
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1099
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1100
    p_addr = __bm_map_paddr(b, offset, km);
#line 1101
    last_page_nr = page_nr;
  } else {

  }
#line 1103
  if (val != 0) {
#line 1104
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1104
    c = (tmp == 0) + c;
  } else {
#line 1106
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1106
    c = c - (tmp___0 != 0);
  }
#line 1094
  bitnr = bitnr + 1UL;
  ldv_44589: ;
#line 1094
  if (bitnr <= e) {
#line 1095
    goto ldv_44588;
  } else {

  }

#line 1108
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1109
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1110
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1111
  return (c);
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1122
  b = mdev->bitmap;
#line 1123
  c = 0;
#line 1125
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1125
  if (_b != 0) {
#line 1125
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1125);
  } else {

  }
#line 1125
  if (_b != 0) {
#line 1125
    return (1);
  } else {

  }
#line 1126
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1126
  if (_b___0 != 0) {
#line 1126
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1126);
  } else {

  }
#line 1126
  if (_b___0 != 0) {
#line 1126
    return (0);
  } else {

  }
#line 1128
  tmp = spinlock_check(& b->bm_lock);
#line 1128
  flags = _raw_spin_lock_irqsave(tmp);
#line 1129
  tmp___0 = bm_is_locked(b);
#line 1129
  if (tmp___0 != 0) {
#line 1130
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1132
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1134
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1135
  return (c);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1141
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1141
  return (tmp);
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1147
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1147
  return (- tmp);
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1157
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1157
  paddr = (unsigned long *)tmp;
#line 1158
  i = first_word;
#line 1158
  goto ldv_44628;
  ldv_44627: 
#line 1159
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1159
  bits = (int )tmp___0;
#line 1160
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1161
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1158
  i = i + 1;
  ldv_44628: ;
#line 1158
  if (i < last_word) {
#line 1159
    goto ldv_44627;
  } else {

  }
#line 1163
  kunmap_atomic_notypecheck((void *)paddr, KM_USER0);
#line 1164
  return;
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1180
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1181
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1188
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1190
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1191
    return;
  } else {

  }
#line 1197
  if (sl != 0UL) {
#line 1198
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1200
  first_page = (int )(sl >> 15);
#line 1201
  last_page = (int )(el >> 15);
#line 1205
  first_word = (int )(sl >> 6) & 511;
#line 1206
  last_word = 512;
#line 1209
  page_nr = first_page;
#line 1209
  goto ldv_44644;
  ldv_44643: 
#line 1210
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1211
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1211, 0);
#line 1211
  _cond_resched();
#line 1212
  first_word = 0;
#line 1209
  page_nr = page_nr + 1;
  ldv_44644: ;
#line 1209
  if (page_nr < last_page) {
#line 1210
    goto ldv_44643;
  } else {

  }
#line 1216
  last_word = (int )(el >> 6) & 511;
#line 1217
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1224
  if (el <= (unsigned long )e) {
#line 1225
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1226
  return;
}
}
#line 1235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1238
  b = mdev->bitmap;
#line 1242
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1242
  if (_b != 0) {
#line 1242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1242);
  } else {

  }
#line 1242
  if (_b != 0) {
#line 1242
    return (0);
  } else {

  }
#line 1243
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1243
  if (_b___0 != 0) {
#line 1243
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1243);
  } else {

  }
#line 1243
  if (_b___0 != 0) {
#line 1243
    return (0);
  } else {

  }
#line 1245
  tmp = spinlock_check(& b->bm_lock);
#line 1245
  flags = _raw_spin_lock_irqsave(tmp);
#line 1246
  tmp___0 = bm_is_locked(b);
#line 1246
  if (tmp___0 != 0) {
#line 1247
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1248
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1249
    offset = bitnr >> 6;
#line 1250
    p_addr = bm_map_paddr(b, offset);
#line 1251
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1251
    i = tmp___1 != 0;
#line 1252
    bm_unmap(p_addr);
  } else
#line 1253
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1254
    i = -1;
  } else {
#line 1256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1257
    i = 0;
  }
#line 1260
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1261
  return (i);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1268
  b = mdev->bitmap;
#line 1269
  p_addr = 0;
#line 1269
  page_nr = 0xffffffffffffffffUL;
#line 1271
  c = 0;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (1);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (1);
  } else {

  }
#line 1281
  tmp = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  tmp___0 = bm_is_locked(b);
#line 1282
  if (tmp___0 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1284
  bitnr = s;
#line 1284
  goto ldv_44686;
  ldv_44685: 
#line 1285
  w = bitnr >> 6;
#line 1286
  if (w >> 9 != page_nr) {
#line 1287
    page_nr = w >> 9;
#line 1288
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1289
      bm_unmap(p_addr);
    } else {

    }
#line 1290
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1292
  _b___1 = b->bm_bits <= bitnr;
#line 1292
  if (_b___1 != 0) {
#line 1292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1292);
  } else {

  }
#line 1292
  if (_b___1 != 0) {
#line 1293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1295
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1295
    c = (tmp___1 != 0) + c;
  }
#line 1284
  bitnr = bitnr + 1UL;
  ldv_44686: ;
#line 1284
  if (bitnr <= (unsigned long )e) {
#line 1285
    goto ldv_44685;
  } else {

  }

#line 1298
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1299
    bm_unmap(p_addr);
  } else {

  }
#line 1300
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1301
  return (c);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1321
  b = mdev->bitmap;
#line 1326
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1326
  if (_b != 0) {
#line 1326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1326);
  } else {

  }
#line 1326
  if (_b != 0) {
#line 1326
    return (0);
  } else {

  }
#line 1327
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1327
  if (_b___0 != 0) {
#line 1327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1327);
  } else {

  }
#line 1327
  if (_b___0 != 0) {
#line 1327
    return (0);
  } else {

  }
#line 1329
  tmp = spinlock_check(& b->bm_lock);
#line 1329
  flags = _raw_spin_lock_irqsave(tmp);
#line 1330
  tmp___0 = bm_is_locked(b);
#line 1330
  if (tmp___0 != 0) {
#line 1331
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1333
  s = (int )(enr << 6);
#line 1334
  _min1 = (enr + 1UL) << 6;
#line 1334
  _min2 = b->bm_words;
#line 1334
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1335
  count = 0;
#line 1336
  if ((size_t )s < b->bm_words) {
#line 1337
    n = e - s;
#line 1338
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1339
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1340
    goto ldv_44712;
    ldv_44711: 
#line 1341
    tmp___1 = bm;
#line 1341
    bm = bm + 1;
#line 1341
    tmp___2 = hweight_long(*tmp___1);
#line 1341
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_44712: 
#line 1340
    tmp___3 = n;
#line 1340
    n = n - 1;
#line 1340
    if (tmp___3 != 0) {
#line 1341
      goto ldv_44711;
    } else {

    }
#line 1342
    bm_unmap(p_addr);
  } else {
#line 1344
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1346
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1347
  return (count);
}
}
#line 1351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1353
  b = mdev->bitmap;
#line 1357
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1357
  if (_b != 0) {
#line 1357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1357);
  } else {

  }
#line 1357
  if (_b != 0) {
#line 1357
    return (0UL);
  } else {

  }
#line 1358
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1358
  if (_b___0 != 0) {
#line 1358
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1358);
  } else {

  }
#line 1358
  if (_b___0 != 0) {
#line 1358
    return (0UL);
  } else {

  }
#line 1360
  spin_lock_irq(& b->bm_lock);
#line 1361
  tmp = bm_is_locked(b);
#line 1361
  if (tmp != 0) {
#line 1362
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1363
  weight = b->bm_set;
#line 1365
  s = (int )((unsigned int )al_enr * 16U);
#line 1366
  __min1 = (size_t )(s + 16);
#line 1366
  __min2 = b->bm_words;
#line 1366
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1368
  if ((e + -1) >> 9 != s >> 9) {
#line 1368
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1369);
  } else {

  }
#line 1370
  count = 0;
#line 1371
  if ((size_t )s < b->bm_words) {
#line 1372
    do_now = e - s;
#line 1372
    i = do_now;
#line 1373
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1374
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1375
    goto ldv_44736;
    ldv_44735: 
#line 1376
    tmp___0 = hweight_long(*bm);
#line 1376
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1377
    *bm = 0xffffffffffffffffUL;
#line 1378
    bm = bm + 1;
    ldv_44736: 
#line 1375
    tmp___1 = i;
#line 1375
    i = i - 1;
#line 1375
    if (tmp___1 != 0) {
#line 1376
      goto ldv_44735;
    } else {

    }
#line 1380
    bm_unmap(p_addr);
#line 1381
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1382
    if ((size_t )e == b->bm_words) {
#line 1383
      tmp___2 = bm_clear_surplus(b);
#line 1383
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1387
  weight = b->bm_set - weight;
#line 1388
  spin_unlock_irq(& b->bm_lock);
#line 1389
  return (weight);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1399
  mutex_lock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1407
  tmp = mutex_trylock(ldv_func_arg1);
#line 1407
  ldv_func_res = tmp;
#line 1409
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1409
  return (tmp___0);
#line 1411
  return (ldv_func_res);
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1419
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1421
  mutex_unlock(ldv_func_arg1);
#line 1422
  return;
}
}
#line 1424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1429
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1431
  mutex_lock(ldv_func_arg1);
#line 1432
  return;
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1439
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1441
  mutex_unlock(ldv_func_arg1);
#line 1442
  return;
}
}
#line 1444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1449
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1451
  mutex_unlock(ldv_func_arg1);
#line 1452
  return;
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1459
  tmp = mutex_trylock(ldv_func_arg1);
#line 1459
  ldv_func_res = tmp;
#line 1461
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1461
  return (tmp___0);
#line 1463
  return (ldv_func_res);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1471
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1473
  mutex_lock(ldv_func_arg1);
#line 1474
  return;
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1481
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1483
  mutex_unlock(ldv_func_arg1);
#line 1484
  return;
}
}
#line 1486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1491
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1493
  mutex_lock(ldv_func_arg1);
#line 1494
  return;
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1501
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1503
  mutex_unlock(ldv_func_arg1);
#line 1504
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 290
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 291
char const   *drbd_role_str(enum drbd_role s ) ;
#line 292
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1126
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1128
  return (mdev);
}
}
#line 1481
int proc_details ;
#line 1620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1621
struct file_operations  const  drbd_proc_fops ;
#line 2152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2165
  tmp = drbd_bm_total_weight(mdev);
#line 2165
  *bits_left = tmp - mdev->rs_failed;
#line 2168
  if (*bits_left > mdev->rs_total) {
#line 2174
    __asm__  volatile   ("": : : "memory");
#line 2175
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35532.conn);
#line 2175
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2178
    *per_mil_done = 0U;
  } else {
#line 2181
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2184
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2186
  return;
}
}
#line 2265 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2267
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 96
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;

  {
#line 116
  stalled = 0;
#line 118
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 120
  x = (int )(res / 50U);
#line 121
  y = 20 - x;
#line 122
  seq_printf(seq, "\t[");
#line 123
  i = 1;
#line 123
  goto ldv_44203;
  ldv_44202: 
#line 124
  seq_printf(seq, "=");
#line 123
  i = i + 1;
  ldv_44203: ;
#line 123
  if (i < x) {
#line 124
    goto ldv_44202;
  } else {

  }
#line 125
  seq_printf(seq, ">");
#line 126
  i = 0;
#line 126
  goto ldv_44206;
  ldv_44205: 
#line 127
  seq_printf(seq, ".");
#line 126
  i = i + 1;
  ldv_44206: ;
#line 126
  if (i < y) {
#line 127
    goto ldv_44205;
  } else {

  }
#line 128
  seq_printf(seq, "] ");
#line 130
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 132
  if (mdev->rs_total > 1048576UL) {
#line 133
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 137
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 153
  i = (mdev->rs_last_mark + 2) % 8;
#line 154
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 155
  if (dt > 6000UL) {
#line 156
    stalled = 1;
  } else {

  }
#line 158
  if (dt == 0UL) {
#line 159
    dt = dt + 1UL;
  } else {

  }
#line 160
  db = mdev->rs_mark_left[i] - rs_left;
#line 161
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 163
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 167
  dbdt = db / dt << 2;
#line 168
  if (dbdt > 1000UL) {
#line 169
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 172
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 176
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 177
  if (dt == 0UL) {
#line 178
    dt = 1UL;
  } else {

  }
#line 179
  db = mdev->rs_total - rs_left;
#line 180
  dbdt = db / dt << 2;
#line 181
  if (dbdt > 1000UL) {
#line 182
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 185
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 187
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 188
    if (mdev->c_sync_rate > 1000) {
#line 189
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 192
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 194
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 195
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 199
  __mptr = (struct lc_element  const  *)e;
#line 199
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 201
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 204
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 209
  hole = 0;
#line 213
  write_ordering_chars[0] = 110;
#line 213
  write_ordering_chars[1] = 100;
#line 213
  write_ordering_chars[2] = 102;
#line 213
  write_ordering_chars[3] = 98;
#line 220
  tmp = drbd_buildtag();
#line 220
  seq_printf(seq, "version: 8.3.9rc2 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 95, tmp);
#line 243
  i = 0;
#line 243
  goto ldv_44226;
  ldv_44225: 
#line 244
  mdev = minor_to_mdev((unsigned int )i);
#line 245
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 246
    hole = 1;
#line 247
    goto ldv_44224;
  } else {

  }
#line 249
  if (hole != 0) {
#line 250
    hole = 0;
#line 251
    seq_printf(seq, "\n");
  } else {

  }
#line 254
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35532.conn);
#line 256
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 259
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 261
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 261
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 261
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 261
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 261
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 261
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 261
    tmp___6 = is_susp(mdev->state);
#line 261
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35532.pdsk);
#line 261
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35532.disk);
#line 261
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_35532.peer);
#line 261
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_35532.role);
#line 261
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 292
    tmp___11 = drbd_bm_total_weight(mdev);
#line 292
    seq_printf(seq, " oos:%lu\n", tmp___11 << 2);
  }
#line 295
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 297
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 299
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U) {
#line 300
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 306
  if (proc_details > 0) {
#line 306
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 306
    if (tmp___12 != 0) {
#line 307
      lc_seq_printf_stats(seq, mdev->resync);
#line 308
      lc_seq_printf_stats(seq, mdev->act_log);
#line 309
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 312
  if (proc_details > 1) {
#line 313
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 314
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_44224: 
#line 243
  i = i + 1;
  ldv_44226: ;
#line 243
  if ((unsigned int )i < minor_count) {
#line 244
    goto ldv_44225;
  } else {

  }

#line 320
  return (0);
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 325
  tmp = PDE((struct inode  const  *)inode);
#line 325
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 325
  return (tmp___0);
}
}
#line 346
void ldv_check_final_state(void) ;
#line 349
extern void ldv_check_return_value(int  ) ;
#line 355
void ldv_initialize(void) ;
#line 358
extern void ldv_handler_precall(void) ;
#line 361
extern int nondet_int(void) ;
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 399
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 389
  LDV_IN_INTERRUPT = 1;
#line 398
  ldv_initialize();
#line 402
  goto ldv_44257;
  ldv_44256: 
#line 406
  tmp = nondet_int();
#line 406
  switch (tmp) {
  case 0: ;
#line 411
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 416
    ldv_handler_precall();
#line 417
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 418
    ldv_check_return_value(res_drbd_proc_open_3);
#line 419
    if (res_drbd_proc_open_3 != 0) {
#line 420
      goto ldv_module_exit;
    } else {

    }
#line 421
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 427
  goto ldv_44254;
  default: ;
#line 428
  goto ldv_44254;
  }
  ldv_44254: ;
  ldv_44257: 
#line 402
  tmp___0 = nondet_int();
#line 402
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 404
    goto ldv_44256;
  } else {

  }

  ldv_module_exit: ;
#line 437
  ldv_check_final_state();
#line 440
  return;
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 449
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 451
  mutex_lock(ldv_func_arg1);
#line 452
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 459
  tmp = mutex_trylock(ldv_func_arg1);
#line 459
  ldv_func_res = tmp;
#line 461
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 461
  return (tmp___0);
#line 463
  return (ldv_func_res);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 471
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 473
  mutex_unlock(ldv_func_arg1);
#line 474
  return;
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 481
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 483
  mutex_lock(ldv_func_arg1);
#line 484
  return;
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 491
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 493
  mutex_unlock(ldv_func_arg1);
#line 494
  return;
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 501
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 503
  mutex_unlock(ldv_func_arg1);
#line 504
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 210 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 86 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 88
  next->prev = prev;
#line 89
  prev->next = next;
#line 90
  return;
}
}
#line 106
extern void list_del(struct list_head * ) ;
#line 136 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 138
  __list_del(entry->prev, entry->next);
#line 139
  INIT_LIST_HEAD(entry);
#line 140
  return;
}
}
#line 180 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 182
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 267 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 271
  first = list->next;
#line 272
  last = list->prev;
#line 274
  first->prev = prev;
#line 275
  prev->next = first;
#line 277
  last->next = next;
#line 278
  next->prev = last;
#line 279
  return;
}
}
#line 312 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 315
  tmp = list_empty((struct list_head  const  *)list);
#line 315
  if (tmp == 0) {
#line 316
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 317
    INIT_LIST_HEAD(list);
  } else {

  }
#line 319
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5206;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5206;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5206;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5206;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5206: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5620.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5620.rlock);
#line 326
  return;
}
}
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13702: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13702;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___0(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 307 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 309
  tmp = PageTail(page);
#line 309
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 309
  if (tmp___0 != 0L) {
#line 310
    return (page->ldv_12351.first_page);
  } else {

  }
#line 311
  return (page);
}
}
#line 314 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = compound_head(page);
#line 316
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 316
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17878: ;
#line 63
    goto ldv_17878;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17879: ;
#line 65
    goto ldv_17879;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17880: ;
#line 66
    goto ldv_17880;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 35 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.raw_lock.slock = 0U;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.magic = 3735899821U;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.owner_cpu = 4294967295U;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.owner = 0xffffffffffffffffUL;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.key = 0;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.class_cache[0] = 0;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.class_cache[1] = 0;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.name = "(*sem).lock";
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.cpu = 0;
#line 38
  __constr_expr_0.lock.ldv_5620.rlock.dep_map.ip = 0UL;
#line 38
  __constr_expr_0.count = (unsigned int )val;
#line 38
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 38
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 38
  *sem = __constr_expr_0;
#line 39
  lockdep_init_map(& sem->lock.ldv_5620.ldv_5619.dep_map, "semaphore->lock", & __key,
                   0);
#line 40
  return;
}
}
#line 46
extern int down_interruptible(struct semaphore * ) ;
#line 48
extern int down_trylock(struct semaphore * ) ;
#line 50
extern void up(struct semaphore * ) ;
#line 354 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 355
extern long schedule_timeout_interruptible(long  ) ;
#line 2028
extern void flush_signals(struct task_struct * ) ;
#line 2061
extern void force_sig(int  , struct task_struct * ) ;
#line 1069 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 229 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 649 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 933 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 935
  return (q->limits.max_segment_size);
}
}
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 676
  __asm__  volatile   ("": : : "memory");
#line 677
  return (thi->t_state);
}
}
#line 1131 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1133
  return (mdev->minor);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1146
  ldv_mutex_lock_38(& mdev->data.mutex);
#line 1149
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1149
  if (tmp != 0L) {
#line 1150
    ldv_mutex_unlock_39(& mdev->data.mutex);
#line 1151
    return (0);
  } else {

  }
#line 1153
  return (1);
}
}
#line 1156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1158
  ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1159
  return;
}
}
#line 1183
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1192
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1194
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1213
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1217
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1222
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1230
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1236
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1238
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1240
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1243
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1245
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1249
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1255
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1258
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1261
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1262
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1265
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1276
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1474
wait_queue_head_t drbd_pp_wait ;
#line 1476 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1503
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1506
int drbd_worker(struct drbd_thread *thi ) ;
#line 1507
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1508
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1509
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1510
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1511
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1515
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1517 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1519
  if (mdev->ov_last_oos_size != 0UL) {
#line 1520
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1524
  mdev->ov_last_oos_size = 0UL;
#line 1525
  return;
}
}
#line 1528
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1529
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1532
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1533
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1534
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1535
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1536
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1537
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1538
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1539
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1541
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1542
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1543
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1544
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1545
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1546
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1547
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1548
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1550
void resync_timer_fn(unsigned long data ) ;
#line 1553
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) ;
#line 1554
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1557
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1562
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1577 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1581
  if (level == 1) {
#line 1582
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1584
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1586
  return (err);
}
}
#line 1589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1591
  val = 1;
#line 1592
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1594
  return;
}
}
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1598
  val = 0;
#line 1599
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1601
  return;
}
}
#line 1617
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1626
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1627
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1628
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1630
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1631
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1632
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1633
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1636
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1640
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1720
  return ((struct page *)page->ldv_12351.ldv_12348.private);
}
}
#line 1741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1743
  page = e->pages;
#line 1744
  goto ldv_44515;
  ldv_44514: 
#line 1745
  tmp = page_count(page);
#line 1745
  if (tmp > 1) {
#line 1746
    return (1);
  } else {

  }
#line 1744
  page = page_chain_next(page);
  ldv_44515: ;
#line 1744
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1744
    tmp___0 = page_chain_next(page);
#line 1744
    __builtin_prefetch((void const   *)tmp___0);
#line 1744
    if (1 != 0) {
#line 1745
      goto ldv_44514;
    } else {
#line 1747
      goto ldv_44516;
    }
  } else {

  }
  ldv_44516: ;
#line 1748
  return (0);
}
}
#line 1752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1754
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp == 0) {
#line 1754
    goto ldv_44520;
  } else {

  }
#line 1754
  tmp___0 = get_current();
#line 1754
  __wait.flags = 0U;
#line 1754
  __wait.private = (void *)tmp___0;
#line 1754
  __wait.func = & autoremove_wake_function;
#line 1754
  __wait.task_list.next = & __wait.task_list;
#line 1754
  __wait.task_list.prev = & __wait.task_list;
  ldv_44523: 
#line 1754
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1754
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp___1 == 0) {
#line 1754
    goto ldv_44522;
  } else {

  }
#line 1754
  schedule();
#line 1754
  goto ldv_44523;
  ldv_44522: 
#line 1754
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44520: ;
#line 1757
  return;
}
}
#line 1758 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1760
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1761
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1762
  return;
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_44546;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35532.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35532.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_44546;
  }
  ldv_44546: ;
#line 1816
  return;
}
}
#line 1874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1877
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1956 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1959
  tmp = spinlock_check(& q->q_lock);
#line 1959
  flags = _raw_spin_lock_irqsave(tmp);
#line 1960
  list_add_tail(& w->list, & q->q);
#line 1961
  up(& q->s);
#line 1963
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1964
  return;
}
}
#line 1966 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1968
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1968
  if (tmp != 0) {
#line 1969
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1970
  return;
}
}
#line 1972 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1974
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1975
  wake_asender(mdev);
#line 1976
  return;
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1982
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1982
  return (tmp);
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1999
  _drbd_thread_stop(thi, 0, 1);
#line 2000
  return;
}
}
#line 2057 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2059
  atomic_inc(& mdev->rs_pending_cnt);
#line 2060
  return;
}
}
#line 2397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2399
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2399
  if (tmp___0 != 0) {
#line 2400
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2400
    drbd_blk_run_queue(tmp);
#line 2401
    put_ldev(mdev);
  } else {

  }
#line 2403
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 269
  bio = bio_clone(bio_src, 16U);
#line 271
  req->private_bio = bio;
#line 273
  bio->bi_private = (void *)req;
#line 274
  bio->bi_end_io = & drbd_endio_pri;
#line 275
  bio->bi_next = 0;
#line 276
  return;
}
}
#line 320
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 322
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 329
  mdev = req->mdev;
#line 334
  rv = __req_mod(req, what, & m);
#line 335
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 336
    complete_master_bio(mdev, & m);
  } else {

  }
#line 338
  return (rv);
}
}
#line 343 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 346
  mdev = req->mdev;
#line 350
  spin_lock_irq(& mdev->req_lock);
#line 351
  rv = __req_mod(req, what, & m);
#line 352
  spin_unlock_irq(& mdev->req_lock);
#line 354
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 355
    complete_master_bio(mdev, & m);
  } else {

  }
#line 357
  return (rv);
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 131
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 132
  md_io->error = error;
#line 134
  complete(& md_io->event);
#line 135
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 142
  flags = 0UL;
#line 143
  mdev = e->mdev;
#line 145
  if (e->ldv_42956.block_id == 0ULL) {
#line 145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            145);
  } else {

  }
#line 147
  tmp = spinlock_check(& mdev->req_lock);
#line 147
  flags = _raw_spin_lock_irqsave(tmp);
#line 148
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 149
  list_del(& e->w.list);
#line 150
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 150
  if (tmp___0 != 0) {
#line 151
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 152
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 152
  if (tmp___1 != 0) {
#line 153
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 154
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 156
  drbd_queue_work(& mdev->data.work, & e->w);
#line 157
  put_ldev(mdev);
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 162
  return ((ee_flags & 28) == 20);
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 170
  flags = 0UL;
#line 171
  mdev = e->mdev;
#line 179
  tmp___0 = is_failed_barrier((int )e->flags);
#line 179
  if (tmp___0 != 0) {
#line 180
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 181
    tmp = spinlock_check(& mdev->req_lock);
#line 181
    flags = _raw_spin_lock_irqsave(tmp);
#line 182
    list_del(& e->w.list);
#line 183
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 184
    e->w.cb = & w_e_reissue;
#line 187
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 188
    drbd_queue_work(& mdev->data.work, & e->w);
#line 189
    return;
  } else {

  }
#line 192
  if (e->ldv_42956.block_id == 0ULL) {
#line 192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            192);
  } else {

  }
#line 198
  e_sector = e->sector;
#line 199
  do_al_complete_io = (int )e->flags & 1;
#line 200
  is_syncer_req = e->ldv_42956.block_id == 0xffffffffffffffffULL;
#line 202
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 202
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 203
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 204
  list_del(& e->w.list);
#line 205
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 212
  if (is_syncer_req != 0) {
#line 212
    tmp___2 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 212
    do_wake = tmp___2;
  } else {
#line 212
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 212
    do_wake = tmp___3;
  }
#line 216
  tmp___4 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 216
  if (tmp___4 != 0) {
#line 217
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 218
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 220
  if (is_syncer_req != 0) {
#line 221
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 223
  if (do_wake != 0) {
#line 224
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 226
  if (do_al_complete_io != 0) {
#line 227
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 229
  wake_asender(mdev);
#line 230
  put_ldev(mdev);
#line 231
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 238
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 239
  mdev = e->mdev;
#line 240
  uptodate = (int )bio->bi_flags & 1;
#line 241
  is_write = (int )bio->bi_rw & 1;
#line 243
  if (error != 0) {
#line 244
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 247
  if (error == 0 && uptodate == 0) {
#line 248
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 254
    error = -5;
  } else {

  }
#line 257
  if (error != 0) {
#line 258
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 260
  bio_put(bio);
#line 261
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 261
  if (tmp != 0) {
#line 262
    if (is_write != 0) {
#line 263
      drbd_endio_write_sec_final(e);
    } else {
#line 265
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 266
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;

  {
#line 273
  req = (struct drbd_request *)bio->bi_private;
#line 274
  mdev = req->mdev;
#line 276
  uptodate = (int )bio->bi_flags & 1;
#line 278
  if (error == 0 && uptodate == 0) {
#line 279
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 284
    error = -5;
  } else {

  }
#line 288
  tmp = __builtin_expect(error != 0, 0L);
#line 288
  if (tmp != 0L) {
#line 289
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 295
    what = completed_ok;
  }
#line 297
  bio_put(req->private_bio);
#line 298
  tmp___0 = ERR_PTR((long )error);
#line 298
  req->private_bio = (struct bio *)tmp___0;
#line 300
  req_mod(req, what);
#line 301
  return;
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 305
  __mptr = (struct drbd_work  const  *)w;
#line 305
  req = (struct drbd_request *)__mptr;
#line 311
  spin_lock_irq(& mdev->req_lock);
#line 312
  if (cancel != 0 || *((unsigned int *)mdev + 503UL) != 65536U) {
#line 313
    _req_mod(req, read_retry_remote_canceled);
#line 314
    spin_unlock_irq(& mdev->req_lock);
#line 315
    return (1);
  } else {

  }
#line 317
  spin_unlock_irq(& mdev->req_lock);
#line 319
  tmp = w_send_read_req(mdev, w, 0);
#line 319
  return (tmp);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 324
  _b = cancel != 0;
#line 324
  if (_b != 0) {
#line 324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            324);
  } else {

  }
#line 324
  if (_b != 0) {
#line 324
    return (1);
  } else {

  }
#line 325
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 326
  return (1);
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 333
  page = e->pages;
#line 337
  desc.tfm = tfm;
#line 338
  desc.flags = 0U;
#line 340
  sg_init_table(& sg, 1U);
#line 341
  crypto_hash_init(& desc);
#line 343
  goto ldv_45006;
  ldv_45005: 
#line 345
  sg_set_page(& sg, page, 4096U, 0U);
#line 346
  crypto_hash_update(& desc, & sg, sg.length);
#line 347
  page = tmp;
  ldv_45006: 
#line 343
  tmp = page_chain_next(page);
#line 343
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 344
    goto ldv_45005;
  } else {

  }
#line 350
  len = e->size & 4095U;
#line 351
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 352
  crypto_hash_update(& desc, & sg, sg.length);
#line 353
  crypto_hash_final(& desc, (u8 *)digest);
#line 354
  return;
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 363
  desc.tfm = tfm;
#line 364
  desc.flags = 0U;
#line 366
  sg_init_table(& sg, 1U);
#line 367
  crypto_hash_init(& desc);
#line 369
  bvec = bio->bi_io_vec;
#line 369
  i = 0;
#line 369
  goto ldv_45019;
  ldv_45018: 
#line 370
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 371
  crypto_hash_update(& desc, & sg, sg.length);
#line 369
  bvec = bvec + 1;
#line 369
  i = i + 1;
  ldv_45019: ;
#line 369
  if ((int )bio->bi_vcnt > i) {
#line 370
    goto ldv_45018;
  } else {

  }
#line 373
  crypto_hash_final(& desc, (u8 *)digest);
#line 374
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 378
  __mptr = (struct drbd_work  const  *)w;
#line 378
  e = (struct drbd_epoch_entry *)__mptr;
#line 383
  if (e->ldv_42956.block_id != 2205466966ULL) {
#line 383
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            383);
  } else {

  }
#line 385
  tmp = __builtin_expect(cancel != 0, 0L);
#line 385
  if (tmp != 0L) {
#line 386
    drbd_free_some_ee(mdev, e, 0);
#line 387
    return (1);
  } else {

  }
#line 390
  tmp___1 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 390
  if (tmp___1 != 0L) {
#line 391
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 391
    digest_size = (int )tmp___0;
#line 392
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 393
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 394
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 396
      inc_rs_pending(mdev);
#line 397
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 403
      kfree((void const   *)digest);
    } else {
#line 405
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 406
      ok = 0;
    }
  } else {
#line 409
    ok = 1;
  }
#line 411
  drbd_free_some_ee(mdev, e, 0);
#line 413
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 413
  if (tmp___2 != 0L) {
#line 414
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 415
  return (ok);
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 424
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 424
  if (tmp == 0) {
#line 425
    return (-5);
  } else {

  }
#line 427
  tmp___0 = drbd_rs_should_slow_down(mdev);
#line 427
  if (tmp___0 != 0) {
#line 428
    goto defer;
  } else {

  }
#line 432
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 433
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 434
    goto defer;
  } else {

  }
#line 436
  e->w.cb = & w_e_send_csum;
#line 437
  spin_lock_irq(& mdev->req_lock);
#line 438
  list_add(& e->w.list, & mdev->read_ee);
#line 439
  spin_unlock_irq(& mdev->req_lock);
#line 441
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 442
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 442
  if (tmp___1 == 0) {
#line 443
    return (0);
  } else {

  }
#line 448
  spin_lock_irq(& mdev->req_lock);
#line 449
  list_del(& e->w.list);
#line 450
  spin_unlock_irq(& mdev->req_lock);
#line 452
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 454
  put_ldev(mdev);
#line 455
  return (-11);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int queue ;
  int tmp ;

  {
#line 460
  mdev = (struct drbd_conf *)data;
#line 463
  queue = 1;
#line 464
  switch ((int )mdev->state.ldv_35532.conn) {
  case 18: 
#line 466
  mdev->resync_work.cb = & w_make_ov_request;
#line 467
  goto ldv_45045;
  case 17: 
#line 469
  mdev->resync_work.cb = & w_make_resync_request;
#line 470
  goto ldv_45045;
  default: 
#line 472
  queue = 0;
#line 473
  mdev->resync_work.cb = & w_resync_inactive;
  }
  ldv_45045: 
#line 477
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 477
  if (tmp != 0 && queue != 0) {
#line 478
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 479
  return;
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 485
  i = 0;
#line 485
  goto ldv_45054;
  ldv_45053: 
#line 486
  *(fb->values + (unsigned long )i) = value;
#line 485
  i = i + 1;
  ldv_45054: ;
#line 485
  if ((unsigned int )i < fb->size) {
#line 486
    goto ldv_45053;
  } else {

  }

#line 490
  return;
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 493
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 494
  tmp = fb->head_index;
#line 494
  fb->head_index = fb->head_index + 1U;
#line 494
  *(fb->values + (unsigned long )tmp) = value;
#line 496
  if (fb->head_index >= fb->size) {
#line 497
    fb->head_index = 0U;
  } else {

  }
#line 499
  return (ov);
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 506
  i = 0;
#line 506
  goto ldv_45067;
  ldv_45066: 
#line 507
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 506
  i = i + 1;
  ldv_45067: ;
#line 506
  if ((unsigned int )i < fb->size) {
#line 507
    goto ldv_45066;
  } else {

  }

#line 511
  return;
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 521
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 521
  sect_in = (unsigned int )tmp;
#line 522
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 524
  spin_lock(& mdev->peer_seq_lock);
#line 526
  steps = (int )mdev->rs_plan_s.size;
#line 528
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 529
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 531
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 535
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 538
  cps = correction / steps;
#line 539
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 540
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 543
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 544
  spin_unlock(& mdev->peer_seq_lock);
#line 545
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 547
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 548
  if (req_sect < 0) {
#line 549
    req_sect = 0;
  } else {

  }
#line 551
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 552
  if (req_sect > max_sect) {
#line 553
    req_sect = max_sect;
  } else {

  }
#line 561
  return (req_sect);
}
}
#line 564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int rollback_i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned long tmp___15 ;

  {
#line 569
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 569
  capacity = tmp;
#line 573
  i = 0;
#line 575
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 575
  if (tmp___0 != 0L) {
#line 576
    return (1);
  } else {

  }
#line 578
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35532.conn <= 9, 0L);
#line 578
  if (tmp___1 != 0L) {
#line 579
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 580
    return (0);
  } else {

  }
#line 583
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 272U) {
#line 584
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35532.conn);
#line 584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 587
  if (mdev->rs_total == 0UL) {
#line 589
    drbd_resync_finished(mdev);
#line 590
    return (1);
  } else {

  }
#line 593
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 593
  if (tmp___3 == 0) {
#line 598
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 599
    mdev->resync_work.cb = & w_resync_inactive;
#line 600
    return (1);
  } else {

  }
#line 605
  if (mdev->agreed_pro_version <= 93) {
#line 605
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 605
    max_segment_size = (int )tmp___4;
  } else {
#line 605
    max_segment_size = mdev->agreed_pro_version <= 94 ? 32768 : 131072;
  }
#line 609
  if (mdev->rs_plan_s.size != 0U) {
#line 610
    tmp___5 = drbd_rs_controller(mdev);
#line 610
    number = tmp___5 >> 3;
#line 611
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 613
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 614
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 622
  tmp___6 = drbd_rs_should_slow_down(mdev);
#line 622
  if (tmp___6 != 0) {
#line 623
    goto requeue;
  } else {

  }
#line 625
  ldv_mutex_lock_41(& mdev->data.mutex);
#line 626
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 627
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 629
    mx = 1;
  }
#line 630
  ldv_mutex_unlock_42(& mdev->data.mutex);
#line 633
  if (number > mx) {
#line 634
    mx = number;
  } else {

  }
#line 637
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 638
  if (pe + number > mx) {
#line 639
    number = mx - pe;
  } else {

  }
#line 642
  i = 0;
#line 642
  goto ldv_45113;
  ldv_45112: 
#line 644
  ldv_mutex_lock_43(& mdev->data.mutex);
#line 645
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 646
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 647
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 649
    queued = 1;
#line 650
    sndbuf = 0;
  }
#line 652
  ldv_mutex_unlock_44(& mdev->data.mutex);
#line 653
  if (sndbuf / 2 < queued) {
#line 654
    goto requeue;
  } else {

  }
  next_sector: 
#line 657
  size = 4096;
#line 658
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 660
  if (bit == 0xffffffffffffffffUL) {
#line 661
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 662
    mdev->resync_work.cb = & w_resync_inactive;
#line 663
    put_ldev(mdev);
#line 664
    return (1);
  } else {

  }
#line 667
  sector = bit << 3;
#line 669
  tmp___7 = drbd_try_rs_begin_io(mdev, sector);
#line 669
  if (tmp___7 != 0) {
#line 670
    mdev->bm_resync_fo = bit;
#line 671
    goto requeue;
  } else {

  }
#line 673
  mdev->bm_resync_fo = bit + 1UL;
#line 675
  tmp___8 = drbd_bm_test_bit(mdev, bit);
#line 675
  tmp___9 = __builtin_expect(tmp___8 == 0, 0L);
#line 675
  if (tmp___9 != 0L) {
#line 676
    drbd_rs_complete_io(mdev, sector);
#line 677
    goto next_sector;
  } else {

  }
#line 687
  align = 1;
#line 688
  rollback_i = i;
  ldv_45101: ;
#line 690
  if (size + 4096 > max_segment_size) {
#line 691
    goto ldv_45100;
  } else {

  }
#line 694
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 695
    goto ldv_45100;
  } else {

  }
#line 698
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 699
    goto ldv_45100;
  } else {

  }
#line 705
  tmp___10 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 705
  if (tmp___10 != 1) {
#line 706
    goto ldv_45100;
  } else {

  }
#line 707
  bit = bit + 1UL;
#line 708
  size = size + 4096;
#line 709
  if (4096 << align <= size) {
#line 710
    align = align + 1;
  } else {

  }
#line 711
  i = i + 1;
#line 712
  goto ldv_45101;
  ldv_45100: ;
#line 715
  if (size > 4096) {
#line 716
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 720
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 721
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 722
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 723
    tmp___11 = read_for_csum(mdev, sector, size);
#line 723
    switch (tmp___11) {
    case -5: 
#line 725
    put_ldev(mdev);
#line 726
    return (0);
    case -11: 
#line 728
    drbd_rs_complete_io(mdev, sector);
#line 729
    mdev->bm_resync_fo = sector >> 3;
#line 730
    i = rollback_i;
#line 731
    goto requeue;
    case 0: ;
#line 734
    goto ldv_45105;
    default: 
#line 736
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (736), "i" (12UL));
    ldv_45107: ;
#line 736
    goto ldv_45107;
    }
    ldv_45105: ;
  } else {
#line 739
    inc_rs_pending(mdev);
#line 740
    tmp___14 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 740
    if (tmp___14 == 0) {
#line 742
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 743
      atomic_dec(& mdev->rs_pending_cnt);
#line 743
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 743
      if (tmp___13 < 0) {
#line 743
        tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 743
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 743, tmp___12);
      } else {

      }
#line 744
      put_ldev(mdev);
#line 745
      return (0);
    } else {

    }
  }
#line 642
  i = i + 1;
  ldv_45113: ;
#line 642
  if (i < number) {
#line 643
    goto ldv_45112;
  } else {

  }
#line 750
  tmp___15 = drbd_bm_bits(mdev);
#line 750
  if (mdev->bm_resync_fo >= tmp___15) {
#line 757
    mdev->resync_work.cb = & w_resync_inactive;
#line 758
    put_ldev(mdev);
#line 759
    return (1);
  } else {

  }
  requeue: 
#line 763
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 764
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 765
  put_ldev(mdev);
#line 766
  return (1);
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 773
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 773
  capacity = tmp;
#line 775
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 775
  if (tmp___0 != 0L) {
#line 776
    return (1);
  } else {

  }
#line 778
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35532.conn <= 9, 0L);
#line 778
  if (tmp___1 != 0L) {
#line 779
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 780
    return (0);
  } else {

  }
#line 783
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 784
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 784
  if (tmp___2 > number) {
#line 785
    goto requeue;
  } else {

  }
#line 787
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 787
  number = number - tmp___3;
#line 789
  sector = mdev->ov_position;
#line 790
  i = 0;
#line 790
  goto ldv_45131;
  ldv_45130: ;
#line 791
  if (sector >= capacity) {
#line 792
    mdev->resync_work.cb = & w_resync_inactive;
#line 793
    return (1);
  } else {

  }
#line 796
  size = 4096;
#line 798
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 798
  if (tmp___4 != 0) {
#line 799
    mdev->ov_position = sector;
#line 800
    goto requeue;
  } else {

  }
#line 803
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 804
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 806
  inc_rs_pending(mdev);
#line 807
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 807
  if (tmp___7 == 0) {
#line 808
    atomic_dec(& mdev->rs_pending_cnt);
#line 808
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 808
    if (tmp___6 < 0) {
#line 808
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 808
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 808, tmp___5);
    } else {

    }
#line 809
    return (0);
  } else {

  }
#line 811
  sector = sector + 8UL;
#line 790
  i = i + 1;
  ldv_45131: ;
#line 790
  if (i < number) {
#line 791
    goto ldv_45130;
  } else {

  }
#line 813
  mdev->ov_position = sector;
  requeue: 
#line 816
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 817
  return (1);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 823
  kfree((void const   *)w);
#line 824
  ov_oos_print(mdev);
#line 825
  drbd_resync_finished(mdev);
#line 827
  return (1);
}
}
#line 830 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 832
  kfree((void const   *)w);
#line 834
  drbd_resync_finished(mdev);
#line 836
  return (1);
}
}
#line 839 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 841
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 842
  request_ping(mdev);
#line 843
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 843
  if (tmp != 0 || (int )mdev->state.ldv_35532.conn <= 9) {
#line 843
    goto ldv_45146;
  } else {

  }
#line 843
  tmp___0 = get_current();
#line 843
  __wait.flags = 0U;
#line 843
  __wait.private = (void *)tmp___0;
#line 843
  __wait.func = & autoremove_wake_function;
#line 843
  __wait.task_list.next = & __wait.task_list;
#line 843
  __wait.task_list.prev = & __wait.task_list;
  ldv_45149: 
#line 843
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 843
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 843
  if (tmp___1 != 0 || (int )mdev->state.ldv_35532.conn <= 9) {
#line 843
    goto ldv_45148;
  } else {

  }
#line 843
  schedule();
#line 843
  goto ldv_45149;
  ldv_45148: 
#line 843
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45146: ;
#line 846
  return;
}
}
#line 847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 853
  khelper_cmd = 0;
#line 858
  tmp___1 = drbd_rs_del_all(mdev);
#line 858
  if (tmp___1 != 0) {
#line 864
    drbd_kick_lo(mdev);
#line 865
    tmp = get_current();
#line 865
    tmp->state = 1L;
#line 866
    schedule_timeout(25L);
#line 867
    tmp___0 = kmalloc___0(24UL, 32U);
#line 867
    w = (struct drbd_work *)tmp___0;
#line 868
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 869
      w->cb = & w_resync_finished;
#line 870
      drbd_queue_work(& mdev->data.work, w);
#line 871
      return (1);
    } else {

    }
#line 873
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 876
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 877
  if (dt == 0UL) {
#line 878
    dt = 1UL;
  } else {

  }
#line 879
  db = mdev->rs_total;
#line 880
  dbdt = db / dt << 2;
#line 881
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 883
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 883
  if (tmp___2 == 0) {
#line 884
    goto out;
  } else {

  }
#line 886
  ping_peer(mdev);
#line 888
  spin_lock_irq(& mdev->req_lock);
#line 889
  os = mdev->state;
#line 893
  if ((int )os.ldv_35532.conn <= 10) {
#line 894
    goto out_unlock;
  } else {

  }
#line 896
  ns = os;
#line 897
  ns.ldv_35532.conn = 10U;
#line 899
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 904
  n_oos = drbd_bm_total_weight(mdev);
#line 906
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 907
    if (n_oos != 0UL) {
#line 908
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 910
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 913
      if (mdev->rs_failed != n_oos) {
#line 913
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                913);
      } else {

      }
#line 915
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 916
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 918
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 919
        s = mdev->rs_same_csum;
#line 920
        t = mdev->rs_total;
#line 921
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 924
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 933
  if (mdev->rs_failed != 0UL) {
#line 934
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 936
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 937
      ns.ldv_35532.disk = 4U;
#line 938
      ns.ldv_35532.pdsk = 8U;
    } else {
#line 940
      ns.ldv_35532.disk = 8U;
#line 941
      ns.ldv_35532.pdsk = 4U;
    }
  } else {
#line 944
    ns.ldv_35532.disk = 8U;
#line 945
    ns.ldv_35532.pdsk = 8U;
#line 947
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 948
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 950
        i = 1;
#line 950
        goto ldv_45168;
        ldv_45167: 
#line 951
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 950
        i = i + 1;
        ldv_45168: ;
#line 950
        if (i <= 3) {
#line 951
          goto ldv_45167;
        } else {

        }
#line 952
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 953
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 955
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 959
    drbd_uuid_set_bm(mdev, 0ULL);
#line 961
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 965
      i___0 = 0;
#line 965
      goto ldv_45172;
      ldv_45171: 
#line 966
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 965
      i___0 = i___0 + 1;
      ldv_45172: ;
#line 965
      if (i___0 <= 3) {
#line 966
        goto ldv_45171;
      } else {

      }

    } else {

    }
  }
#line 970
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 972
  spin_unlock_irq(& mdev->req_lock);
#line 973
  put_ldev(mdev);
  out: 
#line 975
  mdev->rs_total = 0UL;
#line 976
  mdev->rs_failed = 0UL;
#line 977
  mdev->rs_paused = 0UL;
#line 978
  mdev->ov_start_sector = 0UL;
#line 980
  drbd_md_sync(mdev);
#line 982
  tmp___3 = test_and_clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 982
  if (tmp___3 != 0) {
#line 983
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, due to failed kmalloc\n");
#line 984
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 987
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 988
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 990
  return (1);
}
}
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 996
  tmp = drbd_ee_has_active_page(e);
#line 996
  if (tmp != 0) {
#line 998
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 999
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 1000
    atomic_sub(i, & mdev->pp_in_use);
#line 1001
    spin_lock_irq(& mdev->req_lock);
#line 1002
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 1003
    spin_unlock_irq(& mdev->req_lock);
#line 1004
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 1006
    drbd_free_some_ee(mdev, e, 0);
  }
#line 1007
  return;
}
}
#line 1015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1017
  __mptr = (struct drbd_work  const  *)w;
#line 1017
  e = (struct drbd_epoch_entry *)__mptr;
#line 1020
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1020
  if (tmp___1 != 0L) {
#line 1021
    drbd_free_some_ee(mdev, e, 0);
#line 1022
    atomic_dec(& mdev->unacked_cnt);
#line 1022
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1022
    if (tmp___0 < 0) {
#line 1022
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1022
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1022, tmp);
    } else {

    }
#line 1023
    return (1);
  } else {

  }
#line 1026
  tmp___3 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1026
  if (tmp___3 != 0L) {
#line 1027
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1029
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1029
    if (tmp___2 != 0) {
#line 1030
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1033
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1036
  atomic_dec(& mdev->unacked_cnt);
#line 1036
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1036
  if (tmp___5 < 0) {
#line 1036
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1036
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1036, tmp___4);
  } else {

  }
#line 1038
  move_to_net_ee_or_free(mdev, e);
#line 1040
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1040
  if (tmp___6 != 0L) {
#line 1041
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1042
  return (ok);
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1053
  __mptr = (struct drbd_work  const  *)w;
#line 1053
  e = (struct drbd_epoch_entry *)__mptr;
#line 1056
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1056
  if (tmp___1 != 0L) {
#line 1057
    drbd_free_some_ee(mdev, e, 0);
#line 1058
    atomic_dec(& mdev->unacked_cnt);
#line 1058
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1058
    if (tmp___0 < 0) {
#line 1058
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1058
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1058, tmp);
    } else {

    }
#line 1059
    return (1);
  } else {

  }
#line 1062
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1062
  if (tmp___2 != 0) {
#line 1063
    drbd_rs_complete_io(mdev, e->sector);
#line 1064
    put_ldev(mdev);
  } else {

  }
#line 1067
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1067
  if (tmp___6 != 0L) {
#line 1068
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35532.pdsk > 3, 1L);
#line 1068
    if (tmp___4 != 0L) {
#line 1069
      inc_rs_pending(mdev);
#line 1070
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 1072
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1072
      if (tmp___3 != 0) {
#line 1073
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 1075
      ok = 1;
    }
  } else {
#line 1078
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1078
    if (tmp___5 != 0) {
#line 1079
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1082
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1085
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 1088
  atomic_dec(& mdev->unacked_cnt);
#line 1088
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1088
  if (tmp___8 < 0) {
#line 1088
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1088
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1088, tmp___7);
  } else {

  }
#line 1090
  move_to_net_ee_or_free(mdev, e);
#line 1092
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1092
  if (tmp___9 != 0L) {
#line 1093
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1094
  return (ok);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1099
  __mptr = (struct drbd_work  const  *)w;
#line 1099
  e = (struct drbd_epoch_entry *)__mptr;
#line 1102
  digest = 0;
#line 1103
  eq = 0;
#line 1105
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1105
  if (tmp___1 != 0L) {
#line 1106
    drbd_free_some_ee(mdev, e, 0);
#line 1107
    atomic_dec(& mdev->unacked_cnt);
#line 1107
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1107
    if (tmp___0 < 0) {
#line 1107
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1107
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1107, tmp);
    } else {

    }
#line 1108
    return (1);
  } else {

  }
#line 1111
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1111
  if (tmp___2 != 0) {
#line 1112
    drbd_rs_complete_io(mdev, e->sector);
#line 1113
    put_ldev(mdev);
  } else {

  }
#line 1116
  di = e->ldv_42956.digest;
#line 1118
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1118
  if (tmp___6 != 0L) {
#line 1122
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1123
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1123
      digest_size = (int )tmp___3;
#line 1124
      if (di->digest_size != digest_size) {
#line 1124
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1124);
      } else {

      }
#line 1125
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 1127
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1128
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1129
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1129
      eq = tmp___4 == 0;
#line 1130
      kfree((void const   *)digest);
    } else {

    }
#line 1133
    if (eq != 0) {
#line 1134
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1134U);
#line 1136
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1137
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1139
      inc_rs_pending(mdev);
#line 1140
      e->ldv_42956.block_id = 0xffffffffffffffffULL;
#line 1141
      e->flags = e->flags & 0xffffffffffffffdfUL;
#line 1142
      kfree((void const   *)di);
#line 1143
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1146
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1147
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1147
    if (tmp___5 != 0) {
#line 1148
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1151
  atomic_dec(& mdev->unacked_cnt);
#line 1151
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1151
  if (tmp___8 < 0) {
#line 1151
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1151, tmp___7);
  } else {

  }
#line 1152
  move_to_net_ee_or_free(mdev, e);
#line 1154
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1154
  if (tmp___9 != 0L) {
#line 1155
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1156
  return (ok);
}
}
#line 1159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1161
  __mptr = (struct drbd_work  const  *)w;
#line 1161
  e = (struct drbd_epoch_entry *)__mptr;
#line 1164
  ok = 1;
#line 1166
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1166
  if (tmp != 0L) {
#line 1167
    goto out;
  } else {

  }
#line 1169
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1169
  if (tmp___0 != 0L) {
#line 1170
    goto out;
  } else {

  }
#line 1172
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1172
  digest_size = (int )tmp___1;
#line 1174
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1175
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1176
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1177
    inc_rs_pending(mdev);
#line 1178
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1180
    if (ok == 0) {
#line 1181
      atomic_dec(& mdev->rs_pending_cnt);
#line 1181
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1181
      if (tmp___3 < 0) {
#line 1181
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1181
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1181, tmp___2);
      } else {

      }
    } else {

    }
#line 1182
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1186
  drbd_free_some_ee(mdev, e, 0);
#line 1188
  atomic_dec(& mdev->unacked_cnt);
#line 1188
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1188
  if (tmp___5 < 0) {
#line 1188
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1188
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1188, tmp___4);
  } else {

  }
#line 1190
  return (ok);
}
}
#line 1193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1195
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1196
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1198
    mdev->ov_last_oos_start = sector;
#line 1199
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1201
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1201U);
#line 1202
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1203
  return;
}
}
#line 1205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1207
  __mptr = (struct drbd_work  const  *)w;
#line 1207
  e = (struct drbd_epoch_entry *)__mptr;
#line 1211
  eq = 0;
#line 1213
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1213
  if (tmp___1 != 0L) {
#line 1214
    drbd_free_some_ee(mdev, e, 0);
#line 1215
    atomic_dec(& mdev->unacked_cnt);
#line 1215
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1215
    if (tmp___0 < 0) {
#line 1215
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1215
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1215, tmp);
    } else {

    }
#line 1216
    return (1);
  } else {

  }
#line 1221
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1221
  if (tmp___2 != 0) {
#line 1222
    drbd_rs_complete_io(mdev, e->sector);
#line 1223
    put_ldev(mdev);
  } else {

  }
#line 1226
  di = e->ldv_42956.digest;
#line 1228
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1228
  if (tmp___6 != 0L) {
#line 1229
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1229
    digest_size = (int )tmp___3;
#line 1230
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1231
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1232
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1234
      if (di->digest_size != digest_size) {
#line 1234
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1234);
      } else {

      }
#line 1235
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1235
      eq = tmp___4 == 0;
#line 1236
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1239
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1240
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1240
    if (tmp___5 != 0) {
#line 1241
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1244
  atomic_dec(& mdev->unacked_cnt);
#line 1244
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1244
  if (tmp___8 < 0) {
#line 1244
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1244, tmp___7);
  } else {

  }
#line 1245
  if (eq == 0) {
#line 1246
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1248
    ov_oos_print(mdev);
  }
#line 1250
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1253
  drbd_free_some_ee(mdev, e, 0);
#line 1255
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1255
  if (mdev->ov_left == 0UL) {
#line 1256
    ov_oos_print(mdev);
#line 1257
    drbd_resync_finished(mdev);
  } else {

  }
#line 1260
  return (ok);
}
}
#line 1263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1265
  __mptr = (struct drbd_work  const  *)w;
#line 1265
  b = (struct drbd_wq_barrier *)__mptr;
#line 1266
  complete(& b->done);
#line 1267
  return (1);
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1272
  __mptr = (struct drbd_work  const  *)w;
#line 1272
  b = (struct drbd_tl_epoch *)__mptr;
#line 1273
  p = & mdev->data.sbuf.barrier;
#line 1274
  ok = 1;
#line 1281
  spin_lock_irq(& mdev->req_lock);
#line 1282
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35532.conn <= 9) {
#line 1283
    cancel = 1;
  } else {

  }
#line 1284
  spin_unlock_irq(& mdev->req_lock);
#line 1285
  if (cancel != 0) {
#line 1286
    return (1);
  } else {

  }
#line 1288
  tmp = drbd_get_data_sock(mdev);
#line 1288
  if (tmp == 0) {
#line 1289
    return (0);
  } else {

  }
#line 1290
  p->barrier = b->br_number;
#line 1294
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1296
  drbd_put_data_sock(mdev);
#line 1298
  return (ok);
}
}
#line 1301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1303
  if (cancel != 0) {
#line 1304
    return (1);
  } else {

  }
#line 1305
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1305
  return (tmp);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1316
  __mptr = (struct drbd_work  const  *)w;
#line 1316
  req = (struct drbd_request *)__mptr;
#line 1319
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1319
  if (tmp != 0L) {
#line 1320
    req_mod(req, send_canceled);
#line 1321
    return (1);
  } else {

  }
#line 1324
  ok = drbd_send_dblock(mdev, req);
#line 1325
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1327
  return (ok);
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1338
  __mptr = (struct drbd_work  const  *)w;
#line 1338
  req = (struct drbd_request *)__mptr;
#line 1341
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1341
  if (tmp != 0L) {
#line 1342
    req_mod(req, send_canceled);
#line 1343
    return (1);
  } else {

  }
#line 1346
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1349
  if (ok == 0) {
#line 1352
    if ((int )mdev->state.ldv_35532.conn > 9) {
#line 1353
      val.i = 0U;
#line 1353
      val.ldv_35532.conn = 5U;
#line 1353
      mask.i = 0U;
#line 1353
      mask.ldv_35532.conn = 31U;
#line 1353
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1355
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1357
  return (ok);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1362
  __mptr = (struct drbd_work  const  *)w;
#line 1362
  req = (struct drbd_request *)__mptr;
#line 1364
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1365
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1371
  drbd_req_make_private_bio(req, req->master_bio);
#line 1372
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1373
  generic_make_request(req->private_bio);
#line 1375
  return (1);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1380
  odev = mdev;
  ldv_45335: ;
#line 1383
  if (odev->sync_conf.after == -1) {
#line 1384
    return (1);
  } else {

  }
#line 1385
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1386
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1386
  if (_b != 0) {
#line 1386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1386);
  } else {

  }
#line 1386
  if (_b != 0) {
#line 1386
    return (1);
  } else {

  }
#line 1387
  if (((((int )odev->state.ldv_35532.conn > 15 && (int )odev->state.ldv_35532.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1391
    return (0);
  } else {

  }
#line 1392
  goto ldv_45335;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1404
  rv = 0;
#line 1406
  i = 0;
#line 1406
  goto ldv_45346;
  ldv_45345: 
#line 1407
  odev = minor_to_mdev((unsigned int )i);
#line 1408
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1409
    goto ldv_45342;
  } else {

  }
#line 1410
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1411
    goto ldv_45342;
  } else {

  }
#line 1412
  tmp___0 = _drbd_may_sync_now(odev);
#line 1412
  if (tmp___0 == 0) {
#line 1413
    __ns.i = odev->state.i;
#line 1413
    __ns.ldv_35532.aftr_isp = 1U;
#line 1413
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1413
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_45342: 
#line 1406
  i = i + 1;
  ldv_45346: ;
#line 1406
  if ((unsigned int )i < minor_count) {
#line 1407
    goto ldv_45345;
  } else {

  }

#line 1417
  return (rv);
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1429
  rv = 0;
#line 1431
  i = 0;
#line 1431
  goto ldv_45358;
  ldv_45357: 
#line 1432
  odev = minor_to_mdev((unsigned int )i);
#line 1433
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1434
    goto ldv_45354;
  } else {

  }
#line 1435
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1436
    goto ldv_45354;
  } else {

  }
#line 1437
  if ((unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1438
    tmp___0 = _drbd_may_sync_now(odev);
#line 1438
    if (tmp___0 != 0) {
#line 1439
      __ns.i = odev->state.i;
#line 1439
      __ns.ldv_35532.aftr_isp = 0U;
#line 1439
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1439
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_45354: 
#line 1431
  i = i + 1;
  ldv_45358: ;
#line 1431
  if ((unsigned int )i < minor_count) {
#line 1432
    goto ldv_45357;
  } else {

  }

#line 1444
  return (rv);
}
}
#line 1447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1449
  _raw_write_lock_irq(& global_state_lock);
#line 1450
  _drbd_resume_next(mdev);
#line 1451
  _raw_write_unlock_irq(& global_state_lock);
#line 1452
  return;
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1456
  _raw_write_lock_irq(& global_state_lock);
#line 1457
  _drbd_pause_after(mdev);
#line 1458
  _raw_write_unlock_irq(& global_state_lock);
#line 1459
  return;
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1465
  if (o_minor == -1) {
#line 1466
    return (101);
  } else {

  }
#line 1467
  if (o_minor < -1) {
#line 1468
    return (132);
  } else {
#line 1467
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1467
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1468
      return (132);
    } else {

    }
  }
#line 1471
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_45371: ;
#line 1473
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1474
    return (133);
  } else {

  }
#line 1477
  if (odev->sync_conf.after == -1) {
#line 1478
    return (101);
  } else {

  }
#line 1481
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1482
  goto ldv_45371;
}
}
#line 1485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1490
  _raw_write_lock_irq(& global_state_lock);
#line 1491
  retcode = sync_after_error(mdev, na);
#line 1492
  if (retcode == 101) {
#line 1493
    mdev->sync_conf.after = na;
    ldv_45378: 
#line 1495
    changes = _drbd_pause_after(mdev);
#line 1496
    tmp = _drbd_resume_next(mdev);
#line 1496
    changes = tmp | changes;
#line 1497
    if (changes != 0) {
#line 1498
      goto ldv_45378;
    } else {

    }

  } else {

  }
#line 1499
  _raw_write_unlock_irq(& global_state_lock);
#line 1500
  return (retcode);
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tw ;
  unsigned long tmp___1 ;
  unsigned long now ;
  int i ;
  char const   *tmp___2 ;

  {
#line 1516
  if ((int )mdev->state.ldv_35532.conn > 15) {
#line 1517
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1518
    return;
  } else {

  }
#line 1522
  drbd_rs_cancel_all(mdev);
#line 1524
  if ((unsigned int )side == 17U) {
#line 1528
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1529
    r = (r >> 8) & 255;
#line 1530
    if (r > 0) {
#line 1531
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1533
      val.i = 0U;
#line 1533
      val.ldv_35532.conn = 1U;
#line 1533
      mask.i = 0U;
#line 1533
      mask.ldv_35532.conn = 31U;
#line 1533
      drbd_force_state(mdev, mask, val);
#line 1534
      return;
    } else {

    }
  } else {

  }
#line 1538
  drbd_state_lock(mdev);
#line 1540
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1540
  if (tmp == 0) {
#line 1541
    drbd_state_unlock(mdev);
#line 1542
    return;
  } else {

  }
#line 1545
  if ((unsigned int )side == 17U) {
#line 1546
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1550
    get_random_bytes((void *)(& uuid), 8);
#line 1551
    drbd_uuid_set(mdev, 1, uuid);
#line 1552
    drbd_send_sync_uuid(mdev, uuid);
#line 1554
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 16U) {
#line 1554
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1554);
    } else {

    }
  }
#line 1557
  _raw_write_lock_irq(& global_state_lock);
#line 1558
  ns = mdev->state;
#line 1560
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1560
  ns.ldv_35532.aftr_isp = tmp___0 == 0;
#line 1562
  ns.ldv_35532.conn = (unsigned char )side;
#line 1564
  if ((unsigned int )side == 17U) {
#line 1565
    ns.ldv_35532.disk = 4U;
  } else {
#line 1567
    ns.ldv_35532.pdsk = 4U;
  }
#line 1569
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1570
  ns = mdev->state;
#line 1572
  if ((int )ns.ldv_35532.conn <= 9) {
#line 1573
    r = 0;
  } else {

  }
#line 1575
  if (r == 1) {
#line 1576
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1576
    tw = tmp___1;
#line 1577
    now = jiffies;
#line 1580
    mdev->rs_failed = 0UL;
#line 1581
    mdev->rs_paused = 0UL;
#line 1582
    mdev->rs_same_csum = 0UL;
#line 1583
    mdev->rs_last_events = 0;
#line 1584
    mdev->rs_last_sect_ev = 0;
#line 1585
    mdev->rs_total = tw;
#line 1586
    mdev->rs_start = now;
#line 1587
    i = 0;
#line 1587
    goto ldv_45395;
    ldv_45394: 
#line 1588
    mdev->rs_mark_left[i] = tw;
#line 1589
    mdev->rs_mark_time[i] = now;
#line 1587
    i = i + 1;
    ldv_45395: ;
#line 1587
    if (i <= 7) {
#line 1588
      goto ldv_45394;
    } else {

    }
#line 1591
    _drbd_pause_after(mdev);
  } else {

  }
#line 1593
  _raw_write_unlock_irq(& global_state_lock);
#line 1594
  put_ldev(mdev);
#line 1596
  if (r == 1) {
#line 1597
    tmp___2 = drbd_conn_str((enum drbd_conns )ns.ldv_35532.conn);
#line 1597
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___2, mdev->rs_total << 2, mdev->rs_total);
#line 1602
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1613
      if ((unsigned int )side == 16U) {
#line 1614
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1617
      drbd_resync_finished(mdev);
    } else {

    }
#line 1620
    atomic_set(& mdev->rs_sect_in, 0);
#line 1621
    atomic_set(& mdev->rs_sect_ev, 0);
#line 1622
    mdev->rs_in_flight = 0;
#line 1623
    mdev->rs_planed = 0;
#line 1624
    spin_lock(& mdev->peer_seq_lock);
#line 1625
    fifo_set(& mdev->rs_plan_s, 0);
#line 1626
    spin_unlock(& mdev->peer_seq_lock);
#line 1631
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1632
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1634
    drbd_md_sync(mdev);
  } else {

  }
#line 1636
  drbd_state_unlock(mdev);
#line 1637
  return;
}
}
#line 1639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1641
  mdev = thi->mdev;
#line 1642
  w = 0;
#line 1643
  work_list.next = & work_list;
#line 1643
  work_list.prev = & work_list;
#line 1644
  intr = 0;
#line 1646
  tmp = mdev_to_minor(mdev);
#line 1646
  tmp___0 = get_current();
#line 1646
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1648
  goto ldv_45408;
  ldv_45418: 
#line 1649
  drbd_thread_current_set_cpu(mdev);
#line 1651
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1651
  if (tmp___1 != 0) {
#line 1652
    ldv_mutex_lock_45(& mdev->data.mutex);
#line 1653
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1654
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1655
    ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1657
    intr = down_interruptible(& mdev->data.work.s);
#line 1659
    ldv_mutex_lock_47(& mdev->data.mutex);
#line 1660
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1661
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1662
    ldv_mutex_unlock_48(& mdev->data.mutex);
  } else {

  }
#line 1665
  if (intr != 0) {
#line 1666
    if (intr != -4) {
#line 1666
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1666);
    } else {

    }
#line 1667
    tmp___2 = get_current();
#line 1667
    flush_signals(tmp___2);
#line 1668
    tmp___3 = get_t_state(thi);
#line 1668
    _b = (unsigned int )tmp___3 == 1U;
#line 1668
    if (_b != 0) {
#line 1668
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1668);
    } else {

    }
#line 1668
    if (_b != 0) {
#line 1669
      goto ldv_45408;
    } else {

    }
#line 1670
    goto ldv_45409;
  } else {

  }
#line 1673
  tmp___4 = get_t_state(thi);
#line 1673
  if ((unsigned int )tmp___4 != 1U) {
#line 1674
    goto ldv_45409;
  } else {

  }
#line 1679
  w = 0;
#line 1680
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1681
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1681
  _b___0 = tmp___5 != 0;
#line 1681
  if (_b___0 != 0) {
#line 1681
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1681);
  } else {

  }
#line 1681
  if (_b___0 != 0) {
#line 1693
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1694
    goto ldv_45408;
  } else {

  }
#line 1696
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1696
  w = (struct drbd_work *)__mptr;
#line 1697
  list_del_init(& w->list);
#line 1698
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1700
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35532.conn <= 9);
#line 1700
  if (tmp___6 == 0) {
#line 1702
    if ((int )mdev->state.ldv_35532.conn > 9) {
#line 1704
      val.i = 0U;
#line 1704
      val.ldv_35532.conn = 5U;
#line 1704
      mask.i = 0U;
#line 1704
      mask.ldv_35532.conn = 31U;
#line 1704
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_45408: 
#line 1648
  tmp___7 = get_t_state(thi);
#line 1648
  if ((unsigned int )tmp___7 == 1U) {
#line 1649
    goto ldv_45418;
  } else {

  }
  ldv_45409: 
#line 1707
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1707
  if (tmp___8 == 0) {
#line 1707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1707);
  } else {

  }
#line 1708
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1708
  if (tmp___9 == 0) {
#line 1708
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1708);
  } else {

  }
#line 1710
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1711
  i = 0;
#line 1712
  goto ldv_45425;
  ldv_45424: 
#line 1713
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1714
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1716
  goto ldv_45422;
  ldv_45421: 
#line 1717
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1717
  w = (struct drbd_work *)__mptr___0;
#line 1718
  list_del_init(& w->list);
#line 1719
  (*(w->cb))(mdev, w, 1);
#line 1720
  i = i + 1;
  ldv_45422: 
#line 1716
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1716
  if (tmp___10 == 0) {
#line 1717
    goto ldv_45421;
  } else {

  }
#line 1723
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_45425: 
#line 1712
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1712
  if (tmp___11 == 0) {
#line 1713
    goto ldv_45424;
  } else {

  }
#line 1725
  sema_init(& mdev->data.work.s, 0);
#line 1731
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1733
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 1733
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1733);
  } else {

  }
#line 1736
  drbd_thread_stop(& mdev->receiver);
#line 1737
  drbd_mdev_cleanup(mdev);
#line 1739
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1741
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1742
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1743
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1745
  return (0);
}
}
#line 1748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1753
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1755
  mutex_lock(ldv_func_arg1);
#line 1756
  return;
}
}
#line 1758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1763
  tmp = mutex_trylock(ldv_func_arg1);
#line 1763
  ldv_func_res = tmp;
#line 1765
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1765
  return (tmp___0);
#line 1767
  return (ldv_func_res);
}
}
#line 1770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1775
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1777
  mutex_unlock(ldv_func_arg1);
#line 1778
  return;
}
}
#line 1780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1785
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1787
  mutex_lock(ldv_func_arg1);
#line 1788
  return;
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1795
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1797
  mutex_unlock(ldv_func_arg1);
#line 1798
  return;
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1805
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1807
  mutex_unlock(ldv_func_arg1);
#line 1808
  return;
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1815
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1817
  mutex_lock(ldv_func_arg1);
#line 1818
  return;
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1825
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1827
  mutex_unlock(ldv_func_arg1);
#line 1828
  return;
}
}
#line 1830 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1835
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1837
  mutex_lock(ldv_func_arg1);
#line 1838
  return;
}
}
#line 1840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1845
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1847
  mutex_unlock(ldv_func_arg1);
#line 1848
  return;
}
}
#line 1850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1855
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1857
  mutex_lock(ldv_func_arg1);
#line 1858
  return;
}
}
#line 1860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1865
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1867
  mutex_unlock(ldv_func_arg1);
#line 1868
  return;
}
}
#line 1870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1875
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1877
  mutex_lock(ldv_func_arg1);
#line 1878
  return;
}
}
#line 1880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1885
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1887
  mutex_unlock(ldv_func_arg1);
#line 1888
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 382 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 147 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 149
  __list_del(list->prev, list->next);
#line 150
  list_add(list, head);
#line 151
  return;
}
}
#line 568 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 570
  h->next = 0;
#line 571
  h->pprev = 0;
#line 572
  return;
}
}
#line 574 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 576
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 584 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 586
  next = n->next;
#line 587
  pprev = n->pprev;
#line 588
  *pprev = next;
#line 589
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 590
    next->pprev = pprev;
  } else {

  }
#line 591
  return;
}
}
#line 600 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 602
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 602
  if (tmp == 0) {
#line 603
    __hlist_del(n);
#line 604
    INIT_HLIST_NODE(n);
  } else {

  }
#line 606
  return;
}
}
#line 608 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 610
  first = h->first;
#line 611
  n->next = first;
#line 612
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 613
    first->pprev = & n->next;
  } else {

  }
#line 614
  h->first = n;
#line 615
  n->pprev = & h->first;
#line 616
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) ;
#line 52
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5903;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5903;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5903;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5903;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5903: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 234 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 236
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 238
extern void sock_release(struct socket * ) ;
#line 241
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13830: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13830;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___1(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___1(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 341 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17848: ;
#line 63
    goto ldv_17848;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17849: ;
#line 65
    goto ldv_17849;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17850: ;
#line 66
    goto ldv_17850;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2312 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2314
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2314
  return (tmp);
}
}
#line 2338 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2340
  tmp = test_tsk_thread_flag(p, 2);
#line 2340
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2340
  return ((int )tmp___0);
}
}
#line 293 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 423 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 425
  disk->part0.nr_sects = size;
#line 426
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  __might_sleep("include/linux/highmem.h", 61, 0);
#line 62
  tmp = lowmem_page_address(page);
#line 62
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 67
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 582 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 584
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 597
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 607 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 609
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1181
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1185
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1191
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1201
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1203
void tl_clear(struct drbd_conf *mdev ) ;
#line 1207
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1210
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1211
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1214
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1216
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1225
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1227
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1228
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1232
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1234
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1251
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1253
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1263
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1280
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1281
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1282
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1469
mempool_t *drbd_ee_mempool ;
#line 1471
struct page *drbd_pp_pool ;
#line 1472
spinlock_t drbd_pp_lock ;
#line 1473
int drbd_pp_vacant ;
#line 1494
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1496
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1497
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1498
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1499
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1502
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1556
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1566
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1568
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1572
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1573
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1603 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1605
  val = 1;
#line 1606
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1608
  return;
}
}
#line 1610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1612
  val = 2;
#line 1613
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1615
  return;
}
}
#line 1629
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1655
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1743
  page = e->pages;
#line 1744
  goto ldv_44770;
  ldv_44769: 
#line 1745
  tmp = page_count(page);
#line 1745
  if (tmp > 1) {
#line 1746
    return (1);
  } else {

  }
#line 1744
  page = page_chain_next(page);
  ldv_44770: ;
#line 1744
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1744
    tmp___0 = page_chain_next(page);
#line 1744
    __builtin_prefetch((void const   *)tmp___0);
#line 1744
    if (1 != 0) {
#line 1745
      goto ldv_44769;
    } else {
#line 1747
      goto ldv_44771;
    }
  } else {

  }
  ldv_44771: ;
#line 1748
  return (0);
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1791
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1791
  return (tmp);
}
}
#line 1845 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1847
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1850
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1853
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_44842;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_44842;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44842: ;
#line 1911
  return (s);
}
}
#line 1945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1948
  tmp = spinlock_check(& q->q_lock);
#line 1948
  flags = _raw_spin_lock_irqsave(tmp);
#line 1949
  list_add(& w->list, & q->q);
#line 1950
  up(& q->s);
#line 1952
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1953
  return;
}
}
#line 1985 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1988
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1988
  return (tmp);
}
}
#line 1991 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1994
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1994
  return (tmp);
}
}
#line 2076 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2078
  atomic_inc(& mdev->unacked_cnt);
#line 2079
  return;
}
}
#line 2092 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2094
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2094
  if (tmp != 0) {
#line 2095
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2096
  return;
}
}
#line 2104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2108
  atomic_inc(& mdev->net_cnt);
#line 2109
  have_net_conf = (int )mdev->state.ldv_35532.conn > 1;
#line 2110
  if (have_net_conf == 0) {
#line 2111
    put_net_conf(mdev);
  } else {

  }
#line 2112
  return (have_net_conf);
}
}
#line 2342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2344
  mdev->ed_uuid = val;
#line 2345
  return;
}
}
#line 2347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2354
  return ((int )a - (int )b);
}
}
#line 2363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2366
  spin_lock(& mdev->peer_seq_lock);
#line 2367
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2367
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2368
  mdev->peer_seq = m;
#line 2369
  spin_unlock(& mdev->peer_seq_lock);
#line 2370
  if (m == new_seq) {
#line 2371
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2372
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_45108: ;
#line 227
    goto ldv_45108;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_45113: ;
#line 236
    goto ldv_45113;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 250 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 253
  tmp = ar_hash_slot(mdev, sector);
#line 253
  slot = tmp;
#line 257
  n = slot->first;
#line 257
  goto ldv_45131;
  ldv_45130: ;
#line 258
  if ((unsigned long )req == (unsigned long )id) {
#line 259
    if (req->sector != sector) {
#line 259
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              259);
    } else {

    }
#line 260
    return (req);
  } else {

  }
#line 257
  n = n->next;
  ldv_45131: ;
#line 257
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 257
    __builtin_prefetch((void const   *)n->next);
#line 257
    if (1 != 0) {
#line 257
      __mptr = (struct hlist_node  const  *)n;
#line 257
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 257
      if (1 != 0) {
#line 258
        goto ldv_45130;
      } else {
#line 260
        goto ldv_45132;
      }
    } else {
#line 260
      goto ldv_45132;
    }
  } else {

  }
  ldv_45132: ;
#line 263
  return (0);
}
}
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 307
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_45184: ;
#line 162
  goto ldv_45184;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 120
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 122
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 123
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 128
  spin_lock(& mdev->epoch_lock);
#line 129
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 129
  prev = (struct drbd_epoch *)__mptr;
#line 130
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 131
    prev = 0;
  } else {

  }
#line 132
  spin_unlock(& mdev->epoch_lock);
#line 133
  return (prev);
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 152
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 152
  if (tmp___0 != 0L) {
#line 152
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (152), "i" (12UL));
    ldv_45274: ;
#line 152
    goto ldv_45274;
  } else {

  }
#line 153
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 153
  if (tmp___1 != 0L) {
#line 153
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (153), "i" (12UL));
    ldv_45275: ;
#line 153
    goto ldv_45275;
  } else {

  }
#line 155
  page = *head;
#line 157
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 160
  goto ldv_45278;
  ldv_45277: 
#line 161
  tmp = page_chain_next(page);
#line 162
  n = n - 1;
#line 162
  if (n == 0) {
#line 163
    goto ldv_45276;
  } else {

  }
#line 164
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 166
    return (0);
  } else {

  }
#line 167
  page = tmp;
  ldv_45278: ;
#line 160
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 161
    goto ldv_45277;
  } else {

  }
  ldv_45276: 
#line 171
  page->ldv_12351.ldv_12348.private = 0UL;
#line 173
  page = *head;
#line 174
  *head = tmp;
#line 175
  return (page);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 184
  i = 1;
#line 185
  goto ldv_45286;
  ldv_45285: 
#line 186
  i = i + 1;
#line 186
  page = tmp;
  ldv_45286: 
#line 185
  tmp = page_chain_next(page);
#line 185
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 186
    goto ldv_45285;
  } else {

  }

#line 187
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 188
    *len = i;
  } else {

  }
#line 189
  return (page);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 195
  i = 0;
#line 196
  goto ldv_45295;
  ldv_45294: 
#line 197
  put_page(page);
#line 198
  i = i + 1;
#line 196
  page = tmp;
  ldv_45295: ;
#line 196
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 196
    tmp = page_chain_next(page);
#line 196
    if (1 != 0) {
#line 197
      goto ldv_45294;
    } else {
#line 199
      goto ldv_45296;
    }
  } else {

  }
  ldv_45296: ;
#line 200
  return (i);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 208
  tmp = page_chain_tail(chain_first, 0);
#line 209
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 209
  if (tmp___0 != 0L) {
#line 209
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (209), "i" (12UL));
    ldv_45303: ;
#line 209
    goto ldv_45303;
  } else {

  }
#line 213
  chain_last->ldv_12351.ldv_12348.private = (unsigned long )*head;
#line 214
  *head = chain_first;
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 219
  page = 0;
#line 220
  tmp = 0;
#line 221
  i = 0;
#line 225
  if (drbd_pp_vacant >= number) {
#line 226
    spin_lock(& drbd_pp_lock);
#line 227
    page = page_chain_del(& drbd_pp_pool, number);
#line 228
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 229
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 230
    spin_unlock(& drbd_pp_lock);
#line 231
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 232
      return (page);
    } else {

    }
  } else {

  }
#line 238
  i = 0;
#line 238
  goto ldv_45313;
  ldv_45312: 
#line 239
  tmp = alloc_pages(514U, 0U);
#line 240
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 241
    goto ldv_45311;
  } else {

  }
#line 242
  tmp->ldv_12351.ldv_12348.private = (unsigned long )page;
#line 243
  page = tmp;
#line 238
  i = i + 1;
  ldv_45313: ;
#line 238
  if (i < number) {
#line 239
    goto ldv_45312;
  } else {

  }
  ldv_45311: ;
#line 246
  if (i == number) {
#line 247
    return (page);
  } else {

  }
#line 252
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 253
    tmp = page_chain_tail(page, 0);
#line 254
    spin_lock(& drbd_pp_lock);
#line 255
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 256
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 257
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 259
  return (0);
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 267
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 267
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 268
    drbd_kick_lo(mdev);
  } else {

  }
#line 269
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 281
  le = mdev->net_ee.next;
#line 281
  tle = le->next;
#line 281
  goto ldv_45328;
  ldv_45327: 
#line 282
  __mptr = (struct list_head  const  *)le;
#line 282
  e = (struct drbd_epoch_entry *)__mptr;
#line 283
  tmp = drbd_ee_has_active_page___0(e);
#line 283
  if (tmp != 0) {
#line 284
    goto ldv_45326;
  } else {

  }
#line 285
  list_move(le, to_be_freed);
#line 281
  le = tle;
#line 281
  tle = le->next;
  ldv_45328: ;
#line 281
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 282
    goto ldv_45327;
  } else {

  }
  ldv_45326: ;
#line 286
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 291
  reclaimed.next = & reclaimed;
#line 291
  reclaimed.prev = & reclaimed;
#line 294
  maybe_kick_lo(mdev);
#line 295
  spin_lock_irq(& mdev->req_lock);
#line 296
  reclaim_net_ee(mdev, & reclaimed);
#line 297
  spin_unlock_irq(& mdev->req_lock);
#line 299
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 299
  e = (struct drbd_epoch_entry *)__mptr;
#line 299
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 299
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 299
  goto ldv_45342;
  ldv_45341: 
#line 300
  drbd_free_some_ee(mdev, e, 1);
#line 299
  e = t;
#line 299
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 299
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45342: ;
#line 299
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 300
    goto ldv_45341;
  } else {

  }

#line 304
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 317
  page = 0;
#line 318
  tmp = get_current();
#line 318
  wait.flags = 0U;
#line 318
  wait.private = (void *)tmp;
#line 318
  wait.func = & autoremove_wake_function;
#line 318
  wait.task_list.next = & wait.task_list;
#line 318
  wait.task_list.prev = & wait.task_list;
#line 322
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 322
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 323
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 325
  goto ldv_45353;
  ldv_45352: 
#line 326
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 328
  drbd_kick_lo_and_reclaim_net(mdev);
#line 330
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 330
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 331
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 332
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 333
      goto ldv_45351;
    } else {

    }
  } else {

  }
#line 336
  if (! retry) {
#line 337
    goto ldv_45351;
  } else {

  }
#line 339
  tmp___2 = get_current();
#line 339
  tmp___3 = signal_pending(tmp___2);
#line 339
  if (tmp___3 != 0) {
#line 340
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 341
    goto ldv_45351;
  } else {

  }
#line 344
  schedule();
  ldv_45353: ;
#line 325
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 326
    goto ldv_45352;
  } else {

  }
  ldv_45351: 
#line 346
  finish_wait(& drbd_pp_wait, & wait);
#line 348
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 349
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 350
  return (page);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 359
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 362
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 363
    i = page_chain_free(page);
  } else {
#line 366
    tmp = page_chain_tail(page, & i);
#line 367
    spin_lock(& drbd_pp_lock);
#line 368
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 369
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 370
    spin_unlock(& drbd_pp_lock);
  }
#line 372
  i = atomic_sub_return(i, a);
#line 373
  if (i < 0) {
#line 374
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 376
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 377
  return;
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 402
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 404
  tmp = drbd_insert_fault(mdev, 8U);
#line 404
  if (tmp != 0) {
#line 405
    return (0);
  } else {

  }
#line 407
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 407
  e = (struct drbd_epoch_entry *)tmp___0;
#line 408
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 409
    if ((gfp_mask & 512U) == 0U) {
#line 410
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 411
    return (0);
  } else {

  }
#line 414
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 415
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 416
    goto fail;
  } else {

  }
#line 418
  INIT_HLIST_NODE(& e->colision);
#line 419
  e->epoch = 0;
#line 420
  e->mdev = mdev;
#line 421
  e->pages = page;
#line 422
  atomic_set(& e->pending_bios, 0);
#line 423
  e->size = data_size;
#line 424
  e->flags = 0UL;
#line 425
  e->sector = sector;
#line 426
  e->ldv_42956.block_id = id;
#line 428
  return (e);
  fail: 
#line 431
  mempool_free((void *)e, drbd_ee_mempool);
#line 432
  return (0);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 437
  if ((e->flags & 32UL) != 0UL) {
#line 438
    kfree((void const   *)e->ldv_42956.digest);
  } else {

  }
#line 439
  drbd_pp_free(mdev, e->pages, is_net);
#line 440
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 440
  if (tmp != 0) {
#line 440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            440);
  } else {

  }
#line 441
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 441
  if (tmp___0 == 0) {
#line 441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            441);
  } else {

  }
#line 442
  mempool_free((void *)e, drbd_ee_mempool);
#line 443
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 447
  work_list.next = & work_list;
#line 447
  work_list.prev = & work_list;
#line 449
  count = 0;
#line 450
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 452
  spin_lock_irq(& mdev->req_lock);
#line 453
  list_splice_init(list, & work_list);
#line 454
  spin_unlock_irq(& mdev->req_lock);
#line 456
  __mptr = (struct list_head  const  *)work_list.next;
#line 456
  e = (struct drbd_epoch_entry *)__mptr;
#line 456
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 456
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 456
  goto ldv_45394;
  ldv_45393: 
#line 457
  drbd_free_some_ee(mdev, e, is_net);
#line 458
  count = count + 1;
#line 456
  e = t;
#line 456
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 456
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45394: ;
#line 456
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 457
    goto ldv_45393;
  } else {

  }

#line 460
  return (count);
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 475
  work_list.next = & work_list;
#line 475
  work_list.prev = & work_list;
#line 476
  reclaimed.next = & reclaimed;
#line 476
  reclaimed.prev = & reclaimed;
#line 478
  ok = (int )mdev->state.ldv_35532.conn > 8;
#line 480
  spin_lock_irq(& mdev->req_lock);
#line 481
  reclaim_net_ee(mdev, & reclaimed);
#line 482
  list_splice_init(& mdev->done_ee, & work_list);
#line 483
  spin_unlock_irq(& mdev->req_lock);
#line 485
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 485
  e = (struct drbd_epoch_entry *)__mptr;
#line 485
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 485
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 485
  goto ldv_45411;
  ldv_45410: 
#line 486
  drbd_free_some_ee(mdev, e, 1);
#line 485
  e = t;
#line 485
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 485
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45411: ;
#line 485
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 486
    goto ldv_45410;
  } else {

  }
#line 492
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 492
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 492
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 492
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 492
  goto ldv_45420;
  ldv_45419: 
#line 494
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 494
  ok = tmp != 0 && ok != 0;
#line 495
  drbd_free_some_ee(mdev, e, 0);
#line 492
  e = t;
#line 492
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 492
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_45420: ;
#line 492
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 493
    goto ldv_45419;
  } else {

  }
#line 497
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 499
  return (ok);
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 504
  tmp = get_current();
#line 504
  wait.flags = 0U;
#line 504
  wait.private = (void *)tmp;
#line 504
  wait.func = & autoremove_wake_function;
#line 504
  wait.task_list.next = & wait.task_list;
#line 504
  wait.task_list.prev = & wait.task_list;
#line 508
  goto ldv_45428;
  ldv_45427: 
#line 509
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 510
  spin_unlock_irq(& mdev->req_lock);
#line 511
  drbd_kick_lo(mdev);
#line 512
  schedule();
#line 513
  finish_wait(& mdev->ee_wait, & wait);
#line 514
  spin_lock_irq(& mdev->req_lock);
  ldv_45428: 
#line 508
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 508
  if (tmp___0 == 0) {
#line 509
    goto ldv_45427;
  } else {

  }

#line 513
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 520
  spin_lock_irq(& mdev->req_lock);
#line 521
  _drbd_wait_ee_list_empty(mdev, head);
#line 522
  spin_unlock_irq(& mdev->req_lock);
#line 523
  return;
}
}
#line 527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 530
  sk = sock->sk;
#line 531
  err = 0;
#line 533
  *what = "listen";
#line 534
  err = (*((sock->ops)->listen))(sock, 5);
#line 535
  if (err < 0) {
#line 536
    goto out;
  } else {

  }
#line 538
  *what = "sock_create_lite";
#line 539
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 541
  if (err < 0) {
#line 542
    goto out;
  } else {

  }
#line 544
  *what = "accept";
#line 545
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 546
  if (err < 0) {
#line 547
    sock_release(*newsock);
#line 548
    *newsock = 0;
#line 549
    goto out;
  } else {

  }
#line 551
  (*newsock)->ops = sock->ops;
  out: ;
#line 554
  return (err);
}
}
#line 557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 561
  iov.iov_base = buf;
#line 561
  iov.iov_len = size;
#line 565
  msg.msg_name = 0;
#line 565
  msg.msg_namelen = 0;
#line 565
  msg.msg_iov = (struct iovec *)(& iov);
#line 565
  msg.msg_iovlen = 1UL;
#line 565
  msg.msg_control = 0;
#line 565
  msg.msg_controllen = 0UL;
#line 565
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 572
  tmp = current_thread_info___0();
#line 572
  oldfs = tmp->addr_limit;
#line 573
  tmp___0 = current_thread_info___0();
#line 573
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 573
  tmp___0->addr_limit = __constr_expr_0;
#line 574
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 575
  tmp___1 = current_thread_info___0();
#line 575
  tmp___1->addr_limit = oldfs;
#line 577
  return (rv);
}
}
#line 580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 583
  iov.iov_base = buf;
#line 583
  iov.iov_len = size;
#line 587
  msg.msg_name = 0;
#line 587
  msg.msg_namelen = 0;
#line 587
  msg.msg_iov = (struct iovec *)(& iov);
#line 587
  msg.msg_iovlen = 1UL;
#line 587
  msg.msg_control = 0;
#line 587
  msg.msg_controllen = 0UL;
#line 587
  msg.msg_flags = 16640U;
#line 594
  tmp = current_thread_info___0();
#line 594
  oldfs = tmp->addr_limit;
#line 595
  tmp___0 = current_thread_info___0();
#line 595
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 595
  tmp___0->addr_limit = __constr_expr_0;
  ldv_45466: 
#line 598
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 599
  if ((size_t )rv == size) {
#line 600
    goto ldv_45465;
  } else {

  }
#line 607
  if (rv < 0) {
#line 608
    if (rv == -104) {
#line 609
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 610
    if (rv != -512) {
#line 611
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 612
    goto ldv_45465;
  } else
#line 613
  if (rv == 0) {
#line 614
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 615
    goto ldv_45465;
  } else {
#line 621
    goto ldv_45465;
  }
#line 623
  goto ldv_45466;
  ldv_45465: 
#line 625
  tmp___1 = current_thread_info___0();
#line 625
  tmp___1->addr_limit = oldfs;
#line 627
  if ((size_t )rv != size) {
#line 628
    val.i = 0U;
#line 628
    val.ldv_35532.conn = 4U;
#line 628
    mask.i = 0U;
#line 628
    mask.ldv_35532.conn = 31U;
#line 628
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 630
  return (rv);
}
}
#line 638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 642
  if (snd != 0U) {
#line 643
    (sock->sk)->sk_sndbuf = (int )snd;
#line 644
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 646
  if (rcv != 0U) {
#line 647
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 648
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 650
  return;
}
}
#line 652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 658
  disconnect_on_error = 1;
#line 660
  tmp = get_net_conf(mdev);
#line 660
  if (tmp == 0) {
#line 661
    return (0);
  } else {

  }
#line 663
  what = "sock_create_kern";
#line 664
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 666
  if (err < 0) {
#line 667
    sock = 0;
#line 668
    goto out;
  } else {

  }
#line 671
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 671
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 671
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 673
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 683
  __min1 = (mdev->net_conf)->my_addr_len;
#line 683
  __min2 = 28;
#line 683
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 683
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 685
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 686
    src_in6.sin6_port = 0U;
  } else {
#line 688
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 690
  what = "bind before connect";
#line 691
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 694
  if (err < 0) {
#line 695
    goto out;
  } else {

  }
#line 699
  disconnect_on_error = 0;
#line 700
  what = "connect";
#line 701
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 706
  if (err < 0) {
#line 707
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 708
      sock_release(sock);
#line 709
      sock = 0;
    } else {

    }
#line 711
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 718
    disconnect_on_error = 0;
#line 719
    goto ldv_45503;
    default: 
#line 721
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_45503: ;
#line 723
    if (disconnect_on_error != 0) {
#line 724
      val.i = 0U;
#line 724
      val.ldv_35532.conn = 1U;
#line 724
      mask.i = 0U;
#line 724
      mask.ldv_35532.conn = 31U;
#line 724
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 726
  put_net_conf(mdev);
#line 727
  return (sock);
}
}
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 733
  s_estab = 0;
#line 736
  tmp = get_net_conf(mdev);
#line 736
  if (tmp == 0) {
#line 737
    return (0);
  } else {

  }
#line 739
  what = "sock_create_kern";
#line 740
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 742
  if (err != 0) {
#line 743
    s_listen = 0;
#line 744
    goto out;
  } else {

  }
#line 747
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 748
  tmp___0 = random32();
#line 748
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 750
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 751
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 752
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 753
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 756
  what = "bind before listen";
#line 757
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 760
  if (err < 0) {
#line 761
    goto out;
  } else {

  }
#line 763
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 766
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 767
    sock_release(s_listen);
  } else {

  }
#line 768
  if (err < 0) {
#line 769
    if ((err != -11 && err != -4) && err != -512) {
#line 770
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 771
      val.i = 0U;
#line 771
      val.ldv_35532.conn = 1U;
#line 771
      mask.i = 0U;
#line 771
      mask.ldv_35532.conn = 31U;
#line 771
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 774
  put_net_conf(mdev);
#line 776
  return (s_estab);
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 782
  h = & mdev->data.sbuf.header.h80;
#line 784
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 784
  return (tmp);
}
}
#line 787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 789
  h = & mdev->data.rbuf.header.h80;
#line 792
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 794
  if (rr == 8 && h->magic == 1728214147U) {
#line 795
    tmp = __fswab16((int )h->command);
#line 795
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 797
  return (65535);
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 810
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 811
    return (0);
  } else {

  }
#line 813
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 815
  if (rr > 0 || rr == -11) {
#line 816
    return (1);
  } else {
#line 818
    sock_release(*sock);
#line 819
    *sock = 0;
#line 820
    return (0);
  }
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  enum drbd_packets tmp___3 ;
  u32 tmp___4 ;
  struct task_struct *tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  int tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 837
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 837
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            837);
  } else {

  }
#line 839
  val.i = 0U;
#line 839
  val.ldv_35532.conn = 8U;
#line 839
  mask.i = 0U;
#line 839
  mask.ldv_35532.conn = 31U;
#line 839
  tmp = drbd_request_state(mdev, mask, val);
#line 839
  if (tmp <= 0) {
#line 840
    return (-2);
  } else {

  }
#line 842
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 844
  sock = 0;
#line 845
  msock = 0;
  ldv_45562: 
#line 848
  try = 0;
  ldv_45554: 
#line 850
  s = drbd_try_connect(mdev);
#line 851
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 852
    goto ldv_45553;
  } else {
#line 851
    try = try + 1;
#line 851
    if (try > 2) {
#line 852
      goto ldv_45553;
    } else {

    }
  }
#line 854
  tmp___0 = get_current();
#line 854
  tmp___0->state = 1L;
#line 855
  schedule_timeout(25L);
#line 856
  goto ldv_45554;
  ldv_45553: ;
#line 858
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 859
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 860
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 861
      sock = s;
#line 862
      s = 0;
    } else
#line 863
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 864
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 865
      msock = s;
#line 866
      s = 0;
    } else {
#line 868
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 869
      goto out_release_sockets;
    }
  } else {

  }
#line 873
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 874
    tmp___1 = get_current();
#line 874
    tmp___1->state = 1L;
#line 875
    schedule_timeout(25L);
#line 876
    ok = drbd_socket_okay(mdev, & sock);
#line 877
    tmp___2 = drbd_socket_okay(mdev, & msock);
#line 877
    ok = tmp___2 != 0 && ok != 0;
#line 878
    if (ok != 0) {
#line 879
      goto ldv_45556;
    } else {

    }
  } else {

  }
  retry: 
#line 883
  s = drbd_wait_for_connect(mdev);
#line 884
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 885
    tmp___3 = drbd_recv_fp(mdev, s);
#line 885
    try = (int )tmp___3;
#line 886
    drbd_socket_okay(mdev, & sock);
#line 887
    drbd_socket_okay(mdev, & msock);
#line 888
    switch (try) {
    case 65522: ;
#line 890
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 892
      sock_release(sock);
    } else {

    }
#line 894
    sock = s;
#line 895
    goto ldv_45559;
    case 65521: ;
#line 897
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 898
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 899
      sock_release(msock);
    } else {

    }
#line 901
    msock = s;
#line 902
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 903
    goto ldv_45559;
    default: 
#line 905
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 906
    sock_release(s);
#line 907
    tmp___4 = random32();
#line 907
    if ((int )tmp___4 & 1) {
#line 908
      goto retry;
    } else {

    }
    }
    ldv_45559: ;
  } else {

  }
#line 912
  if ((int )mdev->state.ldv_35532.conn <= 1) {
#line 913
    goto out_release_sockets;
  } else {

  }
#line 914
  tmp___7 = get_current();
#line 914
  tmp___8 = signal_pending(tmp___7);
#line 914
  if (tmp___8 != 0) {
#line 915
    tmp___5 = get_current();
#line 915
    flush_signals(tmp___5);
#line 916
    __asm__  volatile   ("": : : "memory");
#line 917
    tmp___6 = get_t_state(& mdev->receiver);
#line 917
    if ((unsigned int )tmp___6 == 2U) {
#line 918
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 921
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 922
    ok = drbd_socket_okay(mdev, & sock);
#line 923
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 923
    ok = tmp___9 != 0 && ok != 0;
#line 924
    if (ok != 0) {
#line 925
      goto ldv_45556;
    } else {

    }
  } else {

  }
#line 927
  goto ldv_45562;
  ldv_45556: 
#line 929
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 930
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 932
  (sock->sk)->sk_allocation = 16U;
#line 933
  (msock->sk)->sk_allocation = 16U;
#line 935
  (sock->sk)->sk_priority = 4U;
#line 936
  (msock->sk)->sk_priority = 6U;
#line 943
  tmp___10 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 943
  (sock->sk)->sk_rcvtimeo = tmp___10;
#line 943
  (sock->sk)->sk_sndtimeo = tmp___10;
#line 946
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 947
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 951
  drbd_tcp_nodelay(sock);
#line 952
  drbd_tcp_nodelay(msock);
#line 954
  mdev->data.socket = sock;
#line 955
  mdev->meta.socket = msock;
#line 956
  mdev->last_received = jiffies;
#line 958
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 958
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            958);
  } else {

  }
#line 960
  h = drbd_do_handshake(mdev);
#line 961
  if (h <= 0) {
#line 962
    return (h);
  } else {

  }
#line 964
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 966
    tmp___11 = drbd_do_auth(mdev);
#line 966
    switch (tmp___11) {
    case -1: 
#line 968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 969
    return (-1);
    case 0: 
#line 971
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 972
    return (0);
    }
  } else {

  }
#line 976
  val___0.i = 0U;
#line 976
  val___0.ldv_35532.conn = 9U;
#line 976
  mask___0.i = 0U;
#line 976
  mask___0.ldv_35532.conn = 31U;
#line 976
  tmp___12 = drbd_request_state(mdev, mask___0, val___0);
#line 976
  if (tmp___12 <= 0) {
#line 977
    return (0);
  } else {

  }
#line 979
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 980
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 982
  atomic_set(& mdev->packet_seq, 0);
#line 983
  mdev->peer_seq = 0U;
#line 985
  drbd_thread_start(& mdev->asender);
#line 987
  if (mdev->agreed_pro_version <= 94) {
#line 987
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 987
    if (tmp___13 != 0) {
#line 988
      drbd_setup_queue_param(mdev, 32768U);
#line 989
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 992
  tmp___14 = drbd_send_protocol(mdev);
#line 992
  if (tmp___14 == 0) {
#line 993
    return (-1);
  } else {

  }
#line 994
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 995
  drbd_send_sizes(mdev, 0, 0);
#line 996
  drbd_send_uuids(mdev);
#line 997
  drbd_send_state(mdev);
#line 998
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 999
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 1001
  return (1);
  out_release_sockets: ;
#line 1004
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 1005
    sock_release(sock);
  } else {

  }
#line 1006
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 1007
    sock_release(msock);
  } else {

  }
#line 1008
  return (-1);
}
}
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u16 tmp___4 ;
  __u16 tmp___5 ;
  __u32 tmp___6 ;
  long tmp___7 ;

  {
#line 1013
  h = & mdev->data.rbuf.header;
#line 1016
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 1017
  tmp = __builtin_expect(r != 8, 0L);
#line 1017
  if (tmp != 0L) {
#line 1018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 1019
    return (0);
  } else {

  }
#line 1022
  tmp___7 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 1022
  if (tmp___7 != 0L) {
#line 1023
    tmp___0 = __fswab16((int )h->h80.command);
#line 1023
    *cmd = (enum drbd_packets )tmp___0;
#line 1024
    tmp___1 = __fswab16((int )h->h80.length);
#line 1024
    *packet_size = (unsigned int )tmp___1;
  } else
#line 1025
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1026
    tmp___2 = __fswab16((int )h->h95.command);
#line 1026
    *cmd = (enum drbd_packets )tmp___2;
#line 1027
    tmp___3 = __fswab32(h->h95.length);
#line 1027
    *packet_size = tmp___3;
  } else {
#line 1029
    tmp___4 = __fswab16((int )h->h80.length);
#line 1029
    tmp___5 = __fswab16((int )h->h80.command);
#line 1029
    tmp___6 = __fswab32(h->h80.magic);
#line 1029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___6, (int )tmp___5, (int )tmp___4);
#line 1033
    return (0);
  }
#line 1035
  mdev->last_received = jiffies;
#line 1037
  return (1);
}
}
#line 1040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  int tmp ;
  enum finish_epoch tmp___0 ;

  {
#line 1044
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1044
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1044
    if (tmp != 0) {
#line 1045
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1047
      if (rv != 0) {
#line 1048
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1052
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1054
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1057
  tmp___0 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1057
  return (tmp___0);
}
}
#line 1060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1062
  fw = (struct flush_work *)w;
#line 1063
  epoch = fw->epoch;
#line 1065
  kfree((void const   *)w);
#line 1067
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1067
  if (tmp == 0) {
#line 1068
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1070
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_35532.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1073
  return (1);
}
}
#line 1082 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___8 ;

  {
#line 1088
  schedule_flush = 0;
#line 1089
  rv = FE_STILL_LIVE;
#line 1091
  spin_lock(& mdev->epoch_lock);
  ldv_45610: 
#line 1093
  next_epoch = 0;
#line 1094
  finish = 0;
#line 1096
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1098
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1100
  atomic_dec(& epoch->active);
#line 1101
  goto ldv_45599;
  case 1U: 
#line 1103
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1107
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1107
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1110
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1111
  goto ldv_45599;
  case 2U: 
#line 1113
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1114
  goto ldv_45599;
  case 3U: ;
#line 1117
  goto ldv_45599;
  }
  ldv_45599: ;
#line 1120
  if (epoch_size != 0) {
#line 1120
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1120
    if (tmp___3 == 0) {
#line 1120
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1120
      if (tmp___4 != 0) {
#line 1120
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1120
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1120
          if (tmp___5 == 0) {
#line 1126
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1126
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1130
              finish = 1;
#line 1131
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1126
            if (epoch_size == 1) {
#line 1126
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1126
              if (tmp___2 != 0) {
#line 1130
                finish = 1;
#line 1131
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1126
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1126
            if (((unsigned int )ev & 32U) != 0U) {
#line 1130
              finish = 1;
#line 1131
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1132
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1132
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1134
                atomic_inc(& epoch->active);
#line 1135
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1138
  if (finish != 0) {
#line 1139
    if (((unsigned int )ev & 32U) == 0U) {
#line 1140
      spin_unlock(& mdev->epoch_lock);
#line 1141
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1142
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1144
    atomic_dec(& mdev->unacked_cnt);
#line 1144
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1144
    if (tmp___7 < 0) {
#line 1144
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1144
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "drbd_may_finish_epoch", 1144, tmp___6);
    } else {

    }
#line 1146
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1147
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1147
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1148
      list_del(& epoch->list);
#line 1149
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1150
      mdev->epochs = mdev->epochs - 1U;
#line 1151
      kfree((void const   *)epoch);
#line 1153
      if ((unsigned int )rv == 0U) {
#line 1154
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1156
      epoch->flags = 0UL;
#line 1157
      atomic_set(& epoch->epoch_size, 0);
#line 1159
      if ((unsigned int )rv == 0U) {
#line 1160
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1164
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1165
    goto ldv_45609;
  } else {

  }
#line 1167
  epoch = next_epoch;
#line 1168
  goto ldv_45610;
  ldv_45609: 
#line 1170
  spin_unlock(& mdev->epoch_lock);
#line 1172
  if (schedule_flush != 0) {
#line 1174
    tmp___8 = kmalloc___1(32UL, 32U);
#line 1174
    fw = (struct flush_work *)tmp___8;
#line 1175
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1176
      fw->w.cb = & w_flush;
#line 1177
      fw->epoch = epoch;
#line 1178
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1180
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc a flush_work obj\n");
#line 1181
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1183
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1184
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1188
  return (rv);
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1199
  write_ordering_str[0] = (char *)"none";
#line 1199
  write_ordering_str[1] = (char *)"drain";
#line 1199
  write_ordering_str[2] = (char *)"flush";
#line 1199
  write_ordering_str[3] = (char *)"barrier";
#line 1206
  pwo = mdev->write_ordering;
#line 1207
  _min1 = pwo;
#line 1207
  _min2 = wo;
#line 1207
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1208
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1209
    wo = WO_bdev_flush;
  } else {

  }
#line 1210
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1211
    wo = WO_drain_io;
  } else {

  }
#line 1212
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1213
    wo = WO_none;
  } else {

  }
#line 1214
  mdev->write_ordering = wo;
#line 1215
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1216
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1217
  return;
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1229
  bios = 0;
#line 1231
  page = e->pages;
#line 1232
  sector = e->sector;
#line 1233
  ds = e->size;
#line 1234
  n_bios = 0U;
#line 1235
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1242
  bio = bio_alloc(16U, (int )nr_pages);
#line 1243
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1245
    goto fail;
  } else {

  }
#line 1248
  bio->bi_sector = sector;
#line 1249
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1252
  bio->bi_rw = (unsigned long )rw;
#line 1253
  bio->bi_private = (void *)e;
#line 1254
  bio->bi_end_io = & drbd_endio_sec;
#line 1256
  bio->bi_next = bios;
#line 1257
  bios = bio;
#line 1258
  n_bios = n_bios + 1U;
#line 1260
  goto ldv_45643;
  ldv_45642: 
#line 1261
  __min1 = ds;
#line 1261
  __min2 = 4096U;
#line 1261
  len = __min1 < __min2 ? __min1 : __min2;
#line 1262
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1262
  if (tmp___0 == 0) {
#line 1264
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1264
    if (tmp != 0L) {
#line 1264
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1264), "i" (12UL));
      ldv_45641: ;
#line 1264
      goto ldv_45641;
    } else {

    }
#line 1265
    goto next_bio;
  } else {

  }
#line 1267
  ds = ds - len;
#line 1268
  sector = (sector_t )(len >> 9) + sector;
#line 1269
  nr_pages = nr_pages - 1U;
#line 1260
  page = page_chain_next(page);
  ldv_45643: ;
#line 1260
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1260
    tmp___1 = page_chain_next(page);
#line 1260
    __builtin_prefetch((void const   *)tmp___1);
#line 1260
    if (1 != 0) {
#line 1261
      goto ldv_45642;
    } else {
#line 1263
      goto ldv_45644;
    }
  } else {

  }
  ldv_45644: ;
#line 1271
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1271
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1271);
  } else {

  }
#line 1272
  if (ds != 0U) {
#line 1272
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1272);
  } else {

  }
#line 1274
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_45645: 
#line 1276
  bio = bios;
#line 1277
  bios = bios->bi_next;
#line 1278
  bio->bi_next = 0;
#line 1281
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1282
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1284
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1288
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1289
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffefUL;
  } else {

  }
#line 1290
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1291
    goto ldv_45645;
  } else {

  }
#line 1291
  maybe_kick_lo(mdev);
#line 1292
  return (0);
  fail: ;
#line 1295
  goto ldv_45648;
  ldv_45647: 
#line 1296
  bio = bios;
#line 1297
  bios = bios->bi_next;
#line 1298
  bio_put(bio);
  ldv_45648: ;
#line 1295
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1296
    goto ldv_45647;
  } else {

  }

#line 1300
  return (-12);
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_epoch *tmp ;
  int tmp___0 ;

  {
#line 1311
  e = (struct drbd_epoch_entry *)w;
#line 1322
  tmp = previous_epoch(mdev, e->epoch);
#line 1322
  if ((unsigned long )tmp != (unsigned long )((struct drbd_epoch *)0)) {
#line 1323
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Write ordering was not enforced (one time event)\n");
  } else {

  }
#line 1328
  e->w.cb = & e_end_block;
#line 1329
  tmp___0 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1329
  if (tmp___0 != 0) {
#line 1333
    e->w.cb = & w_e_reissue;
#line 1334
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1336
  return (1);
}
}
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  enum finish_epoch tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  enum finish_epoch tmp___3 ;
  int tmp___4 ;

  {
#line 1342
  p = & mdev->data.rbuf.barrier;
#line 1345
  inc_unacked(mdev);
#line 1347
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1348
    drbd_kick_lo(mdev);
  } else {

  }
#line 1350
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1351
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1351
  rv = (int )tmp;
#line 1358
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1361
  if (rv == 2) {
#line 1362
    return (1);
  } else {

  }
#line 1363
  goto ldv_45667;
  case 2U: ;
  case 1U: ;
#line 1367
  if (rv == 0) {
#line 1368
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1369
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1370
    tmp___0 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1370
    rv = (int )tmp___0;
  } else {

  }
#line 1372
  if (rv == 2) {
#line 1373
    return (1);
  } else {

  }
#line 1378
  goto ldv_45667;
  }
  ldv_45667: 
#line 1383
  tmp___1 = kmalloc___1(40UL, 16U);
#line 1383
  epoch = (struct drbd_epoch *)tmp___1;
#line 1384
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1385
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
#line 1386
    tmp___2 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1386
    issue_flush = tmp___2 == 0;
#line 1387
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1388
    if (issue_flush != 0) {
#line 1389
      tmp___3 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1389
      rv = (int )tmp___3;
#line 1390
      if (rv == 2) {
#line 1391
        return (1);
      } else {

      }
    } else {

    }
#line 1394
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1396
    return (1);
  } else {

  }
#line 1399
  epoch->flags = 0UL;
#line 1400
  atomic_set(& epoch->epoch_size, 0);
#line 1401
  atomic_set(& epoch->active, 0);
#line 1403
  spin_lock(& mdev->epoch_lock);
#line 1404
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1404
  if (tmp___4 != 0) {
#line 1405
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1406
    mdev->current_epoch = epoch;
#line 1407
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1410
    kfree((void const   *)epoch);
  }
#line 1412
  spin_unlock(& mdev->epoch_lock);
#line 1414
  return (1);
}
}
#line 1420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1422
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1422
  capacity = tmp;
#line 1426
  dig_in = mdev->int_dig_in;
#line 1427
  dig_vv = mdev->int_dig_vv;
#line 1430
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1430
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1430
    dgs = (int )tmp___0;
  } else {
#line 1430
    dgs = 0;
  }
#line 1433
  if (dgs != 0) {
#line 1434
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1435
    if (rr != dgs) {
#line 1436
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1438
      return (0);
    } else {

    }
  } else {

  }
#line 1442
  data_size = data_size - dgs;
#line 1444
  _b = (data_size & 511) != 0;
#line 1444
  if (_b != 0) {
#line 1444
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1444);
  } else {

  }
#line 1444
  if (_b != 0) {
#line 1444
    return (0);
  } else {

  }
#line 1445
  _b___0 = (unsigned int )data_size > 131072U;
#line 1445
  if (_b___0 != 0) {
#line 1445
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1445);
  } else {

  }
#line 1445
  if (_b___0 != 0) {
#line 1445
    return (0);
  } else {

  }
#line 1449
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1453
    return (0);
  } else {

  }
#line 1459
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1460
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1461
    return (0);
  } else {

  }
#line 1463
  ds = data_size;
#line 1464
  page = e->pages;
#line 1465
  goto ldv_45696;
  ldv_45695: 
#line 1466
  __min1 = ds;
#line 1466
  __min2 = 4096;
#line 1466
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1467
  tmp___1 = kmap(page);
#line 1467
  data = (unsigned long *)tmp___1;
#line 1468
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1469
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1469
  if (tmp___2 != 0) {
#line 1470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1471
    *data = ~ *data;
  } else {

  }
#line 1473
  kunmap(page);
#line 1474
  if ((unsigned int )rr != len) {
#line 1475
    drbd_free_some_ee(mdev, e, 0);
#line 1476
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1478
    return (0);
  } else {

  }
#line 1480
  ds = ds - rr;
#line 1465
  page = page_chain_next(page);
  ldv_45696: ;
#line 1465
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1465
    tmp___3 = page_chain_next(page);
#line 1465
    __builtin_prefetch((void const   *)tmp___3);
#line 1465
    if (1 != 0) {
#line 1466
      goto ldv_45695;
    } else {
#line 1468
      goto ldv_45697;
    }
  } else {

  }
  ldv_45697: ;
#line 1483
  if (dgs != 0) {
#line 1484
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1485
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1485
    if (tmp___4 != 0) {
#line 1486
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1487
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1489
      drbd_free_some_ee(mdev, e, 0);
#line 1490
      return (0);
    } else {

    }
  } else {

  }
#line 1493
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1494
  return (e);
}
}
#line 1500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1503
  rv = 1;
#line 1506
  if (data_size == 0) {
#line 1507
    return (1);
  } else {

  }
#line 1509
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1511
  data = kmap(page);
#line 1512
  goto ldv_45717;
  ldv_45716: 
#line 1513
  __min1 = data_size;
#line 1513
  __min2 = 4096;
#line 1513
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1514
  __min1___1 = data_size;
#line 1514
  __min2___1 = 4096;
#line 1514
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1515
    rv = 0;
#line 1517
    __min1___0 = data_size;
#line 1517
    __min2___0 = 4096;
#line 1517
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1518
    goto ldv_45715;
  } else {

  }
#line 1520
  data_size = data_size - rr;
  ldv_45717: ;
#line 1512
  if (data_size != 0) {
#line 1513
    goto ldv_45716;
  } else {

  }
  ldv_45715: 
#line 1522
  kunmap(page);
#line 1523
  drbd_pp_free(mdev, page, 0);
#line 1524
  return (rv);
}
}
#line 1527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1533
  dig_in = mdev->int_dig_in;
#line 1534
  dig_vv = mdev->int_dig_vv;
#line 1536
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1536
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1536
    dgs = (int )tmp;
  } else {
#line 1536
    dgs = 0;
  }
#line 1539
  if (dgs != 0) {
#line 1540
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1541
    if (rr != dgs) {
#line 1542
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1544
      return (0);
    } else {

    }
  } else {

  }
#line 1548
  data_size = data_size - dgs;
#line 1552
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1554
  bio = req->master_bio;
#line 1555
  if (bio->bi_sector != sector) {
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1555);
  } else {

  }
#line 1557
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1557
  i = (int )bio->bi_idx;
#line 1557
  goto ldv_45736;
  ldv_45735: 
#line 1558
  __min1 = data_size;
#line 1558
  __min2 = (int )bvec->bv_len;
#line 1558
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1559
  tmp___0 = kmap(bvec->bv_page);
#line 1559
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1562
  kunmap(bvec->bv_page);
#line 1563
  if (rr != expect) {
#line 1564
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1567
    return (0);
  } else {

  }
#line 1569
  data_size = data_size - rr;
#line 1557
  bvec = bvec + 1;
#line 1557
  i = i + 1;
  ldv_45736: ;
#line 1557
  if ((int )bio->bi_vcnt > i) {
#line 1558
    goto ldv_45735;
  } else {

  }

#line 1572
  if (dgs != 0) {
#line 1573
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1574
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1574
    if (tmp___1 != 0) {
#line 1575
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1576
      return (0);
    } else {

    }
  } else {

  }
#line 1580
  if (data_size != 0) {
#line 1580
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1580);
  } else {

  }
#line 1581
  return (1);
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1588
  e = (struct drbd_epoch_entry *)w;
#line 1589
  sector = e->sector;
#line 1592
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1592
  if (tmp == 0) {
#line 1592
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1592);
  } else {

  }
#line 1594
  tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1594
  if (tmp___0 != 0L) {
#line 1595
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1595U);
#line 1596
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1599
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1601
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1603
  atomic_dec(& mdev->unacked_cnt);
#line 1603
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1603
  if (tmp___2 < 0) {
#line 1603
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1603
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1603, tmp___1);
  } else {

  }
#line 1605
  return (ok);
}
}
#line 1608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1612
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1613
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1614
    goto fail;
  } else {

  }
#line 1616
  atomic_dec(& mdev->rs_pending_cnt);
#line 1616
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1616
  if (tmp___0 < 0) {
#line 1616
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1616
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1616, tmp);
  } else {

  }
#line 1618
  inc_unacked(mdev);
#line 1622
  e->w.cb = & e_end_resync_block;
#line 1624
  spin_lock_irq(& mdev->req_lock);
#line 1625
  list_add(& e->w.list, & mdev->sync_ee);
#line 1626
  spin_unlock_irq(& mdev->req_lock);
#line 1628
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1629
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1629
  if (tmp___1 == 0) {
#line 1630
    return (1);
  } else {

  }
#line 1635
  spin_lock_irq(& mdev->req_lock);
#line 1636
  list_del(& e->w.list);
#line 1637
  spin_unlock_irq(& mdev->req_lock);
#line 1639
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1641
  put_ldev(mdev);
#line 1642
  return (0);
}
}
#line 1645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1650
  p = & mdev->data.rbuf.data;
#line 1652
  tmp = __fswab64(p->sector);
#line 1652
  sector = (sector_t )tmp;
#line 1654
  spin_lock_irq(& mdev->req_lock);
#line 1655
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1656
  spin_unlock_irq(& mdev->req_lock);
#line 1657
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1657
  if (tmp___0 != 0L) {
#line 1658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1659
    return (0);
  } else {

  }
#line 1665
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1667
  if (ok != 0) {
#line 1668
    req_mod(req, data_received);
  } else {

  }
#line 1673
  return (ok);
}
}
#line 1676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1680
  p = & mdev->data.rbuf.data;
#line 1682
  tmp = __fswab64(p->sector);
#line 1682
  sector = (sector_t )tmp;
#line 1683
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1683);
  } else {

  }
#line 1685
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1685
  if (tmp___1 != 0) {
#line 1689
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1691
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1691
    if (tmp___0 != 0) {
#line 1692
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1694
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1696
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1699
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1701
  return (ok);
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1709
  e = (struct drbd_epoch_entry *)w;
#line 1710
  sector = e->sector;
#line 1712
  ok = 1;
#line 1714
  if ((e->flags & 4UL) != 0UL) {
#line 1715
    epoch = previous_epoch(mdev, e->epoch);
#line 1716
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1717
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1720
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1721
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1721
    if (tmp___0 != 0L) {
#line 1722
      pcmd = ((int )mdev->state.ldv_35532.conn > 15 && (int )mdev->state.ldv_35532.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1726
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1726
      ok = tmp & ok;
#line 1727
      if (pcmd == 23) {
#line 1728
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1728U);
      } else {

      }
    } else {
#line 1730
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1734
    atomic_dec(& mdev->unacked_cnt);
#line 1734
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1734
    if (tmp___2 < 0) {
#line 1734
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1734
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1734, tmp___1);
    } else {

    }
  } else {

  }
#line 1738
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1739
    spin_lock_irq(& mdev->req_lock);
#line 1740
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1740
    if (tmp___3 != 0) {
#line 1740
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1740);
    } else {

    }
#line 1741
    hlist_del_init(& e->colision);
#line 1742
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1744
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1744
    if (tmp___4 == 0) {
#line 1744
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1744);
    } else {

    }
  }
#line 1747
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1749
  return (ok);
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1754
  e = (struct drbd_epoch_entry *)w;
#line 1755
  ok = 1;
#line 1757
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1757
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1757);
  } else {

  }
#line 1758
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1760
  spin_lock_irq(& mdev->req_lock);
#line 1761
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1761
  if (tmp != 0) {
#line 1761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1761);
  } else {

  }
#line 1762
  hlist_del_init(& e->colision);
#line 1763
  spin_unlock_irq(& mdev->req_lock);
#line 1765
  atomic_dec(& mdev->unacked_cnt);
#line 1765
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1765
  if (tmp___1 < 0) {
#line 1765
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1765, tmp___0);
  } else {

  }
#line 1767
  return (ok);
}
}
#line 1791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1793
  tmp = get_current();
#line 1793
  wait.flags = 0U;
#line 1793
  wait.private = (void *)tmp;
#line 1793
  wait.func = & autoremove_wake_function;
#line 1793
  wait.task_list.next = & wait.task_list;
#line 1793
  wait.task_list.prev = & wait.task_list;
#line 1796
  ret = 0;
#line 1797
  spin_lock(& mdev->peer_seq_lock);
  ldv_45813: 
#line 1799
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1800
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1800
  if (tmp___0 <= 0) {
#line 1801
    goto ldv_45812;
  } else {

  }
#line 1802
  tmp___1 = get_current();
#line 1802
  tmp___2 = signal_pending(tmp___1);
#line 1802
  if (tmp___2 != 0) {
#line 1803
    ret = -512;
#line 1804
    goto ldv_45812;
  } else {

  }
#line 1806
  p_seq = mdev->peer_seq;
#line 1807
  spin_unlock(& mdev->peer_seq_lock);
#line 1808
  timeout = schedule_timeout(7500L);
#line 1809
  spin_lock(& mdev->peer_seq_lock);
#line 1810
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1811
    ret = -110;
#line 1812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1813
    goto ldv_45812;
  } else {

  }
#line 1815
  goto ldv_45813;
  ldv_45812: 
#line 1816
  finish_wait(& mdev->seq_wait, & wait);
#line 1817
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1818
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1819
  spin_unlock(& mdev->peer_seq_lock);
#line 1820
  return (ret);
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long write_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1825
  if (mdev->agreed_pro_version > 94) {
#line 1826
    return ((unsigned long )((((((dpf & 2U) != 0U ? 32 : 0) | ((dpf & 8U) != 0U ? 512 : 0)) | ((dpf & 16U) != 0U ? 16384 : 0)) | ((dpf & 32U) != 0U ? 16384 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
  } else {
#line 1832
    return ((dpf & 2U) != 0U ? 544UL : 0UL);
  }
}
}
#line 1836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  __u32 tmp___7 ;
  unsigned long tmp___8 ;
  int size ;
  int discard ;
  int tmp___9 ;
  wait_queue_t wait ;
  struct task_struct *tmp___10 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___11 ;
  long tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  struct hlist_head *tmp___15 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  struct hlist_node  const  *__mptr___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 1840
  p = & mdev->data.rbuf.data;
#line 1841
  rw = 1;
#line 1844
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1844
  if (tmp___2 == 0) {
#line 1845
    tmp = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1845
    if (tmp != 0) {
#line 1846
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1848
    spin_lock(& mdev->peer_seq_lock);
#line 1849
    tmp___0 = __fswab32(p->seq_num);
#line 1849
    if (mdev->peer_seq + 1U == tmp___0) {
#line 1850
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1851
    spin_unlock(& mdev->peer_seq_lock);
#line 1853
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1854
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1855
    tmp___1 = drbd_drain_block(mdev, (int )data_size);
#line 1855
    return (tmp___1);
  } else {

  }
#line 1863
  tmp___3 = __fswab64(p->sector);
#line 1863
  sector = (sector_t )tmp___3;
#line 1864
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1865
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1866
    put_ldev(mdev);
#line 1867
    return (0);
  } else {

  }
#line 1870
  e->w.cb = & e_end_block;
#line 1872
  spin_lock(& mdev->epoch_lock);
#line 1873
  e->epoch = mdev->current_epoch;
#line 1874
  atomic_inc(& (e->epoch)->epoch_size);
#line 1875
  atomic_inc(& (e->epoch)->active);
#line 1877
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1877
    tmp___6 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1877
    if (tmp___6 == 1) {
#line 1882
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1882
      epoch = (struct drbd_epoch *)__mptr;
#line 1883
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1884
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1885
        rw = rw | 16;
#line 1886
        e->flags = e->flags | 4UL;
      } else {
#line 1888
        tmp___4 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1888
        if (tmp___4 > 1) {
#line 1890
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1891
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1892
          rw = rw | 16;
#line 1893
          e->flags = e->flags | 4UL;
        } else {
#line 1888
          tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1888
          if (tmp___5 == 0) {
#line 1890
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1891
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1892
            rw = rw | 16;
#line 1893
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1897
  spin_unlock(& mdev->epoch_lock);
#line 1899
  tmp___7 = __fswab32(p->dp_flags);
#line 1899
  dp_flags = tmp___7;
#line 1900
  tmp___8 = write_flags_to_bio(mdev, dp_flags);
#line 1900
  rw = (int )((unsigned int )tmp___8 | (unsigned int )rw);
#line 1902
  if ((dp_flags & 4U) != 0U) {
#line 1903
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1906
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1907
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1911
    size = (int const   )e->size;
#line 1912
    tmp___9 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1912
    discard = tmp___9;
#line 1913
    tmp___10 = get_current();
#line 1913
    wait.flags = 0U;
#line 1913
    wait.private = (void *)tmp___10;
#line 1913
    wait.func = & autoremove_wake_function;
#line 1913
    wait.task_list.next = & wait.task_list;
#line 1913
    wait.task_list.prev = & wait.task_list;
#line 1919
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1919
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1919);
    } else {

    }
#line 1920
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1920
    if (tmp___11 != 0L) {
#line 1920
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1920), "i" (12UL));
      ldv_45839: ;
#line 1920
      goto ldv_45839;
    } else {

    }
#line 1921
    tmp___12 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1921
    if (tmp___12 != 0L) {
#line 1921
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1921), "i" (12UL));
      ldv_45840: ;
#line 1921
      goto ldv_45840;
    } else {

    }
#line 1957
    tmp___13 = __fswab32(p->seq_num);
#line 1957
    tmp___14 = drbd_wait_peer_seq(mdev, tmp___13);
#line 1957
    if (tmp___14 != 0) {
#line 1958
      goto out_interrupted;
    } else {

    }
#line 1960
    spin_lock_irq(& mdev->req_lock);
#line 1962
    tmp___15 = ee_hash_slot(mdev, sector);
#line 1962
    hlist_add_head(& e->colision, tmp___15);
#line 1965
    slot = tl_hash_slot(mdev, sector);
#line 1966
    first = 1;
    ldv_45852: 
#line 1968
    have_unacked = 0;
#line 1969
    have_conflict = 0;
#line 1970
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1972
    n = slot->first;
#line 1972
    goto ldv_45849;
    ldv_45848: 
#line 1973
    tmp___18 = overlaps(i->sector, (int )i->size, sector, size);
#line 1973
    if (tmp___18 != 0) {
#line 1976
      if (first != 0) {
#line 1977
        tmp___16 = get_current();
#line 1977
        tmp___17 = get_current();
#line 1977
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___17->comm), tmp___16->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1982
      if ((i->rq_state & 8UL) != 0UL) {
#line 1983
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1984
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1972
    n = n->next;
    ldv_45849: ;
#line 1972
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1972
      __builtin_prefetch((void const   *)n->next);
#line 1972
      if (1 != 0) {
#line 1972
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1972
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1972
        if (1 != 0) {
#line 1973
          goto ldv_45848;
        } else {
#line 1975
          goto ldv_45850;
        }
      } else {
#line 1975
        goto ldv_45850;
      }
    } else {

    }
    ldv_45850: ;
#line 1988
    if (have_conflict == 0) {
#line 1989
      goto ldv_45851;
    } else {

    }
#line 1992
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1993
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1995
      inc_unacked(mdev);
#line 1996
      e->w.cb = & e_send_discard_ack;
#line 1997
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1999
      spin_unlock_irq(& mdev->req_lock);
#line 2004
      put_ldev(mdev);
#line 2005
      wake_asender(mdev);
#line 2006
      finish_wait(& mdev->misc_wait, & wait);
#line 2007
      return (1);
    } else {

    }
#line 2010
    tmp___19 = get_current();
#line 2010
    tmp___20 = signal_pending(tmp___19);
#line 2010
    if (tmp___20 != 0) {
#line 2011
      hlist_del_init(& e->colision);
#line 2013
      spin_unlock_irq(& mdev->req_lock);
#line 2015
      finish_wait(& mdev->misc_wait, & wait);
#line 2016
      goto out_interrupted;
    } else {

    }
#line 2019
    spin_unlock_irq(& mdev->req_lock);
#line 2020
    if (first != 0) {
#line 2021
      first = 0;
#line 2022
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 2024
    if (discard != 0) {
#line 2027
      if (have_unacked != 0) {
#line 2027
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2027);
      } else {

      }
    } else {

    }
#line 2029
    schedule();
#line 2030
    spin_lock_irq(& mdev->req_lock);
#line 2031
    goto ldv_45852;
    ldv_45851: 
#line 2032
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 2035
  list_add(& e->w.list, & mdev->active_ee);
#line 2036
  spin_unlock_irq(& mdev->req_lock);
#line 2038
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 2040
  inc_unacked(mdev);
#line 2043
  goto ldv_45854;
  case 2: 
#line 2047
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2048
  goto ldv_45854;
  case 1: ;
#line 2051
  goto ldv_45854;
  }
  ldv_45854: ;
#line 2054
  if (*((unsigned int *)mdev + 503UL) == 0U) {
#line 2056
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2056U);
#line 2057
    e->flags = e->flags | 1UL;
#line 2058
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2061
  tmp___21 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2061
  if (tmp___21 == 0) {
#line 2062
    return (1);
  } else {

  }
#line 2067
  spin_lock_irq(& mdev->req_lock);
#line 2068
  list_del(& e->w.list);
#line 2069
  hlist_del_init(& e->colision);
#line 2070
  spin_unlock_irq(& mdev->req_lock);
#line 2071
  if ((int )e->flags & 1) {
#line 2072
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 2078
  put_ldev(mdev);
#line 2079
  drbd_free_some_ee(mdev, e, 0);
#line 2080
  return (0);
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  int curr_events ;
  int throttle ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___0 ;

  {
#line 2096
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 2099
  throttle = 0;
#line 2102
  if (mdev->sync_conf.c_min_rate == 0) {
#line 2103
    return (0);
  } else {

  }
#line 2105
  res = 0UL;
#line 2105
  _cpu = 4294967295U;
#line 2105
  goto ldv_45873;
  ldv_45872: 
#line 2105
  __vpp_verify = 0;
#line 2105
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2105
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_45873: 
#line 2105
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2105
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2106
    goto ldv_45872;
  } else {

  }
#line 2106
  res___0 = 0UL;
#line 2106
  _cpu___0 = 4294967295U;
#line 2106
  goto ldv_45883;
  ldv_45882: 
#line 2106
  __vpp_verify___0 = 0;
#line 2106
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2106
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_45883: 
#line 2106
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2106
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2107
    goto ldv_45882;
  } else {

  }
#line 2106
  tmp = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2106
  curr_events = ((int )res + (int )res___0) - tmp;
#line 2108
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2112
    mdev->rs_last_events = curr_events;
#line 2116
    i = (mdev->rs_last_mark + 6) % 8;
#line 2117
    tmp___0 = drbd_bm_total_weight(mdev);
#line 2117
    rs_left = tmp___0 - mdev->rs_failed;
#line 2119
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2120
    if (dt == 0UL) {
#line 2121
      dt = dt + 1UL;
    } else {

    }
#line 2122
    db = mdev->rs_mark_left[i] - rs_left;
#line 2123
    dbdt = db / dt << 2;
#line 2125
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2126
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2128
  return (throttle);
}
}
#line 2132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 2135
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2135
  capacity = tmp;
#line 2137
  di = 0;
#line 2140
  p = & mdev->data.rbuf.block_req;
#line 2142
  tmp___0 = __fswab64(p->sector);
#line 2142
  sector = (sector_t )tmp___0;
#line 2143
  tmp___1 = __fswab32(p->blksize);
#line 2143
  size = (int )tmp___1;
#line 2145
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2146, (unsigned long long )sector, size);
#line 2148
    return (0);
  } else {

  }
#line 2150
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2151, (unsigned long long )sector, size);
#line 2153
    return (0);
  } else {

  }
#line 2156
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2156
  if (tmp___7 == 0) {
#line 2157
    verb = 1;
#line 2158
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2160
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2161
    goto ldv_45902;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2165
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2166
    goto ldv_45902;
    case 31U: 
#line 2168
    verb = 0;
#line 2169
    atomic_dec(& mdev->rs_pending_cnt);
#line 2169
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2169
    if (tmp___3 < 0) {
#line 2169
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2169
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2169, tmp___2);
    } else {

    }
#line 2170
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2171
    goto ldv_45902;
    default: 
#line 2173
    tmp___4 = cmdname(cmd);
#line 2173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_45902: ;
#line 2176
    if (verb != 0) {
#line 2176
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2176
      if (tmp___5 != 0) {
#line 2177
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2181
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2181
    return (tmp___6);
  } else {

  }
#line 2187
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2188
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2189
    put_ldev(mdev);
#line 2190
    return (0);
  } else {

  }
#line 2193
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2195
  e->w.cb = & w_e_end_data_req;
#line 2196
  fault_type = 5U;
#line 2198
  goto submit;
  case 9U: 
#line 2201
  e->w.cb = & w_e_end_rsdata_req;
#line 2202
  fault_type = 3U;
#line 2203
  goto ldv_45915;
  case 31U: ;
  case 33U: 
#line 2207
  fault_type = 3U;
#line 2208
  tmp___8 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2208
  di = (struct digest_info *)tmp___8;
#line 2209
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2210
    goto out_free_e;
  } else {

  }
#line 2212
  di->digest_size = (int )digest_size;
#line 2213
  di->digest = (void *)di + 16U;
#line 2215
  e->ldv_42956.digest = di;
#line 2216
  e->flags = e->flags | 32UL;
#line 2218
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2218
  if ((unsigned int )tmp___9 != digest_size) {
#line 2219
    goto out_free_e;
  } else {

  }
#line 2221
  if ((unsigned int )cmd == 33U) {
#line 2222
    if (mdev->agreed_pro_version <= 88) {
#line 2222
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2222);
    } else {

    }
#line 2223
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2224
  if ((unsigned int )cmd == 31U) {
#line 2225
    e->w.cb = & w_e_end_ov_reply;
#line 2226
    atomic_dec(& mdev->rs_pending_cnt);
#line 2226
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2226
    if (tmp___11 < 0) {
#line 2226
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2226
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2226, tmp___10);
    } else {

    }
#line 2229
    goto submit_for_resync;
  } else {

  }
#line 2231
  goto ldv_45915;
  case 30U: ;
#line 2234
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2236
    mdev->ov_start_sector = sector;
#line 2237
    mdev->ov_position = sector;
#line 2238
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2239
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2242
  e->w.cb = & w_e_end_ov_req;
#line 2243
  fault_type = 3U;
#line 2244
  goto ldv_45915;
  default: 
#line 2247
  tmp___12 = cmdname(cmd);
#line 2247
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___12);
#line 2249
  fault_type = 10U;
#line 2250
  goto out_free_e;
  }
  ldv_45915: ;
#line 2275
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 4U) {
#line 2275
    tmp___13 = drbd_rs_should_slow_down(mdev);
#line 2275
    if (tmp___13 != 0) {
#line 2276
      msleep(100U);
    } else {

    }
  } else {

  }
#line 2277
  tmp___14 = drbd_rs_begin_io(mdev, e->sector);
#line 2277
  if (tmp___14 != 0) {
#line 2278
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2281
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2284
  inc_unacked(mdev);
#line 2285
  spin_lock_irq(& mdev->req_lock);
#line 2286
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2287
  spin_unlock_irq(& mdev->req_lock);
#line 2289
  tmp___15 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2289
  if (tmp___15 == 0) {
#line 2290
    return (1);
  } else {

  }
#line 2295
  spin_lock_irq(& mdev->req_lock);
#line 2296
  list_del(& e->w.list);
#line 2297
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2301
  put_ldev(mdev);
#line 2302
  drbd_free_some_ee(mdev, e, 0);
#line 2303
  return (0);
}
}
#line 2306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2308
  rv = -100;
#line 2311
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2312
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2314
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2315
  ch_self = mdev->comm_bm_set;
#line 2317
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2321
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2322
  goto ldv_45936;
  case 0: ;
#line 2324
  goto ldv_45936;
  case 1: ;
#line 2326
  if (self == 0 && peer == 1) {
#line 2327
    rv = -1;
#line 2328
    goto ldv_45936;
  } else {

  }
#line 2330
  if (self == 1 && peer == 0) {
#line 2331
    rv = 1;
#line 2332
    goto ldv_45936;
  } else {

  }
  case 2: ;
#line 2336
  if (self == 0 && peer == 1) {
#line 2337
    rv = 1;
#line 2338
    goto ldv_45936;
  } else {

  }
#line 2340
  if (self == 1 && peer == 0) {
#line 2341
    rv = -1;
#line 2342
    goto ldv_45936;
  } else {

  }
#line 2345
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2348
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2349
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2349
    rv = tmp != 0 ? -1 : 1;
#line 2351
    goto ldv_45936;
  } else {
#line 2353
    if (ch_peer == 0UL) {
#line 2353
      rv = 1;
#line 2353
      goto ldv_45936;
    } else {

    }
#line 2354
    if (ch_self == 0UL) {
#line 2354
      rv = -1;
#line 2354
      goto ldv_45936;
    } else {

    }
  }
#line 2356
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2357
    goto ldv_45936;
  } else {

  }
  case 4: ;
#line 2359
  if (ch_self < ch_peer) {
#line 2360
    rv = -1;
  } else
#line 2361
  if (ch_self > ch_peer) {
#line 2362
    rv = 1;
  } else {
#line 2365
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2365
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2367
  goto ldv_45936;
  case 5: 
#line 2369
  rv = -1;
#line 2370
  goto ldv_45936;
  case 6: 
#line 2372
  rv = 1;
  }
  ldv_45936: ;
#line 2375
  return (rv);
}
}
#line 2378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2380
  rv = -100;
#line 2382
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2383
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2385
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2391
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2392
  goto ldv_45956;
  case 0: ;
#line 2394
  goto ldv_45956;
  case 7: 
#line 2396
  hg = drbd_asb_recover_0p(mdev);
#line 2397
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 2398
    rv = hg;
  } else {

  }
#line 2399
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2400
    rv = hg;
  } else {

  }
#line 2401
  goto ldv_45956;
  case 10: 
#line 2403
  rv = drbd_asb_recover_0p(mdev);
#line 2404
  goto ldv_45956;
  case 8: ;
#line 2406
  return ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U ? 1 : -1);
  case 9: 
#line 2408
  hg = drbd_asb_recover_0p(mdev);
#line 2409
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2410
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2414
    val.i = 0U;
#line 2414
    val.ldv_35532.role = 2U;
#line 2414
    mask.i = 0U;
#line 2414
    mask.ldv_35532.role = 3U;
#line 2414
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2415
    if (self != 1) {
#line 2416
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2418
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2419
      rv = hg;
    }
  } else {
#line 2422
    rv = hg;
  }
  }
  ldv_45956: ;
#line 2425
  return (rv);
}
}
#line 2428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2430
  rv = -100;
#line 2432
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2433
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2435
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2443
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2444
  goto ldv_45980;
  case 10: 
#line 2446
  rv = drbd_asb_recover_0p(mdev);
#line 2447
  goto ldv_45980;
  case 0: ;
#line 2449
  goto ldv_45980;
  case 9: 
#line 2451
  hg = drbd_asb_recover_0p(mdev);
#line 2452
  if (hg == -1) {
#line 2456
    val.i = 0U;
#line 2456
    val.ldv_35532.role = 2U;
#line 2456
    mask.i = 0U;
#line 2456
    mask.ldv_35532.role = 3U;
#line 2456
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2457
    if (self != 1) {
#line 2458
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2460
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2461
      rv = hg;
    }
  } else {
#line 2464
    rv = hg;
  }
  }
  ldv_45980: ;
#line 2467
  return (rv);
}
}
#line 2470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2473
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2474
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2475
    return;
  } else {

  }
#line 2477
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2478
  return;
}
}
#line 2497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2502
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2503
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2505
  *rule_nr = 10;
#line 2506
  if (self == 4ULL && peer == 4ULL) {
#line 2507
    return (0);
  } else {

  }
#line 2509
  *rule_nr = 20;
#line 2510
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2512
    return (-2);
  } else {

  }
#line 2514
  *rule_nr = 30;
#line 2515
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2517
    return (2);
  } else {

  }
#line 2519
  if (self == peer) {
#line 2522
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2524
      if (mdev->agreed_pro_version <= 90) {
#line 2525
        return (-1001);
      } else {

      }
#line 2527
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2529
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2530
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2532
        if ((int )mdev->state.ldv_35532.disk > 2) {
#line 2532
          tmp = drbd_bm_total_weight(mdev);
#line 2532
          tmp___0 = (u64 )tmp;
        } else {
#line 2532
          tmp___0 = 0ULL;
        }
#line 2532
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2534
        *rule_nr = 34;
      } else {
#line 2536
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2537
        *rule_nr = 36;
      }
#line 2540
      return (1);
    } else {

    }
#line 2543
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2545
      if (mdev->agreed_pro_version <= 90) {
#line 2546
        return (-1001);
      } else {

      }
#line 2548
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2550
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2552
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2553
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2554
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2556
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2557
        *rule_nr = 35;
      } else {
#line 2559
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2560
        *rule_nr = 37;
      }
#line 2563
      return (-1);
    } else {

    }
#line 2567
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2567
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2571
    *rule_nr = 40;
#line 2573
    switch (rct) {
    case 0: ;
#line 2574
    return (0);
    case 1: ;
#line 2575
    return (1);
    case 2: ;
#line 2576
    return (-1);
    case 3: 
#line 2578
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2579
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2583
  *rule_nr = 50;
#line 2584
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2585
  if (self == peer) {
#line 2586
    return (-1);
  } else {

  }
#line 2588
  *rule_nr = 51;
#line 2589
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2590
  if (self == peer) {
#line 2591
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2592
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2593
    if (self == peer) {
#line 2597
      if (mdev->agreed_pro_version <= 90) {
#line 2598
        return (-1001);
      } else {

      }
#line 2600
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2601
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2602
      return (-1);
    } else {

    }
  } else {

  }
#line 2606
  *rule_nr = 60;
#line 2607
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2608
  i = 2;
#line 2608
  goto ldv_46010;
  ldv_46009: 
#line 2609
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2610
  if (self == peer) {
#line 2611
    return (-2);
  } else {

  }
#line 2608
  i = i + 1;
  ldv_46010: ;
#line 2608
  if (i <= 3) {
#line 2609
    goto ldv_46009;
  } else {

  }
#line 2614
  *rule_nr = 70;
#line 2615
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2616
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2617
  if (self == peer) {
#line 2618
    return (1);
  } else {

  }
#line 2620
  *rule_nr = 71;
#line 2621
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2622
  if (self == peer) {
#line 2623
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2624
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2625
    if (self == peer) {
#line 2629
      if (mdev->agreed_pro_version <= 90) {
#line 2630
        return (-1001);
      } else {

      }
#line 2632
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2633
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2635
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2637
      if ((int )mdev->state.ldv_35532.disk > 2) {
#line 2637
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2637
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2637
        tmp___3 = 0ULL;
      }
#line 2637
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2640
      return (1);
    } else {

    }
  } else {

  }
#line 2645
  *rule_nr = 80;
#line 2646
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2647
  i = 2;
#line 2647
  goto ldv_46013;
  ldv_46012: 
#line 2648
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2649
  if (self == peer) {
#line 2650
    return (2);
  } else {

  }
#line 2647
  i = i + 1;
  ldv_46013: ;
#line 2647
  if (i <= 3) {
#line 2648
    goto ldv_46012;
  } else {

  }
#line 2653
  *rule_nr = 90;
#line 2654
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2655
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2656
  if (self == peer && self != 0ULL) {
#line 2657
    return (100);
  } else {

  }
#line 2659
  *rule_nr = 100;
#line 2660
  i = 2;
#line 2660
  goto ldv_46019;
  ldv_46018: 
#line 2661
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2662
  j = 2;
#line 2662
  goto ldv_46016;
  ldv_46015: 
#line 2663
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2664
  if (self == peer) {
#line 2665
    return (-100);
  } else {

  }
#line 2662
  j = j + 1;
  ldv_46016: ;
#line 2662
  if (j <= 3) {
#line 2663
    goto ldv_46015;
  } else {

  }
#line 2660
  i = i + 1;
  ldv_46019: ;
#line 2660
  if (i <= 3) {
#line 2661
    goto ldv_46018;
  } else {

  }

#line 2669
  return (-1000);
}
}
#line 2675 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2679
  rv = C_MASK;
#line 2682
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35532.disk;
#line 2683
  if ((unsigned int )mydisk == 3U) {
#line 2684
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35532.disk;
  } else {

  }
#line 2686
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2687
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2688
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2691
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2693
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2695
  if (hg == -1000) {
#line 2696
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2697
    return (C_MASK);
  } else {

  }
#line 2699
  if (hg == -1001) {
#line 2700
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2701
    return (C_MASK);
  } else {

  }
#line 2704
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2706
    if (hg == -100) {
#line 2706
      tmp = 1;
    } else {
#line 2706
      __x = (long )hg;
#line 2706
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2706
        tmp = 1;
      } else {
#line 2706
        tmp = 0;
      }
    }
#line 2706
    f = tmp;
#line 2707
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2708
    if (f != 0) {
#line 2709
      hg = hg * 2;
    } else {

    }
#line 2710
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2714
  __x___0 = (long )hg;
#line 2714
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2715
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2717
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2718
    pcount = ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2720
    forced = hg == -100;
#line 2722
    switch (pcount) {
    case 0: 
#line 2724
    hg = drbd_asb_recover_0p(mdev);
#line 2725
    goto ldv_46038;
    case 1: 
#line 2727
    hg = drbd_asb_recover_1p(mdev);
#line 2728
    goto ldv_46038;
    case 2: 
#line 2730
    hg = drbd_asb_recover_2p(mdev);
#line 2731
    goto ldv_46038;
    }
    ldv_46038: 
#line 2733
    __x___1 = (long )hg;
#line 2733
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2734
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2737
      if (forced != 0) {
#line 2738
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2740
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2745
  if (hg == -100) {
#line 2746
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2747
      hg = -1;
    } else {

    }
#line 2748
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2749
      hg = 1;
    } else {

    }
#line 2751
    __x___2 = (long )hg;
#line 2751
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2752
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2757
  if (hg == -100) {
#line 2762
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2763
    drbd_khelper(mdev, (char *)"split-brain");
#line 2764
    return (C_MASK);
  } else {

  }
#line 2767
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2769
    return (C_MASK);
  } else {

  }
#line 2772
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && (int )mdev->state.ldv_35532.disk > 6) {
#line 2774
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2776
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2779
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2780
    return (C_MASK);
    case 10: 
#line 2782
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2787
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2787
    goto _L;
  } else {
#line 2787
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2787
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2788
      if (hg == 0) {
#line 2789
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2791
        __x___3 = (long )hg;
#line 2791
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2791
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2794
      return (C_MASK);
    } else {

    }
  }
#line 2797
  __x___4 = (long )hg;
#line 2797
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2798
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2799
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2799
    if (tmp___2 != 0) {
#line 2800
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2803
  if (hg > 0) {
#line 2804
    rv = C_WF_BITMAP_S;
  } else
#line 2805
  if (hg < 0) {
#line 2806
    rv = C_WF_BITMAP_T;
  } else {
#line 2808
    rv = C_CONNECTED;
#line 2809
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2809
    if (tmp___4 != 0UL) {
#line 2810
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2810
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2815
  return (rv);
}
}
#line 2819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2822
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2824
    return (0);
  } else {

  }
#line 2827
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2829
    return (1);
  } else {

  }
#line 2832
  if ((unsigned int )peer == (unsigned int )self) {
#line 2833
    return (0);
  } else {

  }
#line 2836
  return (1);
}
}
#line 2839 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2841
  p = & mdev->data.rbuf.protocol;
#line 2844
  p_integrity_alg[0] = '\000';
#line 2844
  tmp = 1U;
#line 2844
  while (1) {
#line 2844
    if (tmp >= 64U) {
#line 2844
      break;
    } else {

    }
#line 2844
    p_integrity_alg[tmp] = (char)0;
#line 2844
    tmp = tmp + 1U;
  }
#line 2846
  tmp___0 = __fswab32(p->protocol);
#line 2846
  p_proto = (int )tmp___0;
#line 2847
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2847
  p_after_sb_0p = (int )tmp___1;
#line 2848
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2848
  p_after_sb_1p = (int )tmp___2;
#line 2849
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2849
  p_after_sb_2p = (int )tmp___3;
#line 2850
  tmp___4 = __fswab32(p->two_primaries);
#line 2850
  p_two_primaries = (int )tmp___4;
#line 2851
  tmp___5 = __fswab32(p->conn_flags);
#line 2851
  cf = (int )tmp___5;
#line 2852
  p_want_lose = cf & 1;
#line 2854
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2856
  if ((cf & 2) != 0) {
#line 2857
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2859
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2860
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2861
    goto disconnect;
  } else {

  }
#line 2864
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2864
  if (tmp___6 != 0) {
#line 2865
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2866
    goto disconnect;
  } else {

  }
#line 2869
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2869
  if (tmp___7 != 0) {
#line 2870
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2871
    goto disconnect;
  } else {

  }
#line 2874
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2874
  if (tmp___8 != 0) {
#line 2875
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2876
    goto disconnect;
  } else {

  }
#line 2879
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2881
    goto disconnect;
  } else {

  }
#line 2884
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2885
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2886
    goto disconnect;
  } else {

  }
#line 2889
  if (mdev->agreed_pro_version > 86) {
#line 2890
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2892
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2892
    if ((unsigned int )tmp___9 != data_size) {
#line 2893
      return (0);
    } else {

    }
#line 2895
    p_integrity_alg[63] = 0;
#line 2896
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2896
    if (tmp___10 != 0) {
#line 2897
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2898
      goto disconnect;
    } else {

    }
#line 2900
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2904
  return (1);
  disconnect: 
#line 2907
  val.i = 0U;
#line 2907
  val.ldv_35532.conn = 1U;
#line 2907
  mask.i = 0U;
#line 2907
  mask.ldv_35532.conn = 31U;
#line 2907
  drbd_force_state(mdev, mask, val);
#line 2908
  return (0);
}
}
#line 2916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2921
  if ((int )((signed char )*alg) == 0) {
#line 2922
    return (0);
  } else {

  }
#line 2924
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2925
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2925
  if (tmp___0 != 0L) {
#line 2926
    tmp = PTR_ERR((void const   *)tfm);
#line 2926
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2928
    return (tfm);
  } else {

  }
#line 2930
  tmp___2 = crypto_hash_tfm(tfm);
#line 2930
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2930
  if (tmp___3 == 0) {
#line 2931
    crypto_free_hash(tfm);
#line 2932
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2933
    tmp___1 = ERR_PTR(-22L);
#line 2933
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2935
  return (tfm);
}
}
#line 2938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2940
  ok = 1;
#line 2941
  p = & mdev->data.rbuf.rs_param_95;
#line 2943
  verify_tfm = 0;
#line 2944
  csums_tfm = 0;
#line 2945
  apv = mdev->agreed_pro_version;
#line 2946
  rs_plan_s = 0;
#line 2947
  fifo_size = 0;
#line 2949
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2955
  if (packet_size > exp_max_sz) {
#line 2956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2958
    return (0);
  } else {

  }
#line 2961
  if (apv <= 88) {
#line 2962
    header_size = 4U;
#line 2963
    data_size = packet_size - header_size;
  } else
#line 2964
  if (apv <= 94) {
#line 2965
    header_size = 132U;
#line 2966
    data_size = packet_size - header_size;
#line 2967
    if (data_size != 0U) {
#line 2967
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2967);
    } else {

    }
  } else {
#line 2969
    header_size = 148U;
#line 2970
    data_size = packet_size - header_size;
#line 2971
    if (data_size != 0U) {
#line 2971
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2971);
    } else {

    }
  }
#line 2975
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2977
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2977
  if ((unsigned int )tmp != header_size) {
#line 2978
    return (0);
  } else {

  }
#line 2980
  tmp___0 = __fswab32(p->rate);
#line 2980
  mdev->sync_conf.rate = (int )tmp___0;
#line 2982
  if (apv > 87) {
#line 2983
    if (apv == 88) {
#line 2984
      if (data_size > 64U) {
#line 2985
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2988
        return (0);
      } else {

      }
#line 2991
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2991
      if ((unsigned int )tmp___1 != data_size) {
#line 2992
        return (0);
      } else {

      }
#line 2996
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2996
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2996);
      } else {

      }
#line 2997
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 3002
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 3002
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                3002);
      } else {

      }
#line 3003
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 3003
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                3003);
      } else {

      }
#line 3004
      p->verify_alg[63] = 0;
#line 3005
      p->csums_alg[63] = 0;
    }
#line 3008
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 3008
    if (tmp___3 != 0) {
#line 3009
      if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 3010
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 3012
        goto disconnect;
      } else {

      }
#line 3014
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 3016
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 3016
      if (tmp___2 != 0L) {
#line 3017
        verify_tfm = 0;
#line 3018
        goto disconnect;
      } else {

      }
    } else {

    }
#line 3022
    if (apv > 88) {
#line 3022
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 3022
      if (tmp___5 != 0) {
#line 3023
        if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 3024
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 3026
          goto disconnect;
        } else {

        }
#line 3028
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 3030
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 3030
        if (tmp___4 != 0L) {
#line 3031
          csums_tfm = 0;
#line 3032
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 3036
    if (apv > 94) {
#line 3037
      tmp___6 = __fswab32(p->rate);
#line 3037
      mdev->sync_conf.rate = (int )tmp___6;
#line 3038
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 3038
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 3039
      tmp___8 = __fswab32(p->c_delay_target);
#line 3039
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 3040
      tmp___9 = __fswab32(p->c_fill_target);
#line 3040
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 3041
      tmp___10 = __fswab32(p->c_max_rate);
#line 3041
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 3043
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 3044
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 3045
        tmp___11 = kzalloc___0((unsigned long )fifo_size * 4UL, 208U);
#line 3045
        rs_plan_s = (int *)tmp___11;
#line 3046
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 3047
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 3048
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 3053
    spin_lock(& mdev->peer_seq_lock);
#line 3055
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3056
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 3057
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 3057
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 3058
      crypto_free_hash(mdev->verify_tfm);
#line 3059
      mdev->verify_tfm = verify_tfm;
#line 3060
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 3062
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3063
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 3064
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 3064
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 3065
      crypto_free_hash(mdev->csums_tfm);
#line 3066
      mdev->csums_tfm = csums_tfm;
#line 3067
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 3069
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 3070
      kfree((void const   *)mdev->rs_plan_s.values);
#line 3071
      mdev->rs_plan_s.values = rs_plan_s;
#line 3072
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 3073
      mdev->rs_planed = 0;
    } else {

    }
#line 3075
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 3078
  return (ok);
  disconnect: 
#line 3082
  crypto_free_hash(csums_tfm);
#line 3084
  crypto_free_hash(verify_tfm);
#line 3085
  val.i = 0U;
#line 3085
  val.ldv_35532.conn = 1U;
#line 3085
  mask.i = 0U;
#line 3085
  mask.ldv_35532.conn = 31U;
#line 3085
  drbd_force_state(mdev, mask, val);
#line 3086
  return (0);
}
}
#line 3089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 3091
  return;
}
}
#line 3096 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3100
  if (a == 0UL || b == 0UL) {
#line 3101
    return;
  } else {

  }
#line 3102
  d = a > b ? a - b : b - a;
#line 3103
  if (a >> 3 < d || b >> 3 < d) {
#line 3104
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3106
  return;
}
}
#line 3108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 3110
  p = & mdev->data.rbuf.sizes;
#line 3111
  dd = 0;
#line 3114
  ldsc = 0;
#line 3117
  tmp = __fswab64(p->d_size);
#line 3117
  p_size = (sector_t )tmp;
#line 3118
  tmp___0 = __fswab64(p->u_size);
#line 3118
  p_usize = (sector_t )tmp___0;
#line 3120
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 3121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3122
    val.i = 0U;
#line 3122
    val.ldv_35532.conn = 1U;
#line 3122
    mask.i = 0U;
#line 3122
    mask.ldv_35532.conn = 31U;
#line 3122
    drbd_force_state(mdev, mask, val);
#line 3123
    return (0);
  } else {

  }
#line 3128
  mdev->p_size = p_size;
#line 3130
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3130
  if (tmp___6 != 0) {
#line 3131
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3131
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3133
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3138
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 3139
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3139
      __y = p_usize;
#line 3139
      if (__x != 0UL) {
#line 3139
        if (__y != 0UL) {
#line 3139
          _min1 = __x;
#line 3139
          _min2 = __y;
#line 3139
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3139
          tmp___2 = __x;
        }
#line 3139
        tmp___3 = tmp___2;
      } else {
#line 3139
        tmp___3 = __y;
      }
#line 3139
      p_usize = tmp___3;
    } else {

    }
#line 3142
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3144
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3145
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3146
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3152
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3152
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3152
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35532.disk > 4) && (int )mdev->state.ldv_35532.conn <= 9) {
#line 3156
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3157
      val___0.i = 0U;
#line 3157
      val___0.ldv_35532.conn = 1U;
#line 3157
      mask___0.i = 0U;
#line 3157
      mask___0.ldv_35532.conn = 31U;
#line 3157
      drbd_force_state(mdev, mask___0, val___0);
#line 3158
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3159
      put_ldev(mdev);
#line 3160
      return (0);
    } else {

    }
#line 3162
    put_ldev(mdev);
  } else {

  }
#line 3166
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3166
  ddsf = (enum dds_flags )tmp___7;
#line 3167
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3167
  if (tmp___8 != 0) {
#line 3168
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3169
    put_ldev(mdev);
#line 3170
    if ((int )dd == -1) {
#line 3171
      return (0);
    } else {

    }
#line 3172
    drbd_md_sync(mdev);
  } else {
#line 3175
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3178
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3178
  if (tmp___13 != 0) {
#line 3179
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3179
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3180
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3181
      ldsc = 1;
    } else {

    }
#line 3184
    if (mdev->agreed_pro_version <= 93) {
#line 3185
      tmp___10 = __fswab32(p->max_segment_size);
#line 3185
      max_seg_s = tmp___10;
    } else
#line 3186
    if (mdev->agreed_pro_version == 94) {
#line 3187
      max_seg_s = 32768U;
    } else {
#line 3189
      max_seg_s = 131072U;
    }
#line 3191
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3191
    if (tmp___11 != max_seg_s) {
#line 3192
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3194
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3194
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3195
    put_ldev(mdev);
  } else {

  }
#line 3198
  if ((int )mdev->state.ldv_35532.conn > 9) {
#line 3199
    tmp___14 = __fswab64(p->c_size);
#line 3199
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3199
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3203
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3205
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3205
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 160U)) {
#line 3207
      if ((int )mdev->state.ldv_35532.pdsk > 3 && (int )mdev->state.ldv_35532.disk > 3) {
#line 3209
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3210
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3212
          resync_after_online_grow(mdev);
        }
      } else {
#line 3214
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3218
  return (1);
}
}
#line 3221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 3223
  p = & mdev->data.rbuf.uuids;
#line 3227
  tmp = kmalloc___1(48UL, 16U);
#line 3227
  p_uuid = (u64 *)tmp;
#line 3229
  i = 0;
#line 3229
  goto ldv_46149;
  ldv_46148: 
#line 3230
  tmp___0 = __fswab64(p->uuid[i]);
#line 3230
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3229
  i = i + 1;
  ldv_46149: ;
#line 3229
  if (i <= 5) {
#line 3230
    goto ldv_46148;
  } else {

  }
#line 3232
  kfree((void const   *)mdev->p_uuid);
#line 3233
  mdev->p_uuid = p_uuid;
#line 3235
  if ((((int )mdev->state.ldv_35532.conn <= 9 && (int )mdev->state.ldv_35532.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3241
    val.i = 0U;
#line 3241
    val.ldv_35532.conn = 1U;
#line 3241
    mask.i = 0U;
#line 3241
    mask.ldv_35532.conn = 31U;
#line 3241
    drbd_force_state(mdev, mask, val);
#line 3242
    return (0);
  } else {

  }
#line 3245
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3245
  if (tmp___1 != 0) {
#line 3246
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3251
    if (skip_initial_sync != 0) {
#line 3252
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3253
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3255
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3256
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3257
      __ns.i = mdev->state.i;
#line 3257
      __ns.ldv_35532.disk = 8U;
#line 3257
      __ns.ldv_35532.pdsk = 8U;
#line 3257
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3259
      drbd_md_sync(mdev);
    } else {

    }
#line 3261
    put_ldev(mdev);
  } else
#line 3262
  if ((int )mdev->state.ldv_35532.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3266
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3273
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3273
  if (tmp___2 == 0) {
#line 3273
    goto ldv_46158;
  } else {

  }
#line 3273
  tmp___3 = get_current();
#line 3273
  __wait.flags = 0U;
#line 3273
  __wait.private = (void *)tmp___3;
#line 3273
  __wait.func = & autoremove_wake_function;
#line 3273
  __wait.task_list.next = & __wait.task_list;
#line 3273
  __wait.task_list.prev = & __wait.task_list;
  ldv_46161: 
#line 3273
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3273
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3273
  if (tmp___4 == 0) {
#line 3273
    goto ldv_46160;
  } else {

  }
#line 3273
  schedule();
#line 3273
  goto ldv_46161;
  ldv_46160: 
#line 3273
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46158: ;
#line 3274
  if ((int )mdev->state.ldv_35532.conn > 9 && (int )mdev->state.ldv_35532.disk <= 3) {
#line 3275
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3277
  return (1);
}
}
#line 3284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3288
  c_tab[0] = 0;
#line 3288
  c_tab[1] = C_TEAR_DOWN;
#line 3288
  c_tab[2] = 0;
#line 3288
  c_tab[3] = 0;
#line 3288
  c_tab[4] = 0;
#line 3288
  c_tab[5] = 0;
#line 3288
  c_tab[6] = 0;
#line 3288
  c_tab[7] = 0;
#line 3288
  c_tab[8] = 0;
#line 3288
  c_tab[9] = 0;
#line 3288
  c_tab[10] = C_CONNECTED;
#line 3288
  c_tab[11] = C_STARTING_SYNC_T;
#line 3288
  c_tab[12] = C_STARTING_SYNC_S;
#line 3288
  c_tab[13] = 0;
#line 3288
  c_tab[14] = 0;
#line 3288
  c_tab[15] = 0;
#line 3288
  c_tab[16] = 0;
#line 3288
  c_tab[17] = 0;
#line 3288
  c_tab[18] = C_VERIFY_T;
#line 3288
  c_tab[19] = 0;
#line 3288
  c_tab[20] = 0;
#line 3288
  c_tab[21] = 0;
#line 3288
  c_tab[22] = 0;
#line 3288
  c_tab[23] = 0;
#line 3288
  c_tab[24] = 0;
#line 3288
  c_tab[25] = 0;
#line 3288
  c_tab[26] = 0;
#line 3288
  c_tab[27] = 0;
#line 3288
  c_tab[28] = 0;
#line 3288
  c_tab[29] = 0;
#line 3288
  c_tab[30] = 0;
#line 3288
  c_tab[31] = C_MASK;
#line 3298
  ms.i = ps.i;
#line 3300
  ms.ldv_35532.conn = (unsigned char )c_tab[(int )ps.ldv_35532.conn];
#line 3301
  ms.ldv_35532.peer = ps.ldv_35532.role;
#line 3302
  ms.ldv_35532.role = ps.ldv_35532.peer;
#line 3303
  ms.ldv_35532.pdsk = ps.ldv_35532.disk;
#line 3304
  ms.ldv_35532.disk = ps.ldv_35532.pdsk;
#line 3305
  ms.ldv_35532.peer_isp = (unsigned char )((int )ps.ldv_35532.aftr_isp | (int )ps.ldv_35532.user_isp);
#line 3307
  return (ms);
}
}
#line 3310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3312
  p = & mdev->data.rbuf.req_state;
#line 3316
  tmp = __fswab32(p->mask);
#line 3316
  mask.i = tmp;
#line 3317
  tmp___0 = __fswab32(p->val);
#line 3317
  val.i = tmp___0;
#line 3319
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3319
  if (tmp___1 != 0) {
#line 3319
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3319
    if (tmp___2 != 0) {
#line 3321
      drbd_send_sr_reply(mdev, -19);
#line 3322
      return (1);
    } else {

    }
  } else {

  }
#line 3325
  mask = convert_state(mask);
#line 3326
  val = convert_state(val);
#line 3328
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3330
  drbd_send_sr_reply(mdev, rv);
#line 3331
  drbd_md_sync(mdev);
#line 3333
  return (1);
}
}
#line 3336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3338
  p = & mdev->data.rbuf.state;
#line 3344
  tmp = __fswab32(p->state);
#line 3344
  peer_state.i = tmp;
#line 3346
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35532.disk;
#line 3347
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3348
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3349
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3349
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3352
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3354
  ns = mdev->state;
#line 3354
  os = ns;
#line 3355
  spin_unlock_irq(& mdev->req_lock);
#line 3359
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_35532.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3367
    if ((int )peer_state.ldv_35532.conn > 10 && (int )peer_state.ldv_35532.conn <= 15) {
#line 3369
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3374
    if ((int )os.ldv_35532.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3376
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3376
      if (tmp___1 <= mdev->rs_failed) {
#line 3377
        drbd_resync_finished(mdev);
      } else {

      }
#line 3378
      return (1);
    } else {

    }
  } else {

  }
#line 3387
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_35532.conn > 16) {
#line 3389
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3391
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3392
    ns.ldv_35532.conn = 10U;
  } else {

  }
#line 3394
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35532.disk > 2) {
#line 3394
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3394
    if (tmp___5 != 0) {
#line 3399
      cr = (int )os.ldv_35532.conn <= 9;
#line 3402
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3407
      tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3407
      cr = tmp___2 | cr;
#line 3410
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_35532.conn > 10 && (int )peer_state.ldv_35532.conn <= 14)) | cr;
#line 3414
      if (cr != 0) {
#line 3415
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35532.role,
                                      real_peer_disk);
#line 3415
        ns.ldv_35532.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3417
      put_ldev(mdev);
#line 3418
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3419
        ns.ldv_35532.conn = 10U;
#line 3420
        if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 6U) {
#line 3421
          val.i = 0U;
#line 3421
          val.ldv_35532.disk = 0U;
#line 3421
          mask.i = 0U;
#line 3421
          mask.ldv_35532.disk = 15U;
#line 3421
          drbd_force_state(mdev, mask, val);
        } else
#line 3422
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3423
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3424
          peer_state.ldv_35532.disk = 0U;
#line 3425
          real_peer_disk = D_DISKLESS;
        } else {
#line 3427
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3427
          if (tmp___4 != 0) {
#line 3428
            return (0);
          } else {

          }
#line 3429
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3429
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3429);
          } else {

          }
#line 3430
          val___0.i = 0U;
#line 3430
          val___0.ldv_35532.conn = 1U;
#line 3430
          mask___0.i = 0U;
#line 3430
          mask___0.ldv_35532.conn = 31U;
#line 3430
          drbd_force_state(mdev, mask___0, val___0);
#line 3431
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3436
  spin_lock_irq(& mdev->req_lock);
#line 3437
  if (mdev->state.i != os.i) {
#line 3438
    goto retry;
  } else {

  }
#line 3439
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 3440
  ns.ldv_35532.peer = peer_state.ldv_35532.role;
#line 3441
  ns.ldv_35532.pdsk = (unsigned char )real_peer_disk;
#line 3442
  ns.ldv_35532.peer_isp = (unsigned char )((int )peer_state.ldv_35532.aftr_isp | (int )peer_state.ldv_35532.user_isp);
#line 3443
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3444
    ns.ldv_35532.disk = mdev->new_state_tmp.ldv_35532.disk;
  } else {

  }
#line 3445
  cs_flags = (enum chg_state_flags )(((int )os.ldv_35532.conn > 9 || (int )ns.ldv_35532.conn <= 9) + 2);
#line 3446
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3446
    tmp___6 = is_susp(ns);
#line 3446
    if (tmp___6 != 0) {
#line 3446
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3446
        if ((int )os.ldv_35532.conn <= 9) {
#line 3446
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3446
          if (tmp___7 != 0) {
#line 3450
            spin_unlock_irq(& mdev->req_lock);
#line 3451
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3452
            tl_clear(mdev);
#line 3453
            drbd_uuid_new_current(mdev);
#line 3454
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3455
            val___1.i = 0U;
#line 3455
            val___1.ldv_35532.conn = 6U;
#line 3455
            val___1.ldv_35532.susp = 0U;
#line 3455
            mask___1.i = 0U;
#line 3455
            mask___1.ldv_35532.conn = 31U;
#line 3455
            mask___1.ldv_35532.susp = 1U;
#line 3455
            drbd_force_state(mdev, mask___1, val___1);
#line 3456
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3458
  rv = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3459
  ns = mdev->state;
#line 3460
  spin_unlock_irq(& mdev->req_lock);
#line 3462
  if (rv <= 0) {
#line 3463
    val___2.i = 0U;
#line 3463
    val___2.ldv_35532.conn = 1U;
#line 3463
    mask___2.i = 0U;
#line 3463
    mask___2.ldv_35532.conn = 31U;
#line 3463
    drbd_force_state(mdev, mask___2, val___2);
#line 3464
    return (0);
  } else {

  }
#line 3467
  if ((int )os.ldv_35532.conn > 9) {
#line 3468
    if (((int )ns.ldv_35532.conn > 10 && (int )peer_state.ldv_35532.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3473
      drbd_send_uuids(mdev);
#line 3474
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3478
  (mdev->net_conf)->want_lose = 0U;
#line 3480
  drbd_md_sync(mdev);
#line 3482
  return (1);
}
}
#line 3485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3487
  p = & mdev->data.rbuf.rs_uuid;
#line 3489
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35532.conn <= 9) || (int )mdev->state.ldv_35532.disk <= 2) {
#line 3489
    goto ldv_46212;
  } else {

  }
#line 3489
  tmp = get_current();
#line 3489
  __wait.flags = 0U;
#line 3489
  __wait.private = (void *)tmp;
#line 3489
  __wait.func = & autoremove_wake_function;
#line 3489
  __wait.task_list.next = & __wait.task_list;
#line 3489
  __wait.task_list.prev = & __wait.task_list;
  ldv_46215: 
#line 3489
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3489
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35532.conn <= 9) || (int )mdev->state.ldv_35532.disk <= 2) {
#line 3489
    goto ldv_46214;
  } else {

  }
#line 3489
  schedule();
#line 3489
  goto ldv_46215;
  ldv_46214: 
#line 3489
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46212: 
#line 3498
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3498
  if (tmp___1 != 0) {
#line 3499
    tmp___0 = __fswab64(p->uuid);
#line 3499
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3500
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3502
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3504
    put_ldev(mdev);
  } else {
#line 3506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3508
  return (1);
}
}
#line 3514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3517
  __min1 = 511UL;
#line 3517
  __min2 = c->bm_words - c->word_offset;
#line 3517
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3518
  want = num_words * 8U;
#line 3520
  if (want != data_size) {
#line 3521
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3522
    return (FAILED);
  } else {

  }
#line 3524
  if (want == 0U) {
#line 3525
    return (DONE);
  } else {

  }
#line 3526
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3526
  if ((unsigned int )tmp != want) {
#line 3527
    return (FAILED);
  } else {

  }
#line 3529
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3531
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3532
  c->bit_offset = c->word_offset * 64UL;
#line 3533
  if (c->bit_offset > c->bm_bits) {
#line 3534
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3536
  return (OK);
}
}
#line 3540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3548
  s = c->bit_offset;
#line 3550
  tmp___0 = __fswab16((int )p->head.length);
#line 3550
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3551
  tmp___1 = DCBP_get_start(p);
#line 3551
  toggle = tmp___1;
#line 3555
  tmp___2 = DCBP_get_pad_bits(p);
#line 3555
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3557
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3558
  if (bits < 0) {
#line 3559
    return (FAILED);
  } else {

  }
#line 3561
  have = bits;
#line 3561
  goto ldv_46248;
  ldv_46247: 
#line 3562
  bits = vli_decode_bits(& rl, look_ahead);
#line 3563
  if (bits <= 0) {
#line 3564
    return (FAILED);
  } else {

  }
#line 3566
  if (toggle != 0) {
#line 3567
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3568
    if (c->bm_bits <= e) {
#line 3569
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3570
      return (FAILED);
    } else {

    }
#line 3572
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3575
  if (have < bits) {
#line 3576
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3580
    return (FAILED);
  } else {

  }
#line 3582
  look_ahead = look_ahead >> bits;
#line 3583
  have = have - bits;
#line 3585
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3586
  if (bits < 0) {
#line 3587
    return (FAILED);
  } else {

  }
#line 3588
  look_ahead = (tmp << have) | look_ahead;
#line 3589
  have = have + bits;
#line 3561
  s = (unsigned long )((unsigned long long )s + rl);
#line 3561
  toggle = toggle == 0;
  ldv_46248: ;
#line 3561
  if (have > 0) {
#line 3562
    goto ldv_46247;
  } else {

  }
#line 3592
  c->bit_offset = s;
#line 3593
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3595
  return (c->bm_bits == s);
}
}
#line 3599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3603
  tmp___0 = DCBP_get_code(p);
#line 3603
  if ((unsigned int )tmp___0 == 2U) {
#line 3604
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3604
    return (tmp);
  } else {

  }
#line 3610
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3611
  val.i = 0U;
#line 3611
  val.ldv_35532.conn = 6U;
#line 3611
  mask.i = 0U;
#line 3611
  mask.ldv_35532.conn = 31U;
#line 3611
  drbd_force_state(mdev, mask, val);
#line 3612
  return (FAILED);
}
}
#line 3615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3619
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3622
  total = c->bytes[0] + c->bytes[1];
#line 3626
  if (total == 0U) {
#line 3627
    return;
  } else {

  }
#line 3630
  if (total >= plain) {
#line 3631
    return;
  } else {

  }
#line 3634
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3637
  if (r > 1000U) {
#line 3638
    r = 1000U;
  } else {

  }
#line 3640
  r = 1000U - r;
#line 3641
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3642
  return;
}
}
#line 3657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  struct p_header80 *h ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3662
  ok = 0;
#line 3663
  h = & mdev->data.rbuf.header.h80;
#line 3665
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3665
  if (tmp == 0) {
#line 3665
    goto ldv_46277;
  } else {

  }
#line 3665
  tmp___0 = get_current();
#line 3665
  __wait.flags = 0U;
#line 3665
  __wait.private = (void *)tmp___0;
#line 3665
  __wait.func = & autoremove_wake_function;
#line 3665
  __wait.task_list.next = & __wait.task_list;
#line 3665
  __wait.task_list.prev = & __wait.task_list;
  ldv_46280: 
#line 3665
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3665
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3665
  if (tmp___1 == 0) {
#line 3665
    goto ldv_46279;
  } else {

  }
#line 3665
  schedule();
#line 3665
  goto ldv_46280;
  ldv_46279: 
#line 3665
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46277: 
#line 3667
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3671
  tmp___2 = __get_free_pages(16U, 0U);
#line 3671
  buffer = (void *)tmp___2;
#line 3672
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3673
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3674
    goto out;
  } else {

  }
#line 3677
  tmp___3 = drbd_bm_bits(mdev);
#line 3677
  tmp___4 = drbd_bm_words(mdev);
#line 3677
  __constr_expr_0.bm_bits = tmp___3;
#line 3677
  __constr_expr_0.bm_words = tmp___4;
#line 3677
  __constr_expr_0.bit_offset = 0UL;
#line 3677
  __constr_expr_0.word_offset = 0UL;
#line 3677
  __constr_expr_0.packets[0] = 0U;
#line 3677
  __constr_expr_0.packets[1] = 0U;
#line 3677
  __constr_expr_0.bytes[0] = 0U;
#line 3677
  __constr_expr_0.bytes[1] = 0U;
#line 3677
  c = __constr_expr_0;
  ldv_46289: ;
#line 3683
  if ((unsigned int )cmd == 4U) {
#line 3684
    ret = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3685
  if ((unsigned int )cmd == 36U) {
#line 3690
    if (data_size > 4088U) {
#line 3691
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3692
      goto out;
    } else {

    }
#line 3695
    p = (struct p_compressed_bm *)buffer;
#line 3696
    __len = 8UL;
#line 3696
    if (__len > 63UL) {
#line 3696
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3696
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3697
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3697
    if ((unsigned int )tmp___5 != data_size) {
#line 3698
      goto out;
    } else {

    }
#line 3699
    if (data_size <= 1U) {
#line 3700
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3701
      return (2);
    } else {

    }
#line 3703
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3705
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3706
    goto out;
  }
#line 3709
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3710
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3712
  if ((unsigned int )ret != 0U) {
#line 3713
    goto ldv_46288;
  } else {

  }
#line 3715
  tmp___6 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3715
  if (tmp___6 == 0) {
#line 3716
    goto out;
  } else {

  }
#line 3717
  if ((unsigned int )ret == 0U) {
#line 3718
    goto ldv_46289;
  } else {

  }
  ldv_46288: ;
#line 3718
  if ((unsigned int )ret == 2U) {
#line 3719
    goto out;
  } else {

  }
#line 3721
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3723
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 224U) {
#line 3724
    tmp___7 = drbd_send_bitmap(mdev);
#line 3724
    ok = tmp___7 == 0;
#line 3725
    if (ok == 0) {
#line 3726
      goto out;
    } else {

    }
#line 3728
    val.i = 0U;
#line 3728
    val.ldv_35532.conn = 15U;
#line 3728
    mask.i = 0U;
#line 3728
    mask.ldv_35532.conn = 31U;
#line 3728
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3729
    if (ok != 1) {
#line 3729
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3729);
    } else {

    }
  } else
#line 3730
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 208U) {
#line 3733
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35532.conn);
#line 3733
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3737
  ok = 1;
  out: 
#line 3739
  drbd_bm_unlock(mdev);
#line 3740
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 208U) {
#line 3741
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3742
  free_pages((unsigned long )buffer, 0U);
#line 3743
  return (ok);
}
}
#line 3746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3752
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3755
  size = (int )data_size;
#line 3756
  goto ldv_46311;
  ldv_46310: 
#line 3757
  __min1 = size;
#line 3757
  __min2 = 128;
#line 3757
  want = __min1 < __min2 ? __min1 : __min2;
#line 3758
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3759
  _b = r <= 0;
#line 3759
  if (_b != 0) {
#line 3759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3759);
  } else {

  }
#line 3759
  if (_b != 0) {
#line 3759
    goto ldv_46309;
  } else {

  }
#line 3760
  size = size - r;
  ldv_46311: ;
#line 3756
  if (size > 0) {
#line 3757
    goto ldv_46310;
  } else {

  }
  ldv_46309: ;
#line 3762
  return (size == 0);
}
}
#line 3765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3767
  if ((int )mdev->state.ldv_35532.disk > 3) {
#line 3768
    drbd_kick_lo(mdev);
  } else {

  }
#line 3772
  drbd_tcp_quickack(mdev->data.socket);
#line 3774
  return (1);
}
}
#line 3785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[41U]  = 
#line 3785
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 0UL, 0}};
#line 3819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3821
  header = & mdev->data.rbuf.header;
#line 3827
  goto ldv_46336;
  ldv_46335: 
#line 3828
  drbd_thread_current_set_cpu(mdev);
#line 3829
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3829
  if (tmp == 0) {
#line 3830
    goto err_out;
  } else {

  }
#line 3832
  tmp___0 = __builtin_expect((unsigned int )cmd > 39U, 0L);
#line 3832
  if (tmp___0 != 0L) {
#line 3833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3834
    goto err_out;
  } else {
#line 3832
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3832
    if (tmp___1 != 0L) {
#line 3833
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3834
      goto err_out;
    } else {

    }
  }
#line 3837
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3838
  rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3839
  tmp___2 = __builtin_expect((size_t )rv != shs, 0L);
#line 3839
  if (tmp___2 != 0L) {
#line 3840
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
            rv);
#line 3841
    goto err_out;
  } else {

  }
#line 3844
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3845
    tmp___3 = cmdname(cmd);
#line 3845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___3, packet_size);
#line 3846
    goto err_out;
  } else {

  }
#line 3849
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3851
  tmp___5 = __builtin_expect(rv == 0, 0L);
#line 3851
  if (tmp___5 != 0L) {
#line 3852
    tmp___4 = cmdname(cmd);
#line 3852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___4, packet_size);
#line 3854
    goto err_out;
  } else {

  }
  ldv_46336: 
#line 3827
  tmp___6 = get_t_state(& mdev->receiver);
#line 3827
  if ((unsigned int )tmp___6 == 1U) {
#line 3828
    goto ldv_46335;
  } else {

  }

#line 3858
  if (0) {
    err_out: 
#line 3860
    val.i = 0U;
#line 3860
    val.ldv_35532.conn = 6U;
#line 3860
    mask.i = 0U;
#line 3860
    mask.ldv_35532.conn = 31U;
#line 3860
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3864
  drbd_md_sync(mdev);
#line 3865
  return;
}
}
#line 3867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3871
  barr.w.cb = & w_prev_work_done;
#line 3872
  init_completion(& barr.done);
#line 3873
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3874
  wait_for_completion(& barr.done);
#line 3875
  return;
}
}
#line 3877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3881
  spin_lock_irq(& mdev->req_lock);
#line 3883
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 3884
    spin_unlock_irq(& mdev->req_lock);
#line 3885
    return;
  } else {

  }
#line 3888
  h = mdev->ee_hash;
#line 3888
  goto ldv_46351;
  ldv_46350: ;
#line 3889
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3888
  h = h + 1;
  ldv_46351: ;
#line 3888
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3889
    goto ldv_46350;
  } else {

  }
#line 3892
  kfree((void const   *)mdev->ee_hash);
#line 3893
  mdev->ee_hash = 0;
#line 3894
  mdev->ee_hash_s = 0U;
#line 3897
  h = mdev->tl_hash;
#line 3897
  goto ldv_46354;
  ldv_46353: ;
#line 3898
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3897
  h = h + 1;
  ldv_46354: ;
#line 3897
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3898
    goto ldv_46353;
  } else {

  }
#line 3901
  kfree((void const   *)mdev->tl_hash);
#line 3902
  mdev->tl_hash = 0;
#line 3903
  mdev->tl_hash_s = 0U;
#line 3904
  spin_unlock_irq(& mdev->req_lock);
#line 3905
  return;
}
}
#line 3907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3911
  rv = 0;
#line 3914
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) {
#line 3915
    return;
  } else {

  }
#line 3916
  if ((int )mdev->state.ldv_35532.conn > 7) {
#line 3917
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35532.conn);
#line 3917
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3921
  drbd_thread_stop(& mdev->asender);
#line 3922
  drbd_free_sock(mdev);
#line 3925
  spin_lock_irq(& mdev->req_lock);
#line 3926
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3927
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3928
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3929
  spin_unlock_irq(& mdev->req_lock);
#line 3941
  drbd_rs_cancel_all(mdev);
#line 3942
  mdev->rs_total = 0UL;
#line 3943
  mdev->rs_failed = 0UL;
#line 3944
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3945
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3948
  del_timer_sync(& mdev->resync_timer);
#line 3949
  resync_timer_fn((unsigned long )mdev);
#line 3954
  drbd_flush_workqueue(mdev);
#line 3958
  drbd_process_done_ee(mdev);
#line 3960
  kfree((void const   *)mdev->p_uuid);
#line 3961
  mdev->p_uuid = 0;
#line 3963
  tmp___0 = is_susp(mdev->state);
#line 3963
  if (tmp___0 == 0) {
#line 3964
    tl_clear(mdev);
  } else {

  }
#line 3966
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3968
  drbd_md_sync(mdev);
#line 3970
  fp = FP_DONT_CARE;
#line 3971
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3971
  if (tmp___1 != 0) {
#line 3972
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3973
    put_ldev(mdev);
  } else {

  }
#line 3976
  if (((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_35532.pdsk > 5) {
#line 3977
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3979
  spin_lock_irq(& mdev->req_lock);
#line 3980
  os = mdev->state;
#line 3981
  if ((int )os.ldv_35532.conn > 1) {
#line 3983
    ns = os;
#line 3984
    ns.ldv_35532.conn = 2U;
#line 3985
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3987
  spin_unlock_irq(& mdev->req_lock);
#line 3989
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3990
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3990
    if (tmp___2 == 0) {
#line 3990
      goto ldv_46364;
    } else {

    }
#line 3990
    tmp___3 = get_current();
#line 3990
    __wait.flags = 0U;
#line 3990
    __wait.private = (void *)tmp___3;
#line 3990
    __wait.func = & autoremove_wake_function;
#line 3990
    __wait.task_list.next = & __wait.task_list;
#line 3990
    __wait.task_list.prev = & __wait.task_list;
    ldv_46367: 
#line 3990
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3990
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3990
    if (tmp___4 == 0) {
#line 3990
      goto ldv_46366;
    } else {

    }
#line 3990
    schedule();
#line 3990
    goto ldv_46367;
    ldv_46366: 
#line 3990
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_46364: 
#line 3992
    tmp___8 = is_susp(mdev->state);
#line 3992
    if (tmp___8 == 0) {
#line 3995
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3995
      if (tmp___5 == 0) {
#line 3995
        goto ldv_46368;
      } else {

      }
#line 3995
      tmp___6 = get_current();
#line 3995
      __wait___0.flags = 0U;
#line 3995
      __wait___0.private = (void *)tmp___6;
#line 3995
      __wait___0.func = & autoremove_wake_function;
#line 3995
      __wait___0.task_list.next = & __wait___0.task_list;
#line 3995
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_46371: 
#line 3995
      prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3995
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3995
      if (tmp___7 == 0) {
#line 3995
        goto ldv_46370;
      } else {

      }
#line 3995
      schedule();
#line 3995
      goto ldv_46371;
      ldv_46370: 
#line 3995
      finish_wait(& mdev->misc_wait, & __wait___0);
      ldv_46368: 
#line 3996
      drbd_free_tl_hash(mdev);
    } else {

    }
#line 3999
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 4000
    mdev->cram_hmac_tfm = 0;
#line 4002
    kfree((void const   *)mdev->net_conf);
#line 4003
    mdev->net_conf = 0;
#line 4004
    val.i = 0U;
#line 4004
    val.ldv_35532.conn = 0U;
#line 4004
    mask.i = 0U;
#line 4004
    mask.ldv_35532.conn = 31U;
#line 4004
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 4014
  tmp___9 = drbd_release_ee(mdev, & mdev->net_ee);
#line 4014
  i = (unsigned int )tmp___9;
#line 4015
  if (i != 0U) {
#line 4016
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 4017
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 4017
  i = (unsigned int )tmp___10;
#line 4018
  if (i != 0U) {
#line 4019
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 4020
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 4020
  i = (unsigned int )tmp___11;
#line 4021
  if (i != 0U) {
#line 4022
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 4024
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 4024
  if (tmp___12 == 0) {
#line 4024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4024);
  } else {

  }
#line 4025
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 4025
  if (tmp___13 == 0) {
#line 4025
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4025);
  } else {

  }
#line 4026
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 4026
  if (tmp___14 == 0) {
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4026);
  } else {

  }
#line 4027
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4027
  if (tmp___15 == 0) {
#line 4027
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4027);
  } else {

  }
#line 4030
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 4031
  tmp___16 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 4031
  if (tmp___16 == 0) {
#line 4031
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4031);
  } else {

  }
#line 4032
  return;
}
}
#line 4043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 4046
  p = & mdev->data.sbuf.handshake;
#line 4049
  tmp = ldv_mutex_lock_interruptible_69(& mdev->data.mutex);
#line 4049
  if (tmp != 0) {
#line 4050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4051
    return (0);
  } else {

  }
#line 4054
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4055
    ldv_mutex_unlock_70(& mdev->data.mutex);
#line 4056
    return (0);
  } else {

  }
#line 4059
  memset((void *)p, 0, 80UL);
#line 4060
  p->protocol_min = 1442840576U;
#line 4061
  p->protocol_max = 1593835520U;
#line 4062
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4064
  ldv_mutex_unlock_71(& mdev->data.mutex);
#line 4065
  return (ok);
}
}
#line 4075 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 4078
  p = & mdev->data.rbuf.handshake;
#line 4079
  expect = 72;
#line 4084
  rv = drbd_send_handshake(mdev);
#line 4085
  if (rv == 0) {
#line 4086
    return (0);
  } else {

  }
#line 4088
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4089
  if (rv == 0) {
#line 4090
    return (0);
  } else {

  }
#line 4092
  if ((unsigned int )cmd != 65534U) {
#line 4093
    tmp = cmdname(cmd);
#line 4093
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4095
    return (-1);
  } else {

  }
#line 4098
  if ((unsigned int )expect != length) {
#line 4099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4101
    return (-1);
  } else {

  }
#line 4104
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4106
  if (rv != expect) {
#line 4107
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 4108
    return (0);
  } else {

  }
#line 4111
  tmp___0 = __fswab32(p->protocol_min);
#line 4111
  p->protocol_min = tmp___0;
#line 4112
  tmp___1 = __fswab32(p->protocol_max);
#line 4112
  p->protocol_max = tmp___1;
#line 4113
  if (p->protocol_max == 0U) {
#line 4114
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4116
  if (p->protocol_min > 95U || p->protocol_max <= 85U) {
#line 4118
    goto incompat;
  } else {

  }
#line 4120
  __min1 = 95;
#line 4120
  __min2 = (int )p->protocol_max;
#line 4120
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4122
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4125
  return (1);
  incompat: 
#line 4128
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 95, p->protocol_min, p->protocol_max);
#line 4132
  return (-1);
}
}
#line 4151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 4155
  response = 0;
#line 4156
  right_response = 0;
#line 4157
  peers_ch = 0;
#line 4158
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4158
  key_len = (unsigned int )tmp;
#line 4165
  desc.tfm = mdev->cram_hmac_tfm;
#line 4166
  desc.flags = 0U;
#line 4168
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4170
  if (rv != 0) {
#line 4171
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4172
    rv = -1;
#line 4173
    goto fail;
  } else {

  }
#line 4176
  get_random_bytes((void *)(& my_challenge), 64);
#line 4178
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4179
  if (rv == 0) {
#line 4180
    goto fail;
  } else {

  }
#line 4182
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4183
  if (rv == 0) {
#line 4184
    goto fail;
  } else {

  }
#line 4186
  if ((unsigned int )cmd != 16U) {
#line 4187
    tmp___0 = cmdname(cmd);
#line 4187
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4189
    rv = 0;
#line 4190
    goto fail;
  } else {

  }
#line 4193
  if (length > 128U) {
#line 4194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4195
    rv = -1;
#line 4196
    goto fail;
  } else {

  }
#line 4199
  tmp___1 = kmalloc___1((size_t )length, 16U);
#line 4199
  peers_ch = (char *)tmp___1;
#line 4200
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4201
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4202
    rv = -1;
#line 4203
    goto fail;
  } else {

  }
#line 4206
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4208
  if ((unsigned int )rv != length) {
#line 4209
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4210
    rv = 0;
#line 4211
    goto fail;
  } else {

  }
#line 4214
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4215
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4215
  response = (char *)tmp___2;
#line 4216
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4217
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4218
    rv = -1;
#line 4219
    goto fail;
  } else {

  }
#line 4222
  sg_init_table(& sg, 1U);
#line 4223
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4225
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4226
  if (rv != 0) {
#line 4227
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4228
    rv = -1;
#line 4229
    goto fail;
  } else {

  }
#line 4232
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4233
  if (rv == 0) {
#line 4234
    goto fail;
  } else {

  }
#line 4236
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4237
  if (rv == 0) {
#line 4238
    goto fail;
  } else {

  }
#line 4240
  if ((unsigned int )cmd != 17U) {
#line 4241
    tmp___3 = cmdname(cmd);
#line 4241
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (unsigned int )cmd);
#line 4243
    rv = 0;
#line 4244
    goto fail;
  } else {

  }
#line 4247
  if (length != resp_size) {
#line 4248
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4249
    rv = 0;
#line 4250
    goto fail;
  } else {

  }
#line 4253
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4255
  if ((unsigned int )rv != resp_size) {
#line 4256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4257
    rv = 0;
#line 4258
    goto fail;
  } else {

  }
#line 4261
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4261
  right_response = (char *)tmp___4;
#line 4262
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4263
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4264
    rv = -1;
#line 4265
    goto fail;
  } else {

  }
#line 4268
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4270
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4271
  if (rv != 0) {
#line 4272
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4273
    rv = -1;
#line 4274
    goto fail;
  } else {

  }
#line 4277
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4277
  rv = tmp___5 == 0;
#line 4279
  if (rv != 0) {
#line 4280
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4283
    rv = -1;
  }
  fail: 
#line 4286
  kfree((void const   *)peers_ch);
#line 4287
  kfree((void const   *)response);
#line 4288
  kfree((void const   *)right_response);
#line 4290
  return (rv);
}
}
#line 4294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4296
  mdev = thi->mdev;
#line 4297
  tmp = mdev_to_minor(mdev);
#line 4297
  minor = tmp;
#line 4300
  tmp___0 = get_current();
#line 4300
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4302
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_46418: 
#line 4305
  h = drbd_connect(mdev);
#line 4306
  if (h == 0) {
#line 4307
    drbd_disconnect(mdev);
#line 4308
    tmp___1 = get_current();
#line 4308
    tmp___1->state = 1L;
#line 4309
    schedule_timeout(250L);
  } else {

  }
#line 4311
  if (h == -1) {
#line 4312
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4313
    val.i = 0U;
#line 4313
    val.ldv_35532.conn = 1U;
#line 4313
    mask.i = 0U;
#line 4313
    mask.ldv_35532.conn = 31U;
#line 4313
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4315
  if (h == 0) {
#line 4316
    goto ldv_46418;
  } else {

  }

#line 4317
  if (h > 0) {
#line 4318
    tmp___2 = get_net_conf(mdev);
#line 4318
    if (tmp___2 != 0) {
#line 4319
      drbdd(mdev);
#line 4320
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4324
  drbd_disconnect(mdev);
#line 4326
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4327
  return (0);
}
}
#line 4332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4334
  p = (struct p_req_state_reply *)h;
#line 4336
  tmp = __fswab32(p->retcode);
#line 4336
  retcode = (int )tmp;
#line 4338
  if (retcode > 0) {
#line 4339
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4341
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4342
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4345
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4347
  return (1);
}
}
#line 4350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4352
  tmp = drbd_send_ping_ack(mdev);
#line 4352
  return (tmp);
}
}
#line 4356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4359
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4360
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4360
  if (tmp == 0) {
#line 4361
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4363
  return (1);
}
}
#line 4366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4368
  p = (struct p_block_ack *)h;
#line 4369
  tmp = __fswab64(p->sector);
#line 4369
  sector = (sector_t )tmp;
#line 4370
  tmp___0 = __fswab32(p->blksize);
#line 4370
  blksize = (int )tmp___0;
#line 4372
  if (mdev->agreed_pro_version <= 88) {
#line 4372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4372);
  } else {

  }
#line 4374
  tmp___1 = __fswab32(p->seq_num);
#line 4374
  update_peer_seq(mdev, tmp___1);
#line 4376
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4376
  if (tmp___2 != 0) {
#line 4377
    drbd_rs_complete_io(mdev, sector);
#line 4378
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4378U);
#line 4380
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4381
    put_ldev(mdev);
  } else {

  }
#line 4383
  atomic_dec(& mdev->rs_pending_cnt);
#line 4383
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4383
  if (tmp___4 < 0) {
#line 4383
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4383
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4383, tmp___3);
  } else {

  }
#line 4384
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4386
  return (1);
}
}
#line 4391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4394
  tmp = tl_hash_slot(mdev, sector);
#line 4394
  slot = tmp;
#line 4398
  n = slot->first;
#line 4398
  goto ldv_46459;
  ldv_46458: ;
#line 4399
  if ((unsigned long )req == (unsigned long )id) {
#line 4400
    if (req->sector != sector) {
#line 4401
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4405
      goto ldv_46457;
    } else {

    }
#line 4407
    return (req);
  } else {

  }
#line 4398
  n = n->next;
  ldv_46459: ;
#line 4398
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4398
    __builtin_prefetch((void const   *)n->next);
#line 4398
    if (1 != 0) {
#line 4398
      __mptr = (struct hlist_node  const  *)n;
#line 4398
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4398
      if (1 != 0) {
#line 4399
        goto ldv_46458;
      } else {
#line 4401
        goto ldv_46457;
      }
    } else {
#line 4401
      goto ldv_46457;
    }
  } else {

  }
  ldv_46457: 
#line 4410
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4412
  return (0);
}
}
#line 4418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4425
  spin_lock_irq(& mdev->req_lock);
#line 4426
  req = (*validator)(mdev, id, sector);
#line 4427
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4427
  if (tmp != 0L) {
#line 4428
    spin_unlock_irq(& mdev->req_lock);
#line 4429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4430
    return (0);
  } else {

  }
#line 4432
  __req_mod(req, what, & m);
#line 4433
  spin_unlock_irq(& mdev->req_lock);
#line 4435
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4436
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4437
  return (1);
}
}
#line 4440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4442
  p = (struct p_block_ack *)h;
#line 4443
  tmp = __fswab64(p->sector);
#line 4443
  sector = (sector_t )tmp;
#line 4444
  tmp___0 = __fswab32(p->blksize);
#line 4444
  blksize = (int )tmp___0;
#line 4447
  tmp___1 = __fswab32(p->seq_num);
#line 4447
  update_peer_seq(mdev, tmp___1);
#line 4449
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4450
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4450U);
#line 4451
    atomic_dec(& mdev->rs_pending_cnt);
#line 4451
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4451
    if (tmp___3 < 0) {
#line 4451
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4451
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4451, tmp___2);
    } else {

    }
#line 4452
    return (1);
  } else {

  }
#line 4454
  tmp___4 = __fswab16((int )h->command);
#line 4454
  switch ((int )tmp___4) {
  case 23: ;
#line 4456
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4456
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4456);
  } else {

  }
#line 4457
  what = write_acked_by_peer_and_sis;
#line 4458
  goto ldv_46487;
  case 22: ;
#line 4460
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4460);
  } else {

  }
#line 4461
  what = write_acked_by_peer;
#line 4462
  goto ldv_46487;
  case 21: ;
#line 4464
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4464
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4464);
  } else {

  }
#line 4465
  what = recv_acked_by_peer;
#line 4466
  goto ldv_46487;
  case 24: ;
#line 4468
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4468);
  } else {

  }
#line 4469
  what = conflict_discarded_by_peer;
#line 4470
  goto ldv_46487;
  default: 
#line 4472
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4472);
#line 4473
  return (0);
  }
  ldv_46487: 
#line 4476
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4476
  return (tmp___5);
}
}
#line 4480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4482
  p = (struct p_block_ack *)h;
#line 4483
  tmp = __fswab64(p->sector);
#line 4483
  sector = (sector_t )tmp;
#line 4485
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4485
  if (tmp___0 != 0) {
#line 4486
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4488
  tmp___1 = __fswab32(p->seq_num);
#line 4488
  update_peer_seq(mdev, tmp___1);
#line 4490
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4491
    tmp___2 = __fswab32(p->blksize);
#line 4491
    size = (int )tmp___2;
#line 4492
    atomic_dec(& mdev->rs_pending_cnt);
#line 4492
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4492
    if (tmp___4 < 0) {
#line 4492
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4492
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4492, tmp___3);
    } else {

    }
#line 4493
    drbd_rs_failed_io(mdev, sector, size);
#line 4494
    return (1);
  } else {

  }
#line 4496
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4496
  return (tmp___5);
}
}
#line 4500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4502
  p = (struct p_block_ack *)h;
#line 4503
  tmp = __fswab64(p->sector);
#line 4503
  sector = (sector_t )tmp;
#line 4505
  tmp___0 = __fswab32(p->seq_num);
#line 4505
  update_peer_seq(mdev, tmp___0);
#line 4506
  tmp___1 = __fswab32(p->blksize);
#line 4506
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4509
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4509
  return (tmp___2);
}
}
#line 4513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4517
  p = (struct p_block_ack *)h;
#line 4519
  tmp = __fswab64(p->sector);
#line 4519
  sector = (sector_t )tmp;
#line 4520
  tmp___0 = __fswab32(p->blksize);
#line 4520
  size = (int )tmp___0;
#line 4522
  tmp___1 = __fswab32(p->seq_num);
#line 4522
  update_peer_seq(mdev, tmp___1);
#line 4524
  atomic_dec(& mdev->rs_pending_cnt);
#line 4524
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4524
  if (tmp___3 < 0) {
#line 4524
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4524
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4524, tmp___2);
  } else {

  }
#line 4526
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4526
  if (tmp___4 != 0) {
#line 4527
    drbd_rs_complete_io(mdev, sector);
#line 4528
    drbd_rs_failed_io(mdev, sector, size);
#line 4529
    put_ldev(mdev);
  } else {

  }
#line 4532
  return (1);
}
}
#line 4535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4537
  p = (struct p_barrier_ack *)h;
#line 4539
  tmp = __fswab32(p->set_size);
#line 4539
  tl_release(mdev, p->barrier, tmp);
#line 4541
  return (1);
}
}
#line 4544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4546
  p = (struct p_block_ack *)h;
#line 4551
  tmp = __fswab64(p->sector);
#line 4551
  sector = (sector_t )tmp;
#line 4552
  tmp___0 = __fswab32(p->blksize);
#line 4552
  size = (int )tmp___0;
#line 4554
  tmp___1 = __fswab32(p->seq_num);
#line 4554
  update_peer_seq(mdev, tmp___1);
#line 4556
  tmp___2 = __fswab64(p->block_id);
#line 4556
  if (tmp___2 == 4712ULL) {
#line 4557
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4559
    ov_oos_print(mdev);
  }
#line 4561
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4561
  if (tmp___3 == 0) {
#line 4562
    return (1);
  } else {

  }
#line 4564
  drbd_rs_complete_io(mdev, sector);
#line 4565
  atomic_dec(& mdev->rs_pending_cnt);
#line 4565
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4565
  if (tmp___5 < 0) {
#line 4565
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4565
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4565, tmp___4);
  } else {

  }
#line 4567
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4567
  if (mdev->ov_left == 0UL) {
#line 4568
    tmp___6 = kmalloc___1(24UL, 16U);
#line 4568
    w = (struct drbd_work *)tmp___6;
#line 4569
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4570
      w->cb = & w_ov_finished;
#line 4571
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4573
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4574
      ov_oos_print(mdev);
#line 4575
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4578
  put_ldev(mdev);
#line 4579
  return (1);
}
}
#line 4582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4584
  return (1);
}
}
#line 4592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4594
  asender_tbl[0].pkt_size = 0UL;
#line 4594
  asender_tbl[0].process = 0;
#line 4594
  asender_tbl[1].pkt_size = 0UL;
#line 4594
  asender_tbl[1].process = 0;
#line 4594
  asender_tbl[2].pkt_size = 0UL;
#line 4594
  asender_tbl[2].process = 0;
#line 4594
  asender_tbl[3].pkt_size = 0UL;
#line 4594
  asender_tbl[3].process = 0;
#line 4594
  asender_tbl[4].pkt_size = 0UL;
#line 4594
  asender_tbl[4].process = 0;
#line 4594
  asender_tbl[5].pkt_size = 0UL;
#line 4594
  asender_tbl[5].process = 0;
#line 4594
  asender_tbl[6].pkt_size = 0UL;
#line 4594
  asender_tbl[6].process = 0;
#line 4594
  asender_tbl[7].pkt_size = 0UL;
#line 4594
  asender_tbl[7].process = 0;
#line 4594
  asender_tbl[8].pkt_size = 0UL;
#line 4594
  asender_tbl[8].process = 0;
#line 4594
  asender_tbl[9].pkt_size = 0UL;
#line 4594
  asender_tbl[9].process = 0;
#line 4594
  asender_tbl[10].pkt_size = 0UL;
#line 4594
  asender_tbl[10].process = 0;
#line 4594
  asender_tbl[11].pkt_size = 0UL;
#line 4594
  asender_tbl[11].process = 0;
#line 4594
  asender_tbl[12].pkt_size = 0UL;
#line 4594
  asender_tbl[12].process = 0;
#line 4594
  asender_tbl[13].pkt_size = 0UL;
#line 4594
  asender_tbl[13].process = 0;
#line 4594
  asender_tbl[14].pkt_size = 0UL;
#line 4594
  asender_tbl[14].process = 0;
#line 4594
  asender_tbl[15].pkt_size = 0UL;
#line 4594
  asender_tbl[15].process = 0;
#line 4594
  asender_tbl[16].pkt_size = 0UL;
#line 4594
  asender_tbl[16].process = 0;
#line 4594
  asender_tbl[17].pkt_size = 0UL;
#line 4594
  asender_tbl[17].process = 0;
#line 4594
  asender_tbl[18].pkt_size = 0UL;
#line 4594
  asender_tbl[18].process = 0;
#line 4594
  asender_tbl[19].pkt_size = 8UL;
#line 4594
  asender_tbl[19].process = & got_Ping;
#line 4594
  asender_tbl[20].pkt_size = 8UL;
#line 4594
  asender_tbl[20].process = & got_PingAck;
#line 4594
  asender_tbl[21].pkt_size = 32UL;
#line 4594
  asender_tbl[21].process = & got_BlockAck;
#line 4594
  asender_tbl[22].pkt_size = 32UL;
#line 4594
  asender_tbl[22].process = & got_BlockAck;
#line 4594
  asender_tbl[23].pkt_size = 32UL;
#line 4594
  asender_tbl[23].process = & got_BlockAck;
#line 4594
  asender_tbl[24].pkt_size = 32UL;
#line 4594
  asender_tbl[24].process = & got_BlockAck;
#line 4594
  asender_tbl[25].pkt_size = 32UL;
#line 4594
  asender_tbl[25].process = & got_NegAck;
#line 4594
  asender_tbl[26].pkt_size = 32UL;
#line 4594
  asender_tbl[26].process = & got_NegDReply;
#line 4594
  asender_tbl[27].pkt_size = 32UL;
#line 4594
  asender_tbl[27].process = & got_NegRSDReply;
#line 4594
  asender_tbl[28].pkt_size = 16UL;
#line 4594
  asender_tbl[28].process = & got_BarrierAck;
#line 4594
  asender_tbl[29].pkt_size = 12UL;
#line 4594
  asender_tbl[29].process = & got_RqSReply;
#line 4594
  asender_tbl[30].pkt_size = 0UL;
#line 4594
  asender_tbl[30].process = 0;
#line 4594
  asender_tbl[31].pkt_size = 0UL;
#line 4594
  asender_tbl[31].process = 0;
#line 4594
  asender_tbl[32].pkt_size = 32UL;
#line 4594
  asender_tbl[32].process = & got_OVResult;
#line 4594
  asender_tbl[33].pkt_size = 0UL;
#line 4594
  asender_tbl[33].process = 0;
#line 4594
  asender_tbl[34].pkt_size = 32UL;
#line 4594
  asender_tbl[34].process = & got_IsInSync;
#line 4594
  asender_tbl[35].pkt_size = 0UL;
#line 4594
  asender_tbl[35].process = 0;
#line 4594
  asender_tbl[36].pkt_size = 0UL;
#line 4594
  asender_tbl[36].process = 0;
#line 4594
  asender_tbl[37].pkt_size = 0UL;
#line 4594
  asender_tbl[37].process = 0;
#line 4594
  asender_tbl[38].pkt_size = 0UL;
#line 4594
  asender_tbl[38].process = 0;
#line 4594
  asender_tbl[39].pkt_size = 16UL;
#line 4594
  asender_tbl[39].process = & got_skip;
#line 4594
  asender_tbl[40].pkt_size = 0UL;
#line 4594
  asender_tbl[40].process = 0;
#line 4614
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4615
    return (0);
  } else {

  }
#line 4616
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  enum drbd_thread_state tmp___23 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4621
  mdev = thi->mdev;
#line 4622
  h = & mdev->meta.rbuf.header.h80;
#line 4623
  cmd = 0;
#line 4626
  buf = (void *)h;
#line 4627
  received = 0;
#line 4628
  expect = 8;
#line 4631
  tmp = mdev_to_minor(mdev);
#line 4631
  tmp___0 = get_current();
#line 4631
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4633
  tmp___1 = get_current();
#line 4633
  tmp___1->policy = 2U;
#line 4634
  tmp___2 = get_current();
#line 4634
  tmp___2->rt_priority = 2U;
#line 4636
  goto ldv_46569;
  ldv_46573: 
#line 4637
  drbd_thread_current_set_cpu(mdev);
#line 4638
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4638
  if (tmp___4 != 0) {
#line 4639
    tmp___3 = drbd_send_ping(mdev);
#line 4639
    _b = tmp___3 == 0;
#line 4639
    if (_b != 0) {
#line 4639
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4639);
    } else {

    }
#line 4639
    if (_b != 0) {
#line 4639
      goto reconnect;
    } else {

    }
#line 4640
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4646
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4646
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4646
    if (tmp___5 > 3) {
#line 4648
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_46568: 
#line 4650
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4651
  tmp___6 = get_current();
#line 4651
  flush_signals(tmp___6);
#line 4652
  tmp___7 = drbd_process_done_ee(mdev);
#line 4652
  if (tmp___7 == 0) {
#line 4653
    goto reconnect;
  } else {

  }
#line 4655
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4656
  spin_lock_irq(& mdev->req_lock);
#line 4657
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4658
  spin_unlock_irq(& mdev->req_lock);
#line 4662
  if (empty != 0) {
#line 4663
    goto ldv_46567;
  } else {

  }
#line 4664
  goto ldv_46568;
  ldv_46567: ;
#line 4666
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4667
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4670
  tmp___8 = get_current();
#line 4670
  tmp___9 = signal_pending(tmp___8);
#line 4670
  if (tmp___9 != 0) {
#line 4671
    goto ldv_46569;
  } else {

  }
#line 4673
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4675
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4677
  tmp___10 = get_current();
#line 4677
  flush_signals(tmp___10);
#line 4689
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4689
  if (tmp___11 != 0L) {
#line 4690
    received = received + rv;
#line 4691
    buf = buf + (unsigned long )rv;
  } else
#line 4692
  if (rv == 0) {
#line 4693
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4694
    goto reconnect;
  } else
#line 4695
  if (rv == -11) {
#line 4696
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4698
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4699
      goto reconnect;
    } else {

    }
#line 4701
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4702
    goto ldv_46569;
  } else
#line 4703
  if (rv == -4) {
#line 4704
    goto ldv_46569;
  } else {
#line 4706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4707
    goto reconnect;
  }
#line 4710
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4711
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4711
    if (tmp___15 != 0L) {
#line 4712
      tmp___12 = __fswab16((int )h->length);
#line 4712
      tmp___13 = __fswab16((int )h->command);
#line 4712
      tmp___14 = __fswab32(h->magic);
#line 4712
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4716
      goto reconnect;
    } else {

    }
#line 4718
    tmp___16 = __fswab16((int )h->command);
#line 4718
    cmd = get_asender_cmd((int )tmp___16);
#line 4719
    tmp___17 = __fswab16((int )h->length);
#line 4719
    len = (int )tmp___17;
#line 4720
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4720
    if (tmp___21 != 0L) {
#line 4721
      tmp___18 = __fswab16((int )h->length);
#line 4721
      tmp___19 = __fswab16((int )h->command);
#line 4721
      tmp___20 = __fswab32(h->magic);
#line 4721
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4725
      goto disconnect;
    } else {

    }
#line 4727
    expect = (int )cmd->pkt_size;
#line 4728
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4728
    if (_b___0 != 0) {
#line 4728
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4728);
    } else {

    }
#line 4728
    if (_b___0 != 0) {
#line 4729
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4731
  if (received == expect) {
#line 4732
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4732
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4732);
    } else {

    }
#line 4733
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4733
    if (tmp___22 == 0) {
#line 4734
      goto reconnect;
    } else {

    }
#line 4736
    buf = (void *)h;
#line 4737
    received = 0;
#line 4738
    expect = 8;
#line 4739
    cmd = 0;
  } else {

  }
  ldv_46569: 
#line 4636
  tmp___23 = get_t_state(thi);
#line 4636
  if ((unsigned int )tmp___23 == 1U) {
#line 4637
    goto ldv_46573;
  } else {

  }

#line 4743
  if (0) {
    reconnect: 
#line 4745
    val.i = 0U;
#line 4745
    val.ldv_35532.conn = 5U;
#line 4745
    mask.i = 0U;
#line 4745
    mask.ldv_35532.conn = 31U;
#line 4745
    drbd_force_state(mdev, mask, val);
#line 4746
    drbd_md_sync(mdev);
  } else {

  }
#line 4748
  if (0) {
    disconnect: 
#line 4750
    val___0.i = 0U;
#line 4750
    val___0.ldv_35532.conn = 1U;
#line 4750
    mask___0.i = 0U;
#line 4750
    mask___0.ldv_35532.conn = 31U;
#line 4750
    drbd_force_state(mdev, mask___0, val___0);
#line 4751
    drbd_md_sync(mdev);
  } else {

  }
#line 4753
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4755
  if ((int )mdev->state.ldv_35532.conn > 9) {
#line 4755
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4755);
  } else {

  }
#line 4756
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4758
  return (0);
}
}
#line 4798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4810
  LDV_IN_INTERRUPT = 1;
#line 4819
  ldv_initialize();
#line 4821
  goto ldv_46602;
  ldv_46601: 
#line 4824
  tmp = nondet_int();
#line 4824
  switch (tmp) {
  default: ;
#line 4826
  goto ldv_46600;
  }
  ldv_46600: ;
  ldv_46602: 
#line 4821
  tmp___0 = nondet_int();
#line 4821
  if (tmp___0 != 0) {
#line 4822
    goto ldv_46601;
  } else {

  }


#line 4835
  ldv_check_final_state();
#line 4838
  return;
}
}
#line 4842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4847
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4849
  mutex_lock(ldv_func_arg1);
#line 4850
  return;
}
}
#line 4852 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4857
  tmp = mutex_trylock(ldv_func_arg1);
#line 4857
  ldv_func_res = tmp;
#line 4859
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4859
  return (tmp___0);
#line 4861
  return (ldv_func_res);
}
}
#line 4864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4869
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4871
  mutex_unlock(ldv_func_arg1);
#line 4872
  return;
}
}
#line 4874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4879
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4881
  mutex_lock(ldv_func_arg1);
#line 4882
  return;
}
}
#line 4884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4889
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4891
  mutex_unlock(ldv_func_arg1);
#line 4892
  return;
}
}
#line 4894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4899
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4901
  mutex_unlock(ldv_func_arg1);
#line 4902
  return;
}
}
#line 4904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4909
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4909
  ldv_func_res = tmp;
#line 4911
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4911
  return (tmp___0);
#line 4913
  return (ldv_func_res);
}
}
#line 4916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4921
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4923
  mutex_unlock(ldv_func_arg1);
#line 4924
  return;
}
}
#line 4926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4931
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4933
  mutex_unlock(ldv_func_arg1);
#line 4934
  return;
}
}
#line 593 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 595
  __hlist_del(n);
#line 596
  n->next = 0xdead000000100100UL;
#line 597
  n->pprev = 0xdead000000200200UL;
#line 598
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 559 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 561
  rcu_read_lock_sched_notrace();
#line 563
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 565
  return;
}
}
#line 581 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 583
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 585
  rcu_read_lock_sched_notrace();
#line 586
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_11941: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_11941;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___2(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 184 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 186
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 186
  if (tmp != 0L) {
#line 187
    if (part->partno != 0) {
#line 188
      __mptr = (struct device  const  *)part->__dev.parent;
#line 188
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 190
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 190
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 192
  return (0);
}
}
#line 361 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 363
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 364
  if (part->partno != 0) {
#line 365
    tmp = part_to_disk(part);
#line 365
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 366
  return;
}
}
#line 368 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 370
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 371
  if (part->partno != 0) {
#line 372
    tmp = part_to_disk(part);
#line 372
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 373
  return;
}
}
#line 394
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 669 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1206
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1468
mempool_t *drbd_request_mempool ;
#line 1484
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1486
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_43919;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35532.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35532.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_43919;
  }
  ldv_43919: ;
#line 1816
  return;
}
}
#line 2034 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2036
  atomic_inc(& mdev->ap_pending_cnt);
#line 2037
  return;
}
}
#line 2192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2194
  mxb = 1000000;
#line 2195
  tmp = get_net_conf(mdev);
#line 2195
  if (tmp != 0) {
#line 2196
    mxb = (mdev->net_conf)->max_buffers;
#line 2197
    put_net_conf(mdev);
  } else {

  }
#line 2199
  return (mxb);
}
}
#line 2202 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2208
  switch ((unsigned int )s.ldv_35532.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2221
  goto ldv_44075;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2240
  return (0);
  }
  ldv_44075: ;
#line 2243
  switch ((unsigned int )s.ldv_35532.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2250
  goto ldv_44095;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2259
  return (0);
  }
  ldv_44095: ;
#line 2262
  return (1);
}
}
#line 2270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2272
  tmp = drbd_get_max_buffers(mdev);
#line 2272
  mxb = tmp;
#line 2274
  tmp___0 = is_susp(mdev->state);
#line 2274
  if (tmp___0 != 0) {
#line 2275
    return (0);
  } else {

  }
#line 2276
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2276
  if (tmp___1 != 0) {
#line 2277
    return (0);
  } else {

  }
#line 2284
  tmp___2 = drbd_state_is_stable(mdev->state);
#line 2284
  if (tmp___2 == 0) {
#line 2285
    return (0);
  } else {

  }
#line 2289
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2289
  if (tmp___3 > mxb) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  tmp___4 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2291
  if (tmp___4 != 0) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  return (1);
}
}
#line 2299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2303
  tmp = get_current();
#line 2303
  wait.flags = 0U;
#line 2303
  wait.private = (void *)tmp;
#line 2303
  wait.func = & autoremove_wake_function;
#line 2303
  wait.task_list.next = & wait.task_list;
#line 2303
  wait.task_list.prev = & wait.task_list;
#line 2313
  spin_lock_irq(& mdev->req_lock);
#line 2314
  goto ldv_44114;
  ldv_44113: 
#line 2315
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2316
  spin_unlock_irq(& mdev->req_lock);
#line 2317
  schedule();
#line 2318
  finish_wait(& mdev->misc_wait, & wait);
#line 2319
  spin_lock_irq(& mdev->req_lock);
  ldv_44114: 
#line 2314
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2314
  if (tmp___0 == 0) {
#line 2315
    goto ldv_44113;
  } else {

  }
#line 2321
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2322
  spin_unlock_irq(& mdev->req_lock);
#line 2323
  return;
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2327
  tmp = drbd_get_max_buffers(mdev);
#line 2327
  mxb = tmp;
#line 2328
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2328
  ap_bio = tmp___0;
#line 2330
  if (ap_bio < 0) {
#line 2330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2330);
  } else {

  }
#line 2334
  if (ap_bio < mxb) {
#line 2335
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2336
  if (ap_bio == 0) {
#line 2336
    tmp___2 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
    if (tmp___2 != 0) {
#line 2337
      tmp___1 = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 2337
      if (tmp___1 == 0) {
#line 2338
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2339
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_44226: ;
#line 227
    goto ldv_44226;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_44231: ;
#line 236
    goto ldv_44231;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 281
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 281
  req = (struct drbd_request *)tmp;
#line 283
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 283
  if (tmp___0 != 0L) {
#line 284
    drbd_req_make_private_bio(req, bio_src);
#line 286
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 287
    req->mdev = mdev;
#line 288
    req->master_bio = bio_src;
#line 289
    req->epoch = 0U;
#line 290
    req->sector = bio_src->bi_sector;
#line 291
    req->size = bio_src->bi_size;
#line 292
    req->start_time = jiffies;
#line 293
    INIT_HLIST_NODE(& req->colision);
#line 294
    INIT_LIST_HEAD(& req->tl_requests);
#line 295
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 297
  return (req);
}
}
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 302
  mempool_free((void *)req, drbd_request_mempool);
#line 303
  return;
}
}
#line 318
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_44306;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_44306;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_44306;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_44306;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_44306: 
#line 94
  cpu = pfo_ret__;
#line 95
  __vpp_verify = 0;
#line 95
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 95
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 95
  if ((mdev->vdisk)->part0.partno != 0) {
#line 95
    __vpp_verify___0 = 0;
#line 95
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 95
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 95
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 96
  __vpp_verify___1 = 0;
#line 96
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___2 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 97
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 98
  rcu_read_unlock();
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 104
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 105
  duration = (unsigned long )jiffies - req->start_time;
#line 107
  rcu_read_lock();
#line 107
  switch (4UL) {
  case 1UL: 
#line 107
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_44339;
  case 2UL: 
#line 107
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_44339;
  case 4UL: 
#line 107
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_44339;
  case 8UL: 
#line 107
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_44339;
  default: 
#line 107
  __bad_percpu_size();
  }
  ldv_44339: 
#line 107
  cpu = pfo_ret__;
#line 108
  __vpp_verify = 0;
#line 108
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 108
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 108
  if ((mdev->vdisk)->part0.partno != 0) {
#line 108
    __vpp_verify___0 = 0;
#line 108
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 108
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 108
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 109
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 110
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 111
  rcu_read_unlock();
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 116
  s = req->rq_state;
#line 124
  list_del(& req->tl_requests);
#line 129
  if ((int )rw == 1) {
#line 134
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 135
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             135U);
    } else {

    }
#line 137
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 138
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         138U);
    } else {

    }
#line 150
    if ((s & 7UL) != 0UL) {
#line 151
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 151
      if (tmp___0 != 0) {
#line 152
        if ((s & 2048UL) != 0UL) {
#line 153
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 154
        put_ldev(mdev);
      } else {
#line 155
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 155
        if (tmp != 0) {
#line 156
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 163
  drbd_req_free(req);
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 175
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 175
  if (tmp != 0) {
#line 176
    return;
  } else {

  }
#line 178
  b = mdev->newest_tle;
#line 179
  b->w.cb = & w_send_barrier;
#line 184
  inc_ap_pending(mdev);
#line 185
  drbd_queue_work(& mdev->data.work, & b->w);
#line 186
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 187
  return;
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 192
  s = req->rq_state;
#line 200
  if ((int )mdev->state.ldv_35532.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 202
    queue_barrier(mdev);
  } else {

  }
#line 207
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 208
    sector = req->sector;
#line 209
    size = (int const   )req->size;
#line 215
    slot = tl_hash_slot___0(mdev, sector);
#line 216
    n = slot->first;
#line 216
    goto ldv_44382;
    ldv_44381: 
#line 217
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 217
    if (tmp != 0) {
#line 218
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 216
    n = n->next;
    ldv_44382: ;
#line 216
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 216
      __builtin_prefetch((void const   *)n->next);
#line 216
      if (1 != 0) {
#line 216
        __mptr = (struct hlist_node  const  *)n;
#line 216
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 216
        if (1 != 0) {
#line 217
          goto ldv_44381;
        } else {
#line 219
          goto ldv_44383;
        }
      } else {
#line 219
        goto ldv_44383;
      }
    } else {

    }
    ldv_44383: 
#line 239
    slot = ee_hash_slot___0(mdev, req->sector);
#line 240
    n = slot->first;
#line 240
    goto ldv_44390;
    ldv_44389: 
#line 241
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 241
    if (tmp___0 != 0) {
#line 242
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 243
      goto ldv_44388;
    } else {

    }
#line 240
    n = n->next;
    ldv_44390: ;
#line 240
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 240
      __builtin_prefetch((void const   *)n->next);
#line 240
      if (1 != 0) {
#line 240
        __mptr___0 = (struct hlist_node  const  *)n;
#line 240
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 240
        if (1 != 0) {
#line 241
          goto ldv_44389;
        } else {
#line 243
          goto ldv_44388;
        }
      } else {
#line 243
        goto ldv_44388;
      }
    } else {

    }
    ldv_44388: ;
  } else {

  }
#line 246
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 253
  bio_endio(m->bio, m->error);
#line 254
  dec_ap_bio(mdev);
#line 255
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 265
  s = req->rq_state;
#line 266
  mdev = req->mdev;
#line 268
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 279
  if ((s & 16UL) != 0UL) {
#line 280
    return;
  } else {

  }
#line 281
  if ((s & 8UL) != 0UL) {
#line 282
    return;
  } else {

  }
#line 283
  if ((int )s & 1) {
#line 284
    return;
  } else {

  }
#line 286
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 308
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 309
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 309
    error = (int )tmp;
#line 313
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 313
    if (tmp___0 == 0) {
#line 314
      hlist_del(& req->colision);
    } else
#line 316
    if ((s & 504UL) != 0UL) {
#line 316
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              316);
    } else {

    }
#line 319
    if (rw == 1) {
#line 320
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 323
    _drbd_end_io_acct(mdev, req);
#line 325
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 326
    m->bio = req->master_bio;
#line 327
    req->master_bio = 0;
  } else {

  }
#line 330
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 335
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 336
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 343
  mdev = req->mdev;
#line 345
  tmp = is_susp(mdev->state);
#line 345
  if (tmp == 0) {
#line 346
    _req_may_be_done(req, m);
  } else {

  }
#line 347
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 374
  mdev = req->mdev;
#line 375
  sector = req->sector;
#line 376
  size = (int const   )req->size;
#line 382
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 382
  if (tmp == 0) {
#line 382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            382);
  } else {

  }
#line 384
  tmp___0 = get_net_conf(mdev);
#line 384
  if (tmp___0 == 0) {
#line 385
    return (0);
  } else {

  }
#line 388
  _b = mdev->tl_hash_s == 0U;
#line 388
  if (_b != 0) {
#line 388
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            388);
  } else {

  }
#line 388
  if (_b != 0) {
#line 389
    goto out_no_conflict;
  } else {

  }
#line 390
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 390
  if (tmp___1 != 0L) {
#line 390
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (390), "i" (12UL));
    ldv_44423: ;
#line 390
    goto ldv_44423;
  } else {

  }
#line 393
  slot = tl_hash_slot___0(mdev, sector);
#line 394
  n = slot->first;
#line 394
  goto ldv_44430;
  ldv_44429: 
#line 395
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 395
  if (tmp___4 != 0) {
#line 396
    tmp___2 = get_current();
#line 396
    tmp___3 = get_current();
#line 396
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 402
    goto out_conflict;
  } else {

  }
#line 394
  n = n->next;
  ldv_44430: ;
#line 394
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 394
    __builtin_prefetch((void const   *)n->next);
#line 394
    if (1 != 0) {
#line 394
      __mptr = (struct hlist_node  const  *)n;
#line 394
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 394
      if (1 != 0) {
#line 395
        goto ldv_44429;
      } else {
#line 397
        goto ldv_44431;
      }
    } else {
#line 397
      goto ldv_44431;
    }
  } else {

  }
  ldv_44431: ;
#line 406
  if (mdev->ee_hash_s != 0U) {
#line 408
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 408
    if (tmp___5 != 0L) {
#line 408
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (408), "i" (12UL));
      ldv_44432: ;
#line 408
      goto ldv_44432;
    } else {

    }
#line 411
    slot = ee_hash_slot___0(mdev, sector);
#line 412
    n = slot->first;
#line 412
    goto ldv_44438;
    ldv_44437: 
#line 413
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 413
    if (tmp___8 != 0) {
#line 414
      tmp___6 = get_current();
#line 414
      tmp___7 = get_current();
#line 414
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 420
      goto out_conflict;
    } else {

    }
#line 412
    n = n->next;
    ldv_44438: ;
#line 412
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 412
      __builtin_prefetch((void const   *)n->next);
#line 412
      if (1 != 0) {
#line 412
        __mptr___0 = (struct hlist_node  const  *)n;
#line 412
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 412
        if (1 != 0) {
#line 413
          goto ldv_44437;
        } else {
#line 415
          goto ldv_44439;
        }
      } else {
#line 415
        goto ldv_44439;
      }
    } else {

    }
    ldv_44439: ;
  } else {

  }
  out_no_conflict: 
#line 429
  put_net_conf(mdev);
#line 430
  return (0);
  out_conflict: 
#line 433
  put_net_conf(mdev);
#line 434
  return (1);
}
}
#line 449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 452
  mdev = req->mdev;
#line 453
  rv = 0;
#line 454
  m->bio = 0;
#line 456
  switch ((unsigned int )what) {
  default: 
#line 458
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          458);
#line 459
  goto ldv_44448;
  case 1U: ;
#line 470
  if ((req->rq_state & 504UL) != 0UL) {
#line 470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            470);
  } else {

  }
#line 471
  req->rq_state = req->rq_state | 8UL;
#line 472
  inc_ap_pending(mdev);
#line 473
  goto ldv_44448;
  case 2U: ;
#line 477
  if ((req->rq_state & 7UL) != 0UL) {
#line 477
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            477);
  } else {

  }
#line 478
  req->rq_state = req->rq_state | 1UL;
#line 479
  goto ldv_44448;
  case 20U: ;
#line 482
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 483
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 485
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 487
  req->rq_state = req->rq_state | 6UL;
#line 488
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 490
  _req_may_be_done_not_susp(req, m);
#line 491
  put_ldev(mdev);
#line 492
  goto ldv_44448;
  case 19U: 
#line 495
  req->rq_state = req->rq_state | 2UL;
#line 496
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 498
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 499
  _req_may_be_done_not_susp(req, m);
#line 500
  put_ldev(mdev);
#line 501
  goto ldv_44448;
  case 18U: 
#line 505
  req->rq_state = req->rq_state | 2UL;
#line 506
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 507
  _req_may_be_done_not_susp(req, m);
#line 508
  put_ldev(mdev);
#line 509
  goto ldv_44448;
  case 17U: 
#line 512
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         512U);
#line 514
  req->rq_state = req->rq_state | 2UL;
#line 515
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 517
  if ((req->rq_state & 504UL) != 0UL) {
#line 517
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            517);
  } else {

  }
#line 519
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 520
  put_ldev(mdev);
#line 524
  if (*((unsigned int *)mdev + 503UL) != 65536U) {
#line 525
    _req_may_be_done_not_susp(req, m);
#line 526
    goto ldv_44448;
  } else {

  }
#line 530
  req->rq_state = req->rq_state | 8UL;
#line 531
  inc_ap_pending(mdev);
  case 4U: 
#line 544
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 544
  hlist_add_head(& req->colision, tmp);
#line 546
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 548
  if ((req->rq_state & 8UL) == 0UL) {
#line 548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            548);
  } else {

  }
#line 549
  req->rq_state = req->rq_state | 16UL;
#line 550
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 553
  drbd_queue_work(& mdev->data.work, & req->w);
#line 554
  goto ldv_44448;
  case 3U: 
#line 560
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 560
  hlist_add_head(& req->colision, tmp___0);
#line 580
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 584
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 584
  if (tmp___1 != 0) {
#line 584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            584);
  } else {

  }
#line 586
  req->epoch = (mdev->newest_tle)->br_number;
#line 589
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 592
  if ((req->rq_state & 8UL) == 0UL) {
#line 592
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            592);
  } else {

  }
#line 593
  req->rq_state = req->rq_state | 16UL;
#line 594
  req->w.cb = & w_send_dblock;
#line 595
  drbd_queue_work(& mdev->data.work, & req->w);
#line 598
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 599
    queue_barrier(mdev);
  } else {

  }
#line 601
  goto ldv_44448;
  case 5U: ;
  case 6U: 
#line 608
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 611
  _req_may_be_done_not_susp(req, m);
#line 612
  goto ldv_44448;
  case 7U: ;
#line 616
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 620
    if ((req->rq_state & 8UL) != 0UL) {
#line 621
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 621
      if (tmp___2 != 0) {
#line 621
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 621
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 621
      if (tmp___4 < 0) {
#line 621
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 621
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 621, tmp___3);
      } else {

      }
#line 622
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 623
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 629
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 630
  req->rq_state = req->rq_state | 32UL;
#line 636
  _req_may_be_done_not_susp(req, m);
#line 637
  goto ldv_44448;
  case 9U: 
#line 640
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 645
  if ((req->rq_state & 8UL) != 0UL) {
#line 646
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 646
    if (tmp___5 != 0) {
#line 646
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 646
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
    if (tmp___7 < 0) {
#line 646
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 646, tmp___6);
    } else {

    }
  } else {

  }
#line 647
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 648
  req->rq_state = req->rq_state | 64UL;
#line 651
  if ((req->rq_state & 16UL) == 0UL) {
#line 652
    _req_may_be_done(req, m);
  } else {

  }
#line 653
  goto ldv_44448;
  case 12U: 
#line 656
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 661
  if ((unsigned int )what == 13U) {
#line 662
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 665
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 683
  req->rq_state = req->rq_state | 128UL;
#line 684
  if ((req->rq_state & 8UL) == 0UL) {
#line 684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            684);
  } else {

  }
#line 685
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 685
  if (tmp___8 != 0) {
#line 685
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 685
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
  if (tmp___10 < 0) {
#line 685
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 685, tmp___9);
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 687
  _req_may_be_done_not_susp(req, m);
#line 688
  goto ldv_44448;
  case 14U: ;
#line 692
  if ((req->rq_state & 8UL) != 0UL) {
#line 693
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 693
    if (tmp___11 != 0) {
#line 693
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 693
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
    if (tmp___13 < 0) {
#line 693
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 693, tmp___12);
    } else {

    }
  } else {

  }
#line 694
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 696
  req->rq_state = req->rq_state | 64UL;
#line 697
  _req_may_be_done_not_susp(req, m);
#line 699
  goto ldv_44448;
  case 22U: ;
#line 702
  if ((req->rq_state & 2UL) == 0UL) {
#line 703
    goto ldv_44448;
  } else {

  }
#line 705
  _req_may_be_done(req, m);
#line 706
  goto ldv_44448;
  case 23U: ;
#line 709
  if ((req->rq_state & 2UL) == 0UL) {
#line 710
    goto ldv_44448;
  } else {

  }
#line 712
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 714
  rv = 2;
#line 715
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 716
    rv = 1;
  } else {

  }
#line 718
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 719
  req->w.cb = & w_restart_disk_io;
#line 720
  drbd_queue_work(& mdev->data.work, & req->w);
#line 721
  goto ldv_44448;
  case 21U: ;
#line 728
  if ((req->rq_state & 128UL) == 0UL) {
#line 729
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 730
      drbd_queue_work(& mdev->data.work, & req->w);
#line 731
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 733
    goto ldv_44448;
  } else {

  }
  case 15U: ;
#line 738
  if ((req->rq_state & 1024UL) == 0UL) {
#line 739
    goto ldv_44448;
  } else {

  }
#line 741
  if ((req->rq_state & 8UL) != 0UL) {
#line 745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 746
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 748
  if ((req->rq_state & 32UL) == 0UL) {
#line 748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            748);
  } else {

  }
#line 749
  req->rq_state = req->rq_state | 64UL;
#line 750
  _req_may_be_done(req, m);
#line 751
  goto ldv_44448;
  case 16U: ;
#line 754
  if ((req->rq_state & 8UL) == 0UL) {
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            754);
  } else {

  }
#line 755
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 755
  if (tmp___14 != 0) {
#line 755
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 755
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 755
  if (tmp___16 < 0) {
#line 755
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 755
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 755, tmp___15);
  } else {

  }
#line 756
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 757
  req->rq_state = req->rq_state | 192UL;
#line 758
  _req_may_be_done_not_susp(req, m);
#line 759
  goto ldv_44448;
  }
  ldv_44448: ;
#line 762
  return (rv);
}
}
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 777
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 778
    return (1);
  } else {

  }
#line 779
  if ((int )mdev->state.ldv_35532.disk > 4) {
#line 780
    return (0);
  } else {

  }
#line 781
  if ((int )mdev->state.ldv_35532.disk <= 3) {
#line 782
    return (0);
  } else {

  }
#line 784
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 785
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 787
  if (sector >= nr_sectors) {
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            787);
  } else {

  }
#line 788
  if (esector >= nr_sectors) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            788);
  } else {

  }
#line 790
  sbnr = sector >> 3;
#line 791
  ebnr = esector >> 3;
#line 793
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 793
  return (tmp == 0);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 798
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 799
  size = (int const   )bio->bi_size;
#line 800
  sector = bio->bi_sector;
#line 801
  b = 0;
#line 804
  err = -5;
#line 805
  ret = 0;
#line 808
  req = drbd_req_new(mdev, bio);
#line 809
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 810
    dec_ap_bio(mdev);
#line 813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 814
    bio_endio(bio, -12);
#line 815
    return (0);
  } else {

  }
#line 818
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 819
  if (local == 0) {
#line 820
    bio_put(req->private_bio);
#line 821
    req->private_bio = 0;
  } else {

  }
#line 823
  if (rw == 1) {
#line 824
    remote = 1;
  } else {
#line 827
    if (local != 0) {
#line 828
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 828
      if (tmp == 0) {
#line 834
        local = 0;
#line 835
        bio_put(req->private_bio);
#line 836
        req->private_bio = 0;
#line 837
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 840
    remote = local == 0 && (int )mdev->state.ldv_35532.pdsk > 7;
  }
#line 851
  if ((rw == 1024 && (int )mdev->state.ldv_35532.disk > 3) && local == 0) {
#line 852
    err = -11;
#line 853
    goto fail_and_free_req;
  } else {

  }
#line 861
  if (rw == 1 && local != 0) {
#line 861
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 861
    if (tmp___0 == 0) {
#line 862
      req->rq_state = req->rq_state | 2048UL;
#line 863
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 866
  remote = remote != 0 && (*((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35532.conn > 9));
#line 870
  if (local == 0 && remote == 0) {
#line 870
    tmp___1 = is_susp(mdev->state);
#line 870
    if (tmp___1 == 0) {
#line 871
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 872
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 881
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 881
    tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 881
    if (tmp___3 != 0) {
      allocate_barrier: 
#line 885
      tmp___2 = kmalloc___2(56UL, 16U);
#line 885
      b = (struct drbd_tl_epoch *)tmp___2;
#line 886
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 887
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 888
        err = -12;
#line 889
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 894
  spin_lock_irq(& mdev->req_lock);
#line 896
  tmp___4 = is_susp(mdev->state);
#line 896
  if (tmp___4 != 0) {
#line 901
    ret = 1;
#line 902
    spin_unlock_irq(& mdev->req_lock);
#line 903
    goto fail_free_complete;
  } else {

  }
#line 906
  if (remote != 0) {
#line 907
    remote = *((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35532.conn > 9);
#line 910
    if (remote == 0) {
#line 911
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 912
    if (local == 0 && remote == 0) {
#line 913
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 914
      spin_unlock_irq(& mdev->req_lock);
#line 915
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 919
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 920
    mdev->unused_spare_tle = b;
#line 921
    b = 0;
  } else {

  }
#line 923
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 923
    tmp___5 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 923
    if (tmp___5 != 0) {
#line 928
      spin_unlock_irq(& mdev->req_lock);
#line 929
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 934
  _drbd_start_io_acct(mdev, req, bio);
#line 946
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 946
    tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 946
    if (tmp___7 != 0) {
#line 948
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 949
      mdev->unused_spare_tle = 0;
    } else {
#line 946
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 951
  if (remote != 0 && rw == 1) {
#line 951
    tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 951
    if (tmp___6 != 0) {
#line 951
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              952);
    } else {

    }
  } else {

  }
#line 970
  if (remote != 0) {
#line 971
    _req_mod(req, to_be_send);
  } else {

  }
#line 972
  if (local != 0) {
#line 973
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 978
  if (rw == 1) {
#line 978
    tmp___8 = _req_conflicts(req);
#line 978
    if (tmp___8 != 0) {
#line 979
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 981
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 985
  if (remote != 0) {
#line 990
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 994
  spin_unlock_irq(& mdev->req_lock);
#line 995
  kfree((void const   *)b);
#line 997
  if (local != 0) {
#line 998
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1000
    tmp___9 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1000
    if (tmp___9 != 0) {
#line 1003
      bio_endio(req->private_bio, -5);
    } else {
#line 1005
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 1010
  drbd_plug_device(mdev);
#line 1012
  return (0);
  fail_conflicting: 
#line 1021
  _drbd_end_io_acct(mdev, req);
#line 1022
  spin_unlock_irq(& mdev->req_lock);
#line 1023
  if (remote != 0) {
#line 1024
    tmp___10 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1024
    if (tmp___10 != 0) {
#line 1024
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1024
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1024
    if (tmp___12 < 0) {
#line 1024
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1024
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1024, tmp___11);
    } else {

    }
  } else {

  }
#line 1027
  err = 0;
  fail_free_complete: ;
#line 1030
  if (rw == 1 && local != 0) {
#line 1031
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1033
  if (local != 0) {
#line 1034
    bio_put(req->private_bio);
#line 1035
    req->private_bio = 0;
#line 1036
    put_ldev(mdev);
  } else {

  }
#line 1038
  if (ret == 0) {
#line 1039
    bio_endio(bio, err);
  } else {

  }
#line 1041
  drbd_req_free(req);
#line 1042
  dec_ap_bio(mdev);
#line 1043
  kfree((void const   *)b);
#line 1045
  return (ret);
}
}
#line 1053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1055
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1057
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1057
    if (tmp___1 != 0) {
#line 1058
      tmp = get_current();
#line 1058
      tmp___0 = get_current();
#line 1058
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1064
    return (1);
  } else {

  }
#line 1067
  return (0);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1073
  mdev = (struct drbd_conf *)q->queuedata;
#line 1075
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1075
  if (tmp != 0) {
#line 1076
    bio_endio(bio, -1);
#line 1077
    return (0);
  } else {

  }
#line 1088
  tmp___0 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 1088
  if (tmp___0 != 0L) {
#line 1088
    tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 1088
    if (tmp___1 != 0) {
#line 1090
      bio_endio(bio, -95);
#line 1091
      return (0);
    } else {

    }
  } else {

  }
#line 1097
  if (bio->bi_size == 0U) {
#line 1097
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1097);
  } else {

  }
#line 1098
  if ((bio->bi_size & 511U) != 0U) {
#line 1098
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1098);
  } else {

  }
#line 1099
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1099);
  } else {

  }
#line 1103
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1104
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1106
  tmp___3 = __builtin_expect(s_enr == e_enr, 1L);
#line 1106
  if (tmp___3 != 0L) {
#line 1107
    inc_ap_bio(mdev, 1);
#line 1108
    tmp___2 = drbd_make_request_common(mdev, bio);
#line 1108
    return (tmp___2);
  } else {

  }
#line 1113
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1115
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1119
    bio_endio(bio, -22);
  } else {
#line 1131
    sect = bio->bi_sector;
#line 1132
    sps = 256;
#line 1133
    mask = sps + -1;
#line 1134
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1135
    bp = bio_split(bio, (int )first_sectors);
#line 1146
    inc_ap_bio(mdev, 3);
#line 1148
    if (s_enr + 1U != e_enr) {
#line 1148
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1148);
    } else {

    }
#line 1150
    goto ldv_44536;
    ldv_44535: 
#line 1151
    inc_ap_bio(mdev, 1);
    ldv_44536: 
#line 1150
    tmp___4 = drbd_make_request_common(mdev, & bp->bio1);
#line 1150
    if (tmp___4 != 0) {
#line 1151
      goto ldv_44535;
    } else {

    }

#line 1153
    goto ldv_44539;
    ldv_44538: 
#line 1154
    inc_ap_bio(mdev, 1);
    ldv_44539: 
#line 1153
    tmp___5 = drbd_make_request_common(mdev, & bp->bio2);
#line 1153
    if (tmp___5 != 0) {
#line 1154
      goto ldv_44538;
    } else {

    }
#line 1156
    dec_ap_bio(mdev);
#line 1158
    bio_pair_release(bp);
  }
#line 1160
  return (0);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1178
  mdev = (struct drbd_conf *)q->queuedata;
#line 1179
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1181
  bio_size = bvm->bi_size;
#line 1184
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1186
  if (limit < 0) {
#line 1187
    limit = 0;
  } else {

  }
#line 1188
  if (bio_size == 0U) {
#line 1189
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1190
      limit = (int )bvec->bv_len;
    } else
#line 1191
    if (limit != 0) {
#line 1191
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1191
      if (tmp != 0) {
#line 1192
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1194
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1195
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1196
          _min1 = limit;
#line 1196
          _min2 = backing_limit;
#line 1196
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1198
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1200
  return (limit);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1208
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1210
  mutex_lock(ldv_func_arg1);
#line 1211
  return;
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1218
  tmp = mutex_trylock(ldv_func_arg1);
#line 1218
  ldv_func_res = tmp;
#line 1220
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1220
  return (tmp___0);
#line 1222
  return (ldv_func_res);
}
}
#line 1225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1230
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1232
  mutex_unlock(ldv_func_arg1);
#line 1233
  return;
}
}
#line 1235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1240
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1242
  mutex_lock(ldv_func_arg1);
#line 1243
  return;
}
}
#line 1245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1250
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1252
  mutex_unlock(ldv_func_arg1);
#line 1253
  return;
}
}
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1260
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1262
  mutex_unlock(ldv_func_arg1);
#line 1263
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 130
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) ;
#line 162
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 46
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_10943: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_10943;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___3(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___3(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 319 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 321
  page = compound_head(page);
#line 322
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 322
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 322
  if (tmp___0 != 0L) {
#line 322
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (322), "i" (12UL));
    ldv_16289: ;
#line 322
    goto ldv_16289;
  } else {

  }
#line 323
  atomic_inc(& page->_count);
#line 324
  return;
}
}
#line 938 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 940
  retval = 512;
#line 942
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 943
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 945
  return ((unsigned short )retval);
}
}
#line 948 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 950
  tmp = bdev_get_queue(bdev);
#line 950
  tmp___0 = queue_logical_block_size(tmp);
#line 950
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1635 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1644
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1645
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1646
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1654
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_43952;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35532.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35532.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_43952;
  }
  ldv_43952: ;
#line 1816
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1829
  if (error != 0) {
#line 1831
    tmp = spinlock_check(& mdev->req_lock);
#line 1831
    flags = _raw_spin_lock_irqsave(tmp);
#line 1832
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1833
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1835
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 132
  md_io.mdev = mdev;
#line 133
  init_completion(& md_io.event);
#line 134
  md_io.error = 0;
#line 136
  if (rw & 1) {
#line 136
    tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 136
    if (tmp == 0) {
#line 137
      rw = rw | 16;
    } else {

    }
  } else {

  }
#line 138
  rw = rw | 544;
  retry: 
#line 141
  bio = bio_alloc(16U, 1);
#line 142
  bio->bi_bdev = bdev->md_bdev;
#line 143
  bio->bi_sector = sector;
#line 144
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 144
  ok = tmp___0 == size;
#line 145
  if (ok == 0) {
#line 146
    goto out;
  } else {

  }
#line 147
  bio->bi_private = (void *)(& md_io);
#line 148
  bio->bi_end_io = & drbd_md_io_complete;
#line 149
  bio->bi_rw = (unsigned long )rw;
#line 151
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 151
  if (tmp___1 != 0) {
#line 152
    bio_endio(bio, -5);
  } else {
#line 154
    submit_bio(rw, bio);
  }
#line 155
  wait_for_completion(& md_io.event);
#line 156
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 161
  tmp___2 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 161
  if (tmp___2 != 0L) {
#line 161
    tmp___3 = __builtin_expect(ok == 0, 0L);
#line 161
    if (tmp___3 != 0L) {
#line 163
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Barriers not supported on meta data device - disabling\n");
#line 164
      set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 165
      rw = rw & -17;
#line 166
      bio_put(bio);
#line 167
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 170
  bio_put(bio);
#line 171
  return (ok);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 178
  offset = 0;
#line 179
  iop = mdev->md_io_page;
#line 181
  tmp = ldv_mutex_is_locked_99(& mdev->md_io_mutex);
#line 181
  if (tmp == 0) {
#line 181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            181);
  } else {

  }
#line 183
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 183
  if (tmp___0 != 0L) {
#line 183
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (183), "i" (12UL));
    ldv_44267: ;
#line 183
    goto ldv_44267;
  } else {

  }
#line 185
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 185
  logical_block_size = (int )tmp___1;
#line 186
  if (logical_block_size == 0) {
#line 187
    logical_block_size = 512;
  } else {

  }
#line 190
  if (logical_block_size != 512) {
#line 191
    mask = logical_block_size / 512 + -1;
#line 192
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 192
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              192);
    } else {

    }
#line 193
    if ((mask + 1) * 512 != logical_block_size) {
#line 193
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              193);
    } else {

    }
#line 194
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 195
    sector = (sector_t )(~ mask) & sector;
#line 196
    iop = mdev->md_io_tmpp;
#line 198
    if (rw & 1) {
#line 201
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 201
      p = tmp___2;
#line 202
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 202
      hp = tmp___3;
#line 204
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 207
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 207
      if (tmp___4 != 0L) {
#line 208
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 211
        return (0);
      } else {

      }
#line 214
      __len = 512UL;
#line 214
      if (__len > 63UL) {
#line 214
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 214
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 218
  tmp___7 = drbd_md_first_sector(bdev);
#line 218
  if (tmp___7 > sector) {
#line 220
    tmp___5 = get_current();
#line 220
    tmp___6 = get_current();
#line 220
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 218
    tmp___8 = drbd_md_last_sector(bdev);
#line 218
    if (tmp___8 < sector) {
#line 220
      tmp___5 = get_current();
#line 220
      tmp___6 = get_current();
#line 220
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 224
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 225
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 225
  if (tmp___9 != 0L) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 228
    return (0);
  } else {

  }
#line 231
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 232
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 232
    p___0 = tmp___10;
#line 233
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 233
    hp___0 = tmp___11;
#line 235
    __len___0 = 512UL;
#line 235
    if (__len___0 > 63UL) {
#line 235
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 235
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 238
  return (ok);
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 245
  al_flags = 0UL;
#line 247
  spin_lock_irq(& mdev->al_lock);
#line 248
  tmp = lc_find(mdev->resync, enr / 4U);
#line 249
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 249
  if (tmp___1 != 0L) {
#line 250
    __mptr = (struct lc_element  const  *)tmp;
#line 250
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 251
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 251
    if (tmp___0 != 0) {
#line 252
      spin_unlock_irq(& mdev->al_lock);
#line 253
      return (0);
    } else {

    }
  } else {

  }
#line 256
  al_ext = lc_get(mdev->act_log, enr);
#line 257
  al_flags = (mdev->act_log)->flags;
#line 258
  spin_unlock_irq(& mdev->al_lock);
#line 269
  return (al_ext);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 274
  enr = (unsigned int )(sector >> 13);
#line 278
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 278
  if (tmp <= 0) {
#line 278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            278);
  } else {

  }
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_44296;
  } else {

  }
#line 280
  tmp___0 = get_current();
#line 280
  __wait.flags = 0U;
#line 280
  __wait.private = (void *)tmp___0;
#line 280
  __wait.func = & autoremove_wake_function;
#line 280
  __wait.task_list.next = & __wait.task_list;
#line 280
  __wait.task_list.prev = & __wait.task_list;
  ldv_44299: 
#line 280
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_44298;
  } else {

  }
#line 280
  schedule();
#line 280
  goto ldv_44299;
  ldv_44298: 
#line 280
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44296: ;
#line 282
  if (al_ext->lc_number != enr) {
#line 289
    init_completion(& al_work.event);
#line 290
    al_work.al_ext = al_ext;
#line 291
    al_work.enr = enr;
#line 292
    al_work.old_enr = al_ext->lc_number;
#line 293
    al_work.w.cb = & w_al_write_transaction;
#line 294
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 295
    wait_for_completion(& al_work.event);
#line 297
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 299
    spin_lock_irq(& mdev->al_lock);
#line 300
    lc_changed(mdev->act_log, al_ext);
#line 301
    spin_unlock_irq(& mdev->al_lock);
#line 302
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 308
  enr = (unsigned int )(sector >> 13);
#line 312
  tmp = spinlock_check(& mdev->al_lock);
#line 312
  flags = _raw_spin_lock_irqsave(tmp);
#line 314
  extent = lc_find(mdev->act_log, enr);
#line 316
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 317
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 319
    return;
  } else {

  }
#line 322
  tmp___0 = lc_put(mdev->act_log, extent);
#line 322
  if (tmp___0 == 0U) {
#line 323
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 325
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 326
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  unsigned int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  int tmp___9 ;

  {
#line 331
  __mptr = (struct drbd_work  const  *)w;
#line 331
  aw = (struct update_al_work *)__mptr;
#line 332
  updated = aw->al_ext;
#line 333
  new_enr = aw->enr;
#line 334
  evicted = aw->old_enr;
#line 339
  xor_sum = 0U;
#line 341
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 341
  if (tmp == 0) {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "get_ldev() failed in w_al_write_transaction\n");
#line 343
    complete(& ((struct update_al_work *)w)->event);
#line 344
    return (1);
  } else {

  }
#line 350
  if ((int )mdev->state.ldv_35532.conn <= 9 && evicted != 4294967295U) {
#line 351
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 353
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 354
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 354
  buffer = (struct al_transaction *)tmp___0;
#line 356
  buffer->magic = 1728214147U;
#line 357
  tmp___1 = __fswab32(mdev->al_tr_number);
#line 357
  buffer->tr_number = tmp___1;
#line 359
  tmp___2 = lc_index_of(mdev->act_log, updated);
#line 359
  n = (int )tmp___2;
#line 361
  tmp___3 = __fswab32((__u32 )n);
#line 361
  buffer->updates[0].pos = tmp___3;
#line 362
  tmp___4 = __fswab32(new_enr);
#line 362
  buffer->updates[0].extent = tmp___4;
#line 364
  xor_sum = xor_sum ^ new_enr;
#line 366
  __min1 = 61;
#line 366
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 366
  mx = __min1 < __min2 ? __min1 : __min2;
#line 368
  i = 0;
#line 368
  goto ldv_44333;
  ldv_44332: 
#line 369
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 370
  tmp___5 = lc_element_by_index(mdev->act_log, idx);
#line 370
  extent_nr = tmp___5->lc_number;
#line 371
  tmp___6 = __fswab32(idx);
#line 371
  buffer->updates[i + 1].pos = tmp___6;
#line 372
  tmp___7 = __fswab32(extent_nr);
#line 372
  buffer->updates[i + 1].extent = tmp___7;
#line 373
  xor_sum = xor_sum ^ extent_nr;
#line 368
  i = i + 1;
  ldv_44333: ;
#line 368
  if (i < mx) {
#line 369
    goto ldv_44332;
  } else {

  }

#line 375
  goto ldv_44336;
  ldv_44335: 
#line 376
  buffer->updates[i + 1].pos = 4294967295U;
#line 377
  buffer->updates[i + 1].extent = 4294967295U;
#line 378
  xor_sum = ~ xor_sum;
#line 375
  i = i + 1;
  ldv_44336: ;
#line 375
  if (i <= 60) {
#line 376
    goto ldv_44335;
  } else {

  }
#line 380
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 381
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 382
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 384
  tmp___8 = __fswab32(xor_sum);
#line 384
  buffer->xor_sum = tmp___8;
#line 386
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 389
  tmp___9 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 389
  if (tmp___9 == 0) {
#line 390
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 392
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 392
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 394
    mdev->al_tr_pos = 0;
  } else {

  }
#line 396
  if (mdev->al_tr_pos > 63) {
#line 396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            396);
  } else {

  }
#line 397
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 399
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 401
  complete(& ((struct update_al_work *)w)->event);
#line 402
  put_ldev(mdev);
#line 404
  return (1);
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 423
  xor_sum = 0U;
#line 425
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 429
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 429
  if (tmp == 0) {
#line 430
    return (-1);
  } else {

  }
#line 432
  tmp___0 = __fswab32(b->magic);
#line 432
  rv = tmp___0 == 2205418087U;
#line 434
  i = 0;
#line 434
  goto ldv_44350;
  ldv_44349: 
#line 435
  tmp___1 = __fswab32(b->updates[i].extent);
#line 435
  xor_sum = tmp___1 ^ xor_sum;
#line 434
  i = i + 1;
  ldv_44350: ;
#line 434
  if (i <= 61) {
#line 435
    goto ldv_44349;
  } else {

  }
#line 436
  tmp___2 = __fswab32(b->xor_sum);
#line 436
  rv = (tmp___2 == xor_sum) & rv;
#line 438
  return (rv);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 454
  active_extents = 0;
#line 455
  transactions = 0;
#line 456
  found_valid = 0;
#line 457
  from = 0;
#line 458
  to = 0;
#line 459
  from_tnr = 0U;
#line 460
  to_tnr = 0U;
#line 463
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 468
  ldv_mutex_lock_102(& mdev->md_io_mutex);
#line 469
  tmp = lowmem_page_address(mdev->md_io_page);
#line 469
  buffer = (struct al_transaction *)tmp;
#line 472
  i = 0;
#line 472
  goto ldv_44370;
  ldv_44369: 
#line 473
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 474
  if (rv == 0) {
#line 475
    goto ldv_44368;
  } else {

  }
#line 476
  if (rv == -1) {
#line 477
    ldv_mutex_unlock_103(& mdev->md_io_mutex);
#line 478
    return (0);
  } else {

  }
#line 480
  tmp___0 = __fswab32(buffer->tr_number);
#line 480
  cnr = tmp___0;
#line 482
  found_valid = found_valid + 1;
#line 482
  if (found_valid == 1) {
#line 483
    from = i;
#line 484
    to = i;
#line 485
    from_tnr = cnr;
#line 486
    to_tnr = cnr;
#line 487
    goto ldv_44368;
  } else {

  }
#line 489
  if ((int )cnr - (int )from_tnr < 0) {
#line 490
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 490
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              490);
    } else {

    }
#line 491
    from = i;
#line 492
    from_tnr = cnr;
  } else {

  }
#line 494
  if ((int )cnr - (int )to_tnr > 0) {
#line 495
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 495
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              495);
    } else {

    }
#line 496
    to = i;
#line 497
    to_tnr = cnr;
  } else {

  }
  ldv_44368: 
#line 472
  i = i + 1;
  ldv_44370: ;
#line 472
  if (i <= mx) {
#line 473
    goto ldv_44369;
  } else {

  }

#line 501
  if (found_valid == 0) {
#line 502
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 503
    ldv_mutex_unlock_104(& mdev->md_io_mutex);
#line 504
    return (1);
  } else {

  }
#line 509
  i = from;
  ldv_44385: 
#line 515
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 516
  _b = rv == 0;
#line 516
  if (_b != 0) {
#line 516
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            516);
  } else {

  }
#line 516
  if (_b != 0) {
#line 516
    goto cancel;
  } else {

  }
#line 517
  if (rv == -1) {
#line 518
    ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 519
    return (0);
  } else {

  }
#line 522
  tmp___1 = __fswab32(buffer->tr_number);
#line 522
  trn = tmp___1;
#line 524
  spin_lock_irq(& mdev->al_lock);
#line 530
  j = 61;
#line 530
  goto ldv_44382;
  ldv_44381: 
#line 531
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 531
  pos = (int )tmp___2;
#line 532
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 532
  extent_nr = tmp___3;
#line 534
  if (extent_nr == 4294967295U) {
#line 535
    goto ldv_44380;
  } else {

  }
#line 537
  lc_set(mdev->act_log, extent_nr, pos);
#line 538
  active_extents = active_extents + 1;
  ldv_44380: 
#line 530
  j = j - 1;
  ldv_44382: ;
#line 530
  if (j >= 0) {
#line 531
    goto ldv_44381;
  } else {

  }
#line 540
  spin_unlock_irq(& mdev->al_lock);
#line 542
  transactions = transactions + 1;
  cancel: ;
#line 545
  if (i == to) {
#line 546
    goto ldv_44384;
  } else {

  }
#line 547
  i = i + 1;
#line 548
  if (i > mx) {
#line 549
    i = 0;
  } else {

  }
#line 550
  goto ldv_44385;
  ldv_44384: 
#line 552
  mdev->al_tr_number = to_tnr + 1U;
#line 553
  mdev->al_tr_pos = to;
#line 554
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 554
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 556
    mdev->al_tr_pos = 0;
  } else {

  }
#line 559
  ldv_mutex_unlock_106(& mdev->md_io_mutex);
#line 561
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 564
  return (1);
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 569
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 570
  mdev = wc->mdev;
#line 572
  uptodate = (int )bio->bi_flags & 1;
#line 577
  if (error == 0 && uptodate == 0) {
#line 578
    error = -5;
  } else {

  }
#line 580
  drbd_chk_io_error____0(mdev, error, 1, "atodb_endio");
#line 581
  if (error != 0 && wc->error == 0) {
#line 582
    wc->error = error;
  } else {

  }
#line 584
  tmp = atomic_dec_and_test(& wc->count);
#line 584
  if (tmp != 0) {
#line 585
    complete(& wc->io_done);
  } else {

  }
#line 587
  page = (bio->bi_io_vec)->bv_page;
#line 588
  put_page(page);
#line 589
  bio_put(bio);
#line 590
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 591
  put_ldev(mdev);
#line 592
  return;
}
}
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 607
  page_offset___0 = 4096U;
#line 609
  i = 0;
#line 610
  err = -12;
#line 614
  enr = enr & 4294967288U;
#line 615
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 618
  if ((on_disk_sector & 7UL) != 0UL) {
#line 618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            618);
  } else {

  }
#line 627
  goto ldv_44409;
  ldv_44408: ;
#line 628
  if (bio->bi_sector == on_disk_sector) {
#line 629
    return (0);
  } else {

  }
#line 630
  i = i + 1;
  ldv_44409: 
#line 627
  bio = *(bios + (unsigned long )i);
#line 627
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 628
    goto ldv_44408;
  } else {

  }
#line 635
  bio = bio_alloc(208U, 1);
#line 636
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 637
    return (-12);
  } else {

  }
#line 639
  if (i > 0) {
#line 640
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 641
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 642
    page = prev_bv->bv_page;
  } else {

  }
#line 644
  if (page_offset___0 == 4096U) {
#line 645
    page = alloc_pages(2U, 0U);
#line 646
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 647
      goto out_bio_put;
    } else {

    }
#line 648
    page_offset___0 = 0U;
  } else {
#line 650
    get_page(page);
  }
#line 653
  offset = (int )(enr << 6);
#line 654
  tmp = kmap(page);
#line 655
  __min1 = 512UL;
#line 655
  tmp___0 = drbd_bm_words(mdev);
#line 655
  __min2 = tmp___0 - (size_t )offset;
#line 655
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 657
  kunmap(page);
#line 659
  bio->bi_private = (void *)wc;
#line 660
  bio->bi_end_io = & atodb_endio;
#line 661
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 662
  bio->bi_sector = on_disk_sector;
#line 664
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 664
  if (tmp___1 != 4096) {
#line 665
    goto out_put_page;
  } else {

  }
#line 667
  atomic_inc(& wc->count);
#line 673
  atomic_inc(& mdev->local_cnt);
#line 675
  *(bios + (unsigned long )i) = bio;
#line 677
  return (0);
  out_put_page: 
#line 680
  err = -22;
#line 681
  put_page(page);
  out_bio_put: 
#line 683
  bio_put(bio);
#line 684
  return (err);
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 701
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 701
  _b = tmp == 0;
#line 701
  if (_b != 0) {
#line 701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            701);
  } else {

  }
#line 701
  if (_b != 0) {
#line 702
    return;
  } else {

  }
#line 704
  tmp___0 = lc_try_lock(mdev->act_log);
#line 704
  if (tmp___0 != 0) {
#line 704
    goto ldv_44428;
  } else {

  }
#line 704
  tmp___1 = get_current();
#line 704
  __wait.flags = 0U;
#line 704
  __wait.private = (void *)tmp___1;
#line 704
  __wait.func = & autoremove_wake_function;
#line 704
  __wait.task_list.next = & __wait.task_list;
#line 704
  __wait.task_list.prev = & __wait.task_list;
  ldv_44431: 
#line 704
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 704
  tmp___2 = lc_try_lock(mdev->act_log);
#line 704
  if (tmp___2 != 0) {
#line 704
    goto ldv_44430;
  } else {

  }
#line 704
  schedule();
#line 704
  goto ldv_44431;
  ldv_44430: 
#line 704
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44428: 
#line 706
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 709
  tmp___3 = kzalloc___1((unsigned long )nr_elements * 8UL, 208U);
#line 709
  bios = (struct bio **)tmp___3;
#line 710
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 711
    goto submit_one_by_one;
  } else {

  }
#line 713
  atomic_set(& wc.count, 0);
#line 714
  init_completion(& wc.io_done);
#line 715
  wc.mdev = mdev;
#line 716
  wc.error = 0;
#line 718
  i = 0;
#line 718
  goto ldv_44436;
  ldv_44435: 
#line 719
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 719
  enr = tmp___4->lc_number;
#line 720
  if (enr == 4294967295U) {
#line 721
    goto ldv_44433;
  } else {

  }
#line 723
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 723
  if (tmp___5 != 0) {
#line 726
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_44433: 
#line 718
  i = i + 1;
  ldv_44436: ;
#line 718
  if (i < nr_elements) {
#line 719
    goto ldv_44435;
  } else {

  }
#line 730
  lc_unlock(mdev->act_log);
#line 731
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 734
  i = 0;
#line 734
  goto ldv_44440;
  ldv_44439: ;
#line 735
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 736
    goto ldv_44438;
  } else {

  }
#line 737
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 737
  if (tmp___6 != 0) {
#line 738
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 739
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 741
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 734
  i = i + 1;
  ldv_44440: ;
#line 734
  if (i < nr_elements) {
#line 735
    goto ldv_44439;
  } else {

  }
  ldv_44438: 
#line 745
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 745
  drbd_blk_run_queue(tmp___7);
#line 748
  drbd_md_flush(mdev);
#line 756
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 756
  if (tmp___8 != 0) {
#line 757
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 759
  put_ldev(mdev);
#line 761
  kfree((void const   *)bios);
#line 762
  return;
  free_bios_submit_one_by_one: 
#line 766
  i = 0;
#line 766
  goto ldv_44442;
  ldv_44441: 
#line 767
  bio_endio(*(bios + (unsigned long )i), 0);
#line 766
  i = i + 1;
  ldv_44442: ;
#line 766
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 767
    goto ldv_44441;
  } else {

  }
#line 769
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 772
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 774
  i = 0;
#line 774
  goto ldv_44446;
  ldv_44445: 
#line 775
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 775
  enr = tmp___9->lc_number;
#line 776
  if (enr == 4294967295U) {
#line 777
    goto ldv_44444;
  } else {

  }
#line 780
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_44444: 
#line 774
  i = i + 1;
  ldv_44446: ;
#line 774
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 775
    goto ldv_44445;
  } else {

  }
#line 783
  lc_unlock(mdev->act_log);
#line 784
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 785
  put_ldev(mdev);
#line 786
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;

  {
#line 795
  add = 0UL;
#line 799
  tmp = lc_try_lock(mdev->act_log);
#line 799
  if (tmp != 0) {
#line 799
    goto ldv_44455;
  } else {

  }
#line 799
  tmp___0 = get_current();
#line 799
  __wait.flags = 0U;
#line 799
  __wait.private = (void *)tmp___0;
#line 799
  __wait.func = & autoremove_wake_function;
#line 799
  __wait.task_list.next = & __wait.task_list;
#line 799
  __wait.task_list.prev = & __wait.task_list;
  ldv_44458: 
#line 799
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 799
  tmp___1 = lc_try_lock(mdev->act_log);
#line 799
  if (tmp___1 != 0) {
#line 799
    goto ldv_44457;
  } else {

  }
#line 799
  schedule();
#line 799
  goto ldv_44458;
  ldv_44457: 
#line 799
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44455: 
#line 801
  i = 0;
#line 801
  goto ldv_44461;
  ldv_44460: 
#line 802
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 802
  enr = tmp___2->lc_number;
#line 803
  if (enr == 4294967295U) {
#line 804
    goto ldv_44459;
  } else {

  }
#line 805
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 805
  add = tmp___3 + add;
  ldv_44459: 
#line 801
  i = i + 1;
  ldv_44461: ;
#line 801
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 802
    goto ldv_44460;
  } else {

  }
#line 808
  lc_unlock(mdev->act_log);
#line 809
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 811
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 811
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___4);
#line 812
  return;
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 819
  spin_lock_irq(& mdev->al_lock);
#line 820
  rv = al_ext->refcnt == 0U;
#line 821
  tmp = __builtin_expect(rv != 0, 1L);
#line 821
  if (tmp != 0L) {
#line 822
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 823
  spin_unlock_irq(& mdev->al_lock);
#line 825
  return (rv);
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 842
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 842
  if (tmp == 0) {
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            842);
  } else {

  }
#line 844
  i = 0;
#line 844
  goto ldv_44479;
  ldv_44478: 
#line 845
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 846
  if (al_ext->lc_number == 4294967295U) {
#line 847
    goto ldv_44473;
  } else {

  }
#line 848
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 848
  if (tmp___0 != 0) {
#line 848
    goto ldv_44474;
  } else {

  }
#line 848
  tmp___1 = get_current();
#line 848
  __wait.flags = 0U;
#line 848
  __wait.private = (void *)tmp___1;
#line 848
  __wait.func = & autoremove_wake_function;
#line 848
  __wait.task_list.next = & __wait.task_list;
#line 848
  __wait.task_list.prev = & __wait.task_list;
  ldv_44477: 
#line 848
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 848
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 848
  if (tmp___2 != 0) {
#line 848
    goto ldv_44476;
  } else {

  }
#line 848
  schedule();
#line 848
  goto ldv_44477;
  ldv_44476: 
#line 848
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44474: ;
  ldv_44473: 
#line 844
  i = i + 1;
  ldv_44479: ;
#line 844
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 845
    goto ldv_44478;
  } else {

  }
#line 851
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 852
  return;
}
}
#line 854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 856
  __mptr = (struct drbd_work  const  *)w;
#line 856
  udw = (struct update_odbm_work *)__mptr;
#line 858
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 858
  if (tmp___0 == 0) {
#line 859
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 859
    if (tmp != 0) {
#line 860
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 861
    kfree((void const   *)udw);
#line 862
    return (1);
  } else {

  }
#line 865
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 866
  put_ldev(mdev);
#line 868
  kfree((void const   *)udw);
#line 870
  tmp___1 = drbd_bm_total_weight(mdev);
#line 870
  if (tmp___1 <= mdev->rs_failed) {
#line 871
    switch ((int )mdev->state.ldv_35532.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 874
    drbd_resync_finished(mdev);
    default: ;
#line 877
    goto ldv_44495;
    }
    ldv_44495: ;
  } else {

  }
#line 880
  drbd_bcast_sync_progress(mdev);
#line 882
  return (1);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 900
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 900
  if (tmp == 0) {
#line 900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            900);
  } else {

  }
#line 904
  enr = (unsigned int )(sector >> 15);
#line 906
  e = lc_get(mdev->resync, enr);
#line 907
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 908
    __mptr = (struct lc_element  const  *)e;
#line 908
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 909
    if (ext->lce.lc_number == enr) {
#line 910
      if (success != 0) {
#line 911
        ext->rs_left = ext->rs_left - count;
      } else {
#line 913
        ext->rs_failed = ext->rs_failed + count;
      }
#line 914
      if (ext->rs_left < ext->rs_failed) {
#line 915
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 920
        dump_stack();
#line 922
        lc_put(mdev->resync, & ext->lce);
#line 923
        val.i = 0U;
#line 923
        val.ldv_35532.conn = 1U;
#line 923
        mask.i = 0U;
#line 923
        mask.ldv_35532.conn = 31U;
#line 923
        drbd_force_state(mdev, mask, val);
#line 924
        return;
      } else {

      }
    } else {
#line 933
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 933
      rs_left = tmp___0;
#line 934
      if (ext->flags != 0UL) {
#line 935
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 939
        ext->flags = 0UL;
      } else {

      }
#line 941
      if (ext->rs_failed != 0) {
#line 942
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 945
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 947
      ext->rs_left = rs_left;
#line 948
      ext->rs_failed = success == 0 ? count : 0;
#line 949
      lc_changed(mdev->resync, & ext->lce);
    }
#line 951
    lc_put(mdev->resync, & ext->lce);
#line 954
    if (ext->rs_left == ext->rs_failed) {
#line 955
      ext->rs_failed = 0;
#line 957
      tmp___1 = kmalloc___3(32UL, 32U);
#line 957
      udw = (struct update_odbm_work *)tmp___1;
#line 958
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 959
        udw->enr = ext->lce.lc_number;
#line 960
        udw->w.cb = & w_update_odbm;
#line 961
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 963
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 964
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 972
  return;
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long now ;
  unsigned long last ;
  int next ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 987
  count = 0UL;
#line 989
  wake_up = 0;
#line 992
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 995
    return;
  } else {

  }
#line 997
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 998
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1000
  _b = sector >= nr_sectors;
#line 1000
  if (_b != 0) {
#line 1000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1000);
  } else {

  }
#line 1000
  if (_b != 0) {
#line 1000
    return;
  } else {

  }
#line 1001
  _b___0 = esector >= nr_sectors;
#line 1001
  if (_b___0 != 0) {
#line 1001
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1001);
  } else {

  }
#line 1001
  if (_b___0 != 0) {
#line 1001
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1003
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1008
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1008
  if (tmp != 0L) {
#line 1009
    return;
  } else {

  }
#line 1010
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1010
  if (tmp___0 != 0L) {
#line 1011
    ebnr = lbnr;
  } else {
#line 1013
    ebnr = (esector - 7UL) >> 3;
  }
#line 1014
  sbnr = (sector + 7UL) >> 3;
#line 1016
  if (sbnr > ebnr) {
#line 1017
    return;
  } else {

  }
#line 1023
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1023
  count = (unsigned long )tmp___1;
#line 1024
  if (count != 0UL) {
#line 1024
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1024
    if (tmp___4 != 0) {
#line 1025
      now = jiffies;
#line 1026
      last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 1027
      next = (mdev->rs_last_mark + 1) % 8;
#line 1028
      if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 1029
        tmp___2 = drbd_bm_total_weight(mdev);
#line 1029
        tw = tmp___2;
#line 1030
        if ((mdev->rs_mark_left[mdev->rs_last_mark] != tw && (unsigned int )*((unsigned short *)mdev + 1006UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1006UL) != 320U) {
#line 1033
          mdev->rs_mark_time[next] = now;
#line 1034
          mdev->rs_mark_left[next] = tw;
#line 1035
          mdev->rs_last_mark = next;
        } else {

        }
      } else {

      }
#line 1038
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 1038
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 1039
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1040
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1044
      wake_up = 1;
#line 1045
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1047
  if (wake_up != 0) {
#line 1048
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1049
  return;
}
}
#line 1059 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1067
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1070
    return;
  } else {

  }
#line 1073
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1073
  if (tmp == 0) {
#line 1074
    return;
  } else {

  }
#line 1076
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1077
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1079
  _b = sector >= nr_sectors;
#line 1079
  if (_b != 0) {
#line 1079
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1079);
  } else {

  }
#line 1079
  if (_b != 0) {
#line 1080
    goto out;
  } else {

  }
#line 1081
  _b___0 = esector >= nr_sectors;
#line 1081
  if (_b___0 != 0) {
#line 1081
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1081);
  } else {

  }
#line 1081
  if (_b___0 != 0) {
#line 1082
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1084
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1088
  sbnr = sector >> 3;
#line 1089
  ebnr = esector >> 3;
#line 1093
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1093
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1094
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1094
  count = (unsigned int )tmp___1;
#line 1096
  enr = (unsigned int )(sector >> 15);
#line 1097
  e = lc_find(mdev->resync, enr);
#line 1098
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1099
    __mptr = (struct lc_element  const  *)e;
#line 1099
    __mptr___0 = (struct lc_element  const  *)e;
#line 1099
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1100
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1103
  put_ldev(mdev);
#line 1104
  return;
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1111
  wakeup = 0;
#line 1114
  spin_lock_irq(& mdev->al_lock);
#line 1115
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1116
    spin_unlock_irq(& mdev->al_lock);
#line 1117
    return (0);
  } else {

  }
#line 1119
  e = lc_get(mdev->resync, enr);
#line 1120
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1120
    __mptr = (struct lc_element  const  *)e;
#line 1120
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1120
    bm_ext = 0;
  }
#line 1121
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1122
    if (bm_ext->lce.lc_number != enr) {
#line 1123
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1124
      bm_ext->rs_failed = 0;
#line 1125
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1126
      wakeup = 1;
    } else {

    }
#line 1128
    if (bm_ext->lce.refcnt == 1U) {
#line 1129
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1130
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1132
  rs_flags = (mdev->resync)->flags;
#line 1133
  spin_unlock_irq(& mdev->al_lock);
#line 1134
  if (wakeup != 0) {
#line 1135
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1137
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1138
    if ((rs_flags & 4UL) != 0UL) {
#line 1139
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1141
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1141
    if (tmp != 0L) {
#line 1141
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1141), "i" (12UL));
      ldv_44583: ;
#line 1141
      goto ldv_44583;
    } else {

    }
  } else {

  }
#line 1144
  return (bm_ext);
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1150
  rv = 0;
#line 1152
  spin_lock_irq(& mdev->al_lock);
#line 1153
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1153
  if (tmp != 0L) {
#line 1154
    rv = 1;
  } else {
#line 1156
    al_ext = lc_find(mdev->act_log, enr);
#line 1157
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1158
      if (al_ext->refcnt != 0U) {
#line 1159
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1162
  spin_unlock_irq(& mdev->al_lock);
#line 1169
  return (rv);
}
}
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1181
  enr = (unsigned int )(sector >> 15);
#line 1185
  __ret = 0;
#line 1185
  bm_ext = _bme_get(mdev, enr);
#line 1185
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1185
    tmp = get_current();
#line 1185
    __wait.flags = 0U;
#line 1185
    __wait.private = (void *)tmp;
#line 1185
    __wait.func = & autoremove_wake_function;
#line 1185
    __wait.task_list.next = & __wait.task_list;
#line 1185
    __wait.task_list.prev = & __wait.task_list;
    ldv_44602: 
#line 1185
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1185
    bm_ext = _bme_get(mdev, enr);
#line 1185
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1185
      goto ldv_44600;
    } else {

    }
#line 1185
    tmp___0 = get_current();
#line 1185
    tmp___1 = signal_pending(tmp___0);
#line 1185
    if (tmp___1 == 0) {
#line 1185
      schedule();
#line 1185
      goto ldv_44601;
    } else {

    }
#line 1185
    __ret = -512;
#line 1185
    goto ldv_44600;
    ldv_44601: ;
#line 1185
    goto ldv_44602;
    ldv_44600: 
#line 1185
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1185
  sig = __ret;
#line 1187
  if (sig != 0) {
#line 1188
    return (-4);
  } else {

  }
#line 1190
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1190
  if (tmp___2 != 0) {
#line 1191
    return (0);
  } else {

  }
#line 1193
  i = 0;
#line 1193
  goto ldv_44611;
  ldv_44610: 
#line 1194
  __ret___0 = 0;
#line 1194
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1194
  if (tmp___7 != 0) {
#line 1194
    tmp___3 = get_current();
#line 1194
    __wait___0.flags = 0U;
#line 1194
    __wait___0.private = (void *)tmp___3;
#line 1194
    __wait___0.func = & autoremove_wake_function;
#line 1194
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1194
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44608: 
#line 1194
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1194
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1194
    if (tmp___4 == 0) {
#line 1194
      goto ldv_44606;
    } else {

    }
#line 1194
    tmp___5 = get_current();
#line 1194
    tmp___6 = signal_pending(tmp___5);
#line 1194
    if (tmp___6 == 0) {
#line 1194
      schedule();
#line 1194
      goto ldv_44607;
    } else {

    }
#line 1194
    __ret___0 = -512;
#line 1194
    goto ldv_44606;
    ldv_44607: ;
#line 1194
    goto ldv_44608;
    ldv_44606: 
#line 1194
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1194
  sig = __ret___0;
#line 1196
  if (sig != 0) {
#line 1197
    spin_lock_irq(& mdev->al_lock);
#line 1198
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1198
    if (tmp___8 == 0U) {
#line 1199
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1200
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1201
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1203
    spin_unlock_irq(& mdev->al_lock);
#line 1204
    return (-4);
  } else {

  }
#line 1193
  i = i + 1;
  ldv_44611: ;
#line 1193
  if (i <= 3) {
#line 1194
    goto ldv_44610;
  } else {

  }
#line 1207
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1208
  return (0);
}
}
#line 1220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1222
  enr = (unsigned int )(sector >> 15);
#line 1223
  al_enr = enr * 4U;
#line 1228
  spin_lock_irq(& mdev->al_lock);
#line 1229
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1243
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1244
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1244
      __mptr = (struct lc_element  const  *)e;
#line 1244
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1244
      bm_ext = 0;
    }
#line 1245
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1246
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1246
      if (tmp != 0) {
#line 1246
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1246);
      } else {

      }
#line 1247
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1247
      if (tmp___0 == 0) {
#line 1247
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1247);
      } else {

      }
#line 1248
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1249
      mdev->resync_wenr = 4294967295U;
#line 1250
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1250
      if (tmp___1 == 0U) {
#line 1251
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1252
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1254
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1258
  e = lc_try_get(mdev->resync, enr);
#line 1259
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1259
    __mptr___0 = (struct lc_element  const  *)e;
#line 1259
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1259
    bm_ext = 0;
  }
#line 1260
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1261
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1261
    if (tmp___2 != 0) {
#line 1262
      goto proceed;
    } else {

    }
#line 1263
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1263
    if (tmp___3 == 0) {
#line 1264
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1270
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1271
      if (bm_ext->lce.refcnt == 0U) {
#line 1271
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1271);
      } else {

      }
    }
#line 1273
    goto check_al;
  } else {
#line 1276
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1277
      goto try_again;
    } else {

    }
#line 1279
    e = lc_get(mdev->resync, enr);
#line 1280
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1280
      __mptr___1 = (struct lc_element  const  *)e;
#line 1280
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1280
      bm_ext = 0;
    }
#line 1281
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1282
      rs_flags = (mdev->resync)->flags;
#line 1283
      if ((rs_flags & 4UL) != 0UL) {
#line 1284
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1286
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1286
      if (tmp___4 != 0L) {
#line 1286
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1286), "i" (12UL));
        ldv_44632: ;
#line 1286
        goto ldv_44632;
      } else {

      }
#line 1287
      goto try_again;
    } else {

    }
#line 1289
    if (bm_ext->lce.lc_number != enr) {
#line 1290
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1291
      bm_ext->rs_failed = 0;
#line 1292
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1293
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1294
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1294
      if (tmp___5 != 0) {
#line 1294
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1294);
      } else {

      }
    } else {

    }
#line 1296
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1297
    if (bm_ext->lce.refcnt != 1U) {
#line 1297
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1297);
    } else {

    }
#line 1298
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1299
    goto check_al;
  }
  check_al: 
#line 1302
  i = 0;
#line 1302
  goto ldv_44634;
  ldv_44633: 
#line 1303
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1303
  if (tmp___6 != 0L) {
#line 1304
    goto try_again;
  } else {

  }
#line 1305
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1305
  if (tmp___7 != 0) {
#line 1306
    goto try_again;
  } else {

  }
#line 1302
  i = i + 1;
  ldv_44634: ;
#line 1302
  if (i <= 3) {
#line 1303
    goto ldv_44633;
  } else {

  }
#line 1308
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1310
  mdev->resync_wenr = 4294967295U;
#line 1311
  spin_unlock_irq(& mdev->al_lock);
#line 1312
  return (0);
  try_again: ;
#line 1315
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1316
    mdev->resync_wenr = enr;
  } else {

  }
#line 1317
  spin_unlock_irq(& mdev->al_lock);
#line 1318
  return (-11);
}
}
#line 1321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1323
  enr = (unsigned int )(sector >> 15);
#line 1328
  tmp = spinlock_check(& mdev->al_lock);
#line 1328
  flags = _raw_spin_lock_irqsave(tmp);
#line 1329
  e = lc_find(mdev->resync, enr);
#line 1330
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1330
    __mptr = (struct lc_element  const  *)e;
#line 1330
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1330
    bm_ext = 0;
  }
#line 1331
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1332
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1333
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1333
    if (tmp___0 != 0) {
#line 1334
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1335
    return;
  } else {

  }
#line 1338
  if (bm_ext->lce.refcnt == 0U) {
#line 1339
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1343
    return;
  } else {

  }
#line 1346
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1346
  if (tmp___1 == 0U) {
#line 1347
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1348
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1349
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1350
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1353
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1354
  return;
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1362
  spin_lock_irq(& mdev->al_lock);
#line 1364
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1364
  if (tmp != 0) {
#line 1365
    lc_reset(mdev->resync);
#line 1366
    put_ldev(mdev);
  } else {

  }
#line 1368
  mdev->resync_locked = 0U;
#line 1369
  mdev->resync_wenr = 4294967295U;
#line 1370
  spin_unlock_irq(& mdev->al_lock);
#line 1371
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1372
  return;
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1387
  spin_lock_irq(& mdev->al_lock);
#line 1389
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1389
  if (tmp___3 != 0) {
#line 1391
    i = 0;
#line 1391
    goto ldv_44663;
    ldv_44662: 
#line 1392
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1393
    __mptr = (struct lc_element  const  *)e;
#line 1393
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1394
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1395
      goto ldv_44661;
    } else {

    }
#line 1396
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1397
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1400
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1400
      if (tmp != 0) {
#line 1400
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1400);
      } else {

      }
#line 1401
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1401
      if (tmp___0 == 0) {
#line 1401
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1401);
      } else {

      }
#line 1402
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1403
      mdev->resync_wenr = 4294967295U;
#line 1404
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1406
    if (bm_ext->lce.refcnt != 0U) {
#line 1407
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1409
      put_ldev(mdev);
#line 1410
      spin_unlock_irq(& mdev->al_lock);
#line 1411
      return (-11);
    } else {

    }
#line 1413
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1413
    if (tmp___1 != 0) {
#line 1413
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1413);
    } else {

    }
#line 1414
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1414
    if (tmp___2 != 0) {
#line 1414
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1414);
    } else {

    }
#line 1415
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_44661: 
#line 1391
    i = i + 1;
    ldv_44663: ;
#line 1391
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1392
      goto ldv_44662;
    } else {

    }

#line 1417
    if ((mdev->resync)->used != 0U) {
#line 1417
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1417);
    } else {

    }
#line 1418
    put_ldev(mdev);
  } else {

  }
#line 1420
  spin_unlock_irq(& mdev->al_lock);
#line 1422
  return (0);
}
}
#line 1431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1437
  wake_up = 0;
#line 1439
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1442
    return;
  } else {

  }
#line 1444
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1445
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1447
  _b = sector >= nr_sectors;
#line 1447
  if (_b != 0) {
#line 1447
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1447);
  } else {

  }
#line 1447
  if (_b != 0) {
#line 1447
    return;
  } else {

  }
#line 1448
  _b___0 = esector >= nr_sectors;
#line 1448
  if (_b___0 != 0) {
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1448);
  } else {

  }
#line 1448
  if (_b___0 != 0) {
#line 1448
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1450
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1455
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1455
  if (tmp != 0L) {
#line 1456
    return;
  } else {

  }
#line 1457
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1457
  if (tmp___0 != 0L) {
#line 1458
    ebnr = lbnr;
  } else {
#line 1460
    ebnr = (esector - 7UL) >> 3;
  }
#line 1461
  sbnr = (sector + 7UL) >> 3;
#line 1463
  if (sbnr > ebnr) {
#line 1464
    return;
  } else {

  }
#line 1470
  spin_lock_irq(& mdev->al_lock);
#line 1471
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1471
  count = (unsigned long )tmp___1;
#line 1472
  if (count != 0UL) {
#line 1473
    mdev->rs_failed = mdev->rs_failed + count;
#line 1475
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1475
    if (tmp___2 != 0) {
#line 1476
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1477
      put_ldev(mdev);
    } else {

    }
#line 1482
    wake_up = 1;
  } else {

  }
#line 1484
  spin_unlock_irq(& mdev->al_lock);
#line 1485
  if (wake_up != 0) {
#line 1486
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1487
  return;
}
}
#line 1489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1494
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1496
  mutex_lock(ldv_func_arg1);
#line 1497
  return;
}
}
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1504
  tmp = mutex_trylock(ldv_func_arg1);
#line 1504
  ldv_func_res = tmp;
#line 1506
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1506
  return (tmp___0);
#line 1508
  return (ldv_func_res);
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1516
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1518
  mutex_unlock(ldv_func_arg1);
#line 1519
  return;
}
}
#line 1521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1526
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1528
  mutex_lock(ldv_func_arg1);
#line 1529
  return;
}
}
#line 1531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1536
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1538
  mutex_unlock(ldv_func_arg1);
#line 1539
  return;
}
}
#line 1541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1546
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1548
  mutex_unlock(ldv_func_arg1);
#line 1549
  return;
}
}
#line 1551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1556
  tmp = mutex_is_locked(lock);
#line 1556
  ldv_func_res = tmp;
#line 1558
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1558
  return (tmp___0);
#line 1560
  return (ldv_func_res);
}
}
#line 1563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1568
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1570
  mutex_lock(ldv_func_arg1);
#line 1571
  return;
}
}
#line 1573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1578
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1580
  mutex_unlock(ldv_func_arg1);
#line 1581
  return;
}
}
#line 1583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1588
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1590
  mutex_lock(ldv_func_arg1);
#line 1591
  return;
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1598
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1600
  mutex_unlock(ldv_func_arg1);
#line 1601
  return;
}
}
#line 1603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1608
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1610
  mutex_unlock(ldv_func_arg1);
#line 1611
  return;
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1618
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1620
  mutex_unlock(ldv_func_arg1);
#line 1621
  return;
}
}
#line 1623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1628
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1630
  mutex_unlock(ldv_func_arg1);
#line 1631
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 286 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 289
  tmp = list_empty(list);
#line 289
  if (tmp == 0) {
#line 290
    __list_splice(list, head, head->next);
  } else {

  }
#line 291
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 211
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 215
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 219
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 223
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) ;
#line 75
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 79
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5987;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5987;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5987;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5987;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5987: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 246 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 84 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 79
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp != 0L) {
#line 79
    goto do_trace;
  } else {

  }
#line 79
  return;
  do_trace: 
#line 79
  rcu_read_lock_sched_notrace();
#line 79
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
  tmp___0 = debug_lockdep_rcu_enabled();
#line 79
  if (tmp___0 != 0 && ! __warned) {
#line 79
    tmp___1 = rcu_read_lock_sched_held();
#line 79
    if (tmp___1 == 0 && 1) {
#line 79
      __warned = 1;
#line 79
      lockdep_rcu_dereference("include/trace/events/module.h", 84);
    } else {

    }
  } else {

  }
#line 79
  it_func_ptr = _________p1;
#line 79
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_11485: 
#line 79
    it_func = it_func_ptr->func;
#line 79
    __data = it_func_ptr->data;
#line 79
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 79
    it_func_ptr = it_func_ptr + 1;
#line 79
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
      goto ldv_11485;
    } else {

    }

  } else {

  }
#line 79
  rcu_read_lock_sched_notrace();
#line 81
  return;
}
}
#line 403 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 405
  return ((unsigned int )mod->state != 2U);
}
}
#line 485 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 487
  ret = 1;
#line 489
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 492
    tmp = module_is_live(module);
#line 492
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 492
    if (tmp___0 != 0L) {
#line 493
      __vpp_verify = 0;
#line 493
      switch (4UL) {
      case 1UL: 
#line 493
      pao_ID__ = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11850;
      case 2UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11850;
      case 4UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11850;
      case 8UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11850;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11850: ;
#line 493
      goto ldv_11855;
      case 2UL: 
#line 493
      pao_ID_____0 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11861;
      case 2UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11861;
      case 4UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11861;
      case 8UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11861;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11861: ;
#line 493
      goto ldv_11855;
      case 4UL: 
#line 493
      pao_ID_____1 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11871;
      case 2UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11871;
      case 4UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11871;
      case 8UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11871;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11871: ;
#line 493
      goto ldv_11855;
      case 8UL: 
#line 493
      pao_ID_____2 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11881;
      case 2UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11881;
      case 4UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11881;
      case 8UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11881;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11881: ;
#line 493
      goto ldv_11855;
      default: 
#line 493
      __bad_size_call_parameter();
#line 493
      goto ldv_11855;
      }
      ldv_11855: ;
#line 494
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 496
      ret = 0;
    }
  } else {

  }
#line 500
  return (ret);
}
}
#line 503
extern void module_put(struct module * ) ;
#line 251 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 275
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13766: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13766;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___4(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 646 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 1960 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1961
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1962
extern struct block_device *bdget(dev_t  ) ;
#line 1966
extern void bdput(struct block_device * ) ;
#line 2001
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1779 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2016
extern int wake_up_process(struct task_struct * ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 398 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 404
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 591
extern struct gendisk *alloc_disk(int  ) ;
#line 593
extern void put_disk(struct gendisk * ) ;
#line 257 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 259
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 260
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 260
    return (tmp);
  } else {

  }
#line 261
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 671 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 807
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 808
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 809
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 812
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 840
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 855
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 590
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 590
  if (tmp != 0L) {
#line 590
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (590), "i" (12UL));
    ldv_43623: ;
#line 590
    goto ldv_43623;
  } else {

  }
#line 591
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 592
  return;
}
}
#line 601 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 603
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 604
  return;
}
}
#line 613 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 615
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 615
  if (tmp != 0L) {
#line 615
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (615), "i" (12UL));
    ldv_43638: ;
#line 615
    goto ldv_43638;
  } else {

  }
#line 616
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 617
  return;
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1146
  ldv_mutex_lock_124(& mdev->data.mutex);
#line 1149
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1149
  if (tmp != 0L) {
#line 1150
    ldv_mutex_unlock_125(& mdev->data.mutex);
#line 1151
    return (0);
  } else {

  }
#line 1153
  return (1);
}
}
#line 1156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1158
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 1159
  return;
}
}
#line 1180
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1189
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1195
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1200
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1205
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 1208
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1212
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1252
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1254
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1259
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1266
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1267
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1268
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1270
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1466 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1467 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1468 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1472 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1473 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1474 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1478
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1479
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1491
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1492
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1651
void drbd_nl_cleanup(void) ;
#line 1652
int drbd_nl_init(void) ;
#line 1653
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1754
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp == 0) {
#line 1754
    goto ldv_44694;
  } else {

  }
#line 1754
  tmp___0 = get_current();
#line 1754
  __wait.flags = 0U;
#line 1754
  __wait.private = (void *)tmp___0;
#line 1754
  __wait.func = & autoremove_wake_function;
#line 1754
  __wait.task_list.next = & __wait.task_list;
#line 1754
  __wait.task_list.prev = & __wait.task_list;
  ldv_44697: 
#line 1754
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1754
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp___1 == 0) {
#line 1754
    goto ldv_44696;
  } else {

  }
#line 1754
  schedule();
#line 1754
  goto ldv_44697;
  ldv_44696: 
#line 1754
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44694: ;
#line 1757
  return;
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_44720;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35532.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35532.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_44720;
  }
  ldv_44720: ;
#line 1816
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1829
  if (error != 0) {
#line 1831
    tmp = spinlock_check(& mdev->req_lock);
#line 1831
    flags = _raw_spin_lock_irqsave(tmp);
#line 1832
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1833
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1835
  return;
}
}
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_44761;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_44761;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44761: ;
#line 1911
  return (s);
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1924
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1930
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1931
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1931
    if (tmp != 0) {
#line 1932
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1933
      dump_stack();
    } else {

    }
#line 1935
    return (0UL);
  } else {

  }
#line 1937
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1937
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1940
  return (0UL);
  }
}
}
#line 2002 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2004
  _drbd_thread_stop(thi, 0, 0);
#line 2005
  return;
}
}
#line 2007 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2009
  _drbd_thread_stop(thi, 1, 0);
#line 2010
  return;
}
}
#line 2202 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2208
  switch ((unsigned int )s.ldv_35532.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2221
  goto ldv_44876;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2240
  return (0);
  }
  ldv_44876: ;
#line 2243
  switch ((unsigned int )s.ldv_35532.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2250
  goto ldv_44896;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2259
  return (0);
  }
  ldv_44896: ;
#line 2262
  return (1);
}
}
#line 2270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2272
  tmp = drbd_get_max_buffers(mdev);
#line 2272
  mxb = tmp;
#line 2274
  tmp___0 = is_susp(mdev->state);
#line 2274
  if (tmp___0 != 0) {
#line 2275
    return (0);
  } else {

  }
#line 2276
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2276
  if (tmp___1 != 0) {
#line 2277
    return (0);
  } else {

  }
#line 2284
  tmp___2 = drbd_state_is_stable___0(mdev->state);
#line 2284
  if (tmp___2 == 0) {
#line 2285
    return (0);
  } else {

  }
#line 2289
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2289
  if (tmp___3 > mxb) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  tmp___4 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2291
  if (tmp___4 != 0) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  return (1);
}
}
#line 2374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2376
  sk = (mdev->data.socket)->sk;
#line 2377
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2378
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2379
  return;
}
}
#line 2381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2388
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_45136;
  ldv_45135: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_45136: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_45135;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 137
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 182
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 211
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 253
  tmp = kmalloc___4(56UL, 208U);
#line 253
  b = (struct drbd_tl_epoch *)tmp;
#line 254
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 255
    return (0);
  } else {

  }
#line 256
  INIT_LIST_HEAD(& b->requests);
#line 257
  INIT_LIST_HEAD(& b->w.list);
#line 258
  b->next = 0;
#line 259
  b->br_number = 4711U;
#line 260
  b->n_writes = 0;
#line 261
  b->w.cb = 0;
#line 263
  mdev->oldest_tle = b;
#line 264
  mdev->newest_tle = b;
#line 265
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 267
  mdev->tl_hash = 0;
#line 268
  mdev->tl_hash_s = 0U;
#line 270
  return (1);
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 275
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            275);
  } else {

  }
#line 276
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 276
  if (tmp == 0) {
#line 276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            276);
  } else {

  }
#line 277
  kfree((void const   *)mdev->oldest_tle);
#line 278
  mdev->oldest_tle = 0;
#line 279
  kfree((void const   *)mdev->unused_spare_tle);
#line 280
  mdev->unused_spare_tle = 0;
#line 281
  kfree((void const   *)mdev->tl_hash);
#line 282
  mdev->tl_hash = 0;
#line 283
  mdev->tl_hash_s = 0U;
#line 284
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 297
  INIT_LIST_HEAD(& new->requests);
#line 298
  INIT_LIST_HEAD(& new->w.list);
#line 299
  new->w.cb = 0;
#line 300
  new->next = 0;
#line 301
  new->n_writes = 0;
#line 303
  newest_before = mdev->newest_tle;
#line 306
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 307
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 308
    (mdev->newest_tle)->next = new;
#line 309
    mdev->newest_tle = new;
  } else {

  }
#line 311
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 330
  spin_lock_irq(& mdev->req_lock);
#line 332
  b = mdev->oldest_tle;
#line 335
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 338
    goto bail;
  } else {

  }
#line 340
  if (b->br_number != barrier_nr) {
#line 341
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 343
    goto bail;
  } else {

  }
#line 345
  if ((unsigned int )b->n_writes != set_size) {
#line 346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 348
    goto bail;
  } else {

  }
#line 352
  le = b->requests.next;
#line 352
  tle = le->next;
#line 352
  goto ldv_45364;
  ldv_45363: 
#line 353
  __mptr = (struct list_head  const  *)le;
#line 353
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 354
  _req_mod(r, barrier_acked);
#line 352
  le = tle;
#line 352
  tle = le->next;
  ldv_45364: ;
#line 352
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 353
    goto ldv_45363;
  } else {

  }
#line 369
  list_del_init(& b->requests);
#line 371
  nob = b->next;
#line 372
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 372
  if (tmp != 0) {
#line 373
    _tl_add_barrier(mdev, b);
#line 374
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 375
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 379
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 379
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              379);
    } else {

    }
#line 380
    mdev->oldest_tle = nob;
#line 381
    kfree((void const   *)b);
  }
#line 384
  spin_unlock_irq(& mdev->req_lock);
#line 385
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 385
  if (tmp___0 != 0) {
#line 385
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 385
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 385
  if (tmp___2 < 0) {
#line 385
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 385, tmp___1);
  } else {

  }
#line 387
  return;
  bail: 
#line 390
  spin_unlock_irq(& mdev->req_lock);
#line 391
  val.i = 0U;
#line 391
  val.ldv_35532.conn = 6U;
#line 391
  mask.i = 0U;
#line 391
  mask.ldv_35532.conn = 31U;
#line 391
  drbd_force_state(mdev, mask, val);
#line 393
  return;
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 409
  b = mdev->oldest_tle;
#line 410
  pn = & mdev->oldest_tle;
#line 411
  goto ldv_45399;
  ldv_45398: 
#line 412
  n_writes = 0;
#line 413
  n_reads = 0;
#line 414
  INIT_LIST_HEAD(& carry_reads);
#line 415
  le = b->requests.next;
#line 415
  tle = le->next;
#line 415
  goto ldv_45391;
  ldv_45390: 
#line 416
  __mptr = (struct list_head  const  *)le;
#line 416
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 417
  rv = _req_mod(req, what);
#line 419
  n_writes = (rv & 1) + n_writes;
#line 420
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 415
  le = tle;
#line 415
  tle = le->next;
  ldv_45391: ;
#line 415
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 416
    goto ldv_45390;
  } else {

  }
#line 422
  tmp = b->next;
#line 424
  if (n_writes != 0) {
#line 425
    if ((unsigned int )what == 21U) {
#line 426
      b->n_writes = n_writes;
#line 427
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 428
        b->w.cb = & w_send_barrier;
#line 429
        inc_ap_pending(mdev);
#line 430
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 433
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 435
    pn = & b->next;
  } else {
#line 437
    if (n_reads != 0) {
#line 438
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 441
    list_del(& b->requests);
#line 446
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 447
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 447
      if (tmp___0 != 0) {
#line 447
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 447
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 447
      if (tmp___2 < 0) {
#line 447
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 447
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 447, tmp___1);
      } else {

      }
    } else {

    }
#line 449
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 451
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 451
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                451);
      } else {

      }
#line 452
      INIT_LIST_HEAD(& b->requests);
#line 453
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 454
      INIT_LIST_HEAD(& b->w.list);
#line 455
      b->w.cb = 0;
#line 456
      b->br_number = random32();
#line 457
      b->n_writes = 0;
#line 459
      *pn = b;
#line 460
      goto ldv_45397;
    } else {

    }
#line 462
    *pn = tmp;
#line 463
    kfree((void const   *)b);
  }
#line 465
  b = tmp;
#line 466
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_45399: ;
#line 411
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 412
    goto ldv_45398;
  } else {

  }
  ldv_45397: ;
#line 416
  return;
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 484
  spin_lock_irq(& mdev->req_lock);
#line 486
  _tl_restart(mdev, connection_lost_while_pending);
#line 489
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 489
  if (tmp == 0) {
#line 489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            489);
  } else {

  }
#line 492
  le = mdev->out_of_sequence_requests.next;
#line 492
  tle = le->next;
#line 492
  goto ldv_45409;
  ldv_45408: 
#line 493
  __mptr = (struct list_head  const  *)le;
#line 493
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 496
  _req_mod(r, connection_lost_while_pending);
#line 492
  le = tle;
#line 492
  tle = le->next;
  ldv_45409: ;
#line 492
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 493
    goto ldv_45408;
  } else {

  }
#line 500
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 502
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 504
  spin_unlock_irq(& mdev->req_lock);
#line 505
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 509
  spin_lock_irq(& mdev->req_lock);
#line 510
  _tl_restart(mdev, what);
#line 511
  spin_unlock_irq(& mdev->req_lock);
#line 512
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 523
  return (((((int )os.ldv_35532.conn > 9 && (int )ns.ldv_35532.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35532.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 539
  tmp = spinlock_check(& mdev->req_lock);
#line 539
  flags = _raw_spin_lock_irqsave(tmp);
#line 540
  os = mdev->state;
#line 541
  ns.i = (os.i & ~ mask.i) | val.i;
#line 542
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 543
  ns = mdev->state;
#line 544
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 546
  return (rv);
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 558
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 559
  return;
}
}
#line 561
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 562
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 564
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 566
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 576
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 576
  if (tmp != 0) {
#line 577
    return (SS_CW_SUCCESS);
  } else {

  }
#line 579
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 579
  if (tmp___0 != 0) {
#line 580
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 582
  rv = 0;
#line 583
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 583
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 584
  os = mdev->state;
#line 585
  ns.i = (os.i & ~ mask.i) | val.i;
#line 586
  ns = sanitize_state(mdev, os, ns, 0);
#line 588
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 588
  if (tmp___2 == 0) {
#line 589
    rv = 4;
  } else {

  }
#line 590
  if (rv == 0) {
#line 591
    rv = is_valid_state(mdev, ns);
#line 592
    if (rv == 1) {
#line 593
      rv = is_valid_state_transition(mdev, ns, os);
#line 594
      if (rv == 1) {
#line 595
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 598
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 600
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 622
  init_completion(& done);
#line 624
  if (((unsigned int )f & 8U) != 0U) {
#line 625
    ldv_mutex_lock_127(& mdev->state_mutex);
  } else {

  }
#line 627
  tmp = spinlock_check(& mdev->req_lock);
#line 627
  flags = _raw_spin_lock_irqsave(tmp);
#line 628
  os = mdev->state;
#line 629
  ns.i = (os.i & ~ mask.i) | val.i;
#line 630
  ns = sanitize_state(mdev, os, ns, 0);
#line 632
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 632
  if (tmp___5 != 0) {
#line 633
    rv = is_valid_state(mdev, ns);
#line 634
    if (rv == 1) {
#line 635
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 636
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 638
    if (rv <= 0) {
#line 639
      if (((unsigned int )f & 2U) != 0U) {
#line 640
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 641
      goto abort;
    } else {

    }
#line 644
    drbd_state_lock___0(mdev);
#line 645
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 645
    if (tmp___0 == 0) {
#line 646
      drbd_state_unlock(mdev);
#line 647
      rv = -10;
#line 648
      if (((unsigned int )f & 2U) != 0U) {
#line 649
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 650
      goto abort;
    } else {

    }
#line 653
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 653
    rv = (int )tmp___1;
#line 653
    if (rv != 0) {
#line 653
      goto ldv_45481;
    } else {

    }
#line 653
    tmp___2 = get_current();
#line 653
    __wait.flags = 0U;
#line 653
    __wait.private = (void *)tmp___2;
#line 653
    __wait.func = & autoremove_wake_function;
#line 653
    __wait.task_list.next = & __wait.task_list;
#line 653
    __wait.task_list.prev = & __wait.task_list;
    ldv_45484: 
#line 653
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 653
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 653
    rv = (int )tmp___3;
#line 653
    if (rv != 0) {
#line 653
      goto ldv_45483;
    } else {

    }
#line 653
    schedule();
#line 653
    goto ldv_45484;
    ldv_45483: 
#line 653
    finish_wait(& mdev->state_wait, & __wait);
    ldv_45481: ;
#line 656
    if (rv <= 0) {
#line 657
      drbd_state_unlock(mdev);
#line 658
      if (((unsigned int )f & 2U) != 0U) {
#line 659
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 660
      goto abort;
    } else {

    }
#line 662
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 662
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 663
    os = mdev->state;
#line 664
    ns.i = (os.i & ~ mask.i) | val.i;
#line 665
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 666
    drbd_state_unlock(mdev);
  } else {
#line 668
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 671
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 673
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 674
    tmp___6 = get_current();
#line 674
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 674
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              674);
    } else {

    }
#line 675
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 679
  if (((unsigned int )f & 8U) != 0U) {
#line 680
    ldv_mutex_unlock_128(& mdev->state_mutex);
  } else {

  }
#line 682
  return (rv);
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 700
  rv = drbd_req_state(mdev, mask, val, f);
#line 700
  if (rv != -18) {
#line 700
    goto ldv_45495;
  } else {

  }
#line 700
  tmp = get_current();
#line 700
  __wait.flags = 0U;
#line 700
  __wait.private = (void *)tmp;
#line 700
  __wait.func = & autoremove_wake_function;
#line 700
  __wait.task_list.next = & __wait.task_list;
#line 700
  __wait.task_list.prev = & __wait.task_list;
  ldv_45498: 
#line 700
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 700
  rv = drbd_req_state(mdev, mask, val, f);
#line 700
  if (rv != -18) {
#line 700
    goto ldv_45497;
  } else {

  }
#line 700
  schedule();
#line 700
  goto ldv_45498;
  ldv_45497: 
#line 700
  finish_wait(& mdev->state_wait, & __wait);
  ldv_45495: ;
#line 703
  return (rv);
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 708
  tmp = is_susp(ns);
#line 708
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35532.pdsk);
#line 708
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35532.disk);
#line 708
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35532.peer);
#line 708
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35532.role);
#line 708
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_35532.conn);
#line 708
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 725
  if (err == -18) {
#line 726
    return;
  } else {

  }
#line 727
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 727
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 728
  print_st(mdev, (char *)" state", os);
#line 729
  print_st(mdev, (char *)"wanted", ns);
#line 730
  return;
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  rv = 1;
#line 760
  fp = FP_DONT_CARE;
#line 761
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 761
  if (tmp != 0) {
#line 762
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 763
    put_ldev(mdev);
  } else {

  }
#line 766
  tmp___0 = get_net_conf(mdev);
#line 766
  if (tmp___0 != 0) {
#line 767
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 769
      rv = -1;
    } else {

    }
#line 770
    put_net_conf(mdev);
  } else {

  }
#line 773
  if (rv <= 0) {

  } else
#line 775
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 776
    rv = -12;
  } else
#line 778
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35532.conn <= 9) && (int )ns.ldv_35532.disk <= 7) {
#line 779
    rv = -2;
  } else
#line 781
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35532.conn <= 9) && (int )ns.ldv_35532.pdsk > 5) {
#line 783
    rv = -7;
  } else
#line 785
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35532.disk <= 4) && (int )ns.ldv_35532.pdsk <= 4) {
#line 786
    rv = -2;
  } else
#line 788
  if ((int )ns.ldv_35532.conn > 10 && (int )ns.ldv_35532.disk <= 3) {
#line 789
    rv = -4;
  } else
#line 791
  if ((int )ns.ldv_35532.conn > 10 && (int )ns.ldv_35532.pdsk <= 3) {
#line 792
    rv = -5;
  } else
#line 794
  if (((int )ns.ldv_35532.conn > 10 && (int )ns.ldv_35532.disk <= 7) && (int )ns.ldv_35532.pdsk <= 7) {
#line 795
    rv = -2;
  } else
#line 797
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 802
    rv = -6;
  } else
#line 804
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 806
    rv = -14;
  } else
#line 808
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 810
    rv = -17;
  } else {

  }
#line 812
  return (rv);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 824
  rv = 1;
#line 826
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35532.conn > 10) {
#line 828
    rv = -8;
  } else {

  }
#line 830
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 831
    rv = -9;
  } else {

  }
#line 833
  if ((int )ns.ldv_35532.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 834
    rv = -11;
  } else {

  }
#line 836
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35532.conn <= 1) {
#line 837
    rv = -13;
  } else {

  }
#line 839
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35532.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 840
    rv = -16;
  } else {

  }
#line 842
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 843
    rv = -18;
  } else {

  }
#line 845
  if ((int )ns.ldv_35532.conn == (int )os.ldv_35532.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 846
    rv = -18;
  } else {

  }
#line 848
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35532.conn <= 9) {
#line 849
    rv = -15;
  } else {

  }
#line 851
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35532.conn != (int )os.ldv_35532.conn) && (int )os.ldv_35532.conn > 10) {
#line 853
    rv = -8;
  } else {

  }
#line 855
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35532.conn <= 9) {
#line 857
    rv = -15;
  } else {

  }
#line 859
  return (rv);
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 877
  fp = FP_DONT_CARE;
#line 878
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 878
  if (tmp != 0) {
#line 879
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 880
    put_ldev(mdev);
  } else {

  }
#line 884
  if (((int )ns.ldv_35532.conn > 2 && (int )ns.ldv_35532.conn <= 7) && (int )os.ldv_35532.conn <= 1) {
#line 886
    ns.ldv_35532.conn = os.ldv_35532.conn;
  } else {

  }
#line 890
  if (((((int )os.ldv_35532.conn > 2 && (int )os.ldv_35532.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_35532.conn <= 7) {
#line 892
    ns.ldv_35532.conn = os.ldv_35532.conn;
  } else {

  }
#line 895
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 896
    ns.ldv_35532.conn = os.ldv_35532.conn;
  } else {

  }
#line 898
  if ((int )ns.ldv_35532.conn <= 9) {
#line 899
    ns.ldv_35532.peer_isp = 0U;
#line 900
    ns.ldv_35532.peer = 0U;
#line 901
    if ((int )ns.ldv_35532.pdsk > 6 || (int )ns.ldv_35532.pdsk <= 3) {
#line 902
      ns.ldv_35532.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 906
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 907
    ns.ldv_35532.aftr_isp = 0U;
  } else {

  }
#line 910
  if (((int )os.ldv_35532.conn > 10 && (int )ns.ldv_35532.conn > 10) && ((int )ns.ldv_35532.disk <= 2 || (int )ns.ldv_35532.pdsk <= 2)) {
#line 912
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 913
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 916
    ns.ldv_35532.conn = 10U;
  } else {

  }
#line 919
  if ((int )ns.ldv_35532.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 922
    switch ((int )ns.ldv_35532.conn) {
    case 14: ;
    case 21: 
#line 925
    ns.ldv_35532.disk = 5U;
#line 926
    goto ldv_45531;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 931
    ns.ldv_35532.disk = 8U;
#line 932
    goto ldv_45531;
    case 17: 
#line 934
    ns.ldv_35532.disk = 4U;
#line 935
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 936
    goto ldv_45531;
    }
    ldv_45531: ;
#line 938
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 939
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 942
  if ((int )ns.ldv_35532.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 944
    switch ((int )ns.ldv_35532.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 949
    ns.ldv_35532.pdsk = 8U;
#line 950
    goto ldv_45541;
    case 13: ;
    case 20: 
#line 956
    ns.ldv_35532.pdsk = (int )os.ldv_35532.pdsk > 0 && (int )os.ldv_35532.pdsk <= 4 ? os.ldv_35532.pdsk : 5U;
#line 959
    goto ldv_45541;
    case 16: 
#line 961
    ns.ldv_35532.pdsk = 4U;
#line 962
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 963
    goto ldv_45541;
    }
    ldv_45541: ;
#line 965
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 966
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 970
  if ((int )ns.ldv_35532.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 970
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 970
    if (tmp___0 != 0) {
#line 972
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 973
        ns.ldv_35532.disk = mdev->new_state_tmp.ldv_35532.disk;
#line 974
        ns.ldv_35532.pdsk = mdev->new_state_tmp.ldv_35532.pdsk;
      } else {
#line 976
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 977
        ns.ldv_35532.disk = 0U;
#line 978
        ns.ldv_35532.pdsk = 6U;
      }
#line 980
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 983
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35532.conn <= 9) && (int )ns.ldv_35532.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35532.conn > 9) || (int )os.ldv_35532.pdsk <= 5)) {
#line 986
    ns.ldv_35532.susp_fen = 1U;
  } else {

  }
#line 988
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35532.disk <= 7) && (int )ns.ldv_35532.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35532.disk > 7) || (int )os.ldv_35532.pdsk > 7)) {
#line 991
    ns.ldv_35532.susp_nod = 1U;
  } else {

  }
#line 993
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 994
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 995
      ns.ldv_35532.conn = 20U;
    } else {

    }
#line 996
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 997
      ns.ldv_35532.conn = 21U;
    } else {

    }
  } else {
#line 999
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1000
      ns.ldv_35532.conn = 16U;
    } else {

    }
#line 1001
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1002
      ns.ldv_35532.conn = 17U;
    } else {

    }
  }
#line 1005
  return (ns);
}
}
#line 1009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1011
  if ((unsigned int )cs == 19U) {
#line 1017
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1019
    bit = mdev->ov_start_sector >> 3;
#line 1020
    if (mdev->rs_total <= bit) {
#line 1021
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 1023
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1025
  return;
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1029
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1029
  if (tmp != 0) {
#line 1030
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1031
  return;
}
}
#line 1042 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  int tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 1047
  rv = 1;
#line 1048
  warn_sync_abort = 0;
#line 1051
  os = mdev->state;
#line 1053
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1055
  if (ns.i == os.i) {
#line 1056
    return (2);
  } else {

  }
#line 1058
  if (((unsigned int )flags & 1U) == 0U) {
#line 1062
    rv = is_valid_state(mdev, ns);
#line 1063
    if (rv <= 0) {
#line 1067
      tmp = is_valid_state(mdev, os);
#line 1067
      if (tmp == rv) {
#line 1068
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1070
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1073
  if (rv <= 0) {
#line 1074
    if (((unsigned int )flags & 2U) != 0U) {
#line 1075
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1076
    return (rv);
  } else {

  }
#line 1079
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1080
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1084
  pbp = (char *)(& pb);
#line 1085
  *pbp = 0;
#line 1086
  if ((int )ns.ldv_35532.role != (int )os.ldv_35532.role) {
#line 1086
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_35532.role);
#line 1086
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_35532.role);
#line 1086
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1086
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1087
  if ((int )ns.ldv_35532.peer != (int )os.ldv_35532.peer) {
#line 1087
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35532.peer);
#line 1087
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_35532.peer);
#line 1087
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1087
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1088
  if ((int )ns.ldv_35532.conn != (int )os.ldv_35532.conn) {
#line 1088
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_35532.conn);
#line 1088
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_35532.conn);
#line 1088
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1088
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1089
  if ((int )ns.ldv_35532.disk != (int )os.ldv_35532.disk) {
#line 1089
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35532.disk);
#line 1089
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_35532.disk);
#line 1089
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1089
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1090
  if ((int )ns.ldv_35532.pdsk != (int )os.ldv_35532.pdsk) {
#line 1090
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35532.pdsk);
#line 1090
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_35532.pdsk);
#line 1090
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1090
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1091
  tmp___18 = is_susp(ns);
#line 1091
  tmp___19 = is_susp(os);
#line 1091
  if (tmp___18 != tmp___19) {
#line 1092
    tmp___15 = is_susp(ns);
#line 1092
    tmp___16 = is_susp(os);
#line 1092
    tmp___17 = sprintf(pbp, "susp( %s -> %s ) ", tmp___16 != 0 ? (char *)"1" : (char *)"0",
                       tmp___15 != 0 ? (char *)"1" : (char *)"0");
#line 1092
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1095
  if ((int )ns.ldv_35532.aftr_isp != (int )os.ldv_35532.aftr_isp) {
#line 1095
    tmp___20 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1095
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1096
  if ((int )ns.ldv_35532.peer_isp != (int )os.ldv_35532.peer_isp) {
#line 1096
    tmp___21 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1096
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1097
  if ((int )ns.ldv_35532.user_isp != (int )os.ldv_35532.user_isp) {
#line 1097
    tmp___22 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1097
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1098
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1109
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1109
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1109
    if (tmp___23 == 0) {
#line 1113
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1115
  mdev->state.i = ns.i;
#line 1116
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1117
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1120
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35532.conn <= 9) {
#line 1122
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1124
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1128
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1130
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1131
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1133
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1134
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1137
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1139
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1140
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1143
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1145
    now = jiffies;
#line 1148
    mdev->ov_position = 0UL;
#line 1149
    mdev->rs_total = drbd_bm_bits(mdev);
#line 1150
    if (mdev->agreed_pro_version > 89) {
#line 1151
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35532.conn);
    } else {
#line 1153
      mdev->ov_start_sector = 0UL;
    }
#line 1154
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1156
    mdev->rs_start = now;
#line 1157
    mdev->rs_last_events = 0;
#line 1158
    mdev->rs_last_sect_ev = 0;
#line 1159
    mdev->ov_last_oos_size = 0UL;
#line 1160
    mdev->ov_last_oos_start = 0UL;
#line 1162
    i = 0;
#line 1162
    goto ldv_45568;
    ldv_45567: 
#line 1163
    mdev->rs_mark_left[i] = mdev->rs_total;
#line 1164
    mdev->rs_mark_time[i] = now;
#line 1162
    i = i + 1;
    ldv_45568: ;
#line 1162
    if (i <= 7) {
#line 1163
      goto ldv_45567;
    } else {

    }

#line 1167
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1168
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1170
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1174
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1174
  if (tmp___25 != 0) {
#line 1175
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1179
    tmp___24 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1179
    if (tmp___24 != 0) {
#line 1180
      mdf = mdf | 64U;
    } else {

    }
#line 1181
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U || ((int )mdev->state.ldv_35532.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 4U)) {
#line 1183
      mdf = mdf | 2U;
    } else {

    }
#line 1184
    if ((int )mdev->state.ldv_35532.conn > 9) {
#line 1185
      mdf = mdf | 4U;
    } else {

    }
#line 1186
    if ((int )mdev->state.ldv_35532.disk > 4) {
#line 1187
      mdf = mdf | 1U;
    } else {

    }
#line 1188
    if ((int )mdev->state.ldv_35532.disk > 5) {
#line 1189
      mdf = mdf | 16U;
    } else {

    }
#line 1190
    if ((int )mdev->state.ldv_35532.pdsk <= 5 && (int )mdev->state.ldv_35532.pdsk > 3) {
#line 1191
      mdf = mdf | 32U;
    } else {

    }
#line 1192
    if ((mdev->ldev)->md.flags != mdf) {
#line 1193
      (mdev->ldev)->md.flags = mdf;
#line 1194
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1196
    if ((int )os.ldv_35532.disk <= 6 && (int )ns.ldv_35532.disk > 6) {
#line 1197
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1198
    put_ldev(mdev);
  } else {

  }
#line 1202
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1204
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1207
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1208
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1211
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1212
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1215
  if (((int )os.ldv_35532.conn > 7 && (int )ns.ldv_35532.conn <= 7) && (int )ns.ldv_35532.conn > 2) {
#line 1217
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1220
  if ((int )os.ldv_35532.conn <= 9 && (int )ns.ldv_35532.conn > 9) {
#line 1221
    drbd_resume_al(mdev);
  } else {

  }
#line 1223
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1223
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1224
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1225
    ascw->os = os;
#line 1226
    ascw->ns = ns;
#line 1227
    ascw->flags = flags;
#line 1228
    ascw->w.cb = & w_after_state_ch;
#line 1229
    ascw->done = done;
#line 1230
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1232
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1235
  return (rv);
}
}
#line 1238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1241
  __mptr = (struct drbd_work  const  *)w;
#line 1241
  ascw = (struct after_state_chg_work *)__mptr;
#line 1242
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1243
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1244
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1244
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1244);
    } else {

    }
#line 1245
    complete(ascw->done);
  } else {

  }
#line 1247
  kfree((void const   *)ascw);
#line 1249
  return (1);
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1254
  if (rv != 0) {
#line 1255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1256
    val.i = 0U;
#line 1256
    val.ldv_35532.conn = 10U;
#line 1256
    mask.i = 0U;
#line 1256
    mask.ldv_35532.conn = 31U;
#line 1256
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1257
    return;
  } else {

  }
#line 1260
  switch ((int )mdev->state.ldv_35532.conn) {
  case 12: 
#line 1262
  val___0.i = 0U;
#line 1262
  val___0.ldv_35532.conn = 15U;
#line 1262
  mask___0.i = 0U;
#line 1262
  mask___0.ldv_35532.conn = 31U;
#line 1262
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1263
  goto ldv_45592;
  case 11: 
#line 1265
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1266
  goto ldv_45592;
  }
  ldv_45592: ;
#line 1269
  return;
}
}
#line 1277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_io_error_p eh ;
  int tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 1281
  what = nothing;
#line 1282
  nsm.i = 4294967295U;
#line 1284
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1285
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1286
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1287
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1290
  fp = FP_DONT_CARE;
#line 1291
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1291
  if (tmp != 0) {
#line 1292
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1293
    put_ldev(mdev);
  } else {

  }
#line 1297
  drbd_bcast_state(mdev, ns);
#line 1299
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35532.disk > 7) || (int )os.ldv_35532.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35532.disk <= 7) && (int )ns.ldv_35532.pdsk <= 7)) {
#line 1301
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1306
  nsm.i = 4294967295U;
#line 1307
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1308
    if ((int )os.ldv_35532.conn <= 9 && (int )ns.ldv_35532.conn > 9) {
#line 1309
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1310
        what = resend;
#line 1310
        nsm.ldv_35532.susp_nod = 0U;
      } else {
#line 1312
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unexpected Resynd going on!\n");
      }
    } else {

    }
#line 1315
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_35532.disk > 1) {
#line 1316
      what = restart_frozen_disk_io;
#line 1316
      nsm.ldv_35532.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1320
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1322
    if ((int )os.ldv_35532.pdsk > 5 && (int )ns.ldv_35532.pdsk <= 5) {
#line 1323
      tl_clear(mdev);
#line 1324
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1324
      if (tmp___0 != 0) {
#line 1325
        drbd_uuid_new_current(mdev);
#line 1326
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1327
        drbd_md_sync(mdev);
      } else {

      }
#line 1329
      spin_lock_irq(& mdev->req_lock);
#line 1330
      __ns.i = mdev->state.i;
#line 1330
      __ns.ldv_35532.susp_fen = 0U;
#line 1330
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1331
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1334
    if ((int )os.ldv_35532.conn <= 9 && (int )ns.ldv_35532.conn > 9) {
#line 1335
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1336
      what = resend;
#line 1337
      nsm.ldv_35532.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1341
  if ((unsigned int )what != 24U) {
#line 1342
    spin_lock_irq(& mdev->req_lock);
#line 1343
    _tl_restart(mdev, what);
#line 1344
    nsm.i = nsm.i & mdev->state.i;
#line 1345
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1346
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1350
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35532.pdsk > 0) {
#line 1351
    drbd_send_uuids(mdev);
#line 1352
    drbd_send_state(mdev);
  } else {

  }
#line 1354
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1355
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1358
  if ((((int )os.ldv_35532.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35532.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1364
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1364
    if (tmp___2 != 0) {
#line 1365
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35532.disk > 7) {
#line 1367
        tmp___1 = is_susp(mdev->state);
#line 1367
        if (tmp___1 != 0) {
#line 1368
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1370
          drbd_uuid_new_current(mdev);
#line 1371
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1374
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1378
  if ((int )ns.ldv_35532.pdsk <= 3) {
#line 1378
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1378
    if (tmp___3 != 0) {
#line 1379
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1380
        drbd_uuid_new_current(mdev);
#line 1381
        drbd_send_uuids(mdev);
      } else {

      }
#line 1385
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1386
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1387
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1391
  if (((int )ns.ldv_35532.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1393
    drbd_send_sizes(mdev, 0, 0);
#line 1394
    drbd_send_uuids(mdev);
#line 1395
    drbd_send_state(mdev);
  } else {

  }
#line 1399
  if ((int )ns.ldv_35532.conn > 9 && ((int )os.ldv_35532.aftr_isp != (int )ns.ldv_35532.aftr_isp || (int )os.ldv_35532.user_isp != (int )ns.ldv_35532.user_isp)) {
#line 1402
    drbd_send_state(mdev);
  } else {

  }
#line 1405
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1407
    suspend_other_sg(mdev);
  } else {

  }
#line 1411
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35532.conn > 9) {
#line 1412
    drbd_send_state(mdev);
  } else {

  }
#line 1415
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1417
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1420
  if ((((int )os.ldv_35532.conn <= 9 && (int )ns.ldv_35532.conn <= 9) && (int )os.ldv_35532.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1422
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1425
  if ((int )os.ldv_35532.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1426
    eh = EP_PASS_ON;
#line 1428
    tmp___4 = drbd_send_state(mdev);
#line 1428
    if (tmp___4 != 0) {
#line 1429
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that my disk is broken.\n");
    } else {
#line 1431
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for drbd_io_error() failed\n");
    }
#line 1433
    drbd_rs_cancel_all(mdev);
#line 1435
    tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 1435
    if (tmp___5 != 0) {
#line 1436
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1437
      put_ldev(mdev);
    } else {

    }
#line 1439
    if ((unsigned int )eh == 1U) {
#line 1440
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1446
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1447
    mdev->rs_total = 0UL;
#line 1448
    mdev->rs_failed = 0UL;
#line 1449
    atomic_set(& mdev->rs_pending_cnt, 0);
  } else {

  }
#line 1452
  if ((int )os.ldv_35532.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1455
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U) {
#line 1456
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35532.disk);
#line 1456
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___6);
    } else {

    }
#line 1464
    tmp___7 = drbd_send_state(mdev);
#line 1464
    if (tmp___7 != 0) {
#line 1465
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I detached my disk.\n");
    } else {
#line 1467
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detach failed\n");
    }
#line 1469
    lc_destroy(mdev->resync);
#line 1470
    mdev->resync = 0;
#line 1471
    lc_destroy(mdev->act_log);
#line 1472
    mdev->act_log = 0;
#line 1473
    drbd_free_bc(mdev->ldev);
#line 1473
    mdev->ldev = 0;
#line 1477
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1478
      __free_pages(mdev->md_io_tmpp, 0U);
#line 1479
      mdev->md_io_tmpp = 0;
    } else {

    }
  } else {

  }
#line 1484
  if ((int )ns.ldv_35532.disk > 3 && (int )ns.ldv_35532.pdsk > 3) {
#line 1484
    tmp___8 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1484
    if (tmp___8 != 0) {
#line 1486
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1487
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1491
  if ((((int )os.ldv_35532.conn > 10 && (int )ns.ldv_35532.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1494
    resume_next_sg(mdev);
  } else {

  }
#line 1498
  if (((int )os.ldv_35532.disk <= 7 && (int )os.ldv_35532.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1499
    drbd_send_state(mdev);
  } else {

  }
#line 1502
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1502
    tmp___9 = is_susp(ns);
#line 1502
    if (tmp___9 == 0) {
#line 1502
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1503
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1506
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1507
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1511
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1514
    if ((int )os.ldv_35532.aftr_isp != (int )ns.ldv_35532.aftr_isp) {
#line 1515
      resume_next_sg(mdev);
    } else {

    }
#line 1517
    tmp___10 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1517
    if (tmp___10 != 0) {
#line 1518
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1521
  drbd_md_sync(mdev);
#line 1522
  return;
}
}
#line 1525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1527
  thi = (struct drbd_thread *)arg;
#line 1528
  mdev = thi->mdev;
  restart: 
#line 1533
  retval = (*(thi->function))(thi);
#line 1535
  tmp = spinlock_check(& thi->t_lock);
#line 1535
  flags = _raw_spin_lock_irqsave(tmp);
#line 1547
  if ((unsigned int )thi->t_state == 3U) {
#line 1548
    tmp___0 = get_current();
#line 1548
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1549
    thi->t_state = Running;
#line 1550
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1551
    goto restart;
  } else {

  }
#line 1554
  thi->task = 0;
#line 1555
  thi->t_state = None;
#line 1556
  __asm__  volatile   ("mfence": : : "memory");
#line 1557
  complete(& thi->stop);
#line 1558
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1560
  tmp___1 = get_current();
#line 1560
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1563
  module_put(& __this_module);
#line 1564
  return (retval);
}
}
#line 1567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1570
  spinlock_check(& thi->t_lock);
#line 1570
  __raw_spin_lock_init(& thi->t_lock.ldv_5620.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1571
  thi->task = 0;
#line 1572
  thi->t_state = None;
#line 1573
  thi->function = func;
#line 1574
  thi->mdev = mdev;
#line 1575
  return;
}
}
#line 1577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1579
  mdev = thi->mdev;
#line 1583
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1590
  tmp = spinlock_check(& thi->t_lock);
#line 1590
  flags = _raw_spin_lock_irqsave(tmp);
#line 1592
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1594
  tmp___0 = get_current();
#line 1594
  tmp___1 = get_current();
#line 1594
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1598
  tmp___2 = try_module_get(& __this_module);
#line 1598
  if (tmp___2 == 0) {
#line 1599
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1600
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1601
    return (0);
  } else {

  }
#line 1604
  init_completion(& thi->stop);
#line 1605
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1605);
  } else {

  }
#line 1606
  thi->reset_cpu_mask = 1;
#line 1607
  thi->t_state = Running;
#line 1608
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1609
  tmp___3 = get_current();
#line 1609
  flush_signals(tmp___3);
#line 1611
  tmp___4 = mdev_to_minor(mdev);
#line 1611
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1614
  tmp___5 = IS_ERR((void const   *)nt);
#line 1614
  if (tmp___5 != 0L) {
#line 1615
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1617
    module_put(& __this_module);
#line 1618
    return (0);
  } else {

  }
#line 1620
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1620
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1621
  thi->task = nt;
#line 1622
  thi->t_state = Running;
#line 1623
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1624
  wake_up_process(nt);
#line 1625
  goto ldv_45639;
  case 2U: 
#line 1627
  thi->t_state = Restarting;
#line 1628
  tmp___7 = get_current();
#line 1628
  tmp___8 = get_current();
#line 1628
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1634
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1635
  goto ldv_45639;
  }
  ldv_45639: ;
#line 1638
  return (1);
}
}
#line 1642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1646
  ns = restart != 0 ? Restarting : Exiting;
#line 1649
  tmp = spinlock_check(& thi->t_lock);
#line 1649
  flags = _raw_spin_lock_irqsave(tmp);
#line 1651
  if ((unsigned int )thi->t_state == 0U) {
#line 1652
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1653
    if (restart != 0) {
#line 1654
      drbd_thread_start(thi);
    } else {

    }
#line 1655
    return;
  } else {

  }
#line 1658
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1659
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1660
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1661
      return;
    } else {

    }
#line 1664
    thi->t_state = ns;
#line 1665
    __asm__  volatile   ("mfence": : : "memory");
#line 1666
    init_completion(& thi->stop);
#line 1667
    tmp___0 = get_current();
#line 1667
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1668
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1672
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1674
  if (wait != 0) {
#line 1675
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1676
  return;
}
}
#line 1686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1691
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1691
  if (tmp != 0U) {
#line 1692
    return;
  } else {

  }
#line 1694
  tmp___0 = mdev_to_minor(mdev);
#line 1694
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1694
  ord = (int )(tmp___0 % tmp___1);
#line 1695
  cpu = -1;
#line 1695
  goto ldv_45660;
  ldv_45659: 
#line 1696
  tmp___2 = ord;
#line 1696
  ord = ord - 1;
#line 1696
  if (tmp___2 == 0) {
#line 1697
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1698
    return;
  } else {

  }
  ldv_45660: 
#line 1695
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1695
  cpu = (int )tmp___3;
#line 1695
  if (cpu < nr_cpu_ids) {
#line 1696
    goto ldv_45659;
  } else {

  }
#line 1702
  cpumask_setall(mdev->cpu_mask);
#line 1703
  return;
}
}
#line 1712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1714
  tmp = get_current();
#line 1714
  p = tmp;
#line 1715
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1720
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1720
  if (_b != 0) {
#line 1720
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1720);
  } else {

  }
#line 1720
  if (_b != 0) {
#line 1721
    return;
  } else {

  }
#line 1722
  if (thi->reset_cpu_mask == 0) {
#line 1723
    return;
  } else {

  }
#line 1724
  thi->reset_cpu_mask = 0;
#line 1725
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1726
  return;
}
}
#line 1730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1736
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1736
  if (_b != 0) {
#line 1736
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1736);
  } else {

  }
#line 1736
  if (_b != 0) {
#line 1736
    return (0);
  } else {

  }
#line 1737
  _b___0 = size == 0UL;
#line 1737
  if (_b___0 != 0) {
#line 1737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1737);
  } else {

  }
#line 1737
  if (_b___0 != 0) {
#line 1737
    return (0);
  } else {

  }
#line 1739
  h->magic = 1728214147U;
#line 1740
  tmp = __fswab16((int )((__u16 )cmd));
#line 1740
  h->command = tmp;
#line 1741
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1741
  h->length = tmp___0;
#line 1743
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1745
  ok = (size_t )sent == size;
#line 1746
  if (ok == 0) {
#line 1747
    tmp___1 = cmdname(cmd);
#line 1747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1749
  return (ok);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1758
  ok = 0;
#line 1761
  if (use_data_socket != 0) {
#line 1762
    ldv_mutex_lock_129(& mdev->data.mutex);
#line 1763
    sock = mdev->data.socket;
  } else {
#line 1765
    ldv_mutex_lock_130(& mdev->meta.mutex);
#line 1766
    sock = mdev->meta.socket;
  }
#line 1771
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1771
  if (tmp != 0L) {
#line 1772
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1774
  if (use_data_socket != 0) {
#line 1775
    ldv_mutex_unlock_131(& mdev->data.mutex);
  } else {
#line 1777
    ldv_mutex_unlock_132(& mdev->meta.mutex);
  }
#line 1778
  return (ok);
}
}
#line 1781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1787
  h.magic = 1728214147U;
#line 1788
  tmp = __fswab16((int )((__u16 )cmd));
#line 1788
  h.command = tmp;
#line 1789
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1789
  h.length = tmp___0;
#line 1791
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1791
  if (tmp___1 == 0) {
#line 1792
    return (0);
  } else {

  }
#line 1794
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1794
  ok = tmp___2 == 8;
#line 1796
  if (ok != 0) {
#line 1796
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1796
    if ((size_t )tmp___3 == size) {
#line 1796
      tmp___4 = 1;
    } else {
#line 1796
      tmp___4 = 0;
    }
  } else {
#line 1796
    tmp___4 = 0;
  }
#line 1796
  ok = tmp___4;
#line 1799
  drbd_put_data_sock___0(mdev);
#line 1801
  return (ok);
}
}
#line 1804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1809
  apv = mdev->agreed_pro_version;
#line 1811
  if (apv > 87) {
#line 1811
    if (apv == 88) {
#line 1811
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1811
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1811
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1811
    size = tmp___0;
  } else {
#line 1811
    size = 12;
  }
#line 1820
  ldv_mutex_lock_133(& mdev->data.mutex);
#line 1821
  sock = mdev->data.socket;
#line 1823
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1823
  if (tmp___6 != 0L) {
#line 1824
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1826
    p = & mdev->data.sbuf.rs_param_95;
#line 1829
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1831
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1831
    p->rate = tmp___1;
#line 1832
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1832
    p->c_plan_ahead = tmp___2;
#line 1833
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1833
    p->c_delay_target = tmp___3;
#line 1834
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1834
    p->c_fill_target = tmp___4;
#line 1835
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1835
    p->c_max_rate = tmp___5;
#line 1837
    if (apv > 87) {
#line 1838
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1839
    if (apv > 88) {
#line 1840
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1842
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1844
    rv = 0;
  }
#line 1846
  ldv_mutex_unlock_134(& mdev->data.mutex);
#line 1848
  return (rv);
}
}
#line 1851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1856
  size = 32;
#line 1858
  if (mdev->agreed_pro_version > 86) {
#line 1859
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1859
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1863
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1863
  p = (struct p_protocol *)tmp___0;
#line 1864
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1865
    return (0);
  } else {

  }
#line 1867
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1867
  p->protocol = tmp___1;
#line 1868
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1868
  p->after_sb_0p = tmp___2;
#line 1869
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1869
  p->after_sb_1p = tmp___3;
#line 1870
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1870
  p->after_sb_2p = tmp___4;
#line 1871
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1871
  p->two_primaries = tmp___5;
#line 1873
  cf = 0;
#line 1874
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1875
    cf = cf | 1;
  } else {

  }
#line 1876
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1877
    if (mdev->agreed_pro_version > 91) {
#line 1878
      cf = cf | 2;
    } else {
#line 1880
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1881
      kfree((void const   *)p);
#line 1882
      return (0);
    }
  } else {

  }
#line 1885
  tmp___6 = __fswab32((__u32 )cf);
#line 1885
  p->conn_flags = tmp___6;
#line 1887
  if (mdev->agreed_pro_version > 86) {
#line 1888
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1890
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 1892
  kfree((void const   *)p);
#line 1893
  return (rv);
}
}
#line 1896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1901
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1901
  if (tmp == 0) {
#line 1902
    return (1);
  } else {

  }
#line 1904
  i = 0;
#line 1904
  goto ldv_45726;
  ldv_45725: ;
#line 1905
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1905
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1905
    p.uuid[i] = tmp___0;
  } else {
#line 1905
    p.uuid[i] = 0ULL;
  }
#line 1904
  i = i + 1;
  ldv_45726: ;
#line 1904
  if (i <= 3) {
#line 1905
    goto ldv_45725;
  } else {

  }
#line 1907
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1908
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1908
  p.uuid[4] = tmp___1;
#line 1909
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1910
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1910
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1911
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2009UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1912
  tmp___3 = __fswab64(uuid_flags);
#line 1912
  p.uuid[5] = tmp___3;
#line 1914
  put_ldev(mdev);
#line 1916
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 1916
  return (tmp___4);
}
}
#line 1920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1922
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1922
  return (tmp);
}
}
#line 1925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1927
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1927
  return (tmp);
}
}
#line 1931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1935
  tmp = __fswab64(val);
#line 1935
  p.uuid = tmp;
#line 1937
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 1937
  return (tmp___0);
}
}
#line 1941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1948
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1948
  if (tmp != 0) {
#line 1949
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1949
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1949);
    } else {

    }
#line 1950
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1951
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1952
    q_order_type = drbd_queue_order_type(mdev);
#line 1953
    put_ldev(mdev);
  } else {
#line 1955
    d_size = 0UL;
#line 1956
    u_size = 0UL;
#line 1957
    q_order_type = 0;
  }
#line 1960
  tmp___0 = __fswab64((__u64 )d_size);
#line 1960
  p.d_size = tmp___0;
#line 1961
  tmp___1 = __fswab64((__u64 )u_size);
#line 1961
  p.u_size = tmp___1;
#line 1962
  if (trigger_reply == 0) {
#line 1962
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1962
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1962
    tmp___3 = 0ULL;
  }
#line 1962
  tmp___4 = __fswab64(tmp___3);
#line 1962
  p.c_size = tmp___4;
#line 1963
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1963
  tmp___6 = __fswab32(tmp___5);
#line 1963
  p.max_segment_size = tmp___6;
#line 1964
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1964
  p.queue_order_type = tmp___7;
#line 1965
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1965
  p.dds_flags = tmp___8;
#line 1967
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 1969
  return (ok);
}
}
#line 1976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1980
  ok = 0;
#line 1984
  drbd_state_lock___0(mdev);
#line 1986
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 1988
  tmp = __fswab32(mdev->state.i);
#line 1988
  p.state = tmp;
#line 1989
  sock = mdev->data.socket;
#line 1991
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1991
  if (tmp___0 != 0L) {
#line 1992
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 1996
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 1998
  drbd_state_unlock(mdev);
#line 1999
  return (ok);
}
}
#line 2002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2007
  tmp = __fswab32(mask.i);
#line 2007
  p.mask = tmp;
#line 2008
  tmp___0 = __fswab32(val.i);
#line 2008
  p.val = tmp___0;
#line 2010
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2010
  return (tmp___1);
}
}
#line 2014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2018
  tmp = __fswab32((__u32 )retcode);
#line 2018
  p.retcode = tmp;
#line 2020
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2020
  return (tmp___0);
}
}
#line 2024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2037
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2039
    return (0);
  } else {

  }
#line 2041
  if (c->bit_offset >= c->bm_bits) {
#line 2042
    return (0);
  } else {

  }
#line 2045
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2046
  memset((void *)(& p->code), 0, 4087UL);
#line 2048
  plain_bits = 0UL;
#line 2053
  toggle = 2U;
  ldv_45780: ;
#line 2058
  if (toggle == 0U) {
#line 2058
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2058
    tmp = tmp___0;
  } else {
#line 2058
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2058
    tmp = tmp___1;
  }
#line 2060
  if (tmp == 0xffffffffffffffffUL) {
#line 2061
    tmp = c->bm_bits;
  } else {

  }
#line 2062
  rl = tmp - c->bit_offset;
#line 2064
  if (toggle == 2U) {
#line 2065
    if (rl == 0UL) {
#line 2068
      DCBP_set_start(p, 1);
#line 2070
      toggle = toggle == 0U;
#line 2071
      goto ldv_45778;
    } else {

    }
#line 2073
    DCBP_set_start(p, 0);
  } else {

  }
#line 2078
  if (rl == 0UL) {
#line 2079
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2081
    return (-1);
  } else {

  }
#line 2084
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2085
  if (bits == -105) {
#line 2086
    goto ldv_45779;
  } else {

  }
#line 2087
  if (bits <= 0) {
#line 2088
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2089
    return (0);
  } else {

  }
#line 2092
  toggle = toggle == 0U;
#line 2093
  plain_bits = plain_bits + rl;
#line 2094
  c->bit_offset = tmp;
  ldv_45778: ;
#line 2095
  if (c->bit_offset < c->bm_bits) {
#line 2096
    goto ldv_45780;
  } else {

  }
  ldv_45779: 
#line 2097
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2099
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2102
    c->bit_offset = c->bit_offset - plain_bits;
#line 2103
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2104
    c->bit_offset = c->word_offset * 64UL;
#line 2105
    return (0);
  } else {

  }
#line 2110
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2113
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2115
  return ((int )len);
}
}
#line 2119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30395 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2122
  p = (struct p_compressed_bm *)h;
#line 2127
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2129
  if (len < 0) {
#line 2130
    return (FAILED);
  } else {

  }
#line 2132
  if (len != 0) {
#line 2133
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2134
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2137
    c->packets[0] = c->packets[0] + 1U;
#line 2138
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2140
    if (c->bit_offset >= c->bm_bits) {
#line 2141
      len = 0;
    } else {

    }
  } else {
#line 2145
    __min1 = 511UL;
#line 2145
    __min2 = c->bm_words - c->word_offset;
#line 2145
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2146
    len = (int )((unsigned int )num_words * 8U);
#line 2147
    if (len != 0) {
#line 2148
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2149
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2151
    c->word_offset = c->word_offset + num_words;
#line 2152
    c->bit_offset = c->word_offset * 64UL;
#line 2154
    c->packets[1] = c->packets[1] + 1U;
#line 2155
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2157
    if (c->bit_offset > c->bm_bits) {
#line 2158
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2160
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2162
  if (ok == 2) {
#line 2163
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2164
  return ((enum ldv_30395 )ok);
}
}
#line 2168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30395 tmp___5 ;

  {
#line 2174
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2174
  if (_b != 0) {
#line 2174
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2174);
  } else {

  }
#line 2174
  if (_b != 0) {
#line 2174
    return (0);
  } else {

  }
#line 2178
  tmp = __get_free_pages(16U, 0U);
#line 2178
  p = (struct p_header80 *)tmp;
#line 2179
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2180
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2181
    return (0);
  } else {

  }
#line 2184
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2184
  if (tmp___2 != 0) {
#line 2185
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2185
    if (tmp___1 != 0) {
#line 2186
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2187
      drbd_bm_set_all(mdev);
#line 2188
      tmp___0 = drbd_bm_write(mdev);
#line 2188
      if (tmp___0 != 0) {
#line 2192
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2194
        drbd_md_clear_flag(mdev, 8);
#line 2195
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2198
    put_ldev(mdev);
  } else {

  }
#line 2201
  tmp___3 = drbd_bm_bits(mdev);
#line 2201
  tmp___4 = drbd_bm_words(mdev);
#line 2201
  __constr_expr_0.bm_bits = tmp___3;
#line 2201
  __constr_expr_0.bm_words = tmp___4;
#line 2201
  __constr_expr_0.bit_offset = 0UL;
#line 2201
  __constr_expr_0.word_offset = 0UL;
#line 2201
  __constr_expr_0.packets[0] = 0U;
#line 2201
  __constr_expr_0.packets[1] = 0U;
#line 2201
  __constr_expr_0.bytes[0] = 0U;
#line 2201
  __constr_expr_0.bytes[1] = 0U;
#line 2201
  c = __constr_expr_0;
  ldv_45807: 
#line 2207
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2207
  ret = (int )tmp___5;
#line 2208
  if (ret == 0) {
#line 2209
    goto ldv_45807;
  } else {

  }
#line 2210
  free_pages((unsigned long )p, 0U);
#line 2211
  return (ret == 2);
}
}
#line 2214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2218
  tmp = drbd_get_data_sock___0(mdev);
#line 2218
  if (tmp == 0) {
#line 2219
    return (-1);
  } else {

  }
#line 2220
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2220
  err = tmp___0 == 0;
#line 2221
  drbd_put_data_sock___0(mdev);
#line 2222
  return (err);
}
}
#line 2225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2230
  p.barrier = barrier_nr;
#line 2231
  tmp = __fswab32(set_size);
#line 2231
  p.set_size = tmp;
#line 2233
  if ((int )mdev->state.ldv_35532.conn <= 9) {
#line 2234
    return (0);
  } else {

  }
#line 2235
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2237
  return (ok);
}
}
#line 2248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2256
  p.sector = sector;
#line 2257
  p.block_id = block_id;
#line 2258
  p.blksize = blksize;
#line 2259
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2259
  tmp___0 = __fswab32((__u32 )tmp);
#line 2259
  p.seq_num = tmp___0;
#line 2261
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35532.conn <= 9) {
#line 2262
    return (0);
  } else {

  }
#line 2263
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2265
  return (ok);
}
}
#line 2271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2274
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2274
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2274
    tmp___0 = tmp;
  } else {
#line 2274
    tmp___0 = 0U;
  }
#line 2274
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2276
  tmp___1 = __fswab32((__u32 )data_size);
#line 2276
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2276
  return (tmp___2);
}
}
#line 2280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2283
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2283
  return (tmp);
}
}
#line 2292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2295
  tmp = __fswab32(e->size);
#line 2295
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2295
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_42956.block_id);
#line 2295
  return (tmp___1);
}
}
#line 2303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2306
  tmp = __fswab64(block_id);
#line 2306
  tmp___0 = __fswab32((__u32 )blksize);
#line 2306
  tmp___1 = __fswab64((__u64 )sector);
#line 2306
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2306
  return (tmp___2);
}
}
#line 2312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2318
  tmp = __fswab64((__u64 )sector);
#line 2318
  p.sector = tmp;
#line 2319
  p.block_id = block_id;
#line 2320
  tmp___0 = __fswab32((__u32 )size);
#line 2320
  p.blksize = tmp___0;
#line 2322
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2324
  return (ok);
}
}
#line 2327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2335
  tmp = __fswab64((__u64 )sector);
#line 2335
  p.sector = tmp;
#line 2336
  p.block_id = 1728263026ULL;
#line 2337
  tmp___0 = __fswab32((__u32 )size);
#line 2337
  p.blksize = tmp___0;
#line 2339
  p.head.magic = 1728214147U;
#line 2340
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2340
  p.head.command = tmp___1;
#line 2341
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2341
  p.head.length = tmp___2;
#line 2343
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2345
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2345
  ok = tmp___3 == 32;
#line 2346
  if (ok != 0) {
#line 2346
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2346
    if (tmp___4 == digest_size) {
#line 2346
      tmp___5 = 1;
    } else {
#line 2346
      tmp___5 = 0;
    }
  } else {
#line 2346
    tmp___5 = 0;
  }
#line 2346
  ok = tmp___5;
#line 2348
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2350
  return (ok);
}
}
#line 2353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2358
  tmp = __fswab64((__u64 )sector);
#line 2358
  p.sector = tmp;
#line 2359
  p.block_id = 1728261953ULL;
#line 2360
  tmp___0 = __fswab32((__u32 )size);
#line 2360
  p.blksize = tmp___0;
#line 2362
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2364
  return (ok);
}
}
#line 2371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2376
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2376
    tmp___0 = 1;
  } else {
#line 2376
    tmp = get_t_state(& mdev->asender);
#line 2376
    if ((unsigned int )tmp != 1U) {
#line 2376
      tmp___0 = 1;
    } else
#line 2376
    if ((int )mdev->state.ldv_35532.conn <= 9) {
#line 2376
      tmp___0 = 1;
    } else {
#line 2376
      tmp___0 = 0;
    }
  }
#line 2376
  drop_it = tmp___0;
#line 2381
  if (drop_it != 0) {
#line 2382
    return (1);
  } else {

  }
#line 2384
  mdev->ko_count = mdev->ko_count - 1U;
#line 2384
  drop_it = mdev->ko_count == 0U;
#line 2385
  if (drop_it == 0) {
#line 2386
    tmp___1 = get_current();
#line 2386
    tmp___2 = get_current();
#line 2386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2388
    request_ping(mdev);
  } else {

  }
#line 2391
  return (drop_it);
}
}
#line 2415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2418
  tmp = kmap(page);
#line 2418
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2418
  sent = tmp___0;
#line 2419
  kunmap(page);
#line 2420
  if ((size_t )sent == size) {
#line 2421
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2422
  return ((size_t )sent == size);
}
}
#line 2425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2428
  tmp = current_thread_info___1();
#line 2428
  oldfs = tmp->addr_limit;
#line 2430
  len = (int )size;
#line 2438
  if (disable_sendpage != 0) {
#line 2439
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2439
    return (tmp___0);
  } else {
#line 2438
    tmp___1 = page_count(page);
#line 2438
    if (tmp___1 <= 0) {
#line 2439
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2439
      return (tmp___0);
    } else {
#line 2438
      tmp___2 = PageSlab(page);
#line 2438
      if (tmp___2 != 0) {
#line 2439
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2439
        return (tmp___0);
      } else {

      }
    }
  }
#line 2441
  msg_flags = msg_flags | 16384U;
#line 2442
  drbd_update_congested(mdev);
#line 2443
  tmp___3 = current_thread_info___1();
#line 2443
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2443
  tmp___3->addr_limit = __constr_expr_0;
  ldv_45906: 
#line 2445
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2445
  sent = (int )tmp___4;
#line 2448
  if (sent == -11) {
#line 2449
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2449
    if (tmp___5 != 0) {
#line 2451
      goto ldv_45903;
    } else {
#line 2453
      goto ldv_45904;
    }
  } else {

  }
#line 2455
  if (sent <= 0) {
#line 2456
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2458
    goto ldv_45903;
  } else {

  }
#line 2460
  len = len - sent;
#line 2461
  offset = offset + sent;
  ldv_45904: ;
#line 2462
  if (len > 0) {
#line 2463
    goto ldv_45906;
  } else {

  }
  ldv_45903: 
#line 2463
  tmp___6 = current_thread_info___1();
#line 2463
  tmp___6->addr_limit = oldfs;
#line 2464
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2466
  ok = len == 0;
#line 2467
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2467
  if (tmp___7 != 0L) {
#line 2468
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2469
  return (ok);
}
}
#line 2472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2477
  bvec = bio->bi_io_vec;
#line 2477
  i = 0;
#line 2477
  goto ldv_45914;
  ldv_45913: 
#line 2478
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2478
  if (tmp == 0) {
#line 2481
    return (0);
  } else {

  }
#line 2477
  bvec = bvec + 1;
#line 2477
  i = i + 1;
  ldv_45914: ;
#line 2477
  if ((int )bio->bi_vcnt > i) {
#line 2478
    goto ldv_45913;
  } else {

  }

#line 2483
  return (1);
}
}
#line 2486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2491
  bvec = bio->bi_io_vec;
#line 2491
  i = 0;
#line 2491
  goto ldv_45923;
  ldv_45922: 
#line 2492
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2492
  if (tmp == 0) {
#line 2495
    return (0);
  } else {

  }
#line 2491
  bvec = bvec + 1;
#line 2491
  i = i + 1;
  ldv_45923: ;
#line 2491
  if ((int )bio->bi_vcnt > i) {
#line 2492
    goto ldv_45922;
  } else {

  }

#line 2497
  return (1);
}
}
#line 2500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2502
  page = e->pages;
#line 2503
  len = e->size;
#line 2505
  goto ldv_45937;
  ldv_45936: 
#line 2506
  __min1 = len;
#line 2506
  __min2 = 4096U;
#line 2506
  l = __min1 < __min2 ? __min1 : __min2;
#line 2507
  tmp = page_chain_next(page);
#line 2507
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2507
  if (tmp___0 == 0) {
#line 2509
    return (0);
  } else {

  }
#line 2510
  len = len - l;
#line 2505
  page = page_chain_next(page);
  ldv_45937: ;
#line 2505
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2505
    tmp___1 = page_chain_next(page);
#line 2505
    __builtin_prefetch((void const   *)tmp___1);
#line 2505
    if (1 != 0) {
#line 2506
      goto ldv_45936;
    } else {
#line 2508
      goto ldv_45938;
    }
  } else {

  }
  ldv_45938: ;
#line 2512
  return (1);
}
}
#line 2515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2517
  if (mdev->agreed_pro_version > 94) {
#line 2518
    return ((u32 )((((((bi_rw & 32UL) != 0UL ? 2 : 0) | ((bi_rw & 512UL) != 0UL ? 8 : 0)) | ((bi_rw & 16384UL) != 0UL ? 16 : 0)) | ((bi_rw & 33554432UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2524
    return ((bi_rw & 544UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;

  {
#line 2532
  ok = 1;
#line 2534
  dp_flags = 0U;
#line 2538
  tmp = drbd_get_data_sock___0(mdev);
#line 2538
  if (tmp == 0) {
#line 2539
    return (0);
  } else {

  }
#line 2541
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2541
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2541
    dgs = (int )tmp___0;
  } else {
#line 2541
    dgs = 0;
  }
#line 2544
  if (req->size <= 32768U) {
#line 2545
    p.head.h80.magic = 1728214147U;
#line 2546
    p.head.h80.command = 0U;
#line 2547
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2547
    p.head.h80.length = tmp___1;
  } else {
#line 2550
    p.head.h95.magic = 23171U;
#line 2551
    p.head.h95.command = 0U;
#line 2552
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2552
    p.head.h95.length = tmp___2;
  }
#line 2556
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2556
  p.sector = tmp___3;
#line 2557
  p.block_id = (u64 )req;
#line 2558
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2558
  req->seq_num = tmp___4;
#line 2558
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2558
  p.seq_num = tmp___5;
#line 2561
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2563
  if ((int )mdev->state.ldv_35532.conn > 15 && (int )mdev->state.ldv_35532.conn <= 21) {
#line 2565
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2567
  tmp___6 = __fswab32(dp_flags);
#line 2567
  p.dp_flags = tmp___6;
#line 2568
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2569
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2569
  ok = tmp___7 == 32;
#line 2571
  if (ok != 0 && dgs != 0) {
#line 2572
    dgb = mdev->int_dig_out;
#line 2573
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2574
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2576
  if (ok != 0) {
#line 2577
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2578
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2580
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2583
  drbd_put_data_sock___0(mdev);
#line 2585
  return (ok);
}
}
#line 2592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 2600
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2600
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2600
    dgs = (int )tmp;
  } else {
#line 2600
    dgs = 0;
  }
#line 2603
  if (e->size <= 32768U) {
#line 2604
    p.head.h80.magic = 1728214147U;
#line 2605
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2605
    p.head.h80.command = tmp___0;
#line 2606
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2606
    p.head.h80.length = tmp___1;
  } else {
#line 2609
    p.head.h95.magic = 23171U;
#line 2610
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2610
    p.head.h95.command = tmp___2;
#line 2611
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2611
    p.head.h95.length = tmp___3;
  }
#line 2615
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2615
  p.sector = tmp___4;
#line 2616
  p.block_id = e->ldv_42956.block_id;
#line 2623
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 2623
  if (tmp___5 == 0) {
#line 2624
    return (0);
  } else {

  }
#line 2626
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2626
  ok = tmp___6 == 32;
#line 2627
  if (ok != 0 && dgs != 0) {
#line 2628
    dgb = mdev->int_dig_out;
#line 2629
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2630
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2632
  if (ok != 0) {
#line 2633
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2635
  drbd_put_data_sock___0(mdev);
#line 2637
  return (ok);
}
}
#line 2656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2661
  sent = 0;
#line 2663
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2664
    return (-1000);
  } else {

  }
#line 2668
  iov.iov_base = buf;
#line 2669
  iov.iov_len = size;
#line 2671
  msg.msg_name = 0;
#line 2672
  msg.msg_namelen = 0;
#line 2673
  msg.msg_control = 0;
#line 2674
  msg.msg_controllen = 0UL;
#line 2675
  msg.msg_flags = msg_flags | 16384U;
#line 2677
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2678
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2679
    drbd_update_congested(mdev);
  } else {

  }
  ldv_45974: 
#line 2691
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2692
  if (rv == -11) {
#line 2693
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2693
    if (tmp != 0) {
#line 2694
      goto ldv_45972;
    } else {
#line 2696
      goto ldv_45973;
    }
  } else {

  }
#line 2698
  if (rv == 0) {
#line 2698
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2698);
  } else {

  }
#line 2699
  if (rv == -4) {
#line 2700
    tmp___0 = get_current();
#line 2700
    flush_signals(tmp___0);
#line 2701
    rv = 0;
  } else {

  }
#line 2703
  if (rv < 0) {
#line 2704
    goto ldv_45972;
  } else {

  }
#line 2705
  sent = sent + rv;
#line 2706
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2707
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_45973: ;
#line 2708
  if ((size_t )sent < size) {
#line 2709
    goto ldv_45974;
  } else {

  }
  ldv_45972: ;
#line 2710
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2711
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2713
  if (rv <= 0) {
#line 2714
    if (rv != -11) {
#line 2715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2718
      val.i = 0U;
#line 2718
      val.ldv_35532.conn = 4U;
#line 2718
      mask.i = 0U;
#line 2718
      mask.ldv_35532.conn = 31U;
#line 2718
      drbd_force_state(mdev, mask, val);
    } else {
#line 2720
      val___0.i = 0U;
#line 2720
      val___0.ldv_35532.conn = 3U;
#line 2720
      mask___0.i = 0U;
#line 2720
      mask___0.ldv_35532.conn = 31U;
#line 2720
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2723
  return (sent);
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2728
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2730
  rv = 0;
#line 2732
  ldv_mutex_lock_139(& drbd_main_mutex);
#line 2733
  tmp = spinlock_check(& mdev->req_lock);
#line 2733
  flags = _raw_spin_lock_irqsave(tmp);
#line 2737
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2738
    if ((mode & 2U) != 0U) {
#line 2739
      rv = -30;
    } else
#line 2740
    if (allow_oos == 0) {
#line 2741
      rv = -124;
    } else {

    }
  } else {

  }
#line 2744
  if (rv == 0) {
#line 2745
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2746
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2747
  ldv_mutex_unlock_140(& drbd_main_mutex);
#line 2749
  return (rv);
}
}
#line 2752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2754
  mdev = (struct drbd_conf *)gd->private_data;
#line 2755
  ldv_mutex_lock_141(& drbd_main_mutex);
#line 2756
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2757
  ldv_mutex_unlock_142(& drbd_main_mutex);
#line 2758
  return (0);
}
}
#line 2761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2763
  mdev = (struct drbd_conf *)q->queuedata;
#line 2766
  spin_lock_irq(q->queue_lock);
#line 2767
  blk_remove_plug(q);
#line 2768
  spin_unlock_irq(q->queue_lock);
#line 2771
  spin_lock_irq(& mdev->req_lock);
#line 2772
  if ((int )mdev->state.ldv_35532.pdsk > 3 && (int )mdev->state.ldv_35532.conn > 9) {
#line 2773
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2773
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2773);
    } else {

    }
#line 2774
    tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 2774
    if (tmp___0 != 0) {
#line 2779
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2779
      if (tmp != 0) {
#line 2780
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2784
  spin_unlock_irq(& mdev->req_lock);
#line 2786
  if ((int )mdev->state.ldv_35532.disk > 3) {
#line 2787
    drbd_kick_lo(mdev);
  } else {

  }
#line 2788
  return;
}
}
#line 2790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2794
  __constr_expr_0.rate = 250;
#line 2794
  __constr_expr_0.after = -1;
#line 2794
  __constr_expr_0.al_extents = 127;
#line 2794
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2794
  __constr_expr_0.verify_alg_len = 0;
#line 2794
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2794
  __constr_expr_0.cpu_mask_len = 0;
#line 2794
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2794
  __constr_expr_0.csums_alg_len = 0;
#line 2794
  __constr_expr_0.use_rle = 0U;
#line 2794
  __constr_expr_0.on_no_data = 0;
#line 2794
  __constr_expr_0.c_plan_ahead = 0;
#line 2794
  __constr_expr_0.c_delay_target = 10;
#line 2794
  __constr_expr_0.c_fill_target = 0;
#line 2794
  __constr_expr_0.c_max_rate = 102400;
#line 2794
  __constr_expr_0.c_min_rate = 4096;
#line 2794
  mdev->sync_conf = __constr_expr_0;
#line 2812
  __constr_expr_1.ldv_35532.role = 2U;
#line 2812
  __constr_expr_1.ldv_35532.peer = 0U;
#line 2812
  __constr_expr_1.ldv_35532.conn = 0U;
#line 2812
  __constr_expr_1.ldv_35532.disk = 0U;
#line 2812
  __constr_expr_1.ldv_35532.pdsk = 6U;
#line 2812
  __constr_expr_1.ldv_35532.susp = 0U;
#line 2812
  __constr_expr_1.ldv_35532.aftr_isp = (unsigned char)0;
#line 2812
  __constr_expr_1.ldv_35532.peer_isp = (unsigned char)0;
#line 2812
  __constr_expr_1.ldv_35532.user_isp = (unsigned char)0;
#line 2812
  __constr_expr_1.ldv_35532.susp_nod = 0U;
#line 2812
  __constr_expr_1.ldv_35532.susp_fen = 0U;
#line 2812
  __constr_expr_1.ldv_35532._pad = (unsigned short)0;
#line 2812
  mdev->state = __constr_expr_1;
#line 2813
  return;
}
}
#line 2824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2829
  drbd_set_defaults(mdev);
#line 2834
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 2836
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2837
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2838
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2839
  atomic_set(& mdev->unacked_cnt, 0);
#line 2840
  atomic_set(& mdev->local_cnt, 0);
#line 2841
  atomic_set(& mdev->net_cnt, 0);
#line 2842
  atomic_set(& mdev->packet_seq, 0);
#line 2843
  atomic_set(& mdev->pp_in_use, 0);
#line 2844
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2845
  atomic_set(& mdev->rs_sect_in, 0);
#line 2846
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2848
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2849
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2850
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2851
  sema_init(& mdev->data.work.s, 0);
#line 2852
  sema_init(& mdev->meta.work.s, 0);
#line 2853
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2855
  spinlock_check(& mdev->data.work.q_lock);
#line 2855
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5620.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2856
  spinlock_check(& mdev->meta.work.q_lock);
#line 2856
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5620.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2858
  spinlock_check(& mdev->al_lock);
#line 2858
  __raw_spin_lock_init(& mdev->al_lock.ldv_5620.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2859
  spinlock_check(& mdev->req_lock);
#line 2859
  __raw_spin_lock_init(& mdev->req_lock.ldv_5620.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2860
  spinlock_check(& mdev->peer_seq_lock);
#line 2860
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5620.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2861
  spinlock_check(& mdev->epoch_lock);
#line 2861
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5620.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2863
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2864
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2865
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2866
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2867
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2868
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2869
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2870
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2871
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2872
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2873
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 2874
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2875
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2877
  mdev->resync_work.cb = & w_resync_inactive;
#line 2878
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2879
  mdev->go_diskless.cb = & w_go_diskless;
#line 2880
  mdev->md_sync_work.cb = & w_md_sync;
#line 2881
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2882
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2883
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2884
  mdev->resync_timer.function = & resync_timer_fn;
#line 2885
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2886
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2887
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2889
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2890
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2891
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___13);
#line 2892
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2893
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2894
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2896
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2897
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2898
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2900
  mdev->agreed_pro_version = 95;
#line 2901
  mdev->write_ordering = WO_bio_barrier;
#line 2902
  mdev->resync_wenr = 4294967295U;
#line 2903
  return;
}
}
#line 2905 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 2908
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2913
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2913
  if (tmp___0 != 0) {
#line 2914
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2915
  tmp___9 = 0UL;
#line 2915
  mdev->rs_failed = tmp___9;
#line 2915
  tmp___8 = tmp___9;
#line 2915
  mdev->rs_total = tmp___8;
#line 2915
  tmp___7 = tmp___8;
#line 2915
  mdev->rs_start = tmp___7;
#line 2915
  tmp___6 = tmp___7;
#line 2915
  mdev->p_size = tmp___6;
#line 2915
  tmp___5 = (unsigned int )tmp___6;
#line 2915
  mdev->writ_cnt = tmp___5;
#line 2915
  tmp___4 = tmp___5;
#line 2915
  mdev->send_cnt = tmp___4;
#line 2915
  tmp___3 = tmp___4;
#line 2915
  mdev->recv_cnt = tmp___3;
#line 2915
  tmp___2 = tmp___3;
#line 2915
  mdev->read_cnt = tmp___2;
#line 2915
  tmp___1 = tmp___2;
#line 2915
  mdev->bm_writ_cnt = tmp___1;
#line 2915
  mdev->al_writ_cnt = tmp___1;
#line 2925
  mdev->rs_last_events = 0;
#line 2926
  mdev->rs_last_sect_ev = 0;
#line 2927
  i = 0;
#line 2927
  goto ldv_46033;
  ldv_46032: 
#line 2928
  mdev->rs_mark_left[i] = 0UL;
#line 2929
  mdev->rs_mark_time[i] = 0UL;
#line 2927
  i = i + 1;
  ldv_46033: ;
#line 2927
  if (i <= 7) {
#line 2928
    goto ldv_46032;
  } else {

  }

#line 2931
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2931
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2931);
  } else {

  }
#line 2933
  drbd_set_my_capacity(mdev, 0UL);
#line 2934
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2936
    drbd_bm_resize(mdev, 0UL, 1);
#line 2937
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2940
  drbd_free_resources(mdev);
#line 2941
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 2947
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2947
  if (tmp___10 == 0) {
#line 2947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2947);
  } else {

  }
#line 2948
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2948
  if (tmp___11 == 0) {
#line 2948
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2948);
  } else {

  }
#line 2949
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2949
  if (tmp___12 == 0) {
#line 2949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2949);
  } else {

  }
#line 2950
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2950
  if (tmp___13 == 0) {
#line 2950
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2950);
  } else {

  }
#line 2951
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2951
  if (tmp___14 == 0) {
#line 2951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2951);
  } else {

  }
#line 2952
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2952
  if (tmp___15 == 0) {
#line 2952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2952);
  } else {

  }
#line 2953
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2953
  if (tmp___16 == 0) {
#line 2953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2953);
  } else {

  }
#line 2954
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2954
  if (tmp___17 == 0) {
#line 2954
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2954);
  } else {

  }
#line 2955
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2955
  if (tmp___18 == 0) {
#line 2955
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2955);
  } else {

  }
#line 2956
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2956
  if (tmp___19 == 0) {
#line 2956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2956);
  } else {

  }
#line 2957
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 2957
  if (tmp___20 == 0) {
#line 2957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2957);
  } else {

  }
#line 2958
  return;
}
}
#line 2962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2966
  goto ldv_46040;
  ldv_46039: 
#line 2967
  page = drbd_pp_pool;
#line 2968
  drbd_pp_pool = (struct page *)page->ldv_12351.ldv_12348.private;
#line 2969
  __free_pages(page, 0U);
#line 2970
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_46040: ;
#line 2966
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2967
    goto ldv_46039;
  } else {

  }

#line 2975
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2976
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2977
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2978
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2979
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2980
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2981
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2982
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2983
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2984
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2985
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2986
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2988
  drbd_ee_mempool = 0;
#line 2989
  drbd_request_mempool = 0;
#line 2990
  drbd_ee_cache = 0;
#line 2991
  drbd_request_cache = 0;
#line 2992
  drbd_bm_ext_cache = 0;
#line 2993
  drbd_al_ext_cache = 0;
#line 2995
  return;
}
}
#line 2998 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3001
  number = (int const   )(minor_count * 32U);
#line 3005
  drbd_request_mempool = 0;
#line 3006
  drbd_ee_cache = 0;
#line 3007
  drbd_request_cache = 0;
#line 3008
  drbd_bm_ext_cache = 0;
#line 3009
  drbd_al_ext_cache = 0;
#line 3010
  drbd_pp_pool = 0;
#line 3013
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 3015
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3016
    goto Enomem;
  } else {

  }
#line 3018
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3020
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3021
    goto Enomem;
  } else {

  }
#line 3023
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3025
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3026
    goto Enomem;
  } else {

  }
#line 3028
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3030
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3031
    goto Enomem;
  } else {

  }
#line 3034
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3036
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3037
    goto Enomem;
  } else {

  }
#line 3039
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3041
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3042
    goto Enomem;
  } else {

  }
#line 3045
  spinlock_check(& drbd_pp_lock);
#line 3045
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5620.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3047
  i = 0;
#line 3047
  goto ldv_46051;
  ldv_46050: 
#line 3048
  page = alloc_pages(131282U, 0U);
#line 3049
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3050
    goto Enomem;
  } else {

  }
#line 3051
  page->ldv_12351.ldv_12348.private = (unsigned long )drbd_pp_pool;
#line 3052
  drbd_pp_pool = page;
#line 3047
  i = i + 1;
  ldv_46051: ;
#line 3047
  if (i < number) {
#line 3048
    goto ldv_46050;
  } else {

  }
#line 3054
  drbd_pp_vacant = number;
#line 3056
  return (0);
  Enomem: 
#line 3059
  drbd_destroy_mempools();
#line 3060
  return (-12);
}
}
#line 3063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3070
  return (0);
}
}
#line 3073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3077 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3081
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3082
  if (rr != 0) {
#line 3083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3085
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3086
  if (rr != 0) {
#line 3087
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3089
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3090
  if (rr != 0) {
#line 3091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3093
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3094
  if (rr != 0) {
#line 3095
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3097
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3098
  if (rr != 0) {
#line 3099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3100
  return;
}
}
#line 3104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3106
  tmp = minor_to_mdev(minor);
#line 3106
  mdev = tmp;
#line 3108
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3109
    return;
  } else {

  }
#line 3112
  if (mdev->open_cnt != 0) {
#line 3113
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3114);
  } else {

  }
#line 3116
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3116
  _b = tmp___0 == 0;
#line 3116
  if (_b != 0) {
#line 3116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3116);
  } else {

  }
#line 3116
  if (_b != 0) {
#line 3118
    lp = mdev->data.work.q.next;
#line 3118
    goto ldv_46072;
    ldv_46071: 
#line 3119
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3118
    lp = lp->next;
    ldv_46072: 
#line 3118
    __builtin_prefetch((void const   *)lp->next);
#line 3118
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3119
      goto ldv_46071;
    } else {

    }

  } else {

  }
#line 3124
  del_gendisk(mdev->vdisk);
#line 3129
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3130
    bdput(mdev->this_bdev);
  } else {

  }
#line 3132
  drbd_free_resources(mdev);
#line 3134
  drbd_release_ee_lists(mdev);
#line 3137
  kfree((void const   *)mdev->ee_hash);
#line 3143
  lc_destroy(mdev->act_log);
#line 3144
  lc_destroy(mdev->resync);
#line 3146
  kfree((void const   *)mdev->p_uuid);
#line 3149
  kfree((void const   *)mdev->int_dig_out);
#line 3150
  kfree((void const   *)mdev->int_dig_in);
#line 3151
  kfree((void const   *)mdev->int_dig_vv);
#line 3156
  drbd_free_mdev(mdev);
#line 3157
  return;
}
}
#line 3159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3163
  unregister_reboot_notifier(& drbd_notifier);
#line 3165
  drbd_nl_cleanup();
#line 3167
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3168
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3169
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3170
    i = minor_count;
#line 3171
    goto ldv_46079;
    ldv_46078: 
#line 3172
    drbd_delete_device(i);
    ldv_46079: 
#line 3171
    tmp = i;
#line 3171
    i = i - 1U;
#line 3171
    if (tmp != 0U) {
#line 3172
      goto ldv_46078;
    } else {

    }
#line 3173
    drbd_destroy_mempools();
  } else {

  }
#line 3176
  kfree((void const   *)minor_table);
#line 3178
  unregister_blkdev(147U, "drbd");
#line 3180
  printk("<6>drbd: module cleanup done.\n");
#line 3181
  return;
}
}
#line 3190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3192
  mdev = (struct drbd_conf *)congested_data;
#line 3194
  reason = 45;
#line 3195
  r = 0;
#line 3197
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3197
  if (tmp == 0) {
#line 3199
    r = bdi_bits;
#line 3200
    reason = 100;
#line 3201
    goto out;
  } else {

  }
#line 3204
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3204
  if (tmp___0 != 0) {
#line 3205
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3206
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3207
    put_ldev(mdev);
#line 3208
    if (r != 0) {
#line 3209
      reason = 98;
    } else {

    }
  } else {

  }
#line 3212
  if ((bdi_bits & 4) != 0) {
#line 3212
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3212
    if (tmp___1 != 0) {
#line 3213
      r = r | 4;
#line 3214
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3218
  mdev->congestion_reason = reason;
#line 3219
  return (r);
}
}
#line 3222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3229
  tmp = kzalloc___2(4560UL, 208U);
#line 3229
  mdev = (struct drbd_conf *)tmp;
#line 3230
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3231
    return (0);
  } else {

  }
#line 3232
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3232
  if (tmp___0) {
#line 3232
    tmp___1 = 0;
  } else {
#line 3232
    tmp___1 = 1;
  }
#line 3232
  if (tmp___1) {
#line 3233
    goto out_no_cpumask;
  } else {

  }
#line 3235
  mdev->minor = minor;
#line 3237
  drbd_init_set_defaults(mdev);
#line 3239
  q = blk_alloc_queue(208U);
#line 3240
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3241
    goto out_no_q;
  } else {

  }
#line 3242
  mdev->rq_queue = q;
#line 3243
  q->queuedata = (void *)mdev;
#line 3245
  disk = alloc_disk(1);
#line 3246
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3247
    goto out_no_disk;
  } else {

  }
#line 3248
  mdev->vdisk = disk;
#line 3250
  set_disk_ro(disk, 1);
#line 3252
  disk->queue = q;
#line 3253
  disk->major = 147;
#line 3254
  disk->first_minor = (int )minor;
#line 3255
  disk->fops = & drbd_ops;
#line 3256
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3257
  disk->private_data = (void *)mdev;
#line 3259
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3261
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3263
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3264
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3266
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3267
  blk_queue_max_segment_size(q, 131072U);
#line 3268
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3269
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3270
  q->queue_lock = & mdev->req_lock;
#line 3272
  q->unplug_fn = & drbd_unplug_fn;
#line 3274
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3275
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3276
    goto out_no_io_page;
  } else {

  }
#line 3278
  tmp___2 = drbd_bm_init(mdev);
#line 3278
  if (tmp___2 != 0) {
#line 3279
    goto out_no_bitmap;
  } else {

  }
#line 3281
  tmp___3 = tl_init(mdev);
#line 3281
  if (tmp___3 == 0) {
#line 3282
    goto out_no_tl;
  } else {

  }
#line 3284
  tmp___4 = kzalloc___2(120UL, 208U);
#line 3284
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3285
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3286
    goto out_no_app_reads;
  } else {

  }
#line 3288
  tmp___5 = kzalloc___2(40UL, 208U);
#line 3288
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3289
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3290
    goto out_no_epoch;
  } else {

  }
#line 3292
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3293
  mdev->epochs = 1U;
#line 3295
  return (mdev);
  out_no_epoch: 
#line 3300
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3302
  tl_cleanup(mdev);
  out_no_tl: 
#line 3304
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3306
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3308
  put_disk(disk);
  out_no_disk: 
#line 3310
  blk_cleanup_queue(q);
  out_no_q: 
#line 3312
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3314
  kfree((void const   *)mdev);
#line 3315
  return (0);
}
}
#line 3320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3322
  kfree((void const   *)mdev->current_epoch);
#line 3323
  kfree((void const   *)mdev->app_reads_hash);
#line 3324
  tl_cleanup(mdev);
#line 3325
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3326
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3327
  __free_pages(mdev->md_io_page, 0U);
#line 3328
  put_disk(mdev->vdisk);
#line 3329
  blk_cleanup_queue(mdev->rq_queue);
#line 3330
  free_cpumask_var(mdev->cpu_mask);
#line 3331
  kfree((void const   *)mdev);
#line 3332
  return;
}
}
#line 3335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3346
  if (minor_count == 0U || minor_count > 255U) {
#line 3347
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3350
    return (-22);
  } else {

  }
#line 3356
  err = drbd_nl_init();
#line 3357
  if (err != 0) {
#line 3358
    return (err);
  } else {

  }
#line 3360
  err = register_blkdev(147U, "drbd");
#line 3361
  if (err != 0) {
#line 3362
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3365
    return (err);
  } else {

  }
#line 3368
  register_reboot_notifier(& drbd_notifier);
#line 3373
  err = -12;
#line 3375
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3377
  drbd_proc = 0;
#line 3378
  tmp = kzalloc___2((unsigned long )minor_count * 8UL, 208U);
#line 3378
  minor_table = (struct drbd_conf **)tmp;
#line 3380
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3381
    goto Enomem;
  } else {

  }
#line 3383
  err = drbd_create_mempools();
#line 3384
  if (err != 0) {
#line 3385
    goto Enomem;
  } else {

  }
#line 3387
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3388
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3389
    printk("<3>drbd: unable to register proc file\n");
#line 3390
    goto Enomem;
  } else {

  }
#line 3393
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3395
  printk("<6>drbd: initialized. Version: 8.3.9rc2 (api:%d/proto:%d-%d)\n", 88, 86,
         95);
#line 3398
  tmp___0 = drbd_buildtag();
#line 3398
  printk("<6>drbd: %s\n", tmp___0);
#line 3399
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3401
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3403
  return (0);
  Enomem: 
#line 3406
  drbd_cleanup();
#line 3407
  if (err == -12) {
#line 3409
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3411
    printk("<3>drbd: initialization failure\n");
  }
#line 3412
  return (err);
}
}
#line 3415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3417
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3418
    return;
  } else {

  }
#line 3420
  bd_release(ldev->backing_bdev);
#line 3421
  bd_release(ldev->md_bdev);
#line 3423
  fput(ldev->lo_file);
#line 3424
  fput(ldev->md_file);
#line 3426
  kfree((void const   *)ldev);
#line 3427
  return;
}
}
#line 3429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3431
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3432
    ldv_mutex_lock_143(& mdev->data.mutex);
#line 3433
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3434
    sock_release(mdev->data.socket);
#line 3435
    mdev->data.socket = 0;
#line 3436
    ldv_mutex_unlock_144(& mdev->data.mutex);
  } else {

  }
#line 3438
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3439
    ldv_mutex_lock_145(& mdev->meta.mutex);
#line 3440
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3441
    sock_release(mdev->meta.socket);
#line 3442
    mdev->meta.socket = 0;
#line 3443
    ldv_mutex_unlock_146(& mdev->meta.mutex);
  } else {

  }
#line 3445
  return;
}
}
#line 3448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3450
  crypto_free_hash(mdev->csums_tfm);
#line 3451
  mdev->csums_tfm = 0;
#line 3452
  crypto_free_hash(mdev->verify_tfm);
#line 3453
  mdev->verify_tfm = 0;
#line 3454
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3455
  mdev->cram_hmac_tfm = 0;
#line 3456
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3457
  mdev->integrity_w_tfm = 0;
#line 3458
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3459
  mdev->integrity_r_tfm = 0;
#line 3461
  drbd_free_sock(mdev);
#line 3463
  drbd_free_bc(mdev->ldev);
#line 3463
  mdev->ldev = 0;
#line 3464
  return;
}
}
#line 3491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3497
  del_timer(& mdev->md_sync_timer);
#line 3499
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3499
  if (tmp == 0) {
#line 3500
    return;
  } else {

  }
#line 3504
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3504
  if (tmp___0 == 0) {
#line 3505
    return;
  } else {

  }
#line 3507
  ldv_mutex_lock_147(& mdev->md_io_mutex);
#line 3508
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3508
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3509
  memset((void *)buffer, 0, 512UL);
#line 3511
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3511
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3511
  buffer->la_size = tmp___3;
#line 3512
  i = 0;
#line 3512
  goto ldv_46143;
  ldv_46142: 
#line 3513
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3513
  buffer->uuid[i] = tmp___4;
#line 3512
  i = i + 1;
  ldv_46143: ;
#line 3512
  if (i <= 3) {
#line 3513
    goto ldv_46142;
  } else {

  }
#line 3514
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3514
  buffer->flags = tmp___5;
#line 3515
  buffer->magic = 1795323011U;
#line 3517
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3517
  buffer->md_size_sect = tmp___6;
#line 3518
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3518
  buffer->al_offset = tmp___7;
#line 3519
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3519
  buffer->al_nr_extents = tmp___8;
#line 3520
  buffer->bm_bytes_per_bit = 1048576U;
#line 3521
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3521
  buffer->device_uuid = tmp___9;
#line 3523
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3523
  buffer->bm_offset = tmp___10;
#line 3525
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3525
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3525
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3525);
  } else {

  }
#line 3526
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3528
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3528
  if (tmp___12 == 0) {
#line 3530
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3531
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3536
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3536
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3538
  ldv_mutex_unlock_148(& mdev->md_io_mutex);
#line 3539
  put_ldev(mdev);
#line 3540
  return;
}
}
#line 3550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3553
  rv = 101;
#line 3555
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3555
  if (tmp == 0) {
#line 3556
    return (118);
  } else {

  }
#line 3558
  ldv_mutex_lock_149(& mdev->md_io_mutex);
#line 3559
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3559
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3561
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3561
  if (tmp___1 == 0) {
#line 3564
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3565
    rv = 118;
#line 3566
    goto err;
  } else {

  }
#line 3569
  tmp___2 = __fswab32(buffer->magic);
#line 3569
  if (tmp___2 != 2205418091U) {
#line 3570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3571
    rv = 119;
#line 3572
    goto err;
  } else {

  }
#line 3574
  tmp___4 = __fswab32(buffer->al_offset);
#line 3574
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3575
    tmp___3 = __fswab32(buffer->al_offset);
#line 3575
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3577
    rv = 119;
#line 3578
    goto err;
  } else {

  }
#line 3580
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3580
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3581
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3581
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3583
    rv = 119;
#line 3584
    goto err;
  } else {

  }
#line 3586
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3586
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3587
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3587
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3589
    rv = 119;
#line 3590
    goto err;
  } else {

  }
#line 3593
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3593
  if (tmp___10 != 4096U) {
#line 3594
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3596
    rv = 119;
#line 3597
    goto err;
  } else {

  }
#line 3600
  tmp___11 = __fswab64(buffer->la_size);
#line 3600
  bdev->md.la_size_sect = tmp___11;
#line 3601
  i = 0;
#line 3601
  goto ldv_46155;
  ldv_46154: 
#line 3602
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3602
  bdev->md.uuid[i] = tmp___12;
#line 3601
  i = i + 1;
  ldv_46155: ;
#line 3601
  if (i <= 3) {
#line 3602
    goto ldv_46154;
  } else {

  }
#line 3603
  tmp___13 = __fswab32(buffer->flags);
#line 3603
  bdev->md.flags = tmp___13;
#line 3604
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3604
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3605
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3605
  bdev->md.device_uuid = tmp___15;
#line 3607
  if (mdev->sync_conf.al_extents <= 6) {
#line 3608
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3611
  ldv_mutex_unlock_150(& mdev->md_io_mutex);
#line 3612
  put_ldev(mdev);
#line 3614
  return (rv);
}
}
#line 3617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void debug_drbd_uuid(struct drbd_conf *mdev , enum drbd_uuid_index index ) 
{ 
  char *uuid_str[6U] ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 3619
  uuid_str[0] = (char *)"CURRENT";
#line 3619
  uuid_str[1] = (char *)"BITMAP";
#line 3619
  uuid_str[2] = (char *)"HISTORY_START";
#line 3619
  uuid_str[3] = (char *)"HISTORY_END";
#line 3619
  uuid_str[4] = (char *)"SIZE";
#line 3619
  uuid_str[5] = (char *)"FLAGS";
#line 3628
  if ((unsigned int )index > 5U) {
#line 3629
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid_index >= EXTENDED_SIZE\n");
#line 3630
    return;
  } else {

  }
#line 3633
  descriptor.modname = "drbd";
#line 3633
  descriptor.function = "debug_drbd_uuid";
#line 3633
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared";
#line 3633
  descriptor.format = " uuid[%s] now %016llX\n";
#line 3633
  descriptor.lineno = 3635U;
#line 3633
  descriptor.flags = 0U;
#line 3633
  descriptor.enabled = (char)0;
#line 3633
  tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 3633
  if (tmp != 0L) {
#line 3633
    goto do_printk___0;
  } else {

  }
#line 3633
  goto out___0;
  do_printk___0: 
#line 3633
  dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid[%s] now %016llX\n",
             uuid_str[(unsigned int )index], (mdev->ldev)->md.uuid[(unsigned int )index]);
  out___0: ;
#line 3635
  return;
}
}
#line 3657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3659
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3659
  if (tmp == 0) {
#line 3660
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3661
  return;
}
}
#line 3664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3668
  i = 2;
#line 3668
  goto ldv_46174;
  ldv_46173: 
#line 3669
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3670
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )(i + 1));
#line 3668
  i = i + 1;
  ldv_46174: ;
#line 3668
  if (i <= 2) {
#line 3669
    goto ldv_46173;
  } else {

  }

#line 3673
  return;
}
}
#line 3674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3676
  if (idx == 0) {
#line 3677
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3678
      val = val | 1ULL;
    } else {
#line 3680
      val = val & 0xfffffffffffffffeULL;
    }
#line 3682
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3685
  (mdev->ldev)->md.uuid[idx] = val;
#line 3686
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )idx);
#line 3687
  drbd_md_mark_dirty(mdev);
#line 3688
  return;
}
}
#line 3691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3693
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3694
    drbd_uuid_move_history(mdev);
#line 3695
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
#line 3696
    debug_drbd_uuid(mdev, UI_HISTORY_START);
  } else {

  }
#line 3698
  _drbd_uuid_set(mdev, idx, val);
#line 3699
  return;
}
}
#line 3708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3712
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3713
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3713);
  } else {

  }
#line 3714
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3715
  debug_drbd_uuid(mdev, UI_BITMAP);
#line 3717
  get_random_bytes((void *)(& val), 8);
#line 3718
  _drbd_uuid_set(mdev, 0, val);
#line 3719
  return;
}
}
#line 3721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3723
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3724
    return;
  } else {

  }
#line 3726
  if (val == 0ULL) {
#line 3727
    drbd_uuid_move_history(mdev);
#line 3728
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3729
    (mdev->ldev)->md.uuid[1] = 0ULL;
#line 3730
    debug_drbd_uuid(mdev, UI_HISTORY_START);
#line 3731
    debug_drbd_uuid(mdev, UI_BITMAP);
  } else {
#line 3733
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3734
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3736
    (mdev->ldev)->md.uuid[1] = val;
#line 3737
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 3739
    debug_drbd_uuid(mdev, UI_BITMAP);
  }
#line 3741
  drbd_md_mark_dirty(mdev);
#line 3742
  return;
}
}
#line 3750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3752
  rv = -5;
#line 3754
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3754
  if (tmp != 0) {
#line 3755
    drbd_md_set_flag(mdev, 8);
#line 3756
    drbd_md_sync(mdev);
#line 3757
    drbd_bm_set_all(mdev);
#line 3759
    rv = drbd_bm_write(mdev);
#line 3761
    if (rv == 0) {
#line 3762
      drbd_md_clear_flag(mdev, 8);
#line 3763
      drbd_md_sync(mdev);
    } else {

    }
#line 3766
    put_ldev(mdev);
  } else {

  }
#line 3769
  return (rv);
}
}
#line 3778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3780
  rv = -5;
#line 3782
  drbd_resume_al(mdev);
#line 3783
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3783
  if (tmp != 0) {
#line 3784
    drbd_bm_clear_all(mdev);
#line 3785
    rv = drbd_bm_write(mdev);
#line 3786
    put_ldev(mdev);
  } else {

  }
#line 3789
  return (rv);
}
}
#line 3792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3794
  __mptr = (struct drbd_work  const  *)w;
#line 3794
  work = (struct bm_io_work *)__mptr;
#line 3797
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3797
  if (tmp != 0) {
#line 3797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3797);
  } else {

  }
#line 3799
  drbd_bm_lock(mdev, work->why);
#line 3800
  rv = (*(work->io_fn))(mdev);
#line 3801
  drbd_bm_unlock(mdev);
#line 3803
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3804
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3806
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3807
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3809
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3810
  work->why = 0;
#line 3812
  return (1);
}
}
#line 3815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 3817
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3817);
  } else {

  }
#line 3822
  val.i = 0U;
#line 3822
  val.ldv_35532.disk = 0U;
#line 3822
  mask.i = 0U;
#line 3822
  mask.ldv_35532.disk = 15U;
#line 3822
  drbd_force_state(mdev, mask, val);
#line 3825
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3825
  if (tmp == 0) {
#line 3825
    goto ldv_46220;
  } else {

  }
#line 3825
  tmp___0 = get_current();
#line 3825
  __wait.flags = 0U;
#line 3825
  __wait.private = (void *)tmp___0;
#line 3825
  __wait.func = & autoremove_wake_function;
#line 3825
  __wait.task_list.next = & __wait.task_list;
#line 3825
  __wait.task_list.prev = & __wait.task_list;
  ldv_46223: 
#line 3825
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3825
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3825
  if (tmp___1 == 0) {
#line 3825
    goto ldv_46222;
  } else {

  }
#line 3825
  schedule();
#line 3825
  goto ldv_46223;
  ldv_46222: 
#line 3825
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46220: 
#line 3827
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3828
  return (1);
}
}
#line 3831 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3833
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3833);
  } else {

  }
#line 3834
  tmp = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3834
  if (tmp == 0) {
#line 3835
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 3836
  return;
}
}
#line 3853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3858
  tmp = get_current();
#line 3858
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3858
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3858);
  } else {

  }
#line 3860
  tmp___0 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3860
  if (tmp___0 != 0) {
#line 3860
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3860);
  } else {

  }
#line 3861
  tmp___1 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 3861
  if (tmp___1 != 0) {
#line 3861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3861);
  } else {

  }
#line 3862
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3862
  if (tmp___2 == 0) {
#line 3862
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3862);
  } else {

  }
#line 3863
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3864
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3867
  mdev->bm_io_work.io_fn = io_fn;
#line 3868
  mdev->bm_io_work.done = done;
#line 3869
  mdev->bm_io_work.why = why;
#line 3871
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 3872
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3872
  if (tmp___4 == 0) {
#line 3873
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3873
    if (tmp___3 != 0) {
#line 3874
      set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3875
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3877
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3878
  return;
}
}
#line 3890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3894
  tmp = get_current();
#line 3894
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3894);
  } else {

  }
#line 3896
  drbd_suspend_io(mdev);
#line 3898
  drbd_bm_lock(mdev, why);
#line 3899
  rv = (*io_fn)(mdev);
#line 3900
  drbd_bm_unlock(mdev);
#line 3902
  drbd_resume_io(mdev);
#line 3904
  return (rv);
}
}
#line 3907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3909
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3910
    drbd_md_mark_dirty(mdev);
#line 3911
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3913
  return;
}
}
#line 3915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3917
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3918
    drbd_md_mark_dirty(mdev);
#line 3919
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3921
  return;
}
}
#line 3922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3924
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3927 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3929
  mdev = (struct drbd_conf *)data;
#line 3931
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3932
  return;
}
}
#line 3934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3936
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3941
  drbd_md_sync(mdev);
#line 3942
  return (1);
}
}
#line 3962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3966
  tmp = rsp->count;
#line 3966
  rsp->count = rsp->count - 1UL;
#line 3966
  if (tmp == 0UL) {
#line 3967
    get_random_bytes((void *)(& refresh), 8);
#line 3968
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3969
    rsp->count = 10000UL;
  } else {

  }
#line 3971
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3972
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3972
  return ((unsigned long )tmp___0);
}
}
#line 3976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3977
  _faults[0] = (char *)"Meta-data write";
#line 3977
  _faults[1] = (char *)"Meta-data read";
#line 3977
  _faults[2] = (char *)"Resync write";
#line 3977
  _faults[3] = (char *)"Resync read";
#line 3977
  _faults[4] = (char *)"Data write";
#line 3977
  _faults[5] = (char *)"Data read";
#line 3977
  _faults[6] = (char *)"Data read ahead";
#line 3977
  _faults[7] = (char *)"BM allocation";
#line 3977
  _faults[8] = (char *)"EE allocation";
#line 3977
  _faults[9] = (char *)"receive data corruption";
#line 3990
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3996
  rrs.state = 0UL;
#line 3996
  rrs.count = 0UL;
#line 3998
  if (fault_devs == 0) {
#line 3998
    goto _L;
  } else {
#line 3998
    tmp = mdev_to_minor(mdev);
#line 3998
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3998
      tmp___0 = _drbd_fault_random(& rrs);
#line 3998
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3998
        tmp___1 = 1;
      } else {
#line 3998
        tmp___1 = 0;
      }
    } else {
#line 3998
      tmp___1 = 0;
    }
  }
#line 3998
  ret = (unsigned int )tmp___1;
#line 4003
  if (ret != 0U) {
#line 4004
    fault_count = fault_count + 1;
#line 4006
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4006
    if (tmp___3 != 0) {
#line 4007
      tmp___2 = _drbd_fault_str(type);
#line 4007
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4011
  return (ret);
}
}
#line 4015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4020
  buildtag[0] = '\000';
#line 4020
  tmp = 1U;
#line 4020
  while (1) {
#line 4020
    if (tmp >= 38U) {
#line 4020
      break;
    } else {

    }
#line 4020
    buildtag[tmp] = (char)0;
#line 4020
    tmp = tmp + 1U;
  }
#line 4022
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4024
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4025
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4028
      buildtag[0] = 98;
    }
  } else {

  }
#line 4031
  return ((char const   *)(& buildtag));
}
}
#line 4079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_65_p1 ;
  int res_drbd_open_65 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_66_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_73_p1 ;
  void *var_drbd_notify_sys_73_p2 ;
  unsigned long var_md_sync_timer_fn_102_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4328
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4275
  LDV_IN_INTERRUPT = 1;
#line 4284
  ldv_initialize();
#line 4311
  ldv_handler_precall();
#line 4312
  tmp = drbd_init();
#line 4312
  if (tmp != 0) {
#line 4313
    goto ldv_final;
  } else {

  }
#line 4335
  goto ldv_46351;
  ldv_46350: 
#line 4339
  tmp___0 = nondet_int();
#line 4339
  switch (tmp___0) {
  case 0: ;
#line 4344
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4370
    ldv_handler_precall();
#line 4371
    res_drbd_open_65 = drbd_open(var_group1, var_drbd_open_65_p1);
#line 4372
    ldv_check_return_value(res_drbd_open_65);
#line 4373
    if (res_drbd_open_65 != 0) {
#line 4374
      goto ldv_module_exit;
    } else {

    }
#line 4392
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4398
  goto ldv_46345;
  case 1: ;
#line 4402
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4428
    ldv_handler_precall();
#line 4429
    drbd_release(var_group2, var_drbd_release_66_p1);
#line 4447
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4453
  goto ldv_46345;
  case 2: 
#line 4483
  ldv_handler_precall();
#line 4484
  drbd_notify_sys(var_group3, var_drbd_notify_sys_73_p1, var_drbd_notify_sys_73_p2);
#line 4508
  goto ldv_46345;
  case 3: 
#line 4544
  ldv_handler_precall();
#line 4545
  md_sync_timer_fn(var_md_sync_timer_fn_102_p0);
#line 4563
  goto ldv_46345;
  default: ;
#line 4564
  goto ldv_46345;
  }
  ldv_46345: ;
  ldv_46351: 
#line 4335
  tmp___1 = nondet_int();
#line 4335
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4337
    goto ldv_46350;
  } else {

  }

  ldv_module_exit: 
#line 4597
  ldv_handler_precall();
#line 4598
  drbd_cleanup();
  ldv_final: 
#line 4618
  ldv_check_final_state();
#line 4621
  return;
}
}
#line 4625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4630
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4632
  mutex_lock(ldv_func_arg1);
#line 4633
  return;
}
}
#line 4635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4640
  tmp = mutex_trylock(ldv_func_arg1);
#line 4640
  ldv_func_res = tmp;
#line 4642
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4642
  return (tmp___0);
#line 4644
  return (ldv_func_res);
}
}
#line 4647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4652
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4654
  mutex_unlock(ldv_func_arg1);
#line 4655
  return;
}
}
#line 4657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4662
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4664
  mutex_lock(ldv_func_arg1);
#line 4665
  return;
}
}
#line 4667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4672
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4674
  mutex_unlock(ldv_func_arg1);
#line 4675
  return;
}
}
#line 4677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4682
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4684
  mutex_unlock(ldv_func_arg1);
#line 4685
  return;
}
}
#line 4687 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4692
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4694
  mutex_lock(ldv_func_arg1);
#line 4695
  return;
}
}
#line 4697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4702
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4704
  mutex_unlock(ldv_func_arg1);
#line 4705
  return;
}
}
#line 4707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4712
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4714
  mutex_lock(ldv_func_arg1);
#line 4715
  return;
}
}
#line 4717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4722
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4724
  mutex_lock(ldv_func_arg1);
#line 4725
  return;
}
}
#line 4727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4732
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4734
  mutex_unlock(ldv_func_arg1);
#line 4735
  return;
}
}
#line 4737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4742
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4744
  mutex_unlock(ldv_func_arg1);
#line 4745
  return;
}
}
#line 4747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4752
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4754
  mutex_lock(ldv_func_arg1);
#line 4755
  return;
}
}
#line 4757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4762
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4764
  mutex_unlock(ldv_func_arg1);
#line 4765
  return;
}
}
#line 4767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4772
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4774
  mutex_lock(ldv_func_arg1);
#line 4775
  return;
}
}
#line 4777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4782
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4784
  mutex_unlock(ldv_func_arg1);
#line 4785
  return;
}
}
#line 4787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4792
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4794
  mutex_lock(ldv_func_arg1);
#line 4795
  return;
}
}
#line 4797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4802
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4804
  mutex_unlock(ldv_func_arg1);
#line 4805
  return;
}
}
#line 4807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4812
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4814
  mutex_lock(ldv_func_arg1);
#line 4815
  return;
}
}
#line 4817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4822
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4824
  mutex_unlock(ldv_func_arg1);
#line 4825
  return;
}
}
#line 4827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4832
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4834
  mutex_lock(ldv_func_arg1);
#line 4835
  return;
}
}
#line 4837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4842
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4844
  mutex_unlock(ldv_func_arg1);
#line 4845
  return;
}
}
#line 4847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4852
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4854
  mutex_lock(ldv_func_arg1);
#line 4855
  return;
}
}
#line 4857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4862
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4864
  mutex_unlock(ldv_func_arg1);
#line 4865
  return;
}
}
#line 4867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4872
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4874
  mutex_lock(ldv_func_arg1);
#line 4875
  return;
}
}
#line 4877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4882
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4884
  mutex_unlock(ldv_func_arg1);
#line 4885
  return;
}
}
#line 4887 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4892
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4894
  mutex_lock(ldv_func_arg1);
#line 4895
  return;
}
}
#line 4897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4902
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4904
  mutex_unlock(ldv_func_arg1);
#line 4905
  return;
}
}
#line 4907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4912
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4914
  mutex_lock(ldv_func_arg1);
#line 4915
  return;
}
}
#line 4917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4922
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4924
  mutex_unlock(ldv_func_arg1);
#line 4925
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 114
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 126
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 150
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 155
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 160
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 165
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 175
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 177
  mutex_lock(ldv_func_arg1);
#line 178
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 185
  tmp = mutex_trylock(ldv_func_arg1);
#line 185
  ldv_func_res = tmp;
#line 187
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 187
  return (tmp___0);
#line 189
  return (ldv_func_res);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 197
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 199
  mutex_unlock(ldv_func_arg1);
#line 200
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 214 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5907;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5907;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5907;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5907;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5907: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 79
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp != 0L) {
#line 79
    goto do_trace;
  } else {

  }
#line 79
  return;
  do_trace: 
#line 79
  rcu_read_lock_sched_notrace();
#line 79
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
  tmp___0 = debug_lockdep_rcu_enabled();
#line 79
  if (tmp___0 != 0 && ! __warned) {
#line 79
    tmp___1 = rcu_read_lock_sched_held();
#line 79
    if (tmp___1 == 0 && 1) {
#line 79
      __warned = 1;
#line 79
      lockdep_rcu_dereference("include/trace/events/module.h", 84);
    } else {

    }
  } else {

  }
#line 79
  it_func_ptr = _________p1;
#line 79
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_11405: 
#line 79
    it_func = it_func_ptr->func;
#line 79
    __data = it_func_ptr->data;
#line 79
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 79
    it_func_ptr = it_func_ptr + 1;
#line 79
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
      goto ldv_11405;
    } else {

    }

  } else {

  }
#line 79
  rcu_read_lock_sched_notrace();
#line 81
  return;
}
}
#line 485 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 487
  ret = 1;
#line 489
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 492
    tmp = module_is_live(module);
#line 492
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 492
    if (tmp___0 != 0L) {
#line 493
      __vpp_verify = 0;
#line 493
      switch (4UL) {
      case 1UL: 
#line 493
      pao_ID__ = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11770;
      case 2UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11770;
      case 4UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11770;
      case 8UL: ;
#line 493
      if (pao_ID__ == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID__ == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11770;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11770: ;
#line 493
      goto ldv_11775;
      case 2UL: 
#line 493
      pao_ID_____0 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11781;
      case 2UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11781;
      case 4UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11781;
      case 8UL: ;
#line 493
      if (pao_ID_____0 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____0 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11781;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11781: ;
#line 493
      goto ldv_11775;
      case 4UL: 
#line 493
      pao_ID_____1 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11791;
      case 2UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11791;
      case 4UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11791;
      case 8UL: ;
#line 493
      if (pao_ID_____1 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____1 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11791;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11791: ;
#line 493
      goto ldv_11775;
      case 8UL: 
#line 493
      pao_ID_____2 = 1;
#line 493
      switch (4UL) {
      case 1UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 493
      goto ldv_11801;
      case 2UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11801;
      case 4UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 493
      goto ldv_11801;
      case 8UL: ;
#line 493
      if (pao_ID_____2 == 1) {
#line 493
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 493
      if (pao_ID_____2 == -1) {
#line 493
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 493
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 493
      goto ldv_11801;
      default: 
#line 493
      __bad_percpu_size();
      }
      ldv_11801: ;
#line 493
      goto ldv_11775;
      default: 
#line 493
      __bad_size_call_parameter();
#line 493
      goto ldv_11775;
      }
      ldv_11775: ;
#line 494
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 496
      ret = 0;
    }
  } else {

  }
#line 500
  return (ret);
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13686: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13686;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___5(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___3(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___5(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 1934 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 2000
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 397 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable___0();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck___0(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable___0();
#line 79
  return;
}
}
#line 810 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 811
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 815
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 824
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 837
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 918 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 920
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_44019;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_44019;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44019: ;
#line 1911
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[81U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 100
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 101
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_44762;
  ldv_44761: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_44759;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_44759: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_44762: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_44761;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_44823;
  ldv_44822: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_44791;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_44791;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_44791;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_44791;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_44791;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_44791;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44791;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44791;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44791;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_44791;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44791;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44791;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_44791: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_44823: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_44822;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_44926;
  ldv_44925: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_44861;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_44861;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_44861;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_44861;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_44861;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_44861;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_44861;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_44861;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_44861;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_44861;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_44861;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_44861;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_44861;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_44861;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_44861;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_44861;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_44861;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_44861;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_44861;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_44861;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44861;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_44861: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_44926: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_44925;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_44960;
  ldv_44959: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_44955;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44955;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44955;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_44955: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_44960: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_44959;
  } else {

  }

#line 71
  return (1);
}
}
#line 96
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 96 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 77
  goto ldv_45016;
  ldv_45015: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_44974;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_44974;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_44974;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_44974;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_44974;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_44974;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_44974;
  case 75: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->on_no_data = (int )tmp___4;
#line 77
  goto ldv_44974;
  case 76: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_plan_ahead = (int )tmp___5;
#line 77
  goto ldv_44974;
  case 77: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_delay_target = (int )tmp___6;
#line 77
  goto ldv_44974;
  case 78: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_fill_target = (int )tmp___7;
#line 77
  goto ldv_44974;
  case 79: 
#line 77
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_max_rate = (int )tmp___8;
#line 77
  goto ldv_44974;
  case 80: 
#line 77
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_min_rate = (int )tmp___9;
#line 77
  goto ldv_44974;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_44974: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_45016: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 77
  tag = (int )tmp___11;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_45015;
  } else {

  }

#line 77
  return (1);
}
}
#line 140
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 140 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 138
  goto ldv_45315;
  ldv_45314: 
#line 138
  tmp = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 138
  dlen = (int )tmp___0;
#line 138
  switch (tag & 8191) {
  case 66: 
#line 138
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 138
  goto ldv_45312;
  default: ;
#line 138
  if ((tag & 8192) != 0) {
#line 138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 138
    return (0);
  } else {

  }
  }
  ldv_45312: 
#line 138
  tags = tags + (unsigned long )dlen;
  ldv_45315: 
#line 138
  tmp___1 = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 138
  tag = (int )tmp___2;
#line 138
  if (tag != 0) {
#line 139
    goto ldv_45314;
  } else {

  }

#line 138
  return (1);
}
}
#line 144
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 144 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 142
  goto ldv_45332;
  ldv_45331: 
#line 142
  tmp = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 142
  dlen = (int )tmp___0;
#line 142
  switch (tag & 8191) {
  case 63: 
#line 142
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 142
  goto ldv_45329;
  default: ;
#line 142
  if ((tag & 8192) != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 142
    return (0);
  } else {

  }
  }
  ldv_45329: 
#line 142
  tags = tags + (unsigned long )dlen;
  ldv_45332: 
#line 142
  tmp___1 = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 142
  tag = (int )tmp___2;
#line 142
  if (tag != 0) {
#line 143
    goto ldv_45331;
  } else {

  }

#line 142
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_45377;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_45377;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_45377;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_45377;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45377;
  }
  ldv_45377: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_45384;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_45384;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_45384;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_45384;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45384;
  }
  ldv_45384: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_45391;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_45391;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45391;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45391;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45391;
  }
  ldv_45391: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_45398;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_45398;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_45398;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_45398;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45398;
  }
  ldv_45398: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_45405;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_45405;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45405;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45405;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45405;
  }
  ldv_45405: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_45415;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_45415;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_45415;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_45415;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45415;
  }
  ldv_45415: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_45422;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_45422;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45422;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45422;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45422;
  }
  ldv_45422: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_45432;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_45432;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_45432;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_45432;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45432;
  }
  ldv_45432: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_45439;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_45439;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_45439;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_45439;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45439;
  }
  ldv_45439: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_45446;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_45446;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45446;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45446;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45446;
  }
  ldv_45446: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_45453;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_45453;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_45453;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_45453;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45453;
  }
  ldv_45453: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_45460;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_45460;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_45460;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_45460;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45460;
  }
  ldv_45460: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_45467;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_45467;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45467;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45467;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45467;
  }
  ldv_45467: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_45474;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_45474;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_45474;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_45474;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45474;
  }
  ldv_45474: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_45481;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_45481;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_45481;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_45481;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45481;
  }
  ldv_45481: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_45488;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_45488;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45488;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45488;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45488;
  }
  ldv_45488: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_45495;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_45495;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_45495;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_45495;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45495;
  }
  ldv_45495: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_45502;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_45502;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_45502;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_45502;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45502;
  }
  ldv_45502: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_45509;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_45509;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_45509;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_45509;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45509;
  }
  ldv_45509: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_45516;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_45516;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_45516;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_45516;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45516;
  }
  ldv_45516: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_45523;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_45523;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_45523;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_45523;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45523;
  }
  ldv_45523: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_45530;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_45530;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_45530;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_45530;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45530;
  }
  ldv_45530: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_45537;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_45537;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_45537;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_45537;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45537;
  }
  ldv_45537: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_45544;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_45544;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_45544;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_45544;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45544;
  }
  ldv_45544: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_45551;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_45551;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_45551;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_45551;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45551;
  }
  ldv_45551: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_45558;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_45558;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_45558;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_45558;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45558;
  }
  ldv_45558: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_45565;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_45565;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_45565;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_45565;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45565;
  }
  ldv_45565: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_45572;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_45572;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_45572;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_45572;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45572;
  }
  ldv_45572: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_45579;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_45579;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_45579;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_45579;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45579;
  }
  ldv_45579: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_45604;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_45604;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_45604;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_45604;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45604;
  }
  ldv_45604: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_45611;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_45611;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_45611;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_45611;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45611;
  }
  ldv_45611: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_45621;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_45621;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_45621;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_45621;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45621;
  }
  ldv_45621: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_45628;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_45628;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_45628;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_45628;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45628;
  }
  ldv_45628: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_45638;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_45638;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_45638;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_45638;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45638;
  }
  ldv_45638: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_45645;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_45645;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_45645;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_45645;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45645;
  }
  ldv_45645: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_45655;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_45655;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_45655;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_45655;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45655;
  }
  ldv_45655: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_45662;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_45662;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45662;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45662;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45662;
  }
  ldv_45662: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_45672;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_45672;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_45672;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_45672;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45672;
  }
  ldv_45672: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_45679;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_45679;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45679;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45679;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45679;
  }
  ldv_45679: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_45689;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_45689;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_45689;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_45689;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45689;
  }
  ldv_45689: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_45696;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_45696;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_45696;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_45696;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45696;
  }
  ldv_45696: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_45703;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_45703;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45703;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45703;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45703;
  }
  ldv_45703: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_45710;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_45710;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_45710;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_45710;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45710;
  }
  ldv_45710: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_45717;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_45717;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_45717;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_45717;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45717;
  }
  ldv_45717: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_45724;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_45724;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45724;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45724;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45724;
  }
  ldv_45724: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_45731;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_45731;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_45731;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_45731;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45731;
  }
  ldv_45731: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_45738;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_45738;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_45738;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_45738;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45738;
  }
  ldv_45738: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_45745;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_45745;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45745;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45745;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45745;
  }
  ldv_45745: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_45752;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_45752;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_45752;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_45752;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45752;
  }
  ldv_45752: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_45759;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_45759;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_45759;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_45759;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45759;
  }
  ldv_45759: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_45766;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_45766;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45766;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45766;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45766;
  }
  ldv_45766: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_45773;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_45773;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_45773;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_45773;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45773;
  }
  ldv_45773: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_45780;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_45780;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_45780;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_45780;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45780;
  }
  ldv_45780: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_45787;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_45787;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45787;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45787;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45787;
  }
  ldv_45787: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_45794;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_45794;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_45794;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_45794;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45794;
  }
  ldv_45794: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_45801;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_45801;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_45801;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_45801;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45801;
  }
  ldv_45801: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_45808;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_45808;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45808;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45808;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45808;
  }
  ldv_45808: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_45815;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_45815;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_45815;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_45815;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45815;
  }
  ldv_45815: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_45822;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_45822;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_45822;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_45822;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45822;
  }
  ldv_45822: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_45829;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_45829;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45829;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45829;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45829;
  }
  ldv_45829: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_45836;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_45836;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_45836;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_45836;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45836;
  }
  ldv_45836: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_45843;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_45843;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_45843;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_45843;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45843;
  }
  ldv_45843: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_45850;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_45850;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45850;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45850;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45850;
  }
  ldv_45850: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_45857;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_45857;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_45857;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_45857;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45857;
  }
  ldv_45857: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_45864;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_45864;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_45864;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_45864;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45864;
  }
  ldv_45864: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_45871;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_45871;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45871;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45871;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45871;
  }
  ldv_45871: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_45878;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_45878;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_45878;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_45878;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45878;
  }
  ldv_45878: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_45885;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_45885;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_45885;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_45885;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45885;
  }
  ldv_45885: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_45892;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_45892;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45892;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45892;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45892;
  }
  ldv_45892: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_45899;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_45899;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_45899;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_45899;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45899;
  }
  ldv_45899: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_45906;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_45906;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_45906;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_45906;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45906;
  }
  ldv_45906: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_45913;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_45913;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45913;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45913;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45913;
  }
  ldv_45913: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_45920;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_45920;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_45920;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_45920;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45920;
  }
  ldv_45920: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_45927;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_45927;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_45927;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_45927;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45927;
  }
  ldv_45927: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_45934;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_45934;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45934;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45934;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45934;
  }
  ldv_45934: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_45941;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_45941;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_45941;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_45941;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45941;
  }
  ldv_45941: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_45948;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_45948;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_45948;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_45948;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45948;
  }
  ldv_45948: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_45955;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_45955;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45955;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45955;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45955;
  }
  ldv_45955: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_45962;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_45962;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_45962;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_45962;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45962;
  }
  ldv_45962: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_45969;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_45969;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_45969;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_45969;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45969;
  }
  ldv_45969: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_45976;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_45976;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45976;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45976;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45976;
  }
  ldv_45976: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_45983;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_45983;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_45983;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_45983;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45983;
  }
  ldv_45983: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_45990;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_45990;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_45990;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_45990;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45990;
  }
  ldv_45990: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_45997;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_45997;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45997;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45997;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45997;
  }
  ldv_45997: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_46004;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_46004;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_46004;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_46004;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46004;
  }
  ldv_46004: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_46011;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_46011;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_46011;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_46011;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46011;
  }
  ldv_46011: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_46018;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_46018;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_46018;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_46018;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46018;
  }
  ldv_46018: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_46025;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_46025;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_46025;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_46025;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46025;
  }
  ldv_46025: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_46032;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_46032;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_46032;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_46032;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46032;
  }
  ldv_46032: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_46039;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_46039;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_46039;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_46039;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46039;
  }
  ldv_46039: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_46046;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_46046;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_46046;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_46046;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46046;
  }
  ldv_46046: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_46053;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_46053;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_46053;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_46053;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46053;
  }
  ldv_46053: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_46060;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_46060;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_46060;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_46060;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46060;
  }
  ldv_46060: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_46067;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_46067;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_46067;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_46067;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46067;
  }
  ldv_46067: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_46074;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_46074;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_46074;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_46074;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46074;
  }
  ldv_46074: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_46081;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_46081;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_46081;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_46081;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46081;
  }
  ldv_46081: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_46088;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_46088;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_46088;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_46088;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46088;
  }
  ldv_46088: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_46095;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_46095;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_46095;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_46095;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46095;
  }
  ldv_46095: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 96
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_46178;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_46178;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_46178;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_46178;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46178;
  }
  ldv_46178: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_46185;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_46185;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_46185;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_46185;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46185;
  }
  ldv_46185: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_46192;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_46192;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_46192;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_46192;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46192;
  }
  ldv_46192: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_46199;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_46199;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_46199;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_46199;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46199;
  }
  ldv_46199: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_46206;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_46206;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_46206;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_46206;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46206;
  }
  ldv_46206: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_46213;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_46213;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_46213;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_46213;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46213;
  }
  ldv_46213: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_46220;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_46220;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_46220;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_46220;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46220;
  }
  ldv_46220: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_46227;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_46227;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_46227;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_46227;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46227;
  }
  ldv_46227: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_46234;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_46234;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46234;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46234;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46234;
  }
  ldv_46234: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_46241;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_46241;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_46241;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_46241;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46241;
  }
  ldv_46241: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_46248;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_46248;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46248;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46248;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46248;
  }
  ldv_46248: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_46258;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_46258;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_46258;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_46258;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46258;
  }
  ldv_46258: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_46265;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_46265;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46265;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46265;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46265;
  }
  ldv_46265: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_46275;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_46275;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_46275;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_46275;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46275;
  }
  ldv_46275: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_46282;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_46282;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46282;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46282;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46282;
  }
  ldv_46282: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_46292;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_46292;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_46292;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_46292;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46292;
  }
  ldv_46292: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_46299;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_46299;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_46299;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_46299;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46299;
  }
  ldv_46299: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___16 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = 75U;
#line 77
  goto ldv_46306;
  case 2UL: 
#line 77
  put_unaligned_le16(75, __gu_p___16);
#line 77
  goto ldv_46306;
  case 4UL: 
#line 77
  put_unaligned_le32(75U, __gu_p___16);
#line 77
  goto ldv_46306;
  case 8UL: 
#line 77
  put_unaligned_le64(75ULL, __gu_p___16);
#line 77
  goto ldv_46306;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46306;
  }
  ldv_46306: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 4U;
#line 77
  goto ldv_46313;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___17);
#line 77
  goto ldv_46313;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___17);
#line 77
  goto ldv_46313;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___17);
#line 77
  goto ldv_46313;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46313;
  }
  ldv_46313: 
#line 77
  __gu_p___18 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 77
  goto ldv_46320;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 77
  goto ldv_46320;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46320;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46320;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46320;
  }
  ldv_46320: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___19 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = 76U;
#line 77
  goto ldv_46327;
  case 2UL: 
#line 77
  put_unaligned_le16(76, __gu_p___19);
#line 77
  goto ldv_46327;
  case 4UL: 
#line 77
  put_unaligned_le32(76U, __gu_p___19);
#line 77
  goto ldv_46327;
  case 8UL: 
#line 77
  put_unaligned_le64(76ULL, __gu_p___19);
#line 77
  goto ldv_46327;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46327;
  }
  ldv_46327: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 4U;
#line 77
  goto ldv_46334;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___20);
#line 77
  goto ldv_46334;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___20);
#line 77
  goto ldv_46334;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___20);
#line 77
  goto ldv_46334;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46334;
  }
  ldv_46334: 
#line 77
  __gu_p___21 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 77
  goto ldv_46341;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 77
  goto ldv_46341;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46341;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46341;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46341;
  }
  ldv_46341: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 77U;
#line 77
  goto ldv_46348;
  case 2UL: 
#line 77
  put_unaligned_le16(77, __gu_p___22);
#line 77
  goto ldv_46348;
  case 4UL: 
#line 77
  put_unaligned_le32(77U, __gu_p___22);
#line 77
  goto ldv_46348;
  case 8UL: 
#line 77
  put_unaligned_le64(77ULL, __gu_p___22);
#line 77
  goto ldv_46348;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46348;
  }
  ldv_46348: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = 4U;
#line 77
  goto ldv_46355;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___23);
#line 77
  goto ldv_46355;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___23);
#line 77
  goto ldv_46355;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___23);
#line 77
  goto ldv_46355;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46355;
  }
  ldv_46355: 
#line 77
  __gu_p___24 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 77
  goto ldv_46362;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 77
  goto ldv_46362;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46362;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46362;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46362;
  }
  ldv_46362: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = 78U;
#line 77
  goto ldv_46369;
  case 2UL: 
#line 77
  put_unaligned_le16(78, __gu_p___25);
#line 77
  goto ldv_46369;
  case 4UL: 
#line 77
  put_unaligned_le32(78U, __gu_p___25);
#line 77
  goto ldv_46369;
  case 8UL: 
#line 77
  put_unaligned_le64(78ULL, __gu_p___25);
#line 77
  goto ldv_46369;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46369;
  }
  ldv_46369: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 4U;
#line 77
  goto ldv_46376;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___26);
#line 77
  goto ldv_46376;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___26);
#line 77
  goto ldv_46376;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___26);
#line 77
  goto ldv_46376;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46376;
  }
  ldv_46376: 
#line 77
  __gu_p___27 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 77
  goto ldv_46383;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 77
  goto ldv_46383;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46383;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46383;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46383;
  }
  ldv_46383: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___21 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___28 = (void *)tmp___21;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___28) = 79U;
#line 77
  goto ldv_46390;
  case 2UL: 
#line 77
  put_unaligned_le16(79, __gu_p___28);
#line 77
  goto ldv_46390;
  case 4UL: 
#line 77
  put_unaligned_le32(79U, __gu_p___28);
#line 77
  goto ldv_46390;
  case 8UL: 
#line 77
  put_unaligned_le64(79ULL, __gu_p___28);
#line 77
  goto ldv_46390;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46390;
  }
  ldv_46390: 
#line 77
  tmp___22 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___29 = (void *)tmp___22;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___29) = 4U;
#line 77
  goto ldv_46397;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___29);
#line 77
  goto ldv_46397;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___29);
#line 77
  goto ldv_46397;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___29);
#line 77
  goto ldv_46397;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46397;
  }
  ldv_46397: 
#line 77
  __gu_p___30 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 77
  goto ldv_46404;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 77
  goto ldv_46404;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46404;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46404;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46404;
  }
  ldv_46404: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___23 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___31 = (void *)tmp___23;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___31) = 80U;
#line 77
  goto ldv_46411;
  case 2UL: 
#line 77
  put_unaligned_le16(80, __gu_p___31);
#line 77
  goto ldv_46411;
  case 4UL: 
#line 77
  put_unaligned_le32(80U, __gu_p___31);
#line 77
  goto ldv_46411;
  case 8UL: 
#line 77
  put_unaligned_le64(80ULL, __gu_p___31);
#line 77
  goto ldv_46411;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46411;
  }
  ldv_46411: 
#line 77
  tmp___24 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___32 = (void *)tmp___24;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___32) = 4U;
#line 77
  goto ldv_46418;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___32);
#line 77
  goto ldv_46418;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___32);
#line 77
  goto ldv_46418;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___32);
#line 77
  goto ldv_46418;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46418;
  }
  ldv_46418: 
#line 77
  __gu_p___33 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 77
  goto ldv_46425;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 77
  goto ldv_46425;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46425;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46425;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46425;
  }
  ldv_46425: 
#line 77
  tags = tags + 4U;
#line 77
  return (tags);
}
}
#line 108
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 108 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 106
  tmp = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p = (void *)tmp;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p) = 33U;
#line 106
  goto ldv_46513;
  case 2UL: 
#line 106
  put_unaligned_le16(33, __gu_p);
#line 106
  goto ldv_46513;
  case 4UL: 
#line 106
  put_unaligned_le32(33U, __gu_p);
#line 106
  goto ldv_46513;
  case 8UL: 
#line 106
  put_unaligned_le64(33ULL, __gu_p);
#line 106
  goto ldv_46513;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46513;
  }
  ldv_46513: 
#line 106
  tmp___0 = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p___0 = (void *)tmp___0;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___0) = 4U;
#line 106
  goto ldv_46520;
  case 2UL: 
#line 106
  put_unaligned_le16(4, __gu_p___0);
#line 106
  goto ldv_46520;
  case 4UL: 
#line 106
  put_unaligned_le32(4U, __gu_p___0);
#line 106
  goto ldv_46520;
  case 8UL: 
#line 106
  put_unaligned_le64(4ULL, __gu_p___0);
#line 106
  goto ldv_46520;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46520;
  }
  ldv_46520: 
#line 106
  __gu_p___1 = (void *)tags;
#line 106
  switch (4UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 106
  goto ldv_46527;
  case 2UL: 
#line 106
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 106
  goto ldv_46527;
  case 4UL: 
#line 106
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46527;
  case 8UL: 
#line 106
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46527;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46527;
  }
  ldv_46527: 
#line 106
  tags = tags + 4U;
#line 106
  return (tags);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 190
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 194
  envp[0] = (char *)"HOME=/";
#line 194
  envp[1] = (char *)"TERM=linux";
#line 194
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 194
  envp[3] = 0;
#line 194
  envp[4] = 0;
#line 194
  envp[5] = 0;
#line 202
  argv[0] = (char *)(& usermode_helper);
#line 202
  argv[1] = cmd;
#line 202
  argv[2] = (char *)(& mb);
#line 202
  argv[3] = 0;
#line 205
  tmp = mdev_to_minor(mdev);
#line 205
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 207
  tmp___0 = get_net_conf(mdev);
#line 207
  if (tmp___0 != 0) {
#line 208
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 210
    afs = (char *)"ipv6";
#line 211
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 213
    goto ldv_46848;
    case 2: 
#line 215
    afs = (char *)"ipv4";
#line 216
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 218
    goto ldv_46848;
    default: 
#line 220
    afs = (char *)"ssocks";
#line 221
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_46848: 
#line 224
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 225
    envp[3] = (char *)(& af);
#line 226
    envp[4] = (char *)(& ad);
#line 227
    put_net_conf(mdev);
  } else {

  }
#line 232
  drbd_md_sync(mdev);
#line 234
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 236
  drbd_bcast_ev_helper(mdev, cmd);
#line 237
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 238
  if (ret != 0) {
#line 239
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 243
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 247
  if (ret < 0) {
#line 248
    ret = 0;
  } else {

  }
#line 250
  return (ret);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 260
  if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            260);
  } else {

  }
#line 262
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 262
  if (tmp != 0) {
#line 263
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 264
    put_ldev(mdev);
  } else {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 267
    nps = (enum drbd_disk_state )mdev->state.ldv_35532.pdsk;
#line 268
    goto out;
  }
#line 271
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 273
  switch ((r >> 8) & 255) {
  case 3: 
#line 275
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 276
  nps = D_INCONSISTENT;
#line 277
  goto ldv_46860;
  case 4: 
#line 279
  ex_to_string = (char *)"peer was fenced";
#line 280
  nps = D_OUTDATED;
#line 281
  goto ldv_46860;
  case 5: ;
#line 283
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 285
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 286
    nps = D_OUTDATED;
  } else {
#line 288
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 289
    nps = (enum drbd_disk_state )mdev->state.ldv_35532.pdsk;
  }
#line 291
  goto ldv_46860;
  case 6: 
#line 295
  ex_to_string = (char *)"peer is active";
#line 296
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 297
  nps = D_UNKNOWN;
#line 298
  val.i = 0U;
#line 298
  val.ldv_35532.disk = 5U;
#line 298
  mask.i = 0U;
#line 298
  mask.ldv_35532.disk = 15U;
#line 298
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 299
  goto ldv_46860;
  case 7: ;
#line 301
  if ((unsigned int )fp != 2U) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 303
  ex_to_string = (char *)"peer was stonithed";
#line 304
  nps = D_OUTDATED;
#line 305
  goto ldv_46860;
  default: 
#line 308
  nps = D_UNKNOWN;
#line 309
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 310
  return (nps);
  }
  ldv_46860: 
#line 313
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 317
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U && (unsigned int )nps > 5U) {
#line 320
    val___0.i = 0U;
#line 320
    val___0.ldv_35532.susp_fen = 0U;
#line 320
    mask___0.i = 0U;
#line 320
    mask___0.ldv_35532.susp_fen = 1U;
#line 320
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 323
  return (nps);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 328
  mdev = (struct drbd_conf *)data;
#line 331
  nps = drbd_try_outdate_peer(mdev);
#line 332
  val.i = 0U;
#line 332
  val.ldv_35532.pdsk = (unsigned char )nps;
#line 332
  mask.i = 0U;
#line 332
  mask.ldv_35532.pdsk = 15U;
#line 332
  drbd_request_state(mdev, mask, val);
#line 334
  return (0);
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 341
  tmp = mdev_to_minor(mdev);
#line 341
  tmp___0 = kthread_create(& _try_outdate_peer_async, (void *)mdev, "drbd%d_a_helper",
                           tmp);
#line 341
  __k = tmp___0;
#line 341
  tmp___1 = IS_ERR((void const   *)__k);
#line 341
  if (tmp___1 == 0L) {
#line 341
    wake_up_process(__k);
  } else {

  }
#line 341
  opa = __k;
#line 342
  tmp___2 = IS_ERR((void const   *)opa);
#line 342
  if (tmp___2 != 0L) {
#line 343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 344
  return;
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 348
  max_tries = 4;
#line 349
  r = 0;
#line 350
  try = 0;
#line 351
  forced = 0;
#line 355
  if ((unsigned int )new_role == 1U) {
#line 356
    request_ping(mdev);
  } else {

  }
#line 358
  ldv_mutex_lock_193(& mdev->state_mutex);
#line 360
  mask.i = 0U;
#line 360
  mask.ldv_35532.role = 3U;
#line 361
  val.i = 0U;
#line 361
  val.ldv_35532.role = (unsigned char )new_role;
#line 363
  goto ldv_46901;
  ldv_46904: 
#line 364
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 368
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 369
    val.ldv_35532.pdsk = 0U;
#line 370
    mask.ldv_35532.pdsk = 0U;
#line 371
    goto ldv_46901;
  } else {

  }
#line 374
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35532.disk <= 7 && (int )mdev->state.ldv_35532.disk > 3)) {
#line 377
    mask.ldv_35532.disk = 15U;
#line 378
    val.ldv_35532.disk = 8U;
#line 379
    forced = 1;
#line 380
    goto ldv_46901;
  } else {

  }
#line 383
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 2013UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 385
    if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 385
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              385);
    } else {

    }
#line 386
    nps = drbd_try_outdate_peer(mdev);
#line 388
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 389
      val.ldv_35532.disk = 8U;
#line 390
      mask.ldv_35532.disk = 15U;
    } else {

    }
#line 393
    val.ldv_35532.pdsk = (unsigned char )nps;
#line 394
    mask.ldv_35532.pdsk = 15U;
#line 396
    goto ldv_46901;
  } else {

  }
#line 399
  if (r == 2) {
#line 400
    goto fail;
  } else {

  }
#line 401
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 402
    nps = drbd_try_outdate_peer(mdev);
#line 404
    if (force != 0 && (unsigned int )nps > 5U) {
#line 405
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 406
      nps = D_OUTDATED;
    } else {

    }
#line 409
    mask.ldv_35532.pdsk = 15U;
#line 410
    val.ldv_35532.pdsk = (unsigned char )nps;
#line 412
    goto ldv_46901;
  } else {

  }
#line 414
  if (r == -1) {
#line 417
    tmp = get_current();
#line 417
    tmp->state = 1L;
#line 418
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 419
    if (try < max_tries) {
#line 420
      try = max_tries + -1;
    } else {

    }
#line 421
    goto ldv_46901;
  } else {

  }
#line 423
  if (r <= 0) {
#line 424
    r = _drbd_request_state(mdev, mask, val, 6);
#line 426
    if (r <= 0) {
#line 427
      goto fail;
    } else {

    }
  } else {

  }
#line 429
  goto ldv_46903;
  ldv_46901: 
#line 363
  tmp___0 = try;
#line 363
  try = try + 1;
#line 363
  if (tmp___0 < max_tries) {
#line 364
    goto ldv_46904;
  } else {

  }
  ldv_46903: ;
#line 432
  if (r <= 0) {
#line 433
    goto fail;
  } else {

  }
#line 435
  if (forced != 0) {
#line 436
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 439
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 439
  if (tmp___1 == 0) {
#line 439
    goto ldv_46905;
  } else {

  }
#line 439
  tmp___2 = get_current();
#line 439
  __wait.flags = 0U;
#line 439
  __wait.private = (void *)tmp___2;
#line 439
  __wait.func = & autoremove_wake_function;
#line 439
  __wait.task_list.next = & __wait.task_list;
#line 439
  __wait.task_list.prev = & __wait.task_list;
  ldv_46908: 
#line 439
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 439
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 439
  if (tmp___3 == 0) {
#line 439
    goto ldv_46907;
  } else {

  }
#line 439
  schedule();
#line 439
  goto ldv_46908;
  ldv_46907: 
#line 439
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46905: ;
#line 441
  if ((unsigned int )new_role == 2U) {
#line 442
    set_disk_ro(mdev->vdisk, 1);
#line 443
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 443
    if (tmp___4 != 0) {
#line 444
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 445
      put_ldev(mdev);
    } else {

    }
  } else {
#line 448
    tmp___5 = get_net_conf(mdev);
#line 448
    if (tmp___5 != 0) {
#line 449
      (mdev->net_conf)->want_lose = 0U;
#line 450
      put_net_conf(mdev);
    } else {

    }
#line 452
    set_disk_ro(mdev->vdisk, 0);
#line 453
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 453
    if (tmp___6 != 0) {
#line 454
      if ((((int )mdev->state.ldv_35532.conn <= 9 || (int )mdev->state.ldv_35532.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 457
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 459
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 460
      put_ldev(mdev);
    } else {

    }
  }
#line 464
  if ((unsigned int )new_role == 2U) {
#line 464
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 464
    if (tmp___7 != 0) {
#line 465
      drbd_al_to_on_disk_bm(mdev);
#line 466
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 469
  if ((int )mdev->state.ldv_35532.conn > 8) {
#line 471
    if (forced != 0) {
#line 472
      drbd_send_uuids(mdev);
    } else {

    }
#line 473
    drbd_send_state(mdev);
  } else {

  }
#line 476
  drbd_md_sync(mdev);
#line 478
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 480
  ldv_mutex_unlock_194(& mdev->state_mutex);
#line 481
  return (r);
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 488
  if ((unsigned int )minor >= minor_count) {
#line 489
    return (0);
  } else {

  }
#line 491
  mdev = minor_to_mdev((unsigned int )minor);
#line 493
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 494
    disk = 0;
#line 495
    mdev = drbd_new_device((unsigned int )minor);
#line 497
    spin_lock_irq(& drbd_pp_lock);
#line 498
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 499
      *(minor_table + (unsigned long )minor) = mdev;
#line 500
      disk = mdev->vdisk;
#line 501
      mdev = 0;
    } else {

    }
#line 503
    spin_unlock_irq(& drbd_pp_lock);
#line 505
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 508
      add_disk(disk);
    } else {
#line 510
      drbd_free_mdev(mdev);
    }
#line 512
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 515
  return (mdev);
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 523
  memset((void *)(& primary_args), 0, 4UL);
#line 524
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 524
  if (tmp == 0) {
#line 525
    reply->ret_code = 126;
#line 526
    return (0);
  } else {

  }
#line 529
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 532
  return (0);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 538
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 540
  return (0);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 548
  md_size_sect = 0UL;
#line 549
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 552
  bdev->md.md_size_sect = 262144U;
#line 553
  tmp = drbd_md_ss__(mdev, bdev);
#line 553
  bdev->md.md_offset = (u64 )tmp;
#line 554
  bdev->md.al_offset = 8;
#line 555
  bdev->md.bm_offset = 72;
#line 556
  goto ldv_46932;
  case -2: 
#line 559
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 559
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 560
  bdev->md.md_offset = 0ULL;
#line 561
  bdev->md.al_offset = 8;
#line 562
  bdev->md.bm_offset = 72;
#line 563
  goto ldv_46932;
  case -1: ;
  case -3: 
#line 566
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 566
  bdev->md.md_offset = (u64 )tmp___1;
#line 568
  bdev->md.al_offset = -64;
#line 570
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 571
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 572
  md_size_sect = md_size_sect >> 15;
#line 573
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 577
  md_size_sect = md_size_sect + 72UL;
#line 579
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 581
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 582
  goto ldv_46932;
  }
  ldv_46932: ;
#line 585
  return;
}
}
#line 586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 589
  units[0] = 75;
#line 589
  units[1] = 77;
#line 589
  units[2] = 71;
#line 589
  units[3] = 84;
#line 589
  units[4] = 80;
#line 589
  units[5] = 69;
#line 590
  base = 0;
#line 591
  goto ldv_46943;
  ldv_46942: 
#line 593
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 594
  base = base + 1;
  ldv_46943: ;
#line 591
  if (size > 9999ULL) {
#line 592
    goto ldv_46942;
  } else {

  }
#line 596
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 598
  return (buf);
}
}
#line 614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 616
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 617
  tmp = is_susp(mdev->state);
#line 617
  if (tmp != 0) {
#line 618
    return;
  } else {

  }
#line 619
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 619
  if (tmp___0 == 0) {
#line 619
    goto ldv_46948;
  } else {

  }
#line 619
  tmp___1 = get_current();
#line 619
  __wait.flags = 0U;
#line 619
  __wait.private = (void *)tmp___1;
#line 619
  __wait.func = & autoremove_wake_function;
#line 619
  __wait.task_list.next = & __wait.task_list;
#line 619
  __wait.task_list.prev = & __wait.task_list;
  ldv_46951: 
#line 619
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 619
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 619
  if (tmp___2 == 0) {
#line 619
    goto ldv_46950;
  } else {

  }
#line 619
  schedule();
#line 619
  goto ldv_46951;
  ldv_46950: 
#line 619
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46948: ;
#line 622
  return;
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 624
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 625
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 626
  return;
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 643
  rv = 0;
#line 654
  drbd_suspend_io(mdev);
#line 657
  tmp = lc_try_lock(mdev->act_log);
#line 657
  if (tmp != 0) {
#line 657
    goto ldv_46967;
  } else {

  }
#line 657
  tmp___0 = get_current();
#line 657
  __wait.flags = 0U;
#line 657
  __wait.private = (void *)tmp___0;
#line 657
  __wait.func = & autoremove_wake_function;
#line 657
  __wait.task_list.next = & __wait.task_list;
#line 657
  __wait.task_list.prev = & __wait.task_list;
  ldv_46970: 
#line 657
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 657
  tmp___1 = lc_try_lock(mdev->act_log);
#line 657
  if (tmp___1 != 0) {
#line 657
    goto ldv_46969;
  } else {

  }
#line 657
  schedule();
#line 657
  goto ldv_46970;
  ldv_46969: 
#line 657
  finish_wait(& mdev->al_wait, & __wait);
  ldv_46967: 
#line 659
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 660
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 661
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 664
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 666
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 668
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 668
  if (tmp___5 != size) {
#line 668
    goto _L;
  } else {
#line 668
    tmp___6 = drbd_bm_capacity(mdev);
#line 668
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 671
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 672
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 672
      if (tmp___3 != 0L) {
#line 674
        tmp___2 = drbd_bm_capacity(mdev);
#line 674
        size = tmp___2 >> 1;
#line 675
        if (size == 0UL) {
#line 676
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 679
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 683
        rv = dev_size_error;
      } else {

      }
#line 686
      drbd_set_my_capacity(mdev, size);
#line 687
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 688
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 688
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 691
  if ((int )rv == -1) {
#line 692
    goto out;
  } else {

  }
#line 694
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 696
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 696
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 699
  if (la_size_changed != 0 || md_moved != 0) {
#line 700
    drbd_al_shrink(mdev);
#line 701
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 704
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 704
    rv = (enum determine_dev_size )tmp___8;
#line 705
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 708
  if (size > la_size) {
#line 709
    rv = grew;
  } else {

  }
#line 710
  if (size < la_size) {
#line 711
    rv = shrunk;
  } else {

  }
  out: 
#line 713
  lc_unlock(mdev->act_log);
#line 714
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 715
  drbd_resume_io(mdev);
#line 717
  return (rv);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 723
  p_size = mdev->p_size;
#line 724
  la_size = (sector_t )bdev->md.la_size_sect;
#line 726
  u_size = (sector_t )bdev->dc.disk_size;
#line 727
  size = 0UL;
#line 729
  m_size = drbd_get_max_capacity___1(bdev);
#line 731
  if ((int )mdev->state.ldv_35532.conn <= 9 && assume_peer_has_space != 0) {
#line 732
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 733
    p_size = m_size;
  } else {

  }
#line 736
  if (p_size != 0UL && m_size != 0UL) {
#line 737
    __min1 = p_size;
#line 737
    __min2 = m_size;
#line 737
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 739
  if (la_size != 0UL) {
#line 740
    size = la_size;
#line 741
    if (m_size != 0UL && m_size < size) {
#line 742
      size = m_size;
    } else {

    }
#line 743
    if (p_size != 0UL && p_size < size) {
#line 744
      size = p_size;
    } else {

    }
  } else {
#line 746
    if (m_size != 0UL) {
#line 747
      size = m_size;
    } else {

    }
#line 748
    if (p_size != 0UL) {
#line 749
      size = p_size;
    } else {

    }
  }
#line 753
  if (size == 0UL) {
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 756
  if (u_size != 0UL) {
#line 757
    if (u_size > size) {
#line 758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 761
      size = u_size;
    }
  } else {

  }
#line 764
  return (size);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 782
  _b = mdev->sync_conf.al_extents <= 6;
#line 782
  if (_b != 0) {
#line 782
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            782);
  } else {

  }
#line 782
  if (_b != 0) {
#line 783
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 785
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 787
    return (0);
  } else {

  }
#line 789
  in_use = 0U;
#line 790
  t = mdev->act_log;
#line 791
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 794
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 795
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 796
    return (-12);
  } else {

  }
#line 798
  spin_lock_irq(& mdev->al_lock);
#line 799
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 800
    i = 0;
#line 800
    goto ldv_46998;
    ldv_46997: 
#line 801
    e = lc_element_by_index(t, (unsigned int )i);
#line 802
    if (e->refcnt != 0U) {
#line 803
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 805
    in_use = e->refcnt + in_use;
#line 800
    i = i + 1;
    ldv_46998: ;
#line 800
    if ((unsigned int )i < t->nr_elements) {
#line 801
      goto ldv_46997;
    } else {

    }

  } else {

  }
#line 808
  if (in_use == 0U) {
#line 809
    mdev->act_log = n;
  } else {

  }
#line 810
  spin_unlock_irq(& mdev->al_lock);
#line 811
  if (in_use != 0U) {
#line 812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 813
    lc_destroy(n);
#line 814
    return (-16);
  } else
#line 816
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 817
    lc_destroy(t);
  } else {

  }
#line 819
  drbd_md_mark_dirty(mdev);
#line 820
  return (0);
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 825
  q = mdev->rq_queue;
#line 826
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 827
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 829
  tmp = queue_max_sectors(b);
#line 829
  tmp___0 = queue_logical_block_size(b);
#line 829
  _min1 = tmp * (unsigned int )tmp___0;
#line 829
  _min2 = max_seg_s;
#line 829
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 831
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 832
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 833
  blk_queue_max_segment_size(q, max_seg_s);
#line 834
  blk_queue_logical_block_size(q, 512);
#line 835
  blk_queue_segment_boundary(q, 4095UL);
#line 836
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 838
  tmp___1 = queue_max_segment_size(q);
#line 838
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 840
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 841
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 844
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 846
  return;
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 857
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 857
  if (tmp == 0) {
#line 857
    goto ldv_47013;
  } else {

  }
#line 857
  tmp___0 = get_current();
#line 857
  __wait.flags = 0U;
#line 857
  __wait.private = (void *)tmp___0;
#line 857
  __wait.func = & autoremove_wake_function;
#line 857
  __wait.task_list.next = & __wait.task_list;
#line 857
  __wait.task_list.prev = & __wait.task_list;
  ldv_47016: 
#line 857
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 857
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 857
  if (tmp___1 == 0) {
#line 857
    goto ldv_47015;
  } else {

  }
#line 857
  schedule();
#line 857
  goto ldv_47016;
  ldv_47015: 
#line 857
  finish_wait(& mdev->state_wait, & __wait);
  ldv_47013: 
#line 858
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 858
  if (tmp___2 == 0) {
#line 858
    goto ldv_47017;
  } else {

  }
#line 858
  tmp___3 = get_current();
#line 858
  __wait___0.flags = 0U;
#line 858
  __wait___0.private = (void *)tmp___3;
#line 858
  __wait___0.func = & autoremove_wake_function;
#line 858
  __wait___0.task_list.next = & __wait___0.task_list;
#line 858
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_47020: 
#line 858
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 858
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 858
  if (tmp___4 == 0) {
#line 858
    goto ldv_47019;
  } else {

  }
#line 858
  schedule();
#line 858
  goto ldv_47020;
  ldv_47019: 
#line 858
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_47017: 
#line 859
  drbd_thread_start(& mdev->worker);
#line 860
  drbd_flush_workqueue(mdev);
#line 861
  return;
}
}
#line 866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 868
  spin_lock_irq(& mdev->req_lock);
#line 869
  if (((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 872
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 873
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 875
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 876
  spin_unlock_irq(& mdev->req_lock);
#line 877
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 878
  return;
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 883
  s = 0;
#line 885
  tmp = lc_try_lock(mdev->act_log);
#line 885
  if (tmp != 0) {
#line 886
    drbd_al_shrink(mdev);
#line 887
    lc_unlock(mdev->act_log);
  } else {
#line 889
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 890
    return;
  }
#line 893
  spin_lock_irq(& mdev->req_lock);
#line 894
  if ((int )mdev->state.ldv_35532.conn <= 9) {
#line 895
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 895
    s = tmp___0 == 0;
  } else {

  }
#line 897
  spin_unlock_irq(& mdev->req_lock);
#line 899
  if (s != 0) {
#line 900
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 901
  return;
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  unsigned int max_seg_s ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  int prot ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___18 ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  unsigned long tmp___35 ;
  unsigned long tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 912
  nbc = 0;
#line 914
  resync_lru = 0;
#line 918
  cp_discovered = 0;
#line 921
  drbd_reconfig_start(mdev);
#line 924
  if ((int )mdev->state.ldv_35532.disk > 0) {
#line 925
    retcode = ERR_DISK_CONFIGURED;
#line 926
    goto fail;
  } else {

  }
#line 930
  tmp = kzalloc___3(408UL, 208U);
#line 930
  nbc = (struct drbd_backing_dev *)tmp;
#line 931
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 932
    retcode = ERR_NOMEM;
#line 933
    goto fail;
  } else {

  }
#line 936
  nbc->dc.disk_size = 0ULL;
#line 937
  nbc->dc.on_io_error = 0;
#line 938
  nbc->dc.fencing = 0;
#line 939
  nbc->dc.max_bio_bvecs = 0;
#line 941
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 941
  if (tmp___0 == 0) {
#line 942
    retcode = ERR_MANDATORY_TAG;
#line 943
    goto fail;
  } else {

  }
#line 946
  if (nbc->dc.meta_dev_idx < -3) {
#line 947
    retcode = ERR_MD_IDX_INVALID;
#line 948
    goto fail;
  } else {

  }
#line 951
  tmp___1 = get_net_conf(mdev);
#line 951
  if (tmp___1 != 0) {
#line 952
    prot = (mdev->net_conf)->wire_protocol;
#line 953
    put_net_conf(mdev);
#line 954
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 955
      retcode = ERR_STONITH_AND_PROT_A;
#line 956
      goto fail;
    } else {

    }
  } else {

  }
#line 960
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 961
  tmp___3 = IS_ERR((void const   *)nbc->lo_file);
#line 961
  if (tmp___3 != 0L) {
#line 962
    tmp___2 = PTR_ERR((void const   *)nbc->lo_file);
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___2);
#line 964
    nbc->lo_file = 0;
#line 965
    retcode = ERR_OPEN_DISK;
#line 966
    goto fail;
  } else {

  }
#line 969
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 971
  if (((int )inode->i_mode & 61440) != 24576) {
#line 972
    retcode = ERR_DISK_NOT_BDEV;
#line 973
    goto fail;
  } else {

  }
#line 976
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 977
  tmp___5 = IS_ERR((void const   *)nbc->md_file);
#line 977
  if (tmp___5 != 0L) {
#line 978
    tmp___4 = PTR_ERR((void const   *)nbc->md_file);
#line 978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___4);
#line 980
    nbc->md_file = 0;
#line 981
    retcode = ERR_OPEN_MD_DISK;
#line 982
    goto fail;
  } else {

  }
#line 985
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 987
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 988
    retcode = ERR_MD_NOT_BDEV;
#line 989
    goto fail;
  } else {

  }
#line 992
  nbc->backing_bdev = inode->ldv_23146.i_bdev;
#line 993
  tmp___6 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 993
  if (tmp___6 != 0) {
#line 994
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 999
    retcode = ERR_BDCLAIM_DISK;
#line 1000
    goto fail;
  } else {

  }
#line 1003
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1006
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1007
    retcode = ERR_NOMEM;
#line 1008
    goto release_bdev_fail;
  } else {

  }
#line 1018
  nbc->md_bdev = inode2->ldv_23146.i_bdev;
#line 1019
  tmp___7 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1019
  if (tmp___7 != 0) {
#line 1021
    retcode = ERR_BDCLAIM_MD_DISK;
#line 1022
    goto release_bdev_fail;
  } else {

  }
#line 1025
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1028
    retcode = ERR_MD_IDX_INVALID;
#line 1029
    goto release_bdev2_fail;
  } else {

  }
#line 1033
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1035
  tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1035
  if ((unsigned long long )tmp___9 < nbc->dc.disk_size) {
#line 1036
    tmp___8 = drbd_get_max_capacity___1(nbc);
#line 1036
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___8, nbc->dc.disk_size);
#line 1039
    retcode = ERR_DISK_TO_SMALL;
#line 1040
    goto release_bdev2_fail;
  } else {

  }
#line 1043
  if (nbc->dc.meta_dev_idx < 0) {
#line 1044
    max_possible_sectors = 34359738368UL;
#line 1046
    min_md_device_sectors = 2048UL;
  } else {
#line 1048
    max_possible_sectors = 8587575296UL;
#line 1049
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1052
  tmp___10 = drbd_get_capacity(nbc->md_bdev);
#line 1052
  if (tmp___10 < min_md_device_sectors) {
#line 1053
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1054
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1057
    goto release_bdev2_fail;
  } else {

  }
#line 1062
  tmp___11 = drbd_get_max_capacity___1(nbc);
#line 1062
  tmp___12 = drbd_get_capacity(mdev->this_bdev);
#line 1062
  if (tmp___11 < tmp___12) {
#line 1064
    retcode = ERR_DISK_TO_SMALL;
#line 1065
    goto release_bdev2_fail;
  } else {

  }
#line 1068
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1070
  if (nbc->known_size > max_possible_sectors) {
#line 1071
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1074
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1075
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1079
  drbd_suspend_io(mdev);
#line 1081
  tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1081
  if (tmp___13 == 0) {
#line 1081
    goto ldv_47051;
  } else {
#line 1081
    tmp___14 = is_susp(mdev->state);
#line 1081
    if (tmp___14 != 0) {
#line 1081
      goto ldv_47051;
    } else {

    }
  }
#line 1081
  tmp___15 = get_current();
#line 1081
  __wait.flags = 0U;
#line 1081
  __wait.private = (void *)tmp___15;
#line 1081
  __wait.func = & autoremove_wake_function;
#line 1081
  __wait.task_list.next = & __wait.task_list;
#line 1081
  __wait.task_list.prev = & __wait.task_list;
  ldv_47054: 
#line 1081
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1081
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1081
  if (tmp___16 == 0) {
#line 1081
    goto ldv_47053;
  } else {
#line 1081
    tmp___17 = is_susp(mdev->state);
#line 1081
    if (tmp___17 != 0) {
#line 1081
      goto ldv_47053;
    } else {

    }
  }
#line 1081
  schedule();
#line 1081
  goto ldv_47054;
  ldv_47053: 
#line 1081
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47051: 
#line 1083
  drbd_flush_workqueue(mdev);
#line 1085
  val.i = 0U;
#line 1085
  val.ldv_35532.disk = 1U;
#line 1085
  mask.i = 0U;
#line 1085
  mask.ldv_35532.disk = 15U;
#line 1085
  tmp___18 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1085
  retcode = (enum drbd_ret_codes )tmp___18;
#line 1086
  drbd_resume_io(mdev);
#line 1087
  if ((unsigned int )retcode == 0U) {
#line 1088
    goto release_bdev2_fail;
  } else {

  }
#line 1090
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1090
  if (tmp___19 == 0) {
#line 1091
    goto force_diskless;
  } else {

  }
#line 1093
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1096
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1096
  logical_block_size = (int )tmp___20;
#line 1097
  if (logical_block_size == 0) {
#line 1098
    logical_block_size = 512;
  } else {

  }
#line 1100
  if (logical_block_size != 512) {
#line 1101
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1102
      tmp___21 = alloc_pages(16U, 0U);
#line 1102
      page = tmp___21;
#line 1103
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1104
        goto force_diskless_dec;
      } else {

      }
#line 1106
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1108
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1110
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1114
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1115
    tmp___22 = drbd_bm_init(mdev);
#line 1115
    if (tmp___22 != 0) {
#line 1116
      retcode = ERR_NOMEM;
#line 1117
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1121
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1121
  retcode = (enum drbd_ret_codes )tmp___23;
#line 1122
  if ((unsigned int )retcode != 101U) {
#line 1123
    goto force_diskless_dec;
  } else {

  }
#line 1125
  if (((int )mdev->state.ldv_35532.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1128
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1130
    retcode = ERR_DATA_NOT_CURRENT;
#line 1131
    goto force_diskless_dec;
  } else {

  }
#line 1135
  tmp___24 = drbd_check_al_size(mdev);
#line 1135
  if (tmp___24 != 0) {
#line 1136
    retcode = ERR_NOMEM;
#line 1137
    goto force_diskless_dec;
  } else {

  }
#line 1141
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1141
  if (tmp___25 != 0) {
#line 1141
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1141
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1143
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1144
      retcode = ERR_DISK_TO_SMALL;
#line 1145
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1148
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1148
  if (tmp___27 == 0) {
#line 1149
    retcode = ERR_IO_MD_DISK;
#line 1150
    goto force_diskless_dec;
  } else {

  }
#line 1155
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1156
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1158
    clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1164
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1164);
  } else {

  }
#line 1165
  mdev->ldev = nbc;
#line 1166
  mdev->resync = resync_lru;
#line 1167
  nbc = 0;
#line 1168
  resync_lru = 0;
#line 1170
  mdev->write_ordering = WO_bio_barrier;
#line 1171
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1173
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1173
  if (tmp___28 != 0) {
#line 1174
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1176
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1178
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1178
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2014UL) == 0U)) {
#line 1180
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1181
    cp_discovered = 1;
  } else {

  }
#line 1184
  mdev->send_cnt = 0U;
#line 1185
  mdev->recv_cnt = 0U;
#line 1186
  mdev->read_cnt = 0U;
#line 1187
  mdev->writ_cnt = 0U;
#line 1189
  max_seg_s = 131072U;
#line 1190
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1195
    if (mdev->agreed_pro_version <= 93) {
#line 1196
      max_seg_s = queue_max_segment_size(mdev->rq_queue);
    } else
#line 1197
    if (mdev->agreed_pro_version == 94) {
#line 1198
      max_seg_s = 32768U;
    } else {

    }
  } else {

  }
#line 1202
  drbd_setup_queue_param(mdev, max_seg_s);
#line 1218
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1219
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 1219
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1219
    if (tmp___30 != 0) {
#line 1219
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1219
      if (tmp___31 == 0) {
#line 1222
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1224
  dd = drbd_determin_dev_size(mdev, 0);
#line 1225
  if ((int )dd == -1) {
#line 1226
    retcode = ERR_NOMEM_BITMAP;
#line 1227
    goto force_diskless_dec;
  } else
#line 1228
  if ((int )dd == 2) {
#line 1229
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1231
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1231
  if (tmp___34 != 0) {
#line 1232
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1234
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1234
    if (tmp___32 != 0) {
#line 1235
      retcode = ERR_IO_MD_DISK;
#line 1236
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1239
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1239
    if (tmp___33 < 0) {
#line 1240
      retcode = ERR_IO_MD_DISK;
#line 1241
      goto force_diskless_dec;
    } else {

    }
  }
#line 1245
  if (cp_discovered != 0) {
#line 1246
    drbd_al_apply_to_bm(mdev);
#line 1247
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1250
  tmp___35 = _drbd_bm_total_weight(mdev);
#line 1250
  tmp___36 = drbd_bm_bits(mdev);
#line 1250
  if (tmp___35 == tmp___36) {
#line 1251
    drbd_suspend_al(mdev);
  } else {

  }
#line 1253
  spin_lock_irq(& mdev->req_lock);
#line 1254
  os = mdev->state;
#line 1255
  ns.i = os.i;
#line 1261
  tmp___38 = drbd_md_test_flag(mdev->ldev, 1);
#line 1261
  if (tmp___38 != 0) {
#line 1262
    tmp___37 = drbd_md_test_flag(mdev->ldev, 16);
#line 1262
    if (tmp___37 != 0) {
#line 1263
      ns.ldv_35532.disk = 7U;
    } else {
#line 1265
      ns.ldv_35532.disk = 5U;
    }
  } else {
#line 1267
    ns.ldv_35532.disk = 4U;
  }
#line 1270
  tmp___39 = drbd_md_test_flag(mdev->ldev, 32);
#line 1270
  if (tmp___39 != 0) {
#line 1271
    ns.ldv_35532.pdsk = 5U;
  } else {

  }
#line 1273
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1275
    ns.ldv_35532.disk = 8U;
  } else {

  }
#line 1284
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1285
    mdev->new_state_tmp.i = ns.i;
#line 1286
    ns.i = os.i;
#line 1287
    ns.ldv_35532.disk = 3U;
#line 1292
    kfree((void const   *)mdev->p_uuid);
#line 1293
    mdev->p_uuid = 0;
  } else {

  }
#line 1296
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1297
  ns = mdev->state;
#line 1298
  spin_unlock_irq(& mdev->req_lock);
#line 1300
  if (rv <= 0) {
#line 1301
    goto force_diskless_dec;
  } else {

  }
#line 1303
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1304
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1306
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1308
  drbd_md_mark_dirty(mdev);
#line 1309
  drbd_md_sync(mdev);
#line 1311
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1312
  put_ldev(mdev);
#line 1313
  reply->ret_code = (int )retcode;
#line 1314
  drbd_reconfig_done(mdev);
#line 1315
  return (0);
  force_diskless_dec: 
#line 1318
  put_ldev(mdev);
  force_diskless: 
#line 1320
  val___0.i = 0U;
#line 1320
  val___0.ldv_35532.disk = 0U;
#line 1320
  mask___0.i = 0U;
#line 1320
  mask___0.ldv_35532.disk = 15U;
#line 1320
  drbd_force_state(mdev, mask___0, val___0);
#line 1321
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1323
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1324
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1326
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1327
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1329
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1330
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1331
      fput(nbc->lo_file);
    } else {

    }
#line 1332
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1333
      fput(nbc->md_file);
    } else {

    }
#line 1334
    kfree((void const   *)nbc);
  } else {

  }
#line 1336
  lc_destroy(resync_lru);
#line 1338
  reply->ret_code = (int )retcode;
#line 1339
  drbd_reconfig_done(mdev);
#line 1340
  return (0);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1346
  val.i = 0U;
#line 1346
  val.ldv_35532.disk = 0U;
#line 1346
  mask.i = 0U;
#line 1346
  mask.ldv_35532.disk = 15U;
#line 1346
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1347
  return (0);
}
}
#line 1350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  int tmp___16 ;

  {
#line 1355
  new_conf = 0;
#line 1356
  tfm = 0;
#line 1357
  integrity_w_tfm = 0;
#line 1358
  integrity_r_tfm = 0;
#line 1359
  new_tl_hash = 0;
#line 1360
  new_ee_hash = 0;
#line 1363
  int_dig_out = 0;
#line 1364
  int_dig_in = 0;
#line 1365
  int_dig_vv = 0;
#line 1368
  drbd_reconfig_start(mdev);
#line 1370
  if ((int )mdev->state.ldv_35532.conn > 0) {
#line 1371
    retcode = ERR_NET_CONFIGURED;
#line 1372
    goto fail;
  } else {

  }
#line 1376
  tmp = kzalloc___3(532UL, 208U);
#line 1376
  new_conf = (struct net_conf *)tmp;
#line 1377
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1378
    retcode = ERR_NOMEM;
#line 1379
    goto fail;
  } else {

  }
#line 1382
  new_conf->timeout = 60;
#line 1383
  new_conf->try_connect_int = 10;
#line 1384
  new_conf->ping_int = 10;
#line 1385
  new_conf->max_epoch_size = 2048;
#line 1386
  new_conf->max_buffers = 2048;
#line 1387
  new_conf->unplug_watermark = 128;
#line 1388
  new_conf->sndbuf_size = 0;
#line 1389
  new_conf->rcvbuf_size = 0;
#line 1390
  new_conf->ko_count = 0;
#line 1391
  new_conf->after_sb_0p = 0;
#line 1392
  new_conf->after_sb_1p = 0;
#line 1393
  new_conf->after_sb_2p = 0;
#line 1394
  new_conf->want_lose = 0U;
#line 1395
  new_conf->two_primaries = 0U;
#line 1396
  new_conf->wire_protocol = 3;
#line 1397
  new_conf->ping_timeo = 5;
#line 1398
  new_conf->rr_conflict = 0;
#line 1400
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1400
  if (tmp___0 == 0) {
#line 1401
    retcode = ERR_MANDATORY_TAG;
#line 1402
    goto fail;
  } else {

  }
#line 1405
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1407
    retcode = ERR_NOT_PROTO_C;
#line 1408
    goto fail;
  } else {

  }
#line 1411
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1411
  if (tmp___1 != 0) {
#line 1412
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1413
    put_ldev(mdev);
#line 1414
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1415
      retcode = ERR_STONITH_AND_PROT_A;
#line 1416
      goto fail;
    } else {

    }
  } else {

  }
#line 1420
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1421
    retcode = ERR_DISCARD;
#line 1422
    goto fail;
  } else {

  }
#line 1425
  retcode = NO_ERROR;
#line 1427
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1428
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1429
  i = 0;
#line 1429
  goto ldv_47101;
  ldv_47100: 
#line 1430
  odev = minor_to_mdev((unsigned int )i);
#line 1431
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1432
    goto ldv_47099;
  } else {

  }
#line 1433
  tmp___4 = get_net_conf(odev);
#line 1433
  if (tmp___4 != 0) {
#line 1434
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1435
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1435
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1435
      if (tmp___2 == 0) {
#line 1437
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1439
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1440
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1440
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1440
      if (tmp___3 == 0) {
#line 1442
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1444
    put_net_conf(odev);
#line 1445
    if ((unsigned int )retcode != 101U) {
#line 1446
      goto fail;
    } else {

    }
  } else {

  }
  ldv_47099: 
#line 1429
  i = i + 1;
  ldv_47101: ;
#line 1429
  if ((unsigned int )i < minor_count) {
#line 1430
    goto ldv_47100;
  } else {

  }

#line 1450
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1451
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1453
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1454
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1454
    if (tmp___5 != 0L) {
#line 1455
      tfm = 0;
#line 1456
      retcode = ERR_AUTH_ALG;
#line 1457
      goto fail;
    } else {

    }
#line 1460
    tmp___6 = crypto_hash_tfm(tfm);
#line 1460
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1460
    if (tmp___7 == 0) {
#line 1461
      retcode = ERR_AUTH_ALG_ND;
#line 1462
      goto fail;
    } else {

    }
  } else {

  }
#line 1466
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1467
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1468
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1468
    if (tmp___8 != 0L) {
#line 1469
      integrity_w_tfm = 0;
#line 1470
      retcode = ERR_INTEGRITY_ALG;
#line 1471
      goto fail;
    } else {

    }
#line 1474
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1474
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1474
    if (tmp___10 == 0) {
#line 1475
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1476
      goto fail;
    } else {

    }
#line 1479
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1480
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1480
    if (tmp___11 != 0L) {
#line 1481
      integrity_r_tfm = 0;
#line 1482
      retcode = ERR_INTEGRITY_ALG;
#line 1483
      goto fail;
    } else {

    }
  } else {

  }
#line 1487
  ns = new_conf->max_epoch_size / 8;
#line 1488
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1489
    tmp___12 = kzalloc___3((unsigned long )ns * 8UL, 208U);
#line 1489
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1490
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1491
      retcode = ERR_NOMEM;
#line 1492
      goto fail;
    } else {

    }
  } else {

  }
#line 1496
  ns = new_conf->max_buffers / 8;
#line 1497
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1498
    tmp___13 = kzalloc___3((unsigned long )ns * 8UL, 208U);
#line 1498
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1499
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1500
      retcode = ERR_NOMEM;
#line 1501
      goto fail;
    } else {

    }
  } else {

  }
#line 1505
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1507
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1508
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1508
    i = (int )tmp___14;
#line 1509
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1510
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1511
      retcode = ERR_NOMEM;
#line 1512
      goto fail;
    } else {

    }
#line 1514
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1515
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1516
      retcode = ERR_NOMEM;
#line 1517
      goto fail;
    } else {

    }
#line 1519
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1520
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1521
      retcode = ERR_NOMEM;
#line 1522
      goto fail;
    } else {

    }
  } else {

  }
#line 1526
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1527
    tmp___15 = drbd_bm_init(mdev);
#line 1527
    if (tmp___15 != 0) {
#line 1528
      retcode = ERR_NOMEM;
#line 1529
      goto fail;
    } else {

    }
  } else {

  }
#line 1533
  drbd_flush_workqueue(mdev);
#line 1534
  spin_lock_irq(& mdev->req_lock);
#line 1535
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1536
    retcode = ERR_NET_CONFIGURED;
#line 1537
    spin_unlock_irq(& mdev->req_lock);
#line 1538
    goto fail;
  } else {

  }
#line 1540
  mdev->net_conf = new_conf;
#line 1542
  mdev->send_cnt = 0U;
#line 1543
  mdev->recv_cnt = 0U;
#line 1545
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1546
    kfree((void const   *)mdev->tl_hash);
#line 1547
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1548
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1551
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1552
    kfree((void const   *)mdev->ee_hash);
#line 1553
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1554
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1557
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1558
  mdev->cram_hmac_tfm = tfm;
#line 1560
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1561
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1563
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1564
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1566
  kfree((void const   *)mdev->int_dig_out);
#line 1567
  kfree((void const   *)mdev->int_dig_in);
#line 1568
  kfree((void const   *)mdev->int_dig_vv);
#line 1569
  mdev->int_dig_out = int_dig_out;
#line 1570
  mdev->int_dig_in = int_dig_in;
#line 1571
  mdev->int_dig_vv = int_dig_vv;
#line 1572
  __ns.i = mdev->state.i;
#line 1572
  __ns.ldv_35532.conn = 2U;
#line 1572
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1572
  retcode = (enum drbd_ret_codes )tmp___16;
#line 1573
  spin_unlock_irq(& mdev->req_lock);
#line 1575
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1576
  reply->ret_code = (int )retcode;
#line 1577
  drbd_reconfig_done(mdev);
#line 1578
  return (0);
  fail: 
#line 1581
  kfree((void const   *)int_dig_out);
#line 1582
  kfree((void const   *)int_dig_in);
#line 1583
  kfree((void const   *)int_dig_vv);
#line 1584
  crypto_free_hash(tfm);
#line 1585
  crypto_free_hash(integrity_w_tfm);
#line 1586
  crypto_free_hash(integrity_r_tfm);
#line 1587
  kfree((void const   *)new_tl_hash);
#line 1588
  kfree((void const   *)new_ee_hash);
#line 1589
  kfree((void const   *)new_conf);
#line 1591
  reply->ret_code = (int )retcode;
#line 1592
  drbd_reconfig_done(mdev);
#line 1593
  return (0);
}
}
#line 1596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1601
  val.i = 0U;
#line 1601
  val.ldv_35532.conn = 1U;
#line 1601
  mask.i = 0U;
#line 1601
  mask.ldv_35532.conn = 31U;
#line 1601
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1603
  if (retcode == 2) {
#line 1604
    goto done;
  } else
#line 1605
  if (retcode == -9) {
#line 1606
    goto done;
  } else
#line 1607
  if (retcode == -7) {
#line 1610
    val___0.i = 0U;
#line 1610
    val___0.ldv_35532.conn = 1U;
#line 1610
    val___0.ldv_35532.pdsk = 5U;
#line 1609
    mask___0.i = 0U;
#line 1609
    mask___0.ldv_35532.conn = 31U;
#line 1610
    mask___0.ldv_35532.pdsk = 15U;
#line 1610
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1611
  if (retcode == -10) {
#line 1614
    val___1.i = 0U;
#line 1614
    val___1.ldv_35532.conn = 1U;
#line 1614
    val___1.ldv_35532.disk = 5U;
#line 1613
    mask___1.i = 0U;
#line 1613
    mask___1.ldv_35532.conn = 31U;
#line 1614
    mask___1.ldv_35532.disk = 15U;
#line 1614
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1616
    if (retcode == -11 || retcode == -16) {
#line 1617
      val___2.i = 0U;
#line 1617
      val___2.ldv_35532.conn = 1U;
#line 1617
      mask___2.i = 0U;
#line 1617
      mask___2.ldv_35532.conn = 31U;
#line 1617
      drbd_force_state(mdev, mask___2, val___2);
#line 1618
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1622
  if (retcode <= 0) {
#line 1623
    goto fail;
  } else {

  }
#line 1625
  __ret = 0;
#line 1625
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 16U) {
#line 1625
    tmp = get_current();
#line 1625
    __wait.flags = 0U;
#line 1625
    __wait.private = (void *)tmp;
#line 1625
    __wait.func = & autoremove_wake_function;
#line 1625
    __wait.task_list.next = & __wait.task_list;
#line 1625
    __wait.task_list.prev = & __wait.task_list;
    ldv_47133: 
#line 1625
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1625
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 16U) {
#line 1625
      goto ldv_47131;
    } else {

    }
#line 1625
    tmp___0 = get_current();
#line 1625
    tmp___1 = signal_pending(tmp___0);
#line 1625
    if (tmp___1 == 0) {
#line 1625
      schedule();
#line 1625
      goto ldv_47132;
    } else {

    }
#line 1625
    __ret = -512;
#line 1625
    goto ldv_47131;
    ldv_47132: ;
#line 1625
    goto ldv_47133;
    ldv_47131: 
#line 1625
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1625
  if (__ret != 0) {
#line 1629
    retcode = 129;
#line 1630
    goto fail;
  } else {

  }
  done: 
#line 1634
  retcode = 101;
  fail: 
#line 1636
  drbd_md_sync(mdev);
#line 1637
  reply->ret_code = retcode;
#line 1638
  return (0);
}
}
#line 1641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1645
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1646
  if ((int )mdev->state.ldv_35532.role != (int )mdev->state.ldv_35532.peer) {
#line 1647
    iass = (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U;
  } else {
#line 1649
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1651
  if (iass != 0) {
#line 1652
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1654
    val.i = 0U;
#line 1654
    val.ldv_35532.conn = 15U;
#line 1654
    mask.i = 0U;
#line 1654
    mask.ldv_35532.conn = 31U;
#line 1654
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1656
  return;
}
}
#line 1657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1661
  retcode = 101;
#line 1665
  memset((void *)(& rs), 0, 16UL);
#line 1666
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1666
  if (tmp == 0) {
#line 1667
    retcode = 126;
#line 1668
    goto fail;
  } else {

  }
#line 1671
  if ((int )mdev->state.ldv_35532.conn > 10) {
#line 1672
    retcode = 130;
#line 1673
    goto fail;
  } else {

  }
#line 1676
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2012UL) == 8U) {
#line 1678
    retcode = 131;
#line 1679
    goto fail;
  } else {

  }
#line 1682
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1682
  if (tmp___0 == 0) {
#line 1683
    retcode = 138;
#line 1684
    goto fail;
  } else {

  }
#line 1687
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1688
    retcode = 153;
#line 1689
    goto fail;
  } else {

  }
#line 1692
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1692
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1693
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1695
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1696
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1697
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1698
  drbd_md_sync(mdev);
#line 1699
  put_ldev(mdev);
#line 1700
  if ((int )dd == -1) {
#line 1701
    retcode = 140;
#line 1702
    goto fail;
  } else {

  }
#line 1705
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1706
    if ((int )dd == 2) {
#line 1707
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1709
    drbd_send_uuids(mdev);
#line 1710
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1714
  reply->ret_code = retcode;
#line 1715
  return (0);
}
}
#line 1718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1721
  retcode = 101;
#line 1725
  verify_tfm = 0;
#line 1726
  csums_tfm = 0;
#line 1729
  rs_plan_s = 0;
#line 1732
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1732
  if (tmp) {
#line 1732
    tmp___0 = 0;
  } else {
#line 1732
    tmp___0 = 1;
  }
#line 1732
  if (tmp___0) {
#line 1733
    retcode = 122;
#line 1734
    goto fail;
  } else {

  }
#line 1737
  if ((nlp->flags & 2) != 0) {
#line 1738
    memset((void *)(& sc), 0, 212UL);
#line 1739
    sc.rate = 250;
#line 1740
    sc.after = -1;
#line 1741
    sc.al_extents = 127;
#line 1742
    sc.on_no_data = 0;
#line 1743
    sc.c_plan_ahead = 0;
#line 1744
    sc.c_delay_target = 10;
#line 1745
    sc.c_fill_target = 0;
#line 1746
    sc.c_max_rate = 102400;
#line 1747
    sc.c_min_rate = 4096;
  } else {
#line 1749
    __len = 212UL;
#line 1749
    if (__len > 63UL) {
#line 1749
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1749
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1751
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1751
  if (tmp___1 == 0) {
#line 1752
    retcode = 126;
#line 1753
    goto fail;
  } else {

  }
#line 1757
  rsr = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 336U;
#line 1762
  if (rsr != 0) {
#line 1762
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1762
    if (tmp___2 != 0) {
#line 1763
      retcode = 148;
#line 1764
      goto fail;
    } else {

    }
  } else {

  }
#line 1767
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1768
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1769
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1769
    if (tmp___3 != 0L) {
#line 1770
      csums_tfm = 0;
#line 1771
      retcode = 144;
#line 1772
      goto fail;
    } else {

    }
#line 1775
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1775
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1775
    if (tmp___5 == 0) {
#line 1776
      retcode = 145;
#line 1777
      goto fail;
    } else {

    }
  } else {

  }
#line 1782
  ovr = (unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U;
#line 1784
  if (ovr != 0) {
#line 1785
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1785
    if (tmp___6 != 0) {
#line 1786
      retcode = 149;
#line 1787
      goto fail;
    } else {

    }
  } else {

  }
#line 1791
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1792
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1793
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1793
    if (tmp___7 != 0L) {
#line 1794
      verify_tfm = 0;
#line 1795
      retcode = 146;
#line 1796
      goto fail;
    } else {

    }
#line 1799
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1799
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1799
    if (tmp___9 == 0) {
#line 1800
      retcode = 147;
#line 1801
      goto fail;
    } else {

    }
  } else {

  }
#line 1806
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1807
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1809
    if (err != 0) {
#line 1810
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1811
      retcode = 143;
#line 1812
      goto fail;
    } else {

    }
  } else {

  }
#line 1816
  _b = sc.rate <= 0;
#line 1816
  if (_b != 0) {
#line 1816
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1816);
  } else {

  }
#line 1816
  if (_b != 0) {
#line 1816
    sc.rate = 1;
  } else {

  }
#line 1817
  _b___0 = sc.al_extents <= 6;
#line 1817
  if (_b___0 != 0) {
#line 1817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1817);
  } else {

  }
#line 1817
  if (_b___0 != 0) {
#line 1817
    sc.al_extents = 127;
  } else {

  }
#line 1819
  if (sc.al_extents > 3843) {
#line 1820
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1821
    sc.al_extents = 3843;
  } else {

  }
#line 1828
  if (sc.after >= 0) {
#line 1829
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1834
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1835
  if (retcode != 101) {
#line 1836
    goto fail;
  } else {

  }
#line 1838
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1839
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1840
    tmp___10 = kzalloc___3((unsigned long )fifo_size * 4UL, 208U);
#line 1840
    rs_plan_s = (int *)tmp___10;
#line 1841
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1842
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1843
      retcode = 122;
#line 1844
      goto fail;
    } else {

    }
  } else {

  }
#line 1850
  spin_lock(& mdev->peer_seq_lock);
#line 1851
  mdev->sync_conf = sc;
#line 1853
  if (rsr == 0) {
#line 1854
    crypto_free_hash(mdev->csums_tfm);
#line 1855
    mdev->csums_tfm = csums_tfm;
#line 1856
    csums_tfm = 0;
  } else {

  }
#line 1859
  if (ovr == 0) {
#line 1860
    crypto_free_hash(mdev->verify_tfm);
#line 1861
    mdev->verify_tfm = verify_tfm;
#line 1862
    verify_tfm = 0;
  } else {

  }
#line 1865
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1866
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1867
    mdev->rs_plan_s.values = rs_plan_s;
#line 1868
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1869
    mdev->rs_planed = 0;
#line 1870
    rs_plan_s = 0;
  } else {

  }
#line 1873
  spin_unlock(& mdev->peer_seq_lock);
#line 1875
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1875
  if (tmp___14 != 0) {
#line 1876
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1876
    if (tmp___11 != 0) {
#line 1876
      goto ldv_47177;
    } else {

    }
#line 1876
    tmp___12 = get_current();
#line 1876
    __wait.flags = 0U;
#line 1876
    __wait.private = (void *)tmp___12;
#line 1876
    __wait.func = & autoremove_wake_function;
#line 1876
    __wait.task_list.next = & __wait.task_list;
#line 1876
    __wait.task_list.prev = & __wait.task_list;
    ldv_47180: 
#line 1876
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1876
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1876
    if (tmp___13 != 0) {
#line 1876
      goto ldv_47179;
    } else {

    }
#line 1876
    schedule();
#line 1876
    goto ldv_47180;
    ldv_47179: 
#line 1876
    finish_wait(& mdev->al_wait, & __wait);
    ldv_47177: 
#line 1877
    drbd_al_shrink(mdev);
#line 1878
    err = drbd_check_al_size(mdev);
#line 1879
    lc_unlock(mdev->act_log);
#line 1880
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1882
    put_ldev(mdev);
#line 1883
    drbd_md_sync(mdev);
#line 1885
    if (err != 0) {
#line 1886
      retcode = 122;
#line 1887
      goto fail;
    } else {

    }
  } else {

  }
#line 1891
  if ((int )mdev->state.ldv_35532.conn > 9) {
#line 1892
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1894
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1894
  if (tmp___15) {
#line 1894
    tmp___16 = 0;
  } else {
#line 1894
    tmp___16 = 1;
  }
#line 1894
  if (tmp___16) {
#line 1895
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1896
    drbd_calc_cpu_mask(mdev);
#line 1897
    mdev->receiver.reset_cpu_mask = 1;
#line 1898
    mdev->asender.reset_cpu_mask = 1;
#line 1899
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1902
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1904
  kfree((void const   *)rs_plan_s);
#line 1905
  free_cpumask_var(new_cpu_mask);
#line 1906
  crypto_free_hash(csums_tfm);
#line 1907
  crypto_free_hash(verify_tfm);
#line 1908
  reply->ret_code = retcode;
#line 1909
  return (0);
}
}
#line 1912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1917
  val.i = 0U;
#line 1917
  val.ldv_35532.conn = 12U;
#line 1917
  mask.i = 0U;
#line 1917
  mask.ldv_35532.conn = 31U;
#line 1917
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1919
  if (retcode <= 0 && retcode != -15) {
#line 1920
    val___0.i = 0U;
#line 1920
    val___0.ldv_35532.conn = 12U;
#line 1920
    mask___0.i = 0U;
#line 1920
    mask___0.ldv_35532.conn = 31U;
#line 1920
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1922
  goto ldv_47203;
  ldv_47202: 
#line 1923
  spin_lock_irq(& mdev->req_lock);
#line 1924
  if ((int )mdev->state.ldv_35532.conn <= 9) {
#line 1925
    __ns.i = mdev->state.i;
#line 1925
    __ns.ldv_35532.disk = 4U;
#line 1925
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1926
  spin_unlock_irq(& mdev->req_lock);
#line 1928
  if (retcode != -15) {
#line 1929
    goto ldv_47197;
  } else {

  }
#line 1931
  val___1.i = 0U;
#line 1931
  val___1.ldv_35532.conn = 12U;
#line 1931
  mask___1.i = 0U;
#line 1931
  mask___1.ldv_35532.conn = 31U;
#line 1931
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_47203: ;
#line 1922
  if (retcode == -15) {
#line 1923
    goto ldv_47202;
  } else {

  }
  ldv_47197: 
#line 1934
  reply->ret_code = retcode;
#line 1935
  return (0);
}
}
#line 1938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1942
  rv = drbd_bmio_set_n_write(mdev);
#line 1943
  drbd_suspend_al(mdev);
#line 1944
  return (rv);
}
}
#line 1947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1952
  val.i = 0U;
#line 1952
  val.ldv_35532.conn = 11U;
#line 1952
  mask.i = 0U;
#line 1952
  mask.ldv_35532.conn = 31U;
#line 1952
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1954
  if (retcode <= 0) {
#line 1955
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1958
      val___0.i = 0U;
#line 1958
      val___0.ldv_35532.pdsk = 4U;
#line 1958
      mask___0.i = 0U;
#line 1958
      mask___0.ldv_35532.pdsk = 15U;
#line 1958
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1959
      if (retcode > 0) {
#line 1961
        tmp = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer");
#line 1961
        if (tmp != 0) {
#line 1963
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 1966
      val___1.i = 0U;
#line 1966
      val___1.ldv_35532.conn = 11U;
#line 1966
      mask___1.i = 0U;
#line 1966
      mask___1.ldv_35532.conn = 31U;
#line 1966
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 1969
  reply->ret_code = retcode;
#line 1970
  return (0);
}
}
#line 1973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1976
  retcode = 101;
#line 1978
  val.i = 0U;
#line 1978
  val.ldv_35532.user_isp = 1U;
#line 1978
  mask.i = 0U;
#line 1978
  mask.ldv_35532.user_isp = 1U;
#line 1978
  tmp = drbd_request_state(mdev, mask, val);
#line 1978
  if (tmp == 2) {
#line 1979
    retcode = 134;
  } else {

  }
#line 1981
  reply->ret_code = retcode;
#line 1982
  return (0);
}
}
#line 1985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1988
  retcode = 101;
#line 1990
  val.i = 0U;
#line 1990
  val.ldv_35532.user_isp = 0U;
#line 1990
  mask.i = 0U;
#line 1990
  mask.ldv_35532.user_isp = 1U;
#line 1990
  tmp = drbd_request_state(mdev, mask, val);
#line 1990
  if (tmp == 2) {
#line 1991
    retcode = 135;
  } else {

  }
#line 1993
  reply->ret_code = retcode;
#line 1994
  return (0);
}
}
#line 1997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2000
  val.i = 0U;
#line 2000
  val.ldv_35532.susp = 1U;
#line 2000
  mask.i = 0U;
#line 2000
  mask.ldv_35532.susp = 1U;
#line 2000
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2002
  return (0);
}
}
#line 2005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2008
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2008
  if (tmp != 0) {
#line 2009
    drbd_uuid_new_current(mdev);
#line 2010
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 2011
    drbd_md_sync(mdev);
  } else {

  }
#line 2013
  drbd_suspend_io(mdev);
#line 2014
  val.i = 0U;
#line 2014
  val.ldv_35532.susp = 0U;
#line 2014
  val.ldv_35532.susp_nod = 0U;
#line 2014
  val.ldv_35532.susp_fen = 0U;
#line 2014
  mask.i = 0U;
#line 2014
  mask.ldv_35532.susp = 1U;
#line 2014
  mask.ldv_35532.susp_nod = 1U;
#line 2014
  mask.ldv_35532.susp_fen = 1U;
#line 2014
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2015
  if (reply->ret_code == 1) {
#line 2016
    if ((int )mdev->state.ldv_35532.conn <= 9) {
#line 2017
      tl_clear(mdev);
    } else {

    }
#line 2018
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 2019
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2021
  drbd_resume_io(mdev);
#line 2023
  return (0);
}
}
#line 2026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2029
  val.i = 0U;
#line 2029
  val.ldv_35532.disk = 5U;
#line 2029
  mask.i = 0U;
#line 2029
  mask.ldv_35532.disk = 15U;
#line 2029
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2030
  return (0);
}
}
#line 2033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2038
  tl = (unsigned short *)(& reply->tag_list);
#line 2040
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2040
  if (tmp != 0) {
#line 2041
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2042
    put_ldev(mdev);
  } else {

  }
#line 2045
  tmp___0 = get_net_conf(mdev);
#line 2045
  if (tmp___0 != 0) {
#line 2046
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2047
    put_net_conf(mdev);
  } else {

  }
#line 2049
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2051
  tmp___1 = tl;
#line 2051
  tl = tl + 1;
#line 2051
  __gu_p = (void *)tmp___1;
#line 2051
  switch (2UL) {
  case 1UL: 
#line 2051
  *((u8 *)__gu_p) = 0U;
#line 2051
  goto ldv_47281;
  case 2UL: 
#line 2051
  put_unaligned_le16(0, __gu_p);
#line 2051
  goto ldv_47281;
  case 4UL: 
#line 2051
  put_unaligned_le32(0U, __gu_p);
#line 2051
  goto ldv_47281;
  case 8UL: 
#line 2051
  put_unaligned_le64(0ULL, __gu_p);
#line 2051
  goto ldv_47281;
  default: 
#line 2051
  __bad_unaligned_access_size();
#line 2051
  goto ldv_47281;
  }
  ldv_47281: ;
#line 2053
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2059
  tl = (unsigned short *)(& reply->tag_list);
#line 2060
  s = mdev->state;
#line 2064
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2067
  if ((int )s.ldv_35532.conn > 15 && (int )s.ldv_35532.conn <= 21) {
#line 2068
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2068
    if (tmp != 0) {
#line 2069
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2070
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2071
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2074
  tmp___0 = tl;
#line 2074
  tl = tl + 1;
#line 2074
  __gu_p = (void *)tmp___0;
#line 2074
  switch (2UL) {
  case 1UL: 
#line 2074
  *((u8 *)__gu_p) = 0U;
#line 2074
  goto ldv_47297;
  case 2UL: 
#line 2074
  put_unaligned_le16(0, __gu_p);
#line 2074
  goto ldv_47297;
  case 4UL: 
#line 2074
  put_unaligned_le32(0U, __gu_p);
#line 2074
  goto ldv_47297;
  case 8UL: 
#line 2074
  put_unaligned_le64(0ULL, __gu_p);
#line 2074
  goto ldv_47297;
  default: 
#line 2074
  __bad_unaligned_access_size();
#line 2074
  goto ldv_47297;
  }
  ldv_47297: ;
#line 2076
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2084
  tl = (unsigned short *)(& reply->tag_list);
#line 2086
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2086
  if (tmp != 0) {
#line 2087
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2088
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2089
    put_ldev(mdev);
  } else {

  }
#line 2091
  tmp___0 = tl;
#line 2091
  tl = tl + 1;
#line 2091
  __gu_p = (void *)tmp___0;
#line 2091
  switch (2UL) {
  case 1UL: 
#line 2091
  *((u8 *)__gu_p) = 0U;
#line 2091
  goto ldv_47310;
  case 2UL: 
#line 2091
  put_unaligned_le16(0, __gu_p);
#line 2091
  goto ldv_47310;
  case 4UL: 
#line 2091
  put_unaligned_le32(0U, __gu_p);
#line 2091
  goto ldv_47310;
  case 8UL: 
#line 2091
  put_unaligned_le64(0ULL, __gu_p);
#line 2091
  goto ldv_47310;
  default: 
#line 2091
  __bad_unaligned_access_size();
#line 2091
  goto ldv_47310;
  }
  ldv_47310: ;
#line 2093
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2108
  tl = (unsigned short *)(& reply->tag_list);
#line 2110
  if (*((unsigned int *)mdev + 503UL) != 40960U) {
#line 2110
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2110
    rv = tmp != 0;
  } else {
#line 2110
    rv = 2;
  }
#line 2113
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2114
  tmp___0 = tl;
#line 2114
  tl = tl + 1;
#line 2114
  __gu_p = (void *)tmp___0;
#line 2114
  switch (2UL) {
  case 1UL: 
#line 2114
  *((u8 *)__gu_p) = 0U;
#line 2114
  goto ldv_47324;
  case 2UL: 
#line 2114
  put_unaligned_le16(0, __gu_p);
#line 2114
  goto ldv_47324;
  case 4UL: 
#line 2114
  put_unaligned_le32(0U, __gu_p);
#line 2114
  goto ldv_47324;
  case 8UL: 
#line 2114
  put_unaligned_le64(0ULL, __gu_p);
#line 2114
  goto ldv_47324;
  default: 
#line 2114
  __bad_unaligned_access_size();
#line 2114
  goto ldv_47324;
  }
  ldv_47324: ;
#line 2116
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2123
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2126
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2126
  if (tmp == 0) {
#line 2127
    reply->ret_code = 126;
#line 2128
    return (0);
  } else {

  }
#line 2131
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2132
  val.i = 0U;
#line 2132
  val.ldv_35532.conn = 18U;
#line 2132
  mask.i = 0U;
#line 2132
  mask.ldv_35532.conn = 31U;
#line 2132
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2133
  return (0);
}
}
#line 2137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2140
  retcode = 101;
#line 2141
  skip_initial_sync = 0;
#line 2146
  memset((void *)(& args), 0, 4UL);
#line 2147
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2147
  if (tmp == 0) {
#line 2148
    reply->ret_code = 126;
#line 2149
    return (0);
  } else {

  }
#line 2152
  ldv_mutex_lock_195(& mdev->state_mutex);
#line 2154
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2154
  if (tmp___0 == 0) {
#line 2155
    retcode = 138;
#line 2156
    goto out;
  } else {

  }
#line 2160
  if ((((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2162
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2163
    skip_initial_sync = 1;
  } else
#line 2164
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 2165
    retcode = 151;
#line 2166
    goto out_dec;
  } else {

  }
#line 2169
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2170
  drbd_uuid_new_current(mdev);
#line 2172
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2173
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 2174
    if (err != 0) {
#line 2175
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2176
      retcode = 118;
    } else {

    }
#line 2178
    if (skip_initial_sync != 0) {
#line 2179
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2180
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2181
      spin_lock_irq(& mdev->req_lock);
#line 2182
      __ns.i = mdev->state.i;
#line 2182
      __ns.ldv_35532.disk = 8U;
#line 2182
      __ns.ldv_35532.pdsk = 8U;
#line 2182
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2184
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2188
  drbd_md_sync(mdev);
  out_dec: 
#line 2190
  put_ldev(mdev);
  out: 
#line 2192
  ldv_mutex_unlock_196(& mdev->state_mutex);
#line 2194
  reply->ret_code = retcode;
#line 2195
  return (0);
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2205
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1288}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2238
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2244
  reply_size = 34;
#line 2248
  tmp = try_module_get___0(& __this_module);
#line 2248
  if (tmp == 0) {
#line 2249
    printk("<3>drbd: try_module_get() failed!\n");
#line 2250
    return;
  } else {

  }
#line 2253
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2254
    retcode = 152;
#line 2255
    goto fail;
  } else {

  }
#line 2258
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2260
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2261
    retcode = 127;
#line 2262
    goto fail;
  } else {

  }
#line 2265
  if (nlp->packet_type > 26) {
#line 2266
    retcode = 137;
#line 2267
    goto fail;
  } else {

  }
#line 2270
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2273
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2274
    retcode = 137;
#line 2275
    goto fail;
  } else {

  }
#line 2278
  reply_size = cm->reply_body_size + reply_size;
#line 2281
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2281
  cn_reply = (struct cn_msg *)tmp___0;
#line 2282
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2283
    retcode = 122;
#line 2284
    goto fail;
  } else {

  }
#line 2286
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2288
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2290
  reply->minor = nlp->drbd_minor;
#line 2291
  reply->ret_code = 101;
#line 2294
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2296
  cn_reply->id = req->id;
#line 2297
  cn_reply->seq = req->seq;
#line 2298
  cn_reply->ack = req->ack + 1U;
#line 2299
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2300
  cn_reply->flags = 0U;
#line 2302
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2303
  if (rr != 0 && rr != -3) {
#line 2304
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2306
  kfree((void const   *)cn_reply);
#line 2307
  module_put(& __this_module);
#line 2308
  return;
  fail: 
#line 2310
  drbd_nl_send_reply(req, retcode);
#line 2311
  module_put(& __this_module);
#line 2312
  return;
}
}
#line 2314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2320
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2321
  len = (int )len < (int )l ? len : l;
#line 2322
  tmp = tl;
#line 2322
  tl = tl + 1;
#line 2322
  __gu_p = (void *)tmp;
#line 2322
  switch (2UL) {
  case 1UL: 
#line 2322
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2322
  goto ldv_47383;
  case 2UL: 
#line 2322
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2322
  goto ldv_47383;
  case 4UL: 
#line 2322
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2322
  goto ldv_47383;
  case 8UL: 
#line 2322
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2322
  goto ldv_47383;
  default: 
#line 2322
  __bad_unaligned_access_size();
#line 2322
  goto ldv_47383;
  }
  ldv_47383: 
#line 2323
  tmp___0 = tl;
#line 2323
  tl = tl + 1;
#line 2323
  __gu_p___0 = (void *)tmp___0;
#line 2323
  switch (2UL) {
  case 1UL: 
#line 2323
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2323
  goto ldv_47390;
  case 2UL: 
#line 2323
  put_unaligned_le16((int )len, __gu_p___0);
#line 2323
  goto ldv_47390;
  case 4UL: 
#line 2323
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2323
  goto ldv_47390;
  case 8UL: 
#line 2323
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2323
  goto ldv_47390;
  default: 
#line 2323
  __bad_unaligned_access_size();
#line 2323
  goto ldv_47390;
  }
  ldv_47390: 
#line 2324
  __len = (size_t )len;
#line 2324
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2325
  tl = tl + (unsigned long )len;
#line 2326
  if (nul_terminated != 0) {
#line 2327
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2328
  return (tl);
}
}
#line 2332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2334
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2334
  return (tmp);
}
}
#line 2338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2340
  tmp = strlen(str);
#line 2340
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2340
  return (tmp___0);
}
}
#line 2344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2346
  tmp = tl;
#line 2346
  tl = tl + 1;
#line 2346
  __gu_p = (void *)tmp;
#line 2346
  switch (2UL) {
  case 1UL: 
#line 2346
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2346
  goto ldv_47416;
  case 2UL: 
#line 2346
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2346
  goto ldv_47416;
  case 4UL: 
#line 2346
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2346
  goto ldv_47416;
  case 8UL: 
#line 2346
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2346
  goto ldv_47416;
  default: 
#line 2346
  __bad_unaligned_access_size();
#line 2346
  goto ldv_47416;
  }
  ldv_47416: ;
#line 2347
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2349
  tmp___0 = tl;
#line 2349
  tl = tl + 1;
#line 2349
  __gu_p___0 = (void *)tmp___0;
#line 2349
  switch (2UL) {
  case 1UL: 
#line 2349
  *((u8 *)__gu_p___0) = 4U;
#line 2349
  goto ldv_47424;
  case 2UL: 
#line 2349
  put_unaligned_le16(4, __gu_p___0);
#line 2349
  goto ldv_47424;
  case 4UL: 
#line 2349
  put_unaligned_le32(4U, __gu_p___0);
#line 2349
  goto ldv_47424;
  case 8UL: 
#line 2349
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2349
  goto ldv_47424;
  default: 
#line 2349
  __bad_unaligned_access_size();
#line 2349
  goto ldv_47424;
  }
  ldv_47424: 
#line 2350
  __gu_p___1 = (void *)tl;
#line 2350
  switch (4UL) {
  case 1UL: 
#line 2350
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2350
  goto ldv_47431;
  case 2UL: 
#line 2350
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2350
  goto ldv_47431;
  case 4UL: 
#line 2350
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2350
  goto ldv_47431;
  case 8UL: 
#line 2350
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2350
  goto ldv_47431;
  default: 
#line 2350
  __bad_unaligned_access_size();
#line 2350
  goto ldv_47431;
  }
  ldv_47431: 
#line 2351
  tl = tl + 4U;
#line 2352
  goto ldv_47436;
  case 16384U: 
#line 2354
  tmp___1 = tl;
#line 2354
  tl = tl + 1;
#line 2354
  __gu_p___2 = (void *)tmp___1;
#line 2354
  switch (2UL) {
  case 1UL: 
#line 2354
  *((u8 *)__gu_p___2) = 8U;
#line 2354
  goto ldv_47440;
  case 2UL: 
#line 2354
  put_unaligned_le16(8, __gu_p___2);
#line 2354
  goto ldv_47440;
  case 4UL: 
#line 2354
  put_unaligned_le32(8U, __gu_p___2);
#line 2354
  goto ldv_47440;
  case 8UL: 
#line 2354
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2354
  goto ldv_47440;
  default: 
#line 2354
  __bad_unaligned_access_size();
#line 2354
  goto ldv_47440;
  }
  ldv_47440: 
#line 2355
  __gu_p___3 = (void *)tl;
#line 2355
  switch (8UL) {
  case 1UL: 
#line 2355
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2355
  goto ldv_47447;
  case 2UL: 
#line 2355
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2355
  goto ldv_47447;
  case 4UL: 
#line 2355
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2355
  goto ldv_47447;
  case 8UL: 
#line 2355
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2355
  goto ldv_47447;
  default: 
#line 2355
  __bad_unaligned_access_size();
#line 2355
  goto ldv_47447;
  }
  ldv_47447: 
#line 2356
  tl = tl + 8U;
#line 2357
  goto ldv_47436;
  default: ;
  }
  ldv_47436: ;
#line 2362
  return (tl);
}
}
#line 2365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2371
  cn_reply = (struct cn_msg *)(& buffer);
#line 2372
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2374
  tl = (unsigned short *)(& reply->tag_list);
#line 2378
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2380
  tmp = tl;
#line 2380
  tl = tl + 1;
#line 2380
  __gu_p = (void *)tmp;
#line 2380
  switch (2UL) {
  case 1UL: 
#line 2380
  *((u8 *)__gu_p) = 0U;
#line 2380
  goto ldv_47463;
  case 2UL: 
#line 2380
  put_unaligned_le16(0, __gu_p);
#line 2380
  goto ldv_47463;
  case 4UL: 
#line 2380
  put_unaligned_le32(0U, __gu_p);
#line 2380
  goto ldv_47463;
  case 8UL: 
#line 2380
  put_unaligned_le64(0ULL, __gu_p);
#line 2380
  goto ldv_47463;
  default: 
#line 2380
  __bad_unaligned_access_size();
#line 2380
  goto ldv_47463;
  }
  ldv_47463: 
#line 2382
  cn_reply->id.idx = 8U;
#line 2383
  cn_reply->id.val = 1U;
#line 2385
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2385
  cn_reply->seq = (__u32 )tmp___0;
#line 2386
  cn_reply->ack = 0U;
#line 2387
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2389
  cn_reply->flags = 0U;
#line 2391
  reply->packet_type = 17;
#line 2392
  reply->minor = mdev_to_minor(mdev);
#line 2393
  reply->ret_code = 101;
#line 2395
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2396
  return;
}
}
#line 2398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2404
  cn_reply = (struct cn_msg *)(& buffer);
#line 2405
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2407
  tl = (unsigned short *)(& reply->tag_list);
#line 2411
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2412
  tmp = tl;
#line 2412
  tl = tl + 1;
#line 2412
  __gu_p = (void *)tmp;
#line 2412
  switch (2UL) {
  case 1UL: 
#line 2412
  *((u8 *)__gu_p) = 0U;
#line 2412
  goto ldv_47478;
  case 2UL: 
#line 2412
  put_unaligned_le16(0, __gu_p);
#line 2412
  goto ldv_47478;
  case 4UL: 
#line 2412
  put_unaligned_le32(0U, __gu_p);
#line 2412
  goto ldv_47478;
  case 8UL: 
#line 2412
  put_unaligned_le64(0ULL, __gu_p);
#line 2412
  goto ldv_47478;
  default: 
#line 2412
  __bad_unaligned_access_size();
#line 2412
  goto ldv_47478;
  }
  ldv_47478: 
#line 2414
  cn_reply->id.idx = 8U;
#line 2415
  cn_reply->id.val = 1U;
#line 2417
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2417
  cn_reply->seq = (__u32 )tmp___0;
#line 2418
  cn_reply->ack = 0U;
#line 2419
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2421
  cn_reply->flags = 0U;
#line 2423
  reply->packet_type = 20;
#line 2424
  reply->minor = mdev_to_minor(mdev);
#line 2425
  reply->ret_code = 101;
#line 2427
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2428
  return;
}
}
#line 2430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2441
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2442
    return;
  } else {

  }
#line 2443
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2444
    return;
  } else {

  }
#line 2452
  tmp = kmalloc___5(33026UL, 16U);
#line 2452
  cn_reply = (struct cn_msg *)tmp;
#line 2459
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2462
    return;
  } else {

  }
#line 2465
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2466
  tl = (unsigned short *)(& reply->tag_list);
#line 2468
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2469
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2470
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2471
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2472
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_42956.block_id));
#line 2474
  tmp___0 = tl;
#line 2474
  tl = tl + 1;
#line 2474
  __gu_p = (void *)tmp___0;
#line 2474
  switch (2UL) {
  case 1UL: 
#line 2474
  *((u8 *)__gu_p) = 50U;
#line 2474
  goto ldv_47498;
  case 2UL: 
#line 2474
  put_unaligned_le16(49202, __gu_p);
#line 2474
  goto ldv_47498;
  case 4UL: 
#line 2474
  put_unaligned_le32(49202U, __gu_p);
#line 2474
  goto ldv_47498;
  case 8UL: 
#line 2474
  put_unaligned_le64(49202ULL, __gu_p);
#line 2474
  goto ldv_47498;
  default: 
#line 2474
  __bad_unaligned_access_size();
#line 2474
  goto ldv_47498;
  }
  ldv_47498: 
#line 2475
  tmp___1 = tl;
#line 2475
  tl = tl + 1;
#line 2475
  __gu_p___0 = (void *)tmp___1;
#line 2475
  switch (2UL) {
  case 1UL: 
#line 2475
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2475
  goto ldv_47505;
  case 2UL: 
#line 2475
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2475
  goto ldv_47505;
  case 4UL: 
#line 2475
  put_unaligned_le32(e->size, __gu_p___0);
#line 2475
  goto ldv_47505;
  case 8UL: 
#line 2475
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2475
  goto ldv_47505;
  default: 
#line 2475
  __bad_unaligned_access_size();
#line 2475
  goto ldv_47505;
  }
  ldv_47505: 
#line 2477
  len = e->size;
#line 2478
  page = e->pages;
#line 2479
  goto ldv_47520;
  ldv_47519: 
#line 2480
  tmp___2 = kmap_atomic___0(page, KM_USER0);
#line 2480
  d = tmp___2;
#line 2481
  __min1 = len;
#line 2481
  __min2 = 4096U;
#line 2481
  l = __min1 < __min2 ? __min1 : __min2;
#line 2482
  __len = (size_t )l;
#line 2482
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2483
  kunmap_atomic_notypecheck___0(d, KM_USER0);
#line 2484
  tl = tl + (unsigned long )l;
#line 2485
  len = len - l;
#line 2479
  page = page_chain_next(page);
  ldv_47520: ;
#line 2479
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2479
    tmp___3 = page_chain_next(page);
#line 2479
    __builtin_prefetch((void const   *)tmp___3);
#line 2479
    if (1 != 0) {
#line 2480
      goto ldv_47519;
    } else {
#line 2482
      goto ldv_47521;
    }
  } else {

  }
  ldv_47521: 
#line 2487
  tmp___4 = tl;
#line 2487
  tl = tl + 1;
#line 2487
  __gu_p___1 = (void *)tmp___4;
#line 2487
  switch (2UL) {
  case 1UL: 
#line 2487
  *((u8 *)__gu_p___1) = 0U;
#line 2487
  goto ldv_47524;
  case 2UL: 
#line 2487
  put_unaligned_le16(0, __gu_p___1);
#line 2487
  goto ldv_47524;
  case 4UL: 
#line 2487
  put_unaligned_le32(0U, __gu_p___1);
#line 2487
  goto ldv_47524;
  case 8UL: 
#line 2487
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2487
  goto ldv_47524;
  default: 
#line 2487
  __bad_unaligned_access_size();
#line 2487
  goto ldv_47524;
  }
  ldv_47524: 
#line 2489
  cn_reply->id.idx = 8U;
#line 2490
  cn_reply->id.val = 1U;
#line 2492
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2492
  cn_reply->seq = (__u32 )tmp___5;
#line 2493
  cn_reply->ack = 0U;
#line 2494
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2496
  cn_reply->flags = 0U;
#line 2498
  reply->packet_type = 24;
#line 2499
  reply->minor = mdev_to_minor(mdev);
#line 2500
  reply->ret_code = 101;
#line 2502
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2503
  kfree((void const   *)cn_reply);
#line 2504
  return;
}
}
#line 2506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2512
  cn_reply = (struct cn_msg *)(& buffer);
#line 2513
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2515
  tl = (unsigned short *)(& reply->tag_list);
#line 2520
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2520
  if (tmp == 0) {
#line 2521
    return;
  } else {

  }
#line 2522
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2523
  put_ldev(mdev);
#line 2525
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2526
  tmp___0 = tl;
#line 2526
  tl = tl + 1;
#line 2526
  __gu_p = (void *)tmp___0;
#line 2526
  switch (2UL) {
  case 1UL: 
#line 2526
  *((u8 *)__gu_p) = 0U;
#line 2526
  goto ldv_47540;
  case 2UL: 
#line 2526
  put_unaligned_le16(0, __gu_p);
#line 2526
  goto ldv_47540;
  case 4UL: 
#line 2526
  put_unaligned_le32(0U, __gu_p);
#line 2526
  goto ldv_47540;
  case 8UL: 
#line 2526
  put_unaligned_le64(0ULL, __gu_p);
#line 2526
  goto ldv_47540;
  default: 
#line 2526
  __bad_unaligned_access_size();
#line 2526
  goto ldv_47540;
  }
  ldv_47540: 
#line 2528
  cn_reply->id.idx = 8U;
#line 2529
  cn_reply->id.val = 1U;
#line 2531
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2531
  cn_reply->seq = (__u32 )tmp___1;
#line 2532
  cn_reply->ack = 0U;
#line 2533
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2535
  cn_reply->flags = 0U;
#line 2537
  reply->packet_type = 23;
#line 2538
  reply->minor = mdev_to_minor(mdev);
#line 2539
  reply->ret_code = 101;
#line 2541
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2542
  return;
}
}
#line 2544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2547
  try = 10;
#line 2549
  cn_id_drbd.val = 1U;
  ldv_47552: 
#line 2551
  cn_id_drbd.idx = cn_idx;
#line 2552
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2553
  if (err == 0) {
#line 2554
    goto ldv_47551;
  } else {

  }
#line 2555
  cn_idx = cn_idx + 6977U;
#line 2556
  tmp = try;
#line 2556
  try = try - 1;
#line 2556
  if (tmp != 0) {
#line 2557
    goto ldv_47552;
  } else {

  }
  ldv_47551: ;
#line 2558
  if (err != 0) {
#line 2559
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2560
    return (err);
  } else {

  }
#line 2563
  return (0);
}
}
#line 2566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2570
  cn_id_drbd.idx = cn_idx;
#line 2571
  cn_id_drbd.val = 1U;
#line 2573
  cn_del_callback(& cn_id_drbd);
#line 2574
  return;
}
}
#line 2576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2579
  cn_reply = (struct cn_msg *)(& buffer);
#line 2580
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2584
  cn_reply->id = req->id;
#line 2586
  cn_reply->seq = req->seq;
#line 2587
  cn_reply->ack = req->ack + 1U;
#line 2588
  cn_reply->len = 12U;
#line 2589
  cn_reply->flags = 0U;
#line 2591
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2592
  reply->ret_code = ret_code;
#line 2594
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2595
  if (rr != 0 && rr != -3) {
#line 2596
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2597
  return;
}
}
#line 2599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2604
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2606
  mutex_lock(ldv_func_arg1);
#line 2607
  return;
}
}
#line 2609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2614
  tmp = mutex_trylock(ldv_func_arg1);
#line 2614
  ldv_func_res = tmp;
#line 2616
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2616
  return (tmp___0);
#line 2618
  return (ldv_func_res);
}
}
#line 2621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2626
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2628
  mutex_unlock(ldv_func_arg1);
#line 2629
  return;
}
}
#line 2631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2636
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2638
  mutex_lock(ldv_func_arg1);
#line 2639
  return;
}
}
#line 2641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2646
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2648
  mutex_unlock(ldv_func_arg1);
#line 2649
  return;
}
}
#line 2651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2656
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2658
  mutex_unlock(ldv_func_arg1);
#line 2659
  return;
}
}
#line 2661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2666
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2668
  mutex_lock(ldv_func_arg1);
#line 2669
  return;
}
}
#line 2671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2676
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2678
  mutex_unlock(ldv_func_arg1);
#line 2679
  return;
}
}
#line 2681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2686
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2688
  mutex_lock(ldv_func_arg1);
#line 2689
  return;
}
}
#line 2691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2696
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2698
  mutex_unlock(ldv_func_arg1);
#line 2699
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_drbd_main_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_drbd_main_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_drbd_main_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_drbd_main_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_drbd_main_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_drbd_main_mutex = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_drbd_main_mutex = 1;
#line 929
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
