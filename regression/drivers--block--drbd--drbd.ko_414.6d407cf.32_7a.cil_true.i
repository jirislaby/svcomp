/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "include/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "include/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "include/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "include/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "include/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "include/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "include/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 28 "include/linux/types.h"
typedef __u32 nlink_t;
#line 29 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 115 "include/linux/types.h"
typedef __u8 uint8_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 120 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 143 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 155 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 179 "include/linux/types.h"
typedef __u16 __be16;
#line 181 "include/linux/types.h"
typedef __u32 __be32;
#line 186 "include/linux/types.h"
typedef __u32 __wsum;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 203 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 221 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 221 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 226 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 226 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 227 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 232
struct hlist_node;
#line 232 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 236 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 247 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 303 "include/linux/printk.h"
struct file_operations;
#line 318 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 60
struct completion;
#line 61
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2008_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2008_8 ldv_2008 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2015_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2015_10 ldv_2015 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2132_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2147_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2148_11 {
   struct __anonstruct_ldv_2132_12 ldv_2132 ;
   struct __anonstruct_ldv_2147_13 ldv_2147 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2148_11 ldv_2148 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2776_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2776_18 ldv_2776 ;
};
#line 96 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 637 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 193 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5150_23 {
   u64 rip ;
   u64 rdp ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5156_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5157_22 {
   struct __anonstruct_ldv_5150_23 ldv_5150 ;
   struct __anonstruct_ldv_5156_24 ldv_5156 ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5166_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5157_22 ldv_5157 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5166_25 ldv_5166 ;
};
#line 339 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 433
struct kmem_cache;
#line 434
struct perf_event;
#line 435 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5988_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5989_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5988_29 ldv_5988 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5989_28 ldv_5989 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 73
struct compat_timespec;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 74
struct pollfd;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6224_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6224_31 ldv_6224 ;
};
#line 52 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 394 "include/linux/spinlock.h"
struct vm_area_struct;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 105 "include/linux/debugobjects.h"
struct tvec_base;
#line 106 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 27 "include/linux/wait.h"
struct __wait_queue;
#line 27 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 30 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 48 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 53 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 665 "include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 556 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 701 "include/linux/mmzone.h"
struct rw_semaphore;
#line 702 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 835 "include/linux/mmzone.h"
struct ctl_table;
#line 348 "include/linux/irq.h"
struct proc_dir_entry;
#line 349
struct timer_rand_state;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_129 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_129 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_130 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_130 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_131 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_131 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_132 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_132 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_133 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_133 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_134 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_134 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_135 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_135 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 148 "include/linux/if.h"
union __anonunion_ifs_ifsu_136 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 148 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_136 ifs_ifsu ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifrn_137 {
   char ifrn_name[16U] ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifru_138 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 166 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_137 ifr_ifrn ;
   union __anonunion_ifr_ifru_138 ifr_ifru ;
};
#line 230 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 132 "include/linux/if_ether.h"
struct prio_tree_node;
#line 132 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 181
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_trap_nr ;
   unsigned long saved_scratch_register ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
   atomic_t count ;
};
#line 121
struct address_space;
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13483_141 {
   unsigned long index ;
   void *freelist ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13493_145 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13494_144 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13493_145 ldv_13493 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13496_143 {
   union __anonunion_ldv_13494_144 ldv_13494 ;
   atomic_t _count ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13497_142 {
   unsigned long counters ;
   struct __anonstruct_ldv_13496_143 ldv_13496 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13498_140 {
   union __anonunion_ldv_13483_141 ldv_13483 ;
   union __anonunion_ldv_13497_142 ldv_13497 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13505_147 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13506_146 {
   struct list_head lru ;
   struct __anonstruct_ldv_13505_147 ldv_13505 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13511_148 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 122 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_13498_140 ldv_13498 ;
   union __anonunion_ldv_13506_146 ldv_13506 ;
   union __anonunion_ldv_13511_148 ldv_13511 ;
   unsigned long debug_flags ;
};
#line 193 "include/linux/mm_types.h"
struct __anonstruct_vm_set_150 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 193 "include/linux/mm_types.h"
union __anonunion_shared_149 {
   struct __anonstruct_vm_set_150 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 193
struct anon_vma;
#line 193
struct vm_operations_struct;
#line 193
struct mempolicy;
#line 193 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_149 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 256 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 262 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 275 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 288
struct linux_binfmt;
#line 288
struct mmu_notifier_mm;
#line 288 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_14353 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_14353 socket_state;
#line 174 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 175
struct pipe_inode_info;
#line 176
struct net;
#line 193
struct fasync_struct;
#line 193 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 127 "include/linux/net.h"
struct sock;
#line 127
struct proto_ops;
#line 127 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 153
struct kiocb;
#line 154 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 164 "include/linux/slab.h"
struct kobject;
#line 165
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 171 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[26U] ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 76 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 52 "include/linux/device.h"
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 126
struct device_type;
#line 183
struct of_device_id;
#line 183 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 246 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 300
struct class_attribute;
#line 300 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 395 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 448 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 475 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 563 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 573
struct dma_coherent_mem;
#line 573 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 691 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 178 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 195 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 1627 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1013 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 460 "include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 67 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 74 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 318 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 319
struct sec_path;
#line 319 "include/linux/skbuff.h"
struct __anonstruct_ldv_19546_154 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 319 "include/linux/skbuff.h"
union __anonunion_ldv_19547_153 {
   __wsum csum ;
   struct __anonstruct_ldv_19546_154 ldv_19546 ;
};
#line 319 "include/linux/skbuff.h"
union __anonunion_ldv_19584_155 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 319 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19547_153 ldv_19547 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19584_155 ldv_19584 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 521
struct dst_entry;
#line 556
struct rtable;
#line 40 "include/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 206 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 314 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 398 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 71 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 108
struct bio;
#line 109
struct bio_integrity_payload;
#line 110
struct block_device;
#line 111
struct io_context;
#line 112
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 20 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_21831_160 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_21833_159 {
   struct __anonstruct_ldv_21831_160 ldv_21831 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_21833_159 ldv_21833 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_161 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_161 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 417 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 377
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 384
struct pid_namespace;
#line 384 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44
struct export_operations;
#line 45
struct hd_geometry;
#line 46
struct kstatfs;
#line 445 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 275 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 303 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 314 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 328 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 344 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 390 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 595 "include/linux/fs.h"
union __anonunion_arg_163 {
   char *buf ;
   void *data ;
};
#line 595 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_162 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_163 arg ;
   int error ;
};
#line 595 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_162 read_descriptor_t;
#line 598 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 652
struct backing_dev_info;
#line 653 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 674
struct request_queue;
#line 675
struct hd_struct;
#line 675
struct gendisk;
#line 675 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 747
struct posix_acl;
#line 748
struct inode_operations;
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22947_164 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22967_165 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 748
struct file_lock;
#line 748
struct cdev;
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22983_166 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 748 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_22947_164 ldv_22947 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_22967_165 ldv_22967 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22983_166 ldv_22983 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 976 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 984 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 1007 "include/linux/fs.h"
union __anonunion_f_u_167 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 1007 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_167 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1146
struct files_struct;
#line 1146 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1147 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1152 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_release_private)(struct file_lock * ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 1169
struct nlm_lockowner;
#line 1170 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_169 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_168 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_169 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_168 fl_u ;
};
#line 1256 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1452
struct file_system_type;
#line 1452
struct super_operations;
#line 1452
struct xattr_handler;
#line 1452
struct mtd_info;
#line 1452 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1592 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1630
struct block_device_operations;
#line 1631 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1666 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
};
#line 1710 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1870 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_170 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_170 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_172 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_173 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_174 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_176 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_177 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigsys_178 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_171 {
   int _pad[28U] ;
   struct __anonstruct__kill_172 _kill ;
   struct __anonstruct__timer_173 _timer ;
   struct __anonstruct__rt_174 _rt ;
   struct __anonstruct__sigchld_175 _sigchld ;
   struct __anonstruct__sigfault_176 _sigfault ;
   struct __anonstruct__sigpoll_177 _sigpoll ;
   struct __anonstruct__sigsys_178 _sigsys ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_171 _sifields ;
};
#line 109 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   raw_spinlock_t lock ;
};
#line 46 "include/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 946 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 966 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 1005 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 1031 "include/linux/sysctl.h"
struct __anonstruct_ldv_26224_182 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 1031 "include/linux/sysctl.h"
union __anonunion_ldv_26226_181 {
   struct __anonstruct_ldv_26224_182 ldv_26224 ;
   struct rcu_head rcu ;
};
#line 1031
struct ctl_table_set;
#line 1031 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_26226_181 ldv_26226 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 1052 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 1058 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 1063 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26305_183 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26314_184 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_185 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_186 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_26305_183 ldv_26305 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26314_184 ldv_26314 ;
   time_t last_used_at ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_185 type_data ;
   union __anonunion_payload_186 payload ;
};
#line 319
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 386
struct kioctx;
#line 387 "include/linux/sched.h"
union __anonunion_ki_obj_187 {
   void *user ;
   struct task_struct *tsk ;
};
#line 387
struct eventfd_ctx;
#line 387 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_187 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 407 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 450 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 458 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 465 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 482 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 518
struct autogroup;
#line 519
struct tty_struct;
#line 519
struct taskstats;
#line 519
struct tty_audit_buf;
#line 519 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 700 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 744
struct reclaim_state;
#line 745 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 760 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1051
struct rq;
#line 1052 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1118 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1123 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1158 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1184
struct rt_rq;
#line 1184 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1208
struct mem_cgroup;
#line 1208 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1565
struct css_set;
#line 1565
struct compat_robust_list_head;
#line 1565 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct hlist_head task_works ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   int uprobe_srcu_id ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 225 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 229 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 589 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 66 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 106 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 121 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 129 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 138 "include/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 155 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 253 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 303 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 354 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 446 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 466 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 477 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 483 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 508 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 666 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 674 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 750 "include/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 814
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 849 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
};
#line 1027
struct prot_inuse;
#line 1028 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[83U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   unsigned int sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 71 "include/net/netns/ipv4.h"
struct neighbour;
#line 71 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 67 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 70 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 335 "include/linux/in.h"
union __anonunion_in6_u_196 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 335 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_196 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 386 "include/linux/netfilter.h"
struct ebt_table;
#line 387 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18
struct nf_ct_event_notifier;
#line 18
struct nf_exp_event_notifier;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 105 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 30 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 290 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154
struct cgroupfs_root;
#line 155
struct cgroup_subsys;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 58 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 150 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 388 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype  const  *cfts ;
};
#line 437
struct cgroup_taskset;
#line 447 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   char const   *name ;
   struct mutex hierarchy_mutex ;
   struct lock_class_key subsys_key ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 635 "include/linux/cgroup.h"
struct netprio_map {
   struct rcu_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 74 "include/net/netprio_cgroup.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 157 "include/linux/neighbour.h"
struct netpoll_info;
#line 158
struct phy_device;
#line 159
struct wireless_dev;
#line 160
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 116 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 135 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 221
struct neigh_parms;
#line 241 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 246 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 275 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 369
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 417 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 418 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 526
struct Qdisc;
#line 526 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 727 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct net_device * , unsigned char * , u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1040
struct iw_handler_def;
#line 1040
struct iw_public_data;
#line 1040
struct vlan_info;
#line 1040
struct in_device;
#line 1040
struct dn_dev;
#line 1040
struct inet6_dev;
#line 1040
struct cpu_rmap;
#line 1040
struct pcpu_lstats;
#line 1040
struct pcpu_tstats;
#line 1040
struct pcpu_dstats;
#line 1040 "include/linux/netdevice.h"
union __anonunion_ldv_33027_203 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1040
struct garp_port;
#line 1040
struct rtnl_link_ops;
#line 1040 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_33027_203 ldv_33027 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   int group ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 412 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 145 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 821 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** ) ;
};
#line 131
struct neigh_table;
#line 131 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct rcu_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 410 "include/net/neighbour.h"
union __anonunion_ldv_37199_208 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 410
struct dn_route;
#line 410 "include/net/neighbour.h"
union __anonunion_ldv_37223_209 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 410 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_37199_208 ldv_37199 ;
   struct dst_entry *path ;
   struct neighbour *_neighbour ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int flags ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37223_209 ldv_37223 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_210 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_210 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_37450_211 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37458_212 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37465_213 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37450_211 ldv_37450 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37458_212 ldv_37458 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37465_213 ldv_37465 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_214 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_214 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 801
struct request_sock_ops;
#line 802
struct timewait_sock_ops;
#line 803
struct inet_hashinfo;
#line 804
struct raw_hashinfo;
#line 805
struct udp_table;
#line 805 "include/net/sock.h"
union __anonunion_h_215 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 805 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_215 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 928 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_38794_216 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_38794_216 ldv_38794 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_217 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_217 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_218 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_218 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 253 "include/net/inet_sock.h"
struct inet_peer;
#line 368 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 146 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 153
struct disk_events;
#line 154
struct blk_integrity;
#line 154 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 47 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 64 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 76 "include/linux/mempool.h"
union __anonunion_ldv_42105_225 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 76 "include/linux/mempool.h"
union __anonunion_ldv_42109_226 {
   struct hlist_node ioc_node ;
   struct rcu_head __rcu_head ;
};
#line 76 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_42105_225 ldv_42105 ;
   union __anonunion_ldv_42109_226 ldv_42109 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 374 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 86
struct bsg_job;
#line 87
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 60
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 72 "include/linux/blkdev.h"
union __anonunion_ldv_42545_227 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 72 "include/linux/blkdev.h"
struct __anonstruct_elv_229 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 72 "include/linux/blkdev.h"
struct __anonstruct_flush_230 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 72 "include/linux/blkdev.h"
union __anonunion_ldv_42556_228 {
   struct __anonstruct_elv_229 elv ;
   struct __anonstruct_flush_230 flush ;
};
#line 72 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_42545_227 ldv_42545 ;
   union __anonunion_ldv_42556_228 ldv_42556 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 209 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 210 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 211 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 212 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 213 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 221 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 223 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 224 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 225 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 226 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 227
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 234 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 240 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 249 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 277
struct throtl_data;
#line 277 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 894 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1215 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1247 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1248 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1249 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1250 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1251 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1310 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 663 "include/net/ipv6.h"
union __anonunion_ldv_45059_236 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 663 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_45059_236 ldv_45059 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_45081_238 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45084_237 {
   struct __anonstruct_ldv_45081_238 ldv_45081 ;
   struct rcu_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
   struct list_head gc_list ;
   union __anonunion_ldv_45084_237 ldv_45084 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_key_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 323 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1612 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 725 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_47571_241 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_47571_241 ldv_47571 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 904 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
   int disk_timeout ;
};
#line 39 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 81 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 152 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 938 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 943 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 951
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 957 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 963 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct list_head barrier_acked_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   unsigned long last_reattach_jif ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   int peer_max_bio_size ;
   int local_max_bio_size ;
};
#line 1175
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2483 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 1732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___7;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 215 "include/linux/kobject.h"
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13670_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13670_134 ldv_13670 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 225 "include/linux/jump_label.h"
struct tracepoint;
#line 226 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct module_param_attrs;
#line 34 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 43 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 69
struct exception_table_entry;
#line 198
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 204 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 219
struct module_sect_attrs;
#line 219
struct module_notes_attrs;
#line 219
struct ftrace_event_call;
#line 219 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 640 "include/linux/module.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   unsigned long start_time ;
};
#line 753 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    abort_disk_io = 22,
    completed_ok = 23,
    resend = 24,
    fail_frozen_disk_io = 25,
    restart_frozen_disk_io = 26,
    nothing = 27
} ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 746
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1183
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1550
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_242 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_242 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 107 "include/linux/sem.h"
struct bio_set;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 275 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 3859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 178 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u32 __le32;
#line 182 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 640 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 917 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 22 "include/linux/drbd_nl.h"
struct detach {
   unsigned char detach_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 77 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 111 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 139 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 148 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_disk_timeout = 89,
    T_detach_force = 41048,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 114 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 272
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 276
  return (oldbit);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 313
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 321
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 326
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n\t .long 661b - .\n\t .long 663f - .\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 77 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 79
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 79
  return (tmp);
}
}
#line 82 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 84
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 84
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 112 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2870;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2870;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2870;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2870;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2870: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 70 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5502;
  case 2UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5502;
  case 4UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5502;
  case 8UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5502;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5502: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 175
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) ;
#line 177
extern void mutex_unlock(struct mutex * ) ;
#line 180
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 52
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6247;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6247;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6247;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6247;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6247: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5989.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5989.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5989.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5989.rlock, flags);
#line 341
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 79 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 155
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 324 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 327 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 329
  tmp = alloc_pages_current(gfp_mask, order);
#line 329
  return (tmp);
}
}
#line 360
extern void __free_pages(struct page * , unsigned int  ) ;
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 63 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 66
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 66
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 66
  if (tmp != 0L) {
#line 66
    warn_slowpath_null("include/linux/kref.h", 66);
  } else {

  }
#line 66
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 68
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 68
  if (tmp___0 != 0) {
#line 69
    (*release)(kref);
#line 70
    return (1);
  } else {

  }
#line 72
  return (0);
}
}
#line 92 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 94
  tmp = kref_sub(kref, 1U, release);
#line 94
  return (tmp);
}
}
#line 221 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 268 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 283
  tmp___2 = __kmalloc(size, flags);
#line 283
  return (tmp___2);
}
}
#line 349 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 351
  tmp = kmalloc(size, flags | 32768U);
#line 351
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 898 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 902
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 904
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 908
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 739 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 741
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2392 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2602
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  pagefault_disable();
#line 62
  tmp = lowmem_page_address((struct page  const  *)page);
#line 62
  return (tmp);
}
}
#line 66 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 68
  pagefault_enable();
#line 69
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 218 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 221
extern void bio_endio(struct bio * , int  ) ;
#line 230
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 971 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1206
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1301
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1302
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1445
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1446
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1447
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1448
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1449
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1451
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1453
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1455
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1461
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1462
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1463
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1464
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1465
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1466
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1467
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1469
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1470
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1471
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1474
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1476
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1477
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1478
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1479
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1482
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1485
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1488
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1489
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1523
mempool_t *drbd_md_io_page_pool ;
#line 1529
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1531
rwlock_t global_state_lock ;
#line 1548
char *ppsize(char *buf , unsigned long long size ) ;
#line 1573
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) ;
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1819
  _raw_read_lock(& global_state_lock);
#line 1820
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1821
  _raw_read_unlock(& global_state_lock);
#line 1823
  return (rv);
}
}
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1846
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1848
  if (forcedetach == 0) {
#line 1849
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1849
    if (tmp != 0) {
#line 1850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1851
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1852
      __ns.i = mdev->state.i;
#line 1852
      __ns.ldv_38794.disk = 4U;
#line 1852
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1853
    goto ldv_48599;
  } else {

  }
  case 2: ;
  case 1: 
#line 1858
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1859
  if ((int )mdev->state.ldv_38794.disk > 2) {
#line 1860
    __ns___0.i = mdev->state.i;
#line 1860
    __ns___0.ldv_38794.disk = 2U;
#line 1860
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1864
  goto ldv_48599;
  }
  ldv_48599: ;
#line 1867
  return;
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  if (error != 0) {
#line 1882
    tmp = spinlock_check(& mdev->req_lock);
#line 1882
    flags = _raw_spin_lock_irqsave(tmp);
#line 1883
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1884
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1886
  return;
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1914
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1917
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1920
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2175 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2177
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2177
  i = tmp;
#line 2183
  if (i < 0) {
#line 2183
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2183);
  } else {

  }
#line 2184
  if (i == 0) {
#line 2185
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2187
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2188
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2190
      drbd_go_diskless(mdev);
    } else {

    }
#line 2191
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2193
  return;
}
}
#line 2196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2201
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2202
    return (0);
  } else {

  }
#line 2204
  atomic_inc(& mdev->local_cnt);
#line 2205
  io_allowed = (unsigned int )mdev->state.ldv_38794.disk >= (unsigned int )mins;
#line 2206
  if (io_allowed == 0) {
#line 2207
    put_ldev(mdev);
  } else {

  }
#line 2208
  return (io_allowed);
}
}
#line 2470 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2474
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2474
  if (tmp != 0) {
#line 2475
    return;
  } else {

  }
#line 2477
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2478
  if (r != 0) {
#line 2479
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2480
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2482
  return;
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 173
  b = mdev->bitmap;
#line 174
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 174
  if (tmp == 0) {
#line 175
    return;
  } else {

  }
#line 176
  tmp___9 = get_current();
#line 176
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 176
    tmp___7 = get_current();
#line 176
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 176
      tmp___5 = get_current();
#line 176
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 176
        tmp___3 = get_current();
#line 176
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 176
        tmp___4 = (char *)"worker";
      }
#line 176
      tmp___6 = tmp___4;
    } else {
#line 176
      tmp___6 = (char *)"asender";
    }
#line 176
    tmp___8 = tmp___6;
  } else {
#line 176
    tmp___8 = (char *)"receiver";
  }
#line 176
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 182
  return;
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 188
  b = mdev->bitmap;
#line 191
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 193
    return;
  } else {

  }
#line 196
  tmp = ldv_mutex_trylock_9(& b->bm_change);
#line 196
  trylock_failed = tmp == 0;
#line 198
  if (trylock_failed != 0) {
#line 199
    tmp___9 = get_current();
#line 199
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 199
      tmp___7 = get_current();
#line 199
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 199
        tmp___5 = get_current();
#line 199
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 199
          tmp___3 = get_current();
#line 199
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 199
          tmp___4 = (char *)"worker";
        }
#line 199
        tmp___6 = tmp___4;
      } else {
#line 199
        tmp___6 = (char *)"asender";
      }
#line 199
      tmp___8 = tmp___6;
    } else {
#line 199
      tmp___8 = (char *)"receiver";
    }
#line 199
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 207
    ldv_mutex_lock_10(& b->bm_change);
  } else {

  }
#line 209
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 211
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 213
  b->bm_why = why;
#line 214
  b->bm_task = get_current();
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 219
  b = mdev->bitmap;
#line 220
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 222
    return;
  } else {

  }
#line 225
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 228
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 229
  b->bm_why = 0;
#line 230
  b->bm_task = 0;
#line 231
  ldv_mutex_unlock_11(& b->bm_change);
#line 232
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 262
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 262
  if (tmp != 0L) {
#line 262
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (262), "i" (12UL));
    ldv_48870: ;
#line 262
    goto ldv_48870;
  } else {

  }
#line 263
  page->ldv_13511.private = idx;
#line 264
  return;
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 268
  return (page->ldv_13511.private & 16777215UL);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 276
  b = mdev->bitmap;
#line 277
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13511.private);
#line 278
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 278
  if (tmp == 0) {
#line 278
    goto ldv_48880;
  } else {

  }
#line 278
  tmp___0 = get_current();
#line 278
  __wait.flags = 0U;
#line 278
  __wait.private = (void *)tmp___0;
#line 278
  __wait.func = & autoremove_wake_function;
#line 278
  __wait.task_list.next = & __wait.task_list;
#line 278
  __wait.task_list.prev = & __wait.task_list;
  ldv_48883: 
#line 278
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 278
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 278
  if (tmp___1 == 0) {
#line 278
    goto ldv_48882;
  } else {

  }
#line 278
  schedule();
#line 278
  goto ldv_48883;
  ldv_48882: 
#line 278
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_48880: ;
#line 281
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 283
  b = mdev->bitmap;
#line 284
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13511.private);
#line 285
  clear_bit(31, (unsigned long volatile   *)addr);
#line 286
  __asm__  volatile   ("": : : "memory");
#line 287
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 288
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 295
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 296
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 297
  return;
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 301
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 302
  return;
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 306
  addr = (unsigned long const volatile   *)(& page->ldv_13511.private);
#line 307
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 312
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 313
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 317
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 318
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 322
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13511.private));
#line 323
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 327
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13511.private));
#line 327
  return (tmp);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 334
  page_nr = (unsigned int )(long_nr >> 9);
#line 335
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 335
  if (tmp != 0L) {
#line 335
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (335), "i" (12UL));
    ldv_48917: ;
#line 335
    goto ldv_48917;
  } else {

  }
#line 336
  return (page_nr);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 342
  page_nr = (unsigned int )(bitnr >> 15);
#line 343
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 343
  if (tmp != 0L) {
#line 343
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (343), "i" (12UL));
    ldv_48923: ;
#line 343
    goto ldv_48923;
  } else {

  }
#line 344
  return (page_nr);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 349
  page = *(b->bm_pages + (unsigned long )idx);
#line 350
  tmp = kmap_atomic(page);
#line 350
  return ((unsigned long *)tmp);
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 355
  tmp = __bm_map_pidx(b, idx);
#line 355
  return (tmp);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 360
  __kunmap_atomic((void *)p_addr);
#line 361
  return;
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 365
  return;
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 391
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 392
    return;
  } else {

  }
#line 394
  i = 0UL;
#line 394
  goto ldv_48946;
  ldv_48945: ;
#line 395
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 396
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 399
    goto ldv_48944;
  } else {

  }
#line 401
  __free_pages(*(pages + i), 0U);
#line 402
  *(pages + i) = 0;
  ldv_48944: 
#line 394
  i = i + 1UL;
  ldv_48946: ;
#line 394
  if (i < number) {
#line 395
    goto ldv_48945;
  } else {

  }

#line 399
  return;
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 408
  if (v != 0) {
#line 409
    vfree((void const   *)ptr);
  } else {
#line 411
    kfree((void const   *)ptr);
  }
#line 412
  return;
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 419
  old_pages = b->bm_pages;
#line 421
  vmalloced = 0U;
#line 422
  have = b->bm_number_of_pages;
#line 424
  tmp = __builtin_expect(have == 0UL, 0L);
#line 424
  if (tmp != 0L) {
#line 424
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 424
    if (tmp___0 != 0L) {
#line 424
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (424), "i" (12UL));
      ldv_48963: ;
#line 424
      goto ldv_48963;
    } else {

    }
  } else {

  }
#line 425
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 425
  if (tmp___1 != 0L) {
#line 425
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 425
    if (tmp___2 != 0L) {
#line 425
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (425), "i" (12UL));
      ldv_48964: ;
#line 425
      goto ldv_48964;
    } else {

    }
  } else {

  }
#line 427
  if (have == want) {
#line 428
    return (old_pages);
  } else {

  }
#line 435
  bytes = (unsigned int )want * 8U;
#line 436
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 436
  new_pages = (struct page **)tmp___3;
#line 437
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 438
    tmp___4 = vzalloc((unsigned long )bytes);
#line 438
    new_pages = (struct page **)tmp___4;
#line 439
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 440
      return (0);
    } else {

    }
#line 441
    vmalloced = 1U;
  } else {

  }
#line 444
  if (want >= have) {
#line 445
    i = 0U;
#line 445
    goto ldv_48966;
    ldv_48965: 
#line 446
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 445
    i = i + 1U;
    ldv_48966: ;
#line 445
    if ((unsigned long )i < have) {
#line 446
      goto ldv_48965;
    } else {

    }

#line 447
    goto ldv_48969;
    ldv_48968: 
#line 448
    page = alloc_pages(131282U, 0U);
#line 449
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 450
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 451
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 452
      return (0);
    } else {

    }
#line 456
    bm_store_page_idx(page, (unsigned long )i);
#line 457
    *(new_pages + (unsigned long )i) = page;
#line 447
    i = i + 1U;
    ldv_48969: ;
#line 447
    if ((unsigned long )i < want) {
#line 448
      goto ldv_48968;
    } else {

    }

  } else {
#line 460
    i = 0U;
#line 460
    goto ldv_48972;
    ldv_48971: 
#line 461
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 460
    i = i + 1U;
    ldv_48972: ;
#line 460
    if ((unsigned long )i < want) {
#line 461
      goto ldv_48971;
    } else {

    }

  }
#line 467
  if (vmalloced != 0U) {
#line 468
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 470
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 472
  return (new_pages);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 481
  b = mdev->bitmap;
#line 482
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 482
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 482
  if (tmp != 0L) {
#line 482
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       482);
  } else {

  }
#line 482
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 483
  tmp___0 = kzalloc(400UL, 208U);
#line 483
  b = (struct drbd_bitmap *)tmp___0;
#line 484
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 485
    return (-12);
  } else {

  }
#line 486
  spinlock_check(& b->bm_lock);
#line 486
  __raw_spin_lock_init(& b->bm_lock.ldv_5989.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 487
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 488
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 490
  mdev->bitmap = b;
#line 492
  return (0);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 497
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 497
  if (_b != 0) {
#line 497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            497);
  } else {

  }
#line 497
  if (_b != 0) {
#line 497
    return (0UL);
  } else {

  }
#line 498
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 505
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 505
  if (_b != 0) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            505);
  } else {

  }
#line 505
  if (_b != 0) {
#line 505
    return;
  } else {

  }
#line 506
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 507
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 508
  kfree((void const   *)mdev->bitmap);
#line 509
  mdev->bitmap = 0;
#line 510
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 525
  cleared = 0;
#line 528
  tmp = (int )b->bm_bits & 32767;
#line 530
  mask = (1UL << (tmp & 63)) - 1UL;
#line 533
  mask = mask;
#line 535
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 536
  bm = p_addr + (unsigned long )(tmp / 64);
#line 537
  if (mask != 0UL) {
#line 542
    tmp___0 = hweight_long(*bm & ~ mask);
#line 542
    cleared = (int )tmp___0;
#line 543
    *bm = *bm & mask;
#line 544
    bm = bm + 1;
  } else {

  }
#line 553
  bm_unmap(p_addr);
#line 554
  return (cleared);
}
}
#line 557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 564
  tmp = (int )b->bm_bits & 32767;
#line 566
  mask = (1UL << (tmp & 63)) - 1UL;
#line 569
  mask = mask;
#line 571
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 572
  bm = p_addr + (unsigned long )(tmp / 64);
#line 573
  if (mask != 0UL) {
#line 578
    *bm = *bm | ~ mask;
#line 579
    bm = bm + 1;
  } else {

  }
#line 587
  bm_unmap(p_addr);
#line 588
  return;
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 595
  bits = 0UL;
#line 596
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 600
  idx = 0;
#line 600
  goto ldv_49024;
  ldv_49023: 
#line 601
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 602
  i = 0;
#line 602
  goto ldv_49020;
  ldv_49019: 
#line 603
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 603
  bits = tmp + bits;
#line 602
  i = i + 1;
  ldv_49020: ;
#line 602
  if ((unsigned int )i <= 511U) {
#line 603
    goto ldv_49019;
  } else {

  }
#line 604
  __bm_unmap(p_addr);
#line 605
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                605, 0);
#line 605
  _cond_resched();
#line 600
  idx = idx + 1;
  ldv_49024: ;
#line 600
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 601
    goto ldv_49023;
  } else {

  }
#line 608
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 609
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 610
  i = 0;
#line 610
  goto ldv_49027;
  ldv_49026: 
#line 611
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 611
  bits = tmp___0 + bits;
#line 610
  i = i + 1;
  ldv_49027: ;
#line 610
  if (i < last_word) {
#line 611
    goto ldv_49026;
  } else {

  }
#line 612
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 613
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 613
  bits = tmp___1 + bits;
#line 617
  __bm_unmap(p_addr);
#line 618
  return (bits);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 628
  end = offset + len;
#line 630
  if (b->bm_words < end) {
#line 631
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 632
    return;
  } else {

  }
#line 635
  goto ldv_49044;
  ldv_49043: 
#line 636
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 636
  __min2 = end;
#line 636
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 637
  idx = bm_word_to_page_idx(b, offset);
#line 638
  p_addr = bm_map_pidx(b, idx);
#line 639
  bm = p_addr + (offset & 511UL);
#line 640
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 641
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 644
    memset((void *)bm, c, do_now * 8UL);
  }
#line 645
  bm_unmap(p_addr);
#line 646
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 647
  offset = offset + do_now;
  ldv_49044: ;
#line 635
  if (offset < end) {
#line 636
    goto ldv_49043;
  } else {

  }

#line 640
  return;
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 661
  b = mdev->bitmap;
#line 664
  opages = 0;
#line 665
  err = 0;
#line 668
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 668
  if (_b != 0) {
#line 668
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            668);
  } else {

  }
#line 668
  if (_b != 0) {
#line 668
    return (-12);
  } else {

  }
#line 670
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 672
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 675
  if (b->bm_dev_capacity == capacity) {
#line 676
    goto out;
  } else {

  }
#line 678
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 680
  if (capacity == 0UL) {
#line 681
    spin_lock_irq(& b->bm_lock);
#line 682
    opages = b->bm_pages;
#line 683
    onpages = b->bm_number_of_pages;
#line 684
    owords = b->bm_words;
#line 685
    b->bm_pages = 0;
#line 686
    tmp___2 = 0UL;
#line 686
    b->bm_dev_capacity = tmp___2;
#line 686
    tmp___1 = tmp___2;
#line 686
    b->bm_words = tmp___1;
#line 686
    tmp___0 = tmp___1;
#line 686
    b->bm_bits = tmp___0;
#line 686
    tmp = tmp___0;
#line 686
    b->bm_set = tmp;
#line 686
    b->bm_number_of_pages = tmp;
#line 691
    spin_unlock_irq(& b->bm_lock);
#line 692
    bm_free_pages(opages, onpages);
#line 693
    bm_vk_free((void *)opages, opages_vmalloced);
#line 694
    goto out;
  } else {

  }
#line 696
  bits = (capacity + 7UL) >> 3;
#line 703
  words = (bits + 63UL) >> 6;
#line 705
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 705
  if (tmp___3 != 0) {
#line 706
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 707
    put_ldev(mdev);
#line 708
    if ((unsigned long long )bits > bits_on_disk) {
#line 709
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 710
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 711
      err = -28;
#line 712
      goto out;
    } else {

    }
  } else {

  }
#line 716
  want = (words * 8UL + 4095UL) >> 12;
#line 717
  have = b->bm_number_of_pages;
#line 718
  if (want == have) {
#line 719
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 719
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              719);
    } else {

    }
#line 720
    npages = b->bm_pages;
  } else {
#line 722
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 722
    if (tmp___4 != 0) {
#line 723
      npages = 0;
    } else {
#line 725
      npages = bm_realloc_pages(b, want);
    }
  }
#line 728
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 729
    err = -12;
#line 730
    goto out;
  } else {

  }
#line 733
  spin_lock_irq(& b->bm_lock);
#line 734
  opages = b->bm_pages;
#line 735
  owords = b->bm_words;
#line 736
  obits = b->bm_bits;
#line 738
  growing = bits > obits;
#line 739
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 740
    bm_set_surplus(b);
  } else {

  }
#line 742
  b->bm_pages = npages;
#line 743
  b->bm_number_of_pages = want;
#line 744
  b->bm_bits = bits;
#line 745
  b->bm_words = words;
#line 746
  b->bm_dev_capacity = capacity;
#line 748
  if (growing != 0) {
#line 749
    if (set_new_bits != 0) {
#line 750
      bm_memset(b, owords, 255, words - owords);
#line 751
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 753
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 757
  if (want < have) {
#line 759
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 762
  bm_clear_surplus(b);
#line 764
  spin_unlock_irq(& b->bm_lock);
#line 765
  if ((unsigned long )opages != (unsigned long )npages) {
#line 766
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 767
  if (growing == 0) {
#line 768
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 769
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 772
  drbd_bm_unlock(mdev);
#line 773
  return (err);
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 786
  b = mdev->bitmap;
#line 790
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 790
  if (_b != 0) {
#line 790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            790);
  } else {

  }
#line 790
  if (_b != 0) {
#line 790
    return (0UL);
  } else {

  }
#line 791
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 791
  if (_b___0 != 0) {
#line 791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            791);
  } else {

  }
#line 791
  if (_b___0 != 0) {
#line 791
    return (0UL);
  } else {

  }
#line 793
  tmp = spinlock_check(& b->bm_lock);
#line 793
  flags = _raw_spin_lock_irqsave(tmp);
#line 794
  s = b->bm_set;
#line 795
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 797
  return (s);
}
}
#line 800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 804
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 804
  if (tmp == 0) {
#line 805
    return (0UL);
  } else {

  }
#line 806
  s = _drbd_bm_total_weight(mdev);
#line 807
  put_ldev(mdev);
#line 808
  return (s);
}
}
#line 811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 813
  b = mdev->bitmap;
#line 814
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 814
  if (_b != 0) {
#line 814
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            814);
  } else {

  }
#line 814
  if (_b != 0) {
#line 814
    return (0UL);
  } else {

  }
#line 815
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 815
  if (_b___0 != 0) {
#line 815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            815);
  } else {

  }
#line 815
  if (_b___0 != 0) {
#line 815
    return (0UL);
  } else {

  }
#line 817
  return (b->bm_words);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 822
  b = mdev->bitmap;
#line 823
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 823
  if (_b != 0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            823);
  } else {

  }
#line 823
  if (_b != 0) {
#line 823
    return (0UL);
  } else {

  }
#line 825
  return (b->bm_bits);
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 836
  b = mdev->bitmap;
#line 842
  end = offset + number;
#line 844
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 844
  if (_b != 0) {
#line 844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            844);
  } else {

  }
#line 844
  if (_b != 0) {
#line 844
    return;
  } else {

  }
#line 845
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 845
  if (_b___0 != 0) {
#line 845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            845);
  } else {

  }
#line 845
  if (_b___0 != 0) {
#line 845
    return;
  } else {

  }
#line 846
  if (number == 0UL) {
#line 847
    return;
  } else {

  }
#line 848
  __ret_warn_on = b->bm_words <= offset;
#line 848
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 848
  if (tmp != 0L) {
#line 848
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       848);
  } else {

  }
#line 848
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 849
  __ret_warn_on___0 = b->bm_words < end;
#line 849
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 849
  if (tmp___0 != 0L) {
#line 849
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       849);
  } else {

  }
#line 849
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 851
  spin_lock_irq(& b->bm_lock);
#line 852
  goto ldv_49133;
  ldv_49132: 
#line 853
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 853
  __min2 = end;
#line 853
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 854
  idx = bm_word_to_page_idx(b, offset);
#line 855
  p_addr = bm_map_pidx(b, idx);
#line 856
  bm = p_addr + (offset & 511UL);
#line 857
  offset = offset + do_now;
#line 858
  goto ldv_49130;
  ldv_49129: 
#line 859
  bits = hweight_long(*bm);
#line 860
  tmp___1 = buffer;
#line 860
  buffer = buffer + 1;
#line 860
  word = *bm | *tmp___1;
#line 861
  tmp___2 = bm;
#line 861
  bm = bm + 1;
#line 861
  *tmp___2 = word;
#line 862
  tmp___3 = hweight_long(word);
#line 862
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_49130: 
#line 858
  tmp___4 = do_now;
#line 858
  do_now = do_now - (size_t )1;
#line 858
  if (tmp___4 != 0UL) {
#line 859
    goto ldv_49129;
  } else {

  }
#line 864
  bm_unmap(p_addr);
#line 865
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_49133: ;
#line 852
  if (offset < end) {
#line 853
    goto ldv_49132;
  } else {

  }

#line 872
  if (b->bm_words == end) {
#line 873
    tmp___5 = bm_clear_surplus(b);
#line 873
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 874
  spin_unlock_irq(& b->bm_lock);
#line 875
  return;
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 883
  b = mdev->bitmap;
#line 887
  end = offset + number;
#line 889
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 889
  if (_b != 0) {
#line 889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            889);
  } else {

  }
#line 889
  if (_b != 0) {
#line 889
    return;
  } else {

  }
#line 890
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 890
  if (_b___0 != 0) {
#line 890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            890);
  } else {

  }
#line 890
  if (_b___0 != 0) {
#line 890
    return;
  } else {

  }
#line 892
  spin_lock_irq(& b->bm_lock);
#line 893
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 896
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 901
    goto ldv_49158;
    ldv_49157: 
#line 902
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 902
    __min2 = end;
#line 902
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 903
    tmp = bm_word_to_page_idx(b, offset);
#line 903
    p_addr = bm_map_pidx(b, tmp);
#line 904
    bm = p_addr + (offset & 511UL);
#line 905
    offset = offset + do_now;
#line 906
    goto ldv_49155;
    ldv_49154: 
#line 907
    tmp___0 = buffer;
#line 907
    buffer = buffer + 1;
#line 907
    tmp___1 = bm;
#line 907
    bm = bm + 1;
#line 907
    *tmp___0 = *tmp___1;
    ldv_49155: 
#line 906
    tmp___2 = do_now;
#line 906
    do_now = do_now - (size_t )1;
#line 906
    if (tmp___2 != 0UL) {
#line 907
      goto ldv_49154;
    } else {

    }
#line 908
    bm_unmap(p_addr);
    ldv_49158: ;
#line 901
    if (offset < end) {
#line 902
      goto ldv_49157;
    } else {

    }

  }
#line 911
  spin_unlock_irq(& b->bm_lock);
#line 912
  return;
}
}
#line 915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 917
  b = mdev->bitmap;
#line 918
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 918
  if (_b != 0) {
#line 918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            918);
  } else {

  }
#line 918
  if (_b != 0) {
#line 918
    return;
  } else {

  }
#line 919
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 919
  if (_b___0 != 0) {
#line 919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            919);
  } else {

  }
#line 919
  if (_b___0 != 0) {
#line 919
    return;
  } else {

  }
#line 921
  spin_lock_irq(& b->bm_lock);
#line 922
  bm_memset(b, 0UL, 255, b->bm_words);
#line 923
  bm_clear_surplus(b);
#line 924
  b->bm_set = b->bm_bits;
#line 925
  spin_unlock_irq(& b->bm_lock);
#line 926
  return;
}
}
#line 929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 931
  b = mdev->bitmap;
#line 932
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 932
  if (_b != 0) {
#line 932
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            932);
  } else {

  }
#line 932
  if (_b != 0) {
#line 932
    return;
  } else {

  }
#line 933
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 933
  if (_b___0 != 0) {
#line 933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            933);
  } else {

  }
#line 933
  if (_b___0 != 0) {
#line 933
    return;
  } else {

  }
#line 935
  spin_lock_irq(& b->bm_lock);
#line 936
  bm_memset(b, 0UL, 0, b->bm_words);
#line 937
  b->bm_set = 0UL;
#line 938
  spin_unlock_irq(& b->bm_lock);
#line 939
  return;
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 953
  __mptr = (struct kref  const  *)kref;
#line 953
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 955
  put_ldev(ctx->mdev);
#line 956
  kfree((void const   *)ctx);
#line 957
  return;
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 962
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 963
  mdev = ctx->mdev;
#line 964
  b = mdev->bitmap;
#line 965
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 965
  idx = (unsigned int )tmp;
#line 966
  uptodate = (int )bio->bi_flags & 1;
#line 973
  if (error == 0 && uptodate == 0) {
#line 974
    error = -5;
  } else {

  }
#line 976
  if ((ctx->flags & 1U) == 0U) {
#line 976
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 976
    if (tmp___0 == 0) {
#line 978
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 980
  if (error != 0) {
#line 983
    ctx->error = error;
#line 984
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 987
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 987
    if (tmp___1 != 0) {
#line 988
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 991
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 992
    descriptor.modname = "drbd";
#line 992
    descriptor.function = "bm_async_io_complete";
#line 992
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 992
    descriptor.format = "bitmap page idx %u completed\n";
#line 992
    descriptor.lineno = 992U;
#line 992
    descriptor.flags = 0U;
#line 992
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 992
    if (tmp___2 != 0L) {
#line 992
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 995
  bm_page_unlock_io(mdev, (int )idx);
#line 997
  if ((int )ctx->flags & 1) {
#line 998
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 1000
  bio_put(bio);
#line 1002
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 1002
  if (tmp___3 != 0) {
#line 1003
    ctx->done = 1U;
#line 1004
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1005
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 1007
  return;
}
}
#line 1009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 1011
  tmp = bio_alloc_drbd(16U);
#line 1011
  bio = tmp;
#line 1012
  mdev = ctx->mdev;
#line 1013
  b = mdev->bitmap;
#line 1017
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1019
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1024
  __min1 = 4096U;
#line 1024
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1024
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1024
  len = __min1 < __min2 ? __min1 : __min2;
#line 1028
  bm_page_lock_io(mdev, page_nr);
#line 1031
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1033
  if ((int )ctx->flags & 1) {
#line 1035
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 1035
    page = (struct page *)tmp___1;
#line 1036
    dest = kmap_atomic(page);
#line 1037
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1038
    __len = 4096UL;
#line 1038
    if (__len > 63UL) {
#line 1038
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1038
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1039
    __kunmap_atomic(src);
#line 1040
    __kunmap_atomic(dest);
#line 1041
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1043
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1045
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1046
  bio->bi_sector = on_disk_sector;
#line 1049
  bio_add_page(bio, page, len, 0U);
#line 1050
  bio->bi_private = (void *)ctx;
#line 1051
  bio->bi_end_io = & bm_async_io_complete;
#line 1053
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1053
  if (tmp___2 != 0) {
#line 1054
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1055
    bio_endio(bio, -5);
  } else {
#line 1057
    submit_bio(rw, bio);
#line 1060
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1062
  return;
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char *tmp___8 ;

  {
#line 1070
  b = mdev->bitmap;
#line 1071
  count = 0;
#line 1074
  err = 0;
#line 1085
  tmp = kmalloc(32UL, 16U);
#line 1085
  ctx = (struct bm_aio_ctx *)tmp;
#line 1086
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1087
    return (-12);
  } else {

  }
#line 1089
  __constr_expr_0.mdev = mdev;
#line 1089
  __constr_expr_0.in_flight.counter = 1;
#line 1089
  __constr_expr_0.done = 0U;
#line 1089
  __constr_expr_0.flags = flags;
#line 1089
  __constr_expr_0.error = 0;
#line 1089
  __constr_expr_0.kref.refcount.counter = 2;
#line 1089
  *ctx = __constr_expr_0;
#line 1098
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1098
  if (tmp___0 == 0) {
#line 1099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1100
    kfree((void const   *)ctx);
#line 1101
    return (-19);
  } else {

  }
#line 1104
  if (ctx->flags == 0U) {
#line 1105
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1105
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1105
    if (tmp___1 != 0L) {
#line 1105
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1105);
    } else {

    }
#line 1105
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1107
  num_pages = (int )b->bm_number_of_pages;
#line 1109
  now = jiffies;
#line 1112
  i = 0;
#line 1112
  goto ldv_49245;
  ldv_49244: ;
#line 1114
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1115
    goto ldv_49238;
  } else {

  }
#line 1116
  if (rw & 1) {
#line 1117
    tmp___3 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1117
    if (tmp___3 != 0) {
#line 1118
      descriptor.modname = "drbd";
#line 1118
      descriptor.function = "bm_rw";
#line 1118
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1118
      descriptor.format = "skipped bm write for idx %u\n";
#line 1118
      descriptor.lineno = 1118U;
#line 1118
      descriptor.flags = 0U;
#line 1118
      tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1118
      if (tmp___2 != 0L) {
#line 1118
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                          "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1119
      goto ldv_49241;
    } else {

    }
#line 1123
    if (lazy_writeout_upper_idx != 0U) {
#line 1123
      tmp___5 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1123
      if (tmp___5 == 0) {
#line 1125
        descriptor___0.modname = "drbd";
#line 1125
        descriptor___0.function = "bm_rw";
#line 1125
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1125
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1125
        descriptor___0.lineno = 1125U;
#line 1125
        descriptor___0.flags = 0U;
#line 1125
        tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1125
        if (tmp___4 != 0L) {
#line 1125
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1126
        goto ldv_49241;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1129
  atomic_inc(& ctx->in_flight);
#line 1130
  bm_page_io_async(ctx, i, rw);
#line 1131
  count = count + 1;
#line 1132
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1132, 0);
#line 1132
  _cond_resched();
  ldv_49241: 
#line 1112
  i = i + 1;
  ldv_49245: ;
#line 1112
  if (i < num_pages) {
#line 1113
    goto ldv_49244;
  } else {

  }
  ldv_49238: 
#line 1143
  tmp___6 = atomic_dec_and_test(& ctx->in_flight);
#line 1143
  if (tmp___6 == 0) {
#line 1144
    wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1146
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1148
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1152
  if (ctx->error != 0) {
#line 1153
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1154
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 1155
    err = -5;
  } else {

  }
#line 1158
  tmp___7 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1158
  if (tmp___7 != 0) {
#line 1159
    err = -5;
  } else {

  }
#line 1161
  now = jiffies;
#line 1162
  if (rw == 1) {
#line 1163
    drbd_md_flush(mdev);
  } else {
#line 1165
    b->bm_set = bm_count_bits(b);
#line 1166
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1169
  now = b->bm_set;
#line 1171
  tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1171
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___8, now);
#line 1174
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1175
  return (err);
}
}
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1184
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1184
  return (tmp);
}
}
#line 1193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1195
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1195
  return (tmp);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1205
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1205
  return (tmp);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1221
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1221
  return (tmp);
}
}
#line 1237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1242
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1242
  if (tmp___0 != 0) {
#line 1243
    descriptor.modname = "drbd";
#line 1243
    descriptor.function = "drbd_bm_write_page";
#line 1243
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1243
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1243
    descriptor.lineno = 1243U;
#line 1243
    descriptor.flags = 0U;
#line 1243
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1243
    if (tmp != 0L) {
#line 1243
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1244
    return (0);
  } else {

  }
#line 1247
  tmp___1 = kmalloc(32UL, 16U);
#line 1247
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1248
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1249
    return (-12);
  } else {

  }
#line 1251
  __constr_expr_0.mdev = mdev;
#line 1251
  __constr_expr_0.in_flight.counter = 1;
#line 1251
  __constr_expr_0.done = 0U;
#line 1251
  __constr_expr_0.flags = 1U;
#line 1251
  __constr_expr_0.error = 0;
#line 1251
  __constr_expr_0.kref.refcount.counter = 2;
#line 1251
  *ctx = __constr_expr_0;
#line 1260
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1260
  if (tmp___2 == 0) {
#line 1261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1262
    kfree((void const   *)ctx);
#line 1263
    return (-19);
  } else {

  }
#line 1266
  bm_page_io_async(ctx, (int )idx, 529);
#line 1267
  wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
#line 1269
  if (ctx->error != 0) {
#line 1270
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_page");
  } else {

  }
#line 1274
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1275
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1275
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1276
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1277
  return (err);
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1291
  b = mdev->bitmap;
#line 1297
  if (b->bm_bits < bm_fo) {
#line 1298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1299
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1301
    goto ldv_49280;
    ldv_49279: 
#line 1303
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1304
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1304
    p_addr = __bm_map_pidx(b, tmp);
#line 1306
    if ((int )find_zero_bit != 0) {
#line 1307
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1307
      i = (unsigned int )tmp___0;
    } else {
#line 1310
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1310
      i = (unsigned int )tmp___1;
    }
#line 1313
    __bm_unmap(p_addr);
#line 1314
    if (i <= 32767U) {
#line 1315
      bm_fo = (unsigned long )i + bit_offset;
#line 1316
      if (b->bm_bits <= bm_fo) {
#line 1317
        goto ldv_49277;
      } else {

      }
#line 1318
      goto found;
    } else {

    }
#line 1320
    bm_fo = bit_offset + 32768UL;
    ldv_49280: ;
#line 1301
    if (b->bm_bits > bm_fo) {
#line 1302
      goto ldv_49279;
    } else {

    }
    ldv_49277: 
#line 1322
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1325
  return (bm_fo);
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1331
  b = mdev->bitmap;
#line 1332
  i = 0xffffffffffffffffUL;
#line 1334
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1334
  if (_b != 0) {
#line 1334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1334);
  } else {

  }
#line 1334
  if (_b != 0) {
#line 1334
    return (i);
  } else {

  }
#line 1335
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1335
  if (_b___0 != 0) {
#line 1335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1335);
  } else {

  }
#line 1335
  if (_b___0 != 0) {
#line 1335
    return (i);
  } else {

  }
#line 1337
  spin_lock_irq(& b->bm_lock);
#line 1338
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1339
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1341
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1343
  spin_unlock_irq(& b->bm_lock);
#line 1344
  return (i);
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1349
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1349
  return (tmp);
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1365
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1365
  return (tmp);
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1371
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1371
  return (tmp);
}
}
#line 1380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1383
  b = mdev->bitmap;
#line 1384
  p_addr = 0;
#line 1386
  last_page_nr = 4294967295U;
#line 1387
  c = 0;
#line 1388
  changed_total = 0;
#line 1390
  if (b->bm_bits <= e) {
#line 1391
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1393
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1395
  bitnr = s;
#line 1395
  goto ldv_49319;
  ldv_49318: 
#line 1396
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1396
  page_nr = tmp;
#line 1397
  if (page_nr != last_page_nr) {
#line 1398
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1399
      __bm_unmap(p_addr);
    } else {

    }
#line 1400
    if (c < 0) {
#line 1401
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1402
    if (c > 0) {
#line 1403
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1404
    changed_total = changed_total + c;
#line 1405
    c = 0;
#line 1406
    p_addr = __bm_map_pidx(b, page_nr);
#line 1407
    last_page_nr = page_nr;
  } else {

  }
#line 1409
  if (val != 0) {
#line 1410
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1410
    c = (tmp___0 == 0) + c;
  } else {
#line 1412
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1412
    c = c - (tmp___1 != 0);
  }
#line 1395
  bitnr = bitnr + 1UL;
  ldv_49319: ;
#line 1395
  if (bitnr <= e) {
#line 1396
    goto ldv_49318;
  } else {

  }

#line 1414
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1415
    __bm_unmap(p_addr);
  } else {

  }
#line 1416
  if (c < 0) {
#line 1417
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1418
  if (c > 0) {
#line 1419
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1420
  changed_total = changed_total + c;
#line 1421
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1422
  return (changed_total);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1433
  b = mdev->bitmap;
#line 1434
  c = 0;
#line 1436
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1436
  if (_b != 0) {
#line 1436
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1436);
  } else {

  }
#line 1436
  if (_b != 0) {
#line 1436
    return (1);
  } else {

  }
#line 1437
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1437
  if (_b___0 != 0) {
#line 1437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1437);
  } else {

  }
#line 1437
  if (_b___0 != 0) {
#line 1437
    return (0);
  } else {

  }
#line 1439
  tmp = spinlock_check(& b->bm_lock);
#line 1439
  flags = _raw_spin_lock_irqsave(tmp);
#line 1440
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1441
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1443
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1445
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1446
  return (c);
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1452
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1452
  return (tmp);
}
}
#line 1456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1458
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1458
  return (- tmp);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1468
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1468
  paddr = (unsigned long *)tmp;
#line 1469
  i = first_word;
#line 1469
  goto ldv_49358;
  ldv_49357: 
#line 1470
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1470
  bits = (int )tmp___0;
#line 1471
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1472
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1469
  i = i + 1;
  ldv_49358: ;
#line 1469
  if (i < last_word) {
#line 1470
    goto ldv_49357;
  } else {

  }
#line 1474
  __kunmap_atomic((void *)paddr);
#line 1475
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1492
  b = mdev->bitmap;
#line 1493
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1494
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1501
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1503
    spin_lock_irq(& b->bm_lock);
#line 1504
    __bm_change_bits_to(mdev, s, e, 1);
#line 1505
    spin_unlock_irq(& b->bm_lock);
#line 1506
    return;
  } else {

  }
#line 1511
  spin_lock_irq(& b->bm_lock);
#line 1514
  if (sl != 0UL) {
#line 1515
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1517
  first_page = (int )(sl >> 15);
#line 1518
  last_page = (int )(el >> 15);
#line 1522
  first_word = (int )(sl >> 6) & 511;
#line 1523
  last_word = 512;
#line 1526
  page_nr = first_page;
#line 1526
  goto ldv_49375;
  ldv_49374: 
#line 1527
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1528
  spin_unlock_irq(& b->bm_lock);
#line 1529
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1529, 0);
#line 1529
  _cond_resched();
#line 1530
  first_word = 0;
#line 1531
  spin_lock_irq(& b->bm_lock);
#line 1526
  page_nr = page_nr + 1;
  ldv_49375: ;
#line 1526
  if (page_nr < last_page) {
#line 1527
    goto ldv_49374;
  } else {

  }
#line 1534
  last_word = (int )(el >> 6) & 511;
#line 1542
  if (last_word != 0) {
#line 1543
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1550
  if (el <= (unsigned long )e) {
#line 1551
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1552
  spin_unlock_irq(& b->bm_lock);
#line 1553
  return;
}
}
#line 1562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1565
  b = mdev->bitmap;
#line 1569
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1569
  if (_b != 0) {
#line 1569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1569);
  } else {

  }
#line 1569
  if (_b != 0) {
#line 1569
    return (0);
  } else {

  }
#line 1570
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1570
  if (_b___0 != 0) {
#line 1570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1570);
  } else {

  }
#line 1570
  if (_b___0 != 0) {
#line 1570
    return (0);
  } else {

  }
#line 1572
  tmp = spinlock_check(& b->bm_lock);
#line 1572
  flags = _raw_spin_lock_irqsave(tmp);
#line 1573
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1574
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1575
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1576
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1576
    p_addr = bm_map_pidx(b, tmp___0);
#line 1577
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1577
    i = tmp___1 != 0;
#line 1578
    bm_unmap(p_addr);
  } else
#line 1579
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1580
    i = -1;
  } else {
#line 1582
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1583
    i = 0;
  }
#line 1586
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1587
  return (i);
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1594
  b = mdev->bitmap;
#line 1595
  p_addr = 0;
#line 1597
  page_nr = 4294967295U;
#line 1598
  c = 0;
#line 1604
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1604
  if (_b != 0) {
#line 1604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1604);
  } else {

  }
#line 1604
  if (_b != 0) {
#line 1604
    return (1);
  } else {

  }
#line 1605
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1605
  if (_b___0 != 0) {
#line 1605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1605);
  } else {

  }
#line 1605
  if (_b___0 != 0) {
#line 1605
    return (1);
  } else {

  }
#line 1607
  tmp = spinlock_check(& b->bm_lock);
#line 1607
  flags = _raw_spin_lock_irqsave(tmp);
#line 1608
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1609
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1610
  bitnr = s;
#line 1610
  goto ldv_49416;
  ldv_49415: 
#line 1611
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1611
  idx = tmp___0;
#line 1612
  if (page_nr != idx) {
#line 1613
    page_nr = idx;
#line 1614
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1615
      bm_unmap(p_addr);
    } else {

    }
#line 1616
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1618
  _b___1 = b->bm_bits <= bitnr;
#line 1618
  if (_b___1 != 0) {
#line 1618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1618);
  } else {

  }
#line 1618
  if (_b___1 != 0) {
#line 1619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1621
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1621
    c = (tmp___1 != 0) + c;
  }
#line 1610
  bitnr = bitnr + 1UL;
  ldv_49416: ;
#line 1610
  if (bitnr <= (unsigned long )e) {
#line 1611
    goto ldv_49415;
  } else {

  }

#line 1624
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1625
    bm_unmap(p_addr);
  } else {

  }
#line 1626
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1627
  return (c);
}
}
#line 1645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1647
  b = mdev->bitmap;
#line 1652
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1652
  if (_b != 0) {
#line 1652
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1652);
  } else {

  }
#line 1652
  if (_b != 0) {
#line 1652
    return (0);
  } else {

  }
#line 1653
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1653
  if (_b___0 != 0) {
#line 1653
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1653);
  } else {

  }
#line 1653
  if (_b___0 != 0) {
#line 1653
    return (0);
  } else {

  }
#line 1655
  tmp = spinlock_check(& b->bm_lock);
#line 1655
  flags = _raw_spin_lock_irqsave(tmp);
#line 1656
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1657
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1659
  s = (int )(enr << 6);
#line 1660
  _min1 = (enr + 1UL) << 6;
#line 1660
  _min2 = b->bm_words;
#line 1660
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1661
  count = 0;
#line 1662
  if ((size_t )s < b->bm_words) {
#line 1663
    n = e - s;
#line 1664
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1664
    p_addr = bm_map_pidx(b, tmp___0);
#line 1665
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1666
    goto ldv_49442;
    ldv_49441: 
#line 1667
    tmp___1 = bm;
#line 1667
    bm = bm + 1;
#line 1667
    tmp___2 = hweight_long(*tmp___1);
#line 1667
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_49442: 
#line 1666
    tmp___3 = n;
#line 1666
    n = n - 1;
#line 1666
    if (tmp___3 != 0) {
#line 1667
      goto ldv_49441;
    } else {

    }
#line 1668
    bm_unmap(p_addr);
  } else {
#line 1670
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1672
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1673
  return (count);
}
}
#line 1678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1680
  b = mdev->bitmap;
#line 1685
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1685
  if (_b != 0) {
#line 1685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1685);
  } else {

  }
#line 1685
  if (_b != 0) {
#line 1685
    return (0UL);
  } else {

  }
#line 1686
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1686
  if (_b___0 != 0) {
#line 1686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1686);
  } else {

  }
#line 1686
  if (_b___0 != 0) {
#line 1686
    return (0UL);
  } else {

  }
#line 1688
  spin_lock_irq(& b->bm_lock);
#line 1689
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1690
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1691
  weight = b->bm_set;
#line 1693
  s = al_enr * 16UL;
#line 1694
  __min1 = s + 16UL;
#line 1694
  __min2 = b->bm_words;
#line 1694
  e = __min1 < __min2 ? __min1 : __min2;
#line 1696
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1697);
  } else {

  }
#line 1698
  count = 0;
#line 1699
  if (b->bm_words > s) {
#line 1700
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1700
    i = do_now;
#line 1701
    tmp = bm_word_to_page_idx(b, s);
#line 1701
    p_addr = bm_map_pidx(b, tmp);
#line 1702
    bm = p_addr + (s & 511UL);
#line 1703
    goto ldv_49466;
    ldv_49465: 
#line 1704
    tmp___0 = hweight_long(*bm);
#line 1704
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1705
    *bm = 0xffffffffffffffffUL;
#line 1706
    bm = bm + 1;
    ldv_49466: 
#line 1703
    tmp___1 = i;
#line 1703
    i = i - 1;
#line 1703
    if (tmp___1 != 0) {
#line 1704
      goto ldv_49465;
    } else {

    }
#line 1708
    bm_unmap(p_addr);
#line 1709
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1710
    if (b->bm_words == e) {
#line 1711
      tmp___2 = bm_clear_surplus(b);
#line 1711
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1715
  weight = b->bm_set - weight;
#line 1716
  spin_unlock_irq(& b->bm_lock);
#line 1717
  return (weight);
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1725
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1727
  mutex_lock(ldv_func_arg1);
#line 1728
  return;
}
}
#line 1730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1735
  tmp = mutex_trylock(ldv_func_arg1);
#line 1735
  ldv_func_res = tmp;
#line 1737
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1737
  return (tmp___0);
#line 1739
  return (ldv_func_res);
}
}
#line 1742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1747
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1749
  mutex_unlock(ldv_func_arg1);
#line 1750
  return;
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1757
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1759
  mutex_lock(ldv_func_arg1);
#line 1760
  return;
}
}
#line 1762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1767
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1769
  mutex_unlock(ldv_func_arg1);
#line 1770
  return;
}
}
#line 1772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1777
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1779
  mutex_lock(ldv_func_arg1);
#line 1780
  return;
}
}
#line 1782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1787
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1789
  mutex_unlock(ldv_func_arg1);
#line 1790
  return;
}
}
#line 1792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1797
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1799
  mutex_unlock(ldv_func_arg1);
#line 1800
  return;
}
}
#line 1802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1807
  tmp = mutex_trylock(ldv_func_arg1);
#line 1807
  ldv_func_res = tmp;
#line 1809
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1809
  return (tmp___0);
#line 1811
  return (ldv_func_res);
}
}
#line 1814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1819
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1821
  mutex_lock(ldv_func_arg1);
#line 1822
  return;
}
}
#line 1824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1829
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1831
  mutex_unlock(ldv_func_arg1);
#line 1832
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 457 "include/linux/module.h"
extern bool try_module_get(struct module * ) ;
#line 459
extern void module_put(struct module * ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 80 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 81
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 88
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 120
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 121
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1141
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1143
  return (mdev);
}
}
#line 1536
int proc_details ;
#line 1683 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1684
struct file_operations  const  drbd_proc_fops ;
#line 2215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2226
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2227
    *bits_left = mdev->ov_left;
  } else {
#line 2229
    tmp = drbd_bm_total_weight(mdev);
#line 2229
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2232
  if (*bits_left > mdev->rs_total) {
#line 2238
    __asm__  volatile   ("": : : "memory");
#line 2239
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38794.conn);
#line 2239
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2242
    *per_mil_done = 0U;
  } else {
#line 2253
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2254
    left = *bits_left >> (int )shift;
#line 2255
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2256
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2257
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2259
  return;
}
}
#line 2345 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2347
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 93
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 97
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 108
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 108
  if (tmp___0 != 0L) {
#line 110
    seq_printf(seq, "%ld,", v / 1000000L);
#line 111
    v = v % 1000000L;
#line 112
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 113
    tmp = __builtin_expect(v > 999L, 1L);
#line 113
    if (tmp != 0L) {
#line 114
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 116
      seq_printf(seq, "%ld", v);
    }
  }
#line 117
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 130
  stalled = 0;
#line 132
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 134
  x = (int )(res / 50U);
#line 135
  y = 20 - x;
#line 136
  seq_printf(seq, "\t[");
#line 137
  i = 1;
#line 137
  goto ldv_49680;
  ldv_49679: 
#line 138
  seq_printf(seq, "=");
#line 137
  i = i + 1;
  ldv_49680: ;
#line 137
  if (i < x) {
#line 138
    goto ldv_49679;
  } else {

  }
#line 139
  seq_printf(seq, ">");
#line 140
  i = 0;
#line 140
  goto ldv_49683;
  ldv_49682: 
#line 141
  seq_printf(seq, ".");
#line 140
  i = i + 1;
  ldv_49683: ;
#line 140
  if (i < y) {
#line 141
    goto ldv_49682;
  } else {

  }
#line 142
  seq_printf(seq, "] ");
#line 144
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 145
    seq_printf(seq, "verified:");
  } else {
#line 147
    seq_printf(seq, "sync\'ed:");
  }
#line 148
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 151
  if (mdev->rs_total > 1048576UL) {
#line 152
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 156
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 173
  i = (mdev->rs_last_mark + 2) % 8;
#line 174
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 175
  if (dt > 6000UL) {
#line 176
    stalled = 1;
  } else {

  }
#line 178
  if (dt == 0UL) {
#line 179
    dt = dt + 1UL;
  } else {

  }
#line 180
  db = mdev->rs_mark_left[i] - rs_left;
#line 181
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 183
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 186
  dbdt = db / dt << 2;
#line 187
  seq_printf(seq, " speed: ");
#line 188
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 189
  seq_printf(seq, " (");
#line 191
  if (proc_details > 0) {
#line 193
    i = (mdev->rs_last_mark + 7) % 8;
#line 194
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 195
    if (dt == 0UL) {
#line 196
      dt = dt + 1UL;
    } else {

    }
#line 197
    db = mdev->rs_mark_left[i] - rs_left;
#line 198
    dbdt = db / dt << 2;
#line 199
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 200
    seq_printf(seq, " -- ");
  } else {

  }
#line 206
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 207
  if (dt == 0UL) {
#line 208
    dt = 1UL;
  } else {

  }
#line 209
  db = mdev->rs_total - rs_left;
#line 210
  dbdt = db / dt << 2;
#line 211
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 212
  seq_printf(seq, ")");
#line 214
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 216
    seq_printf(seq, " want: ");
#line 217
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 219
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 221
  if (proc_details > 0) {
#line 224
    tmp = drbd_bm_bits(mdev);
#line 224
    bm_bits = tmp;
#line 226
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 228
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 230
      bit_pos = mdev->bm_resync_fo;
    }
#line 233
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 243
  __mptr = (struct lc_element  const  *)e;
#line 243
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 245
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 248
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 253
  hole = 0;
#line 257
  write_ordering_chars[0] = 110;
#line 257
  write_ordering_chars[1] = 100;
#line 257
  write_ordering_chars[2] = 102;
#line 263
  tmp = drbd_buildtag();
#line 263
  seq_printf(seq, "version: 8.3.13 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 286
  i = 0;
#line 286
  goto ldv_49705;
  ldv_49704: 
#line 287
  mdev = minor_to_mdev((unsigned int )i);
#line 288
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 289
    hole = 1;
#line 290
    goto ldv_49703;
  } else {

  }
#line 292
  if (hole != 0) {
#line 293
    hole = 0;
#line 294
    seq_printf(seq, "\n");
  } else {

  }
#line 297
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38794.conn);
#line 299
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 302
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 304
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 304
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 304
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 304
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 304
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 304
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 304
    tmp___6 = is_susp(mdev->state);
#line 304
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.pdsk);
#line 304
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.disk);
#line 304
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_38794.peer);
#line 304
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_38794.role);
#line 304
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 335
    tmp___11 = drbd_bm_total_weight(mdev);
#line 335
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 339
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 343
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 345
  if (proc_details > 0) {
#line 345
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 345
    if (tmp___12 != 0) {
#line 346
      lc_seq_printf_stats(seq, mdev->resync);
#line 347
      lc_seq_printf_stats(seq, mdev->act_log);
#line 348
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 351
  if (proc_details > 1) {
#line 352
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 353
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_49703: 
#line 286
  i = i + 1;
  ldv_49705: ;
#line 286
  if ((unsigned int )i < minor_count) {
#line 287
    goto ldv_49704;
  } else {

  }

#line 359
  return (0);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 364
  tmp___1 = try_module_get(& __this_module);
#line 364
  if ((int )tmp___1) {
#line 365
    tmp = PDE((struct inode  const  *)inode);
#line 365
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 365
    return (tmp___0);
  } else {

  }
#line 366
  return (-19);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 371
  module_put(& __this_module);
#line 372
  tmp = single_release(inode, file);
#line 372
  return (tmp);
}
}
#line 393
void ldv_check_final_state(void) ;
#line 396
extern void ldv_check_return_value(int  ) ;
#line 402
void ldv_initialize(void) ;
#line 405
extern void ldv_handler_precall(void) ;
#line 408
extern int nondet_int(void) ;
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 448
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 438
  LDV_IN_INTERRUPT = 1;
#line 447
  ldv_initialize();
#line 451
  goto ldv_49741;
  ldv_49740: 
#line 455
  tmp = nondet_int();
#line 455
  switch (tmp) {
  case 0: ;
#line 460
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 465
    ldv_handler_precall();
#line 466
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 467
    ldv_check_return_value(res_drbd_proc_open_4);
#line 468
    if (res_drbd_proc_open_4 != 0) {
#line 469
      goto ldv_module_exit;
    } else {

    }
#line 470
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 476
  goto ldv_49737;
  case 1: ;
#line 480
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 485
    ldv_handler_precall();
#line 486
    drbd_proc_release(var_group1, var_group2);
#line 487
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 493
  goto ldv_49737;
  default: ;
#line 494
  goto ldv_49737;
  }
  ldv_49737: ;
  ldv_49741: 
#line 451
  tmp___0 = nondet_int();
#line 451
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 453
    goto ldv_49740;
  } else {

  }

  ldv_module_exit: ;
#line 503
  ldv_check_final_state();
#line 506
  return;
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 515
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 517
  mutex_lock(ldv_func_arg1);
#line 518
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 525
  tmp = mutex_trylock(ldv_func_arg1);
#line 525
  ldv_func_res = tmp;
#line 527
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 527
  return (tmp___0);
#line 529
  return (ldv_func_res);
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 537
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 539
  mutex_unlock(ldv_func_arg1);
#line 540
  return;
}
}
#line 542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 547
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 549
  mutex_lock(ldv_func_arg1);
#line 550
  return;
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 557
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 559
  mutex_unlock(ldv_func_arg1);
#line 560
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 567
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 569
  mutex_lock(ldv_func_arg1);
#line 570
  return;
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 577
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 579
  mutex_unlock(ldv_func_arg1);
#line 580
  return;
}
}
#line 582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 587
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 589
  mutex_unlock(ldv_func_arg1);
#line 590
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 323 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5537;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5537;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5537;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5537;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5537: ;
#line 216
  return (__ret);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5989.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5989.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 342 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 342
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 342
  return (tmp);
}
}
#line 356 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 358
  tmp = PageTail((struct page  const  *)page);
#line 358
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 358
  if (tmp___0 != 0L) {
#line 359
    return (page->ldv_13511.first_page);
  } else {

  }
#line 360
  return (page);
}
}
#line 378 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 380
  tmp = compound_head(page);
#line 380
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_13498.ldv_13497.ldv_13496._count));
#line 380
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19829: ;
#line 65
    goto ldv_19829;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19830: ;
#line 67
    goto ldv_19830;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19831: ;
#line 68
    goto ldv_19831;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 206
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_2008.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 897 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 916
  return ((loff_t )inode->i_size);
}
}
#line 360 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2167
extern void flush_signals(struct task_struct * ) ;
#line 2201
extern void force_sig(int  , struct task_struct * ) ;
#line 1430 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 226 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 684 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1019 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1021
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1148
  return (mdev->minor);
}
}
#line 1159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1161
  ldv_mutex_lock_44(& mdev->data.mutex);
#line 1164
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1164
  if (tmp != 0L) {
#line 1165
    ldv_mutex_unlock_45(& mdev->data.mutex);
#line 1166
    return (0);
  } else {

  }
#line 1168
  return (1);
}
}
#line 1171 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1173
  ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1174
  return;
}
}
#line 1200
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1212
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1214
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1231
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1235
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1240
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1248
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1254
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1256
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1257
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1259
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1260
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1262
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1266
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1272
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1273
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1275
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1277
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1278
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1281
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1515
wait_queue_head_t drbd_pp_wait ;
#line 1531 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1559
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1562
int drbd_worker(struct drbd_thread *thi ) ;
#line 1563
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1564
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1565
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1566
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1567
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1570
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1575
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1576
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1578 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1580
  if (mdev->ov_last_oos_size != 0UL) {
#line 1581
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1585
  mdev->ov_last_oos_size = 0UL;
#line 1586
  return;
}
}
#line 1589
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1590
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1593
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1594
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1595
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1596
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1597
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1598
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1599
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1600
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1602
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1603
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1604
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1605
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1606
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1608
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1609
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1610
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1612
void resync_timer_fn(unsigned long data ) ;
#line 1613
void start_resync_timer_fn(unsigned long data ) ;
#line 1616
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1617
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1620
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1625
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1640 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1644
  if (level == 1) {
#line 1645
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1647
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1649
  return (err);
}
}
#line 1652 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1654
  val = 1;
#line 1655
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1657
  return;
}
}
#line 1659 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1661
  val = 0;
#line 1662
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1664
  return;
}
}
#line 1689
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1690
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1691
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1693
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1694
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1695
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1696
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1699
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1700
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1704
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1783
  return ((struct page *)page->ldv_13511.private);
}
}
#line 1791 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1793
  page = e->pages;
#line 1794
  goto ldv_49397;
  ldv_49396: 
#line 1795
  tmp = page_count(page);
#line 1795
  if (tmp > 1) {
#line 1796
    return (1);
  } else {

  }
#line 1794
  page = page_chain_next(page);
  ldv_49397: ;
#line 1794
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1794
    tmp___0 = page_chain_next(page);
#line 1794
    __builtin_prefetch((void const   *)tmp___0);
#line 1794
    if (1 != 0) {
#line 1795
      goto ldv_49396;
    } else {
#line 1797
      goto ldv_49398;
    }
  } else {

  }
  ldv_49398: ;
#line 1798
  return (0);
}
}
#line 1801 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1803
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1803
  if (tmp == 0) {
#line 1803
    goto ldv_49402;
  } else {

  }
#line 1803
  tmp___0 = get_current();
#line 1803
  __wait.flags = 0U;
#line 1803
  __wait.private = (void *)tmp___0;
#line 1803
  __wait.func = & autoremove_wake_function;
#line 1803
  __wait.task_list.next = & __wait.task_list;
#line 1803
  __wait.task_list.prev = & __wait.task_list;
  ldv_49405: 
#line 1803
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1803
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1803
  if (tmp___1 == 0) {
#line 1803
    goto ldv_49404;
  } else {

  }
#line 1803
  schedule();
#line 1803
  goto ldv_49405;
  ldv_49404: 
#line 1803
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49402: ;
#line 1806
  return;
}
}
#line 1807 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1809
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1810
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1811
  return;
}
}
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1846
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1848
  if (forcedetach == 0) {
#line 1849
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1849
    if (tmp != 0) {
#line 1850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1851
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1852
      __ns.i = mdev->state.i;
#line 1852
      __ns.ldv_38794.disk = 4U;
#line 1852
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1853
    goto ldv_49430;
  } else {

  }
  case 2: ;
  case 1: 
#line 1858
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1859
  if ((int )mdev->state.ldv_38794.disk > 2) {
#line 1860
    __ns___0.i = mdev->state.i;
#line 1860
    __ns___0.ldv_38794.disk = 2U;
#line 1860
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1864
  goto ldv_49430;
  }
  ldv_49430: ;
#line 1867
  return;
}
}
#line 1925 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1928
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1928
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1928
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1928
    tmp___0 = 0UL;
  }
#line 1928
  return (tmp___0);
}
}
#line 2007 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2010
  tmp = spinlock_check(& q->q_lock);
#line 2010
  flags = _raw_spin_lock_irqsave(tmp);
#line 2011
  list_add_tail(& w->list, & q->q);
#line 2012
  up(& q->s);
#line 2014
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2015
  return;
}
}
#line 2017 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2019
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 2019
  if (tmp != 0) {
#line 2020
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2021
  return;
}
}
#line 2023 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2025
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2026
  wake_asender(mdev);
#line 2027
  return;
}
}
#line 2029 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2033
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2033
  return (tmp);
}
}
#line 2048 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2050
  _drbd_thread_stop(thi, 0, 1);
#line 2051
  return;
}
}
#line 2108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2110
  atomic_inc(& mdev->rs_pending_cnt);
#line 2111
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 273 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 276
  bio = bio_clone(bio_src, 16U);
#line 278
  req->private_bio = bio;
#line 280
  bio->bi_private = (void *)req;
#line 281
  bio->bi_end_io = & drbd_endio_pri;
#line 282
  bio->bi_next = 0;
#line 283
  return;
}
}
#line 326
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 328
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 337
  mdev = req->mdev;
#line 342
  rv = __req_mod(req, what, & m);
#line 343
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 344
    complete_master_bio(mdev, & m);
  } else {

  }
#line 346
  return (rv);
}
}
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 357
  mdev = req->mdev;
#line 361
  tmp = spinlock_check(& mdev->req_lock);
#line 361
  flags = _raw_spin_lock_irqsave(tmp);
#line 362
  rv = __req_mod(req, what, & m);
#line 363
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 365
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 366
    complete_master_bio(mdev, & m);
  } else {

  }
#line 368
  return (rv);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 97
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 130
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 131
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 131
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffff068UL;
#line 133
  md_io->error = error;
#line 146
  drbd_md_put_buffer(mdev);
#line 147
  md_io->done = 1U;
#line 148
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 149
  bio_put(bio);
#line 150
  put_ldev(mdev);
#line 151
  return;
}
}
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 158
  flags = 0UL;
#line 159
  mdev = e->mdev;
#line 161
  if (e->ldv_47571.block_id == 0ULL) {
#line 161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            161);
  } else {

  }
#line 163
  tmp = spinlock_check(& mdev->req_lock);
#line 163
  flags = _raw_spin_lock_irqsave(tmp);
#line 164
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 165
  list_del(& e->w.list);
#line 166
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 166
  if (tmp___0 != 0) {
#line 167
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 168
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 168
  if (tmp___1 != 0) {
#line 169
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 170
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 172
  drbd_queue_work(& mdev->data.work, & e->w);
#line 173
  put_ldev(mdev);
#line 174
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 180
  flags = 0UL;
#line 181
  mdev = e->mdev;
#line 187
  if (e->ldv_47571.block_id == 0ULL) {
#line 187
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            187);
  } else {

  }
#line 193
  e_sector = e->sector;
#line 194
  do_al_complete_io = (int )e->flags & 1;
#line 195
  is_syncer_req = e->ldv_47571.block_id == 0xffffffffffffffffULL;
#line 197
  tmp = spinlock_check(& mdev->req_lock);
#line 197
  flags = _raw_spin_lock_irqsave(tmp);
#line 198
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 199
  list_del(& e->w.list);
#line 200
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 207
  if (is_syncer_req != 0) {
#line 207
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 207
    do_wake = tmp___0;
  } else {
#line 207
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 207
    do_wake = tmp___1;
  }
#line 211
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 211
  if (tmp___2 != 0) {
#line 212
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 213
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 215
  if (is_syncer_req != 0) {
#line 216
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 218
  if (do_wake != 0) {
#line 219
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 221
  if (do_al_complete_io != 0) {
#line 222
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 224
  wake_asender(mdev);
#line 225
  put_ldev(mdev);
#line 226
  return;
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 233
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 234
  mdev = e->mdev;
#line 235
  uptodate = (int )bio->bi_flags & 1;
#line 236
  is_write = (int )bio->bi_rw & 1;
#line 238
  if (error != 0) {
#line 238
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 238
    if (tmp != 0) {
#line 239
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 242
  if (error == 0 && uptodate == 0) {
#line 243
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 243
    if (tmp___0 != 0) {
#line 244
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 250
    error = -5;
  } else {

  }
#line 253
  if (error != 0) {
#line 254
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 256
  bio_put(bio);
#line 257
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 257
  if (tmp___1 != 0) {
#line 258
    if (is_write != 0) {
#line 259
      drbd_endio_write_sec_final(e);
    } else {
#line 261
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 262
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 270
  req = (struct drbd_request *)bio->bi_private;
#line 271
  mdev = req->mdev;
#line 274
  uptodate = (int )bio->bi_flags & 1;
#line 276
  if (error == 0 && uptodate == 0) {
#line 277
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 282
    error = -5;
  } else {

  }
#line 286
  tmp = __builtin_expect(error != 0, 0L);
#line 286
  if (tmp != 0L) {
#line 287
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 4097UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 293
    what = completed_ok;
  }
#line 295
  bio_put(req->private_bio);
#line 296
  tmp___0 = ERR_PTR((long )error);
#line 296
  req->private_bio = (struct bio *)tmp___0;
#line 299
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 299
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 300
  __req_mod(req, what, & m);
#line 301
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 302
  put_ldev(mdev);
#line 304
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 305
    complete_master_bio(mdev, & m);
  } else {

  }
#line 306
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 310
  __mptr = (struct drbd_work  const  *)w;
#line 310
  req = (struct drbd_request *)__mptr;
#line 316
  spin_lock_irq(& mdev->req_lock);
#line 317
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 318
    _req_mod(req, read_retry_remote_canceled);
#line 319
    spin_unlock_irq(& mdev->req_lock);
#line 320
    return (1);
  } else {

  }
#line 322
  spin_unlock_irq(& mdev->req_lock);
#line 324
  tmp = w_send_read_req(mdev, w, 0);
#line 324
  return (tmp);
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 331
  page = e->pages;
#line 335
  desc.tfm = tfm;
#line 336
  desc.flags = 0U;
#line 338
  sg_init_table(& sg, 1U);
#line 339
  crypto_hash_init(& desc);
#line 341
  goto ldv_49913;
  ldv_49912: 
#line 343
  sg_set_page(& sg, page, 4096U, 0U);
#line 344
  crypto_hash_update(& desc, & sg, sg.length);
#line 345
  page = tmp;
  ldv_49913: 
#line 341
  tmp = page_chain_next(page);
#line 341
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 342
    goto ldv_49912;
  } else {

  }
#line 348
  len = e->size & 4095U;
#line 349
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 350
  crypto_hash_update(& desc, & sg, sg.length);
#line 351
  crypto_hash_final(& desc, (u8 *)digest);
#line 352
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 361
  desc.tfm = tfm;
#line 362
  desc.flags = 0U;
#line 364
  sg_init_table(& sg, 1U);
#line 365
  crypto_hash_init(& desc);
#line 367
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 367
  i = (int )bio->bi_idx;
#line 367
  goto ldv_49926;
  ldv_49925: 
#line 368
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 369
  crypto_hash_update(& desc, & sg, sg.length);
#line 367
  bvec = bvec + 1;
#line 367
  i = i + 1;
  ldv_49926: ;
#line 367
  if ((int )bio->bi_vcnt > i) {
#line 368
    goto ldv_49925;
  } else {

  }
#line 371
  crypto_hash_final(& desc, (u8 *)digest);
#line 372
  return;
}
}
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 377
  __mptr = (struct drbd_work  const  *)w;
#line 377
  e = (struct drbd_epoch_entry *)__mptr;
#line 380
  ok = 1;
#line 382
  if (e->ldv_47571.block_id != 2205466966ULL) {
#line 382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            382);
  } else {

  }
#line 384
  tmp = __builtin_expect(cancel != 0, 0L);
#line 384
  if (tmp != 0L) {
#line 385
    goto out;
  } else {

  }
#line 387
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 387
  if (tmp___0 != 0L) {
#line 388
    goto out;
  } else {

  }
#line 390
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 390
  digest_size = (int )tmp___1;
#line 391
  digest = kmalloc((size_t )digest_size, 16U);
#line 392
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 393
    sector = e->sector;
#line 394
    size = e->size;
#line 395
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 401
    drbd_free_some_ee(mdev, e, 0);
#line 402
    e = 0;
#line 403
    inc_rs_pending(mdev);
#line 404
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 407
    kfree((void const   *)digest);
  } else {
#line 409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 410
    ok = 0;
  }
  out: ;
#line 414
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 415
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 417
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 417
  if (tmp___2 != 0L) {
#line 418
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 419
  return (ok);
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 428
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 428
  if (tmp == 0) {
#line 429
    return (-5);
  } else {

  }
#line 431
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 431
  if (tmp___0 != 0) {
#line 432
    goto defer;
  } else {

  }
#line 436
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 437
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 438
    goto defer;
  } else {

  }
#line 440
  e->w.cb = & w_e_send_csum;
#line 441
  spin_lock_irq(& mdev->req_lock);
#line 442
  list_add(& e->w.list, & mdev->read_ee);
#line 443
  spin_unlock_irq(& mdev->req_lock);
#line 445
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 446
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 446
  if (tmp___1 == 0) {
#line 447
    return (0);
  } else {

  }
#line 453
  spin_lock_irq(& mdev->req_lock);
#line 454
  list_del(& e->w.list);
#line 455
  spin_unlock_irq(& mdev->req_lock);
#line 457
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 459
  put_ldev(mdev);
#line 460
  return (-11);
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 465
  switch ((int )mdev->state.ldv_38794.conn) {
  case 18: 
#line 467
  w_make_ov_request(mdev, w, cancel);
#line 468
  goto ldv_49955;
  case 17: 
#line 470
  w_make_resync_request(mdev, w, cancel);
#line 471
  goto ldv_49955;
  }
  ldv_49955: ;
#line 474
  return (1);
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 479
  mdev = (struct drbd_conf *)data;
#line 481
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 481
  if (tmp != 0) {
#line 482
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 489
  i = 0;
#line 489
  goto ldv_49967;
  ldv_49966: 
#line 490
  *(fb->values + (unsigned long )i) = value;
#line 489
  i = i + 1;
  ldv_49967: ;
#line 489
  if ((unsigned int )i < fb->size) {
#line 490
    goto ldv_49966;
  } else {

  }

#line 494
  return;
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 497
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 498
  tmp = fb->head_index;
#line 498
  fb->head_index = fb->head_index + 1U;
#line 498
  *(fb->values + (unsigned long )tmp) = value;
#line 500
  if (fb->head_index >= fb->size) {
#line 501
    fb->head_index = 0U;
  } else {

  }
#line 503
  return (ov);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 510
  i = 0;
#line 510
  goto ldv_49980;
  ldv_49979: 
#line 511
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 510
  i = i + 1;
  ldv_49980: ;
#line 510
  if ((unsigned int )i < fb->size) {
#line 511
    goto ldv_49979;
  } else {

  }

#line 515
  return;
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 525
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 525
  sect_in = (unsigned int )tmp;
#line 526
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 528
  spin_lock(& mdev->peer_seq_lock);
#line 530
  steps = (int )mdev->rs_plan_s.size;
#line 532
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 533
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 535
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 539
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 542
  cps = correction / steps;
#line 543
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 544
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 547
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 548
  spin_unlock(& mdev->peer_seq_lock);
#line 549
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 551
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 552
  if (req_sect < 0) {
#line 553
    req_sect = 0;
  } else {

  }
#line 555
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 556
  if (req_sect > max_sect) {
#line 557
    req_sect = max_sect;
  } else {

  }
#line 565
  return (req_sect);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 571
  if (mdev->rs_plan_s.size != 0U) {
#line 572
    tmp = drbd_rs_controller(mdev);
#line 572
    number = tmp >> 3;
#line 573
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 575
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 576
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 581
  return (number);
}
}
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 589
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 589
  capacity = tmp;
#line 593
  i = 0;
#line 595
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 595
  if (tmp___0 != 0L) {
#line 596
    return (1);
  } else {

  }
#line 598
  if (mdev->rs_total == 0UL) {
#line 600
    drbd_resync_finished(mdev);
#line 601
    return (1);
  } else {

  }
#line 604
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 604
  if (tmp___1 == 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 610
    return (1);
  } else {

  }
#line 613
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 613
  max_bio_size = (int )(tmp___2 << 9);
#line 614
  number = drbd_rs_number_requests(mdev);
#line 615
  if (number == 0) {
#line 616
    goto requeue;
  } else {

  }
#line 618
  i = 0;
#line 618
  goto ldv_50028;
  ldv_50027: 
#line 620
  ldv_mutex_lock_47(& mdev->data.mutex);
#line 621
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 622
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 623
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 625
    queued = 1;
#line 626
    sndbuf = 0;
  }
#line 628
  ldv_mutex_unlock_48(& mdev->data.mutex);
#line 629
  if (sndbuf / 2 < queued) {
#line 630
    goto requeue;
  } else {

  }
  next_sector: 
#line 633
  size = 4096;
#line 634
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 636
  if (bit == 0xffffffffffffffffUL) {
#line 637
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 638
    put_ldev(mdev);
#line 639
    return (1);
  } else {

  }
#line 642
  sector = bit << 3;
#line 644
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 644
  if (tmp___3 != 0) {
#line 646
    mdev->bm_resync_fo = bit;
#line 647
    goto requeue;
  } else {
#line 644
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 644
    if (tmp___4 != 0) {
#line 646
      mdev->bm_resync_fo = bit;
#line 647
      goto requeue;
    } else {

    }
  }
#line 649
  mdev->bm_resync_fo = bit + 1UL;
#line 651
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 651
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 651
  if (tmp___6 != 0L) {
#line 652
    drbd_rs_complete_io(mdev, sector);
#line 653
    goto next_sector;
  } else {

  }
#line 663
  align = 1;
#line 664
  rollback_i = i;
  ldv_50016: ;
#line 666
  if (size + 4096 > max_bio_size) {
#line 667
    goto ldv_50015;
  } else {

  }
#line 670
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 671
    goto ldv_50015;
  } else {

  }
#line 674
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 675
    goto ldv_50015;
  } else {

  }
#line 681
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 681
  if (tmp___7 != 1) {
#line 682
    goto ldv_50015;
  } else {

  }
#line 683
  bit = bit + 1UL;
#line 684
  size = size + 4096;
#line 685
  if (4096 << align <= size) {
#line 686
    align = align + 1;
  } else {

  }
#line 687
  i = i + 1;
#line 688
  goto ldv_50016;
  ldv_50015: ;
#line 691
  if (size > 4096) {
#line 692
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 696
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 697
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 698
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 699
    tmp___8 = read_for_csum(mdev, sector, size);
#line 699
    switch (tmp___8) {
    case -5: 
#line 701
    put_ldev(mdev);
#line 702
    return (0);
    case -11: 
#line 704
    drbd_rs_complete_io(mdev, sector);
#line 705
    mdev->bm_resync_fo = sector >> 3;
#line 706
    i = rollback_i;
#line 707
    goto requeue;
    case 0: ;
#line 710
    goto ldv_50020;
    default: 
#line 712
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (712), "i" (12UL));
    ldv_50022: ;
#line 712
    goto ldv_50022;
    }
    ldv_50020: ;
  } else {
#line 715
    inc_rs_pending(mdev);
#line 716
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 716
    if (tmp___11 == 0) {
#line 718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 719
      atomic_dec(& mdev->rs_pending_cnt);
#line 719
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 719
      if (tmp___10 < 0) {
#line 719
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 719
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 719, tmp___9);
      } else {

      }
#line 720
      put_ldev(mdev);
#line 721
      return (0);
    } else {

    }
  }
#line 618
  i = i + 1;
  ldv_50028: ;
#line 618
  if (i < number) {
#line 619
    goto ldv_50027;
  } else {

  }
#line 726
  tmp___12 = drbd_bm_bits(mdev);
#line 726
  if (mdev->bm_resync_fo >= tmp___12) {
#line 733
    put_ldev(mdev);
#line 734
    return (1);
  } else {

  }
  requeue: 
#line 738
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 739
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 740
  put_ldev(mdev);
#line 741
  return (1);
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 748
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 748
  capacity = tmp;
#line 750
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 750
  if (tmp___0 != 0L) {
#line 751
    return (1);
  } else {

  }
#line 753
  number = drbd_rs_number_requests(mdev);
#line 755
  sector = mdev->ov_position;
#line 756
  i = 0;
#line 756
  goto ldv_50046;
  ldv_50045: ;
#line 757
  if (sector >= capacity) {
#line 758
    return (1);
  } else {

  }
#line 761
  size = 4096;
#line 763
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 763
  if (tmp___1 != 0) {
#line 765
    mdev->ov_position = sector;
#line 766
    goto requeue;
  } else {
#line 763
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 763
    if (tmp___2 != 0) {
#line 765
      mdev->ov_position = sector;
#line 766
      goto requeue;
    } else {

    }
  }
#line 769
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 770
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 772
  inc_rs_pending(mdev);
#line 773
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 773
  if (tmp___5 == 0) {
#line 774
    atomic_dec(& mdev->rs_pending_cnt);
#line 774
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 774
    if (tmp___4 < 0) {
#line 774
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 774
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 774, tmp___3);
    } else {

    }
#line 775
    return (0);
  } else {

  }
#line 777
  sector = sector + 8UL;
#line 756
  i = i + 1;
  ldv_50046: ;
#line 756
  if (i < number) {
#line 757
    goto ldv_50045;
  } else {

  }
#line 779
  mdev->ov_position = sector;
  requeue: 
#line 782
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 783
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 784
  return (1);
}
}
#line 788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 790
  mdev = (struct drbd_conf *)data;
#line 792
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 793
  return;
}
}
#line 795 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 797
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 797
  if (tmp != 0) {
#line 798
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 799
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 800
    add_timer(& mdev->start_resync_timer);
#line 801
    return (1);
  } else {
#line 797
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 797
    if (tmp___0 != 0) {
#line 798
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 799
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 800
      add_timer(& mdev->start_resync_timer);
#line 801
      return (1);
    } else {

    }
  }
#line 804
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 805
  clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
#line 806
  return (1);
}
}
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 811
  kfree((void const   *)w);
#line 812
  ov_oos_print(mdev);
#line 813
  drbd_resync_finished(mdev);
#line 815
  return (1);
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 820
  kfree((void const   *)w);
#line 822
  drbd_resync_finished(mdev);
#line 824
  return (1);
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 829
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 830
  request_ping(mdev);
#line 831
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 831
  if (tmp != 0 || (int )mdev->state.ldv_38794.conn <= 9) {
#line 831
    goto ldv_50070;
  } else {

  }
#line 831
  tmp___0 = get_current();
#line 831
  __wait.flags = 0U;
#line 831
  __wait.private = (void *)tmp___0;
#line 831
  __wait.func = & autoremove_wake_function;
#line 831
  __wait.task_list.next = & __wait.task_list;
#line 831
  __wait.task_list.prev = & __wait.task_list;
  ldv_50073: 
#line 831
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 831
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 831
  if (tmp___1 != 0 || (int )mdev->state.ldv_38794.conn <= 9) {
#line 831
    goto ldv_50072;
  } else {

  }
#line 831
  schedule();
#line 831
  goto ldv_50073;
  ldv_50072: 
#line 831
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50070: ;
#line 834
  return;
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 841
  khelper_cmd = 0;
#line 842
  verify_done = 0;
#line 847
  tmp___0 = drbd_rs_del_all(mdev);
#line 847
  if (tmp___0 != 0) {
#line 853
    schedule_timeout_interruptible(25L);
#line 854
    tmp = kmalloc(24UL, 32U);
#line 854
    w = (struct drbd_work *)tmp;
#line 855
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 856
      w->cb = & w_resync_finished;
#line 857
      drbd_queue_work(& mdev->data.work, w);
#line 858
      return (1);
    } else {

    }
#line 860
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 863
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 864
  if (dt == 0UL) {
#line 865
    dt = 1UL;
  } else {

  }
#line 866
  db = mdev->rs_total;
#line 867
  dbdt = db / dt << 2;
#line 868
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 870
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 870
  if (tmp___1 == 0) {
#line 871
    goto out;
  } else {

  }
#line 873
  ping_peer(mdev);
#line 875
  spin_lock_irq(& mdev->req_lock);
#line 876
  os = mdev->state;
#line 878
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 882
  if ((int )os.ldv_38794.conn <= 10) {
#line 883
    goto out_unlock;
  } else {

  }
#line 885
  ns = os;
#line 886
  ns.ldv_38794.conn = 10U;
#line 888
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 892
  n_oos = drbd_bm_total_weight(mdev);
#line 894
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 895
    if (n_oos != 0UL) {
#line 896
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 898
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 901
      if (mdev->rs_failed != n_oos) {
#line 901
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                901);
      } else {

      }
#line 903
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 904
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 906
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 907
        s = mdev->rs_same_csum;
#line 908
        t = mdev->rs_total;
#line 909
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 912
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 921
  if (mdev->rs_failed != 0UL) {
#line 922
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 924
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 925
      ns.ldv_38794.disk = 4U;
#line 926
      ns.ldv_38794.pdsk = 8U;
    } else {
#line 928
      ns.ldv_38794.disk = 8U;
#line 929
      ns.ldv_38794.pdsk = 4U;
    }
  } else {
#line 932
    ns.ldv_38794.disk = 8U;
#line 933
    ns.ldv_38794.pdsk = 8U;
#line 935
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 936
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 938
        i = 1;
#line 938
        goto ldv_50093;
        ldv_50092: 
#line 939
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 938
        i = i + 1;
        ldv_50093: ;
#line 938
        if (i <= 3) {
#line 939
          goto ldv_50092;
        } else {

        }
#line 940
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 941
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 943
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 947
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 950
      drbd_uuid_set_bm(mdev, 0ULL);
#line 951
      drbd_print_uuids(mdev, "updated UUIDs");
#line 952
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 956
        i___0 = 0;
#line 956
        goto ldv_50097;
        ldv_50096: 
#line 957
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 956
        i___0 = i___0 + 1;
        ldv_50097: ;
#line 956
        if (i___0 <= 3) {
#line 957
          goto ldv_50096;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 962
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 964
  spin_unlock_irq(& mdev->req_lock);
#line 965
  put_ldev(mdev);
  out: 
#line 967
  mdev->rs_total = 0UL;
#line 968
  mdev->rs_failed = 0UL;
#line 969
  mdev->rs_paused = 0UL;
#line 970
  if (verify_done != 0) {
#line 971
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 973
  drbd_md_sync(mdev);
#line 975
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 976
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 978
  return (1);
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 984
  tmp = drbd_ee_has_active_page(e);
#line 984
  if (tmp != 0) {
#line 986
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 987
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 988
    atomic_sub(i, & mdev->pp_in_use);
#line 989
    spin_lock_irq(& mdev->req_lock);
#line 990
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 991
    spin_unlock_irq(& mdev->req_lock);
#line 992
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 994
    drbd_free_some_ee(mdev, e, 0);
  }
#line 995
  return;
}
}
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1005
  __mptr = (struct drbd_work  const  *)w;
#line 1005
  e = (struct drbd_epoch_entry *)__mptr;
#line 1008
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1008
  if (tmp___1 != 0L) {
#line 1009
    drbd_free_some_ee(mdev, e, 0);
#line 1010
    atomic_dec(& mdev->unacked_cnt);
#line 1010
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
    if (tmp___0 < 0) {
#line 1010
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1010, tmp);
    } else {

    }
#line 1011
    return (1);
  } else {

  }
#line 1014
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1014
  if (tmp___3 != 0L) {
#line 1015
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1017
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1017
    if (tmp___2 != 0) {
#line 1018
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1021
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1024
  atomic_dec(& mdev->unacked_cnt);
#line 1024
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1024
  if (tmp___5 < 0) {
#line 1024
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1024, tmp___4);
  } else {

  }
#line 1026
  move_to_net_ee_or_free(mdev, e);
#line 1028
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1028
  if (tmp___6 != 0L) {
#line 1029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1030
  return (ok);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1041
  __mptr = (struct drbd_work  const  *)w;
#line 1041
  e = (struct drbd_epoch_entry *)__mptr;
#line 1044
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1044
  if (tmp___1 != 0L) {
#line 1045
    drbd_free_some_ee(mdev, e, 0);
#line 1046
    atomic_dec(& mdev->unacked_cnt);
#line 1046
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1046
    if (tmp___0 < 0) {
#line 1046
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1046
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1046, tmp);
    } else {

    }
#line 1047
    return (1);
  } else {

  }
#line 1050
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1050
  if (tmp___2 != 0) {
#line 1051
    drbd_rs_complete_io(mdev, e->sector);
#line 1052
    put_ldev(mdev);
  } else {

  }
#line 1055
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1056
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1057
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1057
    if (tmp___6 != 0L) {
#line 1058
      tmp___4 = __builtin_expect((int )mdev->state.ldv_38794.pdsk > 3, 1L);
#line 1058
      if (tmp___4 != 0L) {
#line 1059
        inc_rs_pending(mdev);
#line 1060
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1062
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1062
        if (tmp___3 != 0) {
#line 1063
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1065
        ok = 1;
      }
    } else {
#line 1068
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1068
      if (tmp___5 != 0) {
#line 1069
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1072
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1075
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1078
  atomic_dec(& mdev->unacked_cnt);
#line 1078
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
  if (tmp___8 < 0) {
#line 1078
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1078, tmp___7);
  } else {

  }
#line 1080
  move_to_net_ee_or_free(mdev, e);
#line 1082
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1082
  if (tmp___9 != 0L) {
#line 1083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1084
  return (ok);
}
}
#line 1087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1089
  __mptr = (struct drbd_work  const  *)w;
#line 1089
  e = (struct drbd_epoch_entry *)__mptr;
#line 1092
  digest = 0;
#line 1093
  eq = 0;
#line 1095
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1095
  if (tmp___1 != 0L) {
#line 1096
    drbd_free_some_ee(mdev, e, 0);
#line 1097
    atomic_dec(& mdev->unacked_cnt);
#line 1097
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1097
    if (tmp___0 < 0) {
#line 1097
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1097
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1097, tmp);
    } else {

    }
#line 1098
    return (1);
  } else {

  }
#line 1101
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1101
  if (tmp___2 != 0) {
#line 1102
    drbd_rs_complete_io(mdev, e->sector);
#line 1103
    put_ldev(mdev);
  } else {

  }
#line 1106
  di = e->ldv_47571.digest;
#line 1108
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1108
  if (tmp___6 != 0L) {
#line 1112
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1113
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1113
      digest_size = (int )tmp___3;
#line 1114
      if (di->digest_size != digest_size) {
#line 1114
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1114);
      } else {

      }
#line 1115
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1117
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1118
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1119
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1119
      eq = tmp___4 == 0;
#line 1120
      kfree((void const   *)digest);
    } else {

    }
#line 1123
    if (eq != 0) {
#line 1124
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1124U);
#line 1126
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1127
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1129
      inc_rs_pending(mdev);
#line 1130
      e->ldv_47571.block_id = 0xffffffffffffffffULL;
#line 1131
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1132
      kfree((void const   *)di);
#line 1133
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1136
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1137
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1137
    if (tmp___5 != 0) {
#line 1138
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1141
  atomic_dec(& mdev->unacked_cnt);
#line 1141
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1141
  if (tmp___8 < 0) {
#line 1141
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1141
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1141, tmp___7);
  } else {

  }
#line 1142
  move_to_net_ee_or_free(mdev, e);
#line 1144
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1144
  if (tmp___9 != 0L) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1146
  return (ok);
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1152
  __mptr = (struct drbd_work  const  *)w;
#line 1152
  e = (struct drbd_epoch_entry *)__mptr;
#line 1153
  sector = e->sector;
#line 1154
  size = e->size;
#line 1157
  ok = 1;
#line 1159
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1159
  if (tmp != 0L) {
#line 1160
    goto out;
  } else {

  }
#line 1162
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1162
  digest_size = (int )tmp___0;
#line 1163
  digest = kmalloc((size_t )digest_size, 16U);
#line 1164
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1165
    ok = 0;
#line 1166
    goto out;
  } else {

  }
#line 1169
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1169
  if (tmp___1 != 0L) {
#line 1170
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1172
    memset(digest, 0, (size_t )digest_size);
  }
#line 1179
  drbd_free_some_ee(mdev, e, 0);
#line 1180
  e = 0;
#line 1181
  inc_rs_pending(mdev);
#line 1182
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1185
  if (ok == 0) {
#line 1186
    atomic_dec(& mdev->rs_pending_cnt);
#line 1186
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1186
    if (tmp___3 < 0) {
#line 1186
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1186
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1186, tmp___2);
    } else {

    }
  } else {

  }
#line 1187
  kfree((void const   *)digest);
  out: ;
#line 1190
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1191
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1192
  atomic_dec(& mdev->unacked_cnt);
#line 1192
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1192
  if (tmp___5 < 0) {
#line 1192
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1192, tmp___4);
  } else {

  }
#line 1193
  return (ok);
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1198
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1199
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1201
    mdev->ov_last_oos_start = sector;
#line 1202
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1204
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1204U);
#line 1205
  return;
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1209
  __mptr = (struct drbd_work  const  *)w;
#line 1209
  e = (struct drbd_epoch_entry *)__mptr;
#line 1212
  sector = e->sector;
#line 1213
  size = e->size;
#line 1215
  eq = 0;
#line 1217
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1217
  if (tmp___1 != 0L) {
#line 1218
    drbd_free_some_ee(mdev, e, 0);
#line 1219
    atomic_dec(& mdev->unacked_cnt);
#line 1219
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1219
    if (tmp___0 < 0) {
#line 1219
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1219
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1219, tmp);
    } else {

    }
#line 1220
    return (1);
  } else {

  }
#line 1225
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1225
  if (tmp___2 != 0) {
#line 1226
    drbd_rs_complete_io(mdev, e->sector);
#line 1227
    put_ldev(mdev);
  } else {

  }
#line 1230
  di = e->ldv_47571.digest;
#line 1232
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1232
  if (tmp___5 != 0L) {
#line 1233
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1233
    digest_size = (int )tmp___3;
#line 1234
    digest = kmalloc((size_t )digest_size, 16U);
#line 1235
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1236
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1238
      if (di->digest_size != digest_size) {
#line 1238
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1238);
      } else {

      }
#line 1239
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1239
      eq = tmp___4 == 0;
#line 1240
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1249
  drbd_free_some_ee(mdev, e, 0);
#line 1250
  if (eq == 0) {
#line 1251
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1253
    ov_oos_print(mdev);
  }
#line 1255
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1258
  atomic_dec(& mdev->unacked_cnt);
#line 1258
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1258
  if (tmp___7 < 0) {
#line 1258
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1258, tmp___6);
  } else {

  }
#line 1260
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1263
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1264
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1266
  if (mdev->ov_left == 0UL) {
#line 1267
    ov_oos_print(mdev);
#line 1268
    drbd_resync_finished(mdev);
  } else {

  }
#line 1271
  return (ok);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1276
  __mptr = (struct drbd_work  const  *)w;
#line 1276
  b = (struct drbd_wq_barrier *)__mptr;
#line 1277
  complete(& b->done);
#line 1278
  return (1);
}
}
#line 1281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1283
  __mptr = (struct drbd_work  const  *)w;
#line 1283
  b = (struct drbd_tl_epoch *)__mptr;
#line 1284
  p = & mdev->data.sbuf.barrier;
#line 1285
  ok = 1;
#line 1292
  spin_lock_irq(& mdev->req_lock);
#line 1293
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_38794.conn <= 9) {
#line 1294
    cancel = 1;
  } else {

  }
#line 1295
  spin_unlock_irq(& mdev->req_lock);
#line 1296
  if (cancel != 0) {
#line 1297
    return (1);
  } else {

  }
#line 1299
  tmp = drbd_get_data_sock(mdev);
#line 1299
  if (tmp == 0) {
#line 1300
    return (0);
  } else {

  }
#line 1301
  p->barrier = b->br_number;
#line 1305
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1307
  drbd_put_data_sock(mdev);
#line 1309
  return (ok);
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1314
  if (cancel != 0) {
#line 1315
    return (1);
  } else {

  }
#line 1316
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1316
  return (tmp);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1321
  __mptr = (struct drbd_work  const  *)w;
#line 1321
  req = (struct drbd_request *)__mptr;
#line 1324
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1324
  if (tmp != 0L) {
#line 1325
    req_mod(req, send_canceled);
#line 1326
    return (1);
  } else {

  }
#line 1329
  ok = drbd_send_oos(mdev, req);
#line 1330
  req_mod(req, oos_handed_to_network);
#line 1332
  return (ok);
}
}
#line 1341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1343
  __mptr = (struct drbd_work  const  *)w;
#line 1343
  req = (struct drbd_request *)__mptr;
#line 1346
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1346
  if (tmp != 0L) {
#line 1347
    req_mod(req, send_canceled);
#line 1348
    return (1);
  } else {

  }
#line 1351
  ok = drbd_send_dblock(mdev, req);
#line 1352
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1354
  return (ok);
}
}
#line 1363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1365
  __mptr = (struct drbd_work  const  *)w;
#line 1365
  req = (struct drbd_request *)__mptr;
#line 1368
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1368
  if (tmp != 0L) {
#line 1369
    req_mod(req, send_canceled);
#line 1370
    return (1);
  } else {

  }
#line 1373
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1376
  if (ok == 0) {
#line 1379
    if ((int )mdev->state.ldv_38794.conn > 9) {
#line 1380
      val.i = 0U;
#line 1380
      val.ldv_38794.conn = 5U;
#line 1380
      mask.i = 0U;
#line 1380
      mask.ldv_38794.conn = 31U;
#line 1380
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1382
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1384
  return (ok);
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1389
  __mptr = (struct drbd_work  const  *)w;
#line 1389
  req = (struct drbd_request *)__mptr;
#line 1391
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 4096UL) != 0UL) {
#line 1392
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1398
  drbd_req_make_private_bio(req, req->master_bio);
#line 1399
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1400
  generic_make_request(req->private_bio);
#line 1402
  return (1);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1407
  odev = mdev;
  ldv_50273: ;
#line 1410
  if (odev->sync_conf.after == -1) {
#line 1411
    return (1);
  } else {

  }
#line 1412
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1413
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1413
  if (_b != 0) {
#line 1413
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1413);
  } else {

  }
#line 1413
  if (_b != 0) {
#line 1413
    return (1);
  } else {

  }
#line 1414
  if (((((int )odev->state.ldv_38794.conn > 15 && (int )odev->state.ldv_38794.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1418
    return (0);
  } else {

  }
#line 1419
  goto ldv_50273;
}
}
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1431
  rv = 0;
#line 1433
  i = 0;
#line 1433
  goto ldv_50284;
  ldv_50283: 
#line 1434
  odev = minor_to_mdev((unsigned int )i);
#line 1435
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1436
    goto ldv_50280;
  } else {

  }
#line 1437
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1438
    goto ldv_50280;
  } else {

  }
#line 1439
  tmp___0 = _drbd_may_sync_now(odev);
#line 1439
  if (tmp___0 == 0) {
#line 1440
    __ns.i = odev->state.i;
#line 1440
    __ns.ldv_38794.aftr_isp = 1U;
#line 1440
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1440
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_50280: 
#line 1433
  i = i + 1;
  ldv_50284: ;
#line 1433
  if ((unsigned int )i < minor_count) {
#line 1434
    goto ldv_50283;
  } else {

  }

#line 1444
  return (rv);
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1456
  rv = 0;
#line 1458
  i = 0;
#line 1458
  goto ldv_50296;
  ldv_50295: 
#line 1459
  odev = minor_to_mdev((unsigned int )i);
#line 1460
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1461
    goto ldv_50292;
  } else {

  }
#line 1462
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1463
    goto ldv_50292;
  } else {

  }
#line 1464
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1465
    tmp___0 = _drbd_may_sync_now(odev);
#line 1465
    if (tmp___0 != 0) {
#line 1466
      __ns.i = odev->state.i;
#line 1466
      __ns.ldv_38794.aftr_isp = 0U;
#line 1466
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1466
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_50292: 
#line 1458
  i = i + 1;
  ldv_50296: ;
#line 1458
  if ((unsigned int )i < minor_count) {
#line 1459
    goto ldv_50295;
  } else {

  }

#line 1471
  return (rv);
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1476
  _raw_write_lock_irq(& global_state_lock);
#line 1477
  _drbd_resume_next(mdev);
#line 1478
  _raw_write_unlock_irq(& global_state_lock);
#line 1479
  return;
}
}
#line 1481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1483
  _raw_write_lock_irq(& global_state_lock);
#line 1484
  _drbd_pause_after(mdev);
#line 1485
  _raw_write_unlock_irq(& global_state_lock);
#line 1486
  return;
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1492
  if (o_minor == -1) {
#line 1493
    return (101);
  } else {

  }
#line 1494
  if (o_minor < -1) {
#line 1495
    return (132);
  } else {
#line 1494
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1494
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1495
      return (132);
    } else {

    }
  }
#line 1498
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_50309: ;
#line 1500
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1501
    return (133);
  } else {

  }
#line 1504
  if (odev->sync_conf.after == -1) {
#line 1505
    return (101);
  } else {

  }
#line 1508
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1509
  goto ldv_50309;
}
}
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1517
  _raw_write_lock_irq(& global_state_lock);
#line 1518
  retcode = sync_after_error(mdev, na);
#line 1519
  if (retcode == 101) {
#line 1520
    mdev->sync_conf.after = na;
    ldv_50316: 
#line 1522
    changes = _drbd_pause_after(mdev);
#line 1523
    tmp = _drbd_resume_next(mdev);
#line 1523
    changes = tmp | changes;
#line 1524
    if (changes != 0) {
#line 1525
      goto ldv_50316;
    } else {

    }

  } else {

  }
#line 1526
  _raw_write_unlock_irq(& global_state_lock);
#line 1527
  return (retcode);
}
}
#line 1530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1532
  atomic_set(& mdev->rs_sect_in, 0);
#line 1533
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1534
  mdev->rs_in_flight = 0;
#line 1535
  mdev->rs_planed = 0;
#line 1536
  spin_lock(& mdev->peer_seq_lock);
#line 1537
  fifo_set(& mdev->rs_plan_s, 0);
#line 1538
  spin_unlock(& mdev->peer_seq_lock);
#line 1539
  return;
}
}
#line 1549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1554
  if ((int )mdev->state.ldv_38794.conn > 15 && (int )mdev->state.ldv_38794.conn <= 21) {
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1556
    return;
  } else {

  }
#line 1559
  if ((int )mdev->state.ldv_38794.conn <= 21) {
#line 1561
    drbd_rs_cancel_all(mdev);
  } else {

  }
#line 1567
  if ((unsigned int )side == 17U) {
#line 1571
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1572
    r = (r >> 8) & 255;
#line 1573
    if (r > 0) {
#line 1574
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1576
      val.i = 0U;
#line 1576
      val.ldv_38794.conn = 1U;
#line 1576
      mask.i = 0U;
#line 1576
      mask.ldv_38794.conn = 31U;
#line 1576
      drbd_force_state(mdev, mask, val);
#line 1577
      return;
    } else {

    }
  } else {
#line 1580
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1581
    r = (r >> 8) & 255;
#line 1582
    if (r > 0) {
#line 1583
      if (r == 3) {
#line 1584
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1587
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1589
        val___0.i = 0U;
#line 1589
        val___0.ldv_38794.conn = 1U;
#line 1589
        mask___0.i = 0U;
#line 1589
        mask___0.ldv_38794.conn = 31U;
#line 1589
        drbd_force_state(mdev, mask___0, val___0);
#line 1590
        return;
      }
    } else {

    }
  }
#line 1595
  drbd_state_lock(mdev);
#line 1596
  _raw_write_lock_irq(& global_state_lock);
#line 1597
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1597
  if (tmp == 0) {
#line 1598
    _raw_write_unlock_irq(& global_state_lock);
#line 1599
    drbd_state_unlock(mdev);
#line 1600
    return;
  } else {

  }
#line 1603
  ns.i = mdev->state.i;
#line 1605
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1605
  ns.ldv_38794.aftr_isp = tmp___0 == 0;
#line 1607
  ns.ldv_38794.conn = (unsigned char )side;
#line 1609
  if ((unsigned int )side == 17U) {
#line 1610
    ns.ldv_38794.disk = 4U;
  } else {
#line 1612
    ns.ldv_38794.pdsk = 4U;
  }
#line 1614
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1614
  r = (int )tmp___1;
#line 1615
  ns = mdev->state;
#line 1617
  if ((int )ns.ldv_38794.conn <= 9) {
#line 1618
    r = 0;
  } else {

  }
#line 1620
  if (r == 1) {
#line 1621
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1621
    tw = tmp___2;
#line 1622
    now = jiffies;
#line 1625
    mdev->rs_failed = 0UL;
#line 1626
    mdev->rs_paused = 0UL;
#line 1627
    mdev->rs_same_csum = 0UL;
#line 1628
    mdev->rs_last_events = 0;
#line 1629
    mdev->rs_last_sect_ev = 0;
#line 1630
    mdev->rs_total = tw;
#line 1631
    mdev->rs_start = now;
#line 1632
    i = 0;
#line 1632
    goto ldv_50339;
    ldv_50338: 
#line 1633
    mdev->rs_mark_left[i] = tw;
#line 1634
    mdev->rs_mark_time[i] = now;
#line 1632
    i = i + 1;
    ldv_50339: ;
#line 1632
    if (i <= 7) {
#line 1633
      goto ldv_50338;
    } else {

    }
#line 1636
    _drbd_pause_after(mdev);
  } else {

  }
#line 1638
  _raw_write_unlock_irq(& global_state_lock);
#line 1640
  if (r == 1) {
#line 1641
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_38794.conn);
#line 1641
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1645
    if ((unsigned int )side == 17U) {
#line 1646
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1655
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1656
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1658
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1669
      if ((unsigned int )side == 16U) {
#line 1670
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1673
      drbd_resync_finished(mdev);
    } else {

    }
#line 1676
    drbd_rs_controller_reset(mdev);
#line 1681
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1682
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1684
    drbd_md_sync(mdev);
  } else {

  }
#line 1686
  put_ldev(mdev);
#line 1687
  drbd_state_unlock(mdev);
#line 1688
  return;
}
}
#line 1690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1692
  mdev = thi->mdev;
#line 1693
  w = 0;
#line 1694
  work_list.next = & work_list;
#line 1694
  work_list.prev = & work_list;
#line 1695
  intr = 0;
#line 1697
  tmp = mdev_to_minor(mdev);
#line 1697
  tmp___0 = get_current();
#line 1697
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1699
  goto ldv_50352;
  ldv_50362: 
#line 1700
  drbd_thread_current_set_cpu(mdev);
#line 1702
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1702
  if (tmp___1 != 0) {
#line 1703
    ldv_mutex_lock_49(& mdev->data.mutex);
#line 1704
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1705
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1706
    ldv_mutex_unlock_50(& mdev->data.mutex);
#line 1708
    intr = down_interruptible(& mdev->data.work.s);
#line 1710
    ldv_mutex_lock_51(& mdev->data.mutex);
#line 1711
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1712
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1713
    ldv_mutex_unlock_52(& mdev->data.mutex);
  } else {

  }
#line 1716
  if (intr != 0) {
#line 1717
    if (intr != -4) {
#line 1717
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1717);
    } else {

    }
#line 1718
    tmp___2 = get_current();
#line 1718
    flush_signals(tmp___2);
#line 1719
    tmp___3 = get_t_state(thi);
#line 1719
    _b = (unsigned int )tmp___3 == 1U;
#line 1719
    if (_b != 0) {
#line 1719
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1719);
    } else {

    }
#line 1719
    if (_b != 0) {
#line 1720
      goto ldv_50352;
    } else {

    }
#line 1721
    goto ldv_50353;
  } else {

  }
#line 1724
  tmp___4 = get_t_state(thi);
#line 1724
  if ((unsigned int )tmp___4 != 1U) {
#line 1725
    goto ldv_50353;
  } else {

  }
#line 1730
  w = 0;
#line 1731
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1732
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1732
  _b___0 = tmp___5 != 0;
#line 1732
  if (_b___0 != 0) {
#line 1732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1732);
  } else {

  }
#line 1732
  if (_b___0 != 0) {
#line 1744
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1745
    goto ldv_50352;
  } else {

  }
#line 1747
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1747
  w = (struct drbd_work *)__mptr;
#line 1748
  list_del_init(& w->list);
#line 1749
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1751
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_38794.conn <= 9);
#line 1751
  if (tmp___6 == 0) {
#line 1753
    if ((int )mdev->state.ldv_38794.conn > 9) {
#line 1755
      val.i = 0U;
#line 1755
      val.ldv_38794.conn = 5U;
#line 1755
      mask.i = 0U;
#line 1755
      mask.ldv_38794.conn = 31U;
#line 1755
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_50352: 
#line 1699
  tmp___7 = get_t_state(thi);
#line 1699
  if ((unsigned int )tmp___7 == 1U) {
#line 1700
    goto ldv_50362;
  } else {

  }
  ldv_50353: 
#line 1758
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1758
  if (tmp___8 == 0) {
#line 1758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1758);
  } else {

  }
#line 1759
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1759
  if (tmp___9 == 0) {
#line 1759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1759);
  } else {

  }
#line 1761
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1762
  i = 0;
#line 1763
  goto ldv_50369;
  ldv_50368: 
#line 1764
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1765
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1767
  goto ldv_50366;
  ldv_50365: 
#line 1768
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1768
  w = (struct drbd_work *)__mptr___0;
#line 1769
  list_del_init(& w->list);
#line 1770
  (*(w->cb))(mdev, w, 1);
#line 1771
  i = i + 1;
  ldv_50366: 
#line 1767
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1767
  if (tmp___10 == 0) {
#line 1768
    goto ldv_50365;
  } else {

  }
#line 1774
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_50369: 
#line 1763
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1763
  if (tmp___11 == 0) {
#line 1764
    goto ldv_50368;
  } else {

  }
#line 1776
  sema_init(& mdev->data.work.s, 0);
#line 1782
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1784
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1784
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1784);
  } else {

  }
#line 1787
  drbd_thread_stop(& mdev->receiver);
#line 1788
  drbd_mdev_cleanup(mdev);
#line 1790
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1792
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1793
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1796
  return (0);
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1804
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1806
  mutex_lock(ldv_func_arg1);
#line 1807
  return;
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1814
  tmp = mutex_trylock(ldv_func_arg1);
#line 1814
  ldv_func_res = tmp;
#line 1816
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1816
  return (tmp___0);
#line 1818
  return (ldv_func_res);
}
}
#line 1821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1826
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1828
  mutex_unlock(ldv_func_arg1);
#line 1829
  return;
}
}
#line 1831 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1836
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1838
  mutex_lock(ldv_func_arg1);
#line 1839
  return;
}
}
#line 1841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1846
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1848
  mutex_unlock(ldv_func_arg1);
#line 1849
  return;
}
}
#line 1851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1856
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1858
  mutex_lock(ldv_func_arg1);
#line 1859
  return;
}
}
#line 1861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1866
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1868
  mutex_unlock(ldv_func_arg1);
#line 1869
  return;
}
}
#line 1871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1876
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1878
  mutex_unlock(ldv_func_arg1);
#line 1879
  return;
}
}
#line 1881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1886
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1888
  mutex_lock(ldv_func_arg1);
#line 1889
  return;
}
}
#line 1891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1896
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1898
  mutex_unlock(ldv_func_arg1);
#line 1899
  return;
}
}
#line 1901 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1906
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1908
  mutex_lock(ldv_func_arg1);
#line 1909
  return;
}
}
#line 1911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1916
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1918
  mutex_unlock(ldv_func_arg1);
#line 1919
  return;
}
}
#line 1921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1926
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1928
  mutex_lock(ldv_func_arg1);
#line 1929
  return;
}
}
#line 1931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1936
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1938
  mutex_unlock(ldv_func_arg1);
#line 1939
  return;
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 170 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) ;
#line 56
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6278;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6278;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6278;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6278;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6278: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 280 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 346 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 361
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 453 "include/linux/module.h"
extern void __module_get(struct module * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 67
extern u32 random32(void) ;
#line 239 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 241
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 243
extern void sock_release(struct socket * ) ;
#line 246
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 452 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19807: ;
#line 65
    goto ldv_19807;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19808: ;
#line 67
    goto ldv_19808;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19809: ;
#line 68
    goto ldv_19809;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page___0(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 302 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 359
extern long schedule_timeout(long  ) ;
#line 362
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2539 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2541
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2541
  return (tmp);
}
}
#line 2565 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2567
  tmp = test_tsk_thread_flag(p, 2);
#line 2567
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2567
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 520 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 522
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 434 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 436
  disk->part0.nr_sects = size;
#line 437
  return;
}
}
#line 49 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 51
  __might_sleep("include/linux/highmem.h", 51, 0);
#line 52
  tmp = lowmem_page_address((struct page  const  *)page);
#line 52
  return (tmp);
}
}
#line 55 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 57
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , unsigned int  ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1196
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1202
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1211
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1221
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1223
void tl_clear(struct drbd_conf *mdev ) ;
#line 1225
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1228
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1229
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1232
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1234
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1243
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1245
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1246
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1250
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1252
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1268
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1270
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1279
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1296
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1299
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1300
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1497
mempool_t *drbd_ee_mempool ;
#line 1512
struct page *drbd_pp_pool ;
#line 1513
spinlock_t drbd_pp_lock ;
#line 1514
int drbd_pp_vacant ;
#line 1549
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1551
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1552
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1553
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1554
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1558
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1619
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1629
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1631
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1635
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1636
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1668
  val = 1;
#line 1669
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1671
  return;
}
}
#line 1673 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1675
  val = 2;
#line 1676
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1678
  return;
}
}
#line 1680
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1692
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1718
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1791 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1793
  page = e->pages;
#line 1794
  goto ldv_49818;
  ldv_49817: 
#line 1795
  tmp = page_count(page);
#line 1795
  if (tmp > 1) {
#line 1796
    return (1);
  } else {

  }
#line 1794
  page = page_chain_next(page);
  ldv_49818: ;
#line 1794
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1794
    tmp___0 = page_chain_next(page);
#line 1794
    __builtin_prefetch((void const   *)tmp___0);
#line 1794
    if (1 != 0) {
#line 1795
      goto ldv_49817;
    } else {
#line 1797
      goto ldv_49819;
    }
  } else {

  }
  ldv_49819: ;
#line 1798
  return (0);
}
}
#line 1836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1840
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1840
  return ((int )tmp);
}
}
#line 1896 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1898
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1901
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1904
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1942
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1946
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1946
  if (tmp___1 != 0UL) {
#line 1946
    __min1 = 2251799813685248UL;
#line 1946
    tmp___0 = drbd_md_first_sector(bdev);
#line 1946
    __min2 = tmp___0;
#line 1946
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1946
    s = 0UL;
  }
#line 1949
  goto ldv_49892;
  case -2: 
#line 1951
  __min1___0 = 2251799813685248UL;
#line 1951
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1951
  __min2___0 = tmp___2;
#line 1951
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1954
  __min1___1 = s;
#line 1954
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1954
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1957
  goto ldv_49892;
  default: 
#line 1959
  __min1___2 = 8587575296UL;
#line 1959
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1959
  __min2___2 = tmp___3;
#line 1959
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49892: ;
#line 1962
  return (s);
}
}
#line 1996 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1999
  tmp = spinlock_check(& q->q_lock);
#line 1999
  flags = _raw_spin_lock_irqsave(tmp);
#line 2000
  list_add(& w->list, & q->q);
#line 2001
  up(& q->s);
#line 2003
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2004
  return;
}
}
#line 2036 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2039
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2039
  return (tmp);
}
}
#line 2042 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2045
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2045
  return (tmp);
}
}
#line 2127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2129
  atomic_inc(& mdev->unacked_cnt);
#line 2130
  return;
}
}
#line 2143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2145
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2145
  if (tmp != 0) {
#line 2146
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2147
  return;
}
}
#line 2155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2159
  atomic_inc(& mdev->net_cnt);
#line 2160
  have_net_conf = (int )mdev->state.ldv_38794.conn > 1;
#line 2161
  if (have_net_conf == 0) {
#line 2162
    put_net_conf(mdev);
  } else {

  }
#line 2163
  return (have_net_conf);
}
}
#line 2419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2421
  changed = mdev->ed_uuid != val;
#line 2422
  mdev->ed_uuid = val;
#line 2423
  return (changed);
}
}
#line 2426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2433
  return ((int )a - (int )b);
}
}
#line 2442 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2445
  spin_lock(& mdev->peer_seq_lock);
#line 2446
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2446
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2447
  mdev->peer_seq = m;
#line 2448
  spin_unlock(& mdev->peer_seq_lock);
#line 2449
  if (m == new_seq) {
#line 2450
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2451
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_50168: ;
#line 234
    goto ldv_50168;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_50173: ;
#line 243
    goto ldv_50173;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 260
  tmp = ar_hash_slot(mdev, sector);
#line 260
  slot = tmp;
#line 264
  n = slot->first;
#line 264
  goto ldv_50190;
  ldv_50189: ;
#line 265
  if ((unsigned long )req == (unsigned long )id) {
#line 266
    if (req->sector != sector) {
#line 266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              266);
    } else {

    }
#line 267
    return (req);
  } else {

  }
#line 264
  n = n->next;
  ldv_50190: ;
#line 264
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 264
    __mptr = (struct hlist_node  const  *)n;
#line 264
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 264
    if (1 != 0) {
#line 265
      goto ldv_50189;
    } else {
#line 267
      goto ldv_50191;
    }
  } else {

  }
  ldv_50191: ;
#line 270
  return (0);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 313
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_50258: ;
#line 162
  goto ldv_50258;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 114
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 116
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 117
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 136
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 136
  if (tmp___0 != 0L) {
#line 136
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (136), "i" (12UL));
    ldv_50338: ;
#line 136
    goto ldv_50338;
  } else {

  }
#line 137
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 137
  if (tmp___1 != 0L) {
#line 137
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (137), "i" (12UL));
    ldv_50339: ;
#line 137
    goto ldv_50339;
  } else {

  }
#line 139
  page = *head;
#line 141
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 142
    return (0);
  } else {

  }
#line 144
  goto ldv_50342;
  ldv_50341: 
#line 145
  tmp = page_chain_next(page);
#line 146
  n = n - 1;
#line 146
  if (n == 0) {
#line 147
    goto ldv_50340;
  } else {

  }
#line 148
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 151
  page = tmp;
  ldv_50342: ;
#line 144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    goto ldv_50341;
  } else {

  }
  ldv_50340: 
#line 155
  page->ldv_13511.private = 0UL;
#line 157
  page = *head;
#line 158
  *head = tmp;
#line 159
  return (page);
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 168
  i = 1;
#line 169
  goto ldv_50350;
  ldv_50349: 
#line 170
  i = i + 1;
#line 170
  page = tmp;
  ldv_50350: 
#line 169
  tmp = page_chain_next(page);
#line 169
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 170
    goto ldv_50349;
  } else {

  }

#line 171
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 172
    *len = i;
  } else {

  }
#line 173
  return (page);
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 179
  i = 0;
#line 180
  goto ldv_50359;
  ldv_50358: 
#line 181
  put_page(page);
#line 182
  i = i + 1;
#line 180
  page = tmp;
  ldv_50359: ;
#line 180
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 180
    tmp = page_chain_next(page);
#line 180
    if (1 != 0) {
#line 181
      goto ldv_50358;
    } else {
#line 183
      goto ldv_50360;
    }
  } else {

  }
  ldv_50360: ;
#line 184
  return (i);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 192
  tmp = page_chain_tail(chain_first, 0);
#line 193
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 193
  if (tmp___0 != 0L) {
#line 193
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (193), "i" (12UL));
    ldv_50367: ;
#line 193
    goto ldv_50367;
  } else {

  }
#line 197
  chain_last->ldv_13511.private = (unsigned long )*head;
#line 198
  *head = chain_first;
#line 199
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 203
  page = 0;
#line 204
  tmp = 0;
#line 205
  i = 0;
#line 209
  if (drbd_pp_vacant >= number) {
#line 210
    spin_lock(& drbd_pp_lock);
#line 211
    page = page_chain_del(& drbd_pp_pool, number);
#line 212
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 213
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 214
    spin_unlock(& drbd_pp_lock);
#line 215
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 216
      return (page);
    } else {

    }
  } else {

  }
#line 222
  i = 0;
#line 222
  goto ldv_50377;
  ldv_50376: 
#line 223
  tmp = alloc_pages(514U, 0U);
#line 224
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 225
    goto ldv_50375;
  } else {

  }
#line 226
  tmp->ldv_13511.private = (unsigned long )page;
#line 227
  page = tmp;
#line 222
  i = i + 1;
  ldv_50377: ;
#line 222
  if (i < number) {
#line 223
    goto ldv_50376;
  } else {

  }
  ldv_50375: ;
#line 230
  if (i == number) {
#line 231
    return (page);
  } else {

  }
#line 236
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 237
    tmp = page_chain_tail(page, 0);
#line 238
    spin_lock(& drbd_pp_lock);
#line 239
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 240
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 241
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 243
  return (0);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 256
  le = mdev->net_ee.next;
#line 256
  tle = le->next;
#line 256
  goto ldv_50389;
  ldv_50388: 
#line 257
  __mptr = (struct list_head  const  *)le;
#line 257
  e = (struct drbd_epoch_entry *)__mptr;
#line 258
  tmp = drbd_ee_has_active_page___0(e);
#line 258
  if (tmp != 0) {
#line 259
    goto ldv_50387;
  } else {

  }
#line 260
  list_move(le, to_be_freed);
#line 256
  le = tle;
#line 256
  tle = le->next;
  ldv_50389: ;
#line 256
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 257
    goto ldv_50388;
  } else {

  }
  ldv_50387: ;
#line 261
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 266
  reclaimed.next = & reclaimed;
#line 266
  reclaimed.prev = & reclaimed;
#line 269
  spin_lock_irq(& mdev->req_lock);
#line 270
  reclaim_net_ee(mdev, & reclaimed);
#line 271
  spin_unlock_irq(& mdev->req_lock);
#line 273
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 273
  e = (struct drbd_epoch_entry *)__mptr;
#line 273
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 273
  goto ldv_50403;
  ldv_50402: 
#line 274
  drbd_free_some_ee(mdev, e, 1);
#line 273
  e = t;
#line 273
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50403: ;
#line 273
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 274
    goto ldv_50402;
  } else {

  }

#line 278
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 291
  page = 0;
#line 292
  tmp = get_current();
#line 292
  wait.flags = 0U;
#line 292
  wait.private = (void *)tmp;
#line 292
  wait.func = & autoremove_wake_function;
#line 292
  wait.task_list.next = & wait.task_list;
#line 292
  wait.task_list.prev = & wait.task_list;
#line 296
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 296
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 297
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 299
  goto ldv_50414;
  ldv_50413: 
#line 300
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 302
  drbd_kick_lo_and_reclaim_net(mdev);
#line 304
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 306
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 307
      goto ldv_50412;
    } else {

    }
  } else {

  }
#line 310
  if (! retry) {
#line 311
    goto ldv_50412;
  } else {

  }
#line 313
  tmp___2 = get_current();
#line 313
  tmp___3 = signal_pending(tmp___2);
#line 313
  if (tmp___3 != 0) {
#line 314
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 315
    goto ldv_50412;
  } else {

  }
#line 318
  schedule();
  ldv_50414: ;
#line 299
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 300
    goto ldv_50413;
  } else {

  }
  ldv_50412: 
#line 320
  finish_wait(& drbd_pp_wait, & wait);
#line 322
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 323
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 324
  return (page);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 333
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 336
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 337
    i = page_chain_free(page);
  } else {
#line 340
    tmp = page_chain_tail(page, & i);
#line 341
    spin_lock(& drbd_pp_lock);
#line 342
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 343
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 344
    spin_unlock(& drbd_pp_lock);
  }
#line 346
  i = atomic_sub_return(i, a);
#line 347
  if (i < 0) {
#line 348
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 350
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 351
  return;
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 376
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 378
  tmp = drbd_insert_fault(mdev, 8U);
#line 378
  if (tmp != 0) {
#line 379
    return (0);
  } else {

  }
#line 381
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 381
  e = (struct drbd_epoch_entry *)tmp___0;
#line 382
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 383
    if ((gfp_mask & 512U) == 0U) {
#line 384
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 385
    return (0);
  } else {

  }
#line 388
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 389
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 390
    goto fail;
  } else {

  }
#line 392
  INIT_HLIST_NODE(& e->collision);
#line 393
  e->epoch = 0;
#line 394
  e->mdev = mdev;
#line 395
  e->pages = page;
#line 396
  atomic_set(& e->pending_bios, 0);
#line 397
  e->size = data_size;
#line 398
  e->flags = 0UL;
#line 399
  e->sector = sector;
#line 400
  e->ldv_47571.block_id = id;
#line 402
  return (e);
  fail: 
#line 405
  mempool_free((void *)e, drbd_ee_mempool);
#line 406
  return (0);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 411
  if ((e->flags & 16UL) != 0UL) {
#line 412
    kfree((void const   *)e->ldv_47571.digest);
  } else {

  }
#line 413
  drbd_pp_free(mdev, e->pages, is_net);
#line 414
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 414
  if (tmp != 0) {
#line 414
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            414);
  } else {

  }
#line 415
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 415
  if (tmp___0 == 0) {
#line 415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            415);
  } else {

  }
#line 416
  mempool_free((void *)e, drbd_ee_mempool);
#line 417
  return;
}
}
#line 419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 421
  work_list.next = & work_list;
#line 421
  work_list.prev = & work_list;
#line 423
  count = 0;
#line 424
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 426
  spin_lock_irq(& mdev->req_lock);
#line 427
  list_splice_init(list, & work_list);
#line 428
  spin_unlock_irq(& mdev->req_lock);
#line 430
  __mptr = (struct list_head  const  *)work_list.next;
#line 430
  e = (struct drbd_epoch_entry *)__mptr;
#line 430
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 430
  goto ldv_50455;
  ldv_50454: 
#line 431
  drbd_free_some_ee(mdev, e, is_net);
#line 432
  count = count + 1;
#line 430
  e = t;
#line 430
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50455: ;
#line 430
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 431
    goto ldv_50454;
  } else {

  }

#line 434
  return (count);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 449
  work_list.next = & work_list;
#line 449
  work_list.prev = & work_list;
#line 450
  reclaimed.next = & reclaimed;
#line 450
  reclaimed.prev = & reclaimed;
#line 452
  ok = (int )mdev->state.ldv_38794.conn > 8;
#line 454
  spin_lock_irq(& mdev->req_lock);
#line 455
  reclaim_net_ee(mdev, & reclaimed);
#line 456
  list_splice_init(& mdev->done_ee, & work_list);
#line 457
  spin_unlock_irq(& mdev->req_lock);
#line 459
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 459
  e = (struct drbd_epoch_entry *)__mptr;
#line 459
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 459
  goto ldv_50472;
  ldv_50471: 
#line 460
  drbd_free_some_ee(mdev, e, 1);
#line 459
  e = t;
#line 459
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50472: ;
#line 459
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 460
    goto ldv_50471;
  } else {

  }
#line 466
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 466
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 466
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 466
  goto ldv_50481;
  ldv_50480: 
#line 468
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 468
  ok = tmp != 0 && ok != 0;
#line 469
  drbd_free_some_ee(mdev, e, 0);
#line 466
  e = t;
#line 466
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_50481: ;
#line 466
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 467
    goto ldv_50480;
  } else {

  }
#line 471
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 473
  return (ok);
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 478
  tmp = get_current();
#line 478
  wait.flags = 0U;
#line 478
  wait.private = (void *)tmp;
#line 478
  wait.func = & autoremove_wake_function;
#line 478
  wait.task_list.next = & wait.task_list;
#line 478
  wait.task_list.prev = & wait.task_list;
#line 482
  goto ldv_50489;
  ldv_50488: 
#line 483
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 484
  spin_unlock_irq(& mdev->req_lock);
#line 485
  io_schedule();
#line 486
  finish_wait(& mdev->ee_wait, & wait);
#line 487
  spin_lock_irq(& mdev->req_lock);
  ldv_50489: 
#line 482
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 482
  if (tmp___0 == 0) {
#line 483
    goto ldv_50488;
  } else {

  }

#line 487
  return;
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 493
  spin_lock_irq(& mdev->req_lock);
#line 494
  _drbd_wait_ee_list_empty(mdev, head);
#line 495
  spin_unlock_irq(& mdev->req_lock);
#line 496
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 503
  sk = sock->sk;
#line 504
  err = 0;
#line 506
  *what = "listen";
#line 507
  err = (*((sock->ops)->listen))(sock, 5);
#line 508
  if (err < 0) {
#line 509
    goto out;
  } else {

  }
#line 511
  *what = "sock_create_lite";
#line 512
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 514
  if (err < 0) {
#line 515
    goto out;
  } else {

  }
#line 517
  *what = "accept";
#line 518
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 519
  if (err < 0) {
#line 520
    sock_release(*newsock);
#line 521
    *newsock = 0;
#line 522
    goto out;
  } else {

  }
#line 524
  (*newsock)->ops = sock->ops;
#line 525
  __module_get(((*newsock)->ops)->owner);
  out: ;
#line 528
  return (err);
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 535
  iov.iov_base = buf;
#line 535
  iov.iov_len = size;
#line 539
  msg.msg_name = 0;
#line 539
  msg.msg_namelen = 0;
#line 539
  msg.msg_iov = (struct iovec *)(& iov);
#line 539
  msg.msg_iovlen = 1UL;
#line 539
  msg.msg_control = 0;
#line 539
  msg.msg_controllen = 0UL;
#line 539
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 546
  tmp = current_thread_info___0();
#line 546
  oldfs = tmp->addr_limit;
#line 547
  tmp___0 = current_thread_info___0();
#line 547
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 547
  tmp___0->addr_limit = __constr_expr_0;
#line 548
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 549
  tmp___1 = current_thread_info___0();
#line 549
  tmp___1->addr_limit = oldfs;
#line 551
  return (rv);
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 557
  iov.iov_base = buf;
#line 557
  iov.iov_len = size;
#line 561
  msg.msg_name = 0;
#line 561
  msg.msg_namelen = 0;
#line 561
  msg.msg_iov = (struct iovec *)(& iov);
#line 561
  msg.msg_iovlen = 1UL;
#line 561
  msg.msg_control = 0;
#line 561
  msg.msg_controllen = 0UL;
#line 561
  msg.msg_flags = 16640U;
#line 568
  tmp = current_thread_info___0();
#line 568
  oldfs = tmp->addr_limit;
#line 569
  tmp___0 = current_thread_info___0();
#line 569
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 569
  tmp___0->addr_limit = __constr_expr_0;
  ldv_50527: 
#line 572
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 573
  if ((size_t )rv == size) {
#line 574
    goto ldv_50526;
  } else {

  }
#line 581
  if (rv < 0) {
#line 582
    if (rv == -104) {
#line 583
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 584
    if (rv != -512) {
#line 585
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 586
    goto ldv_50526;
  } else
#line 587
  if (rv == 0) {
#line 588
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 589
    goto ldv_50526;
  } else {
#line 595
    goto ldv_50526;
  }
#line 597
  goto ldv_50527;
  ldv_50526: 
#line 599
  tmp___1 = current_thread_info___0();
#line 599
  tmp___1->addr_limit = oldfs;
#line 601
  if ((size_t )rv != size) {
#line 602
    val.i = 0U;
#line 602
    val.ldv_38794.conn = 4U;
#line 602
    mask.i = 0U;
#line 602
    mask.ldv_38794.conn = 31U;
#line 602
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 604
  return (rv);
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 616
  if (snd != 0U) {
#line 617
    (sock->sk)->sk_sndbuf = (int )snd;
#line 618
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 620
  if (rcv != 0U) {
#line 621
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 622
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 624
  return;
}
}
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 632
  disconnect_on_error = 1;
#line 634
  tmp = get_net_conf(mdev);
#line 634
  if (tmp == 0) {
#line 635
    return (0);
  } else {

  }
#line 637
  what = "sock_create_kern";
#line 638
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 640
  if (err < 0) {
#line 641
    sock = 0;
#line 642
    goto out;
  } else {

  }
#line 645
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 645
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 645
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 647
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 657
  __min1 = (mdev->net_conf)->my_addr_len;
#line 657
  __min2 = 28;
#line 657
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 657
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 659
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 660
    src_in6.sin6_port = 0U;
  } else {
#line 662
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 664
  what = "bind before connect";
#line 665
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 668
  if (err < 0) {
#line 669
    goto out;
  } else {

  }
#line 673
  disconnect_on_error = 0;
#line 674
  what = "connect";
#line 675
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 680
  if (err < 0) {
#line 681
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 682
      sock_release(sock);
#line 683
      sock = 0;
    } else {

    }
#line 685
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 692
    disconnect_on_error = 0;
#line 693
    goto ldv_50564;
    default: 
#line 695
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_50564: ;
#line 697
    if (disconnect_on_error != 0) {
#line 698
      val.i = 0U;
#line 698
      val.ldv_38794.conn = 1U;
#line 698
      mask.i = 0U;
#line 698
      mask.ldv_38794.conn = 31U;
#line 698
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 700
  put_net_conf(mdev);
#line 701
  return (sock);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 707
  s_estab = 0;
#line 710
  tmp = get_net_conf(mdev);
#line 710
  if (tmp == 0) {
#line 711
    return (0);
  } else {

  }
#line 713
  what = "sock_create_kern";
#line 714
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 716
  if (err != 0) {
#line 717
    s_listen = 0;
#line 718
    goto out;
  } else {

  }
#line 721
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 722
  tmp___0 = random32();
#line 722
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 724
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 725
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 726
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 727
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 730
  what = "bind before listen";
#line 731
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 734
  if (err < 0) {
#line 735
    goto out;
  } else {

  }
#line 737
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 740
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 741
    sock_release(s_listen);
  } else {

  }
#line 742
  if (err < 0) {
#line 743
    if ((err != -11 && err != -4) && err != -512) {
#line 744
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 745
      val.i = 0U;
#line 745
      val.ldv_38794.conn = 1U;
#line 745
      mask.i = 0U;
#line 745
      mask.ldv_38794.conn = 31U;
#line 745
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 748
  put_net_conf(mdev);
#line 750
  return (s_estab);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 756
  h = & mdev->data.sbuf.header.h80;
#line 758
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 758
  return (tmp);
}
}
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 763
  h = & mdev->data.rbuf.header.h80;
#line 766
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 768
  if (rr == 8 && h->magic == 1728214147U) {
#line 769
    tmp = __fswab16((int )h->command);
#line 769
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 771
  return (65535);
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 784
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 785
    return (0);
  } else {

  }
#line 787
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 789
  if (rr > 0 || rr == -11) {
#line 790
    return (1);
  } else {
#line 792
    sock_release(*sock);
#line 793
    *sock = 0;
#line 794
    return (0);
  }
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state __ns ;

  {
#line 812
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            812);
  } else {

  }
#line 814
  val.i = 0U;
#line 814
  val.ldv_38794.conn = 8U;
#line 814
  mask.i = 0U;
#line 814
  mask.ldv_38794.conn = 31U;
#line 814
  tmp = drbd_request_state(mdev, mask, val);
#line 814
  if (tmp <= 0) {
#line 815
    return (-2);
  } else {

  }
#line 817
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 819
  sock = 0;
#line 820
  msock = 0;
  ldv_50624: 
#line 823
  try = 0;
  ldv_50616: 
#line 825
  s = drbd_try_connect(mdev);
#line 826
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 827
    goto ldv_50615;
  } else {
#line 826
    try = try + 1;
#line 826
    if (try > 2) {
#line 827
      goto ldv_50615;
    } else {

    }
  }
#line 829
  schedule_timeout_interruptible(25L);
#line 830
  goto ldv_50616;
  ldv_50615: ;
#line 832
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 833
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 834
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 835
      sock = s;
#line 836
      s = 0;
    } else
#line 837
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 838
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 839
      msock = s;
#line 840
      s = 0;
    } else {
#line 842
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 843
      goto out_release_sockets;
    }
  } else {

  }
#line 847
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 848
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 849
    ok = drbd_socket_okay(mdev, & sock);
#line 850
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 850
    ok = tmp___0 != 0 && ok != 0;
#line 851
    if (ok != 0) {
#line 852
      goto ldv_50618;
    } else {

    }
  } else {

  }
  retry: 
#line 856
  s = drbd_wait_for_connect(mdev);
#line 857
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 858
    tmp___1 = drbd_recv_fp(mdev, s);
#line 858
    try = (int )tmp___1;
#line 859
    drbd_socket_okay(mdev, & sock);
#line 860
    drbd_socket_okay(mdev, & msock);
#line 861
    switch (try) {
    case 65522: ;
#line 863
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 864
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 865
      sock_release(sock);
    } else {

    }
#line 867
    sock = s;
#line 868
    goto ldv_50621;
    case 65521: ;
#line 870
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 871
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 872
      sock_release(msock);
    } else {

    }
#line 874
    msock = s;
#line 875
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 876
    goto ldv_50621;
    default: 
#line 878
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 879
    sock_release(s);
#line 880
    tmp___2 = random32();
#line 880
    if ((int )tmp___2 & 1) {
#line 881
      goto retry;
    } else {

    }
    }
    ldv_50621: ;
  } else {

  }
#line 885
  if ((int )mdev->state.ldv_38794.conn <= 1) {
#line 886
    goto out_release_sockets;
  } else {

  }
#line 887
  tmp___5 = get_current();
#line 887
  tmp___6 = signal_pending(tmp___5);
#line 887
  if (tmp___6 != 0) {
#line 888
    tmp___3 = get_current();
#line 888
    flush_signals(tmp___3);
#line 889
    __asm__  volatile   ("": : : "memory");
#line 890
    tmp___4 = get_t_state(& mdev->receiver);
#line 890
    if ((unsigned int )tmp___4 == 2U) {
#line 891
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 894
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 895
    ok = drbd_socket_okay(mdev, & sock);
#line 896
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 896
    ok = tmp___7 != 0 && ok != 0;
#line 897
    if (ok != 0) {
#line 898
      goto ldv_50618;
    } else {

    }
  } else {

  }
#line 900
  goto ldv_50624;
  ldv_50618: 
#line 902
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 903
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 905
  (sock->sk)->sk_allocation = 16U;
#line 906
  (msock->sk)->sk_allocation = 16U;
#line 908
  (sock->sk)->sk_priority = 4U;
#line 909
  (msock->sk)->sk_priority = 6U;
#line 916
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 916
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 916
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 919
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 920
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 924
  drbd_tcp_nodelay(sock);
#line 925
  drbd_tcp_nodelay(msock);
#line 927
  mdev->data.socket = sock;
#line 928
  mdev->meta.socket = msock;
#line 929
  mdev->last_received = jiffies;
#line 931
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 931
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            931);
  } else {

  }
#line 933
  h = drbd_do_handshake(mdev);
#line 934
  if (h <= 0) {
#line 935
    return (h);
  } else {

  }
#line 937
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 939
    tmp___9 = drbd_do_auth(mdev);
#line 939
    switch (tmp___9) {
    case -1: 
#line 941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 942
    return (-1);
    case 0: 
#line 944
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 945
    return (0);
    }
  } else {

  }
#line 949
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 950
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 952
  atomic_set(& mdev->packet_seq, 0);
#line 953
  mdev->peer_seq = 0U;
#line 955
  tmp___10 = drbd_send_protocol(mdev);
#line 955
  if (tmp___10 == -1) {
#line 956
    return (-1);
  } else {

  }
#line 957
  set_bit(30U, (unsigned long volatile   *)(& mdev->flags));
#line 958
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 959
  drbd_send_sizes(mdev, 0, 0);
#line 960
  drbd_send_uuids(mdev);
#line 961
  drbd_send_current_state(mdev);
#line 962
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 963
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 965
  spin_lock_irq(& mdev->req_lock);
#line 966
  __ns.i = mdev->state.i;
#line 966
  __ns.ldv_38794.conn = 9U;
#line 966
  rv = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 967
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 144U) {
#line 968
    clear_bit(30, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 969
  spin_unlock_irq(& mdev->req_lock);
#line 971
  if ((int )rv <= 0) {
#line 972
    return (0);
  } else {

  }
#line 974
  drbd_thread_start(& mdev->asender);
#line 975
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 977
  return (1);
  out_release_sockets: ;
#line 980
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 981
    sock_release(sock);
  } else {

  }
#line 982
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 983
    sock_release(msock);
  } else {

  }
#line 984
  return (-1);
}
}
#line 987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 989
  h = & mdev->data.rbuf.header;
#line 992
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 993
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 993
  if (tmp___1 != 0L) {
#line 994
    tmp = get_current();
#line 994
    tmp___0 = signal_pending(tmp);
#line 994
    if (tmp___0 == 0) {
#line 995
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 996
    return (0);
  } else {

  }
#line 999
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 999
  if (tmp___9 != 0L) {
#line 1000
    tmp___2 = __fswab16((int )h->h80.command);
#line 1000
    *cmd = (enum drbd_packets )tmp___2;
#line 1001
    tmp___3 = __fswab16((int )h->h80.length);
#line 1001
    *packet_size = (unsigned int )tmp___3;
  } else
#line 1002
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1003
    tmp___4 = __fswab16((int )h->h95.command);
#line 1003
    *cmd = (enum drbd_packets )tmp___4;
#line 1004
    tmp___5 = __fswab32(h->h95.length);
#line 1004
    *packet_size = tmp___5;
  } else {
#line 1006
    tmp___6 = __fswab16((int )h->h80.length);
#line 1006
    tmp___7 = __fswab16((int )h->h80.command);
#line 1006
    tmp___8 = __fswab32(h->h80.magic);
#line 1006
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1010
    return (0);
  }
#line 1012
  mdev->last_received = jiffies;
#line 1014
  return (1);
}
}
#line 1017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1021
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1021
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1021
    if (tmp != 0) {
#line 1022
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1024
      if (rv != 0) {
#line 1025
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                  rv);
#line 1029
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1031
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1033
  return;
}
}
#line 1041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1047
  rv = FE_STILL_LIVE;
#line 1049
  spin_lock(& mdev->epoch_lock);
  ldv_50659: 
#line 1051
  next_epoch = 0;
#line 1053
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1055
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1057
  atomic_dec(& epoch->active);
#line 1058
  goto ldv_50649;
  case 1U: 
#line 1060
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1061
  goto ldv_50649;
  case 2U: ;
#line 1064
  goto ldv_50649;
  }
  ldv_50649: ;
#line 1067
  if (epoch_size != 0) {
#line 1067
    tmp___2 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1067
    if (tmp___2 == 0) {
#line 1067
      tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1067
      if (tmp___3 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1070
        if (((unsigned int )ev & 32U) == 0U) {
#line 1071
          spin_unlock(& mdev->epoch_lock);
#line 1072
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1073
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1075
        tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1075
        if (tmp___1 != 0) {
#line 1076
          atomic_dec(& mdev->unacked_cnt);
#line 1076
          tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1076
          if (tmp___0 < 0) {
#line 1076
            tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1076
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                    "drbd_may_finish_epoch", 1076, tmp);
          } else {

          }
        } else {

        }
#line 1078
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1079
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1079
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1080
          list_del(& epoch->list);
#line 1081
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1082
          mdev->epochs = mdev->epochs - 1U;
#line 1083
          kfree((void const   *)epoch);
#line 1085
          if ((unsigned int )rv == 0U) {
#line 1086
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1088
          epoch->flags = 0UL;
#line 1089
          atomic_set(& epoch->epoch_size, 0);
#line 1091
          if ((unsigned int )rv == 0U) {
#line 1092
            rv = FE_RECYCLED;
          } else {

          }
#line 1093
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1097
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1098
    goto ldv_50658;
  } else {

  }
#line 1100
  epoch = next_epoch;
#line 1101
  goto ldv_50659;
  ldv_50658: 
#line 1103
  spin_unlock(& mdev->epoch_lock);
#line 1105
  return (rv);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1116
  write_ordering_str[0] = (char *)"none";
#line 1116
  write_ordering_str[1] = (char *)"drain";
#line 1116
  write_ordering_str[2] = (char *)"flush";
#line 1122
  pwo = mdev->write_ordering;
#line 1123
  _min1 = pwo;
#line 1123
  _min2 = wo;
#line 1123
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1124
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1125
    wo = WO_drain_io;
  } else {

  }
#line 1126
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1127
    wo = WO_none;
  } else {

  }
#line 1128
  mdev->write_ordering = wo;
#line 1129
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1130
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1131
  return;
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1153
  bios = 0;
#line 1155
  page = e->pages;
#line 1156
  sector = e->sector;
#line 1157
  ds = e->size;
#line 1158
  n_bios = 0U;
#line 1159
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1160
  err = -12;
  next_bio: 
#line 1171
  bio = bio_alloc(16U, nr_pages);
#line 1172
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1174
    goto fail;
  } else {

  }
#line 1177
  bio->bi_sector = sector;
#line 1178
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1179
  bio->bi_rw = (unsigned long )rw;
#line 1180
  bio->bi_private = (void *)e;
#line 1181
  bio->bi_end_io = & drbd_endio_sec;
#line 1183
  bio->bi_next = bios;
#line 1184
  bios = bio;
#line 1185
  n_bios = n_bios + 1U;
#line 1187
  goto ldv_50691;
  ldv_50690: 
#line 1188
  __min1 = ds;
#line 1188
  __min2 = 4096U;
#line 1188
  len = __min1 < __min2 ? __min1 : __min2;
#line 1189
  tmp = bio_add_page(bio, page, len, 0U);
#line 1189
  if (tmp == 0) {
#line 1193
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1194
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1198
      err = -28;
#line 1199
      goto fail;
    } else {

    }
#line 1201
    goto next_bio;
  } else {

  }
#line 1203
  ds = ds - len;
#line 1204
  sector = (sector_t )(len >> 9) + sector;
#line 1205
  nr_pages = nr_pages - 1U;
#line 1187
  page = page_chain_next(page);
  ldv_50691: ;
#line 1187
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1187
    tmp___0 = page_chain_next(page);
#line 1187
    __builtin_prefetch((void const   *)tmp___0);
#line 1187
    if (1 != 0) {
#line 1188
      goto ldv_50690;
    } else {
#line 1190
      goto ldv_50692;
    }
  } else {

  }
  ldv_50692: ;
#line 1207
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1207
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1207);
  } else {

  }
#line 1208
  if (ds != 0U) {
#line 1208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1208);
  } else {

  }
#line 1210
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_50693: 
#line 1212
  bio = bios;
#line 1213
  bios = bios->bi_next;
#line 1214
  bio->bi_next = 0;
#line 1216
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1217
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1218
    goto ldv_50693;
  } else {

  }

#line 1218
  return (0);
  fail: ;
#line 1221
  goto ldv_50696;
  ldv_50695: 
#line 1222
  bio = bios;
#line 1223
  bios = bios->bi_next;
#line 1224
  bio_put(bio);
  ldv_50696: ;
#line 1221
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1222
    goto ldv_50695;
  } else {

  }

#line 1226
  return (err);
}
}
#line 1229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1232
  p = & mdev->data.rbuf.barrier;
#line 1235
  inc_unacked(mdev);
#line 1237
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1238
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1238
  rv = (int )tmp;
#line 1245
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1247
  if (rv == 2) {
#line 1248
    return (1);
  } else {

  }
#line 1252
  tmp___0 = kmalloc(40UL, 16U);
#line 1252
  epoch = (struct drbd_epoch *)tmp___0;
#line 1253
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1254
    goto ldv_50707;
  } else {
#line 1256
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1261
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1262
  drbd_flush(mdev);
#line 1264
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1264
  if (tmp___2 != 0) {
#line 1265
    tmp___1 = kmalloc(40UL, 16U);
#line 1265
    epoch = (struct drbd_epoch *)tmp___1;
#line 1266
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1267
      goto ldv_50707;
    } else {

    }
  } else {

  }
#line 1270
  epoch = mdev->current_epoch;
#line 1271
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1271
  if (tmp___3 == 0) {
#line 1271
    goto ldv_50710;
  } else {

  }
#line 1271
  tmp___4 = get_current();
#line 1271
  __wait.flags = 0U;
#line 1271
  __wait.private = (void *)tmp___4;
#line 1271
  __wait.func = & autoremove_wake_function;
#line 1271
  __wait.task_list.next = & __wait.task_list;
#line 1271
  __wait.task_list.prev = & __wait.task_list;
  ldv_50713: 
#line 1271
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1271
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1271
  if (tmp___5 == 0) {
#line 1271
    goto ldv_50712;
  } else {

  }
#line 1271
  schedule();
#line 1271
  goto ldv_50713;
  ldv_50712: 
#line 1271
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_50710: 
#line 1273
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1273
  if (tmp___6 != 0) {
#line 1273
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1273);
  } else {

  }
#line 1274
  if (epoch->flags != 0UL) {
#line 1274
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1274);
  } else {

  }
#line 1276
  return (1);
  default: 
#line 1278
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1279
  return (0);
  }
  ldv_50707: 
#line 1282
  epoch->flags = 0UL;
#line 1283
  atomic_set(& epoch->epoch_size, 0);
#line 1284
  atomic_set(& epoch->active, 0);
#line 1286
  spin_lock(& mdev->epoch_lock);
#line 1287
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1287
  if (tmp___7 != 0) {
#line 1288
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1289
    mdev->current_epoch = epoch;
#line 1290
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1293
    kfree((void const   *)epoch);
  }
#line 1295
  spin_unlock(& mdev->epoch_lock);
#line 1297
  return (1);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  int _b___1 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1305
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1305
  capacity = tmp;
#line 1309
  dig_in = mdev->int_dig_in;
#line 1310
  dig_vv = mdev->int_dig_vv;
#line 1313
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1313
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1313
    dgs = (int )tmp___0;
  } else {
#line 1313
    dgs = 0;
  }
#line 1316
  if (dgs != 0) {
#line 1317
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1318
    if (rr != dgs) {
#line 1319
      tmp___1 = get_current();
#line 1319
      tmp___2 = signal_pending(tmp___1);
#line 1319
      if (tmp___2 == 0) {
#line 1320
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1323
      return (0);
    } else {

    }
  } else {

  }
#line 1327
  data_size = data_size - dgs;
#line 1329
  _b = data_size == 0;
#line 1329
  if (_b != 0) {
#line 1329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1329);
  } else {

  }
#line 1329
  if (_b != 0) {
#line 1329
    return (0);
  } else {

  }
#line 1330
  _b___0 = (data_size & 511) != 0;
#line 1330
  if (_b___0 != 0) {
#line 1330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1330);
  } else {

  }
#line 1330
  if (_b___0 != 0) {
#line 1330
    return (0);
  } else {

  }
#line 1331
  _b___1 = (unsigned int )data_size > 131072U;
#line 1331
  if (_b___1 != 0) {
#line 1331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1331);
  } else {

  }
#line 1331
  if (_b___1 != 0) {
#line 1331
    return (0);
  } else {

  }
#line 1335
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1340
    return (0);
  } else {

  }
#line 1346
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1347
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1348
    return (0);
  } else {

  }
#line 1350
  ds = data_size;
#line 1351
  page = e->pages;
#line 1352
  goto ldv_50743;
  ldv_50742: 
#line 1353
  __min1 = ds;
#line 1353
  __min2 = 4096;
#line 1353
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1354
  tmp___3 = kmap(page);
#line 1354
  data = (unsigned long *)tmp___3;
#line 1355
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1356
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1356
  if (tmp___4 != 0) {
#line 1357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1358
    *data = ~ *data;
  } else {

  }
#line 1360
  kunmap(page);
#line 1361
  if ((unsigned int )rr != len) {
#line 1362
    drbd_free_some_ee(mdev, e, 0);
#line 1363
    tmp___5 = get_current();
#line 1363
    tmp___6 = signal_pending(tmp___5);
#line 1363
    if (tmp___6 == 0) {
#line 1364
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1366
    return (0);
  } else {

  }
#line 1368
  ds = ds - rr;
#line 1352
  page = page_chain_next(page);
  ldv_50743: ;
#line 1352
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1352
    tmp___7 = page_chain_next(page);
#line 1352
    __builtin_prefetch((void const   *)tmp___7);
#line 1352
    if (1 != 0) {
#line 1353
      goto ldv_50742;
    } else {
#line 1355
      goto ldv_50744;
    }
  } else {

  }
  ldv_50744: ;
#line 1371
  if (dgs != 0) {
#line 1372
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1373
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1373
    if (tmp___8 != 0) {
#line 1374
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1376
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1378
      drbd_free_some_ee(mdev, e, 0);
#line 1379
      return (0);
    } else {

    }
  } else {

  }
#line 1382
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1383
  return (e);
}
}
#line 1389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1392
  rv = 1;
#line 1395
  if (data_size == 0) {
#line 1396
    return (1);
  } else {

  }
#line 1398
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1400
  data = kmap(page);
#line 1401
  goto ldv_50764;
  ldv_50763: 
#line 1402
  __min1 = data_size;
#line 1402
  __min2 = 4096;
#line 1402
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1403
  __min1___1 = data_size;
#line 1403
  __min2___1 = 4096;
#line 1403
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1404
    rv = 0;
#line 1405
    tmp = get_current();
#line 1405
    tmp___0 = signal_pending(tmp);
#line 1405
    if (tmp___0 == 0) {
#line 1408
      __min1___0 = data_size;
#line 1408
      __min2___0 = 4096;
#line 1408
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1409
    goto ldv_50762;
  } else {

  }
#line 1411
  data_size = data_size - rr;
  ldv_50764: ;
#line 1401
  if (data_size != 0) {
#line 1402
    goto ldv_50763;
  } else {

  }
  ldv_50762: 
#line 1413
  kunmap(page);
#line 1414
  drbd_pp_free(mdev, page, 0);
#line 1415
  return (rv);
}
}
#line 1418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1424
  dig_in = mdev->int_dig_in;
#line 1425
  dig_vv = mdev->int_dig_vv;
#line 1427
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1427
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1427
    dgs = (int )tmp;
  } else {
#line 1427
    dgs = 0;
  }
#line 1430
  if (dgs != 0) {
#line 1431
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1432
    if (rr != dgs) {
#line 1433
      tmp___0 = get_current();
#line 1433
      tmp___1 = signal_pending(tmp___0);
#line 1433
      if (tmp___1 == 0) {
#line 1434
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1437
      return (0);
    } else {

    }
  } else {

  }
#line 1441
  data_size = data_size - dgs;
#line 1445
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1447
  bio = req->master_bio;
#line 1448
  if (bio->bi_sector != sector) {
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1448);
  } else {

  }
#line 1450
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1450
  i = (int )bio->bi_idx;
#line 1450
  goto ldv_50783;
  ldv_50782: 
#line 1451
  __min1 = data_size;
#line 1451
  __min2 = (int )bvec->bv_len;
#line 1451
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1452
  tmp___2 = kmap(bvec->bv_page);
#line 1452
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1455
  kunmap(bvec->bv_page);
#line 1456
  if (rr != expect) {
#line 1457
    tmp___3 = get_current();
#line 1457
    tmp___4 = signal_pending(tmp___3);
#line 1457
    if (tmp___4 == 0) {
#line 1458
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1461
    return (0);
  } else {

  }
#line 1463
  data_size = data_size - rr;
#line 1450
  bvec = bvec + 1;
#line 1450
  i = i + 1;
  ldv_50783: ;
#line 1450
  if ((int )bio->bi_vcnt > i) {
#line 1451
    goto ldv_50782;
  } else {

  }

#line 1466
  if (dgs != 0) {
#line 1467
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1468
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1468
    if (tmp___5 != 0) {
#line 1469
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1470
      return (0);
    } else {

    }
  } else {

  }
#line 1474
  if (data_size != 0) {
#line 1474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1474);
  } else {

  }
#line 1475
  return (1);
}
}
#line 1480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1482
  e = (struct drbd_epoch_entry *)w;
#line 1483
  sector = e->sector;
#line 1486
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1486
  if (tmp == 0) {
#line 1486
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1486);
  } else {

  }
#line 1488
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1488
  if (tmp___0 != 0L) {
#line 1489
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1489U);
#line 1490
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1493
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1495
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1497
  atomic_dec(& mdev->unacked_cnt);
#line 1497
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1497
  if (tmp___2 < 0) {
#line 1497
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1497, tmp___1);
  } else {

  }
#line 1499
  return (ok);
}
}
#line 1502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1506
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1507
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1508
    goto fail;
  } else {

  }
#line 1510
  atomic_dec(& mdev->rs_pending_cnt);
#line 1510
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1510
  if (tmp___0 < 0) {
#line 1510
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1510
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1510, tmp);
  } else {

  }
#line 1512
  inc_unacked(mdev);
#line 1516
  e->w.cb = & e_end_resync_block;
#line 1518
  spin_lock_irq(& mdev->req_lock);
#line 1519
  list_add(& e->w.list, & mdev->sync_ee);
#line 1520
  spin_unlock_irq(& mdev->req_lock);
#line 1522
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1523
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1523
  if (tmp___1 == 0) {
#line 1524
    return (1);
  } else {

  }
#line 1527
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1528
  spin_lock_irq(& mdev->req_lock);
#line 1529
  list_del(& e->w.list);
#line 1530
  spin_unlock_irq(& mdev->req_lock);
#line 1532
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1534
  put_ldev(mdev);
#line 1535
  return (0);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1543
  p = & mdev->data.rbuf.data;
#line 1545
  tmp = __fswab64(p->sector);
#line 1545
  sector = (sector_t )tmp;
#line 1547
  spin_lock_irq(& mdev->req_lock);
#line 1548
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1549
  spin_unlock_irq(& mdev->req_lock);
#line 1550
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1550
  if (tmp___0 != 0L) {
#line 1551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1552
    return (0);
  } else {

  }
#line 1558
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1560
  if (ok != 0) {
#line 1561
    req_mod(req, data_received);
  } else {

  }
#line 1566
  return (ok);
}
}
#line 1569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1573
  p = & mdev->data.rbuf.data;
#line 1575
  tmp = __fswab64(p->sector);
#line 1575
  sector = (sector_t )tmp;
#line 1576
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1576
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1576);
  } else {

  }
#line 1578
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1578
  if (tmp___1 != 0) {
#line 1582
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1584
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1584
    if (tmp___0 != 0) {
#line 1585
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1587
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1589
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1592
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1594
  return (ok);
}
}
#line 1600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1602
  e = (struct drbd_epoch_entry *)w;
#line 1603
  sector = e->sector;
#line 1604
  ok = 1;
#line 1606
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1607
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1607
    if (tmp___0 != 0L) {
#line 1608
      pcmd = ((int )mdev->state.ldv_38794.conn > 15 && (int )mdev->state.ldv_38794.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1612
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1612
      ok = tmp & ok;
#line 1613
      if (pcmd == 23) {
#line 1614
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1614U);
      } else {

      }
    } else {
#line 1616
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1620
    atomic_dec(& mdev->unacked_cnt);
#line 1620
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1620
    if (tmp___2 < 0) {
#line 1620
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1620
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1620, tmp___1);
    } else {

    }
  } else {

  }
#line 1624
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1625
    spin_lock_irq(& mdev->req_lock);
#line 1626
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1626
    if (tmp___3 != 0) {
#line 1626
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1626);
    } else {

    }
#line 1627
    hlist_del_init(& e->collision);
#line 1628
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1630
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1630
    if (tmp___4 == 0) {
#line 1630
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1630);
    } else {

    }
  }
#line 1633
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1635
  return (ok);
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1640
  e = (struct drbd_epoch_entry *)w;
#line 1641
  ok = 1;
#line 1643
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1643
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1643);
  } else {

  }
#line 1644
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1646
  spin_lock_irq(& mdev->req_lock);
#line 1647
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1647
  if (tmp != 0) {
#line 1647
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1647);
  } else {

  }
#line 1648
  hlist_del_init(& e->collision);
#line 1649
  spin_unlock_irq(& mdev->req_lock);
#line 1651
  atomic_dec(& mdev->unacked_cnt);
#line 1651
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1651
  if (tmp___1 < 0) {
#line 1651
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1651
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1651, tmp___0);
  } else {

  }
#line 1653
  return (ok);
}
}
#line 1656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_epoch_entry *data_e ) 
{ 
  struct drbd_epoch_entry *rs_e ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1660
  rv = 0;
#line 1662
  spin_lock_irq(& mdev->req_lock);
#line 1663
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1663
  rs_e = (struct drbd_epoch_entry *)__mptr;
#line 1663
  goto ldv_50862;
  ldv_50861: 
#line 1664
  tmp = overlaps(data_e->sector, (int )data_e->size, rs_e->sector, (int )rs_e->size);
#line 1664
  if (tmp != 0) {
#line 1665
    rv = 1;
#line 1666
    goto ldv_50860;
  } else {

  }
#line 1663
  __mptr___0 = (struct list_head  const  *)rs_e->w.list.next;
#line 1663
  rs_e = (struct drbd_epoch_entry *)__mptr___0;
  ldv_50862: ;
#line 1663
  if ((unsigned long )(& rs_e->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1664
    goto ldv_50861;
  } else {

  }
  ldv_50860: 
#line 1669
  spin_unlock_irq(& mdev->req_lock);
#line 1671
  return (rv);
}
}
#line 1695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1697
  tmp = get_current();
#line 1697
  wait.flags = 0U;
#line 1697
  wait.private = (void *)tmp;
#line 1697
  wait.func = & autoremove_wake_function;
#line 1697
  wait.task_list.next = & wait.task_list;
#line 1697
  wait.task_list.prev = & wait.task_list;
#line 1700
  ret = 0;
#line 1701
  spin_lock(& mdev->peer_seq_lock);
  ldv_50872: 
#line 1703
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1704
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1704
  if (tmp___0 <= 0) {
#line 1705
    goto ldv_50871;
  } else {

  }
#line 1706
  tmp___1 = get_current();
#line 1706
  tmp___2 = signal_pending(tmp___1);
#line 1706
  if (tmp___2 != 0) {
#line 1707
    ret = -512;
#line 1708
    goto ldv_50871;
  } else {

  }
#line 1710
  p_seq = mdev->peer_seq;
#line 1711
  spin_unlock(& mdev->peer_seq_lock);
#line 1712
  timeout = schedule_timeout(7500L);
#line 1713
  spin_lock(& mdev->peer_seq_lock);
#line 1714
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1715
    ret = -110;
#line 1716
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1717
    goto ldv_50871;
  } else {

  }
#line 1719
  goto ldv_50872;
  ldv_50871: 
#line 1720
  finish_wait(& mdev->seq_wait, & wait);
#line 1721
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1722
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1723
  spin_unlock(& mdev->peer_seq_lock);
#line 1724
  return (ret);
}
}
#line 1730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1732
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 1024 : 0)) | ((dpf & 32U) != 0U ? 2048 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  bool tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  bool tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 1743
  p = & mdev->data.rbuf.data;
#line 1744
  rw = 1;
#line 1747
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1747
  if (tmp___1 == 0) {
#line 1748
    spin_lock(& mdev->peer_seq_lock);
#line 1749
    tmp = __fswab32(p->seq_num);
#line 1749
    if (mdev->peer_seq + 1U == tmp) {
#line 1750
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1751
    spin_unlock(& mdev->peer_seq_lock);
#line 1753
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1754
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1755
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1755
    return (tmp___0);
  } else {

  }
#line 1763
  tmp___2 = __fswab64(p->sector);
#line 1763
  sector = (sector_t )tmp___2;
#line 1764
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1765
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1766
    put_ldev(mdev);
#line 1767
    return (0);
  } else {

  }
#line 1770
  e->w.cb = & e_end_block;
#line 1772
  tmp___3 = __fswab32(p->dp_flags);
#line 1772
  dp_flags = tmp___3;
#line 1773
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1773
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1775
  if ((dp_flags & 4U) != 0U) {
#line 1776
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1778
  spin_lock(& mdev->epoch_lock);
#line 1779
  e->epoch = mdev->current_epoch;
#line 1780
  atomic_inc(& (e->epoch)->epoch_size);
#line 1781
  atomic_inc(& (e->epoch)->active);
#line 1782
  spin_unlock(& mdev->epoch_lock);
#line 1785
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1786
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1790
    size = (int const   )e->size;
#line 1791
    tmp___5 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1791
    discard = tmp___5;
#line 1792
    tmp___6 = get_current();
#line 1792
    wait.flags = 0U;
#line 1792
    wait.private = (void *)tmp___6;
#line 1792
    wait.func = & autoremove_wake_function;
#line 1792
    wait.task_list.next = & wait.task_list;
#line 1792
    wait.task_list.prev = & wait.task_list;
#line 1798
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1798
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1798);
    } else {

    }
#line 1799
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1799
    if (tmp___7 != 0L) {
#line 1799
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1799), "i" (12UL));
      ldv_50894: ;
#line 1799
      goto ldv_50894;
    } else {

    }
#line 1800
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1800
    if (tmp___8 != 0L) {
#line 1800
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1800), "i" (12UL));
      ldv_50895: ;
#line 1800
      goto ldv_50895;
    } else {

    }
#line 1836
    tmp___9 = __fswab32(p->seq_num);
#line 1836
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1836
    if (tmp___10 != 0) {
#line 1837
      goto out_interrupted;
    } else {

    }
#line 1839
    spin_lock_irq(& mdev->req_lock);
#line 1841
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1841
    hlist_add_head(& e->collision, tmp___11);
#line 1844
    slot = tl_hash_slot(mdev, sector);
#line 1845
    first = 1;
    ldv_50906: 
#line 1847
    have_unacked = 0;
#line 1848
    have_conflict = 0;
#line 1849
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1851
    n = slot->first;
#line 1851
    goto ldv_50903;
    ldv_50902: 
#line 1852
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1852
    if (tmp___14 != 0) {
#line 1855
      if (first != 0) {
#line 1856
        tmp___12 = get_current();
#line 1856
        tmp___13 = get_current();
#line 1856
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1861
      if ((i->rq_state & 16UL) != 0UL) {
#line 1862
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1863
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1851
    n = n->next;
    ldv_50903: ;
#line 1851
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1851
      __mptr = (struct hlist_node  const  *)n;
#line 1851
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1851
      if (1 != 0) {
#line 1852
        goto ldv_50902;
      } else {
#line 1854
        goto ldv_50904;
      }
    } else {

    }
    ldv_50904: ;
#line 1867
    if (have_conflict == 0) {
#line 1868
      goto ldv_50905;
    } else {

    }
#line 1871
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1872
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1874
      inc_unacked(mdev);
#line 1875
      e->w.cb = & e_send_discard_ack;
#line 1876
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1878
      spin_unlock_irq(& mdev->req_lock);
#line 1883
      put_ldev(mdev);
#line 1884
      wake_asender(mdev);
#line 1885
      finish_wait(& mdev->misc_wait, & wait);
#line 1886
      return (1);
    } else {

    }
#line 1889
    tmp___15 = get_current();
#line 1889
    tmp___16 = signal_pending(tmp___15);
#line 1889
    if (tmp___16 != 0) {
#line 1890
      hlist_del_init(& e->collision);
#line 1892
      spin_unlock_irq(& mdev->req_lock);
#line 1894
      finish_wait(& mdev->misc_wait, & wait);
#line 1895
      goto out_interrupted;
    } else {

    }
#line 1898
    spin_unlock_irq(& mdev->req_lock);
#line 1899
    if (first != 0) {
#line 1900
      first = 0;
#line 1901
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1903
    if (discard != 0) {
#line 1906
      if (have_unacked != 0) {
#line 1906
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1906);
      } else {

      }
    } else {

    }
#line 1908
    schedule();
#line 1909
    spin_lock_irq(& mdev->req_lock);
#line 1910
    goto ldv_50906;
    ldv_50905: 
#line 1911
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1914
  list_add(& e->w.list, & mdev->active_ee);
#line 1915
  spin_unlock_irq(& mdev->req_lock);
#line 1917
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) {
#line 1918
    tmp___17 = overlapping_resync_write(mdev, e);
#line 1918
    if (tmp___17) {
#line 1918
      tmp___18 = 0;
    } else {
#line 1918
      tmp___18 = 1;
    }
#line 1918
    if (tmp___18) {
#line 1918
      goto ldv_50907;
    } else {

    }
#line 1918
    tmp___19 = get_current();
#line 1918
    __wait.flags = 0U;
#line 1918
    __wait.private = (void *)tmp___19;
#line 1918
    __wait.func = & autoremove_wake_function;
#line 1918
    __wait.task_list.next = & __wait.task_list;
#line 1918
    __wait.task_list.prev = & __wait.task_list;
    ldv_50910: 
#line 1918
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1918
    tmp___20 = overlapping_resync_write(mdev, e);
#line 1918
    if (tmp___20) {
#line 1918
      tmp___21 = 0;
    } else {
#line 1918
      tmp___21 = 1;
    }
#line 1918
    if (tmp___21) {
#line 1918
      goto ldv_50909;
    } else {

    }
#line 1918
    schedule();
#line 1918
    goto ldv_50910;
    ldv_50909: 
#line 1918
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_50907: ;
  } else {

  }
#line 1920
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1922
  inc_unacked(mdev);
#line 1925
  goto ldv_50912;
  case 2: 
#line 1929
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1930
  goto ldv_50912;
  case 1: ;
#line 1933
  goto ldv_50912;
  }
  ldv_50912: ;
#line 1936
  if ((int )mdev->state.ldv_38794.pdsk <= 3) {
#line 1938
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1938U);
#line 1939
    e->flags = e->flags | 1UL;
#line 1940
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1941
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1944
  tmp___22 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1944
  if (tmp___22 == 0) {
#line 1945
    return (1);
  } else {

  }
#line 1948
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1949
  spin_lock_irq(& mdev->req_lock);
#line 1950
  list_del(& e->w.list);
#line 1951
  hlist_del_init(& e->collision);
#line 1952
  spin_unlock_irq(& mdev->req_lock);
#line 1953
  if ((int )e->flags & 1) {
#line 1954
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1957
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1958
  put_ldev(mdev);
#line 1959
  drbd_free_some_ee(mdev, e, 0);
#line 1960
  return (0);
}
}
#line 1974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1976
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1980
  throttle = 0;
#line 1983
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1984
    return (0);
  } else {

  }
#line 1986
  spin_lock_irq(& mdev->al_lock);
#line 1987
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1988
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1989
    __mptr = (struct lc_element  const  *)tmp;
#line 1989
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1990
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1990
    if (tmp___0 != 0) {
#line 1991
      spin_unlock_irq(& mdev->al_lock);
#line 1992
      return (0);
    } else {

    }
  } else {

  }
#line 1996
  spin_unlock_irq(& mdev->al_lock);
#line 1998
  res = 0UL;
#line 1998
  _cpu = 4294967295U;
#line 1998
  goto ldv_50936;
  ldv_50935: 
#line 1998
  __vpp_verify = 0;
#line 1998
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1998
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_50936: 
#line 1998
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1998
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1999
    goto ldv_50935;
  } else {

  }
#line 1999
  res___0 = 0UL;
#line 1999
  _cpu___0 = 4294967295U;
#line 1999
  goto ldv_50946;
  ldv_50945: 
#line 1999
  __vpp_verify___0 = 0;
#line 1999
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1999
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_50946: 
#line 1999
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1999
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2000
    goto ldv_50945;
  } else {

  }
#line 1999
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1999
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 2002
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2006
    mdev->rs_last_events = curr_events;
#line 2010
    i = (mdev->rs_last_mark + 7) % 8;
#line 2012
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2013
      rs_left = mdev->ov_left;
    } else {
#line 2015
      tmp___2 = drbd_bm_total_weight(mdev);
#line 2015
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 2017
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2018
    if (dt == 0UL) {
#line 2019
      dt = dt + 1UL;
    } else {

    }
#line 2020
    db = mdev->rs_mark_left[i] - rs_left;
#line 2021
    dbdt = db / dt << 2;
#line 2023
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2024
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2026
  return (throttle);
}
}
#line 2030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 2033
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2033
  capacity = tmp;
#line 2035
  di = 0;
#line 2038
  p = & mdev->data.rbuf.block_req;
#line 2040
  tmp___0 = __fswab64(p->sector);
#line 2040
  sector = (sector_t )tmp___0;
#line 2041
  tmp___1 = __fswab32(p->blksize);
#line 2041
  size = (int )tmp___1;
#line 2043
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2044
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2044, (unsigned long long )sector, size);
#line 2046
    return (0);
  } else {

  }
#line 2048
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2049, (unsigned long long )sector, size);
#line 2051
    return (0);
  } else {

  }
#line 2054
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2054
  if (tmp___7 == 0) {
#line 2055
    verb = 1;
#line 2056
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2058
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2059
    goto ldv_50965;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2063
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2064
    goto ldv_50965;
    case 31U: 
#line 2066
    verb = 0;
#line 2067
    atomic_dec(& mdev->rs_pending_cnt);
#line 2067
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2067
    if (tmp___3 < 0) {
#line 2067
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2067
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2067, tmp___2);
    } else {

    }
#line 2068
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2069
    goto ldv_50965;
    default: 
#line 2071
    tmp___4 = cmdname(cmd);
#line 2071
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_50965: ;
#line 2074
    if (verb != 0) {
#line 2074
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2074
      if (tmp___5 != 0) {
#line 2075
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2079
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2079
    return (tmp___6);
  } else {

  }
#line 2085
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2086
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2087
    put_ldev(mdev);
#line 2088
    return (0);
  } else {

  }
#line 2091
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2093
  e->w.cb = & w_e_end_data_req;
#line 2094
  fault_type = 5U;
#line 2096
  goto submit;
  case 9U: 
#line 2099
  e->w.cb = & w_e_end_rsdata_req;
#line 2100
  fault_type = 3U;
#line 2102
  mdev->bm_resync_fo = sector >> 3;
#line 2103
  goto ldv_50978;
  case 31U: ;
  case 33U: 
#line 2107
  fault_type = 3U;
#line 2108
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2108
  di = (struct digest_info *)tmp___8;
#line 2109
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2110
    goto out_free_e;
  } else {

  }
#line 2112
  di->digest_size = (int )digest_size;
#line 2113
  di->digest = (void *)di + 16U;
#line 2115
  e->ldv_47571.digest = di;
#line 2116
  e->flags = e->flags | 16UL;
#line 2118
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2118
  if ((unsigned int )tmp___9 != digest_size) {
#line 2119
    goto out_free_e;
  } else {

  }
#line 2121
  if ((unsigned int )cmd == 33U) {
#line 2122
    if (mdev->agreed_pro_version <= 88) {
#line 2122
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2122);
    } else {

    }
#line 2123
    e->w.cb = & w_e_end_csum_rs_req;
#line 2125
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2126
  if ((unsigned int )cmd == 31U) {
#line 2128
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2129
    e->w.cb = & w_e_end_ov_reply;
#line 2130
    atomic_dec(& mdev->rs_pending_cnt);
#line 2130
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2130
    if (tmp___11 < 0) {
#line 2130
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2130
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2130, tmp___10);
    } else {

    }
#line 2133
    goto submit_for_resync;
  } else {

  }
#line 2135
  goto ldv_50978;
  case 30U: ;
#line 2138
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2140
    now = jiffies;
#line 2142
    mdev->ov_start_sector = sector;
#line 2143
    mdev->ov_position = sector;
#line 2144
    tmp___12 = drbd_bm_bits(mdev);
#line 2144
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2145
    mdev->rs_total = mdev->ov_left;
#line 2146
    i = 0;
#line 2146
    goto ldv_50990;
    ldv_50989: 
#line 2147
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2148
    mdev->rs_mark_time[i] = now;
#line 2146
    i = i + 1;
    ldv_50990: ;
#line 2146
    if (i <= 7) {
#line 2147
      goto ldv_50989;
    } else {

    }
#line 2150
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2153
  e->w.cb = & w_e_end_ov_req;
#line 2154
  fault_type = 3U;
#line 2155
  goto ldv_50978;
  default: 
#line 2158
  tmp___13 = cmdname(cmd);
#line 2158
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2160
  fault_type = 10U;
#line 2161
  goto out_free_e;
  }
  ldv_50978: ;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2186
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2186
    if (tmp___14 != 0) {
#line 2187
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2188
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2188
  if (tmp___15 != 0) {
#line 2189
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2192
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2195
  inc_unacked(mdev);
#line 2196
  spin_lock_irq(& mdev->req_lock);
#line 2197
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2198
  spin_unlock_irq(& mdev->req_lock);
#line 2200
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2200
  if (tmp___16 == 0) {
#line 2201
    return (1);
  } else {

  }
#line 2204
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2205
  spin_lock_irq(& mdev->req_lock);
#line 2206
  list_del(& e->w.list);
#line 2207
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2211
  put_ldev(mdev);
#line 2212
  drbd_free_some_ee(mdev, e, 0);
#line 2213
  return (0);
}
}
#line 2216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2218
  rv = -100;
#line 2221
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2222
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2224
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2225
  ch_self = mdev->comm_bm_set;
#line 2227
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2231
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2232
  goto ldv_51004;
  case 0: ;
#line 2234
  goto ldv_51004;
  case 1: ;
#line 2236
  if (self == 0 && peer == 1) {
#line 2237
    rv = -1;
#line 2238
    goto ldv_51004;
  } else {

  }
#line 2240
  if (self == 1 && peer == 0) {
#line 2241
    rv = 1;
#line 2242
    goto ldv_51004;
  } else {

  }
  case 2: ;
#line 2246
  if (self == 0 && peer == 1) {
#line 2247
    rv = 1;
#line 2248
    goto ldv_51004;
  } else {

  }
#line 2250
  if (self == 1 && peer == 0) {
#line 2251
    rv = -1;
#line 2252
    goto ldv_51004;
  } else {

  }
#line 2255
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2258
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2259
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2259
    rv = tmp != 0 ? -1 : 1;
#line 2261
    goto ldv_51004;
  } else {
#line 2263
    if (ch_peer == 0UL) {
#line 2263
      rv = 1;
#line 2263
      goto ldv_51004;
    } else {

    }
#line 2264
    if (ch_self == 0UL) {
#line 2264
      rv = -1;
#line 2264
      goto ldv_51004;
    } else {

    }
  }
#line 2266
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2267
    goto ldv_51004;
  } else {

  }
  case 4: ;
#line 2269
  if (ch_self < ch_peer) {
#line 2270
    rv = -1;
  } else
#line 2271
  if (ch_self > ch_peer) {
#line 2272
    rv = 1;
  } else {
#line 2275
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2275
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2277
  goto ldv_51004;
  case 5: 
#line 2279
  rv = -1;
#line 2280
  goto ldv_51004;
  case 6: 
#line 2282
  rv = 1;
  }
  ldv_51004: ;
#line 2285
  return (rv);
}
}
#line 2288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2290
  rv = -100;
#line 2292
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2298
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2299
  goto ldv_51022;
  case 0: ;
#line 2301
  goto ldv_51022;
  case 7: 
#line 2303
  hg = drbd_asb_recover_0p(mdev);
#line 2304
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2305
    rv = hg;
  } else {

  }
#line 2306
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2307
    rv = hg;
  } else {

  }
#line 2308
  goto ldv_51022;
  case 10: 
#line 2310
  rv = drbd_asb_recover_0p(mdev);
#line 2311
  goto ldv_51022;
  case 8: ;
#line 2313
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2315
  hg = drbd_asb_recover_0p(mdev);
#line 2316
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2319
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2323
    val.i = 0U;
#line 2323
    val.ldv_38794.role = 2U;
#line 2323
    mask.i = 0U;
#line 2323
    mask.ldv_38794.role = 3U;
#line 2323
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2324
    if ((int )rv2 != 1) {
#line 2325
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2327
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2328
      rv = hg;
    }
  } else {
#line 2331
    rv = hg;
  }
  }
  ldv_51022: ;
#line 2334
  return (rv);
}
}
#line 2337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2339
  rv = -100;
#line 2341
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2349
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2350
  goto ldv_51045;
  case 10: 
#line 2352
  rv = drbd_asb_recover_0p(mdev);
#line 2353
  goto ldv_51045;
  case 0: ;
#line 2355
  goto ldv_51045;
  case 9: 
#line 2357
  hg = drbd_asb_recover_0p(mdev);
#line 2358
  if (hg == -1) {
#line 2364
    val.i = 0U;
#line 2364
    val.ldv_38794.role = 2U;
#line 2364
    mask.i = 0U;
#line 2364
    mask.ldv_38794.role = 3U;
#line 2364
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2365
    if ((int )rv2 != 1) {
#line 2366
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2368
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2369
      rv = hg;
    }
  } else {
#line 2372
    rv = hg;
  }
  }
  ldv_51045: ;
#line 2375
  return (rv);
}
}
#line 2378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2381
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2382
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2383
    return;
  } else {

  }
#line 2385
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2386
  return;
}
}
#line 2407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2412
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2413
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2415
  *rule_nr = 10;
#line 2416
  if (self == 4ULL && peer == 4ULL) {
#line 2417
    return (0);
  } else {

  }
#line 2419
  *rule_nr = 20;
#line 2420
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2422
    return (-2);
  } else {

  }
#line 2424
  *rule_nr = 30;
#line 2425
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2427
    return (2);
  } else {

  }
#line 2429
  if (self == peer) {
#line 2432
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2434
      if (mdev->agreed_pro_version <= 90) {
#line 2435
        return (-1091);
      } else {

      }
#line 2437
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2439
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2440
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2442
        if ((int )mdev->state.ldv_38794.disk > 2) {
#line 2442
          tmp = drbd_bm_total_weight(mdev);
#line 2442
          tmp___0 = (u64 )tmp;
        } else {
#line 2442
          tmp___0 = 0ULL;
        }
#line 2442
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2444
        *rule_nr = 34;
      } else {
#line 2446
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2447
        *rule_nr = 36;
      }
#line 2450
      return (1);
    } else {

    }
#line 2453
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2455
      if (mdev->agreed_pro_version <= 90) {
#line 2456
        return (-1091);
      } else {

      }
#line 2458
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2460
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2462
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2463
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2464
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2466
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2467
        *rule_nr = 35;
      } else {
#line 2469
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2470
        *rule_nr = 37;
      }
#line 2473
      return (-1);
    } else {

    }
#line 2477
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2477
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2481
    *rule_nr = 40;
#line 2483
    switch (rct) {
    case 0: ;
#line 2484
    return (0);
    case 1: ;
#line 2485
    return (1);
    case 2: ;
#line 2486
    return (-1);
    case 3: 
#line 2488
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2489
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2493
  *rule_nr = 50;
#line 2494
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2495
  if (self == peer) {
#line 2496
    return (-1);
  } else {

  }
#line 2498
  *rule_nr = 51;
#line 2499
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2500
  if (self == peer) {
#line 2501
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2508
      if (mdev->agreed_pro_version <= 90) {
#line 2509
        return (-1091);
      } else {

      }
#line 2511
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2512
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2514
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2515
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2517
      return (-1);
    } else {

    }
  } else {

  }
#line 2521
  *rule_nr = 60;
#line 2522
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2523
  i = 2;
#line 2523
  goto ldv_51076;
  ldv_51075: 
#line 2524
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2525
  if (self == peer) {
#line 2526
    return (-2);
  } else {

  }
#line 2523
  i = i + 1;
  ldv_51076: ;
#line 2523
  if (i <= 3) {
#line 2524
    goto ldv_51075;
  } else {

  }
#line 2529
  *rule_nr = 70;
#line 2530
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2531
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2532
  if (self == peer) {
#line 2533
    return (1);
  } else {

  }
#line 2535
  *rule_nr = 71;
#line 2536
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2537
  if (self == peer) {
#line 2538
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2545
      if (mdev->agreed_pro_version <= 90) {
#line 2546
        return (-1091);
      } else {

      }
#line 2548
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2549
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2551
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2552
      if ((int )mdev->state.ldv_38794.disk > 2) {
#line 2552
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2552
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2552
        tmp___3 = 0ULL;
      }
#line 2552
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2555
      return (1);
    } else {

    }
  } else {

  }
#line 2560
  *rule_nr = 80;
#line 2561
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2562
  i = 2;
#line 2562
  goto ldv_51079;
  ldv_51078: 
#line 2563
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2564
  if (self == peer) {
#line 2565
    return (2);
  } else {

  }
#line 2562
  i = i + 1;
  ldv_51079: ;
#line 2562
  if (i <= 3) {
#line 2563
    goto ldv_51078;
  } else {

  }
#line 2568
  *rule_nr = 90;
#line 2569
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2570
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2571
  if (self == peer && self != 0ULL) {
#line 2572
    return (100);
  } else {

  }
#line 2574
  *rule_nr = 100;
#line 2575
  i = 2;
#line 2575
  goto ldv_51085;
  ldv_51084: 
#line 2576
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2577
  j = 2;
#line 2577
  goto ldv_51082;
  ldv_51081: 
#line 2578
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2579
  if (self == peer) {
#line 2580
    return (-100);
  } else {

  }
#line 2577
  j = j + 1;
  ldv_51082: ;
#line 2577
  if (j <= 3) {
#line 2578
    goto ldv_51081;
  } else {

  }
#line 2575
  i = i + 1;
  ldv_51085: ;
#line 2575
  if (i <= 3) {
#line 2576
    goto ldv_51084;
  } else {

  }

#line 2584
  return (-1000);
}
}
#line 2590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2594
  rv = C_MASK;
#line 2597
  mydisk = (enum drbd_disk_state )mdev->state.ldv_38794.disk;
#line 2598
  if ((unsigned int )mydisk == 3U) {
#line 2599
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_38794.disk;
  } else {

  }
#line 2601
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2602
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2603
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2606
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2608
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2610
  if (hg == -1000) {
#line 2611
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2612
    return (C_MASK);
  } else {

  }
#line 2614
  if (hg < -1000) {
#line 2615
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2616
    return (C_MASK);
  } else {

  }
#line 2619
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2621
    if (hg == -100) {
#line 2621
      tmp = 1;
    } else {
#line 2621
      __x___0 = hg;
#line 2621
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2621
      if (ret == 2L) {
#line 2621
        tmp = 1;
      } else {
#line 2621
        tmp = 0;
      }
    }
#line 2621
    f = tmp;
#line 2622
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2623
    if (f != 0) {
#line 2624
      hg = hg * 2;
    } else {

    }
#line 2625
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2629
  __x___2 = hg;
#line 2629
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2629
  if (ret___0 == 100L) {
#line 2630
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2632
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2633
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2635
    forced = hg == -100;
#line 2637
    switch (pcount) {
    case 0: 
#line 2639
    hg = drbd_asb_recover_0p(mdev);
#line 2640
    goto ldv_51108;
    case 1: 
#line 2642
    hg = drbd_asb_recover_1p(mdev);
#line 2643
    goto ldv_51108;
    case 2: 
#line 2645
    hg = drbd_asb_recover_2p(mdev);
#line 2646
    goto ldv_51108;
    }
    ldv_51108: 
#line 2648
    __x___4 = hg;
#line 2648
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2648
    if (ret___1 <= 99L) {
#line 2649
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2652
      if (forced != 0) {
#line 2653
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2655
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2660
  if (hg == -100) {
#line 2661
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2662
      hg = -1;
    } else {

    }
#line 2663
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2664
      hg = 1;
    } else {

    }
#line 2666
    __x___6 = hg;
#line 2666
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2666
    if (ret___2 <= 99L) {
#line 2667
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2672
  if (hg == -100) {
#line 2677
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2678
    drbd_khelper(mdev, (char *)"split-brain");
#line 2679
    return (C_MASK);
  } else {

  }
#line 2682
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2684
    return (C_MASK);
  } else {

  }
#line 2687
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_38794.disk > 6) {
#line 2689
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2691
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2694
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2695
    return (C_MASK);
    case 10: 
#line 2697
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2702
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2702
    goto _L;
  } else {
#line 2702
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2702
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2703
      if (hg == 0) {
#line 2704
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2706
        __x___8 = hg;
#line 2706
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2706
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2706
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2709
      return (C_MASK);
    } else {

    }
  }
#line 2712
  __x___10 = hg;
#line 2712
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2712
  if (ret___4 > 1L) {
#line 2713
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2714
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 2714
    if (tmp___2 != 0) {
#line 2716
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2719
  if (hg > 0) {
#line 2720
    rv = C_WF_BITMAP_S;
  } else
#line 2721
  if (hg < 0) {
#line 2722
    rv = C_WF_BITMAP_T;
  } else {
#line 2724
    rv = C_CONNECTED;
#line 2725
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2725
    if (tmp___4 != 0UL) {
#line 2726
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2726
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2731
  return (rv);
}
}
#line 2735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2738
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2740
    return (0);
  } else {

  }
#line 2743
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2745
    return (1);
  } else {

  }
#line 2748
  if ((unsigned int )peer == (unsigned int )self) {
#line 2749
    return (0);
  } else {

  }
#line 2752
  return (1);
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2757
  p = & mdev->data.rbuf.protocol;
#line 2760
  p_integrity_alg[0] = '\000';
#line 2760
  tmp = 1U;
#line 2760
  while (1) {
#line 2760
    if (tmp >= 64U) {
#line 2760
      break;
    } else {

    }
#line 2760
    p_integrity_alg[tmp] = (char)0;
#line 2760
    tmp = tmp + 1U;
  }
#line 2762
  tmp___0 = __fswab32(p->protocol);
#line 2762
  p_proto = (int )tmp___0;
#line 2763
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2763
  p_after_sb_0p = (int )tmp___1;
#line 2764
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2764
  p_after_sb_1p = (int )tmp___2;
#line 2765
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2765
  p_after_sb_2p = (int )tmp___3;
#line 2766
  tmp___4 = __fswab32(p->two_primaries);
#line 2766
  p_two_primaries = (int )tmp___4;
#line 2767
  tmp___5 = __fswab32(p->conn_flags);
#line 2767
  cf = (int )tmp___5;
#line 2768
  p_want_lose = cf & 1;
#line 2770
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2772
  if ((cf & 2) != 0) {
#line 2773
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2775
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2777
    goto disconnect;
  } else {

  }
#line 2780
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2780
  if (tmp___6 != 0) {
#line 2781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2782
    goto disconnect;
  } else {

  }
#line 2785
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2785
  if (tmp___7 != 0) {
#line 2786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2787
    goto disconnect;
  } else {

  }
#line 2790
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2790
  if (tmp___8 != 0) {
#line 2791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2792
    goto disconnect;
  } else {

  }
#line 2795
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2797
    goto disconnect;
  } else {

  }
#line 2800
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2801
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2802
    goto disconnect;
  } else {

  }
#line 2805
  if (mdev->agreed_pro_version > 86) {
#line 2806
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2808
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2808
    if ((unsigned int )tmp___9 != data_size) {
#line 2809
      return (0);
    } else {

    }
#line 2811
    p_integrity_alg[63] = 0;
#line 2812
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2812
    if (tmp___10 != 0) {
#line 2813
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2814
      goto disconnect;
    } else {

    }
#line 2816
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2820
  return (1);
  disconnect: 
#line 2823
  val.i = 0U;
#line 2823
  val.ldv_38794.conn = 1U;
#line 2823
  mask.i = 0U;
#line 2823
  mask.ldv_38794.conn = 31U;
#line 2823
  drbd_force_state(mdev, mask, val);
#line 2824
  return (0);
}
}
#line 2832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2837
  if ((int )((signed char )*alg) == 0) {
#line 2838
    return (0);
  } else {

  }
#line 2840
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2841
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2841
  if (tmp___0 != 0L) {
#line 2842
    tmp = PTR_ERR((void const   *)tfm);
#line 2842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2844
    return (tfm);
  } else {

  }
#line 2846
  tmp___2 = crypto_hash_tfm(tfm);
#line 2846
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2846
  if (tmp___3 == 0) {
#line 2847
    crypto_free_hash(tfm);
#line 2848
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2849
    tmp___1 = ERR_PTR(-22L);
#line 2849
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2851
  return (tfm);
}
}
#line 2854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2856
  ok = 1;
#line 2857
  p = & mdev->data.rbuf.rs_param_95;
#line 2859
  verify_tfm = 0;
#line 2860
  csums_tfm = 0;
#line 2861
  apv = mdev->agreed_pro_version;
#line 2862
  rs_plan_s = 0;
#line 2863
  fifo_size = 0;
#line 2865
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2871
  if (packet_size > exp_max_sz) {
#line 2872
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2874
    return (0);
  } else {

  }
#line 2877
  if (apv <= 88) {
#line 2878
    header_size = 4U;
#line 2879
    data_size = packet_size - header_size;
  } else
#line 2880
  if (apv <= 94) {
#line 2881
    header_size = 132U;
#line 2882
    data_size = packet_size - header_size;
#line 2883
    if (data_size != 0U) {
#line 2883
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2883);
    } else {

    }
  } else {
#line 2885
    header_size = 148U;
#line 2886
    data_size = packet_size - header_size;
#line 2887
    if (data_size != 0U) {
#line 2887
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2887);
    } else {

    }
  }
#line 2891
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2893
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2893
  if ((unsigned int )tmp != header_size) {
#line 2894
    return (0);
  } else {

  }
#line 2896
  tmp___0 = __fswab32(p->rate);
#line 2896
  mdev->sync_conf.rate = (int )tmp___0;
#line 2898
  if (apv > 87) {
#line 2899
    if (apv == 88) {
#line 2900
      if (data_size > 64U || data_size == 0U) {
#line 2901
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 2904
        return (0);
      } else {

      }
#line 2907
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2907
      if ((unsigned int )tmp___1 != data_size) {
#line 2908
        return (0);
      } else {

      }
#line 2912
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2912
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2912);
      } else {

      }
#line 2913
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2918
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2918
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2918);
      } else {

      }
#line 2919
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2919
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2919);
      } else {

      }
#line 2920
      p->verify_alg[63] = 0;
#line 2921
      p->csums_alg[63] = 0;
    }
#line 2924
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2924
    if (tmp___3 != 0) {
#line 2925
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2926
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2928
        goto disconnect;
      } else {

      }
#line 2930
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2932
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2932
      if (tmp___2 != 0L) {
#line 2933
        verify_tfm = 0;
#line 2934
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2938
    if (apv > 88) {
#line 2938
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2938
      if (tmp___5 != 0) {
#line 2939
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2940
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2942
          goto disconnect;
        } else {

        }
#line 2944
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2946
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2946
        if (tmp___4 != 0L) {
#line 2947
          csums_tfm = 0;
#line 2948
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2952
    if (apv > 94) {
#line 2953
      tmp___6 = __fswab32(p->rate);
#line 2953
      mdev->sync_conf.rate = (int )tmp___6;
#line 2954
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2954
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2955
      tmp___8 = __fswab32(p->c_delay_target);
#line 2955
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2956
      tmp___9 = __fswab32(p->c_fill_target);
#line 2956
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2957
      tmp___10 = __fswab32(p->c_max_rate);
#line 2957
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2959
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2960
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2961
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2961
        rs_plan_s = (int *)tmp___11;
#line 2962
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2963
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2964
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2969
    spin_lock(& mdev->peer_seq_lock);
#line 2971
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2972
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2973
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2973
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2974
      crypto_free_hash(mdev->verify_tfm);
#line 2975
      mdev->verify_tfm = verify_tfm;
#line 2976
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2978
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2979
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2980
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2980
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2981
      crypto_free_hash(mdev->csums_tfm);
#line 2982
      mdev->csums_tfm = csums_tfm;
#line 2983
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2985
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2986
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2987
      mdev->rs_plan_s.values = rs_plan_s;
#line 2988
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2989
      mdev->rs_planed = 0;
    } else {

    }
#line 2991
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2994
  return (ok);
  disconnect: 
#line 2998
  crypto_free_hash(csums_tfm);
#line 3000
  crypto_free_hash(verify_tfm);
#line 3001
  val.i = 0U;
#line 3001
  val.ldv_38794.conn = 1U;
#line 3001
  mask.i = 0U;
#line 3001
  mask.ldv_38794.conn = 31U;
#line 3001
  drbd_force_state(mdev, mask, val);
#line 3002
  return (0);
}
}
#line 3006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3010
  if (a == 0UL || b == 0UL) {
#line 3011
    return;
  } else {

  }
#line 3012
  d = a > b ? a - b : b - a;
#line 3013
  if (a >> 3 < d || b >> 3 < d) {
#line 3014
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3016
  return;
}
}
#line 3018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 3020
  p = & mdev->data.rbuf.sizes;
#line 3021
  dd = 0;
#line 3023
  ldsc = 0;
#line 3026
  tmp = __fswab64(p->d_size);
#line 3026
  p_size = (sector_t )tmp;
#line 3027
  tmp___0 = __fswab64(p->u_size);
#line 3027
  p_usize = (sector_t )tmp___0;
#line 3029
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 3030
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3031
    val.i = 0U;
#line 3031
    val.ldv_38794.conn = 1U;
#line 3031
    mask.i = 0U;
#line 3031
    mask.ldv_38794.conn = 31U;
#line 3031
    drbd_force_state(mdev, mask, val);
#line 3032
    return (0);
  } else {

  }
#line 3037
  mdev->p_size = p_size;
#line 3039
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3039
  if (tmp___6 != 0) {
#line 3040
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3040
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3042
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3047
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3048
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3048
      __y = p_usize;
#line 3048
      if (__x != 0UL) {
#line 3048
        if (__y != 0UL) {
#line 3048
          _min1 = __x;
#line 3048
          _min2 = __y;
#line 3048
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3048
          tmp___2 = __x;
        }
#line 3048
        tmp___3 = tmp___2;
      } else {
#line 3048
        tmp___3 = __y;
      }
#line 3048
      p_usize = tmp___3;
    } else {

    }
#line 3051
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3053
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3054
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3055
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3061
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3061
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3061
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_38794.disk > 4) && (int )mdev->state.ldv_38794.conn <= 9) {
#line 3065
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3066
      val___0.i = 0U;
#line 3066
      val___0.ldv_38794.conn = 1U;
#line 3066
      mask___0.i = 0U;
#line 3066
      mask___0.ldv_38794.conn = 31U;
#line 3066
      drbd_force_state(mdev, mask___0, val___0);
#line 3067
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3068
      put_ldev(mdev);
#line 3069
      return (0);
    } else {

    }
#line 3071
    put_ldev(mdev);
  } else {

  }
#line 3074
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3074
  ddsf = (enum dds_flags )tmp___7;
#line 3075
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3075
  if (tmp___8 != 0) {
#line 3076
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3077
    put_ldev(mdev);
#line 3078
    if ((int )dd == -1) {
#line 3079
      return (0);
    } else {

    }
#line 3080
    drbd_md_sync(mdev);
  } else {
#line 3083
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3086
  tmp___9 = __fswab32(p->max_bio_size);
#line 3086
  mdev->peer_max_bio_size = (int )tmp___9;
#line 3087
  drbd_reconsider_max_bio_size(mdev);
#line 3089
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3089
  if (tmp___11 != 0) {
#line 3090
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3090
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3091
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3092
      ldsc = 1;
    } else {

    }
#line 3095
    put_ldev(mdev);
  } else {

  }
#line 3098
  if ((int )mdev->state.ldv_38794.conn > 9) {
#line 3099
    tmp___12 = __fswab64(p->c_size);
#line 3099
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3099
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3103
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3105
    tmp___14 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3105
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3107
      if ((int )mdev->state.ldv_38794.pdsk > 3 && (int )mdev->state.ldv_38794.disk > 3) {
#line 3109
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3110
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3112
          resync_after_online_grow(mdev);
        }
      } else {
#line 3114
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3118
  return (1);
}
}
#line 3121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3123
  p = & mdev->data.rbuf.uuids;
#line 3125
  updated_uuids = 0;
#line 3127
  tmp = kmalloc(48UL, 16U);
#line 3127
  p_uuid = (u64 *)tmp;
#line 3129
  i = 0;
#line 3129
  goto ldv_51223;
  ldv_51222: 
#line 3130
  tmp___0 = __fswab64(p->uuid[i]);
#line 3130
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3129
  i = i + 1;
  ldv_51223: ;
#line 3129
  if (i <= 5) {
#line 3130
    goto ldv_51222;
  } else {

  }
#line 3132
  kfree((void const   *)mdev->p_uuid);
#line 3133
  mdev->p_uuid = p_uuid;
#line 3135
  if ((((int )mdev->state.ldv_38794.conn <= 9 && (int )mdev->state.ldv_38794.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3139
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3141
    val.i = 0U;
#line 3141
    val.ldv_38794.conn = 1U;
#line 3141
    mask.i = 0U;
#line 3141
    mask.ldv_38794.conn = 31U;
#line 3141
    drbd_force_state(mdev, mask, val);
#line 3142
    return (0);
  } else {

  }
#line 3145
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3145
  if (tmp___1 != 0) {
#line 3146
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3151
    if (skip_initial_sync != 0) {
#line 3152
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3153
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3156
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3157
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3158
      __ns.i = mdev->state.i;
#line 3158
      __ns.ldv_38794.disk = 8U;
#line 3158
      __ns.ldv_38794.pdsk = 8U;
#line 3158
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3160
      drbd_md_sync(mdev);
#line 3161
      updated_uuids = 1;
    } else {

    }
#line 3163
    put_ldev(mdev);
  } else
#line 3164
  if ((int )mdev->state.ldv_38794.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3168
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3175
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3175
  if (tmp___2 == 0) {
#line 3175
    goto ldv_51232;
  } else {

  }
#line 3175
  tmp___3 = get_current();
#line 3175
  __wait.flags = 0U;
#line 3175
  __wait.private = (void *)tmp___3;
#line 3175
  __wait.func = & autoremove_wake_function;
#line 3175
  __wait.task_list.next = & __wait.task_list;
#line 3175
  __wait.task_list.prev = & __wait.task_list;
  ldv_51235: 
#line 3175
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3175
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3175
  if (tmp___4 == 0) {
#line 3175
    goto ldv_51234;
  } else {

  }
#line 3175
  schedule();
#line 3175
  goto ldv_51235;
  ldv_51234: 
#line 3175
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51232: ;
#line 3176
  if ((int )mdev->state.ldv_38794.conn > 9 && (int )mdev->state.ldv_38794.disk <= 3) {
#line 3177
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3177
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3179
  if (updated_uuids != 0) {
#line 3180
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3182
  return (1);
}
}
#line 3189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3193
  c_tab[0] = 0;
#line 3193
  c_tab[1] = C_TEAR_DOWN;
#line 3193
  c_tab[2] = 0;
#line 3193
  c_tab[3] = 0;
#line 3193
  c_tab[4] = 0;
#line 3193
  c_tab[5] = 0;
#line 3193
  c_tab[6] = 0;
#line 3193
  c_tab[7] = 0;
#line 3193
  c_tab[8] = 0;
#line 3193
  c_tab[9] = 0;
#line 3193
  c_tab[10] = C_CONNECTED;
#line 3193
  c_tab[11] = C_STARTING_SYNC_T;
#line 3193
  c_tab[12] = C_STARTING_SYNC_S;
#line 3193
  c_tab[13] = 0;
#line 3193
  c_tab[14] = 0;
#line 3193
  c_tab[15] = 0;
#line 3193
  c_tab[16] = 0;
#line 3193
  c_tab[17] = 0;
#line 3193
  c_tab[18] = C_VERIFY_T;
#line 3193
  c_tab[19] = 0;
#line 3193
  c_tab[20] = 0;
#line 3193
  c_tab[21] = 0;
#line 3193
  c_tab[22] = 0;
#line 3193
  c_tab[23] = 0;
#line 3193
  c_tab[24] = 0;
#line 3193
  c_tab[25] = 0;
#line 3193
  c_tab[26] = 0;
#line 3193
  c_tab[27] = 0;
#line 3193
  c_tab[28] = 0;
#line 3193
  c_tab[29] = 0;
#line 3193
  c_tab[30] = 0;
#line 3193
  c_tab[31] = C_MASK;
#line 3203
  ms.i = ps.i;
#line 3205
  ms.ldv_38794.conn = (unsigned char )c_tab[(int )ps.ldv_38794.conn];
#line 3206
  ms.ldv_38794.peer = ps.ldv_38794.role;
#line 3207
  ms.ldv_38794.role = ps.ldv_38794.peer;
#line 3208
  ms.ldv_38794.pdsk = ps.ldv_38794.disk;
#line 3209
  ms.ldv_38794.disk = ps.ldv_38794.pdsk;
#line 3210
  ms.ldv_38794.peer_isp = (unsigned char )((int )ps.ldv_38794.aftr_isp | (int )ps.ldv_38794.user_isp);
#line 3212
  return (ms);
}
}
#line 3215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3217
  p = & mdev->data.rbuf.req_state;
#line 3221
  tmp = __fswab32(p->mask);
#line 3221
  mask.i = tmp;
#line 3222
  tmp___0 = __fswab32(p->val);
#line 3222
  val.i = tmp___0;
#line 3224
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3224
  if (tmp___1 != 0) {
#line 3224
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3224
    if (tmp___2 != 0) {
#line 3226
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3227
      return (1);
    } else {

    }
  } else {

  }
#line 3230
  mask = convert_state(mask);
#line 3231
  val = convert_state(val);
#line 3233
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3235
  drbd_send_sr_reply(mdev, rv);
#line 3236
  drbd_md_sync(mdev);
#line 3238
  return (1);
}
}
#line 3241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3243
  p = & mdev->data.rbuf.state;
#line 3249
  tmp = __fswab32(p->state);
#line 3249
  peer_state.i = tmp;
#line 3251
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_38794.disk;
#line 3252
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3253
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3254
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3254
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3257
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3259
  ns = mdev->state;
#line 3259
  os = ns;
#line 3260
  spin_unlock_irq(& mdev->req_lock);
#line 3265
  if ((int )os.ldv_38794.conn <= 7) {
#line 3266
    return (0);
  } else {

  }
#line 3274
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_38794.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3283
    if ((int )peer_state.ldv_38794.conn > 10 && (int )peer_state.ldv_38794.conn <= 15) {
#line 3285
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3290
    if ((int )os.ldv_38794.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3292
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3292
      if (tmp___1 <= mdev->rs_failed) {
#line 3293
        drbd_resync_finished(mdev);
      } else {

      }
#line 3294
      return (1);
    } else {

    }
  } else {

  }
#line 3303
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_38794.conn > 16) {
#line 3305
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3307
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3308
    ns.ldv_38794.conn = 10U;
  } else {

  }
#line 3310
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3311
    ns.ldv_38794.conn = 23U;
  } else {

  }
#line 3313
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_38794.disk > 2) {
#line 3313
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3313
    if (tmp___5 != 0) {
#line 3318
      cr = (int )os.ldv_38794.conn <= 9;
#line 3321
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3326
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3326
      cr = tmp___2 | cr;
#line 3329
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_38794.conn > 10 && (int )peer_state.ldv_38794.conn <= 14)) | cr;
#line 3333
      if (cr != 0) {
#line 3334
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_38794.role,
                                      real_peer_disk);
#line 3334
        ns.ldv_38794.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3336
      put_ldev(mdev);
#line 3337
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3338
        ns.ldv_38794.conn = 10U;
#line 3339
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3340
          val.i = 0U;
#line 3340
          val.ldv_38794.disk = 2U;
#line 3340
          mask.i = 0U;
#line 3340
          mask.ldv_38794.disk = 15U;
#line 3340
          drbd_force_state(mdev, mask, val);
        } else
#line 3341
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3342
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3343
          peer_state.ldv_38794.disk = 0U;
#line 3344
          real_peer_disk = D_DISKLESS;
        } else {
#line 3346
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3346
          if (tmp___4 != 0) {
#line 3347
            return (0);
          } else {

          }
#line 3348
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3348
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3348);
          } else {

          }
#line 3349
          val___0.i = 0U;
#line 3349
          val___0.ldv_38794.conn = 1U;
#line 3349
          mask___0.i = 0U;
#line 3349
          mask___0.ldv_38794.conn = 31U;
#line 3349
          drbd_force_state(mdev, mask___0, val___0);
#line 3350
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3355
  spin_lock_irq(& mdev->req_lock);
#line 3356
  if (mdev->state.i != os.i) {
#line 3357
    goto retry;
  } else {

  }
#line 3358
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3359
  ns.ldv_38794.peer = peer_state.ldv_38794.role;
#line 3360
  ns.ldv_38794.pdsk = (unsigned char )real_peer_disk;
#line 3361
  ns.ldv_38794.peer_isp = (unsigned char )((int )peer_state.ldv_38794.aftr_isp | (int )peer_state.ldv_38794.user_isp);
#line 3362
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3363
    ns.ldv_38794.disk = mdev->new_state_tmp.ldv_38794.disk;
  } else {

  }
#line 3364
  cs_flags = (enum chg_state_flags )(((int )os.ldv_38794.conn > 9 || (int )ns.ldv_38794.conn <= 9) + 2);
#line 3365
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3365
    tmp___6 = is_susp(ns);
#line 3365
    if (tmp___6 != 0) {
#line 3365
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3365
        if ((int )os.ldv_38794.conn <= 9) {
#line 3365
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3365
          if (tmp___7 != 0) {
#line 3369
            spin_unlock_irq(& mdev->req_lock);
#line 3370
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3371
            tl_clear(mdev);
#line 3372
            drbd_uuid_new_current(mdev);
#line 3373
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3374
            val___1.i = 0U;
#line 3374
            val___1.ldv_38794.conn = 6U;
#line 3374
            val___1.ldv_38794.susp = 0U;
#line 3374
            mask___1.i = 0U;
#line 3374
            mask___1.ldv_38794.conn = 31U;
#line 3374
            mask___1.ldv_38794.susp = 1U;
#line 3374
            drbd_force_state(mdev, mask___1, val___1);
#line 3375
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3377
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3377
  rv = (int )tmp___8;
#line 3378
  ns = mdev->state;
#line 3379
  spin_unlock_irq(& mdev->req_lock);
#line 3381
  if (rv <= 0) {
#line 3382
    val___2.i = 0U;
#line 3382
    val___2.ldv_38794.conn = 1U;
#line 3382
    mask___2.i = 0U;
#line 3382
    mask___2.ldv_38794.conn = 31U;
#line 3382
    drbd_force_state(mdev, mask___2, val___2);
#line 3383
    return (0);
  } else {

  }
#line 3386
  if ((int )os.ldv_38794.conn > 9) {
#line 3387
    if (((int )ns.ldv_38794.conn > 10 && (int )peer_state.ldv_38794.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3392
      drbd_send_uuids(mdev);
#line 3393
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3397
  (mdev->net_conf)->want_lose = 0U;
#line 3399
  drbd_md_sync(mdev);
#line 3401
  return (1);
}
}
#line 3404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3406
  p = & mdev->data.rbuf.rs_uuid;
#line 3408
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38794.conn <= 9) || (int )mdev->state.ldv_38794.disk <= 2) {
#line 3408
    goto ldv_51286;
  } else {

  }
#line 3408
  tmp = get_current();
#line 3408
  __wait.flags = 0U;
#line 3408
  __wait.private = (void *)tmp;
#line 3408
  __wait.func = & autoremove_wake_function;
#line 3408
  __wait.task_list.next = & __wait.task_list;
#line 3408
  __wait.task_list.prev = & __wait.task_list;
  ldv_51289: 
#line 3408
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3408
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38794.conn <= 9) || (int )mdev->state.ldv_38794.disk <= 2) {
#line 3408
    goto ldv_51288;
  } else {

  }
#line 3408
  schedule();
#line 3408
  goto ldv_51289;
  ldv_51288: 
#line 3408
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51286: 
#line 3418
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3418
  if (tmp___1 != 0) {
#line 3419
    tmp___0 = __fswab64(p->uuid);
#line 3419
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3420
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3422
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3423
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3425
    put_ldev(mdev);
  } else {
#line 3427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3429
  return (1);
}
}
#line 3439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3442
  __min1 = 511UL;
#line 3442
  __min2 = c->bm_words - c->word_offset;
#line 3442
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3443
  want = num_words * 8U;
#line 3446
  if (want != data_size) {
#line 3447
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3448
    return (-5);
  } else {

  }
#line 3450
  if (want == 0U) {
#line 3451
    return (0);
  } else {

  }
#line 3452
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3453
  if ((unsigned int )err != want) {
#line 3454
    if (err >= 0) {
#line 3455
      err = -5;
    } else {

    }
#line 3456
    return (err);
  } else {

  }
#line 3459
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3461
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3462
  c->bit_offset = c->word_offset * 64UL;
#line 3463
  if (c->bit_offset > c->bm_bits) {
#line 3464
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3466
  return (1);
}
}
#line 3476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3484
  s = c->bit_offset;
#line 3486
  tmp___0 = __fswab16((int )p->head.length);
#line 3486
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3487
  tmp___1 = DCBP_get_start(p);
#line 3487
  toggle = tmp___1;
#line 3491
  tmp___2 = DCBP_get_pad_bits(p);
#line 3491
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3493
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3494
  if (bits < 0) {
#line 3495
    return (-5);
  } else {

  }
#line 3497
  have = bits;
#line 3497
  goto ldv_51319;
  ldv_51318: 
#line 3498
  bits = vli_decode_bits(& rl, look_ahead);
#line 3499
  if (bits <= 0) {
#line 3500
    return (-5);
  } else {

  }
#line 3502
  if (toggle != 0) {
#line 3503
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3504
    if (c->bm_bits <= e) {
#line 3505
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3506
      return (-5);
    } else {

    }
#line 3508
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3511
  if (have < bits) {
#line 3512
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3516
    return (-5);
  } else {

  }
#line 3518
  look_ahead = look_ahead >> bits;
#line 3519
  have = have - bits;
#line 3521
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3522
  if (bits < 0) {
#line 3523
    return (-5);
  } else {

  }
#line 3524
  look_ahead = (tmp << have) | look_ahead;
#line 3525
  have = have + bits;
#line 3497
  s = (unsigned long )((unsigned long long )s + rl);
#line 3497
  toggle = toggle == 0;
  ldv_51319: ;
#line 3497
  if (have > 0) {
#line 3498
    goto ldv_51318;
  } else {

  }
#line 3528
  c->bit_offset = s;
#line 3529
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3531
  return (c->bm_bits != s);
}
}
#line 3541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3545
  tmp___0 = DCBP_get_code(p);
#line 3545
  if ((unsigned int )tmp___0 == 2U) {
#line 3546
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3546
    return (tmp);
  } else {

  }
#line 3552
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3553
  val.i = 0U;
#line 3553
  val.ldv_38794.conn = 6U;
#line 3553
  mask.i = 0U;
#line 3553
  mask.ldv_38794.conn = 31U;
#line 3553
  drbd_force_state(mdev, mask, val);
#line 3554
  return (-5);
}
}
#line 3557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3561
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3564
  total = c->bytes[0] + c->bytes[1];
#line 3568
  if (total == 0U) {
#line 3569
    return;
  } else {

  }
#line 3572
  if (total >= plain) {
#line 3573
    return;
  } else {

  }
#line 3576
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3579
  if (r > 1000U) {
#line 3580
    r = 1000U;
  } else {

  }
#line 3582
  r = 1000U - r;
#line 3583
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3584
  return;
}
}
#line 3599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3604
  ok = 0;
#line 3605
  h = & mdev->data.rbuf.header.h80;
#line 3607
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 3613
  tmp = __get_free_pages(16U, 0U);
#line 3613
  buffer = (void *)tmp;
#line 3614
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3615
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3616
    goto out;
  } else {

  }
#line 3619
  tmp___0 = drbd_bm_bits(mdev);
#line 3619
  tmp___1 = drbd_bm_words(mdev);
#line 3619
  __constr_expr_0.bm_bits = tmp___0;
#line 3619
  __constr_expr_0.bm_words = tmp___1;
#line 3619
  __constr_expr_0.bit_offset = 0UL;
#line 3619
  __constr_expr_0.word_offset = 0UL;
#line 3619
  __constr_expr_0.packets[0] = 0U;
#line 3619
  __constr_expr_0.packets[1] = 0U;
#line 3619
  __constr_expr_0.bytes[0] = 0U;
#line 3619
  __constr_expr_0.bytes[1] = 0U;
#line 3619
  c = __constr_expr_0;
  ldv_51356: ;
#line 3625
  if ((unsigned int )cmd == 4U) {
#line 3626
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3627
  if ((unsigned int )cmd == 36U) {
#line 3632
    if (data_size > 4088U) {
#line 3633
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3634
      goto out;
    } else {

    }
#line 3637
    p = (struct p_compressed_bm *)buffer;
#line 3638
    __len = 8UL;
#line 3638
    if (__len > 63UL) {
#line 3638
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3638
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3639
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3639
    if ((unsigned int )tmp___2 != data_size) {
#line 3640
      goto out;
    } else {

    }
#line 3641
    if (data_size <= 1U) {
#line 3642
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3643
      goto out;
    } else {

    }
#line 3645
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3647
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3648
    goto out;
  }
#line 3651
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3652
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3654
  if (err <= 0) {
#line 3655
    if (err < 0) {
#line 3656
      goto out;
    } else {

    }
#line 3657
    goto ldv_51355;
  } else {

  }
#line 3659
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3659
  if (tmp___3 == 0) {
#line 3660
    goto out;
  } else {

  }
#line 3661
  goto ldv_51356;
  ldv_51355: 
#line 3663
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3665
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3668
    tmp___4 = drbd_send_bitmap(mdev);
#line 3668
    ok = tmp___4 == 0;
#line 3669
    if (ok == 0) {
#line 3670
      goto out;
    } else {

    }
#line 3672
    val.i = 0U;
#line 3672
    val.ldv_38794.conn = 15U;
#line 3672
    mask.i = 0U;
#line 3672
    mask.ldv_38794.conn = 31U;
#line 3672
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3673
    if ((int )rv != 1) {
#line 3673
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3673);
    } else {

    }
  } else
#line 3674
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3677
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38794.conn);
#line 3677
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3681
  ok = 1;
  out: 
#line 3683
  drbd_bm_unlock(mdev);
#line 3684
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3685
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3686
  free_pages((unsigned long )buffer, 0U);
#line 3687
  return (ok);
}
}
#line 3690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3696
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3699
  size = (int )data_size;
#line 3700
  goto ldv_51379;
  ldv_51378: 
#line 3701
  __min1 = size;
#line 3701
  __min2 = 128;
#line 3701
  want = __min1 < __min2 ? __min1 : __min2;
#line 3702
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3703
  _b = r <= 0;
#line 3703
  if (_b != 0) {
#line 3703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3703);
  } else {

  }
#line 3703
  if (_b != 0) {
#line 3703
    goto ldv_51377;
  } else {

  }
#line 3704
  size = size - r;
  ldv_51379: ;
#line 3700
  if (size > 0) {
#line 3701
    goto ldv_51378;
  } else {

  }
  ldv_51377: ;
#line 3706
  return (size == 0);
}
}
#line 3709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3713
  drbd_tcp_quickack(mdev->data.socket);
#line 3715
  return (1);
}
}
#line 3718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3720
  p = & mdev->data.rbuf.block_desc;
#line 3722
  switch ((int )mdev->state.ldv_38794.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3726
  goto ldv_51394;
  default: 
#line 3728
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38794.conn);
#line 3728
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_51394: 
#line 3732
  tmp___0 = __fswab32(p->blksize);
#line 3732
  tmp___1 = __fswab64(p->sector);
#line 3732
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3732U);
#line 3734
  return (1);
}
}
#line 3745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3745
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3782
  header = & mdev->data.rbuf.header;
#line 3788
  goto ldv_51415;
  ldv_51414: 
#line 3789
  drbd_thread_current_set_cpu(mdev);
#line 3790
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3790
  if (tmp == 0) {
#line 3791
    goto err_out;
  } else {

  }
#line 3793
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3793
  if (tmp___0 != 0L) {
#line 3794
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3795
    goto err_out;
  } else {
#line 3793
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3793
    if (tmp___1 != 0L) {
#line 3794
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3795
      goto err_out;
    } else {

    }
  }
#line 3798
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3799
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3800
    tmp___2 = cmdname(cmd);
#line 3800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3801
    goto err_out;
  } else {

  }
#line 3804
  if (shs != 0UL) {
#line 3805
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3806
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3806
    if (tmp___5 != 0L) {
#line 3807
      tmp___3 = get_current();
#line 3807
      tmp___4 = signal_pending(tmp___3);
#line 3807
      if (tmp___4 == 0) {
#line 3808
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3809
      goto err_out;
    } else {

    }
  } else {

  }
#line 3813
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3815
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3815
  if (tmp___7 != 0L) {
#line 3816
    tmp___6 = cmdname(cmd);
#line 3816
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3818
    goto err_out;
  } else {

  }
  ldv_51415: 
#line 3788
  tmp___8 = get_t_state(& mdev->receiver);
#line 3788
  if ((unsigned int )tmp___8 == 1U) {
#line 3789
    goto ldv_51414;
  } else {

  }

#line 3822
  if (0) {
    err_out: 
#line 3824
    val.i = 0U;
#line 3824
    val.ldv_38794.conn = 6U;
#line 3824
    mask.i = 0U;
#line 3824
    mask.ldv_38794.conn = 31U;
#line 3824
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3828
  drbd_md_sync(mdev);
#line 3829
  return;
}
}
#line 3831 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3835
  barr.w.cb = & w_prev_work_done;
#line 3836
  init_completion(& barr.done);
#line 3837
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3838
  wait_for_completion(& barr.done);
#line 3839
  return;
}
}
#line 3841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3845
  spin_lock_irq(& mdev->req_lock);
#line 3847
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3848
    spin_unlock_irq(& mdev->req_lock);
#line 3849
    return;
  } else {

  }
#line 3852
  h = mdev->ee_hash;
#line 3852
  goto ldv_51430;
  ldv_51429: ;
#line 3853
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3854
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3852
  h = h + 1;
  ldv_51430: ;
#line 3852
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3853
    goto ldv_51429;
  } else {

  }
#line 3856
  kfree((void const   *)mdev->ee_hash);
#line 3857
  mdev->ee_hash = 0;
#line 3858
  mdev->ee_hash_s = 0U;
#line 3861
  h = mdev->tl_hash;
#line 3861
  goto ldv_51433;
  ldv_51432: ;
#line 3862
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3863
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3861
  h = h + 1;
  ldv_51433: ;
#line 3861
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3862
    goto ldv_51432;
  } else {

  }
#line 3865
  kfree((void const   *)mdev->tl_hash);
#line 3866
  mdev->tl_hash = 0;
#line 3867
  mdev->tl_hash_s = 0U;
#line 3868
  spin_unlock_irq(& mdev->req_lock);
#line 3869
  return;
}
}
#line 3871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3875
  rv = 0;
#line 3878
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3879
    return;
  } else {

  }
#line 3886
  val.i = 0U;
#line 3886
  val.ldv_38794.conn = 5U;
#line 3886
  mask.i = 0U;
#line 3886
  mask.ldv_38794.conn = 31U;
#line 3886
  drbd_force_state(mdev, mask, val);
#line 3889
  drbd_thread_stop(& mdev->asender);
#line 3890
  drbd_free_sock(mdev);
#line 3893
  spin_lock_irq(& mdev->req_lock);
#line 3894
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3895
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3896
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3897
  spin_unlock_irq(& mdev->req_lock);
#line 3909
  drbd_rs_cancel_all(mdev);
#line 3910
  mdev->rs_total = 0UL;
#line 3911
  mdev->rs_failed = 0UL;
#line 3912
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3913
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3916
  del_timer_sync(& mdev->resync_timer);
#line 3917
  resync_timer_fn((unsigned long )mdev);
#line 3922
  drbd_flush_workqueue(mdev);
#line 3926
  drbd_process_done_ee(mdev);
#line 3928
  kfree((void const   *)mdev->p_uuid);
#line 3929
  mdev->p_uuid = 0;
#line 3931
  tmp = is_susp(mdev->state);
#line 3931
  if (tmp == 0) {
#line 3932
    tl_clear(mdev);
  } else {

  }
#line 3934
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3936
  drbd_md_sync(mdev);
#line 3938
  fp = FP_DONT_CARE;
#line 3939
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3939
  if (tmp___0 != 0) {
#line 3940
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3941
    put_ldev(mdev);
  } else {

  }
#line 3944
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_38794.pdsk > 5) {
#line 3945
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3947
  spin_lock_irq(& mdev->req_lock);
#line 3948
  os = mdev->state;
#line 3949
  if ((int )os.ldv_38794.conn > 1) {
#line 3951
    ns = os;
#line 3952
    ns.ldv_38794.conn = 2U;
#line 3953
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3953
    rv = (int )tmp___1;
  } else {

  }
#line 3955
  spin_unlock_irq(& mdev->req_lock);
#line 3957
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3958
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3958
    if (tmp___2 == 0) {
#line 3958
      goto ldv_51447;
    } else {

    }
#line 3958
    tmp___3 = get_current();
#line 3958
    __wait.flags = 0U;
#line 3958
    __wait.private = (void *)tmp___3;
#line 3958
    __wait.func = & autoremove_wake_function;
#line 3958
    __wait.task_list.next = & __wait.task_list;
#line 3958
    __wait.task_list.prev = & __wait.task_list;
    ldv_51450: 
#line 3958
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3958
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3958
    if (tmp___4 == 0) {
#line 3958
      goto ldv_51449;
    } else {

    }
#line 3958
    schedule();
#line 3958
    goto ldv_51450;
    ldv_51449: 
#line 3958
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_51447: 
#line 3960
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3961
    mdev->cram_hmac_tfm = 0;
#line 3963
    kfree((void const   *)mdev->net_conf);
#line 3964
    mdev->net_conf = 0;
#line 3965
    val___0.i = 0U;
#line 3965
    val___0.ldv_38794.conn = 0U;
#line 3965
    mask___0.i = 0U;
#line 3965
    mask___0.ldv_38794.conn = 31U;
#line 3965
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3970
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3970
  if (tmp___5 == 0) {
#line 3970
    goto ldv_51455;
  } else {

  }
#line 3970
  tmp___6 = get_current();
#line 3970
  __wait___0.flags = 0U;
#line 3970
  __wait___0.private = (void *)tmp___6;
#line 3970
  __wait___0.func = & autoremove_wake_function;
#line 3970
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3970
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51458: 
#line 3970
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3970
  tmp___7 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3970
  if (tmp___7 == 0) {
#line 3970
    goto ldv_51457;
  } else {

  }
#line 3970
  schedule();
#line 3970
  goto ldv_51458;
  ldv_51457: 
#line 3970
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_51455: 
#line 3979
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3979
  i = (unsigned int )tmp___8;
#line 3980
  if (i != 0U) {
#line 3981
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3982
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3982
  i = (unsigned int )tmp___9;
#line 3983
  if (i != 0U) {
#line 3984
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3985
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3985
  i = (unsigned int )tmp___10;
#line 3986
  if (i != 0U) {
#line 3987
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3989
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3989
  if (tmp___11 == 0) {
#line 3989
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3989);
  } else {

  }
#line 3990
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3990
  if (tmp___12 == 0) {
#line 3990
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3990);
  } else {

  }
#line 3991
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3991
  if (tmp___13 == 0) {
#line 3991
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3991);
  } else {

  }
#line 3992
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3992
  if (tmp___14 == 0) {
#line 3992
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3992);
  } else {

  }
#line 3995
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3996
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3996
  if (tmp___15 == 0) {
#line 3996
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3996);
  } else {

  }
#line 3997
  return;
}
}
#line 4008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 4011
  p = & mdev->data.sbuf.handshake;
#line 4014
  tmp = ldv_mutex_lock_interruptible_75(& mdev->data.mutex);
#line 4014
  if (tmp != 0) {
#line 4015
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4016
    return (0);
  } else {

  }
#line 4019
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4020
    ldv_mutex_unlock_76(& mdev->data.mutex);
#line 4021
    return (0);
  } else {

  }
#line 4024
  memset((void *)p, 0, 80UL);
#line 4025
  p->protocol_min = 1442840576U;
#line 4026
  p->protocol_max = 1610612736U;
#line 4027
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4029
  ldv_mutex_unlock_77(& mdev->data.mutex);
#line 4030
  return (ok);
}
}
#line 4040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4043
  p = & mdev->data.rbuf.handshake;
#line 4044
  expect = 72;
#line 4049
  rv = drbd_send_handshake(mdev);
#line 4050
  if (rv == 0) {
#line 4051
    return (0);
  } else {

  }
#line 4053
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4054
  if (rv == 0) {
#line 4055
    return (0);
  } else {

  }
#line 4057
  if ((unsigned int )cmd != 65534U) {
#line 4058
    tmp = cmdname(cmd);
#line 4058
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4060
    return (-1);
  } else {

  }
#line 4063
  if ((unsigned int )expect != length) {
#line 4064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4066
    return (-1);
  } else {

  }
#line 4069
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4071
  if (rv != expect) {
#line 4072
    tmp___0 = get_current();
#line 4072
    tmp___1 = signal_pending(tmp___0);
#line 4072
    if (tmp___1 == 0) {
#line 4073
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4074
    return (0);
  } else {

  }
#line 4077
  tmp___2 = __fswab32(p->protocol_min);
#line 4077
  p->protocol_min = tmp___2;
#line 4078
  tmp___3 = __fswab32(p->protocol_max);
#line 4078
  p->protocol_max = tmp___3;
#line 4079
  if (p->protocol_max == 0U) {
#line 4080
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4082
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 4084
    goto incompat;
  } else {

  }
#line 4086
  __min1 = 96;
#line 4086
  __min2 = (int )p->protocol_max;
#line 4086
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4088
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4091
  return (1);
  incompat: 
#line 4094
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4098
  return (-1);
}
}
#line 4117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4121
  response = 0;
#line 4122
  right_response = 0;
#line 4123
  peers_ch = 0;
#line 4124
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4124
  key_len = (unsigned int )tmp;
#line 4131
  desc.tfm = mdev->cram_hmac_tfm;
#line 4132
  desc.flags = 0U;
#line 4134
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4136
  if (rv != 0) {
#line 4137
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4138
    rv = -1;
#line 4139
    goto fail;
  } else {

  }
#line 4142
  get_random_bytes((void *)(& my_challenge), 64);
#line 4144
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4145
  if (rv == 0) {
#line 4146
    goto fail;
  } else {

  }
#line 4148
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4149
  if (rv == 0) {
#line 4150
    goto fail;
  } else {

  }
#line 4152
  if ((unsigned int )cmd != 16U) {
#line 4153
    tmp___0 = cmdname(cmd);
#line 4153
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4155
    rv = 0;
#line 4156
    goto fail;
  } else {

  }
#line 4159
  if (length > 128U) {
#line 4160
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4161
    rv = -1;
#line 4162
    goto fail;
  } else {

  }
#line 4165
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4165
  peers_ch = (char *)tmp___1;
#line 4166
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4168
    rv = -1;
#line 4169
    goto fail;
  } else {

  }
#line 4172
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4174
  if ((unsigned int )rv != length) {
#line 4175
    tmp___2 = get_current();
#line 4175
    tmp___3 = signal_pending(tmp___2);
#line 4175
    if (tmp___3 == 0) {
#line 4176
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4177
    rv = 0;
#line 4178
    goto fail;
  } else {

  }
#line 4181
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4182
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4182
  response = (char *)tmp___4;
#line 4183
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4185
    rv = -1;
#line 4186
    goto fail;
  } else {

  }
#line 4189
  sg_init_table(& sg, 1U);
#line 4190
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4192
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4193
  if (rv != 0) {
#line 4194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4195
    rv = -1;
#line 4196
    goto fail;
  } else {

  }
#line 4199
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4200
  if (rv == 0) {
#line 4201
    goto fail;
  } else {

  }
#line 4203
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4204
  if (rv == 0) {
#line 4205
    goto fail;
  } else {

  }
#line 4207
  if ((unsigned int )cmd != 17U) {
#line 4208
    tmp___5 = cmdname(cmd);
#line 4208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4210
    rv = 0;
#line 4211
    goto fail;
  } else {

  }
#line 4214
  if (length != resp_size) {
#line 4215
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4216
    rv = 0;
#line 4217
    goto fail;
  } else {

  }
#line 4220
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4222
  if ((unsigned int )rv != resp_size) {
#line 4223
    tmp___6 = get_current();
#line 4223
    tmp___7 = signal_pending(tmp___6);
#line 4223
    if (tmp___7 == 0) {
#line 4224
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4225
    rv = 0;
#line 4226
    goto fail;
  } else {

  }
#line 4229
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4229
  right_response = (char *)tmp___8;
#line 4230
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4232
    rv = -1;
#line 4233
    goto fail;
  } else {

  }
#line 4236
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4238
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4239
  if (rv != 0) {
#line 4240
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4241
    rv = -1;
#line 4242
    goto fail;
  } else {

  }
#line 4245
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4245
  rv = tmp___9 == 0;
#line 4247
  if (rv != 0) {
#line 4248
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4251
    rv = -1;
  }
  fail: 
#line 4254
  kfree((void const   *)peers_ch);
#line 4255
  kfree((void const   *)response);
#line 4256
  kfree((void const   *)right_response);
#line 4258
  return (rv);
}
}
#line 4262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4264
  mdev = thi->mdev;
#line 4265
  tmp = mdev_to_minor(mdev);
#line 4265
  minor = tmp;
#line 4268
  tmp___0 = get_current();
#line 4268
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4270
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_51501: 
#line 4273
  h = drbd_connect(mdev);
#line 4274
  if (h == 0) {
#line 4275
    drbd_disconnect(mdev);
#line 4276
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4278
  if (h == -1) {
#line 4279
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4280
    val.i = 0U;
#line 4280
    val.ldv_38794.conn = 1U;
#line 4280
    mask.i = 0U;
#line 4280
    mask.ldv_38794.conn = 31U;
#line 4280
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4282
  if (h == 0) {
#line 4283
    goto ldv_51501;
  } else {

  }

#line 4284
  if (h > 0) {
#line 4285
    tmp___1 = get_net_conf(mdev);
#line 4285
    if (tmp___1 != 0) {
#line 4286
      drbdd(mdev);
#line 4287
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4291
  drbd_disconnect(mdev);
#line 4293
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4294
  return (0);
}
}
#line 4299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4301
  p = (struct p_req_state_reply *)h;
#line 4303
  tmp = __fswab32(p->retcode);
#line 4303
  retcode = (int )tmp;
#line 4305
  if (retcode > 0) {
#line 4306
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4308
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4309
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4312
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4314
  return (1);
}
}
#line 4317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4319
  tmp = drbd_send_ping_ack(mdev);
#line 4319
  return (tmp);
}
}
#line 4323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4326
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4327
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4327
  if (tmp == 0) {
#line 4328
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4330
  return (1);
}
}
#line 4333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4335
  p = (struct p_block_ack *)h;
#line 4336
  tmp = __fswab64(p->sector);
#line 4336
  sector = (sector_t )tmp;
#line 4337
  tmp___0 = __fswab32(p->blksize);
#line 4337
  blksize = (int )tmp___0;
#line 4339
  if (mdev->agreed_pro_version <= 88) {
#line 4339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4339);
  } else {

  }
#line 4341
  tmp___1 = __fswab32(p->seq_num);
#line 4341
  update_peer_seq(mdev, tmp___1);
#line 4343
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4343
  if (tmp___2 != 0) {
#line 4344
    drbd_rs_complete_io(mdev, sector);
#line 4345
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4345U);
#line 4347
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4348
    put_ldev(mdev);
  } else {

  }
#line 4350
  atomic_dec(& mdev->rs_pending_cnt);
#line 4350
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4350
  if (tmp___4 < 0) {
#line 4350
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4350, tmp___3);
  } else {

  }
#line 4351
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4353
  return (1);
}
}
#line 4358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4361
  tmp = tl_hash_slot(mdev, sector);
#line 4361
  slot = tmp;
#line 4365
  n = slot->first;
#line 4365
  goto ldv_51541;
  ldv_51540: ;
#line 4366
  if ((unsigned long )req == (unsigned long )id) {
#line 4367
    if (req->sector != sector) {
#line 4368
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4372
      goto ldv_51539;
    } else {

    }
#line 4374
    return (req);
  } else {

  }
#line 4365
  n = n->next;
  ldv_51541: ;
#line 4365
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4365
    __mptr = (struct hlist_node  const  *)n;
#line 4365
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4365
    if (1 != 0) {
#line 4366
      goto ldv_51540;
    } else {
#line 4368
      goto ldv_51539;
    }
  } else {

  }
  ldv_51539: ;
#line 4377
  return (0);
}
}
#line 4383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4390
  spin_lock_irq(& mdev->req_lock);
#line 4391
  req = (*validator)(mdev, id, sector);
#line 4392
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4392
  if (tmp != 0L) {
#line 4393
    spin_unlock_irq(& mdev->req_lock);
#line 4395
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4397
    return (0);
  } else {

  }
#line 4399
  __req_mod(req, what, & m);
#line 4400
  spin_unlock_irq(& mdev->req_lock);
#line 4402
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4403
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4404
  return (1);
}
}
#line 4407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4409
  p = (struct p_block_ack *)h;
#line 4410
  tmp = __fswab64(p->sector);
#line 4410
  sector = (sector_t )tmp;
#line 4411
  tmp___0 = __fswab32(p->blksize);
#line 4411
  blksize = (int )tmp___0;
#line 4414
  tmp___1 = __fswab32(p->seq_num);
#line 4414
  update_peer_seq(mdev, tmp___1);
#line 4416
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4417
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4417U);
#line 4418
    atomic_dec(& mdev->rs_pending_cnt);
#line 4418
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4418
    if (tmp___3 < 0) {
#line 4418
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4418
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4418, tmp___2);
    } else {

    }
#line 4419
    return (1);
  } else {

  }
#line 4421
  tmp___4 = __fswab16((int )h->command);
#line 4421
  switch ((int )tmp___4) {
  case 23: ;
#line 4423
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4423
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4423);
  } else {

  }
#line 4424
  what = write_acked_by_peer_and_sis;
#line 4425
  goto ldv_51569;
  case 22: ;
#line 4427
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4427);
  } else {

  }
#line 4428
  what = write_acked_by_peer;
#line 4429
  goto ldv_51569;
  case 21: ;
#line 4431
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4431
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4431);
  } else {

  }
#line 4432
  what = recv_acked_by_peer;
#line 4433
  goto ldv_51569;
  case 24: ;
#line 4435
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4435
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4435);
  } else {

  }
#line 4436
  what = conflict_discarded_by_peer;
#line 4437
  goto ldv_51569;
  default: 
#line 4439
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4439);
#line 4440
  return (0);
  }
  ldv_51569: 
#line 4443
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4443
  return (tmp___5);
}
}
#line 4447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4449
  p = (struct p_block_ack *)h;
#line 4450
  tmp = __fswab64(p->sector);
#line 4450
  sector = (sector_t )tmp;
#line 4451
  tmp___0 = __fswab32(p->blksize);
#line 4451
  size = (int )tmp___0;
#line 4455
  tmp___1 = __fswab32(p->seq_num);
#line 4455
  update_peer_seq(mdev, tmp___1);
#line 4457
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4458
    atomic_dec(& mdev->rs_pending_cnt);
#line 4458
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4458
    if (tmp___3 < 0) {
#line 4458
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4458
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4458, tmp___2);
    } else {

    }
#line 4459
    drbd_rs_failed_io(mdev, sector, size);
#line 4460
    return (1);
  } else {

  }
#line 4463
  spin_lock_irq(& mdev->req_lock);
#line 4464
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4465
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4466
    spin_unlock_irq(& mdev->req_lock);
#line 4467
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4475
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4475U);
#line 4476
      return (1);
    } else {
#line 4478
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4480
      return (0);
    }
  } else {

  }
#line 4483
  __req_mod(req, neg_acked, & m);
#line 4484
  spin_unlock_irq(& mdev->req_lock);
#line 4486
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4487
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4488
  return (1);
}
}
#line 4491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4493
  p = (struct p_block_ack *)h;
#line 4494
  tmp = __fswab64(p->sector);
#line 4494
  sector = (sector_t )tmp;
#line 4496
  tmp___0 = __fswab32(p->seq_num);
#line 4496
  update_peer_seq(mdev, tmp___0);
#line 4497
  tmp___1 = __fswab32(p->blksize);
#line 4497
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4500
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4500
  return (tmp___2);
}
}
#line 4504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4508
  p = (struct p_block_ack *)h;
#line 4510
  tmp = __fswab64(p->sector);
#line 4510
  sector = (sector_t )tmp;
#line 4511
  tmp___0 = __fswab32(p->blksize);
#line 4511
  size = (int )tmp___0;
#line 4513
  tmp___1 = __fswab32(p->seq_num);
#line 4513
  update_peer_seq(mdev, tmp___1);
#line 4515
  atomic_dec(& mdev->rs_pending_cnt);
#line 4515
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4515
  if (tmp___3 < 0) {
#line 4515
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4515, tmp___2);
  } else {

  }
#line 4517
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4517
  if (tmp___5 != 0) {
#line 4518
    drbd_rs_complete_io(mdev, sector);
#line 4519
    tmp___4 = __fswab16((int )h->command);
#line 4519
    switch ((int )tmp___4) {
    case 27: 
#line 4521
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4523
    goto ldv_51607;
    default: 
#line 4525
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4525);
#line 4526
    put_ldev(mdev);
#line 4527
    return (0);
    }
    ldv_51607: 
#line 4529
    put_ldev(mdev);
  } else {

  }
#line 4532
  return (1);
}
}
#line 4535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4537
  p = (struct p_barrier_ack *)h;
#line 4539
  tmp = __fswab32(p->set_size);
#line 4539
  tl_release(mdev, p->barrier, tmp);
#line 4541
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4541
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4541
    if (tmp___0 == 0) {
#line 4541
      tmp___1 = test_and_set_bit(29, (unsigned long volatile   *)(& mdev->flags));
#line 4541
      if (tmp___1 == 0) {
#line 4544
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4545
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4548
  return (1);
}
}
#line 4551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4553
  p = (struct p_block_ack *)h;
#line 4558
  tmp = __fswab64(p->sector);
#line 4558
  sector = (sector_t )tmp;
#line 4559
  tmp___0 = __fswab32(p->blksize);
#line 4559
  size = (int )tmp___0;
#line 4561
  tmp___1 = __fswab32(p->seq_num);
#line 4561
  update_peer_seq(mdev, tmp___1);
#line 4563
  tmp___2 = __fswab64(p->block_id);
#line 4563
  if (tmp___2 == 4712ULL) {
#line 4564
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4566
    ov_oos_print(mdev);
  }
#line 4568
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4568
  if (tmp___3 == 0) {
#line 4569
    return (1);
  } else {

  }
#line 4571
  drbd_rs_complete_io(mdev, sector);
#line 4572
  atomic_dec(& mdev->rs_pending_cnt);
#line 4572
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4572
  if (tmp___5 < 0) {
#line 4572
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4572
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4572, tmp___4);
  } else {

  }
#line 4574
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4577
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4578
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4580
  if (mdev->ov_left == 0UL) {
#line 4581
    tmp___6 = kmalloc(24UL, 16U);
#line 4581
    w = (struct drbd_work *)tmp___6;
#line 4582
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4583
      w->cb = & w_ov_finished;
#line 4584
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4586
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4587
      ov_oos_print(mdev);
#line 4588
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4591
  put_ldev(mdev);
#line 4592
  return (1);
}
}
#line 4595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4597
  return (1);
}
}
#line 4605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4607
  asender_tbl[0].pkt_size = 0UL;
#line 4607
  asender_tbl[0].process = 0;
#line 4607
  asender_tbl[1].pkt_size = 0UL;
#line 4607
  asender_tbl[1].process = 0;
#line 4607
  asender_tbl[2].pkt_size = 0UL;
#line 4607
  asender_tbl[2].process = 0;
#line 4607
  asender_tbl[3].pkt_size = 0UL;
#line 4607
  asender_tbl[3].process = 0;
#line 4607
  asender_tbl[4].pkt_size = 0UL;
#line 4607
  asender_tbl[4].process = 0;
#line 4607
  asender_tbl[5].pkt_size = 0UL;
#line 4607
  asender_tbl[5].process = 0;
#line 4607
  asender_tbl[6].pkt_size = 0UL;
#line 4607
  asender_tbl[6].process = 0;
#line 4607
  asender_tbl[7].pkt_size = 0UL;
#line 4607
  asender_tbl[7].process = 0;
#line 4607
  asender_tbl[8].pkt_size = 0UL;
#line 4607
  asender_tbl[8].process = 0;
#line 4607
  asender_tbl[9].pkt_size = 0UL;
#line 4607
  asender_tbl[9].process = 0;
#line 4607
  asender_tbl[10].pkt_size = 0UL;
#line 4607
  asender_tbl[10].process = 0;
#line 4607
  asender_tbl[11].pkt_size = 0UL;
#line 4607
  asender_tbl[11].process = 0;
#line 4607
  asender_tbl[12].pkt_size = 0UL;
#line 4607
  asender_tbl[12].process = 0;
#line 4607
  asender_tbl[13].pkt_size = 0UL;
#line 4607
  asender_tbl[13].process = 0;
#line 4607
  asender_tbl[14].pkt_size = 0UL;
#line 4607
  asender_tbl[14].process = 0;
#line 4607
  asender_tbl[15].pkt_size = 0UL;
#line 4607
  asender_tbl[15].process = 0;
#line 4607
  asender_tbl[16].pkt_size = 0UL;
#line 4607
  asender_tbl[16].process = 0;
#line 4607
  asender_tbl[17].pkt_size = 0UL;
#line 4607
  asender_tbl[17].process = 0;
#line 4607
  asender_tbl[18].pkt_size = 0UL;
#line 4607
  asender_tbl[18].process = 0;
#line 4607
  asender_tbl[19].pkt_size = 8UL;
#line 4607
  asender_tbl[19].process = & got_Ping;
#line 4607
  asender_tbl[20].pkt_size = 8UL;
#line 4607
  asender_tbl[20].process = & got_PingAck;
#line 4607
  asender_tbl[21].pkt_size = 32UL;
#line 4607
  asender_tbl[21].process = & got_BlockAck;
#line 4607
  asender_tbl[22].pkt_size = 32UL;
#line 4607
  asender_tbl[22].process = & got_BlockAck;
#line 4607
  asender_tbl[23].pkt_size = 32UL;
#line 4607
  asender_tbl[23].process = & got_BlockAck;
#line 4607
  asender_tbl[24].pkt_size = 32UL;
#line 4607
  asender_tbl[24].process = & got_BlockAck;
#line 4607
  asender_tbl[25].pkt_size = 32UL;
#line 4607
  asender_tbl[25].process = & got_NegAck;
#line 4607
  asender_tbl[26].pkt_size = 32UL;
#line 4607
  asender_tbl[26].process = & got_NegDReply;
#line 4607
  asender_tbl[27].pkt_size = 32UL;
#line 4607
  asender_tbl[27].process = & got_NegRSDReply;
#line 4607
  asender_tbl[28].pkt_size = 16UL;
#line 4607
  asender_tbl[28].process = & got_BarrierAck;
#line 4607
  asender_tbl[29].pkt_size = 12UL;
#line 4607
  asender_tbl[29].process = & got_RqSReply;
#line 4607
  asender_tbl[30].pkt_size = 0UL;
#line 4607
  asender_tbl[30].process = 0;
#line 4607
  asender_tbl[31].pkt_size = 0UL;
#line 4607
  asender_tbl[31].process = 0;
#line 4607
  asender_tbl[32].pkt_size = 32UL;
#line 4607
  asender_tbl[32].process = & got_OVResult;
#line 4607
  asender_tbl[33].pkt_size = 0UL;
#line 4607
  asender_tbl[33].process = 0;
#line 4607
  asender_tbl[34].pkt_size = 32UL;
#line 4607
  asender_tbl[34].process = & got_IsInSync;
#line 4607
  asender_tbl[35].pkt_size = 0UL;
#line 4607
  asender_tbl[35].process = 0;
#line 4607
  asender_tbl[36].pkt_size = 0UL;
#line 4607
  asender_tbl[36].process = 0;
#line 4607
  asender_tbl[37].pkt_size = 0UL;
#line 4607
  asender_tbl[37].process = 0;
#line 4607
  asender_tbl[38].pkt_size = 0UL;
#line 4607
  asender_tbl[38].process = 0;
#line 4607
  asender_tbl[39].pkt_size = 16UL;
#line 4607
  asender_tbl[39].process = & got_skip;
#line 4607
  asender_tbl[40].pkt_size = 0UL;
#line 4607
  asender_tbl[40].process = 0;
#line 4607
  asender_tbl[41].pkt_size = 32UL;
#line 4607
  asender_tbl[41].process = & got_NegRSDReply;
#line 4607
  asender_tbl[42].pkt_size = 0UL;
#line 4607
  asender_tbl[42].process = 0;
#line 4628
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4629
    return (0);
  } else {

  }
#line 4630
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4635
  mdev = thi->mdev;
#line 4636
  h = & mdev->meta.rbuf.header.h80;
#line 4637
  cmd = 0;
#line 4640
  buf = (void *)h;
#line 4641
  received = 0;
#line 4642
  expect = 8;
#line 4644
  ping_timeout_active = 0;
#line 4646
  tmp = mdev_to_minor(mdev);
#line 4646
  tmp___0 = get_current();
#line 4646
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4648
  tmp___1 = get_current();
#line 4648
  tmp___1->policy = 2U;
#line 4649
  tmp___2 = get_current();
#line 4649
  tmp___2->rt_priority = 2U;
#line 4651
  goto ldv_51658;
  ldv_51668: 
#line 4652
  drbd_thread_current_set_cpu(mdev);
#line 4653
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4653
  if (tmp___4 != 0) {
#line 4654
    tmp___3 = drbd_send_ping(mdev);
#line 4654
    _b = tmp___3 == 0;
#line 4654
    if (_b != 0) {
#line 4654
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4654);
    } else {

    }
#line 4654
    if (_b != 0) {
#line 4654
      goto reconnect;
    } else {

    }
#line 4655
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4657
    ping_timeout_active = 1;
  } else {

  }
#line 4662
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4662
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4662
    if (tmp___5 > 3) {
#line 4664
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_51657: 
#line 4666
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4667
  tmp___6 = get_current();
#line 4667
  flush_signals(tmp___6);
#line 4668
  tmp___7 = drbd_process_done_ee(mdev);
#line 4668
  if (tmp___7 == 0) {
#line 4669
    goto reconnect;
  } else {

  }
#line 4671
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4672
  spin_lock_irq(& mdev->req_lock);
#line 4673
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4674
  spin_unlock_irq(& mdev->req_lock);
#line 4678
  if (empty != 0) {
#line 4679
    goto ldv_51656;
  } else {

  }
#line 4680
  goto ldv_51657;
  ldv_51656: ;
#line 4682
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4683
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4686
  tmp___8 = get_current();
#line 4686
  tmp___9 = signal_pending(tmp___8);
#line 4686
  if (tmp___9 != 0) {
#line 4687
    goto ldv_51658;
  } else {

  }
#line 4689
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4691
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4693
  tmp___10 = get_current();
#line 4693
  flush_signals(tmp___10);
#line 4705
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4705
  if (tmp___11 != 0L) {
#line 4706
    received = received + rv;
#line 4707
    buf = buf + (unsigned long )rv;
  } else
#line 4708
  if (rv == 0) {
#line 4709
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4710
    goto reconnect;
  } else
#line 4711
  if (rv == -11) {
#line 4714
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4716
      goto ldv_51658;
    } else {

    }
#line 4717
    if (ping_timeout_active != 0) {
#line 4718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4719
      goto reconnect;
    } else {

    }
#line 4721
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4722
    goto ldv_51658;
  } else
#line 4723
  if (rv == -4) {
#line 4724
    goto ldv_51658;
  } else {
#line 4726
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4727
    goto reconnect;
  }
#line 4730
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4731
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4731
    if (tmp___15 != 0L) {
#line 4732
      tmp___12 = __fswab16((int )h->length);
#line 4732
      tmp___13 = __fswab16((int )h->command);
#line 4732
      tmp___14 = __fswab32(h->magic);
#line 4732
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4736
      goto reconnect;
    } else {

    }
#line 4738
    tmp___16 = __fswab16((int )h->command);
#line 4738
    cmd = get_asender_cmd((int )tmp___16);
#line 4739
    tmp___17 = __fswab16((int )h->length);
#line 4739
    len = (int )tmp___17;
#line 4740
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4740
    if (tmp___21 != 0L) {
#line 4741
      tmp___18 = __fswab16((int )h->length);
#line 4741
      tmp___19 = __fswab16((int )h->command);
#line 4741
      tmp___20 = __fswab32(h->magic);
#line 4741
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4745
      goto disconnect;
    } else {

    }
#line 4747
    expect = (int )cmd->pkt_size;
#line 4748
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4748
    if (_b___0 != 0) {
#line 4748
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4748);
    } else {

    }
#line 4748
    if (_b___0 != 0) {
#line 4749
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4751
  if (received == expect) {
#line 4752
    mdev->last_received = jiffies;
#line 4753
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4753
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4753);
    } else {

    }
#line 4754
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4754
    if (tmp___22 == 0) {
#line 4755
      goto reconnect;
    } else {

    }
#line 4759
    tmp___23 = get_asender_cmd(20);
#line 4759
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4760
      ping_timeout_active = 0;
    } else {

    }
#line 4762
    buf = (void *)h;
#line 4763
    received = 0;
#line 4764
    expect = 8;
#line 4765
    cmd = 0;
  } else {

  }
  ldv_51658: 
#line 4651
  tmp___24 = get_t_state(thi);
#line 4651
  if ((unsigned int )tmp___24 == 1U) {
#line 4652
    goto ldv_51668;
  } else {

  }

#line 4769
  if (0) {
    reconnect: 
#line 4771
    val.i = 0U;
#line 4771
    val.ldv_38794.conn = 5U;
#line 4771
    mask.i = 0U;
#line 4771
    mask.ldv_38794.conn = 31U;
#line 4771
    drbd_force_state(mdev, mask, val);
#line 4772
    drbd_md_sync(mdev);
  } else {

  }
#line 4774
  if (0) {
    disconnect: 
#line 4776
    val___0.i = 0U;
#line 4776
    val___0.ldv_38794.conn = 1U;
#line 4776
    mask___0.i = 0U;
#line 4776
    mask___0.ldv_38794.conn = 31U;
#line 4776
    drbd_force_state(mdev, mask___0, val___0);
#line 4777
    drbd_md_sync(mdev);
  } else {

  }
#line 4779
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4781
  if ((int )mdev->state.ldv_38794.conn > 9) {
#line 4781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4781);
  } else {

  }
#line 4782
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4784
  return (0);
}
}
#line 4824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4836
  LDV_IN_INTERRUPT = 1;
#line 4845
  ldv_initialize();
#line 4847
  goto ldv_51697;
  ldv_51696: 
#line 4850
  tmp = nondet_int();
#line 4850
  switch (tmp) {
  default: ;
#line 4852
  goto ldv_51695;
  }
  ldv_51695: ;
  ldv_51697: 
#line 4847
  tmp___0 = nondet_int();
#line 4847
  if (tmp___0 != 0) {
#line 4848
    goto ldv_51696;
  } else {

  }


#line 4861
  ldv_check_final_state();
#line 4864
  return;
}
}
#line 4868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4873
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4875
  mutex_lock(ldv_func_arg1);
#line 4876
  return;
}
}
#line 4878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4883
  tmp = mutex_trylock(ldv_func_arg1);
#line 4883
  ldv_func_res = tmp;
#line 4885
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4885
  return (tmp___0);
#line 4887
  return (ldv_func_res);
}
}
#line 4890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4895
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4897
  mutex_unlock(ldv_func_arg1);
#line 4898
  return;
}
}
#line 4900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4905
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4907
  mutex_lock(ldv_func_arg1);
#line 4908
  return;
}
}
#line 4910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4915
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4917
  mutex_unlock(ldv_func_arg1);
#line 4918
  return;
}
}
#line 4920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4925
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4927
  mutex_lock(ldv_func_arg1);
#line 4928
  return;
}
}
#line 4930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4935
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4937
  mutex_unlock(ldv_func_arg1);
#line 4938
  return;
}
}
#line 4940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4945
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4947
  mutex_unlock(ldv_func_arg1);
#line 4948
  return;
}
}
#line 4950 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4955
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4955
  ldv_func_res = tmp;
#line 4957
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4957
  return (tmp___0);
#line 4959
  return (ldv_func_res);
}
}
#line 4962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4967
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4969
  mutex_unlock(ldv_func_arg1);
#line 4970
  return;
}
}
#line 4972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4977
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4979
  mutex_unlock(ldv_func_arg1);
#line 4980
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6266;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6266;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6266;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6266;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6266: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 162 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 164
  tmp = current_thread_info___1();
#line 164
  tmp->preempt_count = tmp->preempt_count + 1;
#line 164
  __asm__  volatile   ("": : : "memory");
#line 165
  return;
}
}
#line 167 "include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 169
  __asm__  volatile   ("": : : "memory");
#line 169
  tmp = current_thread_info___1();
#line 169
  tmp->preempt_count = tmp->preempt_count + -1;
#line 169
  __asm__  volatile   ("": : : "memory");
#line 170
  return;
}
}
#line 271
extern int rcu_is_cpu_idle(void) ;
#line 279 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 281
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 283
  return;
}
}
#line 284 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 286
  lock_release(map, 1, (unsigned long )((void *)0));
#line 288
  return;
}
}
#line 289
extern struct lockdep_map rcu_lock_map ;
#line 292
extern int debug_lockdep_rcu_enabled(void) ;
#line 725 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 727
  __rcu_read_lock();
#line 729
  rcu_lock_acquire(& rcu_lock_map);
#line 730
  tmp = debug_lockdep_rcu_enabled();
#line 730
  if (tmp != 0 && ! __warned) {
#line 730
    tmp___0 = rcu_is_cpu_idle();
#line 730
    if (tmp___0 != 0) {
#line 730
      __warned = 1;
#line 730
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 731, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 733
  return;
}
}
#line 749 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 751
  tmp = debug_lockdep_rcu_enabled();
#line 751
  if (tmp != 0 && ! __warned) {
#line 751
    tmp___0 = rcu_is_cpu_idle();
#line 751
    if (tmp___0 != 0) {
#line 751
      __warned = 1;
#line 751
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 752, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 753
  rcu_lock_release(& rcu_lock_map);
#line 755
  __rcu_read_unlock();
#line 756
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 196 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 198
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 198
  if (tmp != 0L) {
#line 199
    if (part->partno != 0) {
#line 200
      __mptr = (struct device  const  *)part->__dev.parent;
#line 200
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 202
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 202
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 204
  return (0);
}
}
#line 368 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 370
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 371
  if (part->partno != 0) {
#line 372
    tmp = part_to_disk(part);
#line 372
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 373
  return;
}
}
#line 375 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 377
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 378
  if (part->partno != 0) {
#line 379
    tmp = part_to_disk(part);
#line 379
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 380
  return;
}
}
#line 401
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 209 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 210
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1224
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1496
mempool_t *drbd_request_mempool ;
#line 1539
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1541
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1846
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1848
  if (forcedetach == 0) {
#line 1849
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1849
    if (tmp != 0) {
#line 1850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1851
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1852
      __ns.i = mdev->state.i;
#line 1852
      __ns.ldv_38794.disk = 4U;
#line 1852
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1853
    goto ldv_49380;
  } else {

  }
  case 2: ;
  case 1: 
#line 1858
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1859
  if ((int )mdev->state.ldv_38794.disk > 2) {
#line 1860
    __ns___0.i = mdev->state.i;
#line 1860
    __ns___0.ldv_38794.disk = 2U;
#line 1860
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1864
  goto ldv_49380;
  }
  ldv_49380: ;
#line 1867
  return;
}
}
#line 2085 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2087
  atomic_inc(& mdev->ap_pending_cnt);
#line 2088
  return;
}
}
#line 2265 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2267
  mxb = 1000000;
#line 2268
  tmp = get_net_conf(mdev);
#line 2268
  if (tmp != 0) {
#line 2269
    mxb = (mdev->net_conf)->max_buffers;
#line 2270
    put_net_conf(mdev);
  } else {

  }
#line 2272
  return (mxb);
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2277
  s = mdev->state;
#line 2282
  switch ((unsigned int )s.ldv_38794.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2307
  goto ldv_49552;
  case 13U: ;
#line 2311
  if (mdev->agreed_pro_version <= 95) {
#line 2312
    return (0);
  } else {

  }
#line 2313
  goto ldv_49552;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2320
  return (0);
  }
  ldv_49552: ;
#line 2323
  switch ((unsigned int )s.ldv_38794.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2331
  goto ldv_49563;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2339
  return (0);
  }
  ldv_49563: ;
#line 2342
  return (1);
}
}
#line 2350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2352
  tmp = drbd_get_max_buffers(mdev);
#line 2352
  mxb = tmp;
#line 2354
  tmp___0 = is_susp(mdev->state);
#line 2354
  if (tmp___0 != 0) {
#line 2355
    return (0);
  } else {

  }
#line 2356
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2356
  if (tmp___1 != 0) {
#line 2357
    return (0);
  } else {

  }
#line 2364
  tmp___2 = drbd_state_is_stable(mdev);
#line 2364
  if (tmp___2 == 0) {
#line 2365
    return (0);
  } else {

  }
#line 2369
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2369
  if (tmp___3 > mxb) {
#line 2370
    return (0);
  } else {

  }
#line 2371
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2371
  if (tmp___4 != 0) {
#line 2372
    return (0);
  } else {

  }
#line 2373
  return (1);
}
}
#line 2376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2378
  rv = 0;
#line 2380
  spin_lock_irq(& mdev->req_lock);
#line 2381
  rv = may_inc_ap_bio(mdev);
#line 2382
  if ((int )rv) {
#line 2383
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2384
  spin_unlock_irq(& mdev->req_lock);
#line 2386
  return (rv);
}
}
#line 2389 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2399
  tmp = inc_ap_bio_cond(mdev, count);
#line 2399
  if ((int )tmp) {
#line 2399
    goto ldv_49584;
  } else {

  }
#line 2399
  tmp___0 = get_current();
#line 2399
  __wait.flags = 0U;
#line 2399
  __wait.private = (void *)tmp___0;
#line 2399
  __wait.func = & autoremove_wake_function;
#line 2399
  __wait.task_list.next = & __wait.task_list;
#line 2399
  __wait.task_list.prev = & __wait.task_list;
  ldv_49587: 
#line 2399
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2399
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2399
  if ((int )tmp___1) {
#line 2399
    goto ldv_49586;
  } else {

  }
#line 2399
  schedule();
#line 2399
  goto ldv_49587;
  ldv_49586: 
#line 2399
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49584: ;
#line 2402
  return;
}
}
#line 2402 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2404
  tmp = drbd_get_max_buffers(mdev);
#line 2404
  mxb = tmp;
#line 2405
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2405
  ap_bio = tmp___0;
#line 2407
  if (ap_bio < 0) {
#line 2407
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2407);
  } else {

  }
#line 2411
  if (ap_bio < mxb) {
#line 2412
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2413
  if (ap_bio == 0) {
#line 2413
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2413
    if (tmp___2 != 0) {
#line 2414
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2414
      if (tmp___1 == 0) {
#line 2415
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2416
  return;
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_49697: ;
#line 234
    goto ldv_49697;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_49702: ;
#line 243
    goto ldv_49702;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 288
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 288
  req = (struct drbd_request *)tmp;
#line 290
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 290
  if (tmp___0 != 0L) {
#line 291
    drbd_req_make_private_bio(req, bio_src);
#line 293
    req->rq_state = (int )bio_src->bi_rw & 1 ? 2048UL : 0UL;
#line 294
    req->mdev = mdev;
#line 295
    req->master_bio = bio_src;
#line 296
    req->epoch = 0U;
#line 297
    req->sector = bio_src->bi_sector;
#line 298
    req->size = bio_src->bi_size;
#line 299
    INIT_HLIST_NODE(& req->collision);
#line 300
    INIT_LIST_HEAD(& req->tl_requests);
#line 301
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 303
  return (req);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 308
  mempool_free((void *)req, drbd_request_mempool);
#line 309
  return;
}
}
#line 324
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 330
void request_timer_fn(unsigned long data ) ;
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 373
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_38794.pdsk > 3 && (int )s.ldv_38794.conn > 13) && (int )s.ldv_38794.conn <= 21)));
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 383
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  tmp = current_thread_info___1();
#line 94
  tmp->preempt_count = tmp->preempt_count + 1;
#line 94
  __asm__  volatile   ("": : : "memory");
#line 94
  __vpp_verify = 0;
#line 94
  switch (4UL) {
  case 1UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49794;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49794;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49794;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49794;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49794: 
#line 94
  pscr_ret__ = pfo_ret__;
#line 94
  goto ldv_49800;
  case 2UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49804;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49804;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49804;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49804;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49804: 
#line 94
  pscr_ret__ = pfo_ret_____0;
#line 94
  goto ldv_49800;
  case 4UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49813;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49813;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49813;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49813;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49813: 
#line 94
  pscr_ret__ = pfo_ret_____1;
#line 94
  goto ldv_49800;
  case 8UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49822;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49822;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49822;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49822;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49822: 
#line 94
  pscr_ret__ = pfo_ret_____2;
#line 94
  goto ldv_49800;
  default: 
#line 94
  __bad_size_call_parameter();
#line 94
  goto ldv_49800;
  }
  ldv_49800: 
#line 94
  cpu = pscr_ret__;
#line 95
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 96
  __vpp_verify___0 = 0;
#line 96
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___1 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 97
  __vpp_verify___2 = 0;
#line 97
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 97
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 97
  if ((mdev->vdisk)->part0.partno != 0) {
#line 97
    __vpp_verify___3 = 0;
#line 97
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 97
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 97
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 98
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 99
  __asm__  volatile   ("": : : "memory");
#line 99
  tmp___2 = current_thread_info___1();
#line 99
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 99
  __asm__  volatile   ("": : : "memory");
#line 99
  rcu_read_unlock();
#line 100
  return;
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 105
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 106
  duration = (unsigned long )jiffies - req->start_time;
#line 108
  rcu_read_lock();
#line 108
  tmp = current_thread_info___1();
#line 108
  tmp->preempt_count = tmp->preempt_count + 1;
#line 108
  __asm__  volatile   ("": : : "memory");
#line 108
  __vpp_verify = 0;
#line 108
  switch (4UL) {
  case 1UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49860;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49860;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49860;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49860;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49860: 
#line 108
  pscr_ret__ = pfo_ret__;
#line 108
  goto ldv_49866;
  case 2UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49870;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49870;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49870;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49870;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49870: 
#line 108
  pscr_ret__ = pfo_ret_____0;
#line 108
  goto ldv_49866;
  case 4UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49879;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49879;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49879;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49879;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49879: 
#line 108
  pscr_ret__ = pfo_ret_____1;
#line 108
  goto ldv_49866;
  case 8UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49888;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49888;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49888;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49888;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49888: 
#line 108
  pscr_ret__ = pfo_ret_____2;
#line 108
  goto ldv_49866;
  default: 
#line 108
  __bad_size_call_parameter();
#line 108
  goto ldv_49866;
  }
  ldv_49866: 
#line 108
  cpu = pscr_ret__;
#line 109
  __vpp_verify___0 = 0;
#line 109
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 109
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 109
  if ((mdev->vdisk)->part0.partno != 0) {
#line 109
    __vpp_verify___1 = 0;
#line 109
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 109
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 109
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 110
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 111
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 112
  __asm__  volatile   ("": : : "memory");
#line 112
  tmp___1 = current_thread_info___1();
#line 112
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 112
  __asm__  volatile   ("": : : "memory");
#line 112
  rcu_read_unlock();
#line 113
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 117
  s = req->rq_state;
#line 125
  list_del(& req->tl_requests);
#line 130
  if ((int )rw == 1) {
#line 135
    if ((s & 256UL) == 0UL || (s & 4UL) == 0UL) {
#line 136
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             136U);
    } else {

    }
#line 138
    if (((s & 256UL) != 0UL && (s & 4UL) != 0UL) && (s & 512UL) != 0UL) {
#line 139
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         139U);
    } else {

    }
#line 151
    if ((s & 15UL) != 0UL) {
#line 152
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 152
      if (tmp___0 != 0) {
#line 153
        if ((s & 4096UL) != 0UL) {
#line 154
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 155
        put_ldev(mdev);
      } else {
#line 156
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 156
        if (tmp != 0) {
#line 157
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 164
  drbd_req_free(req);
#line 165
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 176
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 176
  if (tmp != 0) {
#line 177
    return;
  } else {

  }
#line 179
  b = mdev->newest_tle;
#line 180
  b->w.cb = & w_send_barrier;
#line 185
  inc_ap_pending(mdev);
#line 186
  drbd_queue_work(& mdev->data.work, & b->w);
#line 187
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 188
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 193
  s = req->rq_state;
#line 205
  if (((int )mdev->state.ldv_38794.conn > 9 && (s & 64UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 208
    queue_barrier(mdev);
  } else {

  }
#line 213
  if ((s & 128UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 214
    sector = req->sector;
#line 215
    size = (int const   )req->size;
#line 221
    slot = tl_hash_slot___0(mdev, sector);
#line 222
    n = slot->first;
#line 222
    goto ldv_49932;
    ldv_49931: 
#line 223
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 223
    if (tmp != 0) {
#line 224
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 222
    n = n->next;
    ldv_49932: ;
#line 222
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 222
      __mptr = (struct hlist_node  const  *)n;
#line 222
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 222
      if (1 != 0) {
#line 223
        goto ldv_49931;
      } else {
#line 225
        goto ldv_49933;
      }
    } else {

    }
    ldv_49933: 
#line 245
    slot = ee_hash_slot___0(mdev, req->sector);
#line 246
    n = slot->first;
#line 246
    goto ldv_49939;
    ldv_49938: 
#line 247
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 247
    if (tmp___0 != 0) {
#line 248
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 249
      goto ldv_49937;
    } else {

    }
#line 246
    n = n->next;
    ldv_49939: ;
#line 246
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 246
      __mptr___0 = (struct hlist_node  const  *)n;
#line 246
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 246
      if (1 != 0) {
#line 247
        goto ldv_49938;
      } else {
#line 249
        goto ldv_49937;
      }
    } else {

    }
    ldv_49937: ;
  } else {

  }
#line 252
  return;
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 259
  bio_endio(m->bio, m->error);
#line 260
  dec_ap_bio(mdev);
#line 261
  return;
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 271
  s = req->rq_state;
#line 272
  mdev = req->mdev;
#line 273
  rw = (req->rq_state & 2048UL) != 0UL;
#line 284
  if ((s & 32UL) != 0UL) {
#line 285
    return;
  } else {

  }
#line 286
  if ((s & 16UL) != 0UL) {
#line 287
    return;
  } else {

  }
#line 288
  if ((int )s & 1 && (s & 8UL) == 0UL) {
#line 289
    return;
  } else {

  }
#line 291
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 313
    ok = (s & 4UL) != 0UL || (s & 256UL) != 0UL;
#line 314
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 314
    error = (int )tmp;
#line 318
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 318
    if (tmp___0 == 0) {
#line 319
      hlist_del(& req->collision);
    } else
#line 321
    if ((s & 880UL) != 0UL) {
#line 321
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              321);
    } else {

    }
#line 324
    if (rw == 1) {
#line 325
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 328
    _drbd_end_io_acct(mdev, req);
#line 330
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 331
    m->bio = req->master_bio;
#line 332
    req->master_bio = 0;
  } else {

  }
#line 335
  if ((int )s & 1) {
#line 336
    return;
  } else {

  }
#line 338
  if ((s & 1008UL) == 0UL || (s & 128UL) != 0UL) {
#line 343
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 344
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 351
  mdev = req->mdev;
#line 353
  tmp = is_susp(mdev->state);
#line 353
  if (tmp == 0) {
#line 354
    _req_may_be_done(req, m);
  } else {

  }
#line 355
  return;
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 382
  mdev = req->mdev;
#line 383
  sector = req->sector;
#line 384
  size = (int const   )req->size;
#line 390
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 390
  if (tmp == 0) {
#line 390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            390);
  } else {

  }
#line 392
  tmp___0 = get_net_conf(mdev);
#line 392
  if (tmp___0 == 0) {
#line 393
    return (0);
  } else {

  }
#line 396
  _b = mdev->tl_hash_s == 0U;
#line 396
  if (_b != 0) {
#line 396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            396);
  } else {

  }
#line 396
  if (_b != 0) {
#line 397
    goto out_no_conflict;
  } else {

  }
#line 398
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 398
  if (tmp___1 != 0L) {
#line 398
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (398), "i" (12UL));
    ldv_49972: ;
#line 398
    goto ldv_49972;
  } else {

  }
#line 401
  slot = tl_hash_slot___0(mdev, sector);
#line 402
  n = slot->first;
#line 402
  goto ldv_49978;
  ldv_49977: 
#line 403
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 403
  if (tmp___4 != 0) {
#line 404
    tmp___2 = get_current();
#line 404
    tmp___3 = get_current();
#line 404
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 410
    goto out_conflict;
  } else {

  }
#line 402
  n = n->next;
  ldv_49978: ;
#line 402
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 402
    __mptr = (struct hlist_node  const  *)n;
#line 402
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 402
    if (1 != 0) {
#line 403
      goto ldv_49977;
    } else {
#line 405
      goto ldv_49979;
    }
  } else {

  }
  ldv_49979: ;
#line 414
  if (mdev->ee_hash_s != 0U) {
#line 416
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 416
    if (tmp___5 != 0L) {
#line 416
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (416), "i" (12UL));
      ldv_49980: ;
#line 416
      goto ldv_49980;
    } else {

    }
#line 419
    slot = ee_hash_slot___0(mdev, sector);
#line 420
    n = slot->first;
#line 420
    goto ldv_49985;
    ldv_49984: 
#line 421
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 421
    if (tmp___8 != 0) {
#line 422
      tmp___6 = get_current();
#line 422
      tmp___7 = get_current();
#line 422
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 428
      goto out_conflict;
    } else {

    }
#line 420
    n = n->next;
    ldv_49985: ;
#line 420
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 420
      __mptr___0 = (struct hlist_node  const  *)n;
#line 420
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 420
      if (1 != 0) {
#line 421
        goto ldv_49984;
      } else {
#line 423
        goto ldv_49986;
      }
    } else {

    }
    ldv_49986: ;
  } else {

  }
  out_no_conflict: 
#line 437
  put_net_conf(mdev);
#line 438
  return (0);
  out_conflict: 
#line 441
  put_net_conf(mdev);
#line 442
  return (1);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 460
  mdev = req->mdev;
#line 461
  rv = 0;
#line 462
  m->bio = 0;
#line 464
  switch ((unsigned int )what) {
  default: 
#line 466
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          466);
#line 467
  goto ldv_49995;
  case 1U: ;
#line 478
  if ((req->rq_state & 1008UL) != 0UL) {
#line 478
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            478);
  } else {

  }
#line 479
  req->rq_state = req->rq_state | 16UL;
#line 480
  inc_ap_pending(mdev);
#line 481
  goto ldv_49995;
  case 2U: ;
#line 485
  if ((req->rq_state & 15UL) != 0UL) {
#line 485
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            485);
  } else {

  }
#line 486
  req->rq_state = req->rq_state | 1UL;
#line 487
  goto ldv_49995;
  case 23U: ;
#line 490
  if ((req->rq_state & 2048UL) != 0UL) {
#line 491
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 493
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 495
  req->rq_state = req->rq_state | 6UL;
#line 496
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 498
  _req_may_be_done_not_susp(req, m);
#line 499
  goto ldv_49995;
  case 22U: 
#line 502
  req->rq_state = req->rq_state | 8UL;
#line 503
  if ((req->rq_state & 2048UL) != 0UL) {
#line 504
    _req_may_be_done_not_susp(req, m);
  } else {
#line 506
    goto goto_queue_for_net_read;
  }
#line 507
  goto ldv_49995;
  case 21U: 
#line 510
  req->rq_state = req->rq_state | 2UL;
#line 511
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 513
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 514
  _req_may_be_done_not_susp(req, m);
#line 515
  goto ldv_49995;
  case 20U: 
#line 519
  req->rq_state = req->rq_state | 2UL;
#line 520
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 521
  _req_may_be_done_not_susp(req, m);
#line 522
  goto ldv_49995;
  case 19U: 
#line 525
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         525U);
#line 527
  req->rq_state = req->rq_state | 2UL;
#line 528
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 530
  if ((req->rq_state & 8UL) != 0UL) {
#line 531
    _req_may_be_done(req, m);
#line 532
    goto ldv_49995;
  } else {

  }
#line 535
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
  goto_queue_for_net_read: ;
#line 539
  if ((req->rq_state & 1008UL) != 0UL) {
#line 539
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            539);
  } else {

  }
#line 543
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 544
    _req_may_be_done_not_susp(req, m);
#line 545
    goto ldv_49995;
  } else {

  }
#line 549
  req->rq_state = req->rq_state | 16UL;
#line 550
  inc_ap_pending(mdev);
  case 4U: 
#line 563
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 563
  hlist_add_head(& req->collision, tmp);
#line 565
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 567
  if ((req->rq_state & 16UL) == 0UL) {
#line 567
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            567);
  } else {

  }
#line 568
  req->rq_state = req->rq_state | 32UL;
#line 569
  req->w.cb = (req->rq_state & 15UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 572
  drbd_queue_work(& mdev->data.work, & req->w);
#line 573
  goto ldv_49995;
  case 3U: 
#line 579
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 579
  hlist_add_head(& req->collision, tmp___0);
#line 599
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 603
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 603
  if (tmp___1 != 0) {
#line 603
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            603);
  } else {

  }
#line 605
  req->epoch = (mdev->newest_tle)->br_number;
#line 608
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 611
  if ((req->rq_state & 16UL) == 0UL) {
#line 611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            611);
  } else {

  }
#line 612
  req->rq_state = req->rq_state | 32UL;
#line 613
  req->w.cb = & w_send_dblock;
#line 614
  drbd_queue_work(& mdev->data.work, & req->w);
#line 617
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 618
    queue_barrier(mdev);
  } else {

  }
#line 620
  goto ldv_49995;
  case 5U: 
#line 623
  req->rq_state = req->rq_state | 32UL;
#line 624
  req->w.cb = & w_send_oos;
#line 625
  drbd_queue_work(& mdev->data.work, & req->w);
#line 626
  goto ldv_49995;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 633
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 636
  _req_may_be_done_not_susp(req, m);
#line 637
  goto ldv_49995;
  case 8U: ;
#line 641
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 642
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 644
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 648
    if ((req->rq_state & 16UL) != 0UL) {
#line 649
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 649
      if (tmp___2 != 0) {
#line 649
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 649
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 649
      if (tmp___4 < 0) {
#line 649
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 649
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 649, tmp___3);
      } else {

      }
#line 650
      req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 651
      req->rq_state = req->rq_state | 256UL;
    } else {

    }
  } else {

  }
#line 657
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 658
  req->rq_state = req->rq_state | 64UL;
#line 659
  _req_may_be_done_not_susp(req, m);
#line 660
  goto ldv_49995;
  case 9U: 
#line 665
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 666
  req->rq_state = req->rq_state | 128UL;
#line 667
  _req_may_be_done_not_susp(req, m);
#line 668
  goto ldv_49995;
  case 10U: ;
#line 673
  if ((req->rq_state & 16UL) != 0UL) {
#line 674
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 674
    if (tmp___5 != 0) {
#line 674
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 674
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 674
    if (tmp___7 < 0) {
#line 674
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 674
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 674, tmp___6);
    } else {

    }
  } else {

  }
#line 675
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 676
  req->rq_state = req->rq_state | 128UL;
#line 677
  if ((req->rq_state & 64UL) != 0UL && (req->rq_state & 2048UL) != 0UL) {
#line 678
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 682
  if ((req->rq_state & 32UL) == 0UL) {
#line 683
    _req_may_be_done(req, m);
  } else {

  }
#line 684
  goto ldv_49995;
  case 15U: ;
#line 690
  if ((unsigned int )what == 15U) {
#line 691
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 694
  req->rq_state = req->rq_state | 128UL;
  case 14U: ;
  case 13U: ;
#line 698
  if ((unsigned int )what == 14U) {
#line 699
    req->rq_state = req->rq_state | 512UL;
  } else {

  }
  case 12U: 
#line 709
  req->rq_state = req->rq_state | 256UL;
#line 710
  if ((req->rq_state & 16UL) == 0UL) {
#line 710
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            710);
  } else {

  }
#line 711
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 711
  if (tmp___8 != 0) {
#line 711
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 711
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 711
  if (tmp___10 < 0) {
#line 711
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 711, tmp___9);
  } else {

  }
#line 712
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 713
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 714
  _req_may_be_done_not_susp(req, m);
#line 715
  goto ldv_49995;
  case 16U: ;
#line 719
  if ((req->rq_state & 16UL) != 0UL) {
#line 720
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 720
    if (tmp___11 != 0) {
#line 720
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 720
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 720
    if (tmp___13 < 0) {
#line 720
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 720
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 720, tmp___12);
    } else {

    }
#line 721
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 723
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 725
  req->rq_state = req->rq_state | 128UL;
#line 726
  _req_may_be_done_not_susp(req, m);
#line 728
  goto ldv_49995;
  case 25U: ;
#line 731
  if ((req->rq_state & 2UL) == 0UL) {
#line 732
    goto ldv_49995;
  } else {

  }
#line 734
  _req_may_be_done(req, m);
#line 735
  goto ldv_49995;
  case 26U: ;
#line 738
  if ((req->rq_state & 2UL) == 0UL) {
#line 739
    goto ldv_49995;
  } else {

  }
#line 741
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 743
  rv = 2;
#line 744
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 745
    rv = 1;
  } else {

  }
#line 747
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 748
  req->w.cb = & w_restart_disk_io;
#line 749
  drbd_queue_work(& mdev->data.work, & req->w);
#line 750
  goto ldv_49995;
  case 24U: ;
#line 757
  if ((req->rq_state & 256UL) == 0UL) {
#line 758
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 759
      drbd_queue_work(& mdev->data.work, & req->w);
#line 760
      rv = (req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 762
    goto ldv_49995;
  } else {

  }
  case 17U: ;
#line 767
  if ((req->rq_state & 2048UL) == 0UL) {
#line 768
    goto ldv_49995;
  } else {

  }
#line 770
  if ((req->rq_state & 16UL) != 0UL) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 775
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 777
  if ((req->rq_state & 1008UL) != 0UL) {
#line 778
    req->rq_state = req->rq_state | 128UL;
#line 779
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 780
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 782
  _req_may_be_done(req, m);
#line 783
  goto ldv_49995;
  case 18U: ;
#line 786
  if ((req->rq_state & 16UL) == 0UL) {
#line 786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            786);
  } else {

  }
#line 787
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 787
  if (tmp___14 != 0) {
#line 787
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 787
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 787
  if (tmp___16 < 0) {
#line 787
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 787, tmp___15);
  } else {

  }
#line 788
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 789
  req->rq_state = req->rq_state | 384UL;
#line 790
  _req_may_be_done_not_susp(req, m);
#line 791
  goto ldv_49995;
  }
  ldv_49995: ;
#line 794
  return (rv);
}
}
#line 804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 809
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 810
    return (1);
  } else {

  }
#line 811
  if ((int )mdev->state.ldv_38794.disk > 4) {
#line 812
    return (0);
  } else {

  }
#line 813
  if ((int )mdev->state.ldv_38794.disk <= 3) {
#line 814
    return (0);
  } else {

  }
#line 816
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 817
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 819
  if (sector >= nr_sectors) {
#line 819
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            819);
  } else {

  }
#line 820
  if (esector >= nr_sectors) {
#line 820
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            820);
  } else {

  }
#line 822
  sbnr = sector >> 3;
#line 823
  ebnr = esector >> 3;
#line 825
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 825
  return (tmp == 0);
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  int congested ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 830
  congested = 0;
#line 837
  tmp = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 837
  if (tmp == 0) {
#line 838
    return;
  } else {

  }
#line 840
  if ((mdev->net_conf)->cong_fill != 0) {
#line 840
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 840
    if (tmp___0 >= (mdev->net_conf)->cong_fill) {
#line 842
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 843
      congested = 1;
    } else {

    }
  } else {

  }
#line 846
  if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 847
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 848
    congested = 1;
  } else {

  }
#line 851
  if (congested != 0) {
#line 852
    queue_barrier(mdev);
#line 854
    if ((mdev->net_conf)->on_congestion == 1) {
#line 855
      __ns.i = mdev->state.i;
#line 855
      __ns.ldv_38794.conn = 22U;
#line 855
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 857
      __ns___0.i = mdev->state.i;
#line 857
      __ns___0.ldv_38794.conn = 1U;
#line 857
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 859
  put_ldev(mdev);
#line 860
  return;
}
}
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  union drbd_state s ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 864
  rw = (int const   )bio->bi_rw & (int const   )4097;
#line 865
  size = (int const   )bio->bi_size;
#line 866
  sector = bio->bi_sector;
#line 867
  b = 0;
#line 869
  send_oos = 0;
#line 870
  err = -5;
#line 871
  ret = 0;
#line 875
  req = drbd_req_new(mdev, bio);
#line 876
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 877
    dec_ap_bio(mdev);
#line 880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 881
    bio_endio(bio, -12);
#line 882
    return (0);
  } else {

  }
#line 884
  req->start_time = start_time;
#line 886
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 887
  if (local == 0) {
#line 888
    bio_put(req->private_bio);
#line 889
    req->private_bio = 0;
  } else {

  }
#line 891
  if (rw == 1) {
#line 892
    remote = 1;
  } else {
#line 895
    if (local != 0) {
#line 896
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 896
      if (tmp == 0) {
#line 902
        local = 0;
#line 903
        bio_put(req->private_bio);
#line 904
        req->private_bio = 0;
#line 905
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 908
    remote = local == 0 && (int )mdev->state.ldv_38794.pdsk > 7;
  }
#line 919
  if ((rw == 4096 && (int )mdev->state.ldv_38794.disk > 3) && local == 0) {
#line 920
    err = -11;
#line 921
    goto fail_and_free_req;
  } else {

  }
#line 929
  if (rw == 1 && local != 0) {
#line 929
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 929
    if (tmp___0 == 0) {
#line 930
      req->rq_state = req->rq_state | 4096UL;
#line 931
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 934
  s = mdev->state;
#line 935
  if (remote != 0) {
#line 935
    tmp___1 = drbd_should_do_remote(s);
#line 935
    if ((int )tmp___1) {
#line 935
      tmp___2 = 1;
    } else {
#line 935
      tmp___2 = 0;
    }
  } else {
#line 935
    tmp___2 = 0;
  }
#line 935
  remote = tmp___2;
#line 936
  if (rw == 1) {
#line 936
    tmp___3 = drbd_should_send_oos(s);
#line 936
    if ((int )tmp___3) {
#line 936
      tmp___4 = 1;
    } else {
#line 936
      tmp___4 = 0;
    }
  } else {
#line 936
    tmp___4 = 0;
  }
#line 936
  send_oos = tmp___4;
#line 937
  if (remote != 0 && send_oos != 0) {
#line 937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            937);
  } else {

  }
#line 939
  if (local == 0 && remote == 0) {
#line 939
    tmp___6 = is_susp(mdev->state);
#line 939
    if (tmp___6 == 0) {
#line 940
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 940
      if (tmp___5 != 0) {
#line 941
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 942
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 951
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 951
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 951
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 955
      tmp___7 = kmalloc(56UL, 16U);
#line 955
      b = (struct drbd_tl_epoch *)tmp___7;
#line 956
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 957
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 958
        err = -12;
#line 959
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 964
  spin_lock_irq(& mdev->req_lock);
#line 966
  tmp___9 = is_susp(mdev->state);
#line 966
  if (tmp___9 != 0) {
#line 971
    ret = 1;
#line 972
    spin_unlock_irq(& mdev->req_lock);
#line 973
    goto fail_free_complete;
  } else {

  }
#line 976
  if (remote != 0 || send_oos != 0) {
#line 977
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 977
    remote = (int )tmp___10;
#line 978
    if (rw == 1) {
#line 978
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 978
      if ((int )tmp___11) {
#line 978
        tmp___12 = 1;
      } else {
#line 978
        tmp___12 = 0;
      }
    } else {
#line 978
      tmp___12 = 0;
    }
#line 978
    send_oos = tmp___12;
#line 979
    if (remote != 0 && send_oos != 0) {
#line 979
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              979);
    } else {

    }
#line 981
    if (remote == 0 && send_oos == 0) {
#line 982
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 983
    if (local == 0 && remote == 0) {
#line 984
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 985
      spin_unlock_irq(& mdev->req_lock);
#line 986
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 990
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 991
    mdev->unused_spare_tle = b;
#line 992
    b = 0;
  } else {

  }
#line 994
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 994
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 994
    if (tmp___13 != 0) {
#line 999
      spin_unlock_irq(& mdev->req_lock);
#line 1000
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 1005
  _drbd_start_io_acct(mdev, req, bio);
#line 1017
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1017
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 1017
    if (tmp___15 != 0) {
#line 1019
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 1020
      mdev->unused_spare_tle = 0;
    } else {
#line 1017
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1022
  if (remote != 0 && rw == 1) {
#line 1022
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 1022
    if (tmp___14 != 0) {
#line 1022
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1023);
    } else {

    }
  } else {

  }
#line 1041
  if (remote != 0) {
#line 1042
    _req_mod(req, to_be_send);
  } else {

  }
#line 1043
  if (local != 0) {
#line 1044
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1049
  if (rw == 1) {
#line 1049
    tmp___16 = _req_conflicts(req);
#line 1049
    if (tmp___16 != 0) {
#line 1050
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1052
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 1056
  if (remote != 0) {
#line 1061
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1065
  if (send_oos != 0) {
#line 1065
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1065U);
#line 1065
    if (tmp___17 != 0) {
#line 1066
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1068
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1070
    maybe_pull_ahead(mdev);
  } else {

  }
#line 1072
  spin_unlock_irq(& mdev->req_lock);
#line 1073
  kfree((void const   *)b);
#line 1075
  if (local != 0) {
#line 1076
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1083
    tmp___19 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1083
    if (tmp___19 != 0) {
#line 1084
      tmp___18 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1084
      if (tmp___18 != 0) {
#line 1087
        bio_endio(req->private_bio, -5);
      } else {
#line 1089
        generic_make_request(req->private_bio);
      }
#line 1090
      put_ldev(mdev);
    } else {
#line 1092
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1095
  return (0);
  fail_conflicting: 
#line 1104
  _drbd_end_io_acct(mdev, req);
#line 1105
  spin_unlock_irq(& mdev->req_lock);
#line 1106
  if (remote != 0) {
#line 1107
    tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1107
    if (tmp___20 != 0) {
#line 1107
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1107
    tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1107
    if (tmp___22 < 0) {
#line 1107
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1107
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1107, tmp___21);
    } else {

    }
  } else {

  }
#line 1110
  err = 0;
  fail_free_complete: ;
#line 1113
  if ((req->rq_state & 4096UL) != 0UL) {
#line 1114
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1116
  if (local != 0) {
#line 1117
    bio_put(req->private_bio);
#line 1118
    req->private_bio = 0;
#line 1119
    put_ldev(mdev);
  } else {

  }
#line 1121
  if (ret == 0) {
#line 1122
    bio_endio(bio, err);
  } else {

  }
#line 1124
  drbd_req_free(req);
#line 1125
  dec_ap_bio(mdev);
#line 1126
  kfree((void const   *)b);
#line 1128
  return (ret);
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1138
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1140
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1140
    if (tmp___1 != 0) {
#line 1141
      tmp = get_current();
#line 1141
      tmp___0 = get_current();
#line 1141
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1147
    return (1);
  } else {

  }
#line 1150
  return (0);
}
}
#line 1153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1156
  mdev = (struct drbd_conf *)q->queuedata;
#line 1159
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1159
  if (tmp != 0) {
#line 1160
    bio_endio(bio, -1);
#line 1161
    return;
  } else {

  }
#line 1164
  start_time = jiffies;
#line 1169
  if (bio->bi_size == 0U) {
#line 1169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1169);
  } else {

  }
#line 1170
  if ((bio->bi_size & 511U) != 0U) {
#line 1170
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1170);
  } else {

  }
#line 1174
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1175
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1177
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1177
  if (tmp___1 != 0L) {
    ldv_50093: 
#line 1179
    inc_ap_bio(mdev, 1);
#line 1180
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1180
    if (tmp___0 != 0) {
#line 1181
      goto ldv_50093;
    } else {

    }

#line 1181
    return;
  } else {

  }
#line 1186
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1188
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1192
    bio_endio(bio, -22);
  } else {
#line 1204
    sect = bio->bi_sector;
#line 1205
    sps = 256;
#line 1206
    mask = sps + -1;
#line 1207
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1208
    bp = bio_split(bio, (int )first_sectors);
#line 1215
    inc_ap_bio(mdev, 3);
#line 1217
    if (s_enr + 1U != e_enr) {
#line 1217
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1217);
    } else {

    }
#line 1219
    goto ldv_50101;
    ldv_50100: 
#line 1220
    inc_ap_bio(mdev, 1);
    ldv_50101: 
#line 1219
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1219
    if (tmp___2 != 0) {
#line 1220
      goto ldv_50100;
    } else {

    }

#line 1222
    goto ldv_50104;
    ldv_50103: 
#line 1223
    inc_ap_bio(mdev, 1);
    ldv_50104: 
#line 1222
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1222
    if (tmp___3 != 0) {
#line 1223
      goto ldv_50103;
    } else {

    }
#line 1225
    dec_ap_bio(mdev);
#line 1227
    bio_pair_release(bp);
  }
#line 1229
  return;
}
}
#line 1244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1246
  mdev = (struct drbd_conf *)q->queuedata;
#line 1247
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1249
  bio_size = bvm->bi_size;
#line 1252
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1254
  if (limit < 0) {
#line 1255
    limit = 0;
  } else {

  }
#line 1256
  if (bio_size == 0U) {
#line 1257
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1258
      limit = (int )bvec->bv_len;
    } else
#line 1259
    if (limit != 0) {
#line 1259
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1259
      if (tmp != 0) {
#line 1260
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1262
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1263
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1264
          _min1 = limit;
#line 1264
          _min2 = backing_limit;
#line 1264
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1266
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1268
  return (limit);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  int tmp ;
  int tmp___0 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1273
  mdev = (struct drbd_conf *)data;
#line 1276
  ent = 0UL;
#line 1276
  dt = 0UL;
#line 1279
  tmp = get_net_conf(mdev);
#line 1279
  if (tmp != 0) {
#line 1280
    if ((int )mdev->state.ldv_38794.conn > 8) {
#line 1281
      ent = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
    } else {

    }
#line 1283
    put_net_conf(mdev);
  } else {

  }
#line 1285
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1285
  if (tmp___0 != 0) {
#line 1286
    dt = (unsigned long )(((mdev->ldev)->dc.disk_timeout * 250) / 10);
#line 1287
    put_ldev(mdev);
  } else {

  }
#line 1289
  __x = dt;
#line 1289
  __y = ent;
#line 1289
  if (__x != 0UL) {
#line 1289
    if (__y != 0UL) {
#line 1289
      _min1 = __x;
#line 1289
      _min2 = __y;
#line 1289
      tmp___1 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1289
      tmp___1 = __x;
    }
#line 1289
    tmp___2 = tmp___1;
  } else {
#line 1289
    tmp___2 = __y;
  }
#line 1289
  et = tmp___2;
#line 1291
  if (et == 0UL) {
#line 1292
    return;
  } else {

  }
#line 1294
  now = jiffies;
#line 1296
  spin_lock_irq(& mdev->req_lock);
#line 1297
  le = & (mdev->oldest_tle)->requests;
#line 1298
  tmp___3 = list_empty((struct list_head  const  *)le);
#line 1298
  if (tmp___3 != 0) {
#line 1299
    spin_unlock_irq(& mdev->req_lock);
#line 1300
    mod_timer(& mdev->request_timer, now + et);
#line 1301
    return;
  } else {

  }
#line 1304
  le = le->prev;
#line 1305
  __mptr = (struct list_head  const  *)le;
#line 1305
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1325
  if (((ent != 0UL && (req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1326
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1327
    __ns.i = mdev->state.i;
#line 1327
    __ns.ldv_38794.conn = 3U;
#line 1327
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1331
  if (((dt != 0UL && (int )req->rq_state & 1) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1332
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1333
    __drbd_chk_io_error____1(mdev, 1, "request_timer_fn");
  } else {

  }
#line 1335
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1336
  spin_unlock_irq(& mdev->req_lock);
#line 1337
  mod_timer(& mdev->request_timer, nt);
#line 1338
  return;
}
}
#line 1340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1345
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1347
  mutex_lock(ldv_func_arg1);
#line 1348
  return;
}
}
#line 1350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1355
  tmp = mutex_trylock(ldv_func_arg1);
#line 1355
  ldv_func_res = tmp;
#line 1357
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1357
  return (tmp___0);
#line 1359
  return (ldv_func_res);
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1367
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1369
  mutex_unlock(ldv_func_arg1);
#line 1370
  return;
}
}
#line 1372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1377
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1379
  mutex_lock(ldv_func_arg1);
#line 1380
  return;
}
}
#line 1382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1387
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1389
  mutex_unlock(ldv_func_arg1);
#line 1390
  return;
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1399
  mutex_lock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1407
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1409
  mutex_unlock(ldv_func_arg1);
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1417
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1419
  mutex_unlock(ldv_func_arg1);
#line 1420
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5522;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5522;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5522;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5522;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5522: ;
#line 211
  return (__ret);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) ;
#line 754 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 756
  return ((bdev->bd_disk)->queue);
}
}
#line 1034 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1036
  retval = 512;
#line 1038
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1039
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1041
  return ((unsigned short )retval);
}
}
#line 1044 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1046
  tmp = bdev_get_queue(bdev);
#line 1046
  tmp___0 = queue_logical_block_size(tmp);
#line 1046
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1569 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1571
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1698
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1708
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1709
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1717
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1846
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1848
  if (forcedetach == 0) {
#line 1849
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1849
    if (tmp != 0) {
#line 1850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1851
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1852
      __ns.i = mdev->state.i;
#line 1852
      __ns.ldv_38794.disk = 4U;
#line 1852
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1853
    goto ldv_48587;
  } else {

  }
  case 2: ;
  case 1: 
#line 1858
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1859
  if ((int )mdev->state.ldv_38794.disk > 2) {
#line 1860
    __ns___0.i = mdev->state.i;
#line 1860
    __ns___0.ldv_38794.disk = 2U;
#line 1860
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1864
  goto ldv_48587;
  }
  ldv_48587: ;
#line 1867
  return;
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  if (error != 0) {
#line 1882
    tmp = spinlock_check(& mdev->req_lock);
#line 1882
    flags = _raw_spin_lock_irqsave(tmp);
#line 1883
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1884
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1886
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 127
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 127
  if (r == 0 || (int )mdev->state.ldv_38794.disk <= 2) {
#line 127
    goto ldv_48887;
  } else {

  }
#line 127
  tmp = get_current();
#line 127
  __wait.flags = 0U;
#line 127
  __wait.private = (void *)tmp;
#line 127
  __wait.func = & autoremove_wake_function;
#line 127
  __wait.task_list.next = & __wait.task_list;
#line 127
  __wait.task_list.prev = & __wait.task_list;
  ldv_48890: 
#line 127
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 127
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 127
  if (r == 0 || (int )mdev->state.ldv_38794.disk <= 2) {
#line 127
    goto ldv_48889;
  } else {

  }
#line 127
  schedule();
#line 127
  goto ldv_48890;
  ldv_48889: 
#line 127
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48887: ;
#line 131
  if (r == 0) {
#line 131
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 131
    tmp___1 = tmp___0;
  } else {
#line 131
    tmp___1 = 0;
  }
#line 131
  return (tmp___1);
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 136
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 136
  if (tmp != 0) {
#line 137
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 138
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static bool md_io_allowed(struct drbd_conf *mdev ) 
{ 
  enum drbd_disk_state ds ;

  {
#line 142
  ds = (enum drbd_disk_state )mdev->state.ldv_38794.disk;
#line 143
  return ((bool )((unsigned int )ds > 2U || (unsigned int )ds == 1U));
}
}
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) 
{ 
  long dt ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
#line 149
  dt = (long )((bdev->dc.disk_timeout * 250) / 10);
#line 150
  if (dt == 0L) {
#line 151
    dt = 9223372036854775807L;
  } else {

  }
#line 153
  __ret = dt;
#line 153
  if (*done == 0U) {
#line 153
    tmp___2 = md_io_allowed(mdev);
#line 153
    if ((int )tmp___2) {
#line 153
      tmp = get_current();
#line 153
      __wait.flags = 0U;
#line 153
      __wait.private = (void *)tmp;
#line 153
      __wait.func = & autoremove_wake_function;
#line 153
      __wait.task_list.next = & __wait.task_list;
#line 153
      __wait.task_list.prev = & __wait.task_list;
      ldv_48907: 
#line 153
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 153
      if (*done != 0U) {
#line 153
        goto ldv_48906;
      } else {
#line 153
        tmp___0 = md_io_allowed(mdev);
#line 153
        if (tmp___0) {
#line 153
          tmp___1 = 0;
        } else {
#line 153
          tmp___1 = 1;
        }
#line 153
        if (tmp___1) {
#line 153
          goto ldv_48906;
        } else {

        }
      }
#line 153
      __ret = schedule_timeout(__ret);
#line 153
      if (__ret == 0L) {
#line 153
        goto ldv_48906;
      } else {

      }
#line 153
      goto ldv_48907;
      ldv_48906: 
#line 153
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 153
  dt = __ret;
#line 154
  if (dt == 0L) {
#line 155
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
  } else {

  }
#line 156
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 166
  mdev->md_io.done = 0U;
#line 167
  mdev->md_io.error = -19;
#line 169
  if (rw & 1) {
#line 169
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 169
    if (tmp == 0) {
#line 170
      rw = rw | 3072;
    } else {

    }
  } else {

  }
#line 171
  rw = rw | 16;
#line 173
  bio = bio_alloc_drbd(16U);
#line 174
  bio->bi_bdev = bdev->md_bdev;
#line 175
  bio->bi_sector = sector;
#line 176
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 176
  ok = tmp___0 == size;
#line 177
  if (ok == 0) {
#line 178
    goto out;
  } else {

  }
#line 179
  bio->bi_private = (void *)(& mdev->md_io);
#line 180
  bio->bi_end_io = & drbd_md_io_complete;
#line 181
  bio->bi_rw = (unsigned long )rw;
#line 183
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 183
  if (tmp___1 == 0) {
#line 184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 185
    ok = 0;
#line 186
    goto out;
  } else {

  }
#line 189
  atomic_inc(& bio->bi_cnt);
#line 190
  atomic_inc(& mdev->md_io_in_use);
#line 191
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 191
  if (tmp___2 != 0) {
#line 192
    bio_endio(bio, -5);
  } else {
#line 194
    submit_bio(rw, bio);
  }
#line 195
  wait_until_done_or_disk_failure(mdev, bdev, & mdev->md_io.done);
#line 196
  ok = (int )bio->bi_flags & 1 && mdev->md_io.error == 0;
  out: 
#line 199
  bio_put(bio);
#line 200
  return (ok);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 207
  offset = 0;
#line 208
  iop = mdev->md_io_page;
#line 210
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 210
  if (tmp != 1) {
#line 210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            210);
  } else {

  }
#line 212
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 212
  if (tmp___0 != 0L) {
#line 212
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (212), "i" (12UL));
    ldv_48931: ;
#line 212
    goto ldv_48931;
  } else {

  }
#line 214
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 214
  logical_block_size = (int )tmp___1;
#line 215
  if (logical_block_size == 0) {
#line 216
    logical_block_size = 512;
  } else {

  }
#line 219
  if (logical_block_size != 512) {
#line 220
    mask = logical_block_size / 512 + -1;
#line 221
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 221
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              221);
    } else {

    }
#line 222
    if ((mask + 1) * 512 != logical_block_size) {
#line 222
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              222);
    } else {

    }
#line 223
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 224
    sector = (sector_t )(~ mask) & sector;
#line 225
    iop = mdev->md_io_tmpp;
#line 227
    if (rw & 1) {
#line 230
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 230
      p = tmp___2;
#line 231
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 231
      hp = tmp___3;
#line 233
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 236
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 236
      if (tmp___4 != 0L) {
#line 237
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 240
        return (0);
      } else {

      }
#line 243
      __len = 512UL;
#line 243
      if (__len > 63UL) {
#line 243
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 243
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 247
  tmp___7 = drbd_md_first_sector(bdev);
#line 247
  if (tmp___7 > sector) {
#line 249
    tmp___5 = get_current();
#line 249
    tmp___6 = get_current();
#line 249
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 247
    tmp___8 = drbd_md_last_sector(bdev);
#line 247
    if (tmp___8 < sector) {
#line 249
      tmp___5 = get_current();
#line 249
      tmp___6 = get_current();
#line 249
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 253
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 254
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 254
  if (tmp___9 != 0L) {
#line 255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 257
    return (0);
  } else {

  }
#line 260
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 261
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 261
    p___0 = tmp___10;
#line 262
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 262
    hp___0 = tmp___11;
#line 264
    __len___0 = 512UL;
#line 264
    if (__len___0 > 63UL) {
#line 264
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 264
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 267
  return (ok);
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 274
  al_flags = 0UL;
#line 277
  spin_lock_irq(& mdev->al_lock);
#line 278
  tmp = lc_find(mdev->resync, enr / 4U);
#line 279
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 279
  if (tmp___2 != 0L) {
#line 280
    __mptr = (struct lc_element  const  *)tmp;
#line 280
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 281
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 281
    if (tmp___1 != 0) {
#line 282
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 282
      wake = tmp___0 == 0;
#line 283
      spin_unlock_irq(& mdev->al_lock);
#line 284
      if (wake != 0) {
#line 285
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 286
      return (0);
    } else {

    }
  } else {

  }
#line 289
  al_ext = lc_get(mdev->act_log, enr);
#line 290
  al_flags = (mdev->act_log)->flags;
#line 291
  spin_unlock_irq(& mdev->al_lock);
#line 302
  return (al_ext);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 307
  enr = (unsigned int )(sector >> 13);
#line 311
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 311
  if (tmp <= 0) {
#line 311
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            311);
  } else {

  }
#line 313
  al_ext = _al_get(mdev, enr);
#line 313
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 313
    goto ldv_48961;
  } else {

  }
#line 313
  tmp___0 = get_current();
#line 313
  __wait.flags = 0U;
#line 313
  __wait.private = (void *)tmp___0;
#line 313
  __wait.func = & autoremove_wake_function;
#line 313
  __wait.task_list.next = & __wait.task_list;
#line 313
  __wait.task_list.prev = & __wait.task_list;
  ldv_48964: 
#line 313
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 313
  al_ext = _al_get(mdev, enr);
#line 313
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 313
    goto ldv_48963;
  } else {

  }
#line 313
  schedule();
#line 313
  goto ldv_48964;
  ldv_48963: 
#line 313
  finish_wait(& mdev->al_wait, & __wait);
  ldv_48961: ;
#line 315
  if (al_ext->lc_number != enr) {
#line 322
    init_completion(& al_work.event);
#line 323
    al_work.al_ext = al_ext;
#line 324
    al_work.enr = enr;
#line 325
    al_work.old_enr = al_ext->lc_number;
#line 326
    al_work.w.cb = & w_al_write_transaction;
#line 327
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 328
    wait_for_completion(& al_work.event);
#line 330
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 332
    spin_lock_irq(& mdev->al_lock);
#line 333
    lc_changed(mdev->act_log, al_ext);
#line 334
    spin_unlock_irq(& mdev->al_lock);
#line 335
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 337
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 341
  enr = (unsigned int )(sector >> 13);
#line 345
  tmp = spinlock_check(& mdev->al_lock);
#line 345
  flags = _raw_spin_lock_irqsave(tmp);
#line 347
  extent = lc_find(mdev->act_log, enr);
#line 349
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 350
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 352
    return;
  } else {

  }
#line 355
  tmp___0 = lc_put(mdev->act_log, extent);
#line 355
  if (tmp___0 == 0U) {
#line 356
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 358
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 359
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 372
  return (al_enr >> 5);
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 381
  return (rs_enr >> 3);
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 391
  __mptr = (struct drbd_work  const  *)w;
#line 391
  aw = (struct update_al_work *)__mptr;
#line 392
  updated = aw->al_ext;
#line 393
  new_enr = aw->enr;
#line 394
  evicted = aw->old_enr;
#line 399
  xor_sum = 0U;
#line 401
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 401
  if (tmp___0 == 0) {
#line 402
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.disk);
#line 402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 405
    complete(& ((struct update_al_work *)w)->event);
#line 406
    return (1);
  } else {

  }
#line 414
  if ((int )mdev->state.ldv_38794.conn <= 9 && evicted != 4294967295U) {
#line 415
    tmp___1 = al_extent_to_bm_page(evicted);
#line 415
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 418
  if ((int )mdev->state.ldv_38794.disk <= 3) {
#line 419
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.disk);
#line 419
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 422
    complete(& ((struct update_al_work *)w)->event);
#line 423
    put_ldev(mdev);
#line 424
    return (1);
  } else {

  }
#line 427
  tmp___3 = drbd_md_get_buffer(mdev);
#line 427
  buffer = (struct al_transaction *)tmp___3;
#line 428
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 430
    complete(& ((struct update_al_work *)w)->event);
#line 431
    put_ldev(mdev);
#line 432
    return (1);
  } else {

  }
#line 435
  buffer->magic = 1728214147U;
#line 436
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 436
  buffer->tr_number = tmp___4;
#line 438
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 438
  n = (int )tmp___5;
#line 440
  tmp___6 = __fswab32((__u32 )n);
#line 440
  buffer->updates[0].pos = tmp___6;
#line 441
  tmp___7 = __fswab32(new_enr);
#line 441
  buffer->updates[0].extent = tmp___7;
#line 443
  xor_sum = xor_sum ^ new_enr;
#line 445
  __min1 = 61;
#line 445
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 445
  mx = __min1 < __min2 ? __min1 : __min2;
#line 447
  i = 0;
#line 447
  goto ldv_49004;
  ldv_49003: 
#line 448
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 449
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 449
  extent_nr = tmp___8->lc_number;
#line 450
  tmp___9 = __fswab32(idx);
#line 450
  buffer->updates[i + 1].pos = tmp___9;
#line 451
  tmp___10 = __fswab32(extent_nr);
#line 451
  buffer->updates[i + 1].extent = tmp___10;
#line 452
  xor_sum = xor_sum ^ extent_nr;
#line 447
  i = i + 1;
  ldv_49004: ;
#line 447
  if (i < mx) {
#line 448
    goto ldv_49003;
  } else {

  }

#line 454
  goto ldv_49007;
  ldv_49006: 
#line 455
  buffer->updates[i + 1].pos = 4294967295U;
#line 456
  buffer->updates[i + 1].extent = 4294967295U;
#line 457
  xor_sum = ~ xor_sum;
#line 454
  i = i + 1;
  ldv_49007: ;
#line 454
  if (i <= 60) {
#line 455
    goto ldv_49006;
  } else {

  }
#line 459
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 460
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 461
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 463
  tmp___11 = __fswab32(xor_sum);
#line 463
  buffer->xor_sum = tmp___11;
#line 465
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 468
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 468
  if (tmp___12 == 0) {
#line 469
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 471
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 471
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 473
    mdev->al_tr_pos = 0;
  } else {

  }
#line 475
  if (mdev->al_tr_pos > 63) {
#line 475
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            475);
  } else {

  }
#line 476
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 478
  drbd_md_put_buffer(mdev);
#line 480
  complete(& ((struct update_al_work *)w)->event);
#line 481
  put_ldev(mdev);
#line 483
  return (1);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 502
  xor_sum = 0U;
#line 504
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 508
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 508
  if (tmp == 0) {
#line 509
    return (-1);
  } else {

  }
#line 511
  tmp___0 = __fswab32(b->magic);
#line 511
  rv = tmp___0 == 2205418087U;
#line 513
  i = 0;
#line 513
  goto ldv_49021;
  ldv_49020: 
#line 514
  tmp___1 = __fswab32(b->updates[i].extent);
#line 514
  xor_sum = tmp___1 ^ xor_sum;
#line 513
  i = i + 1;
  ldv_49021: ;
#line 513
  if (i <= 61) {
#line 514
    goto ldv_49020;
  } else {

  }
#line 515
  tmp___2 = __fswab32(b->xor_sum);
#line 515
  rv = (tmp___2 == xor_sum) & rv;
#line 517
  return (rv);
}
}
#line 527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 533
  active_extents = 0;
#line 534
  transactions = 0;
#line 535
  found_valid = 0;
#line 536
  from = 0;
#line 537
  to = 0;
#line 538
  from_tnr = 0U;
#line 539
  to_tnr = 0U;
#line 542
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 547
  tmp = drbd_md_get_buffer(mdev);
#line 547
  buffer = (struct al_transaction *)tmp;
#line 548
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 549
    return (0);
  } else {

  }
#line 552
  i = 0;
#line 552
  goto ldv_49041;
  ldv_49040: 
#line 553
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 554
  if (rv == 0) {
#line 555
    goto ldv_49039;
  } else {

  }
#line 556
  if (rv == -1) {
#line 557
    drbd_md_put_buffer(mdev);
#line 558
    return (0);
  } else {

  }
#line 560
  tmp___0 = __fswab32(buffer->tr_number);
#line 560
  cnr = tmp___0;
#line 562
  found_valid = found_valid + 1;
#line 562
  if (found_valid == 1) {
#line 563
    from = i;
#line 564
    to = i;
#line 565
    from_tnr = cnr;
#line 566
    to_tnr = cnr;
#line 567
    goto ldv_49039;
  } else {

  }
#line 569
  if ((int )cnr - (int )from_tnr < 0) {
#line 570
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 570
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              570);
    } else {

    }
#line 571
    from = i;
#line 572
    from_tnr = cnr;
  } else {

  }
#line 574
  if ((int )cnr - (int )to_tnr > 0) {
#line 575
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 575
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              575);
    } else {

    }
#line 576
    to = i;
#line 577
    to_tnr = cnr;
  } else {

  }
  ldv_49039: 
#line 552
  i = i + 1;
  ldv_49041: ;
#line 552
  if (i <= mx) {
#line 553
    goto ldv_49040;
  } else {

  }

#line 581
  if (found_valid == 0) {
#line 582
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 583
    drbd_md_put_buffer(mdev);
#line 584
    return (1);
  } else {

  }
#line 589
  i = from;
  ldv_49056: 
#line 595
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 596
  _b = rv == 0;
#line 596
  if (_b != 0) {
#line 596
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            596);
  } else {

  }
#line 596
  if (_b != 0) {
#line 596
    goto cancel;
  } else {

  }
#line 597
  if (rv == -1) {
#line 598
    drbd_md_put_buffer(mdev);
#line 599
    return (0);
  } else {

  }
#line 602
  tmp___1 = __fswab32(buffer->tr_number);
#line 602
  trn = tmp___1;
#line 604
  spin_lock_irq(& mdev->al_lock);
#line 610
  j = 61;
#line 610
  goto ldv_49053;
  ldv_49052: 
#line 611
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 611
  pos = (int )tmp___2;
#line 612
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 612
  extent_nr = tmp___3;
#line 614
  if (extent_nr == 4294967295U) {
#line 615
    goto ldv_49051;
  } else {

  }
#line 617
  lc_set(mdev->act_log, extent_nr, pos);
#line 618
  active_extents = active_extents + 1;
  ldv_49051: 
#line 610
  j = j - 1;
  ldv_49053: ;
#line 610
  if (j >= 0) {
#line 611
    goto ldv_49052;
  } else {

  }
#line 620
  spin_unlock_irq(& mdev->al_lock);
#line 622
  transactions = transactions + 1;
  cancel: ;
#line 625
  if (i == to) {
#line 626
    goto ldv_49055;
  } else {

  }
#line 627
  i = i + 1;
#line 628
  if (i > mx) {
#line 629
    i = 0;
  } else {

  }
#line 630
  goto ldv_49056;
  ldv_49055: 
#line 632
  mdev->al_tr_number = to_tnr + 1U;
#line 633
  mdev->al_tr_pos = to;
#line 634
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 634
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 636
    mdev->al_tr_pos = 0;
  } else {

  }
#line 639
  drbd_md_put_buffer(mdev);
#line 641
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 644
  return (1);
}
}
#line 651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 654
  add = 0UL;
#line 658
  tmp___0 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___0 != 0) {
#line 658
    goto ldv_49065;
  } else {

  }
#line 658
  tmp___1 = get_current();
#line 658
  __wait.flags = 0U;
#line 658
  __wait.private = (void *)tmp___1;
#line 658
  __wait.func = & autoremove_wake_function;
#line 658
  __wait.task_list.next = & __wait.task_list;
#line 658
  __wait.task_list.prev = & __wait.task_list;
  ldv_49068: 
#line 658
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 658
  tmp___2 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___2 != 0) {
#line 658
    goto ldv_49067;
  } else {

  }
#line 658
  schedule();
#line 658
  goto ldv_49068;
  ldv_49067: 
#line 658
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49065: 
#line 660
  i = 0;
#line 660
  goto ldv_49073;
  ldv_49072: 
#line 661
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 661
  enr = tmp___3->lc_number;
#line 662
  if (enr == 4294967295U) {
#line 663
    goto ldv_49069;
  } else {

  }
#line 664
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 664
  tmp = (int )tmp___4;
#line 665
  descriptor.modname = "drbd";
#line 665
  descriptor.function = "drbd_al_apply_to_bm";
#line 665
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 665
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 665
  descriptor.lineno = 665U;
#line 665
  descriptor.flags = 0U;
#line 665
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 665
  if (tmp___5 != 0L) {
#line 665
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 666
  add = (unsigned long )tmp + add;
  ldv_49069: 
#line 660
  i = i + 1;
  ldv_49073: ;
#line 660
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 661
    goto ldv_49072;
  } else {

  }
#line 669
  lc_unlock(mdev->act_log);
#line 670
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 672
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 672
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 673
  return;
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 680
  spin_lock_irq(& mdev->al_lock);
#line 681
  rv = al_ext->refcnt == 0U;
#line 682
  tmp = __builtin_expect(rv != 0, 1L);
#line 682
  if (tmp != 0L) {
#line 683
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 684
  spin_unlock_irq(& mdev->al_lock);
#line 686
  return (rv);
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 703
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 703
  if (tmp == 0) {
#line 703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            703);
  } else {

  }
#line 705
  i = 0;
#line 705
  goto ldv_49091;
  ldv_49090: 
#line 706
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 707
  if (al_ext->lc_number == 4294967295U) {
#line 708
    goto ldv_49085;
  } else {

  }
#line 709
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 709
  if (tmp___0 != 0) {
#line 709
    goto ldv_49086;
  } else {

  }
#line 709
  tmp___1 = get_current();
#line 709
  __wait.flags = 0U;
#line 709
  __wait.private = (void *)tmp___1;
#line 709
  __wait.func = & autoremove_wake_function;
#line 709
  __wait.task_list.next = & __wait.task_list;
#line 709
  __wait.task_list.prev = & __wait.task_list;
  ldv_49089: 
#line 709
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 709
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 709
  if (tmp___2 != 0) {
#line 709
    goto ldv_49088;
  } else {

  }
#line 709
  schedule();
#line 709
  goto ldv_49089;
  ldv_49088: 
#line 709
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49086: ;
  ldv_49085: 
#line 705
  i = i + 1;
  ldv_49091: ;
#line 705
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 706
    goto ldv_49090;
  } else {

  }
#line 712
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 713
  return;
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 717
  __mptr = (struct drbd_work  const  *)w;
#line 717
  udw = (struct update_odbm_work *)__mptr;
#line 719
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 719
  if (tmp___0 == 0) {
#line 720
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 720
    if (tmp != 0) {
#line 721
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 722
    kfree((void const   *)udw);
#line 723
    return (1);
  } else {

  }
#line 726
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 726
  drbd_bm_write_page(mdev, tmp___1);
#line 727
  put_ldev(mdev);
#line 729
  kfree((void const   *)udw);
#line 731
  tmp___2 = drbd_bm_total_weight(mdev);
#line 731
  if (tmp___2 <= mdev->rs_failed) {
#line 732
    switch ((int )mdev->state.ldv_38794.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 735
    drbd_resync_finished(mdev);
    default: ;
#line 738
    goto ldv_49107;
    }
    ldv_49107: ;
  } else {

  }
#line 741
  drbd_bcast_sync_progress(mdev);
#line 743
  return (1);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 761
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 761
  if (tmp == 0) {
#line 761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            761);
  } else {

  }
#line 765
  enr = (unsigned int )(sector >> 15);
#line 767
  e = lc_get(mdev->resync, enr);
#line 768
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 769
    __mptr = (struct lc_element  const  *)e;
#line 769
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 770
    if (ext->lce.lc_number == enr) {
#line 771
      if (success != 0) {
#line 772
        ext->rs_left = ext->rs_left - count;
      } else {
#line 774
        ext->rs_failed = ext->rs_failed + count;
      }
#line 775
      if (ext->rs_left < ext->rs_failed) {
#line 776
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38794.conn);
#line 776
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 789
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 798
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 798
      rs_left = tmp___1;
#line 799
      if (ext->flags != 0UL) {
#line 800
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 804
        ext->flags = 0UL;
      } else {

      }
#line 806
      if (ext->rs_failed != 0) {
#line 807
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 811
      ext->rs_left = rs_left;
#line 812
      ext->rs_failed = success == 0 ? count : 0;
#line 813
      lc_changed(mdev->resync, & ext->lce);
    }
#line 815
    lc_put(mdev->resync, & ext->lce);
#line 818
    if (ext->rs_left == ext->rs_failed) {
#line 819
      ext->rs_failed = 0;
#line 821
      tmp___2 = kmalloc(32UL, 32U);
#line 821
      udw = (struct update_odbm_work *)tmp___2;
#line 822
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 823
        udw->enr = ext->lce.lc_number;
#line 824
        udw->w.cb = & w_update_odbm;
#line 825
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 827
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 835
  return;
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 840
  now = jiffies;
#line 841
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 842
  next = (mdev->rs_last_mark + 1) % 8;
#line 843
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 844
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 847
      mdev->rs_mark_time[next] = now;
#line 848
      mdev->rs_mark_left[next] = still_to_go;
#line 849
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 851
  return;
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 866
  count = 0UL;
#line 868
  wake_up = 0;
#line 871
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 872
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 874
    return;
  } else {

  }
#line 876
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 877
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 879
  _b = sector >= nr_sectors;
#line 879
  if (_b != 0) {
#line 879
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            879);
  } else {

  }
#line 879
  if (_b != 0) {
#line 879
    return;
  } else {

  }
#line 880
  _b___0 = esector >= nr_sectors;
#line 880
  if (_b___0 != 0) {
#line 880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            880);
  } else {

  }
#line 880
  if (_b___0 != 0) {
#line 880
    esector = nr_sectors - 1UL;
  } else {

  }
#line 882
  lbnr = (nr_sectors - 1UL) >> 3;
#line 887
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 887
  if (tmp != 0L) {
#line 888
    return;
  } else {

  }
#line 889
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 889
  if (tmp___0 != 0L) {
#line 890
    ebnr = lbnr;
  } else {
#line 892
    ebnr = (esector - 7UL) >> 3;
  }
#line 893
  sbnr = (sector + 7UL) >> 3;
#line 895
  if (sbnr > ebnr) {
#line 896
    return;
  } else {

  }
#line 902
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 902
  count = (unsigned long )tmp___1;
#line 903
  if (count != 0UL) {
#line 903
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 903
    if (tmp___4 != 0) {
#line 904
      tmp___2 = drbd_bm_total_weight(mdev);
#line 904
      drbd_advance_rs_marks(mdev, tmp___2);
#line 905
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 905
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 906
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 907
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 911
      wake_up = 1;
#line 912
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 914
  if (wake_up != 0) {
#line 915
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 916
  return;
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 931
  count = 0U;
#line 934
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 935
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 937
    return (0);
  } else {

  }
#line 940
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 940
  if (tmp == 0) {
#line 941
    return (0);
  } else {

  }
#line 943
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 944
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 946
  _b = sector >= nr_sectors;
#line 946
  if (_b != 0) {
#line 946
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            946);
  } else {

  }
#line 946
  if (_b != 0) {
#line 947
    goto out;
  } else {

  }
#line 948
  _b___0 = esector >= nr_sectors;
#line 948
  if (_b___0 != 0) {
#line 948
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            948);
  } else {

  }
#line 948
  if (_b___0 != 0) {
#line 949
    esector = nr_sectors - 1UL;
  } else {

  }
#line 951
  lbnr = (nr_sectors - 1UL) >> 3;
#line 955
  sbnr = sector >> 3;
#line 956
  ebnr = esector >> 3;
#line 960
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 960
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 961
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 961
  count = (unsigned int )tmp___1;
#line 963
  enr = (unsigned int )(sector >> 15);
#line 964
  e = lc_find(mdev->resync, enr);
#line 965
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 966
    __mptr = (struct lc_element  const  *)e;
#line 966
    __mptr___0 = (struct lc_element  const  *)e;
#line 966
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 967
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 970
  put_ldev(mdev);
#line 972
  return ((int )count);
}
}
#line 976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 980
  wakeup = 0;
#line 983
  spin_lock_irq(& mdev->al_lock);
#line 984
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 985
    spin_unlock_irq(& mdev->al_lock);
#line 986
    return (0);
  } else {

  }
#line 988
  e = lc_get(mdev->resync, enr);
#line 989
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 989
    __mptr = (struct lc_element  const  *)e;
#line 989
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 989
    bm_ext = 0;
  }
#line 990
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 991
    if (bm_ext->lce.lc_number != enr) {
#line 992
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 993
      bm_ext->rs_failed = 0;
#line 994
      lc_changed(mdev->resync, & bm_ext->lce);
#line 995
      wakeup = 1;
    } else {

    }
#line 997
    if (bm_ext->lce.refcnt == 1U) {
#line 998
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 999
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1001
  rs_flags = (mdev->resync)->flags;
#line 1002
  spin_unlock_irq(& mdev->al_lock);
#line 1003
  if (wakeup != 0) {
#line 1004
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1006
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1007
    if ((rs_flags & 4UL) != 0UL) {
#line 1008
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1010
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1010
    if (tmp != 0L) {
#line 1010
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1010), "i" (12UL));
      ldv_49194: ;
#line 1010
      goto ldv_49194;
    } else {

    }
  } else {

  }
#line 1013
  return (bm_ext);
}
}
#line 1016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1019
  rv = 0;
#line 1021
  spin_lock_irq(& mdev->al_lock);
#line 1022
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1022
  if (tmp != 0L) {
#line 1023
    rv = 1;
  } else {
#line 1025
    al_ext = lc_find(mdev->act_log, enr);
#line 1026
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1027
      if (al_ext->refcnt != 0U) {
#line 1028
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1031
  spin_unlock_irq(& mdev->al_lock);
#line 1038
  return (rv);
}
}
#line 1048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1050
  enr = (unsigned int )(sector >> 15);
#line 1053
  sa = 200;
  retry: 
#line 1057
  __ret = 0;
#line 1057
  bm_ext = _bme_get(mdev, enr);
#line 1057
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1057
    tmp = get_current();
#line 1057
    __wait.flags = 0U;
#line 1057
    __wait.private = (void *)tmp;
#line 1057
    __wait.func = & autoremove_wake_function;
#line 1057
    __wait.task_list.next = & __wait.task_list;
#line 1057
    __wait.task_list.prev = & __wait.task_list;
    ldv_49215: 
#line 1057
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1057
    bm_ext = _bme_get(mdev, enr);
#line 1057
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1057
      goto ldv_49213;
    } else {

    }
#line 1057
    tmp___0 = get_current();
#line 1057
    tmp___1 = signal_pending(tmp___0);
#line 1057
    if (tmp___1 == 0) {
#line 1057
      schedule();
#line 1057
      goto ldv_49214;
    } else {

    }
#line 1057
    __ret = -512;
#line 1057
    goto ldv_49213;
    ldv_49214: ;
#line 1057
    goto ldv_49215;
    ldv_49213: 
#line 1057
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1057
  sig = __ret;
#line 1059
  if (sig != 0) {
#line 1060
    return (-4);
  } else {

  }
#line 1062
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1062
  if (tmp___2 != 0) {
#line 1063
    return (0);
  } else {

  }
#line 1065
  i = 0;
#line 1065
  goto ldv_49224;
  ldv_49223: 
#line 1066
  __ret___0 = 0;
#line 1066
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1066
  if (tmp___8 != 0) {
#line 1066
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1066
    if (tmp___9 == 0) {
#line 1066
      tmp___3 = get_current();
#line 1066
      __wait___0.flags = 0U;
#line 1066
      __wait___0.private = (void *)tmp___3;
#line 1066
      __wait___0.func = & autoremove_wake_function;
#line 1066
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1066
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49221: 
#line 1066
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1066
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1066
      if (tmp___4 == 0) {
#line 1066
        goto ldv_49219;
      } else {
#line 1066
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1066
        if (tmp___5 != 0) {
#line 1066
          goto ldv_49219;
        } else {

        }
      }
#line 1066
      tmp___6 = get_current();
#line 1066
      tmp___7 = signal_pending(tmp___6);
#line 1066
      if (tmp___7 == 0) {
#line 1066
        schedule();
#line 1066
        goto ldv_49220;
      } else {

      }
#line 1066
      __ret___0 = -512;
#line 1066
      goto ldv_49219;
      ldv_49220: ;
#line 1066
      goto ldv_49221;
      ldv_49219: 
#line 1066
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1066
  sig = __ret___0;
#line 1070
  if (sig != 0) {
#line 1070
    goto _L;
  } else {
#line 1070
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1070
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1071
      spin_lock_irq(& mdev->al_lock);
#line 1072
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1072
      if (tmp___10 == 0U) {
#line 1073
        bm_ext->flags = 0UL;
#line 1074
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1075
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1077
      spin_unlock_irq(& mdev->al_lock);
#line 1078
      if (sig != 0) {
#line 1079
        return (-4);
      } else {

      }
#line 1080
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1080
      if (tmp___11 != 0L) {
#line 1081
        return (-4);
      } else {

      }
#line 1082
      if (sa != 0) {
#line 1082
        sa = sa - 1;
#line 1082
        if (sa == 0) {
#line 1083
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1085
      goto retry;
    } else {

    }
  }
#line 1065
  i = i + 1;
  ldv_49224: ;
#line 1065
  if (i <= 3) {
#line 1066
    goto ldv_49223;
  } else {

  }
#line 1088
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1089
  return (0);
}
}
#line 1101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1103
  enr = (unsigned int )(sector >> 15);
#line 1104
  al_enr = enr * 4U;
#line 1109
  spin_lock_irq(& mdev->al_lock);
#line 1110
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1124
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1125
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1125
      __mptr = (struct lc_element  const  *)e;
#line 1125
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1125
      bm_ext = 0;
    }
#line 1126
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1127
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1127
      if (tmp != 0) {
#line 1127
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1127);
      } else {

      }
#line 1128
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1128
      if (tmp___0 == 0) {
#line 1128
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1128);
      } else {

      }
#line 1129
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1130
      mdev->resync_wenr = 4294967295U;
#line 1131
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1131
      if (tmp___1 == 0U) {
#line 1132
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1133
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1135
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1139
  e = lc_try_get(mdev->resync, enr);
#line 1140
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1140
    __mptr___0 = (struct lc_element  const  *)e;
#line 1140
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1140
    bm_ext = 0;
  }
#line 1141
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1142
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1142
    if (tmp___2 != 0) {
#line 1143
      goto proceed;
    } else {

    }
#line 1144
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1144
    if (tmp___3 == 0) {
#line 1145
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1151
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1152
      if (bm_ext->lce.refcnt == 0U) {
#line 1152
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1152);
      } else {

      }
    }
#line 1154
    goto check_al;
  } else {
#line 1157
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1158
      goto try_again;
    } else {

    }
#line 1160
    e = lc_get(mdev->resync, enr);
#line 1161
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1161
      __mptr___1 = (struct lc_element  const  *)e;
#line 1161
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1161
      bm_ext = 0;
    }
#line 1162
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1163
      rs_flags = (mdev->resync)->flags;
#line 1164
      if ((rs_flags & 4UL) != 0UL) {
#line 1165
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1167
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1167
      if (tmp___4 != 0L) {
#line 1167
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1167), "i" (12UL));
        ldv_49245: ;
#line 1167
        goto ldv_49245;
      } else {

      }
#line 1168
      goto try_again;
    } else {

    }
#line 1170
    if (bm_ext->lce.lc_number != enr) {
#line 1171
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1172
      bm_ext->rs_failed = 0;
#line 1173
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1174
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1175
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1175
      if (tmp___5 != 0) {
#line 1175
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1175);
      } else {

      }
    } else {

    }
#line 1177
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1178
    if (bm_ext->lce.refcnt != 1U) {
#line 1178
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1178);
    } else {

    }
#line 1179
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1180
    goto check_al;
  }
  check_al: 
#line 1183
  i = 0;
#line 1183
  goto ldv_49247;
  ldv_49246: 
#line 1184
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1184
  if (tmp___6 != 0L) {
#line 1185
    goto try_again;
  } else {

  }
#line 1186
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1186
  if (tmp___7 != 0) {
#line 1187
    goto try_again;
  } else {

  }
#line 1183
  i = i + 1;
  ldv_49247: ;
#line 1183
  if (i <= 3) {
#line 1184
    goto ldv_49246;
  } else {

  }
#line 1189
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1191
  mdev->resync_wenr = 4294967295U;
#line 1192
  spin_unlock_irq(& mdev->al_lock);
#line 1193
  return (0);
  try_again: ;
#line 1196
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1197
    mdev->resync_wenr = enr;
  } else {

  }
#line 1198
  spin_unlock_irq(& mdev->al_lock);
#line 1199
  return (-11);
}
}
#line 1202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1204
  enr = (unsigned int )(sector >> 15);
#line 1209
  tmp = spinlock_check(& mdev->al_lock);
#line 1209
  flags = _raw_spin_lock_irqsave(tmp);
#line 1210
  e = lc_find(mdev->resync, enr);
#line 1211
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1211
    __mptr = (struct lc_element  const  *)e;
#line 1211
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1211
    bm_ext = 0;
  }
#line 1212
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1213
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1214
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1214
    if (tmp___0 != 0) {
#line 1215
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1216
    return;
  } else {

  }
#line 1219
  if (bm_ext->lce.refcnt == 0U) {
#line 1220
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1224
    return;
  } else {

  }
#line 1227
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1227
  if (tmp___1 == 0U) {
#line 1228
    bm_ext->flags = 0UL;
#line 1229
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1230
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1233
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1234
  return;
}
}
#line 1240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1242
  spin_lock_irq(& mdev->al_lock);
#line 1244
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1244
  if (tmp != 0) {
#line 1245
    lc_reset(mdev->resync);
#line 1246
    put_ldev(mdev);
  } else {

  }
#line 1248
  mdev->resync_locked = 0U;
#line 1249
  mdev->resync_wenr = 4294967295U;
#line 1250
  spin_unlock_irq(& mdev->al_lock);
#line 1251
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1252
  return;
}
}
#line 1261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1267
  spin_lock_irq(& mdev->al_lock);
#line 1269
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1269
  if (tmp___3 != 0) {
#line 1271
    i = 0;
#line 1271
    goto ldv_49276;
    ldv_49275: 
#line 1272
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1273
    __mptr = (struct lc_element  const  *)e;
#line 1273
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1274
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1275
      goto ldv_49274;
    } else {

    }
#line 1276
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1277
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1280
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1280
      if (tmp != 0) {
#line 1280
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1280);
      } else {

      }
#line 1281
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1281
      if (tmp___0 == 0) {
#line 1281
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1281);
      } else {

      }
#line 1282
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1283
      mdev->resync_wenr = 4294967295U;
#line 1284
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1286
    if (bm_ext->lce.refcnt != 0U) {
#line 1287
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1289
      put_ldev(mdev);
#line 1290
      spin_unlock_irq(& mdev->al_lock);
#line 1291
      return (-11);
    } else {

    }
#line 1293
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1293
    if (tmp___1 != 0) {
#line 1293
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1293);
    } else {

    }
#line 1294
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1294
    if (tmp___2 != 0) {
#line 1294
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1294);
    } else {

    }
#line 1295
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_49274: 
#line 1271
    i = i + 1;
    ldv_49276: ;
#line 1271
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1272
      goto ldv_49275;
    } else {

    }

#line 1297
    if ((mdev->resync)->used != 0U) {
#line 1297
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1297);
    } else {

    }
#line 1298
    put_ldev(mdev);
  } else {

  }
#line 1300
  spin_unlock_irq(& mdev->al_lock);
#line 1301
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1303
  return (0);
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1318
  wake_up = 0;
#line 1320
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1321
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1323
    return;
  } else {

  }
#line 1325
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1326
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1328
  _b = sector >= nr_sectors;
#line 1328
  if (_b != 0) {
#line 1328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1328);
  } else {

  }
#line 1328
  if (_b != 0) {
#line 1328
    return;
  } else {

  }
#line 1329
  _b___0 = esector >= nr_sectors;
#line 1329
  if (_b___0 != 0) {
#line 1329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1329);
  } else {

  }
#line 1329
  if (_b___0 != 0) {
#line 1329
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1331
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1336
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1336
  if (tmp != 0L) {
#line 1337
    return;
  } else {

  }
#line 1338
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1338
  if (tmp___0 != 0L) {
#line 1339
    ebnr = lbnr;
  } else {
#line 1341
    ebnr = (esector - 7UL) >> 3;
  }
#line 1342
  sbnr = (sector + 7UL) >> 3;
#line 1344
  if (sbnr > ebnr) {
#line 1345
    return;
  } else {

  }
#line 1351
  spin_lock_irq(& mdev->al_lock);
#line 1352
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1352
  count = (unsigned long )tmp___1;
#line 1353
  if (count != 0UL) {
#line 1354
    mdev->rs_failed = mdev->rs_failed + count;
#line 1356
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1356
    if (tmp___2 != 0) {
#line 1357
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1358
      put_ldev(mdev);
    } else {

    }
#line 1363
    wake_up = 1;
  } else {

  }
#line 1365
  spin_unlock_irq(& mdev->al_lock);
#line 1366
  if (wake_up != 0) {
#line 1367
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1368
  return;
}
}
#line 1370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1375
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1377
  mutex_lock(ldv_func_arg1);
#line 1378
  return;
}
}
#line 1380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1385
  tmp = mutex_trylock(ldv_func_arg1);
#line 1385
  ldv_func_res = tmp;
#line 1387
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1387
  return (tmp___0);
#line 1389
  return (ldv_func_res);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1399
  mutex_unlock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1407
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1409
  mutex_lock(ldv_func_arg1);
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1417
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1419
  mutex_unlock(ldv_func_arg1);
#line 1420
  return;
}
}
#line 1422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1427
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1429
  mutex_lock(ldv_func_arg1);
#line 1430
  return;
}
}
#line 1432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1437
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1439
  mutex_unlock(ldv_func_arg1);
#line 1440
  return;
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1447
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1449
  mutex_unlock(ldv_func_arg1);
#line 1450
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 308 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 310
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 311
  return;
}
}
#line 447 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 449
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 449
  return ((unsigned int )tmp);
}
}
#line 642
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 644
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) ;
#line 83
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 87
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6354;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6354;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6354;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6354;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6354: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 210
extern int del_timer(struct timer_list * ) ;
#line 279 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 303
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 204 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 204
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 204
  return (tmp);
}
}
#line 2085 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2086
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2087
extern struct block_device *bdget(dev_t  ) ;
#line 2092
extern void bdput(struct block_device * ) ;
#line 2130
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1883 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2156
extern int wake_up_process(struct task_struct * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 47 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 48
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 405 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 410
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 604
extern struct gendisk *alloc_disk(int  ) ;
#line 606
extern void put_disk(struct gendisk * ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 65
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 66
extern void mempool_free_pages(void * , void * ) ;
#line 67 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 69
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 69
  return (tmp);
}
}
#line 213 "include/linux/bio.h"
extern void bioset_free(struct bio_set * ) ;
#line 217
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 219
extern void bio_free(struct bio * , struct bio_set * ) ;
#line 841 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 842
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 843
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 845
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 876
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 891
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_48490: ;
#line 593
    goto ldv_48490;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_48505: ;
#line 618
    goto ldv_48505;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1161
  ldv_mutex_lock_126(& mdev->data.mutex);
#line 1164
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1164
  if (tmp != 0L) {
#line 1165
    ldv_mutex_unlock_127(& mdev->data.mutex);
#line 1166
    return (0);
  } else {

  }
#line 1168
  return (1);
}
}
#line 1171 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1173
  ldv_mutex_unlock_128(& mdev->data.mutex);
#line 1174
  return;
}
}
#line 1195
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1209
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1215
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1220
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1226
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1230
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1233
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1269
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1271
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1276
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1282
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1283
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1284
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1286
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1292
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1495 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1496 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1512 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1513 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1514 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1523 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1533
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1534
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1546
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1547
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1714
void drbd_nl_cleanup(void) ;
#line 1715
int drbd_nl_init(void) ;
#line 1716
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1801 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1803
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1803
  if (tmp == 0) {
#line 1803
    goto ldv_49599;
  } else {

  }
#line 1803
  tmp___0 = get_current();
#line 1803
  __wait.flags = 0U;
#line 1803
  __wait.private = (void *)tmp___0;
#line 1803
  __wait.func = & autoremove_wake_function;
#line 1803
  __wait.task_list.next = & __wait.task_list;
#line 1803
  __wait.task_list.prev = & __wait.task_list;
  ldv_49602: 
#line 1803
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1803
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1803
  if (tmp___1 == 0) {
#line 1803
    goto ldv_49601;
  } else {

  }
#line 1803
  schedule();
#line 1803
  goto ldv_49602;
  ldv_49601: 
#line 1803
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49599: ;
#line 1806
  return;
}
}
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1846
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1848
  if (forcedetach == 0) {
#line 1849
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1849
    if (tmp != 0) {
#line 1850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1851
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1852
      __ns.i = mdev->state.i;
#line 1852
      __ns.ldv_38794.disk = 4U;
#line 1852
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1853
    goto ldv_49627;
  } else {

  }
  case 2: ;
  case 1: 
#line 1858
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1859
  if ((int )mdev->state.ldv_38794.disk > 2) {
#line 1860
    __ns___0.i = mdev->state.i;
#line 1860
    __ns___0.ldv_38794.disk = 2U;
#line 1860
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1864
  goto ldv_49627;
  }
  ldv_49627: ;
#line 1867
  return;
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  if (error != 0) {
#line 1882
    tmp = spinlock_check(& mdev->req_lock);
#line 1882
    flags = _raw_spin_lock_irqsave(tmp);
#line 1883
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1884
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1886
  return;
}
}
#line 1939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1942
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1946
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1946
  if (tmp___1 != 0UL) {
#line 1946
    __min1 = 2251799813685248UL;
#line 1946
    tmp___0 = drbd_md_first_sector(bdev);
#line 1946
    __min2 = tmp___0;
#line 1946
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1946
    s = 0UL;
  }
#line 1949
  goto ldv_49668;
  case -2: 
#line 1951
  __min1___0 = 2251799813685248UL;
#line 1951
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1951
  __min2___0 = tmp___2;
#line 1951
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1954
  __min1___1 = s;
#line 1954
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1954
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1957
  goto ldv_49668;
  default: 
#line 1959
  __min1___2 = 8587575296UL;
#line 1959
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1959
  __min2___2 = tmp___3;
#line 1959
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49668: ;
#line 1962
  return (s);
}
}
#line 1970 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1973
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1975
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1981
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1982
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1982
    if (tmp != 0) {
#line 1983
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1984
      dump_stack();
    } else {

    }
#line 1986
    return (0UL);
  } else {

  }
#line 1988
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1988
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1991
  return (0UL);
  }
}
}
#line 2053 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2055
  _drbd_thread_stop(thi, 0, 0);
#line 2056
  return;
}
}
#line 2058 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2060
  _drbd_thread_stop(thi, 1, 0);
#line 2061
  return;
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2277
  s = mdev->state;
#line 2282
  switch ((unsigned int )s.ldv_38794.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2307
  goto ldv_49799;
  case 13U: ;
#line 2311
  if (mdev->agreed_pro_version <= 95) {
#line 2312
    return (0);
  } else {

  }
#line 2313
  goto ldv_49799;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2320
  return (0);
  }
  ldv_49799: ;
#line 2323
  switch ((unsigned int )s.ldv_38794.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2331
  goto ldv_49810;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2339
  return (0);
  }
  ldv_49810: ;
#line 2342
  return (1);
}
}
#line 2350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2352
  tmp = drbd_get_max_buffers(mdev);
#line 2352
  mxb = tmp;
#line 2354
  tmp___0 = is_susp(mdev->state);
#line 2354
  if (tmp___0 != 0) {
#line 2355
    return (0);
  } else {

  }
#line 2356
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2356
  if (tmp___1 != 0) {
#line 2357
    return (0);
  } else {

  }
#line 2364
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2364
  if (tmp___2 == 0) {
#line 2365
    return (0);
  } else {

  }
#line 2369
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2369
  if (tmp___3 > mxb) {
#line 2370
    return (0);
  } else {

  }
#line 2371
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2371
  if (tmp___4 != 0) {
#line 2372
    return (0);
  } else {

  }
#line 2373
  return (1);
}
}
#line 2453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2455
  sk = (mdev->data.socket)->sk;
#line 2456
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2457
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2458
  return;
}
}
#line 2460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2467
  return (0);
}
}
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_50064;
  ldv_50063: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_50064: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_50063;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 137
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 183
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 214
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void bio_destructor_drbd(struct bio *bio ) 
{ 


  {
#line 222
  bio_free(bio, drbd_md_io_bio_set);
#line 223
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;

  {
#line 229
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 230
    tmp = bio_alloc(gfp_mask, 1U);
#line 230
    return (tmp);
  } else {

  }
#line 232
  bio = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 233
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 234
    return (0);
  } else {

  }
#line 235
  bio->bi_destructor = & bio_destructor_drbd;
#line 236
  return (bio);
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 273
  tmp = kmalloc(56UL, 208U);
#line 273
  b = (struct drbd_tl_epoch *)tmp;
#line 274
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 275
    return (0);
  } else {

  }
#line 276
  INIT_LIST_HEAD(& b->requests);
#line 277
  INIT_LIST_HEAD(& b->w.list);
#line 278
  b->next = 0;
#line 279
  b->br_number = 4711U;
#line 280
  b->n_writes = 0;
#line 281
  b->w.cb = 0;
#line 283
  mdev->oldest_tle = b;
#line 284
  mdev->newest_tle = b;
#line 285
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 286
  INIT_LIST_HEAD(& mdev->barrier_acked_requests);
#line 288
  mdev->tl_hash = 0;
#line 289
  mdev->tl_hash_s = 0U;
#line 291
  return (1);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 296
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            296);
  } else {

  }
#line 297
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 297
  if (tmp == 0) {
#line 297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            297);
  } else {

  }
#line 298
  kfree((void const   *)mdev->oldest_tle);
#line 299
  mdev->oldest_tle = 0;
#line 300
  kfree((void const   *)mdev->unused_spare_tle);
#line 301
  mdev->unused_spare_tle = 0;
#line 302
  kfree((void const   *)mdev->tl_hash);
#line 303
  mdev->tl_hash = 0;
#line 304
  mdev->tl_hash_s = 0U;
#line 305
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 318
  INIT_LIST_HEAD(& new->requests);
#line 319
  INIT_LIST_HEAD(& new->w.list);
#line 320
  new->w.cb = 0;
#line 321
  new->next = 0;
#line 322
  new->n_writes = 0;
#line 324
  newest_before = mdev->newest_tle;
#line 325
  new->br_number = newest_before->br_number + 1U;
#line 326
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 327
    (mdev->newest_tle)->next = new;
#line 328
    mdev->newest_tle = new;
  } else {

  }
#line 330
  return;
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 349
  spin_lock_irq(& mdev->req_lock);
#line 351
  b = mdev->oldest_tle;
#line 354
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 357
    goto bail;
  } else {

  }
#line 359
  if (b->br_number != barrier_nr) {
#line 360
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 362
    goto bail;
  } else {

  }
#line 364
  if ((unsigned int )b->n_writes != set_size) {
#line 365
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 367
    goto bail;
  } else {

  }
#line 371
  le = b->requests.next;
#line 371
  tle = le->next;
#line 371
  goto ldv_50301;
  ldv_50300: 
#line 372
  __mptr = (struct list_head  const  *)le;
#line 372
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 373
  _req_mod(r, barrier_acked);
#line 371
  le = tle;
#line 371
  tle = le->next;
  ldv_50301: ;
#line 371
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 372
    goto ldv_50300;
  } else {

  }
#line 388
  list_splice_init(& b->requests, & mdev->barrier_acked_requests);
#line 390
  nob = b->next;
#line 391
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 391
  if (tmp != 0) {
#line 392
    _tl_add_barrier(mdev, b);
#line 393
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 394
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 398
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 398
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              398);
    } else {

    }
#line 399
    mdev->oldest_tle = nob;
#line 400
    kfree((void const   *)b);
  }
#line 403
  spin_unlock_irq(& mdev->req_lock);
#line 404
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 404
  if (tmp___0 != 0) {
#line 404
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 404
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
  if (tmp___2 < 0) {
#line 404
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 404, tmp___1);
  } else {

  }
#line 406
  return;
  bail: 
#line 409
  spin_unlock_irq(& mdev->req_lock);
#line 410
  val.i = 0U;
#line 410
  val.ldv_38794.conn = 6U;
#line 410
  mask.i = 0U;
#line 410
  mask.ldv_38794.conn = 31U;
#line 410
  drbd_force_state(mdev, mask, val);
#line 412
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 429
  b = mdev->oldest_tle;
#line 430
  pn = & mdev->oldest_tle;
#line 431
  goto ldv_50336;
  ldv_50335: 
#line 432
  n_writes = 0;
#line 433
  n_reads = 0;
#line 434
  INIT_LIST_HEAD(& carry_reads);
#line 435
  le = b->requests.next;
#line 435
  tle = le->next;
#line 435
  goto ldv_50328;
  ldv_50327: 
#line 436
  __mptr = (struct list_head  const  *)le;
#line 436
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 437
  rv = _req_mod(req, what);
#line 439
  n_writes = (rv & 1) + n_writes;
#line 440
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 435
  le = tle;
#line 435
  tle = le->next;
  ldv_50328: ;
#line 435
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 436
    goto ldv_50327;
  } else {

  }
#line 442
  tmp = b->next;
#line 444
  if (n_writes != 0) {
#line 445
    if ((unsigned int )what == 24U) {
#line 446
      b->n_writes = n_writes;
#line 447
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 448
        b->w.cb = & w_send_barrier;
#line 449
        inc_ap_pending(mdev);
#line 450
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 453
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 455
    pn = & b->next;
  } else {
#line 457
    if (n_reads != 0) {
#line 458
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 461
    list_del(& b->requests);
#line 466
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 467
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 467
      if (tmp___0 != 0) {
#line 467
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 467
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 467
      if (tmp___2 < 0) {
#line 467
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 467
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 467, tmp___1);
      } else {

      }
    } else {

    }
#line 469
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 471
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 471
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                471);
      } else {

      }
#line 472
      INIT_LIST_HEAD(& b->requests);
#line 473
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 474
      INIT_LIST_HEAD(& b->w.list);
#line 475
      b->w.cb = 0;
#line 476
      b->br_number = random32();
#line 477
      b->n_writes = 0;
#line 479
      *pn = b;
#line 480
      goto ldv_50334;
    } else {

    }
#line 482
    *pn = tmp;
#line 483
    kfree((void const   *)b);
  }
#line 485
  b = tmp;
#line 486
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_50336: ;
#line 431
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 432
    goto ldv_50335;
  } else {

  }
  ldv_50334: ;
#line 491
  switch ((unsigned int )what) {
  case 25U: ;
  case 26U: 
#line 494
  le = mdev->barrier_acked_requests.next;
#line 494
  tle = le->next;
#line 494
  goto ldv_50342;
  ldv_50341: 
#line 495
  __mptr___0 = (struct list_head  const  *)le;
#line 495
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 496
  _req_mod(req, what);
#line 494
  le = tle;
#line 494
  tle = le->next;
  ldv_50342: ;
#line 494
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 495
    goto ldv_50341;
  } else {

  }

  case 10U: ;
  case 24U: ;
#line 501
  goto ldv_50346;
  default: 
#line 503
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "what = %d in _tl_restart()\n",
          (unsigned int )what);
  }
  ldv_50346: ;
#line 506
  return;
}
}
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 521
  spin_lock_irq(& mdev->req_lock);
#line 523
  _tl_restart(mdev, connection_lost_while_pending);
#line 526
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 526
  if (tmp == 0) {
#line 526
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            526);
  } else {

  }
#line 529
  le = mdev->out_of_sequence_requests.next;
#line 529
  tle = le->next;
#line 529
  goto ldv_50357;
  ldv_50356: 
#line 530
  __mptr = (struct list_head  const  *)le;
#line 530
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 533
  _req_mod(r, connection_lost_while_pending);
#line 529
  le = tle;
#line 529
  tle = le->next;
  ldv_50357: ;
#line 529
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 530
    goto ldv_50356;
  } else {

  }
#line 537
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 539
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 541
  spin_unlock_irq(& mdev->req_lock);
#line 542
  return;
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 546
  spin_lock_irq(& mdev->req_lock);
#line 547
  _tl_restart(mdev, what);
#line 548
  spin_unlock_irq(& mdev->req_lock);
#line 549
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 561
  spin_lock_irq(& mdev->req_lock);
#line 562
  b = mdev->oldest_tle;
#line 563
  goto ldv_50377;
  ldv_50376: 
#line 564
  le = b->requests.next;
#line 564
  tle = le->next;
#line 564
  goto ldv_50374;
  ldv_50373: 
#line 565
  __mptr = (struct list_head  const  *)le;
#line 565
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 566
  if ((req->rq_state & 1UL) == 0UL) {
#line 567
    goto ldv_50372;
  } else {

  }
#line 568
  _req_mod(req, abort_disk_io);
  ldv_50372: 
#line 564
  le = tle;
#line 564
  tle = le->next;
  ldv_50374: ;
#line 564
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 565
    goto ldv_50373;
  } else {

  }
#line 570
  b = b->next;
  ldv_50377: ;
#line 563
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 564
    goto ldv_50376;
  } else {

  }
#line 573
  le = mdev->barrier_acked_requests.next;
#line 573
  tle = le->next;
#line 573
  goto ldv_50383;
  ldv_50382: 
#line 574
  __mptr___0 = (struct list_head  const  *)le;
#line 574
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 575
  if ((req->rq_state & 1UL) == 0UL) {
#line 576
    goto ldv_50381;
  } else {

  }
#line 577
  _req_mod(req, abort_disk_io);
  ldv_50381: 
#line 573
  le = tle;
#line 573
  tle = le->next;
  ldv_50383: ;
#line 573
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 574
    goto ldv_50382;
  } else {

  }
#line 580
  spin_unlock_irq(& mdev->req_lock);
#line 581
  return;
}
}
#line 589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 592
  return (((((int )os.ldv_38794.conn > 9 && (int )ns.ldv_38794.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_38794.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 609
  tmp = spinlock_check(& mdev->req_lock);
#line 609
  flags = _raw_spin_lock_irqsave(tmp);
#line 610
  os = mdev->state;
#line 611
  ns.i = (os.i & ~ mask.i) | val.i;
#line 612
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 613
  ns = mdev->state;
#line 614
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 616
  return (rv);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 628
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 629
  return;
}
}
#line 631
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 632
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 643
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) ;
#line 645
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 656
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 656
  if (tmp != 0) {
#line 657
    return (SS_CW_SUCCESS);
  } else {

  }
#line 659
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 659
  if (tmp___0 != 0) {
#line 660
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 662
  rv = SS_UNKNOWN_ERROR;
#line 663
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 663
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 664
  os = mdev->state;
#line 665
  ns.i = (os.i & ~ mask.i) | val.i;
#line 666
  ns = sanitize_state(mdev, os, ns, 0);
#line 668
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 668
  if (tmp___2 == 0) {
#line 669
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 670
  if ((int )rv == 0) {
#line 671
    rv = is_valid_state(mdev, ns);
#line 672
    if ((int )rv == 1) {
#line 673
      rv = is_valid_state_transition(mdev, ns, os);
#line 674
      if ((int )rv == 1) {
#line 675
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 678
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 680
  return (rv);
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 702
  init_completion(& done);
#line 704
  if (((unsigned int )f & 8U) != 0U) {
#line 705
    ldv_mutex_lock_129(& mdev->state_mutex);
  } else {

  }
#line 707
  tmp = spinlock_check(& mdev->req_lock);
#line 707
  flags = _raw_spin_lock_irqsave(tmp);
#line 708
  os = mdev->state;
#line 709
  ns.i = (os.i & ~ mask.i) | val.i;
#line 710
  ns = sanitize_state(mdev, os, ns, 0);
#line 712
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 712
  if (tmp___3 != 0) {
#line 713
    rv = is_valid_state(mdev, ns);
#line 714
    if ((int )rv == 1) {
#line 715
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 716
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 718
    if ((int )rv <= 0) {
#line 719
      if (((unsigned int )f & 2U) != 0U) {
#line 720
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 721
      goto abort;
    } else {

    }
#line 724
    drbd_state_lock___0(mdev);
#line 725
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 725
    if (tmp___0 == 0) {
#line 726
      drbd_state_unlock(mdev);
#line 727
      rv = SS_CW_FAILED_BY_PEER;
#line 728
      if (((unsigned int )f & 2U) != 0U) {
#line 729
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 730
      goto abort;
    } else {

    }
#line 733
    rv = _req_st_cond(mdev, mask, val);
#line 733
    if ((int )rv != 0) {
#line 733
      goto ldv_50458;
    } else {

    }
#line 733
    tmp___1 = get_current();
#line 733
    __wait.flags = 0U;
#line 733
    __wait.private = (void *)tmp___1;
#line 733
    __wait.func = & autoremove_wake_function;
#line 733
    __wait.task_list.next = & __wait.task_list;
#line 733
    __wait.task_list.prev = & __wait.task_list;
    ldv_50461: 
#line 733
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 733
    rv = _req_st_cond(mdev, mask, val);
#line 733
    if ((int )rv != 0) {
#line 733
      goto ldv_50460;
    } else {

    }
#line 733
    schedule();
#line 733
    goto ldv_50461;
    ldv_50460: 
#line 733
    finish_wait(& mdev->state_wait, & __wait);
    ldv_50458: ;
#line 736
    if ((int )rv <= 0) {
#line 737
      drbd_state_unlock(mdev);
#line 738
      if (((unsigned int )f & 2U) != 0U) {
#line 739
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 740
      goto abort;
    } else {

    }
#line 742
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 742
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 743
    os = mdev->state;
#line 744
    ns.i = (os.i & ~ mask.i) | val.i;
#line 745
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 746
    drbd_state_unlock(mdev);
  } else {
#line 748
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 751
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 753
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 754
    tmp___4 = get_current();
#line 754
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 754
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              754);
    } else {

    }
#line 755
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 759
  if (((unsigned int )f & 8U) != 0U) {
#line 760
    ldv_mutex_unlock_130(& mdev->state_mutex);
  } else {

  }
#line 762
  return (rv);
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 781
  rv = drbd_req_state(mdev, mask, val, f);
#line 781
  if ((int )rv != -18) {
#line 781
    goto ldv_50472;
  } else {

  }
#line 781
  tmp = get_current();
#line 781
  __wait.flags = 0U;
#line 781
  __wait.private = (void *)tmp;
#line 781
  __wait.func = & autoremove_wake_function;
#line 781
  __wait.task_list.next = & __wait.task_list;
#line 781
  __wait.task_list.prev = & __wait.task_list;
  ldv_50475: 
#line 781
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 781
  rv = drbd_req_state(mdev, mask, val, f);
#line 781
  if ((int )rv != -18) {
#line 781
    goto ldv_50474;
  } else {

  }
#line 781
  schedule();
#line 781
  goto ldv_50475;
  ldv_50474: 
#line 781
  finish_wait(& mdev->state_wait, & __wait);
  ldv_50472: ;
#line 784
  return (rv);
}
}
#line 787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 789
  tmp = is_susp(ns);
#line 789
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38794.pdsk);
#line 789
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38794.disk);
#line 789
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_38794.peer);
#line 789
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38794.role);
#line 789
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_38794.conn);
#line 789
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 800
  return;
}
}
#line 803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 806
  if ((int )err == -18) {
#line 807
    return;
  } else {

  }
#line 808
  tmp = drbd_set_st_err_str(err);
#line 808
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 809
  print_st(mdev, (char *)" state", os);
#line 810
  print_st(mdev, (char *)"wanted", ns);
#line 811
  return;
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 825
  rv = 1;
#line 827
  fp = FP_DONT_CARE;
#line 828
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 828
  if (tmp != 0) {
#line 829
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 830
    put_ldev(mdev);
  } else {

  }
#line 833
  tmp___0 = get_net_conf(mdev);
#line 833
  if (tmp___0 != 0) {
#line 834
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 836
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 837
    put_net_conf(mdev);
  } else {

  }
#line 840
  if ((int )rv <= 0) {

  } else
#line 842
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 843
    rv = SS_DEVICE_IN_USE;
  } else
#line 845
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38794.conn <= 9) && (int )ns.ldv_38794.disk <= 7) {
#line 846
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 848
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_38794.conn <= 9) && (int )ns.ldv_38794.pdsk > 5) {
#line 850
    rv = SS_PRIMARY_NOP;
  } else
#line 852
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38794.disk <= 4) && (int )ns.ldv_38794.pdsk <= 4) {
#line 853
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 855
  if ((int )ns.ldv_38794.conn > 10 && (int )ns.ldv_38794.disk <= 3) {
#line 856
    rv = SS_NO_LOCAL_DISK;
  } else
#line 858
  if ((int )ns.ldv_38794.conn > 10 && (int )ns.ldv_38794.pdsk <= 3) {
#line 859
    rv = SS_NO_REMOTE_DISK;
  } else
#line 861
  if (((int )ns.ldv_38794.conn > 10 && (int )ns.ldv_38794.disk <= 7) && (int )ns.ldv_38794.pdsk <= 7) {
#line 862
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 864
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 869
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 871
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 873
    rv = SS_NO_VERIFY_ALG;
  } else
#line 875
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 877
    rv = SS_NOT_SUPPORTED;
  } else
#line 879
  if ((int )ns.ldv_38794.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 880
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 882
  return (rv);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 895
  rv = 1;
#line 897
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_38794.conn > 10) {
#line 899
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 901
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 902
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 904
  if ((int )ns.ldv_38794.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 905
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 907
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_38794.conn <= 1) {
#line 908
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 910
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_38794.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 911
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 913
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 914
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 916
  if ((int )ns.ldv_38794.conn == (int )os.ldv_38794.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 917
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 921
  tmp = constant_test_bit(30U, (unsigned long const volatile   *)(& mdev->flags));
#line 921
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 924
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 926
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_38794.conn <= 9) {
#line 927
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 929
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_38794.conn != (int )os.ldv_38794.conn) && (int )os.ldv_38794.conn > 10) {
#line 931
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 933
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_38794.conn <= 9) {
#line 935
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 937
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_38794.conn <= 8) {
#line 939
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 941
  return (rv);
}
}
#line 944 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 946
  msg_table[0] = "";
#line 946
  msg_table[1] = "Online-verify aborted.";
#line 946
  msg_table[2] = "Resync aborted.";
#line 946
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 946
  msg_table[4] = "Implicitly upgraded disk";
#line 946
  msg_table[5] = "Implicitly upgraded pdsk";
#line 955
  if ((unsigned int )warn != 0U) {
#line 956
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 957
  return;
}
}
#line 969 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;

  {
#line 975
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 976
    *warn = NO_WARNING;
  } else {

  }
#line 978
  fp = FP_DONT_CARE;
#line 979
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 979
  if (tmp != 0) {
#line 980
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 981
    put_ldev(mdev);
  } else {

  }
#line 985
  if (((int )ns.ldv_38794.conn > 2 && (int )ns.ldv_38794.conn <= 7) && (int )os.ldv_38794.conn <= 1) {
#line 987
    ns.ldv_38794.conn = os.ldv_38794.conn;
  } else {

  }
#line 991
  if (((((int )os.ldv_38794.conn > 2 && (int )os.ldv_38794.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_38794.conn <= 10) {
#line 993
    ns.ldv_38794.conn = os.ldv_38794.conn;
  } else {

  }
#line 996
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 997
    ns.ldv_38794.disk = 0U;
  } else {

  }
#line 1000
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 1001
    ns.ldv_38794.conn = os.ldv_38794.conn;
  } else {

  }
#line 1003
  if ((int )ns.ldv_38794.conn <= 9) {
#line 1004
    ns.ldv_38794.peer_isp = 0U;
#line 1005
    ns.ldv_38794.peer = 0U;
#line 1006
    if ((int )ns.ldv_38794.pdsk > 6 || (int )ns.ldv_38794.pdsk <= 3) {
#line 1007
      ns.ldv_38794.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 1011
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1012
    ns.ldv_38794.aftr_isp = 0U;
  } else {

  }
#line 1015
  if (((int )os.ldv_38794.conn > 10 && (int )ns.ldv_38794.conn > 10) && ((int )ns.ldv_38794.disk <= 2 || (int )ns.ldv_38794.pdsk <= 2)) {
#line 1017
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1018
      *warn = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 1020
    ns.ldv_38794.conn = 10U;
  } else {

  }
#line 1024
  if ((int )ns.ldv_38794.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1024
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1024
    if (tmp___0 != 0) {
#line 1026
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 1027
        ns.ldv_38794.disk = mdev->new_state_tmp.ldv_38794.disk;
#line 1028
        ns.ldv_38794.pdsk = mdev->new_state_tmp.ldv_38794.pdsk;
      } else {
#line 1030
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1031
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 1032
        ns.ldv_38794.disk = 0U;
#line 1033
        ns.ldv_38794.pdsk = 6U;
      }
#line 1035
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1039
  if ((int )ns.ldv_38794.conn > 9 && (int )ns.ldv_38794.conn <= 21) {
#line 1040
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 1041
      ns.ldv_38794.disk = 8U;
    } else {

    }
#line 1042
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 1043
      ns.ldv_38794.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 1047
  disk_min = D_DISKLESS;
#line 1048
  disk_max = D_UP_TO_DATE;
#line 1049
  pdsk_min = D_INCONSISTENT;
#line 1050
  pdsk_max = D_UNKNOWN;
#line 1051
  switch ((unsigned int )ns.ldv_38794.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 1057
  disk_min = D_INCONSISTENT;
#line 1058
  disk_max = D_OUTDATED;
#line 1059
  pdsk_min = D_UP_TO_DATE;
#line 1060
  pdsk_max = D_UP_TO_DATE;
#line 1061
  goto ldv_50520;
  case 18U: ;
  case 19U: 
#line 1064
  disk_min = D_UP_TO_DATE;
#line 1065
  disk_max = D_UP_TO_DATE;
#line 1066
  pdsk_min = D_UP_TO_DATE;
#line 1067
  pdsk_max = D_UP_TO_DATE;
#line 1068
  goto ldv_50520;
  case 10U: 
#line 1070
  disk_min = D_DISKLESS;
#line 1071
  disk_max = D_UP_TO_DATE;
#line 1072
  pdsk_min = D_DISKLESS;
#line 1073
  pdsk_max = D_UP_TO_DATE;
#line 1074
  goto ldv_50520;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 1079
  disk_min = D_UP_TO_DATE;
#line 1080
  disk_max = D_UP_TO_DATE;
#line 1081
  pdsk_min = D_INCONSISTENT;
#line 1082
  pdsk_max = D_CONSISTENT;
#line 1083
  goto ldv_50520;
  case 17U: 
#line 1085
  disk_min = D_INCONSISTENT;
#line 1086
  disk_max = D_INCONSISTENT;
#line 1087
  pdsk_min = D_UP_TO_DATE;
#line 1088
  pdsk_max = D_UP_TO_DATE;
#line 1089
  goto ldv_50520;
  case 16U: 
#line 1091
  disk_min = D_UP_TO_DATE;
#line 1092
  disk_max = D_UP_TO_DATE;
#line 1093
  pdsk_min = D_INCONSISTENT;
#line 1094
  pdsk_max = D_INCONSISTENT;
#line 1095
  goto ldv_50520;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1107
  goto ldv_50520;
  }
  ldv_50520: ;
#line 1109
  if ((unsigned int )ns.ldv_38794.disk > (unsigned int )disk_max) {
#line 1110
    ns.ldv_38794.disk = (unsigned char )disk_max;
  } else {

  }
#line 1112
  if ((unsigned int )ns.ldv_38794.disk < (unsigned int )disk_min) {
#line 1113
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1114
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 1115
    ns.ldv_38794.disk = (unsigned char )disk_min;
  } else {

  }
#line 1117
  if ((unsigned int )ns.ldv_38794.pdsk > (unsigned int )pdsk_max) {
#line 1118
    ns.ldv_38794.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1120
  if ((unsigned int )ns.ldv_38794.pdsk < (unsigned int )pdsk_min) {
#line 1121
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1122
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 1123
    ns.ldv_38794.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1126
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38794.conn <= 9) && (int )ns.ldv_38794.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38794.conn > 9) || (int )os.ldv_38794.pdsk <= 5)) {
#line 1129
    ns.ldv_38794.susp_fen = 1U;
  } else {

  }
#line 1131
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38794.disk <= 7) && (int )ns.ldv_38794.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38794.disk > 7) || (int )os.ldv_38794.pdsk > 7)) {
#line 1134
    ns.ldv_38794.susp_nod = 1U;
  } else {

  }
#line 1136
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1137
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1138
      ns.ldv_38794.conn = 20U;
    } else {

    }
#line 1139
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1140
      ns.ldv_38794.conn = 21U;
    } else {

    }
  } else {
#line 1142
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1143
      ns.ldv_38794.conn = 16U;
    } else {

    }
#line 1144
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1145
      ns.ldv_38794.conn = 17U;
    } else {

    }
  }
#line 1148
  return (ns);
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1154
  if (mdev->agreed_pro_version <= 89) {
#line 1155
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1156
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1157
  mdev->ov_position = 0UL;
#line 1158
  if ((unsigned int )cs == 19U) {
#line 1164
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1166
    bit = mdev->ov_start_sector >> 3;
#line 1167
    if (mdev->rs_total <= bit) {
#line 1168
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1170
      mdev->rs_total = 1UL;
    } else {
#line 1172
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1173
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1175
  mdev->ov_left = mdev->rs_total;
#line 1176
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1180
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1180
  if (tmp != 0) {
#line 1181
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1182
  return;
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1198
  rv = 1;
#line 1202
  os = mdev->state;
#line 1204
  ns = sanitize_state(mdev, os, ns, & ssw);
#line 1206
  if (ns.i == os.i) {
#line 1207
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1209
  if (((unsigned int )flags & 1U) == 0U) {
#line 1213
    rv = is_valid_state(mdev, ns);
#line 1214
    if ((int )rv <= 0) {
#line 1218
      tmp = is_valid_state(mdev, os);
#line 1218
      if ((int )tmp == (int )rv) {
#line 1219
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1221
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1224
  if ((int )rv <= 0) {
#line 1225
    if (((unsigned int )flags & 2U) != 0U) {
#line 1226
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1227
    return (rv);
  } else {

  }
#line 1230
  print_sanitize_warnings(mdev, ssw);
#line 1234
  pbp = (char *)(& pb);
#line 1235
  *pbp = 0;
#line 1236
  if ((int )ns.ldv_38794.role != (int )os.ldv_38794.role) {
#line 1237
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_38794.role);
#line 1237
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_38794.role);
#line 1237
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1237
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1240
  if ((int )ns.ldv_38794.peer != (int )os.ldv_38794.peer) {
#line 1241
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38794.peer);
#line 1241
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_38794.peer);
#line 1241
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1241
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1244
  if ((int )ns.ldv_38794.conn != (int )os.ldv_38794.conn) {
#line 1245
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_38794.conn);
#line 1245
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_38794.conn);
#line 1245
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1245
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1248
  if ((int )ns.ldv_38794.disk != (int )os.ldv_38794.disk) {
#line 1249
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38794.disk);
#line 1249
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_38794.disk);
#line 1249
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1249
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1252
  if ((int )ns.ldv_38794.pdsk != (int )os.ldv_38794.pdsk) {
#line 1253
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38794.pdsk);
#line 1253
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_38794.pdsk);
#line 1253
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1253
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1256
  tmp___18 = is_susp(ns);
#line 1256
  tmp___19 = is_susp(os);
#line 1256
  if (tmp___18 != tmp___19) {
#line 1257
    tmp___15 = is_susp(ns);
#line 1257
    tmp___16 = is_susp(os);
#line 1257
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1257
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1260
  if ((int )ns.ldv_38794.aftr_isp != (int )os.ldv_38794.aftr_isp) {
#line 1261
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_38794.aftr_isp,
                       (int )ns.ldv_38794.aftr_isp);
#line 1261
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1264
  if ((int )ns.ldv_38794.peer_isp != (int )os.ldv_38794.peer_isp) {
#line 1265
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_38794.peer_isp,
                       (int )ns.ldv_38794.peer_isp);
#line 1265
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1268
  if ((int )ns.ldv_38794.user_isp != (int )os.ldv_38794.user_isp) {
#line 1269
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_38794.user_isp,
                       (int )ns.ldv_38794.user_isp);
#line 1269
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1272
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1283
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1283
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1283
    if (tmp___23 == 0) {
#line 1287
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1293
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1295
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1297
  mdev->state = ns;
#line 1299
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38794.disk > 2) {
#line 1300
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1302
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1303
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1306
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_38794.conn <= 9) {
#line 1308
    tmp___24 = drbd_bm_bits(mdev);
#line 1308
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1310
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1314
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1316
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1317
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1319
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1320
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1323
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1325
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1326
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1329
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1331
    now = jiffies;
#line 1334
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_38794.conn);
#line 1335
    mdev->rs_start = now;
#line 1336
    mdev->rs_last_events = 0;
#line 1337
    mdev->rs_last_sect_ev = 0;
#line 1338
    mdev->ov_last_oos_size = 0UL;
#line 1339
    mdev->ov_last_oos_start = 0UL;
#line 1341
    i = 0;
#line 1341
    goto ldv_50564;
    ldv_50563: 
#line 1342
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1343
    mdev->rs_mark_time[i] = now;
#line 1341
    i = i + 1;
    ldv_50564: ;
#line 1341
    if (i <= 7) {
#line 1342
      goto ldv_50563;
    } else {

    }
#line 1346
    drbd_rs_controller_reset(mdev);
#line 1348
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1349
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1351
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1355
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1355
  if (tmp___26 != 0) {
#line 1356
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1360
    tmp___25 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1360
    if (tmp___25 != 0) {
#line 1361
      mdf = mdf | 64U;
    } else {

    }
#line 1362
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_38794.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1364
      mdf = mdf | 2U;
    } else {

    }
#line 1365
    if ((int )mdev->state.ldv_38794.conn > 9) {
#line 1366
      mdf = mdf | 4U;
    } else {

    }
#line 1367
    if ((int )mdev->state.ldv_38794.disk > 4) {
#line 1368
      mdf = mdf | 1U;
    } else {

    }
#line 1369
    if ((int )mdev->state.ldv_38794.disk > 5) {
#line 1370
      mdf = mdf | 16U;
    } else {

    }
#line 1371
    if ((int )mdev->state.ldv_38794.pdsk <= 5 && (int )mdev->state.ldv_38794.pdsk > 3) {
#line 1372
      mdf = mdf | 32U;
    } else {

    }
#line 1373
    if ((mdev->ldev)->md.flags != mdf) {
#line 1374
      (mdev->ldev)->md.flags = mdf;
#line 1375
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1377
    if ((int )os.ldv_38794.disk <= 6 && (int )ns.ldv_38794.disk > 6) {
#line 1378
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1379
    put_ldev(mdev);
  } else {

  }
#line 1383
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1385
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1388
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1389
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1392
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1393
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1396
  if (((int )os.ldv_38794.conn > 8 && (int )ns.ldv_38794.conn <= 7) && (int )ns.ldv_38794.conn > 2) {
#line 1398
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1401
  if ((int )os.ldv_38794.conn <= 9 && (int )ns.ldv_38794.conn > 9) {
#line 1402
    drbd_resume_al(mdev);
  } else {

  }
#line 1407
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 1408
    mdev->last_reconnect_jif = jiffies;
  } else {

  }
#line 1409
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_38794.disk > 3) {
#line 1411
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1413
  tmp___27 = kmalloc(48UL, 32U);
#line 1413
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1414
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1415
    ascw->os = os;
#line 1416
    ascw->ns = ns;
#line 1417
    ascw->flags = flags;
#line 1418
    ascw->w.cb = & w_after_state_ch;
#line 1419
    ascw->done = done;
#line 1420
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1422
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1425
  return (rv);
}
}
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1431
  __mptr = (struct drbd_work  const  *)w;
#line 1431
  ascw = (struct after_state_chg_work *)__mptr;
#line 1432
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1433
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1434
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1434
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1434);
    } else {

    }
#line 1435
    complete(ascw->done);
  } else {

  }
#line 1437
  kfree((void const   *)ascw);
#line 1439
  return (1);
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1444
  if (rv != 0) {
#line 1445
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1446
    val.i = 0U;
#line 1446
    val.ldv_38794.conn = 10U;
#line 1446
    mask.i = 0U;
#line 1446
    mask.ldv_38794.conn = 31U;
#line 1446
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1447
    return;
  } else {

  }
#line 1450
  switch ((int )mdev->state.ldv_38794.conn) {
  case 12: 
#line 1452
  val___0.i = 0U;
#line 1452
  val___0.ldv_38794.conn = 15U;
#line 1452
  mask___0.i = 0U;
#line 1452
  mask___0.ldv_38794.conn = 31U;
#line 1452
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1453
  goto ldv_50588;
  case 11: 
#line 1455
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1456
  goto ldv_50588;
  }
  ldv_50588: ;
#line 1459
  return;
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1466
  tmp = get_current();
#line 1466
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1466);
  } else {

  }
#line 1469
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 1471
  drbd_bm_lock(mdev, why, flags);
#line 1472
  rv = (*io_fn)(mdev);
#line 1473
  drbd_bm_unlock(mdev);
#line 1475
  drbd_resume_io(mdev);
#line 1477
  return (rv);
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1491
  what = nothing;
#line 1492
  nsm.i = 4294967295U;
#line 1494
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1495
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1496
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1497
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1500
  fp = FP_DONT_CARE;
#line 1501
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1501
  if (tmp != 0) {
#line 1502
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1503
    put_ldev(mdev);
  } else {

  }
#line 1507
  drbd_bcast_state(mdev, ns);
#line 1509
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38794.disk > 7) || (int )os.ldv_38794.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38794.disk <= 7) && (int )ns.ldv_38794.pdsk <= 7)) {
#line 1511
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1516
  if ((int )os.ldv_38794.disk <= 3 && (int )ns.ldv_38794.disk > 3) {
#line 1517
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
  } else {

  }
#line 1519
  nsm.i = 4294967295U;
#line 1520
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1521
    if ((int )os.ldv_38794.conn <= 9 && (int )ns.ldv_38794.conn > 9) {
#line 1522
      what = resend;
    } else {

    }
#line 1524
    if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_38794.disk > 3) {
#line 1526
      what = restart_frozen_disk_io;
    } else {

    }
#line 1528
    if ((unsigned int )what != 27U) {
#line 1529
      nsm.ldv_38794.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1532
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1534
    if ((int )os.ldv_38794.pdsk > 5 && (int )ns.ldv_38794.pdsk <= 5) {
#line 1535
      tl_clear(mdev);
#line 1536
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1536
      if (tmp___0 != 0) {
#line 1537
        drbd_uuid_new_current(mdev);
#line 1538
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1540
      spin_lock_irq(& mdev->req_lock);
#line 1541
      __ns.i = mdev->state.i;
#line 1541
      __ns.ldv_38794.susp_fen = 0U;
#line 1541
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1542
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1545
    if ((int )os.ldv_38794.conn <= 9 && (int )ns.ldv_38794.conn > 9) {
#line 1546
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1547
      what = resend;
#line 1548
      nsm.ldv_38794.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1552
  if ((unsigned int )what != 27U) {
#line 1553
    spin_lock_irq(& mdev->req_lock);
#line 1554
    _tl_restart(mdev, what);
#line 1555
    nsm.i = nsm.i & mdev->state.i;
#line 1556
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1557
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1564
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1564
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1564
    if (tmp___1 != 0) {
#line 1567
      drbd_gen_and_send_sync_uuid(mdev);
#line 1568
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1572
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_38794.pdsk > 0) {
#line 1573
    drbd_send_uuids(mdev);
#line 1574
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1579
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1581
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1586
  if ((((int )os.ldv_38794.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_38794.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1592
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1592
    if (tmp___3 != 0) {
#line 1593
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38794.disk > 7) {
#line 1595
        tmp___2 = is_susp(mdev->state);
#line 1595
        if (tmp___2 != 0) {
#line 1596
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1598
          drbd_uuid_new_current(mdev);
#line 1599
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1602
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1606
  if ((int )ns.ldv_38794.pdsk <= 3) {
#line 1606
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1606
    if (tmp___4 != 0) {
#line 1607
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38794.disk > 7) {
#line 1609
        drbd_uuid_new_current(mdev);
#line 1610
        drbd_send_uuids(mdev);
      } else {

      }
#line 1613
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1617
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1619
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1625
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_38794.conn <= 10) {
#line 1625
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1625
    if (tmp___5 != 0) {
#line 1629
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1631
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1635
  if (((int )ns.ldv_38794.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1637
    drbd_send_sizes(mdev, 0, 0);
#line 1638
    drbd_send_uuids(mdev);
#line 1639
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1643
  if ((int )ns.ldv_38794.conn > 9 && ((int )os.ldv_38794.aftr_isp != (int )ns.ldv_38794.aftr_isp || (int )os.ldv_38794.user_isp != (int )ns.ldv_38794.user_isp)) {
#line 1646
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1649
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1651
    suspend_other_sg(mdev);
  } else {

  }
#line 1655
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_38794.conn > 9) {
#line 1656
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1658
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1659
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1662
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1665
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1670
  if ((((int )os.ldv_38794.conn <= 9 && (int )ns.ldv_38794.conn <= 9) && (int )os.ldv_38794.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1673
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1678
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1679
    eh = EP_PASS_ON;
#line 1680
    was_io_error = 0;
#line 1685
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1686
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1687
      was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1691
      tl_abort_disk_io(mdev);
#line 1696
      if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1697
        tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.disk);
#line 1697
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___6);
      } else {

      }
#line 1701
      if ((int )ns.ldv_38794.conn > 9) {
#line 1702
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1704
      drbd_rs_cancel_all(mdev);
#line 1709
      drbd_md_sync(mdev);
    } else {

    }
#line 1711
    put_ldev(mdev);
#line 1713
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1714
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1720
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1723
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1724
      tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38794.disk);
#line 1724
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___7);
    } else {

    }
#line 1728
    mdev->rs_total = 0UL;
#line 1729
    mdev->rs_failed = 0UL;
#line 1730
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1732
    if ((int )ns.ldv_38794.conn > 9) {
#line 1733
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1737
    put_ldev(mdev);
  } else {

  }
#line 1741
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_38794.conn > 9) {
#line 1742
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1745
  if ((int )ns.ldv_38794.disk > 3 && (int )ns.ldv_38794.pdsk > 3) {
#line 1745
    tmp___8 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1745
    if (tmp___8 != 0) {
#line 1747
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1748
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1752
  if ((((int )os.ldv_38794.conn > 10 && (int )ns.ldv_38794.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1755
    resume_next_sg(mdev);
  } else {

  }
#line 1759
  if (((int )os.ldv_38794.disk <= 7 && (int )os.ldv_38794.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1760
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1763
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1764
    clear_bit(30, (unsigned long volatile   *)(& mdev->flags));
#line 1765
    __wake_up(& mdev->state_wait, 3U, 1, 0);
  } else {

  }
#line 1775
  if ((int )os.ldv_38794.conn > 10 && (int )ns.ldv_38794.conn <= 10) {
#line 1775
    tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1775
    if (tmp___9 != 0) {
#line 1776
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1778
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1782
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1782
    tmp___10 = is_susp(ns);
#line 1782
    if (tmp___10 == 0) {
#line 1782
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1783
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1786
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1787
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1791
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1794
    if ((int )os.ldv_38794.aftr_isp != (int )ns.ldv_38794.aftr_isp) {
#line 1795
      resume_next_sg(mdev);
    } else {

    }
#line 1797
    tmp___11 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1797
    if (tmp___11 != 0) {
#line 1798
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1801
  drbd_md_sync(mdev);
#line 1802
  return;
}
}
#line 1805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1807
  thi = (struct drbd_thread *)arg;
#line 1808
  mdev = thi->mdev;
  restart: 
#line 1813
  retval = (*(thi->function))(thi);
#line 1815
  tmp = spinlock_check(& thi->t_lock);
#line 1815
  flags = _raw_spin_lock_irqsave(tmp);
#line 1827
  if ((unsigned int )thi->t_state == 3U) {
#line 1828
    tmp___0 = get_current();
#line 1828
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1829
    thi->t_state = Running;
#line 1830
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1831
    goto restart;
  } else {

  }
#line 1834
  thi->task = 0;
#line 1835
  thi->t_state = None;
#line 1836
  __asm__  volatile   ("mfence": : : "memory");
#line 1837
  complete(& thi->stop);
#line 1838
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1840
  tmp___1 = get_current();
#line 1840
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1843
  module_put(& __this_module);
#line 1844
  return (retval);
}
}
#line 1847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1850
  spinlock_check(& thi->t_lock);
#line 1850
  __raw_spin_lock_init(& thi->t_lock.ldv_5989.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1851
  thi->task = 0;
#line 1852
  thi->t_state = None;
#line 1853
  thi->function = func;
#line 1854
  thi->mdev = mdev;
#line 1855
  return;
}
}
#line 1857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 1859
  mdev = thi->mdev;
#line 1863
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1870
  tmp = spinlock_check(& thi->t_lock);
#line 1870
  flags = _raw_spin_lock_irqsave(tmp);
#line 1872
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1874
  tmp___0 = get_current();
#line 1874
  tmp___1 = get_current();
#line 1874
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1878
  tmp___2 = try_module_get(& __this_module);
#line 1878
  if (tmp___2) {
#line 1878
    tmp___3 = 0;
  } else {
#line 1878
    tmp___3 = 1;
  }
#line 1878
  if (tmp___3) {
#line 1879
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1880
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1881
    return (0);
  } else {

  }
#line 1884
  init_completion(& thi->stop);
#line 1885
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1885
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1885);
  } else {

  }
#line 1886
  thi->reset_cpu_mask = 1;
#line 1887
  thi->t_state = Running;
#line 1888
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1889
  tmp___4 = get_current();
#line 1889
  flush_signals(tmp___4);
#line 1891
  tmp___5 = mdev_to_minor(mdev);
#line 1891
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___5,
                              me);
#line 1894
  tmp___6 = IS_ERR((void const   *)nt);
#line 1894
  if (tmp___6 != 0L) {
#line 1895
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1897
    module_put(& __this_module);
#line 1898
    return (0);
  } else {

  }
#line 1900
  tmp___7 = spinlock_check(& thi->t_lock);
#line 1900
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1901
  thi->task = nt;
#line 1902
  thi->t_state = Running;
#line 1903
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1904
  wake_up_process(nt);
#line 1905
  goto ldv_50644;
  case 2U: 
#line 1907
  thi->t_state = Restarting;
#line 1908
  tmp___8 = get_current();
#line 1908
  tmp___9 = get_current();
#line 1908
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___9->comm), tmp___8->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1914
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1915
  goto ldv_50644;
  }
  ldv_50644: ;
#line 1918
  return (1);
}
}
#line 1922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1926
  ns = restart != 0 ? Restarting : Exiting;
#line 1929
  tmp = spinlock_check(& thi->t_lock);
#line 1929
  flags = _raw_spin_lock_irqsave(tmp);
#line 1931
  if ((unsigned int )thi->t_state == 0U) {
#line 1932
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1933
    if (restart != 0) {
#line 1934
      drbd_thread_start(thi);
    } else {

    }
#line 1935
    return;
  } else {

  }
#line 1938
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1939
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1940
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1941
      return;
    } else {

    }
#line 1944
    thi->t_state = ns;
#line 1945
    __asm__  volatile   ("mfence": : : "memory");
#line 1946
    init_completion(& thi->stop);
#line 1947
    tmp___0 = get_current();
#line 1947
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1948
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1952
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1954
  if (wait != 0) {
#line 1955
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1956
  return;
}
}
#line 1966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1971
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1971
  if (tmp != 0U) {
#line 1972
    return;
  } else {

  }
#line 1974
  tmp___0 = mdev_to_minor(mdev);
#line 1974
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1974
  ord = (int )(tmp___0 % tmp___1);
#line 1975
  cpu = -1;
#line 1975
  goto ldv_50665;
  ldv_50664: 
#line 1976
  tmp___2 = ord;
#line 1976
  ord = ord - 1;
#line 1976
  if (tmp___2 == 0) {
#line 1977
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1978
    return;
  } else {

  }
  ldv_50665: 
#line 1975
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1975
  cpu = (int )tmp___3;
#line 1975
  if (cpu < nr_cpu_ids) {
#line 1976
    goto ldv_50664;
  } else {

  }
#line 1982
  cpumask_setall(mdev->cpu_mask);
#line 1983
  return;
}
}
#line 1992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1994
  tmp = get_current();
#line 1994
  p = tmp;
#line 1995
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 2000
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 2000
  if (_b != 0) {
#line 2000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2000);
  } else {

  }
#line 2000
  if (_b != 0) {
#line 2001
    return;
  } else {

  }
#line 2002
  if (thi->reset_cpu_mask == 0) {
#line 2003
    return;
  } else {

  }
#line 2004
  thi->reset_cpu_mask = 0;
#line 2005
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 2006
  return;
}
}
#line 2010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 2016
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 2016
  if (_b != 0) {
#line 2016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2016);
  } else {

  }
#line 2016
  if (_b != 0) {
#line 2016
    return (0);
  } else {

  }
#line 2017
  _b___0 = size == 0UL;
#line 2017
  if (_b___0 != 0) {
#line 2017
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2017);
  } else {

  }
#line 2017
  if (_b___0 != 0) {
#line 2017
    return (0);
  } else {

  }
#line 2019
  h->magic = 1728214147U;
#line 2020
  tmp = __fswab16((int )((__u16 )cmd));
#line 2020
  h->command = tmp;
#line 2021
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 2021
  h->length = tmp___0;
#line 2023
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 2025
  ok = (size_t )sent == size;
#line 2026
  if (ok == 0) {
#line 2026
    tmp___2 = get_current();
#line 2026
    tmp___3 = signal_pending(tmp___2);
#line 2026
    if (tmp___3 == 0) {
#line 2027
      tmp___1 = cmdname(cmd);
#line 2027
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 2029
  return (ok);
}
}
#line 2035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 2038
  ok = 0;
#line 2041
  if (use_data_socket != 0) {
#line 2042
    ldv_mutex_lock_131(& mdev->data.mutex);
#line 2043
    sock = mdev->data.socket;
  } else {
#line 2045
    ldv_mutex_lock_132(& mdev->meta.mutex);
#line 2046
    sock = mdev->meta.socket;
  }
#line 2051
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 2051
  if (tmp != 0L) {
#line 2052
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 2054
  if (use_data_socket != 0) {
#line 2055
    ldv_mutex_unlock_133(& mdev->data.mutex);
  } else {
#line 2057
    ldv_mutex_unlock_134(& mdev->meta.mutex);
  }
#line 2058
  return (ok);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2067
  h.magic = 1728214147U;
#line 2068
  tmp = __fswab16((int )((__u16 )cmd));
#line 2068
  h.command = tmp;
#line 2069
  tmp___0 = __fswab16((int )((__u16 )size));
#line 2069
  h.length = tmp___0;
#line 2071
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 2071
  if (tmp___1 == 0) {
#line 2072
    return (0);
  } else {

  }
#line 2074
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 2074
  ok = tmp___2 == 8;
#line 2076
  if (ok != 0) {
#line 2076
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 2076
    if ((size_t )tmp___3 == size) {
#line 2076
      tmp___4 = 1;
    } else {
#line 2076
      tmp___4 = 0;
    }
  } else {
#line 2076
    tmp___4 = 0;
  }
#line 2076
  ok = tmp___4;
#line 2079
  drbd_put_data_sock___0(mdev);
#line 2081
  return (ok);
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 2089
  apv = mdev->agreed_pro_version;
#line 2091
  if (apv > 87) {
#line 2091
    if (apv == 88) {
#line 2091
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 2091
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 2091
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 2091
    size = tmp___0;
  } else {
#line 2091
    size = 12;
  }
#line 2100
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 2101
  sock = mdev->data.socket;
#line 2103
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2103
  if (tmp___6 != 0L) {
#line 2104
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 2106
    p = & mdev->data.sbuf.rs_param_95;
#line 2109
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2111
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2111
    p->rate = tmp___1;
#line 2112
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2112
    p->c_plan_ahead = tmp___2;
#line 2113
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2113
    p->c_delay_target = tmp___3;
#line 2114
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2114
    p->c_fill_target = tmp___4;
#line 2115
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2115
    p->c_max_rate = tmp___5;
#line 2117
    if (apv > 87) {
#line 2118
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2119
    if (apv > 88) {
#line 2120
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2122
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2124
    rv = 0;
  }
#line 2126
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 2128
  return (rv);
}
}
#line 2131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2136
  size = 32;
#line 2138
  if (mdev->agreed_pro_version > 86) {
#line 2139
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2139
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2143
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2143
  p = (struct p_protocol *)tmp___0;
#line 2144
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2145
    return (0);
  } else {

  }
#line 2147
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2147
  p->protocol = tmp___1;
#line 2148
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2148
  p->after_sb_0p = tmp___2;
#line 2149
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2149
  p->after_sb_1p = tmp___3;
#line 2150
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2150
  p->after_sb_2p = tmp___4;
#line 2151
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2151
  p->two_primaries = tmp___5;
#line 2153
  cf = 0;
#line 2154
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2155
    cf = cf | 1;
  } else {

  }
#line 2156
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2157
    if (mdev->agreed_pro_version > 91) {
#line 2158
      cf = cf | 2;
    } else {
#line 2160
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2161
      kfree((void const   *)p);
#line 2162
      return (-1);
    }
  } else {

  }
#line 2165
  tmp___6 = __fswab32((__u32 )cf);
#line 2165
  p->conn_flags = tmp___6;
#line 2167
  if (mdev->agreed_pro_version > 86) {
#line 2168
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2170
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2172
  kfree((void const   *)p);
#line 2173
  return (rv);
}
}
#line 2176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2181
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2181
  if (tmp == 0) {
#line 2182
    return (1);
  } else {

  }
#line 2184
  i = 0;
#line 2184
  goto ldv_50731;
  ldv_50730: ;
#line 2185
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2185
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2185
    p.uuid[i] = tmp___0;
  } else {
#line 2185
    p.uuid[i] = 0ULL;
  }
#line 2184
  i = i + 1;
  ldv_50731: ;
#line 2184
  if (i <= 3) {
#line 2185
    goto ldv_50730;
  } else {

  }
#line 2187
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2188
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2188
  p.uuid[4] = tmp___1;
#line 2189
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2190
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2190
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2191
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2192
  tmp___3 = __fswab64(uuid_flags);
#line 2192
  p.uuid[5] = tmp___3;
#line 2194
  put_ldev(mdev);
#line 2196
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2196
  return (tmp___4);
}
}
#line 2200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2202
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2202
  return (tmp);
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2207
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2207
  return (tmp);
}
}
#line 2210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2212
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2212
  if (tmp != 0) {
#line 2213
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2214
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2220
    put_ldev(mdev);
  } else {
#line 2222
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2223
  return;
}
}
#line 2228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2233
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2233
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2233);
  } else {

  }
#line 2235
  uuid = (mdev->ldev)->md.uuid[1];
#line 2236
  if (uuid != 0ULL && uuid != 4ULL) {
#line 2237
    uuid = uuid + 281474976710656ULL;
  } else {
#line 2239
    get_random_bytes((void *)(& uuid), 8);
  }
#line 2240
  drbd_uuid_set(mdev, 1, uuid);
#line 2241
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2242
  drbd_md_sync(mdev);
#line 2243
  tmp = __fswab64(uuid);
#line 2243
  p.uuid = tmp;
#line 2245
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2245
  return (tmp___0);
}
}
#line 2249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  int __min1___0 ;
  int __min2___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2256
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2256
  if (tmp___0 != 0) {
#line 2257
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2257
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2257);
    } else {

    }
#line 2258
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2259
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2260
    q_order_type = drbd_queue_order_type(mdev);
#line 2261
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2261
    max_bio_size = (int )(tmp << 9);
#line 2262
    __min1 = max_bio_size;
#line 2262
    __min2 = 131072;
#line 2262
    max_bio_size = __min1 < __min2 ? __min1 : __min2;
#line 2263
    put_ldev(mdev);
  } else {
#line 2265
    d_size = 0UL;
#line 2266
    u_size = 0UL;
#line 2267
    q_order_type = 0;
#line 2268
    max_bio_size = 131072;
  }
#line 2272
  if (mdev->agreed_pro_version <= 94) {
#line 2273
    __min1___0 = max_bio_size;
#line 2273
    __min2___0 = 32768;
#line 2273
    max_bio_size = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
  } else {

  }
#line 2275
  tmp___1 = __fswab64((__u64 )d_size);
#line 2275
  p.d_size = tmp___1;
#line 2276
  tmp___2 = __fswab64((__u64 )u_size);
#line 2276
  p.u_size = tmp___2;
#line 2277
  if (trigger_reply == 0) {
#line 2277
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2277
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2277
    tmp___4 = 0ULL;
  }
#line 2277
  tmp___5 = __fswab64(tmp___4);
#line 2277
  p.c_size = tmp___5;
#line 2278
  tmp___6 = __fswab32((__u32 )max_bio_size);
#line 2278
  p.max_bio_size = tmp___6;
#line 2279
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2279
  p.queue_order_type = tmp___7;
#line 2280
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2280
  p.dds_flags = tmp___8;
#line 2282
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2284
  return (ok);
}
}
#line 2291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2295
  ok = 0;
#line 2299
  drbd_state_lock___0(mdev);
#line 2301
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2303
  tmp = __fswab32(mdev->state.i);
#line 2303
  p.state = tmp;
#line 2304
  sock = mdev->data.socket;
#line 2306
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2306
  if (tmp___0 != 0L) {
#line 2307
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2311
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2313
  drbd_state_unlock(mdev);
#line 2314
  return (ok);
}
}
#line 2327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2331
  ok = 0;
#line 2333
  ldv_mutex_lock_139(& mdev->data.mutex);
#line 2335
  tmp = __fswab32(state.i);
#line 2335
  p.state = tmp;
#line 2336
  sock = mdev->data.socket;
#line 2338
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2338
  if (tmp___0 != 0L) {
#line 2339
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2343
  ldv_mutex_unlock_140(& mdev->data.mutex);
#line 2345
  return (ok);
}
}
#line 2348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2353
  tmp = __fswab32(mask.i);
#line 2353
  p.mask = tmp;
#line 2354
  tmp___0 = __fswab32(val.i);
#line 2354
  p.val = tmp___0;
#line 2356
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2356
  return (tmp___1);
}
}
#line 2360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2364
  tmp = __fswab32((__u32 )retcode);
#line 2364
  p.retcode = tmp;
#line 2366
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2366
  return (tmp___0);
}
}
#line 2370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2383
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2385
    return (0);
  } else {

  }
#line 2387
  if (c->bit_offset >= c->bm_bits) {
#line 2388
    return (0);
  } else {

  }
#line 2391
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2392
  memset((void *)(& p->code), 0, 4087UL);
#line 2394
  plain_bits = 0UL;
#line 2399
  toggle = 2U;
  ldv_50804: ;
#line 2404
  if (toggle == 0U) {
#line 2404
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2404
    tmp = tmp___0;
  } else {
#line 2404
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2404
    tmp = tmp___1;
  }
#line 2406
  if (tmp == 0xffffffffffffffffUL) {
#line 2407
    tmp = c->bm_bits;
  } else {

  }
#line 2408
  rl = tmp - c->bit_offset;
#line 2410
  if (toggle == 2U) {
#line 2411
    if (rl == 0UL) {
#line 2414
      DCBP_set_start(p, 1);
#line 2416
      toggle = toggle == 0U;
#line 2417
      goto ldv_50802;
    } else {

    }
#line 2419
    DCBP_set_start(p, 0);
  } else {

  }
#line 2424
  if (rl == 0UL) {
#line 2425
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2427
    return (-1);
  } else {

  }
#line 2430
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2431
  if (bits == -105) {
#line 2432
    goto ldv_50803;
  } else {

  }
#line 2433
  if (bits <= 0) {
#line 2434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2435
    return (0);
  } else {

  }
#line 2438
  toggle = toggle == 0U;
#line 2439
  plain_bits = plain_bits + rl;
#line 2440
  c->bit_offset = tmp;
  ldv_50802: ;
#line 2441
  if (c->bit_offset < c->bm_bits) {
#line 2442
    goto ldv_50804;
  } else {

  }
  ldv_50803: 
#line 2443
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2445
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2448
    c->bit_offset = c->bit_offset - plain_bits;
#line 2449
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2450
    c->bit_offset = c->word_offset * 64UL;
#line 2451
    return (0);
  } else {

  }
#line 2456
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2459
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2461
  return ((int )len);
}
}
#line 2471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2474
  p = (struct p_compressed_bm *)h;
#line 2479
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2481
  if (len < 0) {
#line 2482
    return (-5);
  } else {

  }
#line 2484
  if (len != 0) {
#line 2485
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2486
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2489
    c->packets[0] = c->packets[0] + 1U;
#line 2490
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2492
    if (c->bit_offset >= c->bm_bits) {
#line 2493
      len = 0;
    } else {

    }
  } else {
#line 2497
    __min1 = 511UL;
#line 2497
    __min2 = c->bm_words - c->word_offset;
#line 2497
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2498
    len = (int )((unsigned int )num_words * 8U);
#line 2499
    if (len != 0) {
#line 2500
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2501
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2503
    c->word_offset = c->word_offset + num_words;
#line 2504
    c->bit_offset = c->word_offset * 64UL;
#line 2506
    c->packets[1] = c->packets[1] + 1U;
#line 2507
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2509
    if (c->bit_offset > c->bm_bits) {
#line 2510
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2512
  if (ok != 0) {
#line 2513
    if (len == 0) {
#line 2514
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2515
      return (0);
    } else {
#line 2517
      return (1);
    }
  } else {

  }
#line 2519
  return (-5);
}
}
#line 2523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2529
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2529
  if (_b != 0) {
#line 2529
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2529);
  } else {

  }
#line 2529
  if (_b != 0) {
#line 2529
    return (0);
  } else {

  }
#line 2533
  tmp = __get_free_pages(16U, 0U);
#line 2533
  p = (struct p_header80 *)tmp;
#line 2534
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2535
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2536
    return (0);
  } else {

  }
#line 2539
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2539
  if (tmp___2 != 0) {
#line 2540
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2540
    if (tmp___1 != 0) {
#line 2541
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2542
      drbd_bm_set_all(mdev);
#line 2543
      tmp___0 = drbd_bm_write(mdev);
#line 2543
      if (tmp___0 != 0) {
#line 2547
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2549
        drbd_md_clear_flag(mdev, 8);
#line 2550
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2553
    put_ldev(mdev);
  } else {

  }
#line 2556
  tmp___3 = drbd_bm_bits(mdev);
#line 2556
  tmp___4 = drbd_bm_words(mdev);
#line 2556
  __constr_expr_0.bm_bits = tmp___3;
#line 2556
  __constr_expr_0.bm_words = tmp___4;
#line 2556
  __constr_expr_0.bit_offset = 0UL;
#line 2556
  __constr_expr_0.word_offset = 0UL;
#line 2556
  __constr_expr_0.packets[0] = 0U;
#line 2556
  __constr_expr_0.packets[1] = 0U;
#line 2556
  __constr_expr_0.bytes[0] = 0U;
#line 2556
  __constr_expr_0.bytes[1] = 0U;
#line 2556
  c = __constr_expr_0;
  ldv_50827: 
#line 2562
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2563
  if (err > 0) {
#line 2564
    goto ldv_50827;
  } else {

  }
#line 2565
  free_pages((unsigned long )p, 0U);
#line 2566
  return (err == 0);
}
}
#line 2569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2573
  tmp = drbd_get_data_sock___0(mdev);
#line 2573
  if (tmp == 0) {
#line 2574
    return (-1);
  } else {

  }
#line 2575
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2575
  err = tmp___0 == 0;
#line 2576
  drbd_put_data_sock___0(mdev);
#line 2577
  return (err);
}
}
#line 2580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2585
  p.barrier = barrier_nr;
#line 2586
  tmp = __fswab32(set_size);
#line 2586
  p.set_size = tmp;
#line 2588
  if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 2589
    return (0);
  } else {

  }
#line 2590
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2592
  return (ok);
}
}
#line 2603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2611
  p.sector = sector;
#line 2612
  p.block_id = block_id;
#line 2613
  p.blksize = blksize;
#line 2614
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2614
  tmp___0 = __fswab32((__u32 )tmp);
#line 2614
  p.seq_num = tmp___0;
#line 2616
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_38794.conn <= 9) {
#line 2617
    return (0);
  } else {

  }
#line 2618
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2620
  return (ok);
}
}
#line 2626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2629
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2629
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2629
    tmp___0 = tmp;
  } else {
#line 2629
    tmp___0 = 0U;
  }
#line 2629
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2631
  tmp___1 = __fswab32((__u32 )data_size);
#line 2631
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2631
  return (tmp___2);
}
}
#line 2635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2638
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2638
  return (tmp);
}
}
#line 2647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2650
  tmp = __fswab32(e->size);
#line 2650
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2650
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_47571.block_id);
#line 2650
  return (tmp___1);
}
}
#line 2658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2661
  tmp = __fswab64(block_id);
#line 2661
  tmp___0 = __fswab32((__u32 )blksize);
#line 2661
  tmp___1 = __fswab64((__u64 )sector);
#line 2661
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2661
  return (tmp___2);
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2673
  tmp = __fswab64((__u64 )sector);
#line 2673
  p.sector = tmp;
#line 2674
  p.block_id = block_id;
#line 2675
  tmp___0 = __fswab32((__u32 )size);
#line 2675
  p.blksize = tmp___0;
#line 2677
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2679
  return (ok);
}
}
#line 2682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2690
  tmp = __fswab64((__u64 )sector);
#line 2690
  p.sector = tmp;
#line 2691
  p.block_id = 1728263026ULL;
#line 2692
  tmp___0 = __fswab32((__u32 )size);
#line 2692
  p.blksize = tmp___0;
#line 2694
  p.head.magic = 1728214147U;
#line 2695
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2695
  p.head.command = tmp___1;
#line 2696
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2696
  p.head.length = tmp___2;
#line 2698
  ldv_mutex_lock_141(& mdev->data.mutex);
#line 2700
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2700
  ok = tmp___3 == 32;
#line 2701
  if (ok != 0) {
#line 2701
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2701
    if (tmp___4 == digest_size) {
#line 2701
      tmp___5 = 1;
    } else {
#line 2701
      tmp___5 = 0;
    }
  } else {
#line 2701
    tmp___5 = 0;
  }
#line 2701
  ok = tmp___5;
#line 2703
  ldv_mutex_unlock_142(& mdev->data.mutex);
#line 2705
  return (ok);
}
}
#line 2708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2713
  tmp = __fswab64((__u64 )sector);
#line 2713
  p.sector = tmp;
#line 2714
  p.block_id = 1728261953ULL;
#line 2715
  tmp___0 = __fswab32((__u32 )size);
#line 2715
  p.blksize = tmp___0;
#line 2717
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2719
  return (ok);
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2731
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2731
    tmp___0 = 1;
  } else {
#line 2731
    tmp = get_t_state(& mdev->asender);
#line 2731
    if ((unsigned int )tmp != 1U) {
#line 2731
      tmp___0 = 1;
    } else
#line 2731
    if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 2731
      tmp___0 = 1;
    } else {
#line 2731
      tmp___0 = 0;
    }
  }
#line 2731
  drop_it = tmp___0;
#line 2736
  if (drop_it != 0) {
#line 2737
    return (1);
  } else {

  }
#line 2739
  mdev->ko_count = mdev->ko_count - 1U;
#line 2739
  drop_it = mdev->ko_count == 0U;
#line 2740
  if (drop_it == 0) {
#line 2741
    tmp___1 = get_current();
#line 2741
    tmp___2 = get_current();
#line 2741
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2743
    request_ping(mdev);
  } else {

  }
#line 2746
  return (drop_it);
}
}
#line 2770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2773
  tmp = kmap(page);
#line 2773
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2773
  sent = tmp___0;
#line 2774
  kunmap(page);
#line 2775
  if ((size_t )sent == size) {
#line 2776
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2777
  return ((size_t )sent == size);
}
}
#line 2780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2783
  tmp = current_thread_info___2();
#line 2783
  oldfs = tmp->addr_limit;
#line 2785
  len = (int )size;
#line 2793
  if ((int )disable_sendpage) {
#line 2794
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2794
    return (tmp___0);
  } else {
#line 2793
    tmp___1 = page_count(page);
#line 2793
    if (tmp___1 <= 0) {
#line 2794
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2794
      return (tmp___0);
    } else {
#line 2793
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2793
      if (tmp___2 != 0) {
#line 2794
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2794
        return (tmp___0);
      } else {

      }
    }
  }
#line 2796
  msg_flags = msg_flags | 16384U;
#line 2797
  drbd_update_congested(mdev);
#line 2798
  tmp___3 = current_thread_info___2();
#line 2798
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2798
  tmp___3->addr_limit = __constr_expr_0;
  ldv_50926: 
#line 2800
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2800
  sent = (int )tmp___4;
#line 2803
  if (sent == -11) {
#line 2804
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2804
    if (tmp___5 != 0) {
#line 2806
      goto ldv_50923;
    } else {
#line 2808
      goto ldv_50924;
    }
  } else {

  }
#line 2810
  if (sent <= 0) {
#line 2811
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2813
    goto ldv_50923;
  } else {

  }
#line 2815
  len = len - sent;
#line 2816
  offset = offset + sent;
  ldv_50924: ;
#line 2817
  if (len > 0) {
#line 2818
    goto ldv_50926;
  } else {

  }
  ldv_50923: 
#line 2818
  tmp___6 = current_thread_info___2();
#line 2818
  tmp___6->addr_limit = oldfs;
#line 2819
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2821
  ok = len == 0;
#line 2822
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2822
  if (tmp___7 != 0L) {
#line 2823
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2824
  return (ok);
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2832
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2832
  i = (int )bio->bi_idx;
#line 2832
  goto ldv_50934;
  ldv_50933: 
#line 2833
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2833
  if (tmp == 0) {
#line 2836
    return (0);
  } else {

  }
#line 2832
  bvec = bvec + 1;
#line 2832
  i = i + 1;
  ldv_50934: ;
#line 2832
  if ((int )bio->bi_vcnt > i) {
#line 2833
    goto ldv_50933;
  } else {

  }

#line 2838
  return (1);
}
}
#line 2841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2846
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2846
  i = (int )bio->bi_idx;
#line 2846
  goto ldv_50943;
  ldv_50942: 
#line 2847
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2847
  if (tmp == 0) {
#line 2850
    return (0);
  } else {

  }
#line 2846
  bvec = bvec + 1;
#line 2846
  i = i + 1;
  ldv_50943: ;
#line 2846
  if ((int )bio->bi_vcnt > i) {
#line 2847
    goto ldv_50942;
  } else {

  }

#line 2852
  return (1);
}
}
#line 2855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2857
  page = e->pages;
#line 2858
  len = e->size;
#line 2860
  goto ldv_50957;
  ldv_50956: 
#line 2861
  __min1 = len;
#line 2861
  __min2 = 4096U;
#line 2861
  l = __min1 < __min2 ? __min1 : __min2;
#line 2862
  tmp = page_chain_next(page);
#line 2862
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2862
  if (tmp___0 == 0) {
#line 2864
    return (0);
  } else {

  }
#line 2865
  len = len - l;
#line 2860
  page = page_chain_next(page);
  ldv_50957: ;
#line 2860
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2860
    tmp___1 = page_chain_next(page);
#line 2860
    __builtin_prefetch((void const   *)tmp___1);
#line 2860
    if (1 != 0) {
#line 2861
      goto ldv_50956;
    } else {
#line 2863
      goto ldv_50958;
    }
  } else {

  }
  ldv_50958: ;
#line 2867
  return (1);
}
}
#line 2870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2872
  if (mdev->agreed_pro_version > 94) {
#line 2873
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 1024UL) != 0UL ? 16 : 0)) | ((bi_rw & 2048UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2878
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2886
  ok = 1;
#line 2888
  dp_flags = 0U;
#line 2892
  tmp = drbd_get_data_sock___0(mdev);
#line 2892
  if (tmp == 0) {
#line 2893
    return (0);
  } else {

  }
#line 2895
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2895
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2895
    dgs = (int )tmp___0;
  } else {
#line 2895
    dgs = 0;
  }
#line 2898
  if (req->size <= 32768U) {
#line 2899
    p.head.h80.magic = 1728214147U;
#line 2900
    p.head.h80.command = 0U;
#line 2901
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2901
    p.head.h80.length = tmp___1;
  } else {
#line 2904
    p.head.h95.magic = 23171U;
#line 2905
    p.head.h95.command = 0U;
#line 2906
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2906
    p.head.h95.length = tmp___2;
  }
#line 2910
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2910
  p.sector = tmp___3;
#line 2911
  p.block_id = (u64 )req;
#line 2912
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2912
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2912
  p.seq_num = tmp___5;
#line 2914
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2916
  if ((int )mdev->state.ldv_38794.conn > 15 && (int )mdev->state.ldv_38794.conn <= 21) {
#line 2918
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2920
  tmp___6 = __fswab32(dp_flags);
#line 2920
  p.dp_flags = tmp___6;
#line 2921
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2922
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2922
  ok = tmp___7 == 32;
#line 2924
  if (ok != 0 && dgs != 0) {
#line 2925
    dgb = mdev->int_dig_out;
#line 2926
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2927
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2927
    ok = tmp___8 == dgs;
  } else {

  }
#line 2929
  if (ok != 0) {
#line 2941
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2942
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2944
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2947
    if (dgs > 0 && dgs <= 64) {
#line 2951
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2952
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2952
      if (tmp___9 != 0) {
#line 2953
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2962
  drbd_put_data_sock___0(mdev);
#line 2964
  return (ok);
}
}
#line 2971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2979
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2979
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2979
    dgs = (int )tmp;
  } else {
#line 2979
    dgs = 0;
  }
#line 2982
  if (e->size <= 32768U) {
#line 2983
    p.head.h80.magic = 1728214147U;
#line 2984
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2984
    p.head.h80.command = tmp___0;
#line 2985
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2985
    p.head.h80.length = tmp___1;
  } else {
#line 2988
    p.head.h95.magic = 23171U;
#line 2989
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2989
    p.head.h95.command = tmp___2;
#line 2990
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2990
    p.head.h95.length = tmp___3;
  }
#line 2994
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2994
  p.sector = tmp___4;
#line 2995
  p.block_id = e->ldv_47571.block_id;
#line 3002
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 3002
  if (tmp___5 == 0) {
#line 3003
    return (0);
  } else {

  }
#line 3005
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 3005
  ok = tmp___6 == 32;
#line 3006
  if (ok != 0 && dgs != 0) {
#line 3007
    dgb = mdev->int_dig_out;
#line 3008
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 3009
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 3009
    ok = tmp___7 == dgs;
  } else {

  }
#line 3011
  if (ok != 0) {
#line 3012
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 3014
  drbd_put_data_sock___0(mdev);
#line 3016
  return (ok);
}
}
#line 3019 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 3023
  tmp = __fswab64((__u64 )req->sector);
#line 3023
  p.sector = tmp;
#line 3024
  tmp___0 = __fswab32(req->size);
#line 3024
  p.blksize = tmp___0;
#line 3026
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 3026
  return (tmp___1);
}
}
#line 3045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 3050
  sent = 0;
#line 3052
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 3053
    return (-1000);
  } else {

  }
#line 3057
  iov.iov_base = buf;
#line 3058
  iov.iov_len = size;
#line 3060
  msg.msg_name = 0;
#line 3061
  msg.msg_namelen = 0;
#line 3062
  msg.msg_control = 0;
#line 3063
  msg.msg_controllen = 0UL;
#line 3064
  msg.msg_flags = msg_flags | 16384U;
#line 3066
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3067
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 3068
    drbd_update_congested(mdev);
  } else {

  }
  ldv_51000: 
#line 3080
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 3081
  if (rv == -11) {
#line 3082
    tmp = we_should_drop_the_connection(mdev, sock);
#line 3082
    if (tmp != 0) {
#line 3083
      goto ldv_50998;
    } else {
#line 3085
      goto ldv_50999;
    }
  } else {

  }
#line 3087
  if (rv == 0) {
#line 3087
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3087);
  } else {

  }
#line 3088
  if (rv == -4) {
#line 3089
    tmp___0 = get_current();
#line 3089
    flush_signals(tmp___0);
#line 3090
    rv = 0;
  } else {

  }
#line 3092
  if (rv < 0) {
#line 3093
    goto ldv_50998;
  } else {

  }
#line 3094
  sent = sent + rv;
#line 3095
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 3096
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_50999: ;
#line 3097
  if ((size_t )sent < size) {
#line 3098
    goto ldv_51000;
  } else {

  }
  ldv_50998: ;
#line 3099
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3100
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 3102
  if (rv <= 0) {
#line 3103
    if (rv != -11) {
#line 3104
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 3107
      val.i = 0U;
#line 3107
      val.ldv_38794.conn = 4U;
#line 3107
      mask.i = 0U;
#line 3107
      mask.ldv_38794.conn = 31U;
#line 3107
      drbd_force_state(mdev, mask, val);
    } else {
#line 3109
      val___0.i = 0U;
#line 3109
      val___0.ldv_38794.conn = 3U;
#line 3109
      mask___0.i = 0U;
#line 3109
      mask___0.ldv_38794.conn = 31U;
#line 3109
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 3112
  return (sent);
}
}
#line 3115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 3117
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 3119
  rv = 0;
#line 3121
  ldv_mutex_lock_143(& drbd_main_mutex);
#line 3122
  tmp = spinlock_check(& mdev->req_lock);
#line 3122
  flags = _raw_spin_lock_irqsave(tmp);
#line 3126
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 3127
    if ((mode & 2U) != 0U) {
#line 3128
      rv = -30;
    } else
#line 3129
    if (! allow_oos) {
#line 3130
      rv = -124;
    } else {

    }
  } else {

  }
#line 3133
  if (rv == 0) {
#line 3134
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 3135
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 3136
  ldv_mutex_unlock_144(& drbd_main_mutex);
#line 3138
  return (rv);
}
}
#line 3141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3143
  mdev = (struct drbd_conf *)gd->private_data;
#line 3144
  ldv_mutex_lock_145(& drbd_main_mutex);
#line 3145
  mdev->open_cnt = mdev->open_cnt - 1;
#line 3146
  ldv_mutex_unlock_146(& drbd_main_mutex);
#line 3147
  return (0);
}
}
#line 3150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3154
  __constr_expr_0.rate = 250;
#line 3154
  __constr_expr_0.after = -1;
#line 3154
  __constr_expr_0.al_extents = 127;
#line 3154
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3154
  __constr_expr_0.verify_alg_len = 0;
#line 3154
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3154
  __constr_expr_0.cpu_mask_len = 0;
#line 3154
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3154
  __constr_expr_0.csums_alg_len = 0;
#line 3154
  __constr_expr_0.use_rle = 0U;
#line 3154
  __constr_expr_0.on_no_data = 0;
#line 3154
  __constr_expr_0.c_plan_ahead = 0;
#line 3154
  __constr_expr_0.c_delay_target = 10;
#line 3154
  __constr_expr_0.c_fill_target = 0;
#line 3154
  __constr_expr_0.c_max_rate = 102400;
#line 3154
  __constr_expr_0.c_min_rate = 4096;
#line 3154
  mdev->sync_conf = __constr_expr_0;
#line 3172
  __constr_expr_1.ldv_38794.role = 2U;
#line 3172
  __constr_expr_1.ldv_38794.peer = 0U;
#line 3172
  __constr_expr_1.ldv_38794.conn = 0U;
#line 3172
  __constr_expr_1.ldv_38794.disk = 0U;
#line 3172
  __constr_expr_1.ldv_38794.pdsk = 6U;
#line 3172
  __constr_expr_1.ldv_38794.susp = 0U;
#line 3172
  __constr_expr_1.ldv_38794.aftr_isp = (unsigned char)0;
#line 3172
  __constr_expr_1.ldv_38794.peer_isp = (unsigned char)0;
#line 3172
  __constr_expr_1.ldv_38794.user_isp = (unsigned char)0;
#line 3172
  __constr_expr_1.ldv_38794.susp_nod = 0U;
#line 3172
  __constr_expr_1.ldv_38794.susp_fen = 0U;
#line 3172
  __constr_expr_1.ldv_38794._pad = (unsigned short)0;
#line 3172
  mdev->state = __constr_expr_1;
#line 3173
  return;
}
}
#line 3184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;

  {
#line 3189
  drbd_set_defaults(mdev);
#line 3191
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3192
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3193
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3194
  atomic_set(& mdev->unacked_cnt, 0);
#line 3195
  atomic_set(& mdev->local_cnt, 0);
#line 3196
  atomic_set(& mdev->net_cnt, 0);
#line 3197
  atomic_set(& mdev->packet_seq, 0);
#line 3198
  atomic_set(& mdev->pp_in_use, 0);
#line 3199
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3200
  atomic_set(& mdev->rs_sect_in, 0);
#line 3201
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3202
  atomic_set(& mdev->ap_in_flight, 0);
#line 3203
  atomic_set(& mdev->md_io_in_use, 0);
#line 3205
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key);
#line 3206
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___0);
#line 3207
  sema_init(& mdev->data.work.s, 0);
#line 3208
  sema_init(& mdev->meta.work.s, 0);
#line 3209
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___1);
#line 3211
  spinlock_check(& mdev->data.work.q_lock);
#line 3211
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5989.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___2);
#line 3212
  spinlock_check(& mdev->meta.work.q_lock);
#line 3212
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5989.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___3);
#line 3214
  spinlock_check(& mdev->al_lock);
#line 3214
  __raw_spin_lock_init(& mdev->al_lock.ldv_5989.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___4);
#line 3215
  spinlock_check(& mdev->req_lock);
#line 3215
  __raw_spin_lock_init(& mdev->req_lock.ldv_5989.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___5);
#line 3216
  spinlock_check(& mdev->peer_seq_lock);
#line 3216
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5989.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___6);
#line 3217
  spinlock_check(& mdev->epoch_lock);
#line 3217
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5989.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___7);
#line 3219
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3220
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3221
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3222
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3223
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3224
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3225
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3226
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3227
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3228
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3229
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3230
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3231
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3232
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3234
  mdev->resync_work.cb = & w_resync_timer;
#line 3235
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3236
  mdev->go_diskless.cb = & w_go_diskless;
#line 3237
  mdev->md_sync_work.cb = & w_md_sync;
#line 3238
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3239
  mdev->start_resync_work.cb = & w_start_resync;
#line 3240
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___8);
#line 3241
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___9);
#line 3242
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___10);
#line 3243
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___11);
#line 3244
  mdev->resync_timer.function = & resync_timer_fn;
#line 3245
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3246
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3247
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3248
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3249
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3250
  mdev->request_timer.function = & request_timer_fn;
#line 3251
  mdev->request_timer.data = (unsigned long )mdev;
#line 3253
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___12);
#line 3254
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___13);
#line 3255
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___14);
#line 3256
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___15);
#line 3257
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___16);
#line 3258
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___17);
#line 3260
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3261
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3262
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3264
  mdev->agreed_pro_version = 96;
#line 3265
  mdev->write_ordering = WO_bdev_flush;
#line 3266
  mdev->resync_wenr = 4294967295U;
#line 3267
  mdev->peer_max_bio_size = 4096;
#line 3268
  mdev->local_max_bio_size = 4096;
#line 3269
  return;
}
}
#line 3271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3274
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3279
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3279
  if (tmp___0 != 0) {
#line 3280
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3280
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3281
  tmp___9 = 0UL;
#line 3281
  mdev->rs_failed = tmp___9;
#line 3281
  tmp___8 = tmp___9;
#line 3281
  mdev->rs_total = tmp___8;
#line 3281
  tmp___7 = tmp___8;
#line 3281
  mdev->rs_start = tmp___7;
#line 3281
  tmp___6 = tmp___7;
#line 3281
  mdev->p_size = tmp___6;
#line 3281
  tmp___5 = (unsigned int )tmp___6;
#line 3281
  mdev->writ_cnt = tmp___5;
#line 3281
  tmp___4 = tmp___5;
#line 3281
  mdev->send_cnt = tmp___4;
#line 3281
  tmp___3 = tmp___4;
#line 3281
  mdev->recv_cnt = tmp___3;
#line 3281
  tmp___2 = tmp___3;
#line 3281
  mdev->read_cnt = tmp___2;
#line 3281
  tmp___1 = tmp___2;
#line 3281
  mdev->bm_writ_cnt = tmp___1;
#line 3281
  mdev->al_writ_cnt = tmp___1;
#line 3291
  mdev->rs_last_events = 0;
#line 3292
  mdev->rs_last_sect_ev = 0;
#line 3293
  i = 0;
#line 3293
  goto ldv_51056;
  ldv_51055: 
#line 3294
  mdev->rs_mark_left[i] = 0UL;
#line 3295
  mdev->rs_mark_time[i] = 0UL;
#line 3293
  i = i + 1;
  ldv_51056: ;
#line 3293
  if (i <= 7) {
#line 3294
    goto ldv_51055;
  } else {

  }

#line 3297
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3297);
  } else {

  }
#line 3299
  drbd_set_my_capacity(mdev, 0UL);
#line 3300
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3302
    drbd_bm_resize(mdev, 0UL, 1);
#line 3303
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3306
  drbd_free_resources(mdev);
#line 3307
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 3313
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3313
  if (tmp___10 == 0) {
#line 3313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3313);
  } else {

  }
#line 3314
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3314
  if (tmp___11 == 0) {
#line 3314
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3314);
  } else {

  }
#line 3315
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3315
  if (tmp___12 == 0) {
#line 3315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3315);
  } else {

  }
#line 3316
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3316
  if (tmp___13 == 0) {
#line 3316
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3316);
  } else {

  }
#line 3317
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3317
  if (tmp___14 == 0) {
#line 3317
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3317);
  } else {

  }
#line 3318
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3318
  if (tmp___15 == 0) {
#line 3318
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3318);
  } else {

  }
#line 3319
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3319
  if (tmp___16 == 0) {
#line 3319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3319);
  } else {

  }
#line 3320
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3320
  if (tmp___17 == 0) {
#line 3320
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3320);
  } else {

  }
#line 3321
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3321
  if (tmp___18 == 0) {
#line 3321
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3321);
  } else {

  }
#line 3322
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3322
  if (tmp___19 == 0) {
#line 3322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3322);
  } else {

  }
#line 3323
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3323
  if (tmp___20 == 0) {
#line 3323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3323);
  } else {

  }
#line 3325
  drbd_set_defaults(mdev);
#line 3326
  return;
}
}
#line 3329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3333
  goto ldv_51063;
  ldv_51062: 
#line 3334
  page = drbd_pp_pool;
#line 3335
  drbd_pp_pool = (struct page *)page->ldv_13511.private;
#line 3336
  __free_pages(page, 0U);
#line 3337
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_51063: ;
#line 3333
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3334
    goto ldv_51062;
  } else {

  }

#line 3342
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 3343
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 3344
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 3345
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 3346
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3347
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3348
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3349
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3350
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3351
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3352
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3353
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3354
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3355
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3356
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3357
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3359
  drbd_md_io_bio_set = 0;
#line 3360
  drbd_md_io_page_pool = 0;
#line 3361
  drbd_ee_mempool = 0;
#line 3362
  drbd_request_mempool = 0;
#line 3363
  drbd_ee_cache = 0;
#line 3364
  drbd_request_cache = 0;
#line 3365
  drbd_bm_ext_cache = 0;
#line 3366
  drbd_al_ext_cache = 0;
#line 3368
  return;
}
}
#line 3371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3374
  number = (int const   )(minor_count * 32U);
#line 3378
  drbd_request_mempool = 0;
#line 3379
  drbd_ee_cache = 0;
#line 3380
  drbd_request_cache = 0;
#line 3381
  drbd_bm_ext_cache = 0;
#line 3382
  drbd_al_ext_cache = 0;
#line 3383
  drbd_pp_pool = 0;
#line 3384
  drbd_md_io_page_pool = 0;
#line 3385
  drbd_md_io_bio_set = 0;
#line 3388
  drbd_request_cache = kmem_cache_create("drbd_req", 112UL, 0UL, 0UL, 0);
#line 3390
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3391
    goto Enomem;
  } else {

  }
#line 3393
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3395
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3396
    goto Enomem;
  } else {

  }
#line 3398
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3400
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3401
    goto Enomem;
  } else {

  }
#line 3403
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3405
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3406
    goto Enomem;
  } else {

  }
#line 3415
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 3416
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 3417
    goto Enomem;
  } else {

  }
#line 3419
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3421
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3422
    goto Enomem;
  } else {

  }
#line 3424
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3426
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3427
    goto Enomem;
  } else {

  }
#line 3430
  spinlock_check(& drbd_pp_lock);
#line 3430
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5989.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3432
  i = 0;
#line 3432
  goto ldv_51074;
  ldv_51073: 
#line 3433
  page = alloc_pages(131282U, 0U);
#line 3434
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3435
    goto Enomem;
  } else {

  }
#line 3436
  page->ldv_13511.private = (unsigned long )drbd_pp_pool;
#line 3437
  drbd_pp_pool = page;
#line 3432
  i = i + 1;
  ldv_51074: ;
#line 3432
  if (i < number) {
#line 3433
    goto ldv_51073;
  } else {

  }
#line 3439
  drbd_pp_vacant = number;
#line 3441
  return (0);
  Enomem: 
#line 3444
  drbd_destroy_mempools();
#line 3445
  return (-12);
}
}
#line 3448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3455
  return (0);
}
}
#line 3458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3466
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3467
  if (rr != 0) {
#line 3468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3470
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3471
  if (rr != 0) {
#line 3472
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3474
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3475
  if (rr != 0) {
#line 3476
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3478
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3479
  if (rr != 0) {
#line 3480
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3482
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3483
  if (rr != 0) {
#line 3484
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3485
  return;
}
}
#line 3489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3491
  tmp = minor_to_mdev(minor);
#line 3491
  mdev = tmp;
#line 3493
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3494
    return;
  } else {

  }
#line 3496
  del_timer_sync(& mdev->request_timer);
#line 3499
  if (mdev->open_cnt != 0) {
#line 3500
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3501);
  } else {

  }
#line 3503
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3503
  _b = tmp___0 == 0;
#line 3503
  if (_b != 0) {
#line 3503
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3503);
  } else {

  }
#line 3503
  if (_b != 0) {
#line 3505
    lp = mdev->data.work.q.next;
#line 3505
    goto ldv_51095;
    ldv_51094: 
#line 3506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3505
    lp = lp->next;
    ldv_51095: ;
#line 3505
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3506
      goto ldv_51094;
    } else {

    }

  } else {

  }
#line 3511
  del_gendisk(mdev->vdisk);
#line 3516
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3517
    bdput(mdev->this_bdev);
  } else {

  }
#line 3519
  drbd_free_resources(mdev);
#line 3521
  drbd_release_ee_lists(mdev);
#line 3524
  kfree((void const   *)mdev->ee_hash);
#line 3530
  lc_destroy(mdev->act_log);
#line 3531
  lc_destroy(mdev->resync);
#line 3533
  kfree((void const   *)mdev->p_uuid);
#line 3536
  kfree((void const   *)mdev->int_dig_out);
#line 3537
  kfree((void const   *)mdev->int_dig_in);
#line 3538
  kfree((void const   *)mdev->int_dig_vv);
#line 3543
  drbd_free_mdev(mdev);
#line 3544
  return;
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3550
  unregister_reboot_notifier(& drbd_notifier);
#line 3560
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3561
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3563
  drbd_nl_cleanup();
#line 3565
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3566
    i = minor_count;
#line 3567
    goto ldv_51102;
    ldv_51101: 
#line 3568
    drbd_delete_device(i);
    ldv_51102: 
#line 3567
    tmp = i;
#line 3567
    i = i - 1U;
#line 3567
    if (tmp != 0U) {
#line 3568
      goto ldv_51101;
    } else {

    }
#line 3569
    drbd_destroy_mempools();
  } else {

  }
#line 3572
  kfree((void const   *)minor_table);
#line 3574
  unregister_blkdev(147U, "drbd");
#line 3576
  printk("<6>drbd: module cleanup done.\n");
#line 3577
  return;
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3588
  mdev = (struct drbd_conf *)congested_data;
#line 3590
  reason = 45;
#line 3591
  r = 0;
#line 3593
  tmp = may_inc_ap_bio___0(mdev);
#line 3593
  if (tmp) {
#line 3593
    tmp___0 = 0;
  } else {
#line 3593
    tmp___0 = 1;
  }
#line 3593
  if (tmp___0) {
#line 3595
    r = bdi_bits;
#line 3596
    reason = 100;
#line 3597
    goto out;
  } else {

  }
#line 3600
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3600
  if (tmp___1 != 0) {
#line 3601
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3602
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3603
    put_ldev(mdev);
#line 3604
    if (r != 0) {
#line 3605
      reason = 98;
    } else {

    }
  } else {

  }
#line 3608
  if ((bdi_bits & 4) != 0) {
#line 3608
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3608
    if (tmp___2 != 0) {
#line 3609
      r = r | 4;
#line 3610
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3614
  mdev->congestion_reason = reason;
#line 3615
  return (r);
}
}
#line 3618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3625
  tmp = kzalloc(4728UL, 208U);
#line 3625
  mdev = (struct drbd_conf *)tmp;
#line 3626
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3627
    return (0);
  } else {

  }
#line 3628
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3628
  if (tmp___0) {
#line 3628
    tmp___1 = 0;
  } else {
#line 3628
    tmp___1 = 1;
  }
#line 3628
  if (tmp___1) {
#line 3629
    goto out_no_cpumask;
  } else {

  }
#line 3631
  mdev->minor = minor;
#line 3633
  drbd_init_set_defaults(mdev);
#line 3635
  q = blk_alloc_queue(208U);
#line 3636
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3637
    goto out_no_q;
  } else {

  }
#line 3638
  mdev->rq_queue = q;
#line 3639
  q->queuedata = (void *)mdev;
#line 3641
  disk = alloc_disk(1);
#line 3642
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3643
    goto out_no_disk;
  } else {

  }
#line 3644
  mdev->vdisk = disk;
#line 3646
  set_disk_ro(disk, 1);
#line 3648
  disk->queue = q;
#line 3649
  disk->major = 147;
#line 3650
  disk->first_minor = (int )minor;
#line 3651
  disk->fops = & drbd_ops;
#line 3652
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3653
  disk->private_data = (void *)mdev;
#line 3655
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3657
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3659
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3660
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3662
  blk_queue_make_request(q, & drbd_make_request);
#line 3665
  blk_queue_max_hw_sectors(q, 16U);
#line 3666
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3667
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3668
  q->queue_lock = & mdev->req_lock;
#line 3670
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3671
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3672
    goto out_no_io_page;
  } else {

  }
#line 3674
  tmp___2 = drbd_bm_init(mdev);
#line 3674
  if (tmp___2 != 0) {
#line 3675
    goto out_no_bitmap;
  } else {

  }
#line 3677
  tmp___3 = tl_init(mdev);
#line 3677
  if (tmp___3 == 0) {
#line 3678
    goto out_no_tl;
  } else {

  }
#line 3680
  tmp___4 = kzalloc(120UL, 208U);
#line 3680
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3681
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3682
    goto out_no_app_reads;
  } else {

  }
#line 3684
  tmp___5 = kzalloc(40UL, 208U);
#line 3684
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3685
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3686
    goto out_no_epoch;
  } else {

  }
#line 3688
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3689
  mdev->epochs = 1U;
#line 3691
  return (mdev);
  out_no_epoch: 
#line 3696
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3698
  tl_cleanup(mdev);
  out_no_tl: 
#line 3700
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3702
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3704
  put_disk(disk);
  out_no_disk: 
#line 3706
  blk_cleanup_queue(q);
  out_no_q: 
#line 3708
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3710
  kfree((void const   *)mdev);
#line 3711
  return (0);
}
}
#line 3716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3718
  kfree((void const   *)mdev->current_epoch);
#line 3719
  kfree((void const   *)mdev->app_reads_hash);
#line 3720
  tl_cleanup(mdev);
#line 3721
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3722
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3723
  __free_pages(mdev->md_io_page, 0U);
#line 3724
  put_disk(mdev->vdisk);
#line 3725
  blk_cleanup_queue(mdev->rq_queue);
#line 3726
  free_cpumask_var(mdev->cpu_mask);
#line 3727
  drbd_free_tl_hash(mdev);
#line 3728
  kfree((void const   *)mdev);
#line 3729
  return;
}
}
#line 3732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3743
  if (minor_count == 0U || minor_count > 256U) {
#line 3744
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3747
    return (-22);
  } else {

  }
#line 3753
  err = drbd_nl_init();
#line 3754
  if (err != 0) {
#line 3755
    return (err);
  } else {

  }
#line 3757
  err = register_blkdev(147U, "drbd");
#line 3758
  if (err != 0) {
#line 3759
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3762
    return (err);
  } else {

  }
#line 3765
  register_reboot_notifier(& drbd_notifier);
#line 3770
  err = -12;
#line 3772
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3774
  drbd_proc = 0;
#line 3775
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3775
  minor_table = (struct drbd_conf **)tmp;
#line 3777
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3778
    goto Enomem;
  } else {

  }
#line 3780
  err = drbd_create_mempools();
#line 3781
  if (err != 0) {
#line 3782
    goto Enomem;
  } else {

  }
#line 3784
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3785
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3786
    printk("<3>drbd: unable to register proc file\n");
#line 3787
    goto Enomem;
  } else {

  }
#line 3790
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3792
  printk("<6>drbd: initialized. Version: 8.3.13 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3795
  tmp___0 = drbd_buildtag();
#line 3795
  printk("<6>drbd: %s\n", tmp___0);
#line 3796
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3798
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3800
  return (0);
  Enomem: 
#line 3803
  drbd_cleanup();
#line 3804
  if (err == -12) {
#line 3806
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3808
    printk("<3>drbd: initialization failure\n");
  }
#line 3809
  return (err);
}
}
#line 3812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3814
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3815
    return;
  } else {

  }
#line 3817
  blkdev_put(ldev->backing_bdev, 131U);
#line 3818
  blkdev_put(ldev->md_bdev, 131U);
#line 3820
  kfree((void const   *)ldev);
#line 3821
  return;
}
}
#line 3823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3825
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3826
    ldv_mutex_lock_147(& mdev->data.mutex);
#line 3827
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3828
    sock_release(mdev->data.socket);
#line 3829
    mdev->data.socket = 0;
#line 3830
    ldv_mutex_unlock_148(& mdev->data.mutex);
  } else {

  }
#line 3832
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3833
    ldv_mutex_lock_149(& mdev->meta.mutex);
#line 3834
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3835
    sock_release(mdev->meta.socket);
#line 3836
    mdev->meta.socket = 0;
#line 3837
    ldv_mutex_unlock_150(& mdev->meta.mutex);
  } else {

  }
#line 3839
  return;
}
}
#line 3842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3844
  crypto_free_hash(mdev->csums_tfm);
#line 3845
  mdev->csums_tfm = 0;
#line 3846
  crypto_free_hash(mdev->verify_tfm);
#line 3847
  mdev->verify_tfm = 0;
#line 3848
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3849
  mdev->cram_hmac_tfm = 0;
#line 3850
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3851
  mdev->integrity_w_tfm = 0;
#line 3852
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3853
  mdev->integrity_r_tfm = 0;
#line 3855
  drbd_free_sock(mdev);
#line 3857
  drbd_free_bc(mdev->ldev);
#line 3857
  mdev->ldev = 0;
#line 3858
  return;
}
}
#line 3886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3892
  del_timer(& mdev->md_sync_timer);
#line 3894
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3894
  if (tmp == 0) {
#line 3895
    return;
  } else {

  }
#line 3899
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3899
  if (tmp___0 == 0) {
#line 3900
    return;
  } else {

  }
#line 3902
  tmp___1 = drbd_md_get_buffer(mdev);
#line 3902
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3903
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3904
    goto out;
  } else {

  }
#line 3906
  memset((void *)buffer, 0, 512UL);
#line 3908
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3908
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3908
  buffer->la_size = tmp___3;
#line 3909
  i = 0;
#line 3909
  goto ldv_51168;
  ldv_51167: 
#line 3910
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3910
  buffer->uuid[i] = tmp___4;
#line 3909
  i = i + 1;
  ldv_51168: ;
#line 3909
  if (i <= 3) {
#line 3910
    goto ldv_51167;
  } else {

  }
#line 3911
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3911
  buffer->flags = tmp___5;
#line 3912
  buffer->magic = 1795323011U;
#line 3914
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3914
  buffer->md_size_sect = tmp___6;
#line 3915
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3915
  buffer->al_offset = tmp___7;
#line 3916
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3916
  buffer->al_nr_extents = tmp___8;
#line 3917
  buffer->bm_bytes_per_bit = 1048576U;
#line 3918
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3918
  buffer->device_uuid = tmp___9;
#line 3920
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3920
  buffer->bm_offset = tmp___10;
#line 3921
  tmp___11 = __fswab32((__u32 )mdev->peer_max_bio_size);
#line 3921
  buffer->la_peer_max_bio_size = tmp___11;
#line 3923
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3923
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3923
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3923);
  } else {

  }
#line 3924
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3926
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3926
  if (tmp___13 == 0) {
#line 3928
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3929
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3934
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3934
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3936
  drbd_md_put_buffer(mdev);
  out: 
#line 3938
  put_ldev(mdev);
#line 3939
  return;
}
}
#line 3949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  int peer ;
  __u32 tmp___16 ;
  int __max1 ;
  int __max2 ;

  {
#line 3952
  rv = 101;
#line 3954
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3954
  if (tmp == 0) {
#line 3955
    return (118);
  } else {

  }
#line 3957
  tmp___0 = drbd_md_get_buffer(mdev);
#line 3957
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3958
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3959
    goto out;
  } else {

  }
#line 3961
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3961
  if (tmp___1 == 0) {
#line 3964
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3965
    rv = 118;
#line 3966
    goto err;
  } else {

  }
#line 3969
  tmp___2 = __fswab32(buffer->magic);
#line 3969
  if (tmp___2 != 2205418091U) {
#line 3970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3971
    rv = 119;
#line 3972
    goto err;
  } else {

  }
#line 3974
  tmp___4 = __fswab32(buffer->al_offset);
#line 3974
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3975
    tmp___3 = __fswab32(buffer->al_offset);
#line 3975
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3977
    rv = 119;
#line 3978
    goto err;
  } else {

  }
#line 3980
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3980
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3981
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3981
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3983
    rv = 119;
#line 3984
    goto err;
  } else {

  }
#line 3986
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3986
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3987
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3987
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3989
    rv = 119;
#line 3990
    goto err;
  } else {

  }
#line 3993
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3993
  if (tmp___10 != 4096U) {
#line 3994
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3994
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3996
    rv = 119;
#line 3997
    goto err;
  } else {

  }
#line 4000
  tmp___11 = __fswab64(buffer->la_size);
#line 4000
  bdev->md.la_size_sect = tmp___11;
#line 4001
  i = 0;
#line 4001
  goto ldv_51181;
  ldv_51180: 
#line 4002
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 4002
  bdev->md.uuid[i] = tmp___12;
#line 4001
  i = i + 1;
  ldv_51181: ;
#line 4001
  if (i <= 3) {
#line 4002
    goto ldv_51180;
  } else {

  }
#line 4003
  tmp___13 = __fswab32(buffer->flags);
#line 4003
  bdev->md.flags = tmp___13;
#line 4004
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 4004
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 4005
  tmp___15 = __fswab64(buffer->device_uuid);
#line 4005
  bdev->md.device_uuid = tmp___15;
#line 4007
  spin_lock_irq(& mdev->req_lock);
#line 4008
  if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 4010
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 4010
    peer = (int )tmp___16;
#line 4011
    __max1 = peer;
#line 4011
    __max2 = 4096;
#line 4011
    peer = __max1 > __max2 ? __max1 : __max2;
#line 4012
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 4014
  spin_unlock_irq(& mdev->req_lock);
#line 4016
  if (mdev->sync_conf.al_extents <= 6) {
#line 4017
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 4020
  drbd_md_put_buffer(mdev);
  out: 
#line 4022
  put_ldev(mdev);
#line 4024
  return (rv);
}
}
#line 4045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4047
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 4047
  if (tmp == 0) {
#line 4048
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 4049
  return;
}
}
#line 4052 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 4056
  i = 2;
#line 4056
  goto ldv_51195;
  ldv_51194: 
#line 4057
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 4056
  i = i + 1;
  ldv_51195: ;
#line 4056
  if (i <= 2) {
#line 4057
    goto ldv_51194;
  } else {

  }

#line 4061
  return;
}
}
#line 4060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4062
  if (idx == 0) {
#line 4063
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 4064
      val = val | 1ULL;
    } else {
#line 4066
      val = val & 0xfffffffffffffffeULL;
    }
#line 4068
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 4071
  (mdev->ldev)->md.uuid[idx] = val;
#line 4072
  drbd_md_mark_dirty(mdev);
#line 4073
  return;
}
}
#line 4076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4078
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 4079
    drbd_uuid_move_history(mdev);
#line 4080
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 4082
  _drbd_uuid_set(mdev, idx, val);
#line 4083
  return;
}
}
#line 4092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 4095
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4097
  if (bm_uuid != 0ULL) {
#line 4098
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 4100
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 4102
  get_random_bytes((void *)(& val), 8);
#line 4103
  _drbd_uuid_set(mdev, 0, val);
#line 4104
  drbd_print_uuids(mdev, "new current UUID");
#line 4106
  drbd_md_sync(mdev);
#line 4107
  return;
}
}
#line 4109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 4111
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 4112
    return;
  } else {

  }
#line 4114
  if (val == 0ULL) {
#line 4115
    drbd_uuid_move_history(mdev);
#line 4116
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 4117
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 4119
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4120
    if (bm_uuid != 0ULL) {
#line 4121
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 4123
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 4125
  drbd_md_mark_dirty(mdev);
#line 4126
  return;
}
}
#line 4134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4136
  rv = -5;
#line 4138
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4138
  if (tmp != 0) {
#line 4139
    drbd_md_set_flag(mdev, 8);
#line 4140
    drbd_md_sync(mdev);
#line 4141
    drbd_bm_set_all(mdev);
#line 4143
    rv = drbd_bm_write(mdev);
#line 4145
    if (rv == 0) {
#line 4146
      drbd_md_clear_flag(mdev, 8);
#line 4147
      drbd_md_sync(mdev);
    } else {

    }
#line 4150
    put_ldev(mdev);
  } else {

  }
#line 4153
  return (rv);
}
}
#line 4162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4164
  rv = -5;
#line 4166
  drbd_resume_al(mdev);
#line 4167
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4167
  if (tmp != 0) {
#line 4168
    drbd_bm_clear_all(mdev);
#line 4169
    rv = drbd_bm_write(mdev);
#line 4170
    put_ldev(mdev);
  } else {

  }
#line 4173
  return (rv);
}
}
#line 4176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4178
  __mptr = (struct drbd_work  const  *)w;
#line 4178
  work = (struct bm_io_work *)__mptr;
#line 4179
  rv = -5;
#line 4181
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4181
  if (tmp != 0) {
#line 4181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4181);
  } else {

  }
#line 4183
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4183
  if (tmp___0 != 0) {
#line 4184
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4185
    rv = (*(work->io_fn))(mdev);
#line 4186
    drbd_bm_unlock(mdev);
#line 4187
    put_ldev(mdev);
  } else {

  }
#line 4190
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4191
  __asm__  volatile   ("": : : "memory");
#line 4192
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4194
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4195
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4197
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4198
  work->why = 0;
#line 4199
  work->flags = 0;
#line 4201
  return (1);
}
}
#line 4204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4206
  lc_destroy(mdev->resync);
#line 4207
  mdev->resync = 0;
#line 4208
  lc_destroy(mdev->act_log);
#line 4209
  mdev->act_log = 0;
#line 4210
  drbd_free_bc(mdev->ldev);
#line 4210
  mdev->ldev = 0;
#line 4214
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4215
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4216
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4218
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4219
  return;
}
}
#line 4221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4223
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4223
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4223);
  } else {

  }
#line 4228
  val.i = 0U;
#line 4228
  val.ldv_38794.disk = 0U;
#line 4228
  mask.i = 0U;
#line 4228
  mask.ldv_38794.disk = 15U;
#line 4228
  drbd_force_state(mdev, mask, val);
#line 4229
  return (1);
}
}
#line 4232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4234
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4234
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4234);
  } else {

  }
#line 4235
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4235
  if (tmp == 0) {
#line 4236
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4237
  return;
}
}
#line 4251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4256
  tmp = get_current();
#line 4256
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4256);
  } else {

  }
#line 4258
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 4258
  if (tmp___0 != 0) {
#line 4258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4258);
  } else {

  }
#line 4259
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 4259
  if (tmp___1 != 0) {
#line 4259
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4259);
  } else {

  }
#line 4260
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4260
  if (tmp___2 == 0) {
#line 4260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4260);
  } else {

  }
#line 4261
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4265
  mdev->bm_io_work.io_fn = io_fn;
#line 4266
  mdev->bm_io_work.done = done;
#line 4267
  mdev->bm_io_work.why = why;
#line 4268
  mdev->bm_io_work.flags = flags;
#line 4270
  spin_lock_irq(& mdev->req_lock);
#line 4271
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 4272
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4272
  if (tmp___4 == 0) {
#line 4273
    tmp___3 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4273
    if (tmp___3 == 0) {
#line 4274
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4276
  spin_unlock_irq(& mdev->req_lock);
#line 4277
  return;
}
}
#line 4288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4293
  tmp = get_current();
#line 4293
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4293);
  } else {

  }
#line 4295
  if (((unsigned int )flags & 9U) == 0U) {
#line 4296
    drbd_suspend_io(mdev);
  } else {

  }
#line 4298
  drbd_bm_lock(mdev, why, flags);
#line 4299
  rv = (*io_fn)(mdev);
#line 4300
  drbd_bm_unlock(mdev);
#line 4302
  if (((unsigned int )flags & 9U) == 0U) {
#line 4303
    drbd_resume_io(mdev);
  } else {

  }
#line 4305
  return (rv);
}
}
#line 4308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4310
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4311
    drbd_md_mark_dirty(mdev);
#line 4312
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4314
  return;
}
}
#line 4316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4318
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4319
    drbd_md_mark_dirty(mdev);
#line 4320
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4322
  return;
}
}
#line 4323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4325
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4330
  mdev = (struct drbd_conf *)data;
#line 4332
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4333
  return;
}
}
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4337
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4342
  drbd_md_sync(mdev);
#line 4343
  return (1);
}
}
#line 4363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4367
  tmp = rsp->count;
#line 4367
  rsp->count = rsp->count - 1UL;
#line 4367
  if (tmp == 0UL) {
#line 4368
    get_random_bytes((void *)(& refresh), 8);
#line 4369
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4370
    rsp->count = 10000UL;
  } else {

  }
#line 4372
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4373
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4373
  return ((unsigned long )tmp___0);
}
}
#line 4377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4378
  _faults[0] = (char *)"Meta-data write";
#line 4378
  _faults[1] = (char *)"Meta-data read";
#line 4378
  _faults[2] = (char *)"Resync write";
#line 4378
  _faults[3] = (char *)"Resync read";
#line 4378
  _faults[4] = (char *)"Data write";
#line 4378
  _faults[5] = (char *)"Data read";
#line 4378
  _faults[6] = (char *)"Data read ahead";
#line 4378
  _faults[7] = (char *)"BM allocation";
#line 4378
  _faults[8] = (char *)"EE allocation";
#line 4378
  _faults[9] = (char *)"receive data corruption";
#line 4391
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4397
  rrs.state = 0UL;
#line 4397
  rrs.count = 0UL;
#line 4399
  if (fault_devs == 0) {
#line 4399
    goto _L;
  } else {
#line 4399
    tmp = mdev_to_minor(mdev);
#line 4399
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4399
      tmp___0 = _drbd_fault_random(& rrs);
#line 4399
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4399
        tmp___1 = 1;
      } else {
#line 4399
        tmp___1 = 0;
      }
    } else {
#line 4399
      tmp___1 = 0;
    }
  }
#line 4399
  ret = (unsigned int )tmp___1;
#line 4404
  if (ret != 0U) {
#line 4405
    fault_count = fault_count + 1;
#line 4407
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4407
    if (tmp___3 != 0) {
#line 4408
      tmp___2 = _drbd_fault_str(type);
#line 4408
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4412
  return (ret);
}
}
#line 4416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4421
  buildtag[0] = '\000';
#line 4421
  tmp = 1U;
#line 4421
  while (1) {
#line 4421
    if (tmp >= 38U) {
#line 4421
      break;
    } else {

    }
#line 4421
    buildtag[tmp] = (char)0;
#line 4421
    tmp = tmp + 1U;
  }
#line 4423
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4425
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 4431
  return ((char const   *)(& buildtag));
}
}
#line 4479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_109_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4678
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4635
  LDV_IN_INTERRUPT = 1;
#line 4644
  ldv_initialize();
#line 4660
  ldv_handler_precall();
#line 4661
  tmp = drbd_init();
#line 4661
  if (tmp != 0) {
#line 4662
    goto ldv_final;
  } else {

  }
#line 4685
  goto ldv_51375;
  ldv_51374: 
#line 4689
  tmp___0 = nondet_int();
#line 4689
  switch (tmp___0) {
  case 0: ;
#line 4694
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4707
    ldv_handler_precall();
#line 4708
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 4709
    ldv_check_return_value(res_drbd_open_73);
#line 4710
    if (res_drbd_open_73 != 0) {
#line 4711
      goto ldv_module_exit;
    } else {

    }
#line 4732
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4738
  goto ldv_51369;
  case 1: ;
#line 4742
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4755
    ldv_handler_precall();
#line 4756
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 4777
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4783
  goto ldv_51369;
  case 2: 
#line 4802
  ldv_handler_precall();
#line 4803
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 4828
  goto ldv_51369;
  case 3: 
#line 4853
  ldv_handler_precall();
#line 4854
  md_sync_timer_fn(var_md_sync_timer_fn_109_p0);
#line 4873
  goto ldv_51369;
  default: ;
#line 4874
  goto ldv_51369;
  }
  ldv_51369: ;
  ldv_51375: 
#line 4685
  tmp___1 = nondet_int();
#line 4685
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4687
    goto ldv_51374;
  } else {

  }

  ldv_module_exit: 
#line 4896
  ldv_handler_precall();
#line 4897
  drbd_cleanup();
  ldv_final: 
#line 4918
  ldv_check_final_state();
#line 4921
  return;
}
}
#line 4925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4930
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4932
  mutex_lock(ldv_func_arg1);
#line 4933
  return;
}
}
#line 4935 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4940
  tmp = mutex_trylock(ldv_func_arg1);
#line 4940
  ldv_func_res = tmp;
#line 4942
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4942
  return (tmp___0);
#line 4944
  return (ldv_func_res);
}
}
#line 4947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4952
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4954
  mutex_unlock(ldv_func_arg1);
#line 4955
  return;
}
}
#line 4957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4962
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4964
  mutex_lock(ldv_func_arg1);
#line 4965
  return;
}
}
#line 4967 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4972
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4974
  mutex_unlock(ldv_func_arg1);
#line 4975
  return;
}
}
#line 4977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4982
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4984
  mutex_lock(ldv_func_arg1);
#line 4985
  return;
}
}
#line 4987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4992
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4994
  mutex_unlock(ldv_func_arg1);
#line 4995
  return;
}
}
#line 4997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5002
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5004
  mutex_unlock(ldv_func_arg1);
#line 5005
  return;
}
}
#line 5007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5012
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5014
  mutex_lock(ldv_func_arg1);
#line 5015
  return;
}
}
#line 5017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5022
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5024
  mutex_unlock(ldv_func_arg1);
#line 5025
  return;
}
}
#line 5027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5032
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5034
  mutex_lock(ldv_func_arg1);
#line 5035
  return;
}
}
#line 5037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5042
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5044
  mutex_lock(ldv_func_arg1);
#line 5045
  return;
}
}
#line 5047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5052
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5054
  mutex_unlock(ldv_func_arg1);
#line 5055
  return;
}
}
#line 5057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5062
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5064
  mutex_unlock(ldv_func_arg1);
#line 5065
  return;
}
}
#line 5067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5072
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5074
  mutex_lock(ldv_func_arg1);
#line 5075
  return;
}
}
#line 5077 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5082
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5084
  mutex_unlock(ldv_func_arg1);
#line 5085
  return;
}
}
#line 5087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5092
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5094
  mutex_lock(ldv_func_arg1);
#line 5095
  return;
}
}
#line 5097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5102
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5104
  mutex_unlock(ldv_func_arg1);
#line 5105
  return;
}
}
#line 5107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5112
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5114
  mutex_lock(ldv_func_arg1);
#line 5115
  return;
}
}
#line 5117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5122
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5124
  mutex_unlock(ldv_func_arg1);
#line 5125
  return;
}
}
#line 5127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5132
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5134
  mutex_lock(ldv_func_arg1);
#line 5135
  return;
}
}
#line 5137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5142
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5144
  mutex_unlock(ldv_func_arg1);
#line 5145
  return;
}
}
#line 5147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5152
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5154
  mutex_lock(ldv_func_arg1);
#line 5155
  return;
}
}
#line 5157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5162
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5164
  mutex_unlock(ldv_func_arg1);
#line 5165
  return;
}
}
#line 5167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5172
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5174
  mutex_lock(ldv_func_arg1);
#line 5175
  return;
}
}
#line 5177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5182
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5184
  mutex_unlock(ldv_func_arg1);
#line 5185
  return;
}
}
#line 5187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5192
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5194
  mutex_lock(ldv_func_arg1);
#line 5195
  return;
}
}
#line 5197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5202
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5204
  mutex_unlock(ldv_func_arg1);
#line 5205
  return;
}
}
#line 5207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5212
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5214
  mutex_lock(ldv_func_arg1);
#line 5215
  return;
}
}
#line 5217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5222
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5224
  mutex_unlock(ldv_func_arg1);
#line 5225
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_184(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 116
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 128
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 152
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 157
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 162
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 167
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 177
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 179
  mutex_lock(ldv_func_arg1);
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 187
  tmp = mutex_trylock(ldv_func_arg1);
#line 187
  ldv_func_res = tmp;
#line 189
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 189
  return (tmp___0);
#line 191
  return (ldv_func_res);
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 199
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 201
  mutex_unlock(ldv_func_arg1);
#line 202
  return;
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_184(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 209
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 211
  mutex_lock(ldv_func_arg1);
#line 212
  return;
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 219
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 221
  mutex_unlock(ldv_func_arg1);
#line 222
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 326 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 394 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 397
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 397
  return (tmp != 0);
}
}
#line 483 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 486
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 487
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_192(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_193(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_198(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_200(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_202(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_194(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_196(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_199(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___3(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6282;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6282;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6282;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6282;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6282: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 552 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2126 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___3();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___3();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 124 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 126
extern void cn_del_callback(struct cb_id * ) ;
#line 127
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 404 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 59 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  pagefault_disable___0();
#line 62
  tmp = lowmem_page_address((struct page  const  *)page);
#line 62
  return (tmp);
}
}
#line 66 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 68
  pagefault_enable___0();
#line 69
  return;
}
}
#line 846 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 850
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 866
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 873
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1557 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1942
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1946
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1946
  if (tmp___1 != 0UL) {
#line 1946
    __min1 = 2251799813685248UL;
#line 1946
    tmp___0 = drbd_md_first_sector(bdev);
#line 1946
    __min2 = tmp___0;
#line 1946
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1946
    s = 0UL;
  }
#line 1949
  goto ldv_49483;
  case -2: 
#line 1951
  __min1___0 = 2251799813685248UL;
#line 1951
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1951
  __min2___0 = tmp___2;
#line 1951
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1954
  __min1___1 = s;
#line 1954
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1954
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1957
  goto ldv_49483;
  default: 
#line 1959
  __min1___2 = 8587575296UL;
#line 1959
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1959
  __min2___2 = tmp___3;
#line 1959
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49483: ;
#line 1962
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[90U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"detach_force", 40960, 4}, 
        {"disk_timeout", 0, 4}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 100
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 101
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_50267;
  ldv_50266: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_50264;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_50264: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_50267: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_50266;
  } else {

  }

#line 14
  return (1);
}
}
#line 35
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 35 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  unsigned short *tmp___6 ;
  u16 tmp___7 ;

  {
#line 20
  goto ldv_50329;
  ldv_50328: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_50296;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_50296;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_50296;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_50296;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_50296;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_50296;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50296;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50296;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50296;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_50296;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50296;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50296;
  case 89: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->disk_timeout = (int )tmp___5;
#line 20
  goto ldv_50296;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_50296: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_50329: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___7 = get_unaligned_le16((void const   *)tmp___6);
#line 20
  tag = (int )tmp___7;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_50328;
  } else {

  }

#line 20
  return (1);
}
}
#line 39
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) ;
#line 39 "include/linux/drbd_nl.h"
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 37
  goto ldv_50346;
  ldv_50345: 
#line 37
  tmp = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 37
  dlen = (int )tmp___0;
#line 37
  switch (tag & 8191) {
  case 88: 
#line 37
  arg->detach_force = (int )((signed char )*((char *)tags)) != 0;
#line 37
  goto ldv_50343;
  default: ;
#line 37
  if ((tag & 8192) != 0) {
#line 37
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 37
    return (0);
  } else {

  }
  }
  ldv_50343: 
#line 37
  tags = tags + (unsigned long )dlen;
  ldv_50346: 
#line 37
  tmp___1 = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 37
  tag = (int )tmp___2;
#line 37
  if (tag != 0) {
#line 38
    goto ldv_50345;
  } else {

  }

#line 37
  return (1);
}
}
#line 73
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 73 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 41
  goto ldv_50437;
  ldv_50436: 
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 41
  dlen = (int )tmp___0;
#line 41
  switch (tag & 8191) {
  case 8: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->my_addr_len = dlen;
#line 41
  __min1 = (size_t )dlen;
#line 41
  __min2 = 128UL;
#line 41
  __len = __min1 < __min2 ? __min1 : __min2;
#line 41
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 41
  goto ldv_50369;
  case 9: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->peer_addr_len = dlen;
#line 41
  __min1___0 = (size_t )dlen;
#line 41
  __min2___0 = 128UL;
#line 41
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 41
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 41
  goto ldv_50369;
  case 10: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->shared_secret_len = dlen;
#line 41
  __min1___1 = (size_t )dlen;
#line 41
  __min2___1 = 64UL;
#line 41
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 41
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 41
  goto ldv_50369;
  case 11: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->cram_hmac_alg_len = dlen;
#line 41
  __min1___2 = (size_t )dlen;
#line 41
  __min2___2 = 64UL;
#line 41
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 41
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 41
  goto ldv_50369;
  case 44: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->integrity_alg_len = dlen;
#line 41
  __min1___3 = (size_t )dlen;
#line 41
  __min2___3 = 64UL;
#line 41
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 41
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 41
  goto ldv_50369;
  case 14: 
#line 41
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->timeout = (int )tmp___1;
#line 41
  goto ldv_50369;
  case 15: 
#line 41
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->wire_protocol = (int )tmp___2;
#line 41
  goto ldv_50369;
  case 16: 
#line 41
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->try_connect_int = (int )tmp___3;
#line 41
  goto ldv_50369;
  case 17: 
#line 41
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_int = (int )tmp___4;
#line 41
  goto ldv_50369;
  case 18: 
#line 41
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_epoch_size = (int )tmp___5;
#line 41
  goto ldv_50369;
  case 19: 
#line 41
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_buffers = (int )tmp___6;
#line 41
  goto ldv_50369;
  case 20: 
#line 41
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->unplug_watermark = (int )tmp___7;
#line 41
  goto ldv_50369;
  case 21: 
#line 41
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->sndbuf_size = (int )tmp___8;
#line 41
  goto ldv_50369;
  case 22: 
#line 41
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ko_count = (int )tmp___9;
#line 41
  goto ldv_50369;
  case 24: 
#line 41
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_0p = (int )tmp___10;
#line 41
  goto ldv_50369;
  case 25: 
#line 41
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_1p = (int )tmp___11;
#line 41
  goto ldv_50369;
  case 26: 
#line 41
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_2p = (int )tmp___12;
#line 41
  goto ldv_50369;
  case 39: 
#line 41
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rr_conflict = (int )tmp___13;
#line 41
  goto ldv_50369;
  case 40: 
#line 41
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_timeo = (int )tmp___14;
#line 41
  goto ldv_50369;
  case 67: 
#line 41
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rcvbuf_size = (int )tmp___15;
#line 41
  goto ldv_50369;
  case 81: 
#line 41
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->on_congestion = (int )tmp___16;
#line 41
  goto ldv_50369;
  case 82: 
#line 41
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_fill = (int )tmp___17;
#line 41
  goto ldv_50369;
  case 83: 
#line 41
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_extents = (int )tmp___18;
#line 41
  goto ldv_50369;
  case 60: 
#line 41
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 27: 
#line 41
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 28: 
#line 41
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 41: 
#line 41
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 61: 
#line 41
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 62: 
#line 41
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  case 70: 
#line 41
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50369;
  default: ;
#line 41
  if ((tag & 8192) != 0) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 41
    return (0);
  } else {

  }
  }
  ldv_50369: 
#line 41
  tags = tags + (unsigned long )dlen;
  ldv_50437: 
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 41
  tag = (int )tmp___20;
#line 41
  if (tag != 0) {
#line 42
    goto ldv_50436;
  } else {

  }

#line 41
  return (1);
}
}
#line 77
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 77 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 75
  goto ldv_50454;
  ldv_50453: 
#line 75
  tmp = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 75
  dlen = (int )tmp___0;
#line 75
  switch (tag & 8191) {
  case 84: 
#line 75
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 75
  goto ldv_50451;
  default: ;
#line 75
  if ((tag & 8192) != 0) {
#line 75
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 75
    return (0);
  } else {

  }
  }
  ldv_50451: 
#line 75
  tags = tags + (unsigned long )dlen;
  ldv_50454: 
#line 75
  tmp___1 = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 75
  tag = (int )tmp___2;
#line 75
  if (tag != 0) {
#line 76
    goto ldv_50453;
  } else {

  }

#line 75
  return (1);
}
}
#line 83
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 83 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 79
  goto ldv_50473;
  ldv_50472: 
#line 79
  tmp = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 79
  dlen = (int )tmp___0;
#line 79
  switch (tag & 8191) {
  case 29: 
#line 79
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 79
  goto ldv_50468;
  case 68: 
#line 79
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_50468;
  case 69: 
#line 79
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_50468;
  default: ;
#line 79
  if ((tag & 8192) != 0) {
#line 79
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 79
    return (0);
  } else {

  }
  }
  ldv_50468: 
#line 79
  tags = tags + (unsigned long )dlen;
  ldv_50473: 
#line 79
  tmp___1 = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 79
  tag = (int )tmp___2;
#line 79
  if (tag != 0) {
#line 80
    goto ldv_50472;
  } else {

  }

#line 79
  return (1);
}
}
#line 104
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 104 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 85
  goto ldv_50529;
  ldv_50528: 
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 85
  dlen = (int )tmp___0;
#line 85
  switch (tag & 8191) {
  case 30: 
#line 85
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->rate = (int )tmp___1;
#line 85
  goto ldv_50487;
  case 31: 
#line 85
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->after = (int )tmp___2;
#line 85
  goto ldv_50487;
  case 32: 
#line 85
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->al_extents = (int )tmp___3;
#line 85
  goto ldv_50487;
  case 52: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->verify_alg_len = dlen;
#line 85
  __min1 = (size_t )dlen;
#line 85
  __min2 = 64UL;
#line 85
  __len = __min1 < __min2 ? __min1 : __min2;
#line 85
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 85
  goto ldv_50487;
  case 51: ;
#line 85
  if (dlen > 32) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->cpu_mask_len = dlen;
#line 85
  __min1___0 = (size_t )dlen;
#line 85
  __min2___0 = 32UL;
#line 85
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 85
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 85
  goto ldv_50487;
  case 64: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->csums_alg_len = dlen;
#line 85
  __min1___1 = (size_t )dlen;
#line 85
  __min2___1 = 64UL;
#line 85
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 85
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 85
  goto ldv_50487;
  case 65: 
#line 85
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 85
  goto ldv_50487;
  case 75: 
#line 85
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->on_no_data = (int )tmp___4;
#line 85
  goto ldv_50487;
  case 76: 
#line 85
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_plan_ahead = (int )tmp___5;
#line 85
  goto ldv_50487;
  case 77: 
#line 85
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_delay_target = (int )tmp___6;
#line 85
  goto ldv_50487;
  case 78: 
#line 85
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_fill_target = (int )tmp___7;
#line 85
  goto ldv_50487;
  case 79: 
#line 85
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_max_rate = (int )tmp___8;
#line 85
  goto ldv_50487;
  case 80: 
#line 85
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_min_rate = (int )tmp___9;
#line 85
  goto ldv_50487;
  default: ;
#line 85
  if ((tag & 8192) != 0) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 85
    return (0);
  } else {

  }
  }
  ldv_50487: 
#line 85
  tags = tags + (unsigned long )dlen;
  ldv_50529: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 85
  tag = (int )tmp___11;
#line 85
  if (tag != 0) {
#line 86
    goto ldv_50528;
  } else {

  }

#line 85
  return (1);
}
}
#line 148
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 148 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 146
  goto ldv_50828;
  ldv_50827: 
#line 146
  tmp = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 146
  dlen = (int )tmp___0;
#line 146
  switch (tag & 8191) {
  case 66: 
#line 146
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_50825;
  default: ;
#line 146
  if ((tag & 8192) != 0) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 146
    return (0);
  } else {

  }
  }
  ldv_50825: 
#line 146
  tags = tags + (unsigned long )dlen;
  ldv_50828: 
#line 146
  tmp___1 = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 146
  tag = (int )tmp___2;
#line 146
  if (tag != 0) {
#line 147
    goto ldv_50827;
  } else {

  }

#line 146
  return (1);
}
}
#line 152
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 152 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 150
  goto ldv_50845;
  ldv_50844: 
#line 150
  tmp = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 150
  dlen = (int )tmp___0;
#line 150
  switch (tag & 8191) {
  case 63: 
#line 150
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 150
  goto ldv_50842;
  default: ;
#line 150
  if ((tag & 8192) != 0) {
#line 150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 150
    return (0);
  } else {

  }
  }
  ldv_50842: 
#line 150
  tags = tags + (unsigned long )dlen;
  ldv_50845: 
#line 150
  tmp___1 = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 150
  tag = (int )tmp___2;
#line 150
  if (tag != 0) {
#line 151
    goto ldv_50844;
  } else {

  }

#line 150
  return (1);
}
}
#line 35
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 35 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;
  void *__gu_p___28 ;
  unsigned short *tmp___23 ;
  void *__gu_p___29 ;
  unsigned short *tmp___24 ;
  void *__gu_p___30 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_50890;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_50890;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_50890;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_50890;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50890;
  }
  ldv_50890: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_50897;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_50897;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_50897;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_50897;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50897;
  }
  ldv_50897: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_50904;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_50904;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50904;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50904;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50904;
  }
  ldv_50904: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_50911;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_50911;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_50911;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_50911;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50911;
  }
  ldv_50911: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_50918;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_50918;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50918;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50918;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50918;
  }
  ldv_50918: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_50928;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_50928;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_50928;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_50928;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50928;
  }
  ldv_50928: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_50935;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_50935;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50935;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50935;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50935;
  }
  ldv_50935: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_50945;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_50945;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_50945;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_50945;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50945;
  }
  ldv_50945: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_50952;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_50952;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_50952;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_50952;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50952;
  }
  ldv_50952: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_50959;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_50959;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50959;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50959;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50959;
  }
  ldv_50959: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_50966;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_50966;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_50966;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_50966;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50966;
  }
  ldv_50966: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_50973;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_50973;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_50973;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_50973;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50973;
  }
  ldv_50973: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_50980;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_50980;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50980;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50980;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50980;
  }
  ldv_50980: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_50987;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_50987;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_50987;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_50987;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50987;
  }
  ldv_50987: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_50994;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_50994;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_50994;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_50994;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50994;
  }
  ldv_50994: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_51001;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_51001;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51001;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51001;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51001;
  }
  ldv_51001: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_51008;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_51008;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_51008;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_51008;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51008;
  }
  ldv_51008: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_51015;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_51015;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_51015;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_51015;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51015;
  }
  ldv_51015: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_51022;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_51022;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_51022;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_51022;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51022;
  }
  ldv_51022: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_51029;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_51029;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_51029;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_51029;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51029;
  }
  ldv_51029: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_51036;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_51036;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_51036;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_51036;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51036;
  }
  ldv_51036: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_51043;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_51043;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_51043;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_51043;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51043;
  }
  ldv_51043: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_51050;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_51050;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_51050;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_51050;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51050;
  }
  ldv_51050: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_51057;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_51057;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_51057;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_51057;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51057;
  }
  ldv_51057: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_51064;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_51064;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51064;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51064;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51064;
  }
  ldv_51064: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_51071;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_51071;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_51071;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_51071;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51071;
  }
  ldv_51071: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_51078;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_51078;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_51078;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_51078;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51078;
  }
  ldv_51078: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_51085;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_51085;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_51085;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_51085;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51085;
  }
  ldv_51085: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_51092;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_51092;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_51092;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_51092;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51092;
  }
  ldv_51092: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  tmp___23 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___28 = (void *)tmp___23;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___28) = 89U;
#line 20
  goto ldv_51099;
  case 2UL: 
#line 20
  put_unaligned_le16(89, __gu_p___28);
#line 20
  goto ldv_51099;
  case 4UL: 
#line 20
  put_unaligned_le32(89U, __gu_p___28);
#line 20
  goto ldv_51099;
  case 8UL: 
#line 20
  put_unaligned_le64(89ULL, __gu_p___28);
#line 20
  goto ldv_51099;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51099;
  }
  ldv_51099: 
#line 20
  tmp___24 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___29 = (void *)tmp___24;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___29) = 4U;
#line 20
  goto ldv_51106;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___29);
#line 20
  goto ldv_51106;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___29);
#line 20
  goto ldv_51106;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___29);
#line 20
  goto ldv_51106;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51106;
  }
  ldv_51106: 
#line 20
  __gu_p___30 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___30) = (unsigned char )arg->disk_timeout;
#line 20
  goto ldv_51113;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_timeout), __gu_p___30);
#line 20
  goto ldv_51113;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51113;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51113;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51113;
  }
  ldv_51113: 
#line 20
  tags = tags + 4U;
#line 20
  return (tags);
}
}
#line 73
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 73 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p = (void *)tmp;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p) = 8U;
#line 41
  goto ldv_51152;
  case 2UL: 
#line 41
  put_unaligned_le16(57352, __gu_p);
#line 41
  goto ldv_51152;
  case 4UL: 
#line 41
  put_unaligned_le32(57352U, __gu_p);
#line 41
  goto ldv_51152;
  case 8UL: 
#line 41
  put_unaligned_le64(57352ULL, __gu_p);
#line 41
  goto ldv_51152;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51152;
  }
  ldv_51152: 
#line 41
  tmp___0 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___0 = (void *)tmp___0;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 41
  goto ldv_51159;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 41
  goto ldv_51159;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51159;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51159;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51159;
  }
  ldv_51159: 
#line 41
  __len = (size_t )arg->my_addr_len;
#line 41
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 41
  tags = tags + (unsigned long )arg->my_addr_len;
#line 41
  tmp___1 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___1 = (void *)tmp___1;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___1) = 9U;
#line 41
  goto ldv_51169;
  case 2UL: 
#line 41
  put_unaligned_le16(57353, __gu_p___1);
#line 41
  goto ldv_51169;
  case 4UL: 
#line 41
  put_unaligned_le32(57353U, __gu_p___1);
#line 41
  goto ldv_51169;
  case 8UL: 
#line 41
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 41
  goto ldv_51169;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51169;
  }
  ldv_51169: 
#line 41
  tmp___2 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___2 = (void *)tmp___2;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 41
  goto ldv_51176;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 41
  goto ldv_51176;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51176;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51176;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51176;
  }
  ldv_51176: 
#line 41
  __len___0 = (size_t )arg->peer_addr_len;
#line 41
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 41
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 41
  tmp___3 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___3 = (void *)tmp___3;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___3) = 10U;
#line 41
  goto ldv_51186;
  case 2UL: 
#line 41
  put_unaligned_le16(49162, __gu_p___3);
#line 41
  goto ldv_51186;
  case 4UL: 
#line 41
  put_unaligned_le32(49162U, __gu_p___3);
#line 41
  goto ldv_51186;
  case 8UL: 
#line 41
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 41
  goto ldv_51186;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51186;
  }
  ldv_51186: 
#line 41
  tmp___4 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___4 = (void *)tmp___4;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 41
  goto ldv_51193;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 41
  goto ldv_51193;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51193;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51193;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51193;
  }
  ldv_51193: 
#line 41
  __len___1 = (size_t )arg->shared_secret_len;
#line 41
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 41
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 41
  tmp___5 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___5 = (void *)tmp___5;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___5) = 11U;
#line 41
  goto ldv_51203;
  case 2UL: 
#line 41
  put_unaligned_le16(49163, __gu_p___5);
#line 41
  goto ldv_51203;
  case 4UL: 
#line 41
  put_unaligned_le32(49163U, __gu_p___5);
#line 41
  goto ldv_51203;
  case 8UL: 
#line 41
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 41
  goto ldv_51203;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51203;
  }
  ldv_51203: 
#line 41
  tmp___6 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___6 = (void *)tmp___6;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 41
  goto ldv_51210;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 41
  goto ldv_51210;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51210;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51210;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51210;
  }
  ldv_51210: 
#line 41
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 41
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 41
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 41
  tmp___7 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___7 = (void *)tmp___7;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___7) = 44U;
#line 41
  goto ldv_51220;
  case 2UL: 
#line 41
  put_unaligned_le16(49196, __gu_p___7);
#line 41
  goto ldv_51220;
  case 4UL: 
#line 41
  put_unaligned_le32(49196U, __gu_p___7);
#line 41
  goto ldv_51220;
  case 8UL: 
#line 41
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 41
  goto ldv_51220;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51220;
  }
  ldv_51220: 
#line 41
  tmp___8 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___8 = (void *)tmp___8;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 41
  goto ldv_51227;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 41
  goto ldv_51227;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51227;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51227;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51227;
  }
  ldv_51227: 
#line 41
  __len___3 = (size_t )arg->integrity_alg_len;
#line 41
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 41
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 41
  tmp___9 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___9 = (void *)tmp___9;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___9) = 14U;
#line 41
  goto ldv_51237;
  case 2UL: 
#line 41
  put_unaligned_le16(14, __gu_p___9);
#line 41
  goto ldv_51237;
  case 4UL: 
#line 41
  put_unaligned_le32(14U, __gu_p___9);
#line 41
  goto ldv_51237;
  case 8UL: 
#line 41
  put_unaligned_le64(14ULL, __gu_p___9);
#line 41
  goto ldv_51237;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51237;
  }
  ldv_51237: 
#line 41
  tmp___10 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___10 = (void *)tmp___10;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___10) = 4U;
#line 41
  goto ldv_51244;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___10);
#line 41
  goto ldv_51244;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___10);
#line 41
  goto ldv_51244;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___10);
#line 41
  goto ldv_51244;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51244;
  }
  ldv_51244: 
#line 41
  __gu_p___11 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 41
  goto ldv_51251;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 41
  goto ldv_51251;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51251;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51251;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51251;
  }
  ldv_51251: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___11 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___12 = (void *)tmp___11;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___12) = 15U;
#line 41
  goto ldv_51258;
  case 2UL: 
#line 41
  put_unaligned_le16(8207, __gu_p___12);
#line 41
  goto ldv_51258;
  case 4UL: 
#line 41
  put_unaligned_le32(8207U, __gu_p___12);
#line 41
  goto ldv_51258;
  case 8UL: 
#line 41
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 41
  goto ldv_51258;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51258;
  }
  ldv_51258: 
#line 41
  tmp___12 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___13 = (void *)tmp___12;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___13) = 4U;
#line 41
  goto ldv_51265;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___13);
#line 41
  goto ldv_51265;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___13);
#line 41
  goto ldv_51265;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___13);
#line 41
  goto ldv_51265;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51265;
  }
  ldv_51265: 
#line 41
  __gu_p___14 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 41
  goto ldv_51272;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 41
  goto ldv_51272;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51272;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51272;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51272;
  }
  ldv_51272: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___13 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___15 = (void *)tmp___13;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___15) = 16U;
#line 41
  goto ldv_51279;
  case 2UL: 
#line 41
  put_unaligned_le16(16, __gu_p___15);
#line 41
  goto ldv_51279;
  case 4UL: 
#line 41
  put_unaligned_le32(16U, __gu_p___15);
#line 41
  goto ldv_51279;
  case 8UL: 
#line 41
  put_unaligned_le64(16ULL, __gu_p___15);
#line 41
  goto ldv_51279;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51279;
  }
  ldv_51279: 
#line 41
  tmp___14 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___16 = (void *)tmp___14;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___16) = 4U;
#line 41
  goto ldv_51286;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___16);
#line 41
  goto ldv_51286;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___16);
#line 41
  goto ldv_51286;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___16);
#line 41
  goto ldv_51286;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51286;
  }
  ldv_51286: 
#line 41
  __gu_p___17 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 41
  goto ldv_51293;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 41
  goto ldv_51293;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51293;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51293;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51293;
  }
  ldv_51293: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___15 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___18 = (void *)tmp___15;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___18) = 17U;
#line 41
  goto ldv_51300;
  case 2UL: 
#line 41
  put_unaligned_le16(17, __gu_p___18);
#line 41
  goto ldv_51300;
  case 4UL: 
#line 41
  put_unaligned_le32(17U, __gu_p___18);
#line 41
  goto ldv_51300;
  case 8UL: 
#line 41
  put_unaligned_le64(17ULL, __gu_p___18);
#line 41
  goto ldv_51300;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51300;
  }
  ldv_51300: 
#line 41
  tmp___16 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___19 = (void *)tmp___16;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___19) = 4U;
#line 41
  goto ldv_51307;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___19);
#line 41
  goto ldv_51307;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___19);
#line 41
  goto ldv_51307;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___19);
#line 41
  goto ldv_51307;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51307;
  }
  ldv_51307: 
#line 41
  __gu_p___20 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 41
  goto ldv_51314;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 41
  goto ldv_51314;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51314;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51314;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51314;
  }
  ldv_51314: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___17 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___21 = (void *)tmp___17;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___21) = 18U;
#line 41
  goto ldv_51321;
  case 2UL: 
#line 41
  put_unaligned_le16(18, __gu_p___21);
#line 41
  goto ldv_51321;
  case 4UL: 
#line 41
  put_unaligned_le32(18U, __gu_p___21);
#line 41
  goto ldv_51321;
  case 8UL: 
#line 41
  put_unaligned_le64(18ULL, __gu_p___21);
#line 41
  goto ldv_51321;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51321;
  }
  ldv_51321: 
#line 41
  tmp___18 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___22 = (void *)tmp___18;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___22) = 4U;
#line 41
  goto ldv_51328;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___22);
#line 41
  goto ldv_51328;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___22);
#line 41
  goto ldv_51328;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___22);
#line 41
  goto ldv_51328;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51328;
  }
  ldv_51328: 
#line 41
  __gu_p___23 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 41
  goto ldv_51335;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 41
  goto ldv_51335;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_51335;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_51335;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51335;
  }
  ldv_51335: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___24 = (void *)tmp___19;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___24) = 19U;
#line 41
  goto ldv_51342;
  case 2UL: 
#line 41
  put_unaligned_le16(19, __gu_p___24);
#line 41
  goto ldv_51342;
  case 4UL: 
#line 41
  put_unaligned_le32(19U, __gu_p___24);
#line 41
  goto ldv_51342;
  case 8UL: 
#line 41
  put_unaligned_le64(19ULL, __gu_p___24);
#line 41
  goto ldv_51342;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51342;
  }
  ldv_51342: 
#line 41
  tmp___20 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___25 = (void *)tmp___20;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___25) = 4U;
#line 41
  goto ldv_51349;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___25);
#line 41
  goto ldv_51349;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___25);
#line 41
  goto ldv_51349;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___25);
#line 41
  goto ldv_51349;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51349;
  }
  ldv_51349: 
#line 41
  __gu_p___26 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 41
  goto ldv_51356;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 41
  goto ldv_51356;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_51356;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_51356;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51356;
  }
  ldv_51356: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___21 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___27 = (void *)tmp___21;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___27) = 20U;
#line 41
  goto ldv_51363;
  case 2UL: 
#line 41
  put_unaligned_le16(20, __gu_p___27);
#line 41
  goto ldv_51363;
  case 4UL: 
#line 41
  put_unaligned_le32(20U, __gu_p___27);
#line 41
  goto ldv_51363;
  case 8UL: 
#line 41
  put_unaligned_le64(20ULL, __gu_p___27);
#line 41
  goto ldv_51363;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51363;
  }
  ldv_51363: 
#line 41
  tmp___22 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___28 = (void *)tmp___22;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___28) = 4U;
#line 41
  goto ldv_51370;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___28);
#line 41
  goto ldv_51370;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___28);
#line 41
  goto ldv_51370;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___28);
#line 41
  goto ldv_51370;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51370;
  }
  ldv_51370: 
#line 41
  __gu_p___29 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 41
  goto ldv_51377;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 41
  goto ldv_51377;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_51377;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_51377;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51377;
  }
  ldv_51377: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___23 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___30 = (void *)tmp___23;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___30) = 21U;
#line 41
  goto ldv_51384;
  case 2UL: 
#line 41
  put_unaligned_le16(21, __gu_p___30);
#line 41
  goto ldv_51384;
  case 4UL: 
#line 41
  put_unaligned_le32(21U, __gu_p___30);
#line 41
  goto ldv_51384;
  case 8UL: 
#line 41
  put_unaligned_le64(21ULL, __gu_p___30);
#line 41
  goto ldv_51384;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51384;
  }
  ldv_51384: 
#line 41
  tmp___24 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___31 = (void *)tmp___24;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___31) = 4U;
#line 41
  goto ldv_51391;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___31);
#line 41
  goto ldv_51391;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___31);
#line 41
  goto ldv_51391;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___31);
#line 41
  goto ldv_51391;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51391;
  }
  ldv_51391: 
#line 41
  __gu_p___32 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 41
  goto ldv_51398;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 41
  goto ldv_51398;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_51398;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_51398;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51398;
  }
  ldv_51398: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___25 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___33 = (void *)tmp___25;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___33) = 22U;
#line 41
  goto ldv_51405;
  case 2UL: 
#line 41
  put_unaligned_le16(22, __gu_p___33);
#line 41
  goto ldv_51405;
  case 4UL: 
#line 41
  put_unaligned_le32(22U, __gu_p___33);
#line 41
  goto ldv_51405;
  case 8UL: 
#line 41
  put_unaligned_le64(22ULL, __gu_p___33);
#line 41
  goto ldv_51405;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51405;
  }
  ldv_51405: 
#line 41
  tmp___26 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___34 = (void *)tmp___26;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___34) = 4U;
#line 41
  goto ldv_51412;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___34);
#line 41
  goto ldv_51412;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___34);
#line 41
  goto ldv_51412;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___34);
#line 41
  goto ldv_51412;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51412;
  }
  ldv_51412: 
#line 41
  __gu_p___35 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 41
  goto ldv_51419;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 41
  goto ldv_51419;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_51419;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_51419;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51419;
  }
  ldv_51419: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___27 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___36 = (void *)tmp___27;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___36) = 24U;
#line 41
  goto ldv_51426;
  case 2UL: 
#line 41
  put_unaligned_le16(24, __gu_p___36);
#line 41
  goto ldv_51426;
  case 4UL: 
#line 41
  put_unaligned_le32(24U, __gu_p___36);
#line 41
  goto ldv_51426;
  case 8UL: 
#line 41
  put_unaligned_le64(24ULL, __gu_p___36);
#line 41
  goto ldv_51426;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51426;
  }
  ldv_51426: 
#line 41
  tmp___28 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___37 = (void *)tmp___28;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___37) = 4U;
#line 41
  goto ldv_51433;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___37);
#line 41
  goto ldv_51433;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___37);
#line 41
  goto ldv_51433;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___37);
#line 41
  goto ldv_51433;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51433;
  }
  ldv_51433: 
#line 41
  __gu_p___38 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 41
  goto ldv_51440;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 41
  goto ldv_51440;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_51440;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_51440;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51440;
  }
  ldv_51440: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___29 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___39 = (void *)tmp___29;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___39) = 25U;
#line 41
  goto ldv_51447;
  case 2UL: 
#line 41
  put_unaligned_le16(25, __gu_p___39);
#line 41
  goto ldv_51447;
  case 4UL: 
#line 41
  put_unaligned_le32(25U, __gu_p___39);
#line 41
  goto ldv_51447;
  case 8UL: 
#line 41
  put_unaligned_le64(25ULL, __gu_p___39);
#line 41
  goto ldv_51447;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51447;
  }
  ldv_51447: 
#line 41
  tmp___30 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___40 = (void *)tmp___30;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___40) = 4U;
#line 41
  goto ldv_51454;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___40);
#line 41
  goto ldv_51454;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___40);
#line 41
  goto ldv_51454;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___40);
#line 41
  goto ldv_51454;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51454;
  }
  ldv_51454: 
#line 41
  __gu_p___41 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 41
  goto ldv_51461;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 41
  goto ldv_51461;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_51461;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_51461;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51461;
  }
  ldv_51461: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___31 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___42 = (void *)tmp___31;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___42) = 26U;
#line 41
  goto ldv_51468;
  case 2UL: 
#line 41
  put_unaligned_le16(26, __gu_p___42);
#line 41
  goto ldv_51468;
  case 4UL: 
#line 41
  put_unaligned_le32(26U, __gu_p___42);
#line 41
  goto ldv_51468;
  case 8UL: 
#line 41
  put_unaligned_le64(26ULL, __gu_p___42);
#line 41
  goto ldv_51468;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51468;
  }
  ldv_51468: 
#line 41
  tmp___32 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___43 = (void *)tmp___32;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___43) = 4U;
#line 41
  goto ldv_51475;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___43);
#line 41
  goto ldv_51475;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___43);
#line 41
  goto ldv_51475;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___43);
#line 41
  goto ldv_51475;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51475;
  }
  ldv_51475: 
#line 41
  __gu_p___44 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 41
  goto ldv_51482;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 41
  goto ldv_51482;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_51482;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_51482;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51482;
  }
  ldv_51482: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___33 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___45 = (void *)tmp___33;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___45) = 39U;
#line 41
  goto ldv_51489;
  case 2UL: 
#line 41
  put_unaligned_le16(39, __gu_p___45);
#line 41
  goto ldv_51489;
  case 4UL: 
#line 41
  put_unaligned_le32(39U, __gu_p___45);
#line 41
  goto ldv_51489;
  case 8UL: 
#line 41
  put_unaligned_le64(39ULL, __gu_p___45);
#line 41
  goto ldv_51489;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51489;
  }
  ldv_51489: 
#line 41
  tmp___34 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___46 = (void *)tmp___34;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___46) = 4U;
#line 41
  goto ldv_51496;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___46);
#line 41
  goto ldv_51496;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___46);
#line 41
  goto ldv_51496;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___46);
#line 41
  goto ldv_51496;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51496;
  }
  ldv_51496: 
#line 41
  __gu_p___47 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 41
  goto ldv_51503;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 41
  goto ldv_51503;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_51503;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_51503;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51503;
  }
  ldv_51503: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___35 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___48 = (void *)tmp___35;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___48) = 40U;
#line 41
  goto ldv_51510;
  case 2UL: 
#line 41
  put_unaligned_le16(40, __gu_p___48);
#line 41
  goto ldv_51510;
  case 4UL: 
#line 41
  put_unaligned_le32(40U, __gu_p___48);
#line 41
  goto ldv_51510;
  case 8UL: 
#line 41
  put_unaligned_le64(40ULL, __gu_p___48);
#line 41
  goto ldv_51510;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51510;
  }
  ldv_51510: 
#line 41
  tmp___36 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___49 = (void *)tmp___36;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___49) = 4U;
#line 41
  goto ldv_51517;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___49);
#line 41
  goto ldv_51517;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___49);
#line 41
  goto ldv_51517;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___49);
#line 41
  goto ldv_51517;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51517;
  }
  ldv_51517: 
#line 41
  __gu_p___50 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 41
  goto ldv_51524;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 41
  goto ldv_51524;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_51524;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_51524;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51524;
  }
  ldv_51524: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___37 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___51 = (void *)tmp___37;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___51) = 67U;
#line 41
  goto ldv_51531;
  case 2UL: 
#line 41
  put_unaligned_le16(67, __gu_p___51);
#line 41
  goto ldv_51531;
  case 4UL: 
#line 41
  put_unaligned_le32(67U, __gu_p___51);
#line 41
  goto ldv_51531;
  case 8UL: 
#line 41
  put_unaligned_le64(67ULL, __gu_p___51);
#line 41
  goto ldv_51531;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51531;
  }
  ldv_51531: 
#line 41
  tmp___38 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___52 = (void *)tmp___38;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___52) = 4U;
#line 41
  goto ldv_51538;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___52);
#line 41
  goto ldv_51538;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___52);
#line 41
  goto ldv_51538;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___52);
#line 41
  goto ldv_51538;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51538;
  }
  ldv_51538: 
#line 41
  __gu_p___53 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 41
  goto ldv_51545;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 41
  goto ldv_51545;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_51545;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_51545;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51545;
  }
  ldv_51545: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___39 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___54 = (void *)tmp___39;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___54) = 81U;
#line 41
  goto ldv_51552;
  case 2UL: 
#line 41
  put_unaligned_le16(81, __gu_p___54);
#line 41
  goto ldv_51552;
  case 4UL: 
#line 41
  put_unaligned_le32(81U, __gu_p___54);
#line 41
  goto ldv_51552;
  case 8UL: 
#line 41
  put_unaligned_le64(81ULL, __gu_p___54);
#line 41
  goto ldv_51552;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51552;
  }
  ldv_51552: 
#line 41
  tmp___40 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___55 = (void *)tmp___40;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___55) = 4U;
#line 41
  goto ldv_51559;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___55);
#line 41
  goto ldv_51559;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___55);
#line 41
  goto ldv_51559;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___55);
#line 41
  goto ldv_51559;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51559;
  }
  ldv_51559: 
#line 41
  __gu_p___56 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 41
  goto ldv_51566;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 41
  goto ldv_51566;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_51566;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_51566;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51566;
  }
  ldv_51566: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___41 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___57 = (void *)tmp___41;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___57) = 82U;
#line 41
  goto ldv_51573;
  case 2UL: 
#line 41
  put_unaligned_le16(82, __gu_p___57);
#line 41
  goto ldv_51573;
  case 4UL: 
#line 41
  put_unaligned_le32(82U, __gu_p___57);
#line 41
  goto ldv_51573;
  case 8UL: 
#line 41
  put_unaligned_le64(82ULL, __gu_p___57);
#line 41
  goto ldv_51573;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51573;
  }
  ldv_51573: 
#line 41
  tmp___42 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___58 = (void *)tmp___42;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___58) = 4U;
#line 41
  goto ldv_51580;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___58);
#line 41
  goto ldv_51580;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___58);
#line 41
  goto ldv_51580;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___58);
#line 41
  goto ldv_51580;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51580;
  }
  ldv_51580: 
#line 41
  __gu_p___59 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 41
  goto ldv_51587;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 41
  goto ldv_51587;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_51587;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_51587;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51587;
  }
  ldv_51587: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___43 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___60 = (void *)tmp___43;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___60) = 83U;
#line 41
  goto ldv_51594;
  case 2UL: 
#line 41
  put_unaligned_le16(83, __gu_p___60);
#line 41
  goto ldv_51594;
  case 4UL: 
#line 41
  put_unaligned_le32(83U, __gu_p___60);
#line 41
  goto ldv_51594;
  case 8UL: 
#line 41
  put_unaligned_le64(83ULL, __gu_p___60);
#line 41
  goto ldv_51594;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51594;
  }
  ldv_51594: 
#line 41
  tmp___44 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___61 = (void *)tmp___44;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___61) = 4U;
#line 41
  goto ldv_51601;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___61);
#line 41
  goto ldv_51601;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___61);
#line 41
  goto ldv_51601;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___61);
#line 41
  goto ldv_51601;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51601;
  }
  ldv_51601: 
#line 41
  __gu_p___62 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 41
  goto ldv_51608;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 41
  goto ldv_51608;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_51608;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_51608;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51608;
  }
  ldv_51608: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___45 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___63 = (void *)tmp___45;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___63) = 60U;
#line 41
  goto ldv_51615;
  case 2UL: 
#line 41
  put_unaligned_le16(41020, __gu_p___63);
#line 41
  goto ldv_51615;
  case 4UL: 
#line 41
  put_unaligned_le32(41020U, __gu_p___63);
#line 41
  goto ldv_51615;
  case 8UL: 
#line 41
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 41
  goto ldv_51615;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51615;
  }
  ldv_51615: 
#line 41
  tmp___46 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___64 = (void *)tmp___46;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___64) = 1U;
#line 41
  goto ldv_51622;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___64);
#line 41
  goto ldv_51622;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___64);
#line 41
  goto ldv_51622;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___64);
#line 41
  goto ldv_51622;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51622;
  }
  ldv_51622: 
#line 41
  *((char *)tags) = (char )arg->mind_af;
#line 41
  tags = tags + 1U;
#line 41
  tmp___47 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___65 = (void *)tmp___47;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___65) = 27U;
#line 41
  goto ldv_51629;
  case 2UL: 
#line 41
  put_unaligned_le16(32795, __gu_p___65);
#line 41
  goto ldv_51629;
  case 4UL: 
#line 41
  put_unaligned_le32(32795U, __gu_p___65);
#line 41
  goto ldv_51629;
  case 8UL: 
#line 41
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 41
  goto ldv_51629;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51629;
  }
  ldv_51629: 
#line 41
  tmp___48 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___66 = (void *)tmp___48;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___66) = 1U;
#line 41
  goto ldv_51636;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___66);
#line 41
  goto ldv_51636;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___66);
#line 41
  goto ldv_51636;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___66);
#line 41
  goto ldv_51636;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51636;
  }
  ldv_51636: 
#line 41
  *((char *)tags) = (char )arg->want_lose;
#line 41
  tags = tags + 1U;
#line 41
  tmp___49 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___67 = (void *)tmp___49;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___67) = 28U;
#line 41
  goto ldv_51643;
  case 2UL: 
#line 41
  put_unaligned_le16(32796, __gu_p___67);
#line 41
  goto ldv_51643;
  case 4UL: 
#line 41
  put_unaligned_le32(32796U, __gu_p___67);
#line 41
  goto ldv_51643;
  case 8UL: 
#line 41
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 41
  goto ldv_51643;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51643;
  }
  ldv_51643: 
#line 41
  tmp___50 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___68 = (void *)tmp___50;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___68) = 1U;
#line 41
  goto ldv_51650;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___68);
#line 41
  goto ldv_51650;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___68);
#line 41
  goto ldv_51650;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___68);
#line 41
  goto ldv_51650;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51650;
  }
  ldv_51650: 
#line 41
  *((char *)tags) = (char )arg->two_primaries;
#line 41
  tags = tags + 1U;
#line 41
  tmp___51 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___69 = (void *)tmp___51;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___69) = 41U;
#line 41
  goto ldv_51657;
  case 2UL: 
#line 41
  put_unaligned_le16(32809, __gu_p___69);
#line 41
  goto ldv_51657;
  case 4UL: 
#line 41
  put_unaligned_le32(32809U, __gu_p___69);
#line 41
  goto ldv_51657;
  case 8UL: 
#line 41
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 41
  goto ldv_51657;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51657;
  }
  ldv_51657: 
#line 41
  tmp___52 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___70 = (void *)tmp___52;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___70) = 1U;
#line 41
  goto ldv_51664;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___70);
#line 41
  goto ldv_51664;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___70);
#line 41
  goto ldv_51664;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___70);
#line 41
  goto ldv_51664;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51664;
  }
  ldv_51664: 
#line 41
  *((char *)tags) = (char )arg->always_asbp;
#line 41
  tags = tags + 1U;
#line 41
  tmp___53 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___71 = (void *)tmp___53;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___71) = 61U;
#line 41
  goto ldv_51671;
  case 2UL: 
#line 41
  put_unaligned_le16(32829, __gu_p___71);
#line 41
  goto ldv_51671;
  case 4UL: 
#line 41
  put_unaligned_le32(32829U, __gu_p___71);
#line 41
  goto ldv_51671;
  case 8UL: 
#line 41
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 41
  goto ldv_51671;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51671;
  }
  ldv_51671: 
#line 41
  tmp___54 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___72 = (void *)tmp___54;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___72) = 1U;
#line 41
  goto ldv_51678;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___72);
#line 41
  goto ldv_51678;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___72);
#line 41
  goto ldv_51678;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___72);
#line 41
  goto ldv_51678;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51678;
  }
  ldv_51678: 
#line 41
  *((char *)tags) = (char )arg->no_cork;
#line 41
  tags = tags + 1U;
#line 41
  tmp___55 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___73 = (void *)tmp___55;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___73) = 62U;
#line 41
  goto ldv_51685;
  case 2UL: 
#line 41
  put_unaligned_le16(41022, __gu_p___73);
#line 41
  goto ldv_51685;
  case 4UL: 
#line 41
  put_unaligned_le32(41022U, __gu_p___73);
#line 41
  goto ldv_51685;
  case 8UL: 
#line 41
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 41
  goto ldv_51685;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51685;
  }
  ldv_51685: 
#line 41
  tmp___56 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___74 = (void *)tmp___56;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___74) = 1U;
#line 41
  goto ldv_51692;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___74);
#line 41
  goto ldv_51692;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___74);
#line 41
  goto ldv_51692;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___74);
#line 41
  goto ldv_51692;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51692;
  }
  ldv_51692: 
#line 41
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 41
  tags = tags + 1U;
#line 41
  tmp___57 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___75 = (void *)tmp___57;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___75) = 70U;
#line 41
  goto ldv_51699;
  case 2UL: 
#line 41
  put_unaligned_le16(41030, __gu_p___75);
#line 41
  goto ldv_51699;
  case 4UL: 
#line 41
  put_unaligned_le32(41030U, __gu_p___75);
#line 41
  goto ldv_51699;
  case 8UL: 
#line 41
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 41
  goto ldv_51699;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51699;
  }
  ldv_51699: 
#line 41
  tmp___58 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___76 = (void *)tmp___58;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___76) = 1U;
#line 41
  goto ldv_51706;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___76);
#line 41
  goto ldv_51706;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___76);
#line 41
  goto ldv_51706;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___76);
#line 41
  goto ldv_51706;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51706;
  }
  ldv_51706: 
#line 41
  *((char *)tags) = (char )arg->dry_run;
#line 41
  tags = tags + 1U;
#line 41
  return (tags);
}
}
#line 104
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 104 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p = (void *)tmp;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p) = 30U;
#line 85
  goto ldv_51803;
  case 2UL: 
#line 85
  put_unaligned_le16(30, __gu_p);
#line 85
  goto ldv_51803;
  case 4UL: 
#line 85
  put_unaligned_le32(30U, __gu_p);
#line 85
  goto ldv_51803;
  case 8UL: 
#line 85
  put_unaligned_le64(30ULL, __gu_p);
#line 85
  goto ldv_51803;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51803;
  }
  ldv_51803: 
#line 85
  tmp___0 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___0 = (void *)tmp___0;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___0) = 4U;
#line 85
  goto ldv_51810;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___0);
#line 85
  goto ldv_51810;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___0);
#line 85
  goto ldv_51810;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___0);
#line 85
  goto ldv_51810;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51810;
  }
  ldv_51810: 
#line 85
  __gu_p___1 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 85
  goto ldv_51817;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 85
  goto ldv_51817;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 85
  goto ldv_51817;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 85
  goto ldv_51817;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51817;
  }
  ldv_51817: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___1 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___2 = (void *)tmp___1;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___2) = 31U;
#line 85
  goto ldv_51824;
  case 2UL: 
#line 85
  put_unaligned_le16(31, __gu_p___2);
#line 85
  goto ldv_51824;
  case 4UL: 
#line 85
  put_unaligned_le32(31U, __gu_p___2);
#line 85
  goto ldv_51824;
  case 8UL: 
#line 85
  put_unaligned_le64(31ULL, __gu_p___2);
#line 85
  goto ldv_51824;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51824;
  }
  ldv_51824: 
#line 85
  tmp___2 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___3 = (void *)tmp___2;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___3) = 4U;
#line 85
  goto ldv_51831;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___3);
#line 85
  goto ldv_51831;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___3);
#line 85
  goto ldv_51831;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___3);
#line 85
  goto ldv_51831;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51831;
  }
  ldv_51831: 
#line 85
  __gu_p___4 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 85
  goto ldv_51838;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 85
  goto ldv_51838;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 85
  goto ldv_51838;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 85
  goto ldv_51838;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51838;
  }
  ldv_51838: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___3 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___5 = (void *)tmp___3;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___5) = 32U;
#line 85
  goto ldv_51845;
  case 2UL: 
#line 85
  put_unaligned_le16(32, __gu_p___5);
#line 85
  goto ldv_51845;
  case 4UL: 
#line 85
  put_unaligned_le32(32U, __gu_p___5);
#line 85
  goto ldv_51845;
  case 8UL: 
#line 85
  put_unaligned_le64(32ULL, __gu_p___5);
#line 85
  goto ldv_51845;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51845;
  }
  ldv_51845: 
#line 85
  tmp___4 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___6 = (void *)tmp___4;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___6) = 4U;
#line 85
  goto ldv_51852;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___6);
#line 85
  goto ldv_51852;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___6);
#line 85
  goto ldv_51852;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___6);
#line 85
  goto ldv_51852;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51852;
  }
  ldv_51852: 
#line 85
  __gu_p___7 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 85
  goto ldv_51859;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 85
  goto ldv_51859;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_51859;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_51859;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51859;
  }
  ldv_51859: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___5 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___8 = (void *)tmp___5;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___8) = 52U;
#line 85
  goto ldv_51866;
  case 2UL: 
#line 85
  put_unaligned_le16(49204, __gu_p___8);
#line 85
  goto ldv_51866;
  case 4UL: 
#line 85
  put_unaligned_le32(49204U, __gu_p___8);
#line 85
  goto ldv_51866;
  case 8UL: 
#line 85
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 85
  goto ldv_51866;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51866;
  }
  ldv_51866: 
#line 85
  tmp___6 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___9 = (void *)tmp___6;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 85
  goto ldv_51873;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 85
  goto ldv_51873;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_51873;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_51873;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51873;
  }
  ldv_51873: 
#line 85
  __len = (size_t )arg->verify_alg_len;
#line 85
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 85
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 85
  tmp___7 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___10 = (void *)tmp___7;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___10) = 51U;
#line 85
  goto ldv_51883;
  case 2UL: 
#line 85
  put_unaligned_le16(49203, __gu_p___10);
#line 85
  goto ldv_51883;
  case 4UL: 
#line 85
  put_unaligned_le32(49203U, __gu_p___10);
#line 85
  goto ldv_51883;
  case 8UL: 
#line 85
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 85
  goto ldv_51883;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51883;
  }
  ldv_51883: 
#line 85
  tmp___8 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___11 = (void *)tmp___8;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 85
  goto ldv_51890;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 85
  goto ldv_51890;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_51890;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_51890;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51890;
  }
  ldv_51890: 
#line 85
  __len___0 = (size_t )arg->cpu_mask_len;
#line 85
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 85
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 85
  tmp___9 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___12 = (void *)tmp___9;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___12) = 64U;
#line 85
  goto ldv_51900;
  case 2UL: 
#line 85
  put_unaligned_le16(49216, __gu_p___12);
#line 85
  goto ldv_51900;
  case 4UL: 
#line 85
  put_unaligned_le32(49216U, __gu_p___12);
#line 85
  goto ldv_51900;
  case 8UL: 
#line 85
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 85
  goto ldv_51900;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51900;
  }
  ldv_51900: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___13 = (void *)tmp___10;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 85
  goto ldv_51907;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 85
  goto ldv_51907;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_51907;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_51907;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51907;
  }
  ldv_51907: 
#line 85
  __len___1 = (size_t )arg->csums_alg_len;
#line 85
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 85
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 85
  tmp___11 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___14 = (void *)tmp___11;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___14) = 65U;
#line 85
  goto ldv_51917;
  case 2UL: 
#line 85
  put_unaligned_le16(32833, __gu_p___14);
#line 85
  goto ldv_51917;
  case 4UL: 
#line 85
  put_unaligned_le32(32833U, __gu_p___14);
#line 85
  goto ldv_51917;
  case 8UL: 
#line 85
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 85
  goto ldv_51917;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51917;
  }
  ldv_51917: 
#line 85
  tmp___12 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___15 = (void *)tmp___12;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___15) = 1U;
#line 85
  goto ldv_51924;
  case 2UL: 
#line 85
  put_unaligned_le16(1, __gu_p___15);
#line 85
  goto ldv_51924;
  case 4UL: 
#line 85
  put_unaligned_le32(1U, __gu_p___15);
#line 85
  goto ldv_51924;
  case 8UL: 
#line 85
  put_unaligned_le64(1ULL, __gu_p___15);
#line 85
  goto ldv_51924;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51924;
  }
  ldv_51924: 
#line 85
  *((char *)tags) = (char )arg->use_rle;
#line 85
  tags = tags + 1U;
#line 85
  tmp___13 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___16 = (void *)tmp___13;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___16) = 75U;
#line 85
  goto ldv_51931;
  case 2UL: 
#line 85
  put_unaligned_le16(75, __gu_p___16);
#line 85
  goto ldv_51931;
  case 4UL: 
#line 85
  put_unaligned_le32(75U, __gu_p___16);
#line 85
  goto ldv_51931;
  case 8UL: 
#line 85
  put_unaligned_le64(75ULL, __gu_p___16);
#line 85
  goto ldv_51931;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51931;
  }
  ldv_51931: 
#line 85
  tmp___14 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___17 = (void *)tmp___14;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___17) = 4U;
#line 85
  goto ldv_51938;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___17);
#line 85
  goto ldv_51938;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___17);
#line 85
  goto ldv_51938;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___17);
#line 85
  goto ldv_51938;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51938;
  }
  ldv_51938: 
#line 85
  __gu_p___18 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 85
  goto ldv_51945;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 85
  goto ldv_51945;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_51945;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_51945;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51945;
  }
  ldv_51945: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___15 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___19 = (void *)tmp___15;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___19) = 76U;
#line 85
  goto ldv_51952;
  case 2UL: 
#line 85
  put_unaligned_le16(76, __gu_p___19);
#line 85
  goto ldv_51952;
  case 4UL: 
#line 85
  put_unaligned_le32(76U, __gu_p___19);
#line 85
  goto ldv_51952;
  case 8UL: 
#line 85
  put_unaligned_le64(76ULL, __gu_p___19);
#line 85
  goto ldv_51952;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51952;
  }
  ldv_51952: 
#line 85
  tmp___16 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___20 = (void *)tmp___16;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___20) = 4U;
#line 85
  goto ldv_51959;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___20);
#line 85
  goto ldv_51959;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___20);
#line 85
  goto ldv_51959;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___20);
#line 85
  goto ldv_51959;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51959;
  }
  ldv_51959: 
#line 85
  __gu_p___21 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 85
  goto ldv_51966;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 85
  goto ldv_51966;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_51966;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_51966;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51966;
  }
  ldv_51966: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___17 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___22 = (void *)tmp___17;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___22) = 77U;
#line 85
  goto ldv_51973;
  case 2UL: 
#line 85
  put_unaligned_le16(77, __gu_p___22);
#line 85
  goto ldv_51973;
  case 4UL: 
#line 85
  put_unaligned_le32(77U, __gu_p___22);
#line 85
  goto ldv_51973;
  case 8UL: 
#line 85
  put_unaligned_le64(77ULL, __gu_p___22);
#line 85
  goto ldv_51973;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51973;
  }
  ldv_51973: 
#line 85
  tmp___18 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___23 = (void *)tmp___18;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___23) = 4U;
#line 85
  goto ldv_51980;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___23);
#line 85
  goto ldv_51980;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___23);
#line 85
  goto ldv_51980;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___23);
#line 85
  goto ldv_51980;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51980;
  }
  ldv_51980: 
#line 85
  __gu_p___24 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 85
  goto ldv_51987;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 85
  goto ldv_51987;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_51987;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_51987;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51987;
  }
  ldv_51987: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___19 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___25 = (void *)tmp___19;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___25) = 78U;
#line 85
  goto ldv_51994;
  case 2UL: 
#line 85
  put_unaligned_le16(78, __gu_p___25);
#line 85
  goto ldv_51994;
  case 4UL: 
#line 85
  put_unaligned_le32(78U, __gu_p___25);
#line 85
  goto ldv_51994;
  case 8UL: 
#line 85
  put_unaligned_le64(78ULL, __gu_p___25);
#line 85
  goto ldv_51994;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51994;
  }
  ldv_51994: 
#line 85
  tmp___20 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___26 = (void *)tmp___20;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___26) = 4U;
#line 85
  goto ldv_52001;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___26);
#line 85
  goto ldv_52001;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___26);
#line 85
  goto ldv_52001;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___26);
#line 85
  goto ldv_52001;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52001;
  }
  ldv_52001: 
#line 85
  __gu_p___27 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 85
  goto ldv_52008;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 85
  goto ldv_52008;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52008;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52008;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52008;
  }
  ldv_52008: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___21 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___28 = (void *)tmp___21;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___28) = 79U;
#line 85
  goto ldv_52015;
  case 2UL: 
#line 85
  put_unaligned_le16(79, __gu_p___28);
#line 85
  goto ldv_52015;
  case 4UL: 
#line 85
  put_unaligned_le32(79U, __gu_p___28);
#line 85
  goto ldv_52015;
  case 8UL: 
#line 85
  put_unaligned_le64(79ULL, __gu_p___28);
#line 85
  goto ldv_52015;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52015;
  }
  ldv_52015: 
#line 85
  tmp___22 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___29 = (void *)tmp___22;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___29) = 4U;
#line 85
  goto ldv_52022;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___29);
#line 85
  goto ldv_52022;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___29);
#line 85
  goto ldv_52022;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___29);
#line 85
  goto ldv_52022;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52022;
  }
  ldv_52022: 
#line 85
  __gu_p___30 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 85
  goto ldv_52029;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 85
  goto ldv_52029;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52029;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52029;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52029;
  }
  ldv_52029: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___23 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___31 = (void *)tmp___23;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___31) = 80U;
#line 85
  goto ldv_52036;
  case 2UL: 
#line 85
  put_unaligned_le16(80, __gu_p___31);
#line 85
  goto ldv_52036;
  case 4UL: 
#line 85
  put_unaligned_le32(80U, __gu_p___31);
#line 85
  goto ldv_52036;
  case 8UL: 
#line 85
  put_unaligned_le64(80ULL, __gu_p___31);
#line 85
  goto ldv_52036;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52036;
  }
  ldv_52036: 
#line 85
  tmp___24 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___32 = (void *)tmp___24;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___32) = 4U;
#line 85
  goto ldv_52043;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___32);
#line 85
  goto ldv_52043;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___32);
#line 85
  goto ldv_52043;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___32);
#line 85
  goto ldv_52043;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52043;
  }
  ldv_52043: 
#line 85
  __gu_p___33 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 85
  goto ldv_52050;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 85
  goto ldv_52050;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52050;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52050;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52050;
  }
  ldv_52050: 
#line 85
  tags = tags + 4U;
#line 85
  return (tags);
}
}
#line 116
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 116 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 114
  tmp = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p = (void *)tmp;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p) = 33U;
#line 114
  goto ldv_52138;
  case 2UL: 
#line 114
  put_unaligned_le16(33, __gu_p);
#line 114
  goto ldv_52138;
  case 4UL: 
#line 114
  put_unaligned_le32(33U, __gu_p);
#line 114
  goto ldv_52138;
  case 8UL: 
#line 114
  put_unaligned_le64(33ULL, __gu_p);
#line 114
  goto ldv_52138;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52138;
  }
  ldv_52138: 
#line 114
  tmp___0 = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p___0 = (void *)tmp___0;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___0) = 4U;
#line 114
  goto ldv_52145;
  case 2UL: 
#line 114
  put_unaligned_le16(4, __gu_p___0);
#line 114
  goto ldv_52145;
  case 4UL: 
#line 114
  put_unaligned_le32(4U, __gu_p___0);
#line 114
  goto ldv_52145;
  case 8UL: 
#line 114
  put_unaligned_le64(4ULL, __gu_p___0);
#line 114
  goto ldv_52145;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52145;
  }
  ldv_52145: 
#line 114
  __gu_p___1 = (void *)tags;
#line 114
  switch (4UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 114
  goto ldv_52152;
  case 2UL: 
#line 114
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 114
  goto ldv_52152;
  case 4UL: 
#line 114
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52152;
  case 8UL: 
#line 114
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52152;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52152;
  }
  ldv_52152: 
#line 114
  tags = tags + 4U;
#line 114
  return (tags);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 190
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 194
  envp[0] = (char *)"HOME=/";
#line 194
  envp[1] = (char *)"TERM=linux";
#line 194
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 194
  envp[3] = 0;
#line 194
  envp[4] = 0;
#line 194
  envp[5] = 0;
#line 202
  argv[0] = (char *)(& usermode_helper);
#line 202
  argv[1] = cmd;
#line 202
  argv[2] = (char *)(& mb);
#line 202
  argv[3] = 0;
#line 205
  tmp = mdev_to_minor(mdev);
#line 205
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 207
  tmp___0 = get_net_conf(mdev);
#line 207
  if (tmp___0 != 0) {
#line 208
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 210
    afs = (char *)"ipv6";
#line 211
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 213
    goto ldv_52473;
    case 2: 
#line 215
    afs = (char *)"ipv4";
#line 216
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 218
    goto ldv_52473;
    default: 
#line 220
    afs = (char *)"ssocks";
#line 221
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_52473: 
#line 224
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 225
    envp[3] = (char *)(& af);
#line 226
    envp[4] = (char *)(& ad);
#line 227
    put_net_conf(mdev);
  } else {

  }
#line 232
  drbd_md_sync(mdev);
#line 234
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 236
  drbd_bcast_ev_helper(mdev, cmd);
#line 237
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 238
  if (ret != 0) {
#line 239
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 243
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 247
  if (ret < 0) {
#line 248
    ret = 0;
  } else {

  }
#line 250
  return (ret);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 260
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            260);
  } else {

  }
#line 262
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 262
  if (tmp != 0) {
#line 263
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 264
    put_ldev(mdev);
  } else {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 267
    nps = (enum drbd_disk_state )mdev->state.ldv_38794.pdsk;
#line 268
    goto out;
  }
#line 271
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 273
  switch ((r >> 8) & 255) {
  case 3: 
#line 275
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 276
  nps = D_INCONSISTENT;
#line 277
  goto ldv_52485;
  case 4: 
#line 279
  ex_to_string = (char *)"peer was fenced";
#line 280
  nps = D_OUTDATED;
#line 281
  goto ldv_52485;
  case 5: ;
#line 283
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 285
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 286
    nps = D_OUTDATED;
  } else {
#line 288
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 289
    nps = (enum drbd_disk_state )mdev->state.ldv_38794.pdsk;
  }
#line 291
  goto ldv_52485;
  case 6: 
#line 295
  ex_to_string = (char *)"peer is active";
#line 296
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 297
  nps = D_UNKNOWN;
#line 298
  val.i = 0U;
#line 298
  val.ldv_38794.disk = 5U;
#line 298
  mask.i = 0U;
#line 298
  mask.ldv_38794.disk = 15U;
#line 298
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 299
  goto ldv_52485;
  case 7: ;
#line 301
  if ((unsigned int )fp != 2U) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 303
  ex_to_string = (char *)"peer was stonithed";
#line 304
  nps = D_OUTDATED;
#line 305
  goto ldv_52485;
  default: 
#line 308
  nps = D_UNKNOWN;
#line 309
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 310
  return (nps);
  }
  ldv_52485: 
#line 313
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 317
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 320
    val___0.i = 0U;
#line 320
    val___0.ldv_38794.susp_fen = 0U;
#line 320
    mask___0.i = 0U;
#line 320
    mask___0.ldv_38794.susp_fen = 1U;
#line 320
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 323
  return (nps);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;
  int tmp ;

  {
#line 328
  mdev = (struct drbd_conf *)data;
#line 332
  nps = drbd_try_outdate_peer(mdev);
#line 345
  spin_lock_irq(& mdev->req_lock);
#line 346
  ns = mdev->state;
#line 347
  if ((int )ns.ldv_38794.conn <= 8) {
#line 347
    tmp = constant_test_bit(30U, (unsigned long const volatile   *)(& mdev->flags));
#line 347
    if (tmp == 0) {
#line 348
      ns.ldv_38794.pdsk = (unsigned char )nps;
#line 349
      _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
    } else {

    }
  } else {

  }
#line 351
  spin_unlock_irq(& mdev->req_lock);
#line 353
  return (0);
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 360
  tmp = mdev_to_minor(mdev);
#line 360
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 360
  __k = tmp___0;
#line 360
  tmp___1 = IS_ERR((void const   *)__k);
#line 360
  if (tmp___1 == 0L) {
#line 360
    wake_up_process(__k);
  } else {

  }
#line 360
  opa = __k;
#line 361
  tmp___2 = IS_ERR((void const   *)opa);
#line 361
  if (tmp___2 != 0L) {
#line 362
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 363
  return;
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 368
  max_tries = 4;
#line 369
  rv = 0;
#line 370
  try = 0;
#line 371
  forced = 0;
#line 375
  if ((unsigned int )new_role == 1U) {
#line 376
    request_ping(mdev);
  } else {

  }
#line 378
  ldv_mutex_lock_199(& mdev->state_mutex);
#line 380
  mask.i = 0U;
#line 380
  mask.ldv_38794.role = 3U;
#line 381
  val.i = 0U;
#line 381
  val.ldv_38794.role = (unsigned char )new_role;
#line 383
  goto ldv_52523;
  ldv_52526: 
#line 384
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 388
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 389
    val.ldv_38794.pdsk = 0U;
#line 390
    mask.ldv_38794.pdsk = 0U;
#line 391
    goto ldv_52523;
  } else {

  }
#line 394
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_38794.disk <= 7 && (int )mdev->state.ldv_38794.disk > 3)) {
#line 397
    mask.ldv_38794.disk = 15U;
#line 398
    val.ldv_38794.disk = 8U;
#line 399
    forced = 1;
#line 400
    goto ldv_52523;
  } else {

  }
#line 403
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 405
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 405
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              405);
    } else {

    }
#line 406
    nps = drbd_try_outdate_peer(mdev);
#line 408
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 409
      val.ldv_38794.disk = 8U;
#line 410
      mask.ldv_38794.disk = 15U;
    } else {

    }
#line 413
    val.ldv_38794.pdsk = (unsigned char )nps;
#line 414
    mask.ldv_38794.pdsk = 15U;
#line 416
    goto ldv_52523;
  } else {

  }
#line 419
  if ((int )rv == 2) {
#line 420
    goto fail;
  } else {

  }
#line 421
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 422
    nps = drbd_try_outdate_peer(mdev);
#line 424
    if (force != 0 && (unsigned int )nps > 5U) {
#line 425
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 426
      nps = D_OUTDATED;
    } else {

    }
#line 429
    mask.ldv_38794.pdsk = 15U;
#line 430
    val.ldv_38794.pdsk = (unsigned char )nps;
#line 432
    goto ldv_52523;
  } else {

  }
#line 434
  if ((int )rv == -1) {
#line 437
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 438
    if (try < max_tries) {
#line 439
      try = max_tries + -1;
    } else {

    }
#line 440
    goto ldv_52523;
  } else {

  }
#line 442
  if ((int )rv <= 0) {
#line 443
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 445
    if ((int )rv <= 0) {
#line 446
      goto fail;
    } else {

    }
  } else {

  }
#line 448
  goto ldv_52525;
  ldv_52523: 
#line 383
  tmp = try;
#line 383
  try = try + 1;
#line 383
  if (tmp < max_tries) {
#line 384
    goto ldv_52526;
  } else {

  }
  ldv_52525: ;
#line 451
  if ((int )rv <= 0) {
#line 452
    goto fail;
  } else {

  }
#line 454
  if (forced != 0) {
#line 455
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 458
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 458
  if (tmp___0 == 0) {
#line 458
    goto ldv_52527;
  } else {

  }
#line 458
  tmp___1 = get_current();
#line 458
  __wait.flags = 0U;
#line 458
  __wait.private = (void *)tmp___1;
#line 458
  __wait.func = & autoremove_wake_function;
#line 458
  __wait.task_list.next = & __wait.task_list;
#line 458
  __wait.task_list.prev = & __wait.task_list;
  ldv_52530: 
#line 458
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 458
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 458
  if (tmp___2 == 0) {
#line 458
    goto ldv_52529;
  } else {

  }
#line 458
  schedule();
#line 458
  goto ldv_52530;
  ldv_52529: 
#line 458
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52527: ;
#line 460
  if ((unsigned int )new_role == 2U) {
#line 461
    set_disk_ro(mdev->vdisk, 1);
#line 462
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 462
    if (tmp___3 != 0) {
#line 463
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 464
      put_ldev(mdev);
    } else {

    }
  } else {
#line 467
    tmp___4 = get_net_conf(mdev);
#line 467
    if (tmp___4 != 0) {
#line 468
      (mdev->net_conf)->want_lose = 0U;
#line 469
      put_net_conf(mdev);
    } else {

    }
#line 471
    set_disk_ro(mdev->vdisk, 0);
#line 472
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 472
    if (tmp___5 != 0) {
#line 473
      if ((((int )mdev->state.ldv_38794.conn <= 9 || (int )mdev->state.ldv_38794.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 476
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 478
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 479
      put_ldev(mdev);
    } else {

    }
  }
#line 486
  if ((int )mdev->state.ldv_38794.conn > 8) {
#line 488
    if (forced != 0) {
#line 489
      drbd_send_uuids(mdev);
    } else {

    }
#line 490
    drbd_send_current_state(mdev);
  } else {

  }
#line 493
  drbd_md_sync(mdev);
#line 495
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 497
  ldv_mutex_unlock_200(& mdev->state_mutex);
#line 498
  return (rv);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 505
  if ((unsigned int )minor >= minor_count) {
#line 506
    return (0);
  } else {

  }
#line 508
  mdev = minor_to_mdev((unsigned int )minor);
#line 510
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 511
    disk = 0;
#line 512
    mdev = drbd_new_device((unsigned int )minor);
#line 514
    spin_lock_irq(& drbd_pp_lock);
#line 515
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 516
      *(minor_table + (unsigned long )minor) = mdev;
#line 517
      disk = mdev->vdisk;
#line 518
      mdev = 0;
    } else {

    }
#line 520
    spin_unlock_irq(& drbd_pp_lock);
#line 522
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 525
      add_disk(disk);
    } else {
#line 527
      drbd_free_mdev(mdev);
    }
#line 529
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 532
  return (mdev);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 540
  memset((void *)(& primary_args), 0, 4UL);
#line 541
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 541
  if (tmp == 0) {
#line 542
    reply->ret_code = 126;
#line 543
    return (0);
  } else {

  }
#line 546
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 546
  reply->ret_code = (int )tmp___0;
#line 549
  return (0);
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 555
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 555
  reply->ret_code = (int )tmp;
#line 557
  return (0);
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 565
  md_size_sect = 0UL;
#line 566
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 569
  bdev->md.md_size_sect = 262144U;
#line 570
  tmp = drbd_md_ss__(mdev, bdev);
#line 570
  bdev->md.md_offset = (u64 )tmp;
#line 571
  bdev->md.al_offset = 8;
#line 572
  bdev->md.bm_offset = 72;
#line 573
  goto ldv_52554;
  case -2: 
#line 576
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 576
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 577
  bdev->md.md_offset = 0ULL;
#line 578
  bdev->md.al_offset = 8;
#line 579
  bdev->md.bm_offset = 72;
#line 580
  goto ldv_52554;
  case -1: ;
  case -3: 
#line 583
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 583
  bdev->md.md_offset = (u64 )tmp___1;
#line 585
  bdev->md.al_offset = -64;
#line 587
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 588
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 589
  md_size_sect = md_size_sect >> 15;
#line 590
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 594
  md_size_sect = md_size_sect + 72UL;
#line 596
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 598
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 599
  goto ldv_52554;
  }
  ldv_52554: ;
#line 602
  return;
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 608
  units[0] = 75;
#line 608
  units[1] = 77;
#line 608
  units[2] = 71;
#line 608
  units[3] = 84;
#line 608
  units[4] = 80;
#line 608
  units[5] = 69;
#line 609
  base = 0;
#line 610
  goto ldv_52565;
  ldv_52564: 
#line 612
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 613
  base = base + 1;
  ldv_52565: ;
#line 610
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 611
    goto ldv_52564;
  } else {

  }
#line 615
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 617
  return (buf);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 635
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 636
  tmp = is_susp(mdev->state);
#line 636
  if (tmp != 0) {
#line 637
    return;
  } else {

  }
#line 638
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 638
  if (tmp___0 == 0) {
#line 638
    goto ldv_52570;
  } else {

  }
#line 638
  tmp___1 = get_current();
#line 638
  __wait.flags = 0U;
#line 638
  __wait.private = (void *)tmp___1;
#line 638
  __wait.func = & autoremove_wake_function;
#line 638
  __wait.task_list.next = & __wait.task_list;
#line 638
  __wait.task_list.prev = & __wait.task_list;
  ldv_52573: 
#line 638
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 638
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 638
  if (tmp___2 == 0) {
#line 638
    goto ldv_52572;
  } else {

  }
#line 638
  schedule();
#line 638
  goto ldv_52573;
  ldv_52572: 
#line 638
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52570: ;
#line 641
  return;
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 643
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 644
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 645
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 662
  rv = 0;
#line 673
  drbd_suspend_io(mdev);
#line 676
  tmp = lc_try_lock(mdev->act_log);
#line 676
  if (tmp != 0) {
#line 676
    goto ldv_52589;
  } else {

  }
#line 676
  tmp___0 = get_current();
#line 676
  __wait.flags = 0U;
#line 676
  __wait.private = (void *)tmp___0;
#line 676
  __wait.func = & autoremove_wake_function;
#line 676
  __wait.task_list.next = & __wait.task_list;
#line 676
  __wait.task_list.prev = & __wait.task_list;
  ldv_52592: 
#line 676
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 676
  tmp___1 = lc_try_lock(mdev->act_log);
#line 676
  if (tmp___1 != 0) {
#line 676
    goto ldv_52591;
  } else {

  }
#line 676
  schedule();
#line 676
  goto ldv_52592;
  ldv_52591: 
#line 676
  finish_wait(& mdev->al_wait, & __wait);
  ldv_52589: 
#line 678
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 679
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 680
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 683
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 685
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 687
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 687
  if (tmp___5 != size) {
#line 687
    goto _L;
  } else {
#line 687
    tmp___6 = drbd_bm_capacity(mdev);
#line 687
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 690
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 691
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 691
      if (tmp___3 != 0L) {
#line 693
        tmp___2 = drbd_bm_capacity(mdev);
#line 693
        size = tmp___2 >> 1;
#line 694
        if (size == 0UL) {
#line 695
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 698
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 702
        rv = dev_size_error;
      } else {

      }
#line 705
      drbd_set_my_capacity(mdev, size);
#line 706
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 707
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 707
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 710
  if ((int )rv == -1) {
#line 711
    goto out;
  } else {

  }
#line 713
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 715
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 715
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 718
  if (la_size_changed != 0 || md_moved != 0) {
#line 721
    drbd_al_shrink(mdev);
#line 722
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 726
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 728
    if (err___0 != 0) {
#line 729
      rv = dev_size_error;
#line 730
      goto out;
    } else {

    }
#line 732
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 735
  if (size > la_size) {
#line 736
    rv = grew;
  } else {

  }
#line 737
  if (size < la_size) {
#line 738
    rv = shrunk;
  } else {

  }
  out: 
#line 740
  lc_unlock(mdev->act_log);
#line 741
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 742
  drbd_resume_io(mdev);
#line 744
  return (rv);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 750
  p_size = mdev->p_size;
#line 751
  la_size = (sector_t )bdev->md.la_size_sect;
#line 753
  u_size = (sector_t )bdev->dc.disk_size;
#line 754
  size = 0UL;
#line 756
  m_size = drbd_get_max_capacity___1(bdev);
#line 758
  if ((int )mdev->state.ldv_38794.conn <= 9 && assume_peer_has_space != 0) {
#line 759
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 760
    p_size = m_size;
  } else {

  }
#line 763
  if (p_size != 0UL && m_size != 0UL) {
#line 764
    __min1 = p_size;
#line 764
    __min2 = m_size;
#line 764
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 766
  if (la_size != 0UL) {
#line 767
    size = la_size;
#line 768
    if (m_size != 0UL && m_size < size) {
#line 769
      size = m_size;
    } else {

    }
#line 770
    if (p_size != 0UL && p_size < size) {
#line 771
      size = p_size;
    } else {

    }
  } else {
#line 773
    if (m_size != 0UL) {
#line 774
      size = m_size;
    } else {

    }
#line 775
    if (p_size != 0UL) {
#line 776
      size = p_size;
    } else {

    }
  }
#line 780
  if (size == 0UL) {
#line 781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 783
  if (u_size != 0UL) {
#line 784
    if (u_size > size) {
#line 785
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 788
      size = u_size;
    }
  } else {

  }
#line 791
  return (size);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 809
  _b = mdev->sync_conf.al_extents <= 6;
#line 809
  if (_b != 0) {
#line 809
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            809);
  } else {

  }
#line 809
  if (_b != 0) {
#line 810
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 812
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 814
    return (0);
  } else {

  }
#line 816
  in_use = 0U;
#line 817
  t = mdev->act_log;
#line 818
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 821
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 823
    return (-12);
  } else {

  }
#line 825
  spin_lock_irq(& mdev->al_lock);
#line 826
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 827
    i = 0;
#line 827
    goto ldv_52621;
    ldv_52620: 
#line 828
    e = lc_element_by_index(t, (unsigned int )i);
#line 829
    if (e->refcnt != 0U) {
#line 830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 832
    in_use = e->refcnt + in_use;
#line 827
    i = i + 1;
    ldv_52621: ;
#line 827
    if ((unsigned int )i < t->nr_elements) {
#line 828
      goto ldv_52620;
    } else {

    }

  } else {

  }
#line 835
  if (in_use == 0U) {
#line 836
    mdev->act_log = n;
  } else {

  }
#line 837
  spin_unlock_irq(& mdev->al_lock);
#line 838
  if (in_use != 0U) {
#line 839
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 840
    lc_destroy(n);
#line 841
    return (-16);
  } else
#line 843
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 844
    lc_destroy(t);
  } else {

  }
#line 846
  drbd_md_mark_dirty(mdev);
#line 847
  return (0);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  int max_hw_sectors ;
  int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 852
  q = mdev->rq_queue;
#line 853
  max_hw_sectors = (int )(max_bio_size >> 9);
#line 854
  max_segments = 0;
#line 856
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 856
  if (tmp___0 != 0) {
#line 857
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 859
    tmp = queue_max_hw_sectors(b);
#line 859
    _min1 = tmp;
#line 859
    _min2 = max_bio_size >> 9;
#line 859
    max_hw_sectors = (int )(_min1 < _min2 ? _min1 : _min2);
#line 860
    max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 861
    put_ldev(mdev);
  } else {

  }
#line 864
  blk_queue_logical_block_size(q, 512);
#line 865
  blk_queue_max_hw_sectors(q, (unsigned int )max_hw_sectors);
#line 867
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 868
  blk_queue_segment_boundary(q, 4095UL);
#line 870
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 870
  if (tmp___1 != 0) {
#line 871
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 873
    blk_queue_stack_limits(q, b___0);
#line 875
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 876
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 879
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 881
    put_ldev(mdev);
  } else {

  }
#line 883
  return;
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  int now ;
  int new ;
  int local ;
  int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;

  {
#line 889
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 889
  now = (int )(tmp << 9);
#line 890
  local = mdev->local_max_bio_size;
#line 891
  peer = mdev->peer_max_bio_size;
#line 893
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 893
  if (tmp___1 != 0) {
#line 894
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 894
    local = (int )(tmp___0 << 9);
#line 895
    mdev->local_max_bio_size = local;
#line 896
    put_ldev(mdev);
  } else {

  }
#line 902
  if ((int )mdev->state.ldv_38794.conn > 9) {
#line 903
    if (mdev->agreed_pro_version <= 93) {
#line 904
      __min1 = mdev->peer_max_bio_size;
#line 904
      __min2 = 32768;
#line 904
      peer = __min1 < __min2 ? __min1 : __min2;
    } else
#line 906
    if (mdev->agreed_pro_version == 94) {
#line 907
      peer = 32768;
    } else {
#line 909
      peer = 131072;
    }
  } else {

  }
#line 912
  __min1___0 = local;
#line 912
  __min2___0 = peer;
#line 912
  new = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 914
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 915
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%d < %d)\n",
            new, now);
  } else {

  }
#line 917
  if (new != now) {
#line 918
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 920
  drbd_setup_queue_param(mdev, (unsigned int )new);
#line 921
  return;
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 932
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 932
  if (tmp == 0) {
#line 932
    goto ldv_52651;
  } else {

  }
#line 932
  tmp___0 = get_current();
#line 932
  __wait.flags = 0U;
#line 932
  __wait.private = (void *)tmp___0;
#line 932
  __wait.func = & autoremove_wake_function;
#line 932
  __wait.task_list.next = & __wait.task_list;
#line 932
  __wait.task_list.prev = & __wait.task_list;
  ldv_52654: 
#line 932
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 932
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 932
  if (tmp___1 == 0) {
#line 932
    goto ldv_52653;
  } else {

  }
#line 932
  schedule();
#line 932
  goto ldv_52654;
  ldv_52653: 
#line 932
  finish_wait(& mdev->state_wait, & __wait);
  ldv_52651: 
#line 933
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 933
  if (tmp___2 == 0) {
#line 933
    goto ldv_52655;
  } else {

  }
#line 933
  tmp___3 = get_current();
#line 933
  __wait___0.flags = 0U;
#line 933
  __wait___0.private = (void *)tmp___3;
#line 933
  __wait___0.func = & autoremove_wake_function;
#line 933
  __wait___0.task_list.next = & __wait___0.task_list;
#line 933
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52658: 
#line 933
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 933
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 933
  if (tmp___4 == 0) {
#line 933
    goto ldv_52657;
  } else {

  }
#line 933
  schedule();
#line 933
  goto ldv_52658;
  ldv_52657: 
#line 933
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_52655: 
#line 934
  drbd_thread_start(& mdev->worker);
#line 935
  drbd_flush_workqueue(mdev);
#line 936
  return;
}
}
#line 941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 943
  spin_lock_irq(& mdev->req_lock);
#line 944
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 947
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 948
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 950
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 951
  spin_unlock_irq(& mdev->req_lock);
#line 952
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 953
  return;
}
}
#line 956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 958
  s = 0;
#line 960
  tmp = lc_try_lock(mdev->act_log);
#line 960
  if (tmp != 0) {
#line 961
    drbd_al_shrink(mdev);
#line 962
    lc_unlock(mdev->act_log);
  } else {
#line 964
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 965
    return;
  }
#line 968
  spin_lock_irq(& mdev->req_lock);
#line 969
  if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 970
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 970
    s = tmp___0 == 0;
  } else {

  }
#line 972
  spin_unlock_irq(& mdev->req_lock);
#line 974
  if (s != 0) {
#line 975
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 976
  return;
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 987
  nbc = 0;
#line 989
  resync_lru = 0;
#line 992
  cp_discovered = 0;
#line 995
  drbd_reconfig_start(mdev);
#line 998
  if ((int )mdev->state.ldv_38794.disk > 0) {
#line 999
    retcode = ERR_DISK_CONFIGURED;
#line 1000
    goto fail;
  } else {

  }
#line 1006
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1006
  if (tmp == 0) {
#line 1006
    goto ldv_52684;
  } else {

  }
#line 1006
  tmp___0 = get_current();
#line 1006
  __wait.flags = 0U;
#line 1006
  __wait.private = (void *)tmp___0;
#line 1006
  __wait.func = & autoremove_wake_function;
#line 1006
  __wait.task_list.next = & __wait.task_list;
#line 1006
  __wait.task_list.prev = & __wait.task_list;
  ldv_52687: 
#line 1006
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1006
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1006
  if (tmp___1 == 0) {
#line 1006
    goto ldv_52686;
  } else {

  }
#line 1006
  schedule();
#line 1006
  goto ldv_52687;
  ldv_52686: 
#line 1006
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52684: 
#line 1009
  tmp___2 = kzalloc(400UL, 208U);
#line 1009
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1010
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1011
    retcode = ERR_NOMEM;
#line 1012
    goto fail;
  } else {

  }
#line 1015
  nbc->dc.disk_size = 0ULL;
#line 1016
  nbc->dc.on_io_error = 0;
#line 1017
  nbc->dc.fencing = 0;
#line 1018
  nbc->dc.max_bio_bvecs = 0;
#line 1020
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1020
  if (tmp___3 == 0) {
#line 1021
    retcode = ERR_MANDATORY_TAG;
#line 1022
    goto fail;
  } else {

  }
#line 1025
  if (nbc->dc.meta_dev_idx < -3) {
#line 1026
    retcode = ERR_MD_IDX_INVALID;
#line 1027
    goto fail;
  } else {

  }
#line 1030
  tmp___4 = get_net_conf(mdev);
#line 1030
  if (tmp___4 != 0) {
#line 1031
    prot = (mdev->net_conf)->wire_protocol;
#line 1032
    put_net_conf(mdev);
#line 1033
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1034
      retcode = ERR_STONITH_AND_PROT_A;
#line 1035
      goto fail;
    } else {

    }
  } else {

  }
#line 1039
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1041
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1041
  if (tmp___6 != 0L) {
#line 1042
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1044
    retcode = ERR_OPEN_DISK;
#line 1045
    goto fail;
  } else {

  }
#line 1047
  nbc->backing_bdev = bdev;
#line 1057
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1061
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1061
  if (tmp___8 != 0L) {
#line 1062
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1062
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1064
    retcode = ERR_OPEN_MD_DISK;
#line 1065
    goto fail;
  } else {

  }
#line 1067
  nbc->md_bdev = bdev;
#line 1069
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1072
    retcode = ERR_MD_IDX_INVALID;
#line 1073
    goto fail;
  } else {

  }
#line 1076
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1079
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1080
    retcode = ERR_NOMEM;
#line 1081
    goto fail;
  } else {

  }
#line 1085
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1087
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1087
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1088
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1088
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1091
    retcode = ERR_DISK_TOO_SMALL;
#line 1092
    goto fail;
  } else {

  }
#line 1095
  if (nbc->dc.meta_dev_idx < 0) {
#line 1096
    max_possible_sectors = 2251799813685248UL;
#line 1098
    min_md_device_sectors = 2048UL;
  } else {
#line 1100
    max_possible_sectors = 8587575296UL;
#line 1101
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1104
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1104
  if (tmp___11 < min_md_device_sectors) {
#line 1105
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1106
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1109
    goto fail;
  } else {

  }
#line 1114
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1114
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1114
  if (tmp___12 < tmp___13) {
#line 1116
    retcode = ERR_DISK_TOO_SMALL;
#line 1117
    goto fail;
  } else {

  }
#line 1120
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1122
  if (nbc->known_size > max_possible_sectors) {
#line 1123
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1126
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1127
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1131
  drbd_suspend_io(mdev);
#line 1133
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1133
  if (tmp___14 == 0) {
#line 1133
    goto ldv_52689;
  } else {
#line 1133
    tmp___15 = is_susp(mdev->state);
#line 1133
    if (tmp___15 != 0) {
#line 1133
      goto ldv_52689;
    } else {

    }
  }
#line 1133
  tmp___16 = get_current();
#line 1133
  __wait___0.flags = 0U;
#line 1133
  __wait___0.private = (void *)tmp___16;
#line 1133
  __wait___0.func = & autoremove_wake_function;
#line 1133
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1133
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52692: 
#line 1133
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1133
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1133
  if (tmp___17 == 0) {
#line 1133
    goto ldv_52691;
  } else {
#line 1133
    tmp___18 = is_susp(mdev->state);
#line 1133
    if (tmp___18 != 0) {
#line 1133
      goto ldv_52691;
    } else {

    }
  }
#line 1133
  schedule();
#line 1133
  goto ldv_52692;
  ldv_52691: 
#line 1133
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_52689: 
#line 1135
  drbd_flush_workqueue(mdev);
#line 1137
  val.i = 0U;
#line 1137
  val.ldv_38794.disk = 1U;
#line 1137
  mask.i = 0U;
#line 1137
  mask.ldv_38794.disk = 15U;
#line 1137
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1138
  retcode = (enum drbd_ret_code )rv;
#line 1139
  drbd_resume_io(mdev);
#line 1140
  if ((int )rv <= 0) {
#line 1141
    goto fail;
  } else {

  }
#line 1143
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1143
  if (tmp___19 == 0) {
#line 1144
    goto force_diskless;
  } else {

  }
#line 1146
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1149
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1149
  logical_block_size = (int )tmp___20;
#line 1150
  if (logical_block_size == 0) {
#line 1151
    logical_block_size = 512;
  } else {

  }
#line 1153
  if (logical_block_size != 512) {
#line 1154
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1155
      tmp___21 = alloc_pages(16U, 0U);
#line 1155
      page = tmp___21;
#line 1156
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1157
        goto force_diskless_dec;
      } else {

      }
#line 1159
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1161
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1163
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1167
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1168
    tmp___22 = drbd_bm_init(mdev);
#line 1168
    if (tmp___22 != 0) {
#line 1169
      retcode = ERR_NOMEM;
#line 1170
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1174
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1174
  retcode = (enum drbd_ret_code )tmp___23;
#line 1175
  if ((unsigned int )retcode != 101U) {
#line 1176
    goto force_diskless_dec;
  } else {

  }
#line 1178
  if (((int )mdev->state.ldv_38794.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1183
    retcode = ERR_DATA_NOT_CURRENT;
#line 1184
    goto force_diskless_dec;
  } else {

  }
#line 1188
  tmp___24 = drbd_check_al_size(mdev);
#line 1188
  if (tmp___24 != 0) {
#line 1189
    retcode = ERR_NOMEM;
#line 1190
    goto force_diskless_dec;
  } else {

  }
#line 1194
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1194
  if (tmp___25 != 0) {
#line 1194
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1194
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1196
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1197
      retcode = ERR_DISK_TOO_SMALL;
#line 1198
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1201
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1201
  if (tmp___27 == 0) {
#line 1202
    retcode = ERR_IO_MD_DISK;
#line 1203
    goto force_diskless_dec;
  } else {

  }
#line 1208
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1209
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1211
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1217
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1217
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1217);
  } else {

  }
#line 1218
  mdev->ldev = nbc;
#line 1219
  mdev->resync = resync_lru;
#line 1220
  nbc = 0;
#line 1221
  resync_lru = 0;
#line 1223
  mdev->write_ordering = WO_bdev_flush;
#line 1224
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1226
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1226
  if (tmp___28 != 0) {
#line 1227
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1229
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1231
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1231
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1233
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1234
    cp_discovered = 1;
  } else {

  }
#line 1237
  mdev->send_cnt = 0U;
#line 1238
  mdev->recv_cnt = 0U;
#line 1239
  mdev->read_cnt = 0U;
#line 1240
  mdev->writ_cnt = 0U;
#line 1242
  drbd_reconsider_max_bio_size(mdev);
#line 1258
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1259
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1259
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1259
    if (tmp___30 != 0) {
#line 1259
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1259
      if (tmp___31 == 0) {
#line 1262
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1264
  dd = drbd_determine_dev_size(mdev, 0);
#line 1265
  if ((int )dd == -1) {
#line 1266
    retcode = ERR_NOMEM_BITMAP;
#line 1267
    goto force_diskless_dec;
  } else
#line 1268
  if ((int )dd == 2) {
#line 1269
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1271
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1271
  if (tmp___34 != 0) {
#line 1272
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1274
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1274
    if (tmp___32 != 0) {
#line 1276
      retcode = ERR_IO_MD_DISK;
#line 1277
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1280
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1280
    if (tmp___33 < 0) {
#line 1282
      retcode = ERR_IO_MD_DISK;
#line 1283
      goto force_diskless_dec;
    } else {

    }
  }
#line 1287
  if (cp_discovered != 0) {
#line 1288
    drbd_al_apply_to_bm(mdev);
#line 1289
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1289
    if (tmp___35 != 0) {
#line 1291
      retcode = ERR_IO_MD_DISK;
#line 1292
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1296
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1296
  tmp___37 = drbd_bm_bits(mdev);
#line 1296
  if (tmp___36 == tmp___37) {
#line 1297
    drbd_suspend_al(mdev);
  } else {

  }
#line 1299
  spin_lock_irq(& mdev->req_lock);
#line 1300
  os = mdev->state;
#line 1301
  ns.i = os.i;
#line 1307
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1307
  if (tmp___39 != 0) {
#line 1308
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1308
    if (tmp___38 != 0) {
#line 1309
      ns.ldv_38794.disk = 7U;
    } else {
#line 1311
      ns.ldv_38794.disk = 5U;
    }
  } else {
#line 1313
    ns.ldv_38794.disk = 4U;
  }
#line 1316
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1316
  if (tmp___40 != 0) {
#line 1317
    ns.ldv_38794.pdsk = 5U;
  } else {

  }
#line 1319
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1321
    ns.ldv_38794.disk = 8U;
  } else {

  }
#line 1330
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1331
    mdev->new_state_tmp.i = ns.i;
#line 1332
    ns.i = os.i;
#line 1333
    ns.ldv_38794.disk = 3U;
#line 1338
    kfree((void const   *)mdev->p_uuid);
#line 1339
    mdev->p_uuid = 0;
  } else {

  }
#line 1342
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1343
  ns = mdev->state;
#line 1344
  spin_unlock_irq(& mdev->req_lock);
#line 1346
  if ((int )rv <= 0) {
#line 1347
    goto force_diskless_dec;
  } else {

  }
#line 1349
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1350
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1352
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1354
  drbd_md_mark_dirty(mdev);
#line 1355
  drbd_md_sync(mdev);
#line 1357
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1358
  put_ldev(mdev);
#line 1359
  reply->ret_code = (int )retcode;
#line 1360
  drbd_reconfig_done(mdev);
#line 1361
  return (0);
  force_diskless_dec: 
#line 1364
  put_ldev(mdev);
  force_diskless: 
#line 1366
  val___0.i = 0U;
#line 1366
  val___0.ldv_38794.disk = 2U;
#line 1366
  mask___0.i = 0U;
#line 1366
  mask___0.ldv_38794.disk = 15U;
#line 1366
  drbd_force_state(mdev, mask___0, val___0);
#line 1367
  drbd_md_sync(mdev);
  fail: ;
#line 1369
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1370
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1371
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1373
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1374
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1376
    kfree((void const   *)nbc);
  } else {

  }
#line 1378
  lc_destroy(resync_lru);
#line 1380
  reply->ret_code = (int )retcode;
#line 1381
  drbd_reconfig_done(mdev);
#line 1382
  return (0);
}
}
#line 1390 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  struct detach dt ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___0 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1395
  dt.detach_force = (unsigned char)0;
#line 1397
  tmp = detach_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dt);
#line 1397
  if (tmp == 0) {
#line 1398
    reply->ret_code = 126;
#line 1399
    goto out;
  } else {

  }
#line 1402
  if ((unsigned int )*((unsigned char *)(& dt) + 0UL) != 0U) {
#line 1403
    val.i = 0U;
#line 1403
    val.ldv_38794.disk = 2U;
#line 1403
    mask.i = 0U;
#line 1403
    mask.ldv_38794.disk = 15U;
#line 1403
    drbd_force_state(mdev, mask, val);
#line 1404
    reply->ret_code = 1;
#line 1405
    goto out;
  } else {

  }
#line 1408
  drbd_suspend_io(mdev);
#line 1409
  drbd_md_get_buffer(mdev);
#line 1410
  val___0.i = 0U;
#line 1410
  val___0.ldv_38794.disk = 2U;
#line 1410
  mask___0.i = 0U;
#line 1410
  mask___0.ldv_38794.disk = 15U;
#line 1410
  tmp___0 = drbd_request_state(mdev, mask___0, val___0);
#line 1410
  retcode = (enum drbd_ret_code )tmp___0;
#line 1411
  drbd_md_put_buffer(mdev);
#line 1413
  __ret = 0;
#line 1413
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1413
    tmp___1 = get_current();
#line 1413
    __wait.flags = 0U;
#line 1413
    __wait.private = (void *)tmp___1;
#line 1413
    __wait.func = & autoremove_wake_function;
#line 1413
    __wait.task_list.next = & __wait.task_list;
#line 1413
    __wait.task_list.prev = & __wait.task_list;
    ldv_52725: 
#line 1413
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1413
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1413
      goto ldv_52723;
    } else {

    }
#line 1413
    tmp___2 = get_current();
#line 1413
    tmp___3 = signal_pending(tmp___2);
#line 1413
    if (tmp___3 == 0) {
#line 1413
      schedule();
#line 1413
      goto ldv_52724;
    } else {

    }
#line 1413
    __ret = -512;
#line 1413
    goto ldv_52723;
    ldv_52724: ;
#line 1413
    goto ldv_52725;
    ldv_52723: 
#line 1413
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1413
  ret = __ret;
#line 1415
  drbd_resume_io(mdev);
#line 1417
  if ((long )retcode == 4294967285L) {
#line 1418
    retcode = 2;
  } else {

  }
#line 1419
  if (ret != 0) {
#line 1420
    retcode = ERR_INTR;
  } else {

  }
#line 1421
  reply->ret_code = (int )retcode;
  out: ;
#line 1423
  return (0);
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1431
  new_conf = 0;
#line 1432
  tfm = 0;
#line 1433
  integrity_w_tfm = 0;
#line 1434
  integrity_r_tfm = 0;
#line 1435
  new_tl_hash = 0;
#line 1436
  new_ee_hash = 0;
#line 1439
  int_dig_out = 0;
#line 1440
  int_dig_in = 0;
#line 1441
  int_dig_vv = 0;
#line 1444
  drbd_reconfig_start(mdev);
#line 1446
  if ((int )mdev->state.ldv_38794.conn > 0) {
#line 1447
    retcode = ERR_NET_CONFIGURED;
#line 1448
    goto fail;
  } else {

  }
#line 1452
  tmp = kzalloc(544UL, 208U);
#line 1452
  new_conf = (struct net_conf *)tmp;
#line 1453
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1454
    retcode = ERR_NOMEM;
#line 1455
    goto fail;
  } else {

  }
#line 1458
  new_conf->timeout = 60;
#line 1459
  new_conf->try_connect_int = 10;
#line 1460
  new_conf->ping_int = 10;
#line 1461
  new_conf->max_epoch_size = 2048;
#line 1462
  new_conf->max_buffers = 2048;
#line 1463
  new_conf->unplug_watermark = 128;
#line 1464
  new_conf->sndbuf_size = 0;
#line 1465
  new_conf->rcvbuf_size = 0;
#line 1466
  new_conf->ko_count = 0;
#line 1467
  new_conf->after_sb_0p = 0;
#line 1468
  new_conf->after_sb_1p = 0;
#line 1469
  new_conf->after_sb_2p = 0;
#line 1470
  new_conf->want_lose = 0U;
#line 1471
  new_conf->two_primaries = 0U;
#line 1472
  new_conf->wire_protocol = 3;
#line 1473
  new_conf->ping_timeo = 5;
#line 1474
  new_conf->rr_conflict = 0;
#line 1475
  new_conf->on_congestion = 0;
#line 1476
  new_conf->cong_extents = 127;
#line 1478
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1478
  if (tmp___0 == 0) {
#line 1479
    retcode = ERR_MANDATORY_TAG;
#line 1480
    goto fail;
  } else {

  }
#line 1483
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1485
    retcode = ERR_NOT_PROTO_C;
#line 1486
    goto fail;
  } else {

  }
#line 1489
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1489
  if (tmp___1 != 0) {
#line 1490
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1491
    put_ldev(mdev);
#line 1492
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1493
      retcode = ERR_STONITH_AND_PROT_A;
#line 1494
      goto fail;
    } else {

    }
  } else {

  }
#line 1498
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1499
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1500
    goto fail;
  } else {

  }
#line 1503
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1504
    retcode = ERR_DISCARD;
#line 1505
    goto fail;
  } else {

  }
#line 1508
  retcode = NO_ERROR;
#line 1510
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1511
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1512
  i = 0;
#line 1512
  goto ldv_52753;
  ldv_52752: 
#line 1513
  odev = minor_to_mdev((unsigned int )i);
#line 1514
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1515
    goto ldv_52751;
  } else {

  }
#line 1516
  tmp___4 = get_net_conf(odev);
#line 1516
  if (tmp___4 != 0) {
#line 1517
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1518
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1518
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1518
      if (tmp___2 == 0) {
#line 1520
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1522
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1523
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1523
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1523
      if (tmp___3 == 0) {
#line 1525
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1527
    put_net_conf(odev);
#line 1528
    if ((unsigned int )retcode != 101U) {
#line 1529
      goto fail;
    } else {

    }
  } else {

  }
  ldv_52751: 
#line 1512
  i = i + 1;
  ldv_52753: ;
#line 1512
  if ((unsigned int )i < minor_count) {
#line 1513
    goto ldv_52752;
  } else {

  }

#line 1533
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1534
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1536
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1537
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1537
    if (tmp___5 != 0L) {
#line 1538
      tfm = 0;
#line 1539
      retcode = ERR_AUTH_ALG;
#line 1540
      goto fail;
    } else {

    }
#line 1543
    tmp___6 = crypto_hash_tfm(tfm);
#line 1543
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1543
    if (tmp___7 == 0) {
#line 1544
      retcode = ERR_AUTH_ALG_ND;
#line 1545
      goto fail;
    } else {

    }
  } else {

  }
#line 1549
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1550
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1551
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1551
    if (tmp___8 != 0L) {
#line 1552
      integrity_w_tfm = 0;
#line 1553
      retcode = ERR_INTEGRITY_ALG;
#line 1554
      goto fail;
    } else {

    }
#line 1557
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1557
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1557
    if (tmp___10 == 0) {
#line 1558
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1559
      goto fail;
    } else {

    }
#line 1562
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1563
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1563
    if (tmp___11 != 0L) {
#line 1564
      integrity_r_tfm = 0;
#line 1565
      retcode = ERR_INTEGRITY_ALG;
#line 1566
      goto fail;
    } else {

    }
  } else {

  }
#line 1570
  ns = new_conf->max_epoch_size / 8;
#line 1571
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1572
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1572
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1573
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1574
      retcode = ERR_NOMEM;
#line 1575
      goto fail;
    } else {

    }
  } else {

  }
#line 1579
  ns = new_conf->max_buffers / 8;
#line 1580
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1581
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1581
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1582
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1583
      retcode = ERR_NOMEM;
#line 1584
      goto fail;
    } else {

    }
  } else {

  }
#line 1588
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1590
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1591
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1591
    i = (int )tmp___14;
#line 1592
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1593
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1594
      retcode = ERR_NOMEM;
#line 1595
      goto fail;
    } else {

    }
#line 1597
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1598
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1599
      retcode = ERR_NOMEM;
#line 1600
      goto fail;
    } else {

    }
#line 1602
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1603
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1604
      retcode = ERR_NOMEM;
#line 1605
      goto fail;
    } else {

    }
  } else {

  }
#line 1609
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1610
    tmp___15 = drbd_bm_init(mdev);
#line 1610
    if (tmp___15 != 0) {
#line 1611
      retcode = ERR_NOMEM;
#line 1612
      goto fail;
    } else {

    }
  } else {

  }
#line 1616
  drbd_flush_workqueue(mdev);
#line 1617
  spin_lock_irq(& mdev->req_lock);
#line 1618
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1619
    retcode = ERR_NET_CONFIGURED;
#line 1620
    spin_unlock_irq(& mdev->req_lock);
#line 1621
    goto fail;
  } else {

  }
#line 1623
  mdev->net_conf = new_conf;
#line 1625
  mdev->send_cnt = 0U;
#line 1626
  mdev->recv_cnt = 0U;
#line 1628
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1629
    kfree((void const   *)mdev->tl_hash);
#line 1630
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1631
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1634
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1635
    kfree((void const   *)mdev->ee_hash);
#line 1636
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1637
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1640
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1641
  mdev->cram_hmac_tfm = tfm;
#line 1643
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1644
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1646
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1647
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1649
  kfree((void const   *)mdev->int_dig_out);
#line 1650
  kfree((void const   *)mdev->int_dig_in);
#line 1651
  kfree((void const   *)mdev->int_dig_vv);
#line 1652
  mdev->int_dig_out = int_dig_out;
#line 1653
  mdev->int_dig_in = int_dig_in;
#line 1654
  mdev->int_dig_vv = int_dig_vv;
#line 1655
  __ns.i = mdev->state.i;
#line 1655
  __ns.ldv_38794.conn = 2U;
#line 1655
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1655
  retcode = (enum drbd_ret_code )tmp___16;
#line 1656
  spin_unlock_irq(& mdev->req_lock);
#line 1658
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1659
  reply->ret_code = (int )retcode;
#line 1660
  drbd_reconfig_done(mdev);
#line 1661
  return (0);
  fail: 
#line 1664
  kfree((void const   *)int_dig_out);
#line 1665
  kfree((void const   *)int_dig_in);
#line 1666
  kfree((void const   *)int_dig_vv);
#line 1667
  crypto_free_hash(tfm);
#line 1668
  crypto_free_hash(integrity_w_tfm);
#line 1669
  crypto_free_hash(integrity_r_tfm);
#line 1670
  kfree((void const   *)new_tl_hash);
#line 1671
  kfree((void const   *)new_ee_hash);
#line 1672
  kfree((void const   *)new_conf);
#line 1674
  reply->ret_code = (int )retcode;
#line 1675
  drbd_reconfig_done(mdev);
#line 1676
  return (0);
}
}
#line 1679 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1685
  memset((void *)(& dc), 0, 4UL);
#line 1686
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1686
  if (tmp == 0) {
#line 1687
    retcode = 126;
#line 1688
    goto fail;
  } else {

  }
#line 1691
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1692
    spin_lock_irq(& mdev->req_lock);
#line 1693
    if ((int )mdev->state.ldv_38794.conn > 7) {
#line 1694
      __ns.i = mdev->state.i;
#line 1694
      __ns.ldv_38794.conn = 1U;
#line 1694
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1695
    spin_unlock_irq(& mdev->req_lock);
#line 1696
    goto done;
  } else {

  }
#line 1699
  val.i = 0U;
#line 1699
  val.ldv_38794.conn = 1U;
#line 1699
  mask.i = 0U;
#line 1699
  mask.ldv_38794.conn = 31U;
#line 1699
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1699
  retcode = (int )tmp___0;
#line 1701
  if (retcode == 2) {
#line 1702
    goto done;
  } else
#line 1703
  if (retcode == -9) {
#line 1704
    goto done;
  } else
#line 1705
  if (retcode == -7) {
#line 1708
    val___0.i = 0U;
#line 1708
    val___0.ldv_38794.conn = 1U;
#line 1708
    val___0.ldv_38794.pdsk = 5U;
#line 1707
    mask___0.i = 0U;
#line 1707
    mask___0.ldv_38794.conn = 31U;
#line 1708
    mask___0.ldv_38794.pdsk = 15U;
#line 1708
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1709
  if (retcode == -10) {
#line 1712
    val___1.i = 0U;
#line 1712
    val___1.ldv_38794.conn = 1U;
#line 1712
    val___1.ldv_38794.disk = 5U;
#line 1711
    mask___1.i = 0U;
#line 1711
    mask___1.ldv_38794.conn = 31U;
#line 1712
    mask___1.ldv_38794.disk = 15U;
#line 1712
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1712
    retcode = (int )tmp___1;
#line 1714
    if (retcode == -11 || retcode == -16) {
#line 1715
      val___2.i = 0U;
#line 1715
      val___2.ldv_38794.conn = 1U;
#line 1715
      mask___2.i = 0U;
#line 1715
      mask___2.ldv_38794.conn = 31U;
#line 1715
      drbd_force_state(mdev, mask___2, val___2);
#line 1716
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1720
  if (retcode <= 0) {
#line 1721
    goto fail;
  } else {

  }
#line 1723
  __ret = 0;
#line 1723
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1723
    tmp___2 = get_current();
#line 1723
    __wait.flags = 0U;
#line 1723
    __wait.private = (void *)tmp___2;
#line 1723
    __wait.func = & autoremove_wake_function;
#line 1723
    __wait.task_list.next = & __wait.task_list;
#line 1723
    __wait.task_list.prev = & __wait.task_list;
    ldv_52788: 
#line 1723
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1723
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1723
      goto ldv_52786;
    } else {

    }
#line 1723
    tmp___3 = get_current();
#line 1723
    tmp___4 = signal_pending(tmp___3);
#line 1723
    if (tmp___4 == 0) {
#line 1723
      schedule();
#line 1723
      goto ldv_52787;
    } else {

    }
#line 1723
    __ret = -512;
#line 1723
    goto ldv_52786;
    ldv_52787: ;
#line 1723
    goto ldv_52788;
    ldv_52786: 
#line 1723
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1723
  if (__ret != 0) {
#line 1727
    retcode = 129;
#line 1728
    goto fail;
  } else {

  }
  done: 
#line 1732
  retcode = 101;
  fail: 
#line 1734
  drbd_md_sync(mdev);
#line 1735
  reply->ret_code = retcode;
#line 1736
  return (0);
}
}
#line 1739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1743
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1744
  if ((int )mdev->state.ldv_38794.role != (int )mdev->state.ldv_38794.peer) {
#line 1745
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1747
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1749
  if (iass != 0) {
#line 1750
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1752
    val.i = 0U;
#line 1752
    val.ldv_38794.conn = 15U;
#line 1752
    mask.i = 0U;
#line 1752
    mask.ldv_38794.conn = 31U;
#line 1752
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1754
  return;
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1759
  retcode = 101;
#line 1763
  memset((void *)(& rs), 0, 16UL);
#line 1764
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1764
  if (tmp == 0) {
#line 1765
    retcode = 126;
#line 1766
    goto fail;
  } else {

  }
#line 1769
  if ((int )mdev->state.ldv_38794.conn > 10) {
#line 1770
    retcode = 130;
#line 1771
    goto fail;
  } else {

  }
#line 1774
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1776
    retcode = 131;
#line 1777
    goto fail;
  } else {

  }
#line 1780
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1780
  if (tmp___0 == 0) {
#line 1781
    retcode = 138;
#line 1782
    goto fail;
  } else {

  }
#line 1785
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1786
    retcode = 153;
#line 1787
    goto fail_ldev;
  } else {

  }
#line 1790
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1790
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1791
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1793
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1794
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1795
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1796
  drbd_md_sync(mdev);
#line 1797
  put_ldev(mdev);
#line 1798
  if ((int )dd == -1) {
#line 1799
    retcode = 140;
#line 1800
    goto fail;
  } else {

  }
#line 1803
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1804
    if ((int )dd == 2) {
#line 1805
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1807
    drbd_send_uuids(mdev);
#line 1808
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1812
  reply->ret_code = retcode;
#line 1813
  return (0);
  fail_ldev: 
#line 1816
  put_ldev(mdev);
#line 1817
  goto fail;
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1823
  retcode = 101;
#line 1827
  verify_tfm = 0;
#line 1828
  csums_tfm = 0;
#line 1831
  rs_plan_s = 0;
#line 1834
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1834
  if (tmp) {
#line 1834
    tmp___0 = 0;
  } else {
#line 1834
    tmp___0 = 1;
  }
#line 1834
  if (tmp___0) {
#line 1835
    retcode = 122;
#line 1836
    goto fail;
  } else {

  }
#line 1839
  if ((nlp->flags & 2) != 0) {
#line 1840
    memset((void *)(& sc), 0, 212UL);
#line 1841
    sc.rate = 250;
#line 1842
    sc.after = -1;
#line 1843
    sc.al_extents = 127;
#line 1844
    sc.on_no_data = 0;
#line 1845
    sc.c_plan_ahead = 0;
#line 1846
    sc.c_delay_target = 10;
#line 1847
    sc.c_fill_target = 0;
#line 1848
    sc.c_max_rate = 102400;
#line 1849
    sc.c_min_rate = 4096;
  } else {
#line 1851
    __len = 212UL;
#line 1851
    if (__len > 63UL) {
#line 1851
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1851
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1853
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1853
  if (tmp___1 == 0) {
#line 1854
    retcode = 126;
#line 1855
    goto fail;
  } else {

  }
#line 1859
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1864
  if (rsr != 0) {
#line 1864
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1864
    if (tmp___2 != 0) {
#line 1865
      retcode = 148;
#line 1866
      goto fail;
    } else {

    }
  } else {

  }
#line 1869
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1870
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1871
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1871
    if (tmp___3 != 0L) {
#line 1872
      csums_tfm = 0;
#line 1873
      retcode = 144;
#line 1874
      goto fail;
    } else {

    }
#line 1877
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1877
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1877
    if (tmp___5 == 0) {
#line 1878
      retcode = 145;
#line 1879
      goto fail;
    } else {

    }
  } else {

  }
#line 1884
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1886
  if (ovr != 0) {
#line 1887
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1887
    if (tmp___6 != 0) {
#line 1888
      retcode = 149;
#line 1889
      goto fail;
    } else {

    }
  } else {

  }
#line 1893
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1894
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1895
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1895
    if (tmp___7 != 0L) {
#line 1896
      verify_tfm = 0;
#line 1897
      retcode = 146;
#line 1898
      goto fail;
    } else {

    }
#line 1901
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1901
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1901
    if (tmp___9 == 0) {
#line 1902
      retcode = 147;
#line 1903
      goto fail;
    } else {

    }
  } else {

  }
#line 1908
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1909
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1911
    if (err != 0) {
#line 1912
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1913
      retcode = 143;
#line 1914
      goto fail;
    } else {

    }
  } else {

  }
#line 1918
  _b = sc.rate <= 0;
#line 1918
  if (_b != 0) {
#line 1918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1918);
  } else {

  }
#line 1918
  if (_b != 0) {
#line 1918
    sc.rate = 1;
  } else {

  }
#line 1919
  _b___0 = sc.al_extents <= 6;
#line 1919
  if (_b___0 != 0) {
#line 1919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1919);
  } else {

  }
#line 1919
  if (_b___0 != 0) {
#line 1919
    sc.al_extents = 127;
  } else {

  }
#line 1921
  if (sc.al_extents > 3843) {
#line 1922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1923
    sc.al_extents = 3843;
  } else {

  }
#line 1930
  if (sc.after >= 0) {
#line 1931
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1936
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1937
  if (retcode != 101) {
#line 1938
    goto fail;
  } else {

  }
#line 1940
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1941
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1942
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1942
    rs_plan_s = (int *)tmp___10;
#line 1943
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1944
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1945
      retcode = 122;
#line 1946
      goto fail;
    } else {

    }
  } else {

  }
#line 1952
  spin_lock(& mdev->peer_seq_lock);
#line 1953
  mdev->sync_conf = sc;
#line 1955
  if (rsr == 0) {
#line 1956
    crypto_free_hash(mdev->csums_tfm);
#line 1957
    mdev->csums_tfm = csums_tfm;
#line 1958
    csums_tfm = 0;
  } else {

  }
#line 1961
  if (ovr == 0) {
#line 1962
    crypto_free_hash(mdev->verify_tfm);
#line 1963
    mdev->verify_tfm = verify_tfm;
#line 1964
    verify_tfm = 0;
  } else {

  }
#line 1967
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1968
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1969
    mdev->rs_plan_s.values = rs_plan_s;
#line 1970
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1971
    mdev->rs_planed = 0;
#line 1972
    rs_plan_s = 0;
  } else {

  }
#line 1975
  spin_unlock(& mdev->peer_seq_lock);
#line 1977
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1977
  if (tmp___14 != 0) {
#line 1978
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1978
    if (tmp___11 != 0) {
#line 1978
      goto ldv_52833;
    } else {

    }
#line 1978
    tmp___12 = get_current();
#line 1978
    __wait.flags = 0U;
#line 1978
    __wait.private = (void *)tmp___12;
#line 1978
    __wait.func = & autoremove_wake_function;
#line 1978
    __wait.task_list.next = & __wait.task_list;
#line 1978
    __wait.task_list.prev = & __wait.task_list;
    ldv_52836: 
#line 1978
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1978
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1978
    if (tmp___13 != 0) {
#line 1978
      goto ldv_52835;
    } else {

    }
#line 1978
    schedule();
#line 1978
    goto ldv_52836;
    ldv_52835: 
#line 1978
    finish_wait(& mdev->al_wait, & __wait);
    ldv_52833: 
#line 1979
    drbd_al_shrink(mdev);
#line 1980
    err = drbd_check_al_size(mdev);
#line 1981
    lc_unlock(mdev->act_log);
#line 1982
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1984
    put_ldev(mdev);
#line 1985
    drbd_md_sync(mdev);
#line 1987
    if (err != 0) {
#line 1988
      retcode = 122;
#line 1989
      goto fail;
    } else {

    }
  } else {

  }
#line 1993
  if ((int )mdev->state.ldv_38794.conn > 9) {
#line 1994
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1996
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1996
  if (tmp___15) {
#line 1996
    tmp___16 = 0;
  } else {
#line 1996
    tmp___16 = 1;
  }
#line 1996
  if (tmp___16) {
#line 1997
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1998
    drbd_calc_cpu_mask(mdev);
#line 1999
    mdev->receiver.reset_cpu_mask = 1;
#line 2000
    mdev->asender.reset_cpu_mask = 1;
#line 2001
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 2004
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 2006
  kfree((void const   *)rs_plan_s);
#line 2007
  free_cpumask_var(new_cpu_mask);
#line 2008
  crypto_free_hash(csums_tfm);
#line 2009
  crypto_free_hash(verify_tfm);
#line 2010
  reply->ret_code = retcode;
#line 2011
  return (0);
}
}
#line 2014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2021
  drbd_suspend_io(mdev);
#line 2022
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2022
  if (tmp == 0) {
#line 2022
    goto ldv_52843;
  } else {

  }
#line 2022
  tmp___0 = get_current();
#line 2022
  __wait.flags = 0U;
#line 2022
  __wait.private = (void *)tmp___0;
#line 2022
  __wait.func = & autoremove_wake_function;
#line 2022
  __wait.task_list.next = & __wait.task_list;
#line 2022
  __wait.task_list.prev = & __wait.task_list;
  ldv_52846: 
#line 2022
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2022
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2022
  if (tmp___1 == 0) {
#line 2022
    goto ldv_52845;
  } else {

  }
#line 2022
  schedule();
#line 2022
  goto ldv_52846;
  ldv_52845: 
#line 2022
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52843: 
#line 2024
  val.i = 0U;
#line 2024
  val.ldv_38794.conn = 12U;
#line 2024
  mask.i = 0U;
#line 2024
  mask.ldv_38794.conn = 31U;
#line 2024
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2024
  retcode = (int )tmp___2;
#line 2026
  if (retcode <= 0 && retcode != -15) {
#line 2027
    val___0.i = 0U;
#line 2027
    val___0.ldv_38794.conn = 12U;
#line 2027
    mask___0.i = 0U;
#line 2027
    mask___0.ldv_38794.conn = 31U;
#line 2027
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2029
  goto ldv_52863;
  ldv_52862: 
#line 2030
  spin_lock_irq(& mdev->req_lock);
#line 2031
  if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 2032
    __ns.i = mdev->state.i;
#line 2032
    __ns.ldv_38794.disk = 4U;
#line 2032
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2032
    retcode = (int )tmp___3;
  } else {

  }
#line 2033
  spin_unlock_irq(& mdev->req_lock);
#line 2035
  if (retcode != -15) {
#line 2036
    goto ldv_52857;
  } else {

  }
#line 2038
  val___1.i = 0U;
#line 2038
  val___1.ldv_38794.conn = 12U;
#line 2038
  mask___1.i = 0U;
#line 2038
  mask___1.ldv_38794.conn = 31U;
#line 2038
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_52863: ;
#line 2029
  if (retcode == -15) {
#line 2030
    goto ldv_52862;
  } else {

  }
  ldv_52857: 
#line 2040
  drbd_resume_io(mdev);
#line 2042
  reply->ret_code = retcode;
#line 2043
  return (0);
}
}
#line 2046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2050
  rv = drbd_bmio_set_n_write(mdev);
#line 2051
  drbd_suspend_al(mdev);
#line 2052
  return (rv);
}
}
#line 2055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2062
  drbd_suspend_io(mdev);
#line 2063
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2063
  if (tmp == 0) {
#line 2063
    goto ldv_52874;
  } else {

  }
#line 2063
  tmp___0 = get_current();
#line 2063
  __wait.flags = 0U;
#line 2063
  __wait.private = (void *)tmp___0;
#line 2063
  __wait.func = & autoremove_wake_function;
#line 2063
  __wait.task_list.next = & __wait.task_list;
#line 2063
  __wait.task_list.prev = & __wait.task_list;
  ldv_52877: 
#line 2063
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2063
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2063
  if (tmp___1 == 0) {
#line 2063
    goto ldv_52876;
  } else {

  }
#line 2063
  schedule();
#line 2063
  goto ldv_52877;
  ldv_52876: 
#line 2063
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52874: 
#line 2065
  val.i = 0U;
#line 2065
  val.ldv_38794.conn = 11U;
#line 2065
  mask.i = 0U;
#line 2065
  mask.ldv_38794.conn = 31U;
#line 2065
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2065
  retcode = (int )tmp___2;
#line 2067
  if (retcode <= 0) {
#line 2068
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2071
      val___0.i = 0U;
#line 2071
      val___0.ldv_38794.pdsk = 4U;
#line 2071
      mask___0.i = 0U;
#line 2071
      mask___0.ldv_38794.pdsk = 15U;
#line 2071
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2072
      if (retcode > 0) {
#line 2073
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2073
        if (tmp___3 != 0) {
#line 2076
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2079
      val___1.i = 0U;
#line 2079
      val___1.ldv_38794.conn = 11U;
#line 2079
      mask___1.i = 0U;
#line 2079
      mask___1.ldv_38794.conn = 31U;
#line 2079
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2081
  drbd_resume_io(mdev);
#line 2083
  reply->ret_code = retcode;
#line 2084
  return (0);
}
}
#line 2087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2090
  retcode = 101;
#line 2092
  val.i = 0U;
#line 2092
  val.ldv_38794.user_isp = 1U;
#line 2092
  mask.i = 0U;
#line 2092
  mask.ldv_38794.user_isp = 1U;
#line 2092
  tmp = drbd_request_state(mdev, mask, val);
#line 2092
  if (tmp == 2) {
#line 2093
    retcode = 134;
  } else {

  }
#line 2095
  reply->ret_code = retcode;
#line 2096
  return (0);
}
}
#line 2099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2102
  retcode = 101;
#line 2105
  val.i = 0U;
#line 2105
  val.ldv_38794.user_isp = 0U;
#line 2105
  mask.i = 0U;
#line 2105
  mask.ldv_38794.user_isp = 1U;
#line 2105
  tmp = drbd_request_state(mdev, mask, val);
#line 2105
  if (tmp == 2) {
#line 2106
    s = mdev->state;
#line 2107
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2108
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2111
      retcode = 135;
    }
  } else {

  }
#line 2115
  reply->ret_code = retcode;
#line 2116
  return (0);
}
}
#line 2119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2122
  val.i = 0U;
#line 2122
  val.ldv_38794.susp = 1U;
#line 2122
  mask.i = 0U;
#line 2122
  mask.ldv_38794.susp = 1U;
#line 2122
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2124
  return (0);
}
}
#line 2127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2130
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2130
  if (tmp != 0) {
#line 2131
    drbd_uuid_new_current(mdev);
#line 2132
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2134
  drbd_suspend_io(mdev);
#line 2135
  val.i = 0U;
#line 2135
  val.ldv_38794.susp = 0U;
#line 2135
  val.ldv_38794.susp_nod = 0U;
#line 2135
  val.ldv_38794.susp_fen = 0U;
#line 2135
  mask.i = 0U;
#line 2135
  mask.ldv_38794.susp = 1U;
#line 2135
  mask.ldv_38794.susp_nod = 1U;
#line 2135
  mask.ldv_38794.susp_fen = 1U;
#line 2135
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2136
  if (reply->ret_code == 1) {
#line 2137
    if ((int )mdev->state.ldv_38794.conn <= 9) {
#line 2138
      tl_clear(mdev);
    } else {

    }
#line 2139
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2140
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2142
  drbd_resume_io(mdev);
#line 2144
  return (0);
}
}
#line 2147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2150
  val.i = 0U;
#line 2150
  val.ldv_38794.disk = 5U;
#line 2150
  mask.i = 0U;
#line 2150
  mask.ldv_38794.disk = 15U;
#line 2150
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2151
  return (0);
}
}
#line 2154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2159
  tl = (unsigned short *)(& reply->tag_list);
#line 2161
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2161
  if (tmp != 0) {
#line 2162
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2163
    put_ldev(mdev);
  } else {

  }
#line 2166
  tmp___0 = get_net_conf(mdev);
#line 2166
  if (tmp___0 != 0) {
#line 2167
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2168
    put_net_conf(mdev);
  } else {

  }
#line 2170
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2172
  tmp___1 = tl;
#line 2172
  tl = tl + 1;
#line 2172
  __gu_p = (void *)tmp___1;
#line 2172
  switch (2UL) {
  case 1UL: 
#line 2172
  *((u8 *)__gu_p) = 0U;
#line 2172
  goto ldv_52946;
  case 2UL: 
#line 2172
  put_unaligned_le16(0, __gu_p);
#line 2172
  goto ldv_52946;
  case 4UL: 
#line 2172
  put_unaligned_le32(0U, __gu_p);
#line 2172
  goto ldv_52946;
  case 8UL: 
#line 2172
  put_unaligned_le64(0ULL, __gu_p);
#line 2172
  goto ldv_52946;
  default: 
#line 2172
  __bad_unaligned_access_size();
#line 2172
  goto ldv_52946;
  }
  ldv_52946: ;
#line 2174
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2180
  tl = (unsigned short *)(& reply->tag_list);
#line 2181
  s = mdev->state;
#line 2185
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2188
  if ((int )s.ldv_38794.conn > 15 && (int )s.ldv_38794.conn <= 21) {
#line 2189
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2189
    if (tmp != 0) {
#line 2190
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2191
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2192
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2195
  tmp___0 = tl;
#line 2195
  tl = tl + 1;
#line 2195
  __gu_p = (void *)tmp___0;
#line 2195
  switch (2UL) {
  case 1UL: 
#line 2195
  *((u8 *)__gu_p) = 0U;
#line 2195
  goto ldv_52962;
  case 2UL: 
#line 2195
  put_unaligned_le16(0, __gu_p);
#line 2195
  goto ldv_52962;
  case 4UL: 
#line 2195
  put_unaligned_le32(0U, __gu_p);
#line 2195
  goto ldv_52962;
  case 8UL: 
#line 2195
  put_unaligned_le64(0ULL, __gu_p);
#line 2195
  goto ldv_52962;
  default: 
#line 2195
  __bad_unaligned_access_size();
#line 2195
  goto ldv_52962;
  }
  ldv_52962: ;
#line 2197
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2205
  tl = (unsigned short *)(& reply->tag_list);
#line 2207
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2207
  if (tmp != 0) {
#line 2208
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2209
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2210
    put_ldev(mdev);
  } else {

  }
#line 2212
  tmp___0 = tl;
#line 2212
  tl = tl + 1;
#line 2212
  __gu_p = (void *)tmp___0;
#line 2212
  switch (2UL) {
  case 1UL: 
#line 2212
  *((u8 *)__gu_p) = 0U;
#line 2212
  goto ldv_52975;
  case 2UL: 
#line 2212
  put_unaligned_le16(0, __gu_p);
#line 2212
  goto ldv_52975;
  case 4UL: 
#line 2212
  put_unaligned_le32(0U, __gu_p);
#line 2212
  goto ldv_52975;
  case 8UL: 
#line 2212
  put_unaligned_le64(0ULL, __gu_p);
#line 2212
  goto ldv_52975;
  default: 
#line 2212
  __bad_unaligned_access_size();
#line 2212
  goto ldv_52975;
  }
  ldv_52975: ;
#line 2214
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2229
  tl = (unsigned short *)(& reply->tag_list);
#line 2231
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2231
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2231
    rv = tmp != 0;
  } else {
#line 2231
    rv = 2;
  }
#line 2234
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2235
  tmp___0 = tl;
#line 2235
  tl = tl + 1;
#line 2235
  __gu_p = (void *)tmp___0;
#line 2235
  switch (2UL) {
  case 1UL: 
#line 2235
  *((u8 *)__gu_p) = 0U;
#line 2235
  goto ldv_52989;
  case 2UL: 
#line 2235
  put_unaligned_le16(0, __gu_p);
#line 2235
  goto ldv_52989;
  case 4UL: 
#line 2235
  put_unaligned_le32(0U, __gu_p);
#line 2235
  goto ldv_52989;
  case 8UL: 
#line 2235
  put_unaligned_le64(0ULL, __gu_p);
#line 2235
  goto ldv_52989;
  default: 
#line 2235
  __bad_unaligned_access_size();
#line 2235
  goto ldv_52989;
  }
  ldv_52989: ;
#line 2237
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2244
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2247
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2247
  if (tmp == 0) {
#line 2248
    reply->ret_code = 126;
#line 2249
    return (0);
  } else {

  }
#line 2254
  drbd_suspend_io(mdev);
#line 2255
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2255
  if (tmp___0 == 0) {
#line 2255
    goto ldv_53000;
  } else {

  }
#line 2255
  tmp___1 = get_current();
#line 2255
  __wait.flags = 0U;
#line 2255
  __wait.private = (void *)tmp___1;
#line 2255
  __wait.func = & autoremove_wake_function;
#line 2255
  __wait.task_list.next = & __wait.task_list;
#line 2255
  __wait.task_list.prev = & __wait.task_list;
  ldv_53003: 
#line 2255
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2255
  tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2255
  if (tmp___2 == 0) {
#line 2255
    goto ldv_53002;
  } else {

  }
#line 2255
  schedule();
#line 2255
  goto ldv_53003;
  ldv_53002: 
#line 2255
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53000: 
#line 2258
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2259
  val.i = 0U;
#line 2259
  val.ldv_38794.conn = 18U;
#line 2259
  mask.i = 0U;
#line 2259
  mask.ldv_38794.conn = 31U;
#line 2259
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2260
  drbd_resume_io(mdev);
#line 2261
  return (0);
}
}
#line 2265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2268
  retcode = 101;
#line 2269
  skip_initial_sync = 0;
#line 2274
  memset((void *)(& args), 0, 4UL);
#line 2275
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2275
  if (tmp == 0) {
#line 2276
    reply->ret_code = 126;
#line 2277
    return (0);
  } else {

  }
#line 2280
  ldv_mutex_lock_201(& mdev->state_mutex);
#line 2282
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2282
  if (tmp___0 == 0) {
#line 2283
    retcode = 138;
#line 2284
    goto out;
  } else {

  }
#line 2288
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2290
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2291
    skip_initial_sync = 1;
  } else
#line 2292
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2293
    retcode = 151;
#line 2294
    goto out_dec;
  } else {

  }
#line 2297
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2298
  drbd_uuid_new_current(mdev);
#line 2300
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2301
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2303
    if (err != 0) {
#line 2304
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2305
      retcode = 118;
    } else {

    }
#line 2307
    if (skip_initial_sync != 0) {
#line 2308
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2309
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2310
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2311
      spin_lock_irq(& mdev->req_lock);
#line 2312
      __ns.i = mdev->state.i;
#line 2312
      __ns.ldv_38794.disk = 8U;
#line 2312
      __ns.ldv_38794.pdsk = 8U;
#line 2312
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2314
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2318
  drbd_md_sync(mdev);
  out_dec: 
#line 2320
  put_ldev(mdev);
  out: 
#line 2322
  ldv_mutex_unlock_202(& mdev->state_mutex);
#line 2324
  reply->ret_code = retcode;
#line 2325
  return (0);
}
}
#line 2335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2335
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1320}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 2368
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2374
  reply_size = 34;
#line 2378
  tmp = try_module_get(& __this_module);
#line 2378
  if (tmp) {
#line 2378
    tmp___0 = 0;
  } else {
#line 2378
    tmp___0 = 1;
  }
#line 2378
  if (tmp___0) {
#line 2379
    printk("<3>drbd: try_module_get() failed!\n");
#line 2380
    return;
  } else {

  }
#line 2383
  tmp___1 = capable(21);
#line 2383
  if (tmp___1) {
#line 2383
    tmp___2 = 0;
  } else {
#line 2383
    tmp___2 = 1;
  }
#line 2383
  if (tmp___2) {
#line 2384
    retcode = 152;
#line 2385
    goto fail;
  } else {

  }
#line 2388
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2390
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2391
    retcode = 127;
#line 2392
    goto fail;
  } else {

  }
#line 2395
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2397
    retcode = 137;
#line 2398
    goto fail;
  } else {

  }
#line 2401
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2404
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2405
    retcode = 137;
#line 2406
    goto fail;
  } else {

  }
#line 2409
  reply_size = cm->reply_body_size + reply_size;
#line 2412
  tmp___3 = kzalloc((size_t )reply_size, 208U);
#line 2412
  cn_reply = (struct cn_msg *)tmp___3;
#line 2413
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2414
    retcode = 122;
#line 2415
    goto fail;
  } else {

  }
#line 2417
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2419
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2421
  reply->minor = nlp->drbd_minor;
#line 2422
  reply->ret_code = 101;
#line 2425
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2427
  cn_reply->id = req->id;
#line 2428
  cn_reply->seq = req->seq;
#line 2429
  cn_reply->ack = req->ack + 1U;
#line 2430
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2431
  cn_reply->flags = 0U;
#line 2433
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2434
  if (rr != 0 && rr != -3) {
#line 2435
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2437
  kfree((void const   *)cn_reply);
#line 2438
  module_put(& __this_module);
#line 2439
  return;
  fail: 
#line 2441
  drbd_nl_send_reply(req, retcode);
#line 2442
  module_put(& __this_module);
#line 2443
  return;
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2451
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2452
  len = (int )len < (int )l ? len : l;
#line 2453
  tmp = tl;
#line 2453
  tl = tl + 1;
#line 2453
  __gu_p = (void *)tmp;
#line 2453
  switch (2UL) {
  case 1UL: 
#line 2453
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2453
  goto ldv_53052;
  case 2UL: 
#line 2453
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2453
  goto ldv_53052;
  case 4UL: 
#line 2453
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2453
  goto ldv_53052;
  case 8UL: 
#line 2453
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2453
  goto ldv_53052;
  default: 
#line 2453
  __bad_unaligned_access_size();
#line 2453
  goto ldv_53052;
  }
  ldv_53052: 
#line 2454
  tmp___0 = tl;
#line 2454
  tl = tl + 1;
#line 2454
  __gu_p___0 = (void *)tmp___0;
#line 2454
  switch (2UL) {
  case 1UL: 
#line 2454
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2454
  goto ldv_53059;
  case 2UL: 
#line 2454
  put_unaligned_le16((int )len, __gu_p___0);
#line 2454
  goto ldv_53059;
  case 4UL: 
#line 2454
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2454
  goto ldv_53059;
  case 8UL: 
#line 2454
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2454
  goto ldv_53059;
  default: 
#line 2454
  __bad_unaligned_access_size();
#line 2454
  goto ldv_53059;
  }
  ldv_53059: 
#line 2455
  __len = (size_t )len;
#line 2455
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2456
  tl = tl + (unsigned long )len;
#line 2457
  if (nul_terminated != 0) {
#line 2458
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2459
  return (tl);
}
}
#line 2463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2465
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2465
  return (tmp);
}
}
#line 2469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2471
  tmp = strlen(str);
#line 2471
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2471
  return (tmp___0);
}
}
#line 2475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2477
  tmp = tl;
#line 2477
  tl = tl + 1;
#line 2477
  __gu_p = (void *)tmp;
#line 2477
  switch (2UL) {
  case 1UL: 
#line 2477
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2477
  goto ldv_53085;
  case 2UL: 
#line 2477
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2477
  goto ldv_53085;
  case 4UL: 
#line 2477
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2477
  goto ldv_53085;
  case 8UL: 
#line 2477
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2477
  goto ldv_53085;
  default: 
#line 2477
  __bad_unaligned_access_size();
#line 2477
  goto ldv_53085;
  }
  ldv_53085: ;
#line 2478
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2480
  tmp___0 = tl;
#line 2480
  tl = tl + 1;
#line 2480
  __gu_p___0 = (void *)tmp___0;
#line 2480
  switch (2UL) {
  case 1UL: 
#line 2480
  *((u8 *)__gu_p___0) = 4U;
#line 2480
  goto ldv_53093;
  case 2UL: 
#line 2480
  put_unaligned_le16(4, __gu_p___0);
#line 2480
  goto ldv_53093;
  case 4UL: 
#line 2480
  put_unaligned_le32(4U, __gu_p___0);
#line 2480
  goto ldv_53093;
  case 8UL: 
#line 2480
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2480
  goto ldv_53093;
  default: 
#line 2480
  __bad_unaligned_access_size();
#line 2480
  goto ldv_53093;
  }
  ldv_53093: 
#line 2481
  __gu_p___1 = (void *)tl;
#line 2481
  switch (4UL) {
  case 1UL: 
#line 2481
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2481
  goto ldv_53100;
  case 2UL: 
#line 2481
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2481
  goto ldv_53100;
  case 4UL: 
#line 2481
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2481
  goto ldv_53100;
  case 8UL: 
#line 2481
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2481
  goto ldv_53100;
  default: 
#line 2481
  __bad_unaligned_access_size();
#line 2481
  goto ldv_53100;
  }
  ldv_53100: 
#line 2482
  tl = tl + 4U;
#line 2483
  goto ldv_53105;
  case 16384U: 
#line 2485
  tmp___1 = tl;
#line 2485
  tl = tl + 1;
#line 2485
  __gu_p___2 = (void *)tmp___1;
#line 2485
  switch (2UL) {
  case 1UL: 
#line 2485
  *((u8 *)__gu_p___2) = 8U;
#line 2485
  goto ldv_53109;
  case 2UL: 
#line 2485
  put_unaligned_le16(8, __gu_p___2);
#line 2485
  goto ldv_53109;
  case 4UL: 
#line 2485
  put_unaligned_le32(8U, __gu_p___2);
#line 2485
  goto ldv_53109;
  case 8UL: 
#line 2485
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2485
  goto ldv_53109;
  default: 
#line 2485
  __bad_unaligned_access_size();
#line 2485
  goto ldv_53109;
  }
  ldv_53109: 
#line 2486
  __gu_p___3 = (void *)tl;
#line 2486
  switch (8UL) {
  case 1UL: 
#line 2486
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2486
  goto ldv_53116;
  case 2UL: 
#line 2486
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2486
  goto ldv_53116;
  case 4UL: 
#line 2486
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2486
  goto ldv_53116;
  case 8UL: 
#line 2486
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2486
  goto ldv_53116;
  default: 
#line 2486
  __bad_unaligned_access_size();
#line 2486
  goto ldv_53116;
  }
  ldv_53116: 
#line 2487
  tl = tl + 8U;
#line 2488
  goto ldv_53105;
  default: ;
  }
  ldv_53105: ;
#line 2493
  return (tl);
}
}
#line 2496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2502
  cn_reply = (struct cn_msg *)(& buffer);
#line 2503
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2505
  tl = (unsigned short *)(& reply->tag_list);
#line 2509
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2511
  tmp = tl;
#line 2511
  tl = tl + 1;
#line 2511
  __gu_p = (void *)tmp;
#line 2511
  switch (2UL) {
  case 1UL: 
#line 2511
  *((u8 *)__gu_p) = 0U;
#line 2511
  goto ldv_53132;
  case 2UL: 
#line 2511
  put_unaligned_le16(0, __gu_p);
#line 2511
  goto ldv_53132;
  case 4UL: 
#line 2511
  put_unaligned_le32(0U, __gu_p);
#line 2511
  goto ldv_53132;
  case 8UL: 
#line 2511
  put_unaligned_le64(0ULL, __gu_p);
#line 2511
  goto ldv_53132;
  default: 
#line 2511
  __bad_unaligned_access_size();
#line 2511
  goto ldv_53132;
  }
  ldv_53132: 
#line 2513
  cn_reply->id.idx = 8U;
#line 2514
  cn_reply->id.val = 1U;
#line 2516
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2516
  cn_reply->seq = (__u32 )tmp___0;
#line 2517
  cn_reply->ack = 0U;
#line 2518
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2520
  cn_reply->flags = 0U;
#line 2522
  reply->packet_type = 17;
#line 2523
  reply->minor = mdev_to_minor(mdev);
#line 2524
  reply->ret_code = 101;
#line 2526
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2527
  return;
}
}
#line 2529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2535
  cn_reply = (struct cn_msg *)(& buffer);
#line 2536
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2538
  tl = (unsigned short *)(& reply->tag_list);
#line 2542
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2543
  tmp = tl;
#line 2543
  tl = tl + 1;
#line 2543
  __gu_p = (void *)tmp;
#line 2543
  switch (2UL) {
  case 1UL: 
#line 2543
  *((u8 *)__gu_p) = 0U;
#line 2543
  goto ldv_53147;
  case 2UL: 
#line 2543
  put_unaligned_le16(0, __gu_p);
#line 2543
  goto ldv_53147;
  case 4UL: 
#line 2543
  put_unaligned_le32(0U, __gu_p);
#line 2543
  goto ldv_53147;
  case 8UL: 
#line 2543
  put_unaligned_le64(0ULL, __gu_p);
#line 2543
  goto ldv_53147;
  default: 
#line 2543
  __bad_unaligned_access_size();
#line 2543
  goto ldv_53147;
  }
  ldv_53147: 
#line 2545
  cn_reply->id.idx = 8U;
#line 2546
  cn_reply->id.val = 1U;
#line 2548
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2548
  cn_reply->seq = (__u32 )tmp___0;
#line 2549
  cn_reply->ack = 0U;
#line 2550
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2552
  cn_reply->flags = 0U;
#line 2554
  reply->packet_type = 20;
#line 2555
  reply->minor = mdev_to_minor(mdev);
#line 2556
  reply->ret_code = 101;
#line 2558
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2559
  return;
}
}
#line 2561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2572
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2573
    return;
  } else {

  }
#line 2574
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2575
    return;
  } else {

  }
#line 2583
  tmp = kzalloc(33026UL, 16U);
#line 2583
  cn_reply = (struct cn_msg *)tmp;
#line 2590
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2593
    return;
  } else {

  }
#line 2596
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2597
  tl = (unsigned short *)(& reply->tag_list);
#line 2599
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2600
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2601
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2602
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2603
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_47571.block_id));
#line 2606
  __min1 = e->size;
#line 2606
  __min2 = 32768U;
#line 2606
  len = __min1 < __min2 ? __min1 : __min2;
#line 2607
  tmp___0 = tl;
#line 2607
  tl = tl + 1;
#line 2607
  __gu_p = (void *)tmp___0;
#line 2607
  switch (2UL) {
  case 1UL: 
#line 2607
  *((u8 *)__gu_p) = 50U;
#line 2607
  goto ldv_53170;
  case 2UL: 
#line 2607
  put_unaligned_le16(49202, __gu_p);
#line 2607
  goto ldv_53170;
  case 4UL: 
#line 2607
  put_unaligned_le32(49202U, __gu_p);
#line 2607
  goto ldv_53170;
  case 8UL: 
#line 2607
  put_unaligned_le64(49202ULL, __gu_p);
#line 2607
  goto ldv_53170;
  default: 
#line 2607
  __bad_unaligned_access_size();
#line 2607
  goto ldv_53170;
  }
  ldv_53170: 
#line 2608
  tmp___1 = tl;
#line 2608
  tl = tl + 1;
#line 2608
  __gu_p___0 = (void *)tmp___1;
#line 2608
  switch (2UL) {
  case 1UL: 
#line 2608
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2608
  goto ldv_53177;
  case 2UL: 
#line 2608
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2608
  goto ldv_53177;
  case 4UL: 
#line 2608
  put_unaligned_le32(len, __gu_p___0);
#line 2608
  goto ldv_53177;
  case 8UL: 
#line 2608
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2608
  goto ldv_53177;
  default: 
#line 2608
  __bad_unaligned_access_size();
#line 2608
  goto ldv_53177;
  }
  ldv_53177: 
#line 2610
  page = e->pages;
#line 2611
  goto ldv_53193;
  ldv_53192: 
#line 2612
  tmp___2 = kmap_atomic___0(page);
#line 2612
  d = tmp___2;
#line 2613
  __min1___0 = len;
#line 2613
  __min2___0 = 4096U;
#line 2613
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2614
  __len = (size_t )l;
#line 2614
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2615
  __kunmap_atomic___0(d);
#line 2616
  tl = tl + (unsigned long )l;
#line 2617
  len = len - l;
#line 2618
  if (len == 0U) {
#line 2619
    goto ldv_53191;
  } else {

  }
#line 2611
  page = page_chain_next(page);
  ldv_53193: ;
#line 2611
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2611
    tmp___3 = page_chain_next(page);
#line 2611
    __builtin_prefetch((void const   *)tmp___3);
#line 2611
    if (1 != 0) {
#line 2612
      goto ldv_53192;
    } else {
#line 2614
      goto ldv_53191;
    }
  } else {

  }
  ldv_53191: 
#line 2621
  tmp___4 = tl;
#line 2621
  tl = tl + 1;
#line 2621
  __gu_p___1 = (void *)tmp___4;
#line 2621
  switch (2UL) {
  case 1UL: 
#line 2621
  *((u8 *)__gu_p___1) = 0U;
#line 2621
  goto ldv_53196;
  case 2UL: 
#line 2621
  put_unaligned_le16(0, __gu_p___1);
#line 2621
  goto ldv_53196;
  case 4UL: 
#line 2621
  put_unaligned_le32(0U, __gu_p___1);
#line 2621
  goto ldv_53196;
  case 8UL: 
#line 2621
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2621
  goto ldv_53196;
  default: 
#line 2621
  __bad_unaligned_access_size();
#line 2621
  goto ldv_53196;
  }
  ldv_53196: 
#line 2623
  cn_reply->id.idx = 8U;
#line 2624
  cn_reply->id.val = 1U;
#line 2626
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2626
  cn_reply->seq = (__u32 )tmp___5;
#line 2627
  cn_reply->ack = 0U;
#line 2628
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2630
  cn_reply->flags = 0U;
#line 2632
  reply->packet_type = 24;
#line 2633
  reply->minor = mdev_to_minor(mdev);
#line 2634
  reply->ret_code = 101;
#line 2636
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2637
  kfree((void const   *)cn_reply);
#line 2638
  return;
}
}
#line 2640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2646
  cn_reply = (struct cn_msg *)(& buffer);
#line 2647
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2649
  tl = (unsigned short *)(& reply->tag_list);
#line 2654
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2654
  if (tmp == 0) {
#line 2655
    return;
  } else {

  }
#line 2656
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2657
  put_ldev(mdev);
#line 2659
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2660
  tmp___0 = tl;
#line 2660
  tl = tl + 1;
#line 2660
  __gu_p = (void *)tmp___0;
#line 2660
  switch (2UL) {
  case 1UL: 
#line 2660
  *((u8 *)__gu_p) = 0U;
#line 2660
  goto ldv_53212;
  case 2UL: 
#line 2660
  put_unaligned_le16(0, __gu_p);
#line 2660
  goto ldv_53212;
  case 4UL: 
#line 2660
  put_unaligned_le32(0U, __gu_p);
#line 2660
  goto ldv_53212;
  case 8UL: 
#line 2660
  put_unaligned_le64(0ULL, __gu_p);
#line 2660
  goto ldv_53212;
  default: 
#line 2660
  __bad_unaligned_access_size();
#line 2660
  goto ldv_53212;
  }
  ldv_53212: 
#line 2662
  cn_reply->id.idx = 8U;
#line 2663
  cn_reply->id.val = 1U;
#line 2665
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2665
  cn_reply->seq = (__u32 )tmp___1;
#line 2666
  cn_reply->ack = 0U;
#line 2667
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2669
  cn_reply->flags = 0U;
#line 2671
  reply->packet_type = 23;
#line 2672
  reply->minor = mdev_to_minor(mdev);
#line 2673
  reply->ret_code = 101;
#line 2675
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2676
  return;
}
}
#line 2678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2681
  try = 10;
#line 2683
  cn_id_drbd.val = 1U;
  ldv_53224: 
#line 2685
  cn_id_drbd.idx = cn_idx;
#line 2686
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2687
  if (err == 0) {
#line 2688
    goto ldv_53223;
  } else {

  }
#line 2689
  cn_idx = cn_idx + 6977U;
#line 2690
  tmp = try;
#line 2690
  try = try - 1;
#line 2690
  if (tmp != 0) {
#line 2691
    goto ldv_53224;
  } else {

  }
  ldv_53223: ;
#line 2692
  if (err != 0) {
#line 2693
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2694
    return (err);
  } else {

  }
#line 2697
  return (0);
}
}
#line 2700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2704
  cn_id_drbd.idx = cn_idx;
#line 2705
  cn_id_drbd.val = 1U;
#line 2707
  cn_del_callback(& cn_id_drbd);
#line 2708
  return;
}
}
#line 2710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2713
  cn_reply = (struct cn_msg *)(& buffer);
#line 2714
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2718
  memset((void *)(& buffer), 0, 32UL);
#line 2719
  cn_reply->id = req->id;
#line 2721
  cn_reply->seq = req->seq;
#line 2722
  cn_reply->ack = req->ack + 1U;
#line 2723
  cn_reply->len = 12U;
#line 2724
  cn_reply->flags = 0U;
#line 2726
  reply->packet_type = 27;
#line 2727
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2728
  reply->ret_code = ret_code;
#line 2730
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2731
  if (rr != 0 && rr != -3) {
#line 2732
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2733
  return;
}
}
#line 2735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2740
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2742
  mutex_lock(ldv_func_arg1);
#line 2743
  return;
}
}
#line 2745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_192(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2750
  tmp = mutex_trylock(ldv_func_arg1);
#line 2750
  ldv_func_res = tmp;
#line 2752
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2752
  return (tmp___0);
#line 2754
  return (ldv_func_res);
}
}
#line 2757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2762
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2764
  mutex_unlock(ldv_func_arg1);
#line 2765
  return;
}
}
#line 2767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2772
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2774
  mutex_lock(ldv_func_arg1);
#line 2775
  return;
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2782
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2784
  mutex_unlock(ldv_func_arg1);
#line 2785
  return;
}
}
#line 2787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_196(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2792
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2794
  mutex_lock(ldv_func_arg1);
#line 2795
  return;
}
}
#line 2797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2802
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2804
  mutex_unlock(ldv_func_arg1);
#line 2805
  return;
}
}
#line 2807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_198(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2812
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2814
  mutex_unlock(ldv_func_arg1);
#line 2815
  return;
}
}
#line 2817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_199(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2822
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2824
  mutex_lock(ldv_func_arg1);
#line 2825
  return;
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_200(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2832
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2834
  mutex_unlock(ldv_func_arg1);
#line 2835
  return;
}
}
#line 2837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2842
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2844
  mutex_lock(ldv_func_arg1);
#line 2845
  return;
}
}
#line 2847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_202(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2852
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2854
  mutex_unlock(ldv_func_arg1);
#line 2855
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_drbd_main_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_drbd_main_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_drbd_main_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_drbd_main_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_drbd_main_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_drbd_main_mutex = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 929
  ldv_mutex_drbd_main_mutex = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
