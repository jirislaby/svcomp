/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "include/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "include/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "include/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "include/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "include/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "include/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "include/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 28 "include/linux/types.h"
typedef __u32 nlink_t;
#line 29 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 115 "include/linux/types.h"
typedef __u8 uint8_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 120 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 143 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 155 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 179 "include/linux/types.h"
typedef __u16 __be16;
#line 181 "include/linux/types.h"
typedef __u32 __be32;
#line 186 "include/linux/types.h"
typedef __u32 __wsum;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 203 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 221 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 221 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 226 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 226 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 227 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 232
struct hlist_node;
#line 232 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 236 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 247 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 303 "include/linux/printk.h"
struct file_operations;
#line 318 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 60
struct completion;
#line 61
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2007_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2007_8 ldv_2007 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2014_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2014_10 ldv_2014 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2131_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2146_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2147_11 {
   struct __anonstruct_ldv_2131_12 ldv_2131 ;
   struct __anonstruct_ldv_2146_13 ldv_2146 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2147_11 ldv_2147 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2775_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2775_18 ldv_2775 ;
};
#line 96 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 637 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 193 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5149_23 {
   u64 rip ;
   u64 rdp ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5155_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5156_22 {
   struct __anonstruct_ldv_5149_23 ldv_5149 ;
   struct __anonstruct_ldv_5155_24 ldv_5155 ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5165_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5156_22 ldv_5156 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5165_25 ldv_5165 ;
};
#line 339 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 433
struct kmem_cache;
#line 434
struct perf_event;
#line 435 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5987_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5988_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5987_29 ldv_5987 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5988_28 ldv_5988 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 73
struct compat_timespec;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 74
struct pollfd;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6223_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6223_31 ldv_6223 ;
};
#line 52 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 394 "include/linux/spinlock.h"
struct vm_area_struct;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 105 "include/linux/debugobjects.h"
struct tvec_base;
#line 106 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 27 "include/linux/wait.h"
struct __wait_queue;
#line 27 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 30 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 48 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 53 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 665 "include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 556 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 701 "include/linux/mmzone.h"
struct rw_semaphore;
#line 702 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 188 "include/linux/rcupdate.h"
struct notifier_block;
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 835 "include/linux/mmzone.h"
struct ctl_table;
#line 346 "include/linux/irq.h"
struct proc_dir_entry;
#line 347
struct timer_rand_state;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_129 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_129 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_130 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_130 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_131 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_131 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_132 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_132 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_133 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_133 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_134 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_134 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_135 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_135 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 148 "include/linux/if.h"
union __anonunion_ifs_ifsu_136 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 148 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_136 ifs_ifsu ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifrn_137 {
   char ifrn_name[16U] ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifru_138 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 166 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_137 ifr_ifrn ;
   union __anonunion_ifr_ifru_138 ifr_ifru ;
};
#line 230 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 132 "include/linux/if_ether.h"
struct prio_tree_node;
#line 132 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 181
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_trap_nr ;
   unsigned long saved_scratch_register ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
   atomic_t count ;
};
#line 121
struct address_space;
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13481_141 {
   unsigned long index ;
   void *freelist ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13491_145 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13492_144 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13491_145 ldv_13491 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13494_143 {
   union __anonunion_ldv_13492_144 ldv_13492 ;
   atomic_t _count ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13495_142 {
   unsigned long counters ;
   struct __anonstruct_ldv_13494_143 ldv_13494 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13496_140 {
   union __anonunion_ldv_13481_141 ldv_13481 ;
   union __anonunion_ldv_13495_142 ldv_13495 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13503_147 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13504_146 {
   struct list_head lru ;
   struct __anonstruct_ldv_13503_147 ldv_13503 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13509_148 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 122 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_13496_140 ldv_13496 ;
   union __anonunion_ldv_13504_146 ldv_13504 ;
   union __anonunion_ldv_13509_148 ldv_13509 ;
   unsigned long debug_flags ;
};
#line 203 "include/linux/mm_types.h"
struct __anonstruct_vm_set_150 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 203 "include/linux/mm_types.h"
union __anonunion_shared_149 {
   struct __anonstruct_vm_set_150 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 203
struct anon_vma;
#line 203
struct vm_operations_struct;
#line 203
struct mempolicy;
#line 203 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_149 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 266 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 272 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 285 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 298
struct linux_binfmt;
#line 298
struct mmu_notifier_mm;
#line 298 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_14352 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_14352 socket_state;
#line 174 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 175
struct pipe_inode_info;
#line 176
struct net;
#line 193
struct fasync_struct;
#line 193 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 127 "include/linux/net.h"
struct sock;
#line 127
struct proto_ops;
#line 127 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 153
struct kiocb;
#line 154 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 164 "include/linux/slab.h"
struct kobject;
#line 165
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 171 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[26U] ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 76 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 52 "include/linux/device.h"
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 126
struct device_type;
#line 183
struct of_device_id;
#line 183 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 246 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 300
struct class_attribute;
#line 300 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 395 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 448 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 475 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 563 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 573
struct dma_coherent_mem;
#line 573 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 691 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 178 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 195 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 1627 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1013 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 468 "include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 67 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 74 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 315 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct_ldv_19547_154 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_19548_153 {
   __wsum csum ;
   struct __anonstruct_ldv_19547_154 ldv_19547 ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_19585_155 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19548_153 ldv_19548 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19585_155 ldv_19585 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 518
struct dst_entry;
#line 553
struct rtable;
#line 40 "include/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 206 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 314 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 398 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 71 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 108
struct bio;
#line 109
struct bio_integrity_payload;
#line 110
struct block_device;
#line 111
struct io_context;
#line 112
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 20 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_21832_160 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_21834_159 {
   struct __anonstruct_ldv_21832_160 ldv_21832 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_21834_159 ldv_21834 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_161 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_161 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 417 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44
struct export_operations;
#line 45
struct hd_geometry;
#line 46
struct kstatfs;
#line 445 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 275 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 303 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 314 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 328 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 344 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 390 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 595 "include/linux/fs.h"
union __anonunion_arg_163 {
   char *buf ;
   void *data ;
};
#line 595 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_162 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_163 arg ;
   int error ;
};
#line 595 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_162 read_descriptor_t;
#line 598 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 652
struct backing_dev_info;
#line 653 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 674
struct request_queue;
#line 675
struct hd_struct;
#line 675
struct gendisk;
#line 675 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 747
struct posix_acl;
#line 748
struct inode_operations;
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22948_164 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22968_165 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 748
struct file_lock;
#line 748
struct cdev;
#line 748 "include/linux/fs.h"
union __anonunion_ldv_22984_166 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 748 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_22948_164 ldv_22948 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_22968_165 ldv_22968 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22984_166 ldv_22984 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 976 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 984 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 1007 "include/linux/fs.h"
union __anonunion_f_u_167 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 1007 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_167 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1146
struct files_struct;
#line 1146 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1147 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1152 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_release_private)(struct file_lock * ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 1169
struct nlm_lockowner;
#line 1170 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_169 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_168 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_169 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_168 fl_u ;
};
#line 1256 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1452
struct file_system_type;
#line 1452
struct super_operations;
#line 1452
struct xattr_handler;
#line 1452
struct mtd_info;
#line 1452 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1592 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1630
struct block_device_operations;
#line 1631 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1666 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
};
#line 1710 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1870 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_170 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_170 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_172 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_173 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_174 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_176 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_177 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigsys_178 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_171 {
   int _pad[28U] ;
   struct __anonstruct__kill_172 _kill ;
   struct __anonstruct__timer_173 _timer ;
   struct __anonstruct__rt_174 _rt ;
   struct __anonstruct__sigchld_175 _sigchld ;
   struct __anonstruct__sigfault_176 _sigfault ;
   struct __anonstruct__sigpoll_177 _sigpoll ;
   struct __anonstruct__sigsys_178 _sigsys ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_171 _sifields ;
};
#line 109 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   raw_spinlock_t lock ;
};
#line 46 "include/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 946 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 966 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 1005 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 1031 "include/linux/sysctl.h"
struct __anonstruct_ldv_26225_182 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 1031 "include/linux/sysctl.h"
union __anonunion_ldv_26227_181 {
   struct __anonstruct_ldv_26225_182 ldv_26225 ;
   struct rcu_head rcu ;
};
#line 1031
struct ctl_table_set;
#line 1031 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_26227_181 ldv_26227 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 1052 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 1058 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 1063 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26306_183 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26315_184 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_185 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_186 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_26306_183 ldv_26306 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26315_184 ldv_26315 ;
   time_t last_used_at ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_185 type_data ;
   union __anonunion_payload_186 payload ;
};
#line 319
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 151 "include/linux/sched.h"
struct cfs_rq;
#line 387
struct kioctx;
#line 388 "include/linux/sched.h"
union __anonunion_ki_obj_187 {
   void *user ;
   struct task_struct *tsk ;
};
#line 388
struct eventfd_ctx;
#line 388 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_187 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 408 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 452 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 460 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 467 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 484 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 520
struct autogroup;
#line 521
struct tty_struct;
#line 521
struct taskstats;
#line 521
struct tty_audit_buf;
#line 521 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 702 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 746
struct reclaim_state;
#line 747 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 762 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1064
struct rq;
#line 1065 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1131 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1136 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1171 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1197
struct rt_rq;
#line 1197 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1220
struct mem_cgroup;
#line 1220 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1578
struct css_set;
#line 1578
struct compat_robust_list_head;
#line 1578 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct hlist_head task_works ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   int uprobe_srcu_id ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 225 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 229 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 589 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 66 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 106 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 121 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 129 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 138 "include/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 155 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 253 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 303 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 354 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 446 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 466 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 477 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 483 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 508 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 666 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 674 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 750 "include/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 814
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 849 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
};
#line 1027
struct prot_inuse;
#line 1028 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[83U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   unsigned int sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 71 "include/net/netns/ipv4.h"
struct neighbour;
#line 71 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 67 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 70 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 335 "include/linux/in.h"
union __anonunion_in6_u_196 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 335 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_196 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 386 "include/linux/netfilter.h"
struct ebt_table;
#line 387 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18
struct nf_ct_event_notifier;
#line 18
struct nf_exp_event_notifier;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 105 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 30 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 290 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154
struct cgroupfs_root;
#line 155
struct cgroup_subsys;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 58 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 150 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 388 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype  const  *cfts ;
};
#line 437
struct cgroup_taskset;
#line 447 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   char const   *name ;
   struct mutex hierarchy_mutex ;
   struct lock_class_key subsys_key ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 635 "include/linux/cgroup.h"
struct netprio_map {
   struct rcu_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 74 "include/net/netprio_cgroup.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 157 "include/linux/neighbour.h"
struct netpoll_info;
#line 158
struct phy_device;
#line 159
struct wireless_dev;
#line 160
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 116 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 135 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 221
struct neigh_parms;
#line 241 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 246 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 275 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 369
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 417 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 418 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 526
struct Qdisc;
#line 526 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 727 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct net_device * , unsigned char * , u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1040
struct iw_handler_def;
#line 1040
struct iw_public_data;
#line 1040
struct vlan_info;
#line 1040
struct in_device;
#line 1040
struct dn_dev;
#line 1040
struct inet6_dev;
#line 1040
struct cpu_rmap;
#line 1040
struct pcpu_lstats;
#line 1040
struct pcpu_tstats;
#line 1040
struct pcpu_dstats;
#line 1040 "include/linux/netdevice.h"
union __anonunion_ldv_33035_203 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1040
struct garp_port;
#line 1040
struct rtnl_link_ops;
#line 1040 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_33035_203 ldv_33035 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   int group ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 412 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 145 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 821 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** ) ;
};
#line 131
struct neigh_table;
#line 131 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct rcu_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 410 "include/net/neighbour.h"
union __anonunion_ldv_37207_208 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 410
struct dn_route;
#line 410 "include/net/neighbour.h"
union __anonunion_ldv_37231_209 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 410 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_37207_208 ldv_37207 ;
   struct dst_entry *path ;
   struct neighbour *_neighbour ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int flags ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37231_209 ldv_37231 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_210 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_210 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_37458_211 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37466_212 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37473_213 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37458_211 ldv_37458 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37466_212 ldv_37466 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37473_213 ldv_37473 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_214 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_214 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 801
struct request_sock_ops;
#line 802
struct timewait_sock_ops;
#line 803
struct inet_hashinfo;
#line 804
struct raw_hashinfo;
#line 805
struct udp_table;
#line 805 "include/net/sock.h"
union __anonunion_h_215 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 805 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_215 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 928 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_38802_216 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_38802_216 ldv_38802 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_217 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_217 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_218 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_218 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 253 "include/net/inet_sock.h"
struct inet_peer;
#line 368 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 146 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 153
struct disk_events;
#line 154
struct blk_integrity;
#line 154 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 47 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 64 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 76 "include/linux/mempool.h"
union __anonunion_ldv_42113_225 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 76 "include/linux/mempool.h"
union __anonunion_ldv_42117_226 {
   struct hlist_node ioc_node ;
   struct rcu_head __rcu_head ;
};
#line 76 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_42113_225 ldv_42113 ;
   union __anonunion_ldv_42117_226 ldv_42117 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 374 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 86
struct bsg_job;
#line 87
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 60
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 72 "include/linux/blkdev.h"
union __anonunion_ldv_42553_227 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 72 "include/linux/blkdev.h"
struct __anonstruct_elv_229 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 72 "include/linux/blkdev.h"
struct __anonstruct_flush_230 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 72 "include/linux/blkdev.h"
union __anonunion_ldv_42564_228 {
   struct __anonstruct_elv_229 elv ;
   struct __anonstruct_flush_230 flush ;
};
#line 72 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_42553_227 ldv_42553 ;
   union __anonunion_ldv_42564_228 ldv_42564 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 209 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 210 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 211 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 212 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 213 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 221 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 223 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 224 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 225 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 226 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 227
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 234 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 240 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 249 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 277
struct throtl_data;
#line 277 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 893 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1214 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1246 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1247 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1248 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1249 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1250 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1309 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 663 "include/net/ipv6.h"
union __anonunion_ldv_45065_236 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 663 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_45065_236 ldv_45065 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45083_237 {
   struct list_head gc_list ;
   struct rcu_head gc_rcu ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_45090_239 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45093_238 {
   struct __anonstruct_ldv_45090_239 ldv_45090 ;
   struct rcu_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
   union __anonunion_ldv_45083_237 ldv_45083 ;
   union __anonunion_ldv_45093_238 ldv_45093 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_key_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 323 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1612 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 725 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_47580_242 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_47580_242 ldv_47580 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 900 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 910 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
   int disk_timeout ;
};
#line 39 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 81 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 152 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 944 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 949 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 957
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 963 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 969 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct list_head barrier_acked_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   unsigned long last_reattach_jif ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   unsigned int peer_max_bio_size ;
   unsigned int local_max_bio_size ;
};
#line 1181
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 1848
enum drbd_force_detach_flags {
    DRBD_IO_ERROR = 0,
    DRBD_META_IO_ERROR = 1,
    DRBD_FORCE_DETACH = 2
} ;
#line 2501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 1732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___7;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 215 "include/linux/kobject.h"
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13668_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13668_134 ldv_13668 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 225 "include/linux/jump_label.h"
struct tracepoint;
#line 226 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct module_param_attrs;
#line 34 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 43 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 69
struct exception_table_entry;
#line 198
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 204 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 219
struct module_sect_attrs;
#line 219
struct module_notes_attrs;
#line 219
struct ftrace_event_call;
#line 219 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 640 "include/linux/module.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   unsigned long start_time ;
};
#line 753 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    abort_disk_io = 22,
    completed_ok = 23,
    resend = 24,
    fail_frozen_disk_io = 25,
    restart_frozen_disk_io = 26,
    nothing = 27
} ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 746
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1189
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1556
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_243 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_243 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 107 "include/linux/sem.h"
struct bio_set;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 275 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 3892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 178 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u32 __le32;
#line 182 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 640 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 22 "include/linux/drbd_nl.h"
struct detach {
   unsigned char detach_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 77 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 111 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 139 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 148 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_disk_timeout = 89,
    T_detach_force = 41048,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 114 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 272
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 276
  return (oldbit);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 313
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 321
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 326
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n\t .long 661b - .\n\t .long 663f - .\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 77 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 79
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 79
  return (tmp);
}
}
#line 82 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 84
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 84
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 112 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2869;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2869;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2869;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2869;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2869: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 71 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5501;
  case 2UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5501;
  case 4UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5501;
  case 8UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5501;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5501: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 175
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) ;
#line 177
extern void mutex_unlock(struct mutex * ) ;
#line 180
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 52
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6246;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6246;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6246;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6246;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6246: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5988.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5988.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5988.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5988.rlock, flags);
#line 341
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 79 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 155
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 324 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 327 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 329
  tmp = alloc_pages_current(gfp_mask, order);
#line 329
  return (tmp);
}
}
#line 360
extern void __free_pages(struct page * , unsigned int  ) ;
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 63 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 66
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 66
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 66
  if (tmp != 0L) {
#line 66
    warn_slowpath_null("include/linux/kref.h", 66);
  } else {

  }
#line 66
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 68
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 68
  if (tmp___0 != 0) {
#line 69
    (*release)(kref);
#line 70
    return (1);
  } else {

  }
#line 72
  return (0);
}
}
#line 92 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 94
  tmp = kref_sub(kref, 1U, release);
#line 94
  return (tmp);
}
}
#line 221 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 268 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 283
  tmp___2 = __kmalloc(size, flags);
#line 283
  return (tmp___2);
}
}
#line 349 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 351
  tmp = kmalloc(size, flags | 32768U);
#line 351
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 896 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 900
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 902
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 906
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 739 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 741
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2392 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 364 "include/linux/sched.h"
extern void schedule(void) ;
#line 2613
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  pagefault_disable();
#line 62
  tmp = lowmem_page_address((struct page  const  *)page);
#line 62
  return (tmp);
}
}
#line 66 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 68
  pagefault_enable();
#line 69
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 218 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 221
extern void bio_endio(struct bio * , int  ) ;
#line 230
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 970 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1212
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1307
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1308
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1451
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1452
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1453
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1454
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1455
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1457
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1461
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1465
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1467
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1468
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1469
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1470
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1471
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1472
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1473
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1475
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1476
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1477
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1480
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1482
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1483
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1484
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1485
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1488
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1491
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1494
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1495
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1529
mempool_t *drbd_md_io_page_pool ;
#line 1535
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1537
rwlock_t global_state_lock ;
#line 1554
char *ppsize(char *buf , unsigned long long size ) ;
#line 1579
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) ;
#line 1820 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1825
  _raw_read_lock(& global_state_lock);
#line 1826
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1827
  _raw_read_unlock(& global_state_lock);
#line 1829
  return (rv);
}
}
#line 1856 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1860
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1862
  if ((unsigned int )forcedetach == 0U) {
#line 1863
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1863
    if (tmp != 0) {
#line 1864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1865
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1866
      __ns.i = mdev->state.i;
#line 1866
      __ns.ldv_38802.disk = 4U;
#line 1866
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1867
    goto ldv_48612;
  } else {

  }
  case 2: ;
  case 1: 
#line 1872
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1873
  if ((unsigned int )forcedetach == 2U) {
#line 1874
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1875
  if ((int )mdev->state.ldv_38802.disk > 2) {
#line 1876
    __ns___0.i = mdev->state.i;
#line 1876
    __ns___0.ldv_38802.disk = 2U;
#line 1876
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1880
  goto ldv_48612;
  }
  ldv_48612: ;
#line 1883
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1896
  if (error != 0) {
#line 1898
    tmp = spinlock_check(& mdev->req_lock);
#line 1898
    flags = _raw_spin_lock_irqsave(tmp);
#line 1899
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1900
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1902
  return;
}
}
#line 1928 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1930
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1933
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1936
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2191 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2193
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2193
  i = tmp;
#line 2199
  if (i < 0) {
#line 2199
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2199);
  } else {

  }
#line 2200
  if (i == 0) {
#line 2201
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2203
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2204
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2206
      drbd_go_diskless(mdev);
    } else {

    }
#line 2207
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2209
  return;
}
}
#line 2212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2217
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2218
    return (0);
  } else {

  }
#line 2220
  atomic_inc(& mdev->local_cnt);
#line 2221
  io_allowed = (unsigned int )mdev->state.ldv_38802.disk >= (unsigned int )mins;
#line 2222
  if (io_allowed == 0) {
#line 2223
    put_ldev(mdev);
  } else {

  }
#line 2224
  return (io_allowed);
}
}
#line 2488 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2492
  tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2492
  if (tmp != 0) {
#line 2493
    return;
  } else {

  }
#line 2495
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2496
  if (r != 0) {
#line 2497
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 2498
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2500
  return;
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 173
  b = mdev->bitmap;
#line 174
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 174
  if (tmp == 0) {
#line 175
    return;
  } else {

  }
#line 176
  tmp___9 = get_current();
#line 176
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 176
    tmp___7 = get_current();
#line 176
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 176
      tmp___5 = get_current();
#line 176
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 176
        tmp___3 = get_current();
#line 176
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 176
        tmp___4 = (char *)"worker";
      }
#line 176
      tmp___6 = tmp___4;
    } else {
#line 176
      tmp___6 = (char *)"asender";
    }
#line 176
    tmp___8 = tmp___6;
  } else {
#line 176
    tmp___8 = (char *)"receiver";
  }
#line 176
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 182
  return;
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 188
  b = mdev->bitmap;
#line 191
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 193
    return;
  } else {

  }
#line 196
  tmp = ldv_mutex_trylock_9(& b->bm_change);
#line 196
  trylock_failed = tmp == 0;
#line 198
  if (trylock_failed != 0) {
#line 199
    tmp___9 = get_current();
#line 199
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 199
      tmp___7 = get_current();
#line 199
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 199
        tmp___5 = get_current();
#line 199
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 199
          tmp___3 = get_current();
#line 199
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 199
          tmp___4 = (char *)"worker";
        }
#line 199
        tmp___6 = tmp___4;
      } else {
#line 199
        tmp___6 = (char *)"asender";
      }
#line 199
      tmp___8 = tmp___6;
    } else {
#line 199
      tmp___8 = (char *)"receiver";
    }
#line 199
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 207
    ldv_mutex_lock_10(& b->bm_change);
  } else {

  }
#line 209
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 211
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 213
  b->bm_why = why;
#line 214
  b->bm_task = get_current();
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 219
  b = mdev->bitmap;
#line 220
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 222
    return;
  } else {

  }
#line 225
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 228
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 229
  b->bm_why = 0;
#line 230
  b->bm_task = 0;
#line 231
  ldv_mutex_unlock_11(& b->bm_change);
#line 232
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 262
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 262
  if (tmp != 0L) {
#line 262
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (262), "i" (12UL));
    ldv_48883: ;
#line 262
    goto ldv_48883;
  } else {

  }
#line 263
  page->ldv_13509.private = idx;
#line 264
  return;
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 268
  return (page->ldv_13509.private & 16777215UL);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 276
  b = mdev->bitmap;
#line 277
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13509.private);
#line 278
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 278
  if (tmp == 0) {
#line 278
    goto ldv_48893;
  } else {

  }
#line 278
  tmp___0 = get_current();
#line 278
  __wait.flags = 0U;
#line 278
  __wait.private = (void *)tmp___0;
#line 278
  __wait.func = & autoremove_wake_function;
#line 278
  __wait.task_list.next = & __wait.task_list;
#line 278
  __wait.task_list.prev = & __wait.task_list;
  ldv_48896: 
#line 278
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 278
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 278
  if (tmp___1 == 0) {
#line 278
    goto ldv_48895;
  } else {

  }
#line 278
  schedule();
#line 278
  goto ldv_48896;
  ldv_48895: 
#line 278
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_48893: ;
#line 281
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 283
  b = mdev->bitmap;
#line 284
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13509.private);
#line 285
  clear_bit(31, (unsigned long volatile   *)addr);
#line 286
  __asm__  volatile   ("": : : "memory");
#line 287
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 288
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 295
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 296
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 297
  return;
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 301
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 302
  return;
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 306
  addr = (unsigned long const volatile   *)(& page->ldv_13509.private);
#line 307
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 312
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 313
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 317
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 318
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 322
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13509.private));
#line 323
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 327
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13509.private));
#line 327
  return (tmp);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 334
  page_nr = (unsigned int )(long_nr >> 9);
#line 335
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 335
  if (tmp != 0L) {
#line 335
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (335), "i" (12UL));
    ldv_48930: ;
#line 335
    goto ldv_48930;
  } else {

  }
#line 336
  return (page_nr);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 342
  page_nr = (unsigned int )(bitnr >> 15);
#line 343
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 343
  if (tmp != 0L) {
#line 343
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (343), "i" (12UL));
    ldv_48936: ;
#line 343
    goto ldv_48936;
  } else {

  }
#line 344
  return (page_nr);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 349
  page = *(b->bm_pages + (unsigned long )idx);
#line 350
  tmp = kmap_atomic(page);
#line 350
  return ((unsigned long *)tmp);
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 355
  tmp = __bm_map_pidx(b, idx);
#line 355
  return (tmp);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 360
  __kunmap_atomic((void *)p_addr);
#line 361
  return;
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 365
  return;
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 391
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 392
    return;
  } else {

  }
#line 394
  i = 0UL;
#line 394
  goto ldv_48959;
  ldv_48958: ;
#line 395
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 396
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 399
    goto ldv_48957;
  } else {

  }
#line 401
  __free_pages(*(pages + i), 0U);
#line 402
  *(pages + i) = 0;
  ldv_48957: 
#line 394
  i = i + 1UL;
  ldv_48959: ;
#line 394
  if (i < number) {
#line 395
    goto ldv_48958;
  } else {

  }

#line 399
  return;
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 408
  if (v != 0) {
#line 409
    vfree((void const   *)ptr);
  } else {
#line 411
    kfree((void const   *)ptr);
  }
#line 412
  return;
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 419
  old_pages = b->bm_pages;
#line 421
  vmalloced = 0U;
#line 422
  have = b->bm_number_of_pages;
#line 424
  tmp = __builtin_expect(have == 0UL, 0L);
#line 424
  if (tmp != 0L) {
#line 424
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 424
    if (tmp___0 != 0L) {
#line 424
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (424), "i" (12UL));
      ldv_48976: ;
#line 424
      goto ldv_48976;
    } else {

    }
  } else {

  }
#line 425
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 425
  if (tmp___1 != 0L) {
#line 425
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 425
    if (tmp___2 != 0L) {
#line 425
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (425), "i" (12UL));
      ldv_48977: ;
#line 425
      goto ldv_48977;
    } else {

    }
  } else {

  }
#line 427
  if (have == want) {
#line 428
    return (old_pages);
  } else {

  }
#line 435
  bytes = (unsigned int )want * 8U;
#line 436
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 436
  new_pages = (struct page **)tmp___3;
#line 437
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 438
    tmp___4 = vzalloc((unsigned long )bytes);
#line 438
    new_pages = (struct page **)tmp___4;
#line 439
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 440
      return (0);
    } else {

    }
#line 441
    vmalloced = 1U;
  } else {

  }
#line 444
  if (want >= have) {
#line 445
    i = 0U;
#line 445
    goto ldv_48979;
    ldv_48978: 
#line 446
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 445
    i = i + 1U;
    ldv_48979: ;
#line 445
    if ((unsigned long )i < have) {
#line 446
      goto ldv_48978;
    } else {

    }

#line 447
    goto ldv_48982;
    ldv_48981: 
#line 448
    page = alloc_pages(131282U, 0U);
#line 449
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 450
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 451
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 452
      return (0);
    } else {

    }
#line 456
    bm_store_page_idx(page, (unsigned long )i);
#line 457
    *(new_pages + (unsigned long )i) = page;
#line 447
    i = i + 1U;
    ldv_48982: ;
#line 447
    if ((unsigned long )i < want) {
#line 448
      goto ldv_48981;
    } else {

    }

  } else {
#line 460
    i = 0U;
#line 460
    goto ldv_48985;
    ldv_48984: 
#line 461
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 460
    i = i + 1U;
    ldv_48985: ;
#line 460
    if ((unsigned long )i < want) {
#line 461
      goto ldv_48984;
    } else {

    }

  }
#line 467
  if (vmalloced != 0U) {
#line 468
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 470
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 472
  return (new_pages);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 481
  b = mdev->bitmap;
#line 482
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 482
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 482
  if (tmp != 0L) {
#line 482
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       482);
  } else {

  }
#line 482
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 483
  tmp___0 = kzalloc(400UL, 208U);
#line 483
  b = (struct drbd_bitmap *)tmp___0;
#line 484
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 485
    return (-12);
  } else {

  }
#line 486
  spinlock_check(& b->bm_lock);
#line 486
  __raw_spin_lock_init(& b->bm_lock.ldv_5988.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 487
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 488
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 490
  mdev->bitmap = b;
#line 492
  return (0);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 497
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 497
  if (_b != 0) {
#line 497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            497);
  } else {

  }
#line 497
  if (_b != 0) {
#line 497
    return (0UL);
  } else {

  }
#line 498
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 505
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 505
  if (_b != 0) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            505);
  } else {

  }
#line 505
  if (_b != 0) {
#line 505
    return;
  } else {

  }
#line 506
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 507
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 508
  kfree((void const   *)mdev->bitmap);
#line 509
  mdev->bitmap = 0;
#line 510
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 525
  cleared = 0;
#line 528
  tmp = (int )b->bm_bits & 32767;
#line 530
  mask = (1UL << (tmp & 63)) - 1UL;
#line 533
  mask = mask;
#line 535
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 536
  bm = p_addr + (unsigned long )(tmp / 64);
#line 537
  if (mask != 0UL) {
#line 542
    tmp___0 = hweight_long(*bm & ~ mask);
#line 542
    cleared = (int )tmp___0;
#line 543
    *bm = *bm & mask;
#line 544
    bm = bm + 1;
  } else {

  }
#line 553
  bm_unmap(p_addr);
#line 554
  return (cleared);
}
}
#line 557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 564
  tmp = (int )b->bm_bits & 32767;
#line 566
  mask = (1UL << (tmp & 63)) - 1UL;
#line 569
  mask = mask;
#line 571
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 572
  bm = p_addr + (unsigned long )(tmp / 64);
#line 573
  if (mask != 0UL) {
#line 578
    *bm = *bm | ~ mask;
#line 579
    bm = bm + 1;
  } else {

  }
#line 587
  bm_unmap(p_addr);
#line 588
  return;
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 595
  bits = 0UL;
#line 596
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 600
  idx = 0;
#line 600
  goto ldv_49037;
  ldv_49036: 
#line 601
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 602
  i = 0;
#line 602
  goto ldv_49033;
  ldv_49032: 
#line 603
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 603
  bits = tmp + bits;
#line 602
  i = i + 1;
  ldv_49033: ;
#line 602
  if ((unsigned int )i <= 511U) {
#line 603
    goto ldv_49032;
  } else {

  }
#line 604
  __bm_unmap(p_addr);
#line 605
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                605, 0);
#line 605
  _cond_resched();
#line 600
  idx = idx + 1;
  ldv_49037: ;
#line 600
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 601
    goto ldv_49036;
  } else {

  }
#line 608
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 609
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 610
  i = 0;
#line 610
  goto ldv_49040;
  ldv_49039: 
#line 611
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 611
  bits = tmp___0 + bits;
#line 610
  i = i + 1;
  ldv_49040: ;
#line 610
  if (i < last_word) {
#line 611
    goto ldv_49039;
  } else {

  }
#line 612
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 613
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 613
  bits = tmp___1 + bits;
#line 617
  __bm_unmap(p_addr);
#line 618
  return (bits);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 628
  end = offset + len;
#line 630
  if (b->bm_words < end) {
#line 631
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 632
    return;
  } else {

  }
#line 635
  goto ldv_49057;
  ldv_49056: 
#line 636
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 636
  __min2 = end;
#line 636
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 637
  idx = bm_word_to_page_idx(b, offset);
#line 638
  p_addr = bm_map_pidx(b, idx);
#line 639
  bm = p_addr + (offset & 511UL);
#line 640
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 641
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 644
    memset((void *)bm, c, do_now * 8UL);
  }
#line 645
  bm_unmap(p_addr);
#line 646
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 647
  offset = offset + do_now;
  ldv_49057: ;
#line 635
  if (offset < end) {
#line 636
    goto ldv_49056;
  } else {

  }

#line 640
  return;
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 661
  b = mdev->bitmap;
#line 664
  opages = 0;
#line 665
  err = 0;
#line 668
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 668
  if (_b != 0) {
#line 668
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            668);
  } else {

  }
#line 668
  if (_b != 0) {
#line 668
    return (-12);
  } else {

  }
#line 670
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 672
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 675
  if (b->bm_dev_capacity == capacity) {
#line 676
    goto out;
  } else {

  }
#line 678
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 680
  if (capacity == 0UL) {
#line 681
    spin_lock_irq(& b->bm_lock);
#line 682
    opages = b->bm_pages;
#line 683
    onpages = b->bm_number_of_pages;
#line 684
    owords = b->bm_words;
#line 685
    b->bm_pages = 0;
#line 686
    tmp___2 = 0UL;
#line 686
    b->bm_dev_capacity = tmp___2;
#line 686
    tmp___1 = tmp___2;
#line 686
    b->bm_words = tmp___1;
#line 686
    tmp___0 = tmp___1;
#line 686
    b->bm_bits = tmp___0;
#line 686
    tmp = tmp___0;
#line 686
    b->bm_set = tmp;
#line 686
    b->bm_number_of_pages = tmp;
#line 691
    spin_unlock_irq(& b->bm_lock);
#line 692
    bm_free_pages(opages, onpages);
#line 693
    bm_vk_free((void *)opages, opages_vmalloced);
#line 694
    goto out;
  } else {

  }
#line 696
  bits = (capacity + 7UL) >> 3;
#line 703
  words = (bits + 63UL) >> 6;
#line 705
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 705
  if (tmp___3 != 0) {
#line 706
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 707
    put_ldev(mdev);
#line 708
    if ((unsigned long long )bits > bits_on_disk) {
#line 709
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 710
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 711
      err = -28;
#line 712
      goto out;
    } else {

    }
  } else {

  }
#line 716
  want = (words * 8UL + 4095UL) >> 12;
#line 717
  have = b->bm_number_of_pages;
#line 718
  if (want == have) {
#line 719
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 719
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              719);
    } else {

    }
#line 720
    npages = b->bm_pages;
  } else {
#line 722
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 722
    if (tmp___4 != 0) {
#line 723
      npages = 0;
    } else {
#line 725
      npages = bm_realloc_pages(b, want);
    }
  }
#line 728
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 729
    err = -12;
#line 730
    goto out;
  } else {

  }
#line 733
  spin_lock_irq(& b->bm_lock);
#line 734
  opages = b->bm_pages;
#line 735
  owords = b->bm_words;
#line 736
  obits = b->bm_bits;
#line 738
  growing = bits > obits;
#line 739
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 740
    bm_set_surplus(b);
  } else {

  }
#line 742
  b->bm_pages = npages;
#line 743
  b->bm_number_of_pages = want;
#line 744
  b->bm_bits = bits;
#line 745
  b->bm_words = words;
#line 746
  b->bm_dev_capacity = capacity;
#line 748
  if (growing != 0) {
#line 749
    if (set_new_bits != 0) {
#line 750
      bm_memset(b, owords, 255, words - owords);
#line 751
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 753
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 757
  if (want < have) {
#line 759
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 762
  bm_clear_surplus(b);
#line 764
  spin_unlock_irq(& b->bm_lock);
#line 765
  if ((unsigned long )opages != (unsigned long )npages) {
#line 766
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 767
  if (growing == 0) {
#line 768
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 769
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 772
  drbd_bm_unlock(mdev);
#line 773
  return (err);
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 786
  b = mdev->bitmap;
#line 790
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 790
  if (_b != 0) {
#line 790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            790);
  } else {

  }
#line 790
  if (_b != 0) {
#line 790
    return (0UL);
  } else {

  }
#line 791
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 791
  if (_b___0 != 0) {
#line 791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            791);
  } else {

  }
#line 791
  if (_b___0 != 0) {
#line 791
    return (0UL);
  } else {

  }
#line 793
  tmp = spinlock_check(& b->bm_lock);
#line 793
  flags = _raw_spin_lock_irqsave(tmp);
#line 794
  s = b->bm_set;
#line 795
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 797
  return (s);
}
}
#line 800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 804
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 804
  if (tmp == 0) {
#line 805
    return (0UL);
  } else {

  }
#line 806
  s = _drbd_bm_total_weight(mdev);
#line 807
  put_ldev(mdev);
#line 808
  return (s);
}
}
#line 811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 813
  b = mdev->bitmap;
#line 814
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 814
  if (_b != 0) {
#line 814
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            814);
  } else {

  }
#line 814
  if (_b != 0) {
#line 814
    return (0UL);
  } else {

  }
#line 815
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 815
  if (_b___0 != 0) {
#line 815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            815);
  } else {

  }
#line 815
  if (_b___0 != 0) {
#line 815
    return (0UL);
  } else {

  }
#line 817
  return (b->bm_words);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 822
  b = mdev->bitmap;
#line 823
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 823
  if (_b != 0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            823);
  } else {

  }
#line 823
  if (_b != 0) {
#line 823
    return (0UL);
  } else {

  }
#line 825
  return (b->bm_bits);
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 836
  b = mdev->bitmap;
#line 842
  end = offset + number;
#line 844
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 844
  if (_b != 0) {
#line 844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            844);
  } else {

  }
#line 844
  if (_b != 0) {
#line 844
    return;
  } else {

  }
#line 845
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 845
  if (_b___0 != 0) {
#line 845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            845);
  } else {

  }
#line 845
  if (_b___0 != 0) {
#line 845
    return;
  } else {

  }
#line 846
  if (number == 0UL) {
#line 847
    return;
  } else {

  }
#line 848
  __ret_warn_on = b->bm_words <= offset;
#line 848
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 848
  if (tmp != 0L) {
#line 848
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       848);
  } else {

  }
#line 848
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 849
  __ret_warn_on___0 = b->bm_words < end;
#line 849
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 849
  if (tmp___0 != 0L) {
#line 849
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       849);
  } else {

  }
#line 849
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 851
  spin_lock_irq(& b->bm_lock);
#line 852
  goto ldv_49146;
  ldv_49145: 
#line 853
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 853
  __min2 = end;
#line 853
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 854
  idx = bm_word_to_page_idx(b, offset);
#line 855
  p_addr = bm_map_pidx(b, idx);
#line 856
  bm = p_addr + (offset & 511UL);
#line 857
  offset = offset + do_now;
#line 858
  goto ldv_49143;
  ldv_49142: 
#line 859
  bits = hweight_long(*bm);
#line 860
  tmp___1 = buffer;
#line 860
  buffer = buffer + 1;
#line 860
  word = *bm | *tmp___1;
#line 861
  tmp___2 = bm;
#line 861
  bm = bm + 1;
#line 861
  *tmp___2 = word;
#line 862
  tmp___3 = hweight_long(word);
#line 862
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_49143: 
#line 858
  tmp___4 = do_now;
#line 858
  do_now = do_now - (size_t )1;
#line 858
  if (tmp___4 != 0UL) {
#line 859
    goto ldv_49142;
  } else {

  }
#line 864
  bm_unmap(p_addr);
#line 865
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_49146: ;
#line 852
  if (offset < end) {
#line 853
    goto ldv_49145;
  } else {

  }

#line 872
  if (b->bm_words == end) {
#line 873
    tmp___5 = bm_clear_surplus(b);
#line 873
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 874
  spin_unlock_irq(& b->bm_lock);
#line 875
  return;
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 883
  b = mdev->bitmap;
#line 887
  end = offset + number;
#line 889
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 889
  if (_b != 0) {
#line 889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            889);
  } else {

  }
#line 889
  if (_b != 0) {
#line 889
    return;
  } else {

  }
#line 890
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 890
  if (_b___0 != 0) {
#line 890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            890);
  } else {

  }
#line 890
  if (_b___0 != 0) {
#line 890
    return;
  } else {

  }
#line 892
  spin_lock_irq(& b->bm_lock);
#line 893
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 896
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 901
    goto ldv_49171;
    ldv_49170: 
#line 902
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 902
    __min2 = end;
#line 902
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 903
    tmp = bm_word_to_page_idx(b, offset);
#line 903
    p_addr = bm_map_pidx(b, tmp);
#line 904
    bm = p_addr + (offset & 511UL);
#line 905
    offset = offset + do_now;
#line 906
    goto ldv_49168;
    ldv_49167: 
#line 907
    tmp___0 = buffer;
#line 907
    buffer = buffer + 1;
#line 907
    tmp___1 = bm;
#line 907
    bm = bm + 1;
#line 907
    *tmp___0 = *tmp___1;
    ldv_49168: 
#line 906
    tmp___2 = do_now;
#line 906
    do_now = do_now - (size_t )1;
#line 906
    if (tmp___2 != 0UL) {
#line 907
      goto ldv_49167;
    } else {

    }
#line 908
    bm_unmap(p_addr);
    ldv_49171: ;
#line 901
    if (offset < end) {
#line 902
      goto ldv_49170;
    } else {

    }

  }
#line 911
  spin_unlock_irq(& b->bm_lock);
#line 912
  return;
}
}
#line 915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 917
  b = mdev->bitmap;
#line 918
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 918
  if (_b != 0) {
#line 918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            918);
  } else {

  }
#line 918
  if (_b != 0) {
#line 918
    return;
  } else {

  }
#line 919
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 919
  if (_b___0 != 0) {
#line 919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            919);
  } else {

  }
#line 919
  if (_b___0 != 0) {
#line 919
    return;
  } else {

  }
#line 921
  spin_lock_irq(& b->bm_lock);
#line 922
  bm_memset(b, 0UL, 255, b->bm_words);
#line 923
  bm_clear_surplus(b);
#line 924
  b->bm_set = b->bm_bits;
#line 925
  spin_unlock_irq(& b->bm_lock);
#line 926
  return;
}
}
#line 929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 931
  b = mdev->bitmap;
#line 932
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 932
  if (_b != 0) {
#line 932
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            932);
  } else {

  }
#line 932
  if (_b != 0) {
#line 932
    return;
  } else {

  }
#line 933
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 933
  if (_b___0 != 0) {
#line 933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            933);
  } else {

  }
#line 933
  if (_b___0 != 0) {
#line 933
    return;
  } else {

  }
#line 935
  spin_lock_irq(& b->bm_lock);
#line 936
  bm_memset(b, 0UL, 0, b->bm_words);
#line 937
  b->bm_set = 0UL;
#line 938
  spin_unlock_irq(& b->bm_lock);
#line 939
  return;
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 953
  __mptr = (struct kref  const  *)kref;
#line 953
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 955
  put_ldev(ctx->mdev);
#line 956
  kfree((void const   *)ctx);
#line 957
  return;
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 962
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 963
  mdev = ctx->mdev;
#line 964
  b = mdev->bitmap;
#line 965
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 965
  idx = (unsigned int )tmp;
#line 966
  uptodate = (int )bio->bi_flags & 1;
#line 973
  if (error == 0 && uptodate == 0) {
#line 974
    error = -5;
  } else {

  }
#line 976
  if ((ctx->flags & 1U) == 0U) {
#line 976
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 976
    if (tmp___0 == 0) {
#line 978
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 980
  if (error != 0) {
#line 983
    ctx->error = error;
#line 984
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 987
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 987
    if (tmp___1 != 0) {
#line 988
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 991
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 992
    descriptor.modname = "drbd";
#line 992
    descriptor.function = "bm_async_io_complete";
#line 992
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 992
    descriptor.format = "bitmap page idx %u completed\n";
#line 992
    descriptor.lineno = 992U;
#line 992
    descriptor.flags = 0U;
#line 992
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 992
    if (tmp___2 != 0L) {
#line 992
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 995
  bm_page_unlock_io(mdev, (int )idx);
#line 997
  if ((int )ctx->flags & 1) {
#line 998
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 1000
  bio_put(bio);
#line 1002
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 1002
  if (tmp___3 != 0) {
#line 1003
    ctx->done = 1U;
#line 1004
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1005
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 1007
  return;
}
}
#line 1009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 1011
  tmp = bio_alloc_drbd(16U);
#line 1011
  bio = tmp;
#line 1012
  mdev = ctx->mdev;
#line 1013
  b = mdev->bitmap;
#line 1017
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1019
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1024
  __min1 = 4096U;
#line 1024
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1024
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1024
  len = __min1 < __min2 ? __min1 : __min2;
#line 1028
  bm_page_lock_io(mdev, page_nr);
#line 1031
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1033
  if ((int )ctx->flags & 1) {
#line 1035
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 1035
    page = (struct page *)tmp___1;
#line 1036
    dest = kmap_atomic(page);
#line 1037
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1038
    __len = 4096UL;
#line 1038
    if (__len > 63UL) {
#line 1038
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1038
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1039
    __kunmap_atomic(src);
#line 1040
    __kunmap_atomic(dest);
#line 1041
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1043
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1045
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1046
  bio->bi_sector = on_disk_sector;
#line 1049
  bio_add_page(bio, page, len, 0U);
#line 1050
  bio->bi_private = (void *)ctx;
#line 1051
  bio->bi_end_io = & bm_async_io_complete;
#line 1053
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1053
  if (tmp___2 != 0) {
#line 1054
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1055
    bio_endio(bio, -5);
  } else {
#line 1057
    submit_bio(rw, bio);
#line 1060
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1062
  return;
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char *tmp___8 ;

  {
#line 1070
  b = mdev->bitmap;
#line 1071
  count = 0;
#line 1074
  err = 0;
#line 1085
  tmp = kmalloc(32UL, 16U);
#line 1085
  ctx = (struct bm_aio_ctx *)tmp;
#line 1086
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1087
    return (-12);
  } else {

  }
#line 1089
  __constr_expr_0.mdev = mdev;
#line 1089
  __constr_expr_0.in_flight.counter = 1;
#line 1089
  __constr_expr_0.done = 0U;
#line 1089
  __constr_expr_0.flags = flags;
#line 1089
  __constr_expr_0.error = 0;
#line 1089
  __constr_expr_0.kref.refcount.counter = 2;
#line 1089
  *ctx = __constr_expr_0;
#line 1098
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1098
  if (tmp___0 == 0) {
#line 1099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1100
    kfree((void const   *)ctx);
#line 1101
    return (-19);
  } else {

  }
#line 1104
  if (ctx->flags == 0U) {
#line 1105
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1105
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1105
    if (tmp___1 != 0L) {
#line 1105
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1105);
    } else {

    }
#line 1105
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1107
  num_pages = (int )b->bm_number_of_pages;
#line 1109
  now = jiffies;
#line 1112
  i = 0;
#line 1112
  goto ldv_49258;
  ldv_49257: ;
#line 1114
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1115
    goto ldv_49251;
  } else {

  }
#line 1116
  if (rw & 1) {
#line 1117
    tmp___3 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1117
    if (tmp___3 != 0) {
#line 1118
      descriptor.modname = "drbd";
#line 1118
      descriptor.function = "bm_rw";
#line 1118
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1118
      descriptor.format = "skipped bm write for idx %u\n";
#line 1118
      descriptor.lineno = 1118U;
#line 1118
      descriptor.flags = 0U;
#line 1118
      tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1118
      if (tmp___2 != 0L) {
#line 1118
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                          "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1119
      goto ldv_49254;
    } else {

    }
#line 1123
    if (lazy_writeout_upper_idx != 0U) {
#line 1123
      tmp___5 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1123
      if (tmp___5 == 0) {
#line 1125
        descriptor___0.modname = "drbd";
#line 1125
        descriptor___0.function = "bm_rw";
#line 1125
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1125
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1125
        descriptor___0.lineno = 1125U;
#line 1125
        descriptor___0.flags = 0U;
#line 1125
        tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1125
        if (tmp___4 != 0L) {
#line 1125
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1126
        goto ldv_49254;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1129
  atomic_inc(& ctx->in_flight);
#line 1130
  bm_page_io_async(ctx, i, rw);
#line 1131
  count = count + 1;
#line 1132
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1132, 0);
#line 1132
  _cond_resched();
  ldv_49254: 
#line 1112
  i = i + 1;
  ldv_49258: ;
#line 1112
  if (i < num_pages) {
#line 1113
    goto ldv_49257;
  } else {

  }
  ldv_49251: 
#line 1143
  tmp___6 = atomic_dec_and_test(& ctx->in_flight);
#line 1143
  if (tmp___6 == 0) {
#line 1144
    wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1146
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1148
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1152
  if (ctx->error != 0) {
#line 1153
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1154
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "bm_rw");
#line 1155
    err = -5;
  } else {

  }
#line 1158
  tmp___7 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1158
  if (tmp___7 != 0) {
#line 1159
    err = -5;
  } else {

  }
#line 1161
  now = jiffies;
#line 1162
  if (rw == 1) {
#line 1163
    drbd_md_flush(mdev);
  } else {
#line 1165
    b->bm_set = bm_count_bits(b);
#line 1166
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1169
  now = b->bm_set;
#line 1171
  tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1171
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___8, now);
#line 1174
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1175
  return (err);
}
}
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1184
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1184
  return (tmp);
}
}
#line 1193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1195
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1195
  return (tmp);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1205
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1205
  return (tmp);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1221
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1221
  return (tmp);
}
}
#line 1237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1242
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1242
  if (tmp___0 != 0) {
#line 1243
    descriptor.modname = "drbd";
#line 1243
    descriptor.function = "drbd_bm_write_page";
#line 1243
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1243
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1243
    descriptor.lineno = 1243U;
#line 1243
    descriptor.flags = 0U;
#line 1243
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1243
    if (tmp != 0L) {
#line 1243
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1244
    return (0);
  } else {

  }
#line 1247
  tmp___1 = kmalloc(32UL, 16U);
#line 1247
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1248
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1249
    return (-12);
  } else {

  }
#line 1251
  __constr_expr_0.mdev = mdev;
#line 1251
  __constr_expr_0.in_flight.counter = 1;
#line 1251
  __constr_expr_0.done = 0U;
#line 1251
  __constr_expr_0.flags = 1U;
#line 1251
  __constr_expr_0.error = 0;
#line 1251
  __constr_expr_0.kref.refcount.counter = 2;
#line 1251
  *ctx = __constr_expr_0;
#line 1260
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1260
  if (tmp___2 == 0) {
#line 1261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1262
    kfree((void const   *)ctx);
#line 1263
    return (-19);
  } else {

  }
#line 1266
  bm_page_io_async(ctx, (int )idx, 529);
#line 1267
  wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
#line 1269
  if (ctx->error != 0) {
#line 1270
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "drbd_bm_write_page");
  } else {

  }
#line 1274
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1275
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1275
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1276
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1277
  return (err);
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1291
  b = mdev->bitmap;
#line 1297
  if (b->bm_bits < bm_fo) {
#line 1298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1299
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1301
    goto ldv_49293;
    ldv_49292: 
#line 1303
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1304
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1304
    p_addr = __bm_map_pidx(b, tmp);
#line 1306
    if ((int )find_zero_bit != 0) {
#line 1307
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1307
      i = (unsigned int )tmp___0;
    } else {
#line 1310
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1310
      i = (unsigned int )tmp___1;
    }
#line 1313
    __bm_unmap(p_addr);
#line 1314
    if (i <= 32767U) {
#line 1315
      bm_fo = (unsigned long )i + bit_offset;
#line 1316
      if (b->bm_bits <= bm_fo) {
#line 1317
        goto ldv_49290;
      } else {

      }
#line 1318
      goto found;
    } else {

    }
#line 1320
    bm_fo = bit_offset + 32768UL;
    ldv_49293: ;
#line 1301
    if (b->bm_bits > bm_fo) {
#line 1302
      goto ldv_49292;
    } else {

    }
    ldv_49290: 
#line 1322
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1325
  return (bm_fo);
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1331
  b = mdev->bitmap;
#line 1332
  i = 0xffffffffffffffffUL;
#line 1334
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1334
  if (_b != 0) {
#line 1334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1334);
  } else {

  }
#line 1334
  if (_b != 0) {
#line 1334
    return (i);
  } else {

  }
#line 1335
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1335
  if (_b___0 != 0) {
#line 1335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1335);
  } else {

  }
#line 1335
  if (_b___0 != 0) {
#line 1335
    return (i);
  } else {

  }
#line 1337
  spin_lock_irq(& b->bm_lock);
#line 1338
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1339
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1341
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1343
  spin_unlock_irq(& b->bm_lock);
#line 1344
  return (i);
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1349
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1349
  return (tmp);
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1365
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1365
  return (tmp);
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1371
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1371
  return (tmp);
}
}
#line 1380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1383
  b = mdev->bitmap;
#line 1384
  p_addr = 0;
#line 1386
  last_page_nr = 4294967295U;
#line 1387
  c = 0;
#line 1388
  changed_total = 0;
#line 1390
  if (b->bm_bits <= e) {
#line 1391
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1393
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1395
  bitnr = s;
#line 1395
  goto ldv_49332;
  ldv_49331: 
#line 1396
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1396
  page_nr = tmp;
#line 1397
  if (page_nr != last_page_nr) {
#line 1398
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1399
      __bm_unmap(p_addr);
    } else {

    }
#line 1400
    if (c < 0) {
#line 1401
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1402
    if (c > 0) {
#line 1403
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1404
    changed_total = changed_total + c;
#line 1405
    c = 0;
#line 1406
    p_addr = __bm_map_pidx(b, page_nr);
#line 1407
    last_page_nr = page_nr;
  } else {

  }
#line 1409
  if (val != 0) {
#line 1410
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1410
    c = (tmp___0 == 0) + c;
  } else {
#line 1412
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1412
    c = c - (tmp___1 != 0);
  }
#line 1395
  bitnr = bitnr + 1UL;
  ldv_49332: ;
#line 1395
  if (bitnr <= e) {
#line 1396
    goto ldv_49331;
  } else {

  }

#line 1414
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1415
    __bm_unmap(p_addr);
  } else {

  }
#line 1416
  if (c < 0) {
#line 1417
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1418
  if (c > 0) {
#line 1419
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1420
  changed_total = changed_total + c;
#line 1421
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1422
  return (changed_total);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1433
  b = mdev->bitmap;
#line 1434
  c = 0;
#line 1436
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1436
  if (_b != 0) {
#line 1436
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1436);
  } else {

  }
#line 1436
  if (_b != 0) {
#line 1436
    return (1);
  } else {

  }
#line 1437
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1437
  if (_b___0 != 0) {
#line 1437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1437);
  } else {

  }
#line 1437
  if (_b___0 != 0) {
#line 1437
    return (0);
  } else {

  }
#line 1439
  tmp = spinlock_check(& b->bm_lock);
#line 1439
  flags = _raw_spin_lock_irqsave(tmp);
#line 1440
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1441
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1443
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1445
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1446
  return (c);
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1452
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1452
  return (tmp);
}
}
#line 1456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1458
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1458
  return (- tmp);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1468
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1468
  paddr = (unsigned long *)tmp;
#line 1469
  i = first_word;
#line 1469
  goto ldv_49371;
  ldv_49370: 
#line 1470
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1470
  bits = (int )tmp___0;
#line 1471
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1472
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1469
  i = i + 1;
  ldv_49371: ;
#line 1469
  if (i < last_word) {
#line 1470
    goto ldv_49370;
  } else {

  }
#line 1474
  __kunmap_atomic((void *)paddr);
#line 1475
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1492
  b = mdev->bitmap;
#line 1493
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1494
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1501
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1503
    spin_lock_irq(& b->bm_lock);
#line 1504
    __bm_change_bits_to(mdev, s, e, 1);
#line 1505
    spin_unlock_irq(& b->bm_lock);
#line 1506
    return;
  } else {

  }
#line 1511
  spin_lock_irq(& b->bm_lock);
#line 1514
  if (sl != 0UL) {
#line 1515
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1517
  first_page = (int )(sl >> 15);
#line 1518
  last_page = (int )(el >> 15);
#line 1522
  first_word = (int )(sl >> 6) & 511;
#line 1523
  last_word = 512;
#line 1526
  page_nr = first_page;
#line 1526
  goto ldv_49388;
  ldv_49387: 
#line 1527
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1528
  spin_unlock_irq(& b->bm_lock);
#line 1529
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1529, 0);
#line 1529
  _cond_resched();
#line 1530
  first_word = 0;
#line 1531
  spin_lock_irq(& b->bm_lock);
#line 1526
  page_nr = page_nr + 1;
  ldv_49388: ;
#line 1526
  if (page_nr < last_page) {
#line 1527
    goto ldv_49387;
  } else {

  }
#line 1534
  last_word = (int )(el >> 6) & 511;
#line 1542
  if (last_word != 0) {
#line 1543
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1550
  if (el <= (unsigned long )e) {
#line 1551
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1552
  spin_unlock_irq(& b->bm_lock);
#line 1553
  return;
}
}
#line 1562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1565
  b = mdev->bitmap;
#line 1569
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1569
  if (_b != 0) {
#line 1569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1569);
  } else {

  }
#line 1569
  if (_b != 0) {
#line 1569
    return (0);
  } else {

  }
#line 1570
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1570
  if (_b___0 != 0) {
#line 1570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1570);
  } else {

  }
#line 1570
  if (_b___0 != 0) {
#line 1570
    return (0);
  } else {

  }
#line 1572
  tmp = spinlock_check(& b->bm_lock);
#line 1572
  flags = _raw_spin_lock_irqsave(tmp);
#line 1573
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1574
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1575
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1576
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1576
    p_addr = bm_map_pidx(b, tmp___0);
#line 1577
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1577
    i = tmp___1 != 0;
#line 1578
    bm_unmap(p_addr);
  } else
#line 1579
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1580
    i = -1;
  } else {
#line 1582
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1583
    i = 0;
  }
#line 1586
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1587
  return (i);
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1594
  b = mdev->bitmap;
#line 1595
  p_addr = 0;
#line 1597
  page_nr = 4294967295U;
#line 1598
  c = 0;
#line 1604
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1604
  if (_b != 0) {
#line 1604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1604);
  } else {

  }
#line 1604
  if (_b != 0) {
#line 1604
    return (1);
  } else {

  }
#line 1605
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1605
  if (_b___0 != 0) {
#line 1605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1605);
  } else {

  }
#line 1605
  if (_b___0 != 0) {
#line 1605
    return (1);
  } else {

  }
#line 1607
  tmp = spinlock_check(& b->bm_lock);
#line 1607
  flags = _raw_spin_lock_irqsave(tmp);
#line 1608
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1609
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1610
  bitnr = s;
#line 1610
  goto ldv_49429;
  ldv_49428: 
#line 1611
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1611
  idx = tmp___0;
#line 1612
  if (page_nr != idx) {
#line 1613
    page_nr = idx;
#line 1614
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1615
      bm_unmap(p_addr);
    } else {

    }
#line 1616
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1618
  _b___1 = b->bm_bits <= bitnr;
#line 1618
  if (_b___1 != 0) {
#line 1618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1618);
  } else {

  }
#line 1618
  if (_b___1 != 0) {
#line 1619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1621
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1621
    c = (tmp___1 != 0) + c;
  }
#line 1610
  bitnr = bitnr + 1UL;
  ldv_49429: ;
#line 1610
  if (bitnr <= (unsigned long )e) {
#line 1611
    goto ldv_49428;
  } else {

  }

#line 1624
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1625
    bm_unmap(p_addr);
  } else {

  }
#line 1626
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1627
  return (c);
}
}
#line 1645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1647
  b = mdev->bitmap;
#line 1652
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1652
  if (_b != 0) {
#line 1652
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1652);
  } else {

  }
#line 1652
  if (_b != 0) {
#line 1652
    return (0);
  } else {

  }
#line 1653
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1653
  if (_b___0 != 0) {
#line 1653
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1653);
  } else {

  }
#line 1653
  if (_b___0 != 0) {
#line 1653
    return (0);
  } else {

  }
#line 1655
  tmp = spinlock_check(& b->bm_lock);
#line 1655
  flags = _raw_spin_lock_irqsave(tmp);
#line 1656
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1657
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1659
  s = (int )(enr << 6);
#line 1660
  _min1 = (enr + 1UL) << 6;
#line 1660
  _min2 = b->bm_words;
#line 1660
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1661
  count = 0;
#line 1662
  if ((size_t )s < b->bm_words) {
#line 1663
    n = e - s;
#line 1664
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1664
    p_addr = bm_map_pidx(b, tmp___0);
#line 1665
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1666
    goto ldv_49455;
    ldv_49454: 
#line 1667
    tmp___1 = bm;
#line 1667
    bm = bm + 1;
#line 1667
    tmp___2 = hweight_long(*tmp___1);
#line 1667
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_49455: 
#line 1666
    tmp___3 = n;
#line 1666
    n = n - 1;
#line 1666
    if (tmp___3 != 0) {
#line 1667
      goto ldv_49454;
    } else {

    }
#line 1668
    bm_unmap(p_addr);
  } else {
#line 1670
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1672
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1673
  return (count);
}
}
#line 1678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1680
  b = mdev->bitmap;
#line 1685
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1685
  if (_b != 0) {
#line 1685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1685);
  } else {

  }
#line 1685
  if (_b != 0) {
#line 1685
    return (0UL);
  } else {

  }
#line 1686
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1686
  if (_b___0 != 0) {
#line 1686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1686);
  } else {

  }
#line 1686
  if (_b___0 != 0) {
#line 1686
    return (0UL);
  } else {

  }
#line 1688
  spin_lock_irq(& b->bm_lock);
#line 1689
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1690
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1691
  weight = b->bm_set;
#line 1693
  s = al_enr * 16UL;
#line 1694
  __min1 = s + 16UL;
#line 1694
  __min2 = b->bm_words;
#line 1694
  e = __min1 < __min2 ? __min1 : __min2;
#line 1696
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1697);
  } else {

  }
#line 1698
  count = 0;
#line 1699
  if (b->bm_words > s) {
#line 1700
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1700
    i = do_now;
#line 1701
    tmp = bm_word_to_page_idx(b, s);
#line 1701
    p_addr = bm_map_pidx(b, tmp);
#line 1702
    bm = p_addr + (s & 511UL);
#line 1703
    goto ldv_49479;
    ldv_49478: 
#line 1704
    tmp___0 = hweight_long(*bm);
#line 1704
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1705
    *bm = 0xffffffffffffffffUL;
#line 1706
    bm = bm + 1;
    ldv_49479: 
#line 1703
    tmp___1 = i;
#line 1703
    i = i - 1;
#line 1703
    if (tmp___1 != 0) {
#line 1704
      goto ldv_49478;
    } else {

    }
#line 1708
    bm_unmap(p_addr);
#line 1709
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1710
    if (b->bm_words == e) {
#line 1711
      tmp___2 = bm_clear_surplus(b);
#line 1711
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1715
  weight = b->bm_set - weight;
#line 1716
  spin_unlock_irq(& b->bm_lock);
#line 1717
  return (weight);
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1725
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1727
  mutex_lock(ldv_func_arg1);
#line 1728
  return;
}
}
#line 1730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1735
  tmp = mutex_trylock(ldv_func_arg1);
#line 1735
  ldv_func_res = tmp;
#line 1737
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1737
  return (tmp___0);
#line 1739
  return (ldv_func_res);
}
}
#line 1742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1747
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1749
  mutex_unlock(ldv_func_arg1);
#line 1750
  return;
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1757
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1759
  mutex_lock(ldv_func_arg1);
#line 1760
  return;
}
}
#line 1762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1767
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1769
  mutex_unlock(ldv_func_arg1);
#line 1770
  return;
}
}
#line 1772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1777
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1779
  mutex_lock(ldv_func_arg1);
#line 1780
  return;
}
}
#line 1782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1787
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1789
  mutex_unlock(ldv_func_arg1);
#line 1790
  return;
}
}
#line 1792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1797
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1799
  mutex_unlock(ldv_func_arg1);
#line 1800
  return;
}
}
#line 1802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1807
  tmp = mutex_trylock(ldv_func_arg1);
#line 1807
  ldv_func_res = tmp;
#line 1809
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1809
  return (tmp___0);
#line 1811
  return (ldv_func_res);
}
}
#line 1814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1819
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1821
  mutex_lock(ldv_func_arg1);
#line 1822
  return;
}
}
#line 1824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1829
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1831
  mutex_unlock(ldv_func_arg1);
#line 1832
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 457 "include/linux/module.h"
extern bool try_module_get(struct module * ) ;
#line 459
extern void module_put(struct module * ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 80 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 81
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 88
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 120
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 121
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 292 "include/linux/backing-dev.h"
__inline static int bdi_rw_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 294
  tmp = bdi_congested(bdi, 12);
#line 294
  return (tmp);
}
}
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1147
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1149
  return (mdev);
}
}
#line 1542
int proc_details ;
#line 1689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1690
struct file_operations  const  drbd_proc_fops ;
#line 2231 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2242
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2243
    *bits_left = mdev->ov_left;
  } else {
#line 2245
    tmp = drbd_bm_total_weight(mdev);
#line 2245
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2248
  if (*bits_left > mdev->rs_total) {
#line 2254
    __asm__  volatile   ("": : : "memory");
#line 2255
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38802.conn);
#line 2255
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2258
    *per_mil_done = 0U;
  } else {
#line 2269
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2270
    left = *bits_left >> (int )shift;
#line 2271
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2272
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2273
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2275
  return;
}
}
#line 2361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2363
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 93
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 97
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 108
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 108
  if (tmp___0 != 0L) {
#line 110
    seq_printf(seq, "%ld,", v / 1000000L);
#line 111
    v = v % 1000000L;
#line 112
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 113
    tmp = __builtin_expect(v > 999L, 1L);
#line 113
    if (tmp != 0L) {
#line 114
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 116
      seq_printf(seq, "%ld", v);
    }
  }
#line 117
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 130
  stalled = 0;
#line 132
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 134
  x = (int )(res / 50U);
#line 135
  y = 20 - x;
#line 136
  seq_printf(seq, "\t[");
#line 137
  i = 1;
#line 137
  goto ldv_49693;
  ldv_49692: 
#line 138
  seq_printf(seq, "=");
#line 137
  i = i + 1;
  ldv_49693: ;
#line 137
  if (i < x) {
#line 138
    goto ldv_49692;
  } else {

  }
#line 139
  seq_printf(seq, ">");
#line 140
  i = 0;
#line 140
  goto ldv_49696;
  ldv_49695: 
#line 141
  seq_printf(seq, ".");
#line 140
  i = i + 1;
  ldv_49696: ;
#line 140
  if (i < y) {
#line 141
    goto ldv_49695;
  } else {

  }
#line 142
  seq_printf(seq, "] ");
#line 144
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 145
    seq_printf(seq, "verified:");
  } else {
#line 147
    seq_printf(seq, "sync\'ed:");
  }
#line 148
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 151
  if (mdev->rs_total > 1048576UL) {
#line 152
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 156
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 173
  i = (mdev->rs_last_mark + 2) % 8;
#line 174
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 175
  if (dt > 6000UL) {
#line 176
    stalled = 1;
  } else {

  }
#line 178
  if (dt == 0UL) {
#line 179
    dt = dt + 1UL;
  } else {

  }
#line 180
  db = mdev->rs_mark_left[i] - rs_left;
#line 181
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 183
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 186
  dbdt = db / dt << 2;
#line 187
  seq_printf(seq, " speed: ");
#line 188
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 189
  seq_printf(seq, " (");
#line 191
  if (proc_details > 0) {
#line 193
    i = (mdev->rs_last_mark + 7) % 8;
#line 194
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 195
    if (dt == 0UL) {
#line 196
      dt = dt + 1UL;
    } else {

    }
#line 197
    db = mdev->rs_mark_left[i] - rs_left;
#line 198
    dbdt = db / dt << 2;
#line 199
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 200
    seq_printf(seq, " -- ");
  } else {

  }
#line 206
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 207
  if (dt == 0UL) {
#line 208
    dt = 1UL;
  } else {

  }
#line 209
  db = mdev->rs_total - rs_left;
#line 210
  dbdt = db / dt << 2;
#line 211
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 212
  seq_printf(seq, ")");
#line 214
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 216
    seq_printf(seq, " want: ");
#line 217
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 219
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 221
  if (proc_details > 0) {
#line 224
    tmp = drbd_bm_bits(mdev);
#line 224
    bm_bits = tmp;
#line 226
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 228
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 230
      bit_pos = mdev->bm_resync_fo;
    }
#line 233
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 243
  __mptr = (struct lc_element  const  *)e;
#line 243
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 245
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 248
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 253
  hole = 0;
#line 257
  write_ordering_chars[0] = 110;
#line 257
  write_ordering_chars[1] = 100;
#line 257
  write_ordering_chars[2] = 102;
#line 263
  tmp = drbd_buildtag();
#line 263
  seq_printf(seq, "version: 8.3.13 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 286
  i = 0;
#line 286
  goto ldv_49718;
  ldv_49717: 
#line 287
  mdev = minor_to_mdev((unsigned int )i);
#line 288
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 289
    hole = 1;
#line 290
    goto ldv_49716;
  } else {

  }
#line 292
  if (hole != 0) {
#line 293
    hole = 0;
#line 294
    seq_printf(seq, "\n");
  } else {

  }
#line 297
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38802.conn);
#line 299
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 302
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 305
    bdi_rw_congested(& (mdev->rq_queue)->backing_dev_info);
#line 307
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 307
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 307
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 307
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 307
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 307
    tmp___5 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 307
    tmp___6 = is_susp(mdev->state);
#line 307
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.pdsk);
#line 307
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.disk);
#line 307
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_38802.peer);
#line 307
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_38802.role);
#line 307
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 338
    tmp___11 = drbd_bm_total_weight(mdev);
#line 338
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 342
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 346
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 348
  if (proc_details > 0) {
#line 348
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 348
    if (tmp___12 != 0) {
#line 349
      lc_seq_printf_stats(seq, mdev->resync);
#line 350
      lc_seq_printf_stats(seq, mdev->act_log);
#line 351
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 354
  if (proc_details > 1) {
#line 355
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 356
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_49716: 
#line 286
  i = i + 1;
  ldv_49718: ;
#line 286
  if ((unsigned int )i < minor_count) {
#line 287
    goto ldv_49717;
  } else {

  }

#line 362
  return (0);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 367
  tmp___1 = try_module_get(& __this_module);
#line 367
  if ((int )tmp___1) {
#line 368
    tmp = PDE((struct inode  const  *)inode);
#line 368
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 368
    return (tmp___0);
  } else {

  }
#line 369
  return (-19);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 374
  module_put(& __this_module);
#line 375
  tmp = single_release(inode, file);
#line 375
  return (tmp);
}
}
#line 396
void ldv_check_final_state(void) ;
#line 399
extern void ldv_check_return_value(int  ) ;
#line 405
void ldv_initialize(void) ;
#line 408
extern void ldv_handler_precall(void) ;
#line 411
extern int nondet_int(void) ;
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 451
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 441
  LDV_IN_INTERRUPT = 1;
#line 450
  ldv_initialize();
#line 454
  goto ldv_49754;
  ldv_49753: 
#line 458
  tmp = nondet_int();
#line 458
  switch (tmp) {
  case 0: ;
#line 463
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 468
    ldv_handler_precall();
#line 469
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 470
    ldv_check_return_value(res_drbd_proc_open_4);
#line 471
    if (res_drbd_proc_open_4 != 0) {
#line 472
      goto ldv_module_exit;
    } else {

    }
#line 473
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 479
  goto ldv_49750;
  case 1: ;
#line 483
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 488
    ldv_handler_precall();
#line 489
    drbd_proc_release(var_group1, var_group2);
#line 490
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 496
  goto ldv_49750;
  default: ;
#line 497
  goto ldv_49750;
  }
  ldv_49750: ;
  ldv_49754: 
#line 454
  tmp___0 = nondet_int();
#line 454
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 456
    goto ldv_49753;
  } else {

  }

  ldv_module_exit: ;
#line 506
  ldv_check_final_state();
#line 509
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 518
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 520
  mutex_lock(ldv_func_arg1);
#line 521
  return;
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 528
  tmp = mutex_trylock(ldv_func_arg1);
#line 528
  ldv_func_res = tmp;
#line 530
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 530
  return (tmp___0);
#line 532
  return (ldv_func_res);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 540
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 542
  mutex_unlock(ldv_func_arg1);
#line 543
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 550
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 552
  mutex_lock(ldv_func_arg1);
#line 553
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 560
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 562
  mutex_unlock(ldv_func_arg1);
#line 563
  return;
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 570
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 572
  mutex_lock(ldv_func_arg1);
#line 573
  return;
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 580
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 582
  mutex_unlock(ldv_func_arg1);
#line 583
  return;
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 590
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 592
  mutex_unlock(ldv_func_arg1);
#line 593
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 323 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5536;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5536;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5536;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5536;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5536: ;
#line 216
  return (__ret);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5988.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5988.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 342 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 342
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 342
  return (tmp);
}
}
#line 356 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 358
  tmp = PageTail((struct page  const  *)page);
#line 358
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 358
  if (tmp___0 != 0L) {
#line 359
    return (page->ldv_13509.first_page);
  } else {

  }
#line 360
  return (page);
}
}
#line 378 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 380
  tmp = compound_head(page);
#line 380
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_13496.ldv_13495.ldv_13494._count));
#line 380
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19825: ;
#line 65
    goto ldv_19825;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19826: ;
#line 67
    goto ldv_19826;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19827: ;
#line 68
    goto ldv_19827;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 206
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_2007.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 897 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 916
  return ((loff_t )inode->i_size);
}
}
#line 361 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2178
extern void flush_signals(struct task_struct * ) ;
#line 2212
extern void force_sig(int  , struct task_struct * ) ;
#line 1430 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 226 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 684 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1018 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1020
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1154
  return (mdev->minor);
}
}
#line 1165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1167
  ldv_mutex_lock_44(& mdev->data.mutex);
#line 1170
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1170
  if (tmp != 0L) {
#line 1171
    ldv_mutex_unlock_45(& mdev->data.mutex);
#line 1172
    return (0);
  } else {

  }
#line 1174
  return (1);
}
}
#line 1177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1179
  ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1180
  return;
}
}
#line 1206
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1218
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1220
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1237
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1241
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1246
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1254
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1260
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1262
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1263
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1265
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1266
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1268
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1272
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1278
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1279
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1281
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1283
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1284
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1287
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1521
wait_queue_head_t drbd_pp_wait ;
#line 1537 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1565
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1568
int drbd_worker(struct drbd_thread *thi ) ;
#line 1569
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1570
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1571
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1572
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1573
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1576
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1581
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1582
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1584 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1586
  if (mdev->ov_last_oos_size != 0UL) {
#line 1587
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1591
  mdev->ov_last_oos_size = 0UL;
#line 1592
  return;
}
}
#line 1595
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1596
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1599
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1600
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1601
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1602
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1603
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1604
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1605
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1606
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1608
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1609
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1610
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1611
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1612
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1614
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1615
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1616
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1618
void resync_timer_fn(unsigned long data ) ;
#line 1619
void start_resync_timer_fn(unsigned long data ) ;
#line 1622
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1623
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1626
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1631
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1646 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1650
  if (level == 1) {
#line 1651
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1653
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1655
  return (err);
}
}
#line 1658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1660
  val = 1;
#line 1661
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1663
  return;
}
}
#line 1665 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1667
  val = 0;
#line 1668
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1670
  return;
}
}
#line 1695
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1696
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1697
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1699
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1701
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1702
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1705
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1706
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1710
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1789
  return ((struct page *)page->ldv_13509.private);
}
}
#line 1797 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1799
  page = e->pages;
#line 1800
  goto ldv_49406;
  ldv_49405: 
#line 1801
  tmp = page_count(page);
#line 1801
  if (tmp > 1) {
#line 1802
    return (1);
  } else {

  }
#line 1800
  page = page_chain_next(page);
  ldv_49406: ;
#line 1800
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1800
    tmp___0 = page_chain_next(page);
#line 1800
    __builtin_prefetch((void const   *)tmp___0);
#line 1800
    if (1 != 0) {
#line 1801
      goto ldv_49405;
    } else {
#line 1803
      goto ldv_49407;
    }
  } else {

  }
  ldv_49407: ;
#line 1804
  return (0);
}
}
#line 1807 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1809
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1809
  if (tmp == 0) {
#line 1809
    goto ldv_49411;
  } else {

  }
#line 1809
  tmp___0 = get_current();
#line 1809
  __wait.flags = 0U;
#line 1809
  __wait.private = (void *)tmp___0;
#line 1809
  __wait.func = & autoremove_wake_function;
#line 1809
  __wait.task_list.next = & __wait.task_list;
#line 1809
  __wait.task_list.prev = & __wait.task_list;
  ldv_49414: 
#line 1809
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1809
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1809
  if (tmp___1 == 0) {
#line 1809
    goto ldv_49413;
  } else {

  }
#line 1809
  schedule();
#line 1809
  goto ldv_49414;
  ldv_49413: 
#line 1809
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49411: ;
#line 1812
  return;
}
}
#line 1813 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1815
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1816
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1817
  return;
}
}
#line 1856 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1860
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1862
  if ((unsigned int )forcedetach == 0U) {
#line 1863
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1863
    if (tmp != 0) {
#line 1864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1865
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1866
      __ns.i = mdev->state.i;
#line 1866
      __ns.ldv_38802.disk = 4U;
#line 1866
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1867
    goto ldv_49443;
  } else {

  }
  case 2: ;
  case 1: 
#line 1872
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1873
  if ((unsigned int )forcedetach == 2U) {
#line 1874
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1875
  if ((int )mdev->state.ldv_38802.disk > 2) {
#line 1876
    __ns___0.i = mdev->state.i;
#line 1876
    __ns___0.ldv_38802.disk = 2U;
#line 1876
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1880
  goto ldv_49443;
  }
  ldv_49443: ;
#line 1883
  return;
}
}
#line 1941 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1944
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1944
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1944
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1944
    tmp___0 = 0UL;
  }
#line 1944
  return (tmp___0);
}
}
#line 2023 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2026
  tmp = spinlock_check(& q->q_lock);
#line 2026
  flags = _raw_spin_lock_irqsave(tmp);
#line 2027
  list_add_tail(& w->list, & q->q);
#line 2028
  up(& q->s);
#line 2030
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2031
  return;
}
}
#line 2033 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2035
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 2035
  if (tmp != 0) {
#line 2036
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2037
  return;
}
}
#line 2039 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2041
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2042
  wake_asender(mdev);
#line 2043
  return;
}
}
#line 2045 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2049
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2049
  return (tmp);
}
}
#line 2064 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2066
  _drbd_thread_stop(thi, 0, 1);
#line 2067
  return;
}
}
#line 2124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2126
  atomic_inc(& mdev->rs_pending_cnt);
#line 2127
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 273 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 276
  bio = bio_clone(bio_src, 16U);
#line 278
  req->private_bio = bio;
#line 280
  bio->bi_private = (void *)req;
#line 281
  bio->bi_end_io = & drbd_endio_pri;
#line 282
  bio->bi_next = 0;
#line 283
  return;
}
}
#line 326
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 328
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 337
  mdev = req->mdev;
#line 342
  rv = __req_mod(req, what, & m);
#line 343
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 344
    complete_master_bio(mdev, & m);
  } else {

  }
#line 346
  return (rv);
}
}
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 357
  mdev = req->mdev;
#line 361
  tmp = spinlock_check(& mdev->req_lock);
#line 361
  flags = _raw_spin_lock_irqsave(tmp);
#line 362
  rv = __req_mod(req, what, & m);
#line 363
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 365
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 366
    complete_master_bio(mdev, & m);
  } else {

  }
#line 368
  return (rv);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 97
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 130
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 131
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 131
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffff068UL;
#line 133
  md_io->error = error;
#line 146
  drbd_md_put_buffer(mdev);
#line 147
  md_io->done = 1U;
#line 148
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 149
  bio_put(bio);
#line 150
  put_ldev(mdev);
#line 151
  return;
}
}
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 158
  flags = 0UL;
#line 159
  mdev = e->mdev;
#line 161
  if (e->ldv_47580.block_id == 0ULL) {
#line 161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            161);
  } else {

  }
#line 163
  tmp = spinlock_check(& mdev->req_lock);
#line 163
  flags = _raw_spin_lock_irqsave(tmp);
#line 164
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 165
  list_del(& e->w.list);
#line 166
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 166
  if (tmp___0 != 0) {
#line 167
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 168
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 168
  if (tmp___1 != 0) {
#line 169
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_read_sec_final");
  } else {

  }
#line 170
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 172
  drbd_queue_work(& mdev->data.work, & e->w);
#line 173
  put_ldev(mdev);
#line 174
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 180
  flags = 0UL;
#line 181
  mdev = e->mdev;
#line 187
  if (e->ldv_47580.block_id == 0ULL) {
#line 187
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            187);
  } else {

  }
#line 193
  e_sector = e->sector;
#line 194
  do_al_complete_io = (int )e->flags & 1;
#line 195
  is_syncer_req = e->ldv_47580.block_id == 0xffffffffffffffffULL;
#line 197
  tmp = spinlock_check(& mdev->req_lock);
#line 197
  flags = _raw_spin_lock_irqsave(tmp);
#line 198
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 199
  list_del(& e->w.list);
#line 200
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 207
  if (is_syncer_req != 0) {
#line 207
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 207
    do_wake = tmp___0;
  } else {
#line 207
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 207
    do_wake = tmp___1;
  }
#line 211
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 211
  if (tmp___2 != 0) {
#line 212
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_write_sec_final");
  } else {

  }
#line 213
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 215
  if (is_syncer_req != 0) {
#line 216
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 218
  if (do_wake != 0) {
#line 219
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 221
  if (do_al_complete_io != 0) {
#line 222
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 224
  wake_asender(mdev);
#line 225
  put_ldev(mdev);
#line 226
  return;
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 233
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 234
  mdev = e->mdev;
#line 235
  uptodate = (int )bio->bi_flags & 1;
#line 236
  is_write = (int )bio->bi_rw & 1;
#line 238
  if (error != 0) {
#line 238
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 238
    if (tmp != 0) {
#line 239
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 242
  if (error == 0 && uptodate == 0) {
#line 243
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 243
    if (tmp___0 != 0) {
#line 244
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 250
    error = -5;
  } else {

  }
#line 253
  if (error != 0) {
#line 254
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 256
  bio_put(bio);
#line 257
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 257
  if (tmp___1 != 0) {
#line 258
    if (is_write != 0) {
#line 259
      drbd_endio_write_sec_final(e);
    } else {
#line 261
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 262
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 270
  req = (struct drbd_request *)bio->bi_private;
#line 271
  mdev = req->mdev;
#line 274
  uptodate = (int )bio->bi_flags & 1;
#line 276
  if (error == 0 && uptodate == 0) {
#line 277
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 282
    error = -5;
  } else {

  }
#line 286
  tmp = __builtin_expect(error != 0, 0L);
#line 286
  if (tmp != 0L) {
#line 287
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 4097UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 293
    what = completed_ok;
  }
#line 295
  bio_put(req->private_bio);
#line 296
  tmp___0 = ERR_PTR((long )error);
#line 296
  req->private_bio = (struct bio *)tmp___0;
#line 299
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 299
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 300
  __req_mod(req, what, & m);
#line 301
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 302
  put_ldev(mdev);
#line 304
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 305
    complete_master_bio(mdev, & m);
  } else {

  }
#line 306
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 310
  __mptr = (struct drbd_work  const  *)w;
#line 310
  req = (struct drbd_request *)__mptr;
#line 316
  spin_lock_irq(& mdev->req_lock);
#line 317
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 318
    _req_mod(req, read_retry_remote_canceled);
#line 319
    spin_unlock_irq(& mdev->req_lock);
#line 320
    return (1);
  } else {

  }
#line 322
  spin_unlock_irq(& mdev->req_lock);
#line 324
  tmp = w_send_read_req(mdev, w, 0);
#line 324
  return (tmp);
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 331
  page = e->pages;
#line 335
  desc.tfm = tfm;
#line 336
  desc.flags = 0U;
#line 338
  sg_init_table(& sg, 1U);
#line 339
  crypto_hash_init(& desc);
#line 341
  goto ldv_49926;
  ldv_49925: 
#line 343
  sg_set_page(& sg, page, 4096U, 0U);
#line 344
  crypto_hash_update(& desc, & sg, sg.length);
#line 345
  page = tmp;
  ldv_49926: 
#line 341
  tmp = page_chain_next(page);
#line 341
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 342
    goto ldv_49925;
  } else {

  }
#line 348
  len = e->size & 4095U;
#line 349
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 350
  crypto_hash_update(& desc, & sg, sg.length);
#line 351
  crypto_hash_final(& desc, (u8 *)digest);
#line 352
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 361
  desc.tfm = tfm;
#line 362
  desc.flags = 0U;
#line 364
  sg_init_table(& sg, 1U);
#line 365
  crypto_hash_init(& desc);
#line 367
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 367
  i = (int )bio->bi_idx;
#line 367
  goto ldv_49939;
  ldv_49938: 
#line 368
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 369
  crypto_hash_update(& desc, & sg, sg.length);
#line 367
  bvec = bvec + 1;
#line 367
  i = i + 1;
  ldv_49939: ;
#line 367
  if ((int )bio->bi_vcnt > i) {
#line 368
    goto ldv_49938;
  } else {

  }
#line 371
  crypto_hash_final(& desc, (u8 *)digest);
#line 372
  return;
}
}
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 377
  __mptr = (struct drbd_work  const  *)w;
#line 377
  e = (struct drbd_epoch_entry *)__mptr;
#line 380
  ok = 1;
#line 382
  if (e->ldv_47580.block_id != 2205466966ULL) {
#line 382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            382);
  } else {

  }
#line 384
  tmp = __builtin_expect(cancel != 0, 0L);
#line 384
  if (tmp != 0L) {
#line 385
    goto out;
  } else {

  }
#line 387
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 387
  if (tmp___0 != 0L) {
#line 388
    goto out;
  } else {

  }
#line 390
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 390
  digest_size = (int )tmp___1;
#line 391
  digest = kmalloc((size_t )digest_size, 16U);
#line 392
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 393
    sector = e->sector;
#line 394
    size = e->size;
#line 395
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 401
    drbd_free_some_ee(mdev, e, 0);
#line 402
    e = 0;
#line 403
    inc_rs_pending(mdev);
#line 404
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 407
    kfree((void const   *)digest);
  } else {
#line 409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 410
    ok = 0;
  }
  out: ;
#line 414
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 415
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 417
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 417
  if (tmp___2 != 0L) {
#line 418
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 419
  return (ok);
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 428
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 428
  if (tmp == 0) {
#line 429
    return (-5);
  } else {

  }
#line 431
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 431
  if (tmp___0 != 0) {
#line 432
    goto defer;
  } else {

  }
#line 436
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 437
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 438
    goto defer;
  } else {

  }
#line 440
  e->w.cb = & w_e_send_csum;
#line 441
  spin_lock_irq(& mdev->req_lock);
#line 442
  list_add(& e->w.list, & mdev->read_ee);
#line 443
  spin_unlock_irq(& mdev->req_lock);
#line 445
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 446
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 446
  if (tmp___1 == 0) {
#line 447
    return (0);
  } else {

  }
#line 453
  spin_lock_irq(& mdev->req_lock);
#line 454
  list_del(& e->w.list);
#line 455
  spin_unlock_irq(& mdev->req_lock);
#line 457
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 459
  put_ldev(mdev);
#line 460
  return (-11);
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 465
  switch ((int )mdev->state.ldv_38802.conn) {
  case 18: 
#line 467
  w_make_ov_request(mdev, w, cancel);
#line 468
  goto ldv_49968;
  case 17: 
#line 470
  w_make_resync_request(mdev, w, cancel);
#line 471
  goto ldv_49968;
  }
  ldv_49968: ;
#line 474
  return (1);
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 479
  mdev = (struct drbd_conf *)data;
#line 481
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 481
  if (tmp != 0) {
#line 482
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 489
  i = 0;
#line 489
  goto ldv_49980;
  ldv_49979: 
#line 490
  *(fb->values + (unsigned long )i) = value;
#line 489
  i = i + 1;
  ldv_49980: ;
#line 489
  if ((unsigned int )i < fb->size) {
#line 490
    goto ldv_49979;
  } else {

  }

#line 494
  return;
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 497
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 498
  tmp = fb->head_index;
#line 498
  fb->head_index = fb->head_index + 1U;
#line 498
  *(fb->values + (unsigned long )tmp) = value;
#line 500
  if (fb->head_index >= fb->size) {
#line 501
    fb->head_index = 0U;
  } else {

  }
#line 503
  return (ov);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 510
  i = 0;
#line 510
  goto ldv_49993;
  ldv_49992: 
#line 511
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 510
  i = i + 1;
  ldv_49993: ;
#line 510
  if ((unsigned int )i < fb->size) {
#line 511
    goto ldv_49992;
  } else {

  }

#line 515
  return;
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 525
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 525
  sect_in = (unsigned int )tmp;
#line 526
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 528
  spin_lock(& mdev->peer_seq_lock);
#line 530
  steps = (int )mdev->rs_plan_s.size;
#line 532
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 533
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 535
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 539
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 542
  cps = correction / steps;
#line 543
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 544
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 547
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 548
  spin_unlock(& mdev->peer_seq_lock);
#line 549
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 551
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 552
  if (req_sect < 0) {
#line 553
    req_sect = 0;
  } else {

  }
#line 555
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 556
  if (req_sect > max_sect) {
#line 557
    req_sect = max_sect;
  } else {

  }
#line 565
  return (req_sect);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 571
  if (mdev->rs_plan_s.size != 0U) {
#line 572
    tmp = drbd_rs_controller(mdev);
#line 572
    number = tmp >> 3;
#line 573
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 575
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 576
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 581
  return (number);
}
}
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 589
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 589
  capacity = tmp;
#line 593
  i = 0;
#line 595
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 595
  if (tmp___0 != 0L) {
#line 596
    return (1);
  } else {

  }
#line 598
  if (mdev->rs_total == 0UL) {
#line 600
    drbd_resync_finished(mdev);
#line 601
    return (1);
  } else {

  }
#line 604
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 604
  if (tmp___1 == 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 610
    return (1);
  } else {

  }
#line 613
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 613
  max_bio_size = (int )(tmp___2 << 9);
#line 614
  number = drbd_rs_number_requests(mdev);
#line 615
  if (number == 0) {
#line 616
    goto requeue;
  } else {

  }
#line 618
  i = 0;
#line 618
  goto ldv_50041;
  ldv_50040: 
#line 620
  ldv_mutex_lock_47(& mdev->data.mutex);
#line 621
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 622
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 623
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 625
    queued = 1;
#line 626
    sndbuf = 0;
  }
#line 628
  ldv_mutex_unlock_48(& mdev->data.mutex);
#line 629
  if (sndbuf / 2 < queued) {
#line 630
    goto requeue;
  } else {

  }
  next_sector: 
#line 633
  size = 4096;
#line 634
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 636
  if (bit == 0xffffffffffffffffUL) {
#line 637
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 638
    put_ldev(mdev);
#line 639
    return (1);
  } else {

  }
#line 642
  sector = bit << 3;
#line 644
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 644
  if (tmp___3 != 0) {
#line 646
    mdev->bm_resync_fo = bit;
#line 647
    goto requeue;
  } else {
#line 644
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 644
    if (tmp___4 != 0) {
#line 646
      mdev->bm_resync_fo = bit;
#line 647
      goto requeue;
    } else {

    }
  }
#line 649
  mdev->bm_resync_fo = bit + 1UL;
#line 651
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 651
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 651
  if (tmp___6 != 0L) {
#line 652
    drbd_rs_complete_io(mdev, sector);
#line 653
    goto next_sector;
  } else {

  }
#line 663
  align = 1;
#line 664
  rollback_i = i;
  ldv_50029: ;
#line 666
  if (size + 4096 > max_bio_size) {
#line 667
    goto ldv_50028;
  } else {

  }
#line 670
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 671
    goto ldv_50028;
  } else {

  }
#line 674
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 675
    goto ldv_50028;
  } else {

  }
#line 681
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 681
  if (tmp___7 != 1) {
#line 682
    goto ldv_50028;
  } else {

  }
#line 683
  bit = bit + 1UL;
#line 684
  size = size + 4096;
#line 685
  if (4096 << align <= size) {
#line 686
    align = align + 1;
  } else {

  }
#line 687
  i = i + 1;
#line 688
  goto ldv_50029;
  ldv_50028: ;
#line 691
  if (size > 4096) {
#line 692
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 696
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 697
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 698
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 699
    tmp___8 = read_for_csum(mdev, sector, size);
#line 699
    switch (tmp___8) {
    case -5: 
#line 701
    put_ldev(mdev);
#line 702
    return (0);
    case -11: 
#line 704
    drbd_rs_complete_io(mdev, sector);
#line 705
    mdev->bm_resync_fo = sector >> 3;
#line 706
    i = rollback_i;
#line 707
    goto requeue;
    case 0: ;
#line 710
    goto ldv_50033;
    default: 
#line 712
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (712), "i" (12UL));
    ldv_50035: ;
#line 712
    goto ldv_50035;
    }
    ldv_50033: ;
  } else {
#line 715
    inc_rs_pending(mdev);
#line 716
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 716
    if (tmp___11 == 0) {
#line 718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 719
      atomic_dec(& mdev->rs_pending_cnt);
#line 719
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 719
      if (tmp___10 < 0) {
#line 719
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 719
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 719, tmp___9);
      } else {

      }
#line 720
      put_ldev(mdev);
#line 721
      return (0);
    } else {

    }
  }
#line 618
  i = i + 1;
  ldv_50041: ;
#line 618
  if (i < number) {
#line 619
    goto ldv_50040;
  } else {

  }
#line 726
  tmp___12 = drbd_bm_bits(mdev);
#line 726
  if (mdev->bm_resync_fo >= tmp___12) {
#line 733
    put_ldev(mdev);
#line 734
    return (1);
  } else {

  }
  requeue: 
#line 738
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 739
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 740
  put_ldev(mdev);
#line 741
  return (1);
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 748
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 748
  capacity = tmp;
#line 750
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 750
  if (tmp___0 != 0L) {
#line 751
    return (1);
  } else {

  }
#line 753
  number = drbd_rs_number_requests(mdev);
#line 755
  sector = mdev->ov_position;
#line 756
  i = 0;
#line 756
  goto ldv_50059;
  ldv_50058: ;
#line 757
  if (sector >= capacity) {
#line 758
    return (1);
  } else {

  }
#line 761
  size = 4096;
#line 763
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 763
  if (tmp___1 != 0) {
#line 765
    mdev->ov_position = sector;
#line 766
    goto requeue;
  } else {
#line 763
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 763
    if (tmp___2 != 0) {
#line 765
      mdev->ov_position = sector;
#line 766
      goto requeue;
    } else {

    }
  }
#line 769
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 770
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 772
  inc_rs_pending(mdev);
#line 773
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 773
  if (tmp___5 == 0) {
#line 774
    atomic_dec(& mdev->rs_pending_cnt);
#line 774
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 774
    if (tmp___4 < 0) {
#line 774
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 774
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 774, tmp___3);
    } else {

    }
#line 775
    return (0);
  } else {

  }
#line 777
  sector = sector + 8UL;
#line 756
  i = i + 1;
  ldv_50059: ;
#line 756
  if (i < number) {
#line 757
    goto ldv_50058;
  } else {

  }
#line 779
  mdev->ov_position = sector;
  requeue: 
#line 782
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 783
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 784
  return (1);
}
}
#line 788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 790
  mdev = (struct drbd_conf *)data;
#line 792
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 793
  return;
}
}
#line 795 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 797
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 797
  if (tmp != 0) {
#line 798
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 799
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 800
    add_timer(& mdev->start_resync_timer);
#line 801
    return (1);
  } else {
#line 797
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 797
    if (tmp___0 != 0) {
#line 798
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 799
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 800
      add_timer(& mdev->start_resync_timer);
#line 801
      return (1);
    } else {

    }
  }
#line 804
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 805
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 806
  return (1);
}
}
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 811
  kfree((void const   *)w);
#line 812
  ov_oos_print(mdev);
#line 813
  drbd_resync_finished(mdev);
#line 815
  return (1);
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 820
  kfree((void const   *)w);
#line 822
  drbd_resync_finished(mdev);
#line 824
  return (1);
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 829
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 830
  request_ping(mdev);
#line 831
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 831
  if (tmp != 0 || (int )mdev->state.ldv_38802.conn <= 9) {
#line 831
    goto ldv_50083;
  } else {

  }
#line 831
  tmp___0 = get_current();
#line 831
  __wait.flags = 0U;
#line 831
  __wait.private = (void *)tmp___0;
#line 831
  __wait.func = & autoremove_wake_function;
#line 831
  __wait.task_list.next = & __wait.task_list;
#line 831
  __wait.task_list.prev = & __wait.task_list;
  ldv_50086: 
#line 831
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 831
  tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 831
  if (tmp___1 != 0 || (int )mdev->state.ldv_38802.conn <= 9) {
#line 831
    goto ldv_50085;
  } else {

  }
#line 831
  schedule();
#line 831
  goto ldv_50086;
  ldv_50085: 
#line 831
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50083: ;
#line 834
  return;
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 841
  khelper_cmd = 0;
#line 842
  verify_done = 0;
#line 847
  tmp___0 = drbd_rs_del_all(mdev);
#line 847
  if (tmp___0 != 0) {
#line 853
    schedule_timeout_interruptible(25L);
#line 854
    tmp = kmalloc(24UL, 32U);
#line 854
    w = (struct drbd_work *)tmp;
#line 855
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 856
      w->cb = & w_resync_finished;
#line 857
      drbd_queue_work(& mdev->data.work, w);
#line 858
      return (1);
    } else {

    }
#line 860
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 863
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 864
  if (dt == 0UL) {
#line 865
    dt = 1UL;
  } else {

  }
#line 866
  db = mdev->rs_total;
#line 867
  dbdt = db / dt << 2;
#line 868
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 870
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 870
  if (tmp___1 == 0) {
#line 871
    goto out;
  } else {

  }
#line 873
  ping_peer(mdev);
#line 875
  spin_lock_irq(& mdev->req_lock);
#line 876
  os = mdev->state;
#line 878
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 882
  if ((int )os.ldv_38802.conn <= 10) {
#line 883
    goto out_unlock;
  } else {

  }
#line 885
  ns = os;
#line 886
  ns.ldv_38802.conn = 10U;
#line 888
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 892
  n_oos = drbd_bm_total_weight(mdev);
#line 894
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 895
    if (n_oos != 0UL) {
#line 896
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 898
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 901
      if (mdev->rs_failed != n_oos) {
#line 901
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                901);
      } else {

      }
#line 903
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 904
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 906
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 907
        s = mdev->rs_same_csum;
#line 908
        t = mdev->rs_total;
#line 909
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 912
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 921
  if (mdev->rs_failed != 0UL) {
#line 922
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 924
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 925
      ns.ldv_38802.disk = 4U;
#line 926
      ns.ldv_38802.pdsk = 8U;
    } else {
#line 928
      ns.ldv_38802.disk = 8U;
#line 929
      ns.ldv_38802.pdsk = 4U;
    }
  } else {
#line 932
    ns.ldv_38802.disk = 8U;
#line 933
    ns.ldv_38802.pdsk = 8U;
#line 935
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 936
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 938
        i = 1;
#line 938
        goto ldv_50106;
        ldv_50105: 
#line 939
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 938
        i = i + 1;
        ldv_50106: ;
#line 938
        if (i <= 3) {
#line 939
          goto ldv_50105;
        } else {

        }
#line 940
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 941
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 943
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 947
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 950
      drbd_uuid_set_bm(mdev, 0ULL);
#line 951
      drbd_print_uuids(mdev, "updated UUIDs");
#line 952
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 956
        i___0 = 0;
#line 956
        goto ldv_50110;
        ldv_50109: 
#line 957
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 956
        i___0 = i___0 + 1;
        ldv_50110: ;
#line 956
        if (i___0 <= 3) {
#line 957
          goto ldv_50109;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 962
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 964
  spin_unlock_irq(& mdev->req_lock);
#line 965
  put_ldev(mdev);
  out: 
#line 967
  mdev->rs_total = 0UL;
#line 968
  mdev->rs_failed = 0UL;
#line 969
  mdev->rs_paused = 0UL;
#line 970
  if (verify_done != 0) {
#line 971
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 973
  drbd_md_sync(mdev);
#line 975
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 976
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 978
  return (1);
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 984
  tmp = drbd_ee_has_active_page(e);
#line 984
  if (tmp != 0) {
#line 986
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 987
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 988
    atomic_sub(i, & mdev->pp_in_use);
#line 989
    spin_lock_irq(& mdev->req_lock);
#line 990
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 991
    spin_unlock_irq(& mdev->req_lock);
#line 992
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 994
    drbd_free_some_ee(mdev, e, 0);
  }
#line 995
  return;
}
}
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1005
  __mptr = (struct drbd_work  const  *)w;
#line 1005
  e = (struct drbd_epoch_entry *)__mptr;
#line 1008
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1008
  if (tmp___1 != 0L) {
#line 1009
    drbd_free_some_ee(mdev, e, 0);
#line 1010
    atomic_dec(& mdev->unacked_cnt);
#line 1010
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
    if (tmp___0 < 0) {
#line 1010
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1010, tmp);
    } else {

    }
#line 1011
    return (1);
  } else {

  }
#line 1014
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1014
  if (tmp___3 != 0L) {
#line 1015
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1017
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1017
    if (tmp___2 != 0) {
#line 1018
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1021
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1024
  atomic_dec(& mdev->unacked_cnt);
#line 1024
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1024
  if (tmp___5 < 0) {
#line 1024
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1024, tmp___4);
  } else {

  }
#line 1026
  move_to_net_ee_or_free(mdev, e);
#line 1028
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1028
  if (tmp___6 != 0L) {
#line 1029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1030
  return (ok);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1041
  __mptr = (struct drbd_work  const  *)w;
#line 1041
  e = (struct drbd_epoch_entry *)__mptr;
#line 1044
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1044
  if (tmp___1 != 0L) {
#line 1045
    drbd_free_some_ee(mdev, e, 0);
#line 1046
    atomic_dec(& mdev->unacked_cnt);
#line 1046
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1046
    if (tmp___0 < 0) {
#line 1046
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1046
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1046, tmp);
    } else {

    }
#line 1047
    return (1);
  } else {

  }
#line 1050
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1050
  if (tmp___2 != 0) {
#line 1051
    drbd_rs_complete_io(mdev, e->sector);
#line 1052
    put_ldev(mdev);
  } else {

  }
#line 1055
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1056
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1057
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1057
    if (tmp___6 != 0L) {
#line 1058
      tmp___4 = __builtin_expect((int )mdev->state.ldv_38802.pdsk > 3, 1L);
#line 1058
      if (tmp___4 != 0L) {
#line 1059
        inc_rs_pending(mdev);
#line 1060
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1062
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1062
        if (tmp___3 != 0) {
#line 1063
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1065
        ok = 1;
      }
    } else {
#line 1068
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1068
      if (tmp___5 != 0) {
#line 1069
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1072
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1075
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1078
  atomic_dec(& mdev->unacked_cnt);
#line 1078
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
  if (tmp___8 < 0) {
#line 1078
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1078, tmp___7);
  } else {

  }
#line 1080
  move_to_net_ee_or_free(mdev, e);
#line 1082
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1082
  if (tmp___9 != 0L) {
#line 1083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1084
  return (ok);
}
}
#line 1087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1089
  __mptr = (struct drbd_work  const  *)w;
#line 1089
  e = (struct drbd_epoch_entry *)__mptr;
#line 1092
  digest = 0;
#line 1093
  eq = 0;
#line 1095
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1095
  if (tmp___1 != 0L) {
#line 1096
    drbd_free_some_ee(mdev, e, 0);
#line 1097
    atomic_dec(& mdev->unacked_cnt);
#line 1097
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1097
    if (tmp___0 < 0) {
#line 1097
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1097
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1097, tmp);
    } else {

    }
#line 1098
    return (1);
  } else {

  }
#line 1101
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1101
  if (tmp___2 != 0) {
#line 1102
    drbd_rs_complete_io(mdev, e->sector);
#line 1103
    put_ldev(mdev);
  } else {

  }
#line 1106
  di = e->ldv_47580.digest;
#line 1108
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1108
  if (tmp___6 != 0L) {
#line 1112
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1113
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1113
      digest_size = (int )tmp___3;
#line 1114
      if (di->digest_size != digest_size) {
#line 1114
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1114);
      } else {

      }
#line 1115
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1117
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1118
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1119
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1119
      eq = tmp___4 == 0;
#line 1120
      kfree((void const   *)digest);
    } else {

    }
#line 1123
    if (eq != 0) {
#line 1124
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1124U);
#line 1126
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1127
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1129
      inc_rs_pending(mdev);
#line 1130
      e->ldv_47580.block_id = 0xffffffffffffffffULL;
#line 1131
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1132
      kfree((void const   *)di);
#line 1133
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1136
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1137
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1137
    if (tmp___5 != 0) {
#line 1138
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1141
  atomic_dec(& mdev->unacked_cnt);
#line 1141
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1141
  if (tmp___8 < 0) {
#line 1141
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1141
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1141, tmp___7);
  } else {

  }
#line 1142
  move_to_net_ee_or_free(mdev, e);
#line 1144
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1144
  if (tmp___9 != 0L) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1146
  return (ok);
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1152
  __mptr = (struct drbd_work  const  *)w;
#line 1152
  e = (struct drbd_epoch_entry *)__mptr;
#line 1153
  sector = e->sector;
#line 1154
  size = e->size;
#line 1157
  ok = 1;
#line 1159
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1159
  if (tmp != 0L) {
#line 1160
    goto out;
  } else {

  }
#line 1162
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1162
  digest_size = (int )tmp___0;
#line 1163
  digest = kmalloc((size_t )digest_size, 16U);
#line 1164
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1165
    ok = 0;
#line 1166
    goto out;
  } else {

  }
#line 1169
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1169
  if (tmp___1 != 0L) {
#line 1170
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1172
    memset(digest, 0, (size_t )digest_size);
  }
#line 1179
  drbd_free_some_ee(mdev, e, 0);
#line 1180
  e = 0;
#line 1181
  inc_rs_pending(mdev);
#line 1182
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1185
  if (ok == 0) {
#line 1186
    atomic_dec(& mdev->rs_pending_cnt);
#line 1186
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1186
    if (tmp___3 < 0) {
#line 1186
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1186
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1186, tmp___2);
    } else {

    }
  } else {

  }
#line 1187
  kfree((void const   *)digest);
  out: ;
#line 1190
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1191
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1192
  atomic_dec(& mdev->unacked_cnt);
#line 1192
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1192
  if (tmp___5 < 0) {
#line 1192
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1192, tmp___4);
  } else {

  }
#line 1193
  return (ok);
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1198
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1199
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1201
    mdev->ov_last_oos_start = sector;
#line 1202
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1204
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1204U);
#line 1205
  return;
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1209
  __mptr = (struct drbd_work  const  *)w;
#line 1209
  e = (struct drbd_epoch_entry *)__mptr;
#line 1212
  sector = e->sector;
#line 1213
  size = e->size;
#line 1215
  eq = 0;
#line 1217
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1217
  if (tmp___1 != 0L) {
#line 1218
    drbd_free_some_ee(mdev, e, 0);
#line 1219
    atomic_dec(& mdev->unacked_cnt);
#line 1219
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1219
    if (tmp___0 < 0) {
#line 1219
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1219
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1219, tmp);
    } else {

    }
#line 1220
    return (1);
  } else {

  }
#line 1225
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1225
  if (tmp___2 != 0) {
#line 1226
    drbd_rs_complete_io(mdev, e->sector);
#line 1227
    put_ldev(mdev);
  } else {

  }
#line 1230
  di = e->ldv_47580.digest;
#line 1232
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1232
  if (tmp___5 != 0L) {
#line 1233
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1233
    digest_size = (int )tmp___3;
#line 1234
    digest = kmalloc((size_t )digest_size, 16U);
#line 1235
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1236
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1238
      if (di->digest_size != digest_size) {
#line 1238
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1238);
      } else {

      }
#line 1239
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1239
      eq = tmp___4 == 0;
#line 1240
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1249
  drbd_free_some_ee(mdev, e, 0);
#line 1250
  if (eq == 0) {
#line 1251
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1253
    ov_oos_print(mdev);
  }
#line 1255
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1258
  atomic_dec(& mdev->unacked_cnt);
#line 1258
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1258
  if (tmp___7 < 0) {
#line 1258
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1258, tmp___6);
  } else {

  }
#line 1260
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1263
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1264
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1266
  if (mdev->ov_left == 0UL) {
#line 1267
    ov_oos_print(mdev);
#line 1268
    drbd_resync_finished(mdev);
  } else {

  }
#line 1271
  return (ok);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1276
  __mptr = (struct drbd_work  const  *)w;
#line 1276
  b = (struct drbd_wq_barrier *)__mptr;
#line 1277
  complete(& b->done);
#line 1278
  return (1);
}
}
#line 1281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1283
  __mptr = (struct drbd_work  const  *)w;
#line 1283
  b = (struct drbd_tl_epoch *)__mptr;
#line 1284
  p = & mdev->data.sbuf.barrier;
#line 1285
  ok = 1;
#line 1292
  spin_lock_irq(& mdev->req_lock);
#line 1293
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_38802.conn <= 9) {
#line 1294
    cancel = 1;
  } else {

  }
#line 1295
  spin_unlock_irq(& mdev->req_lock);
#line 1296
  if (cancel != 0) {
#line 1297
    return (1);
  } else {

  }
#line 1299
  tmp = drbd_get_data_sock(mdev);
#line 1299
  if (tmp == 0) {
#line 1300
    return (0);
  } else {

  }
#line 1301
  p->barrier = b->br_number;
#line 1305
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1307
  drbd_put_data_sock(mdev);
#line 1309
  return (ok);
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1314
  if (cancel != 0) {
#line 1315
    return (1);
  } else {

  }
#line 1316
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1316
  return (tmp);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1321
  __mptr = (struct drbd_work  const  *)w;
#line 1321
  req = (struct drbd_request *)__mptr;
#line 1324
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1324
  if (tmp != 0L) {
#line 1325
    req_mod(req, send_canceled);
#line 1326
    return (1);
  } else {

  }
#line 1329
  ok = drbd_send_oos(mdev, req);
#line 1330
  req_mod(req, oos_handed_to_network);
#line 1332
  return (ok);
}
}
#line 1341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1343
  __mptr = (struct drbd_work  const  *)w;
#line 1343
  req = (struct drbd_request *)__mptr;
#line 1346
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1346
  if (tmp != 0L) {
#line 1347
    req_mod(req, send_canceled);
#line 1348
    return (1);
  } else {

  }
#line 1351
  ok = drbd_send_dblock(mdev, req);
#line 1352
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1354
  return (ok);
}
}
#line 1363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1365
  __mptr = (struct drbd_work  const  *)w;
#line 1365
  req = (struct drbd_request *)__mptr;
#line 1368
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1368
  if (tmp != 0L) {
#line 1369
    req_mod(req, send_canceled);
#line 1370
    return (1);
  } else {

  }
#line 1373
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1376
  if (ok == 0) {
#line 1379
    if ((int )mdev->state.ldv_38802.conn > 9) {
#line 1380
      val.i = 0U;
#line 1380
      val.ldv_38802.conn = 5U;
#line 1380
      mask.i = 0U;
#line 1380
      mask.ldv_38802.conn = 31U;
#line 1380
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1382
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1384
  return (ok);
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1389
  __mptr = (struct drbd_work  const  *)w;
#line 1389
  req = (struct drbd_request *)__mptr;
#line 1391
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 4096UL) != 0UL) {
#line 1392
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1398
  drbd_req_make_private_bio(req, req->master_bio);
#line 1399
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1400
  generic_make_request(req->private_bio);
#line 1402
  return (1);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1407
  odev = mdev;
  ldv_50286: ;
#line 1410
  if (odev->sync_conf.after == -1) {
#line 1411
    return (1);
  } else {

  }
#line 1412
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1413
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1413
  if (_b != 0) {
#line 1413
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1413);
  } else {

  }
#line 1413
  if (_b != 0) {
#line 1413
    return (1);
  } else {

  }
#line 1414
  if (((((int )odev->state.ldv_38802.conn > 15 && (int )odev->state.ldv_38802.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1418
    return (0);
  } else {

  }
#line 1419
  goto ldv_50286;
}
}
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1431
  rv = 0;
#line 1433
  i = 0;
#line 1433
  goto ldv_50297;
  ldv_50296: 
#line 1434
  odev = minor_to_mdev((unsigned int )i);
#line 1435
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1436
    goto ldv_50293;
  } else {

  }
#line 1437
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1438
    goto ldv_50293;
  } else {

  }
#line 1439
  tmp___0 = _drbd_may_sync_now(odev);
#line 1439
  if (tmp___0 == 0) {
#line 1440
    __ns.i = odev->state.i;
#line 1440
    __ns.ldv_38802.aftr_isp = 1U;
#line 1440
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1440
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_50293: 
#line 1433
  i = i + 1;
  ldv_50297: ;
#line 1433
  if ((unsigned int )i < minor_count) {
#line 1434
    goto ldv_50296;
  } else {

  }

#line 1444
  return (rv);
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1456
  rv = 0;
#line 1458
  i = 0;
#line 1458
  goto ldv_50309;
  ldv_50308: 
#line 1459
  odev = minor_to_mdev((unsigned int )i);
#line 1460
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1461
    goto ldv_50305;
  } else {

  }
#line 1462
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1463
    goto ldv_50305;
  } else {

  }
#line 1464
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1465
    tmp___0 = _drbd_may_sync_now(odev);
#line 1465
    if (tmp___0 != 0) {
#line 1466
      __ns.i = odev->state.i;
#line 1466
      __ns.ldv_38802.aftr_isp = 0U;
#line 1466
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1466
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_50305: 
#line 1458
  i = i + 1;
  ldv_50309: ;
#line 1458
  if ((unsigned int )i < minor_count) {
#line 1459
    goto ldv_50308;
  } else {

  }

#line 1471
  return (rv);
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1476
  _raw_write_lock_irq(& global_state_lock);
#line 1477
  _drbd_resume_next(mdev);
#line 1478
  _raw_write_unlock_irq(& global_state_lock);
#line 1479
  return;
}
}
#line 1481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1483
  _raw_write_lock_irq(& global_state_lock);
#line 1484
  _drbd_pause_after(mdev);
#line 1485
  _raw_write_unlock_irq(& global_state_lock);
#line 1486
  return;
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1492
  if (o_minor == -1) {
#line 1493
    return (101);
  } else {

  }
#line 1494
  if (o_minor < -1) {
#line 1495
    return (132);
  } else {
#line 1494
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1494
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1495
      return (132);
    } else {

    }
  }
#line 1498
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_50322: ;
#line 1500
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1501
    return (133);
  } else {

  }
#line 1504
  if (odev->sync_conf.after == -1) {
#line 1505
    return (101);
  } else {

  }
#line 1508
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1509
  goto ldv_50322;
}
}
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1517
  _raw_write_lock_irq(& global_state_lock);
#line 1518
  retcode = sync_after_error(mdev, na);
#line 1519
  if (retcode == 101) {
#line 1520
    mdev->sync_conf.after = na;
    ldv_50329: 
#line 1522
    changes = _drbd_pause_after(mdev);
#line 1523
    tmp = _drbd_resume_next(mdev);
#line 1523
    changes = tmp | changes;
#line 1524
    if (changes != 0) {
#line 1525
      goto ldv_50329;
    } else {

    }

  } else {

  }
#line 1526
  _raw_write_unlock_irq(& global_state_lock);
#line 1527
  return (retcode);
}
}
#line 1530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1532
  atomic_set(& mdev->rs_sect_in, 0);
#line 1533
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1534
  mdev->rs_in_flight = 0;
#line 1535
  mdev->rs_planed = 0;
#line 1536
  spin_lock(& mdev->peer_seq_lock);
#line 1537
  fifo_set(& mdev->rs_plan_s, 0);
#line 1538
  spin_unlock(& mdev->peer_seq_lock);
#line 1539
  return;
}
}
#line 1549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1554
  if ((int )mdev->state.ldv_38802.conn > 15 && (int )mdev->state.ldv_38802.conn <= 21) {
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1556
    return;
  } else {

  }
#line 1559
  if ((unsigned int )side == 17U) {
#line 1563
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1564
    r = (r >> 8) & 255;
#line 1565
    if (r > 0) {
#line 1566
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1568
      val.i = 0U;
#line 1568
      val.ldv_38802.conn = 1U;
#line 1568
      mask.i = 0U;
#line 1568
      mask.ldv_38802.conn = 31U;
#line 1568
      drbd_force_state(mdev, mask, val);
#line 1569
      return;
    } else {

    }
  } else {
#line 1572
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1573
    r = (r >> 8) & 255;
#line 1574
    if (r > 0) {
#line 1575
      if (r == 3) {
#line 1576
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1579
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1581
        val___0.i = 0U;
#line 1581
        val___0.ldv_38802.conn = 1U;
#line 1581
        mask___0.i = 0U;
#line 1581
        mask___0.ldv_38802.conn = 31U;
#line 1581
        drbd_force_state(mdev, mask___0, val___0);
#line 1582
        return;
      }
    } else {

    }
  }
#line 1587
  drbd_state_lock(mdev);
#line 1588
  _raw_write_lock_irq(& global_state_lock);
#line 1589
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1589
  if (tmp == 0) {
#line 1590
    _raw_write_unlock_irq(& global_state_lock);
#line 1591
    drbd_state_unlock(mdev);
#line 1592
    return;
  } else {

  }
#line 1595
  ns.i = mdev->state.i;
#line 1597
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1597
  ns.ldv_38802.aftr_isp = tmp___0 == 0;
#line 1599
  ns.ldv_38802.conn = (unsigned char )side;
#line 1601
  if ((unsigned int )side == 17U) {
#line 1602
    ns.ldv_38802.disk = 4U;
  } else {
#line 1604
    ns.ldv_38802.pdsk = 4U;
  }
#line 1606
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1606
  r = (int )tmp___1;
#line 1607
  ns = mdev->state;
#line 1609
  if ((int )ns.ldv_38802.conn <= 9) {
#line 1610
    r = 0;
  } else {

  }
#line 1612
  if (r == 1) {
#line 1613
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1613
    tw = tmp___2;
#line 1614
    now = jiffies;
#line 1617
    mdev->rs_failed = 0UL;
#line 1618
    mdev->rs_paused = 0UL;
#line 1619
    mdev->rs_same_csum = 0UL;
#line 1620
    mdev->rs_last_events = 0;
#line 1621
    mdev->rs_last_sect_ev = 0;
#line 1622
    mdev->rs_total = tw;
#line 1623
    mdev->rs_start = now;
#line 1624
    i = 0;
#line 1624
    goto ldv_50352;
    ldv_50351: 
#line 1625
    mdev->rs_mark_left[i] = tw;
#line 1626
    mdev->rs_mark_time[i] = now;
#line 1624
    i = i + 1;
    ldv_50352: ;
#line 1624
    if (i <= 7) {
#line 1625
      goto ldv_50351;
    } else {

    }
#line 1628
    _drbd_pause_after(mdev);
  } else {

  }
#line 1630
  _raw_write_unlock_irq(& global_state_lock);
#line 1632
  if (r == 1) {
#line 1633
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_38802.conn);
#line 1633
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1637
    if ((unsigned int )side == 17U) {
#line 1638
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1647
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1648
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1650
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1661
      if ((unsigned int )side == 16U) {
#line 1662
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1665
      drbd_resync_finished(mdev);
    } else {

    }
#line 1668
    drbd_rs_controller_reset(mdev);
#line 1673
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1674
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1676
    drbd_md_sync(mdev);
  } else {

  }
#line 1678
  put_ldev(mdev);
#line 1679
  drbd_state_unlock(mdev);
#line 1680
  return;
}
}
#line 1682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1684
  mdev = thi->mdev;
#line 1685
  w = 0;
#line 1686
  work_list.next = & work_list;
#line 1686
  work_list.prev = & work_list;
#line 1687
  intr = 0;
#line 1689
  tmp = mdev_to_minor(mdev);
#line 1689
  tmp___0 = get_current();
#line 1689
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1691
  goto ldv_50365;
  ldv_50375: 
#line 1692
  drbd_thread_current_set_cpu(mdev);
#line 1694
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1694
  if (tmp___1 != 0) {
#line 1695
    ldv_mutex_lock_49(& mdev->data.mutex);
#line 1696
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1697
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1698
    ldv_mutex_unlock_50(& mdev->data.mutex);
#line 1700
    intr = down_interruptible(& mdev->data.work.s);
#line 1702
    ldv_mutex_lock_51(& mdev->data.mutex);
#line 1703
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1704
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1705
    ldv_mutex_unlock_52(& mdev->data.mutex);
  } else {

  }
#line 1708
  if (intr != 0) {
#line 1709
    if (intr != -4) {
#line 1709
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1709);
    } else {

    }
#line 1710
    tmp___2 = get_current();
#line 1710
    flush_signals(tmp___2);
#line 1711
    tmp___3 = get_t_state(thi);
#line 1711
    _b = (unsigned int )tmp___3 == 1U;
#line 1711
    if (_b != 0) {
#line 1711
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1711);
    } else {

    }
#line 1711
    if (_b != 0) {
#line 1712
      goto ldv_50365;
    } else {

    }
#line 1713
    goto ldv_50366;
  } else {

  }
#line 1716
  tmp___4 = get_t_state(thi);
#line 1716
  if ((unsigned int )tmp___4 != 1U) {
#line 1717
    goto ldv_50366;
  } else {

  }
#line 1722
  w = 0;
#line 1723
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1724
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1724
  _b___0 = tmp___5 != 0;
#line 1724
  if (_b___0 != 0) {
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1724);
  } else {

  }
#line 1724
  if (_b___0 != 0) {
#line 1736
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1737
    goto ldv_50365;
  } else {

  }
#line 1739
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1739
  w = (struct drbd_work *)__mptr;
#line 1740
  list_del_init(& w->list);
#line 1741
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1743
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_38802.conn <= 9);
#line 1743
  if (tmp___6 == 0) {
#line 1745
    if ((int )mdev->state.ldv_38802.conn > 9) {
#line 1747
      val.i = 0U;
#line 1747
      val.ldv_38802.conn = 5U;
#line 1747
      mask.i = 0U;
#line 1747
      mask.ldv_38802.conn = 31U;
#line 1747
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_50365: 
#line 1691
  tmp___7 = get_t_state(thi);
#line 1691
  if ((unsigned int )tmp___7 == 1U) {
#line 1692
    goto ldv_50375;
  } else {

  }
  ldv_50366: 
#line 1750
  tmp___8 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1750
  if (tmp___8 == 0) {
#line 1750
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1750);
  } else {

  }
#line 1751
  tmp___9 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 1751
  if (tmp___9 == 0) {
#line 1751
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1751);
  } else {

  }
#line 1753
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1754
  i = 0;
#line 1755
  goto ldv_50382;
  ldv_50381: 
#line 1756
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1757
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1759
  goto ldv_50379;
  ldv_50378: 
#line 1760
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1760
  w = (struct drbd_work *)__mptr___0;
#line 1761
  list_del_init(& w->list);
#line 1762
  (*(w->cb))(mdev, w, 1);
#line 1763
  i = i + 1;
  ldv_50379: 
#line 1759
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1759
  if (tmp___10 == 0) {
#line 1760
    goto ldv_50378;
  } else {

  }
#line 1766
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_50382: 
#line 1755
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1755
  if (tmp___11 == 0) {
#line 1756
    goto ldv_50381;
  } else {

  }
#line 1768
  sema_init(& mdev->data.work.s, 0);
#line 1774
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1776
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1776);
  } else {

  }
#line 1779
  drbd_thread_stop(& mdev->receiver);
#line 1780
  drbd_mdev_cleanup(mdev);
#line 1782
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1784
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1785
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1786
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1788
  return (0);
}
}
#line 1791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1796
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1798
  mutex_lock(ldv_func_arg1);
#line 1799
  return;
}
}
#line 1801 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1806
  tmp = mutex_trylock(ldv_func_arg1);
#line 1806
  ldv_func_res = tmp;
#line 1808
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1808
  return (tmp___0);
#line 1810
  return (ldv_func_res);
}
}
#line 1813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1818
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1820
  mutex_unlock(ldv_func_arg1);
#line 1821
  return;
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1828
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1830
  mutex_lock(ldv_func_arg1);
#line 1831
  return;
}
}
#line 1833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1838
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1840
  mutex_unlock(ldv_func_arg1);
#line 1841
  return;
}
}
#line 1843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1848
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1850
  mutex_lock(ldv_func_arg1);
#line 1851
  return;
}
}
#line 1853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1858
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1860
  mutex_unlock(ldv_func_arg1);
#line 1861
  return;
}
}
#line 1863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1868
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1870
  mutex_unlock(ldv_func_arg1);
#line 1871
  return;
}
}
#line 1873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1878
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1880
  mutex_lock(ldv_func_arg1);
#line 1881
  return;
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1888
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1890
  mutex_unlock(ldv_func_arg1);
#line 1891
  return;
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1898
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1900
  mutex_lock(ldv_func_arg1);
#line 1901
  return;
}
}
#line 1903 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1908
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1910
  mutex_unlock(ldv_func_arg1);
#line 1911
  return;
}
}
#line 1913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1918
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1920
  mutex_lock(ldv_func_arg1);
#line 1921
  return;
}
}
#line 1923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1928
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1930
  mutex_unlock(ldv_func_arg1);
#line 1931
  return;
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 170 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 642 "include/linux/list.h"
__inline static void hlist_add_fake(struct hlist_node *n ) 
{ 


  {
#line 644
  n->pprev = & n->next;
#line 645
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) ;
#line 56
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6277;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6277;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6277;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6277;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6277: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 280 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 346 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 361
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 453 "include/linux/module.h"
extern void __module_get(struct module * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 67
extern u32 random32(void) ;
#line 239 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 241
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 243
extern void sock_release(struct socket * ) ;
#line 246
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 452 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19803: ;
#line 65
    goto ldv_19803;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19804: ;
#line 67
    goto ldv_19804;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19805: ;
#line 68
    goto ldv_19805;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page___0(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 303 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 360
extern long schedule_timeout(long  ) ;
#line 363
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2550 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2552
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2552
  return (tmp);
}
}
#line 2576 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2578
  tmp = test_tsk_thread_flag(p, 2);
#line 2578
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2578
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 520 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 522
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 434 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 436
  disk->part0.nr_sects = size;
#line 437
  return;
}
}
#line 49 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 51
  __might_sleep("include/linux/highmem.h", 51, 0);
#line 52
  tmp = lowmem_page_address((struct page  const  *)page);
#line 52
  return (tmp);
}
}
#line 55 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 57
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , unsigned int  ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1202
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1208
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1217
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1227
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1229
void tl_clear(struct drbd_conf *mdev ) ;
#line 1231
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1234
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1235
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1238
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1240
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1249
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1251
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1252
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1256
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1258
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1274
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1276
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1285
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1302
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1305
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1306
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1503
mempool_t *drbd_ee_mempool ;
#line 1518
struct page *drbd_pp_pool ;
#line 1519
spinlock_t drbd_pp_lock ;
#line 1520
int drbd_pp_vacant ;
#line 1555
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1557
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1558
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1559
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1560
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1564
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1625
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1635
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1637
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1641
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1642
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1674
  val = 1;
#line 1675
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1677
  return;
}
}
#line 1679 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1681
  val = 2;
#line 1682
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1684
  return;
}
}
#line 1686
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1698
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1700
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1724
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1797 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1799
  page = e->pages;
#line 1800
  goto ldv_49827;
  ldv_49826: 
#line 1801
  tmp = page_count(page);
#line 1801
  if (tmp > 1) {
#line 1802
    return (1);
  } else {

  }
#line 1800
  page = page_chain_next(page);
  ldv_49827: ;
#line 1800
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1800
    tmp___0 = page_chain_next(page);
#line 1800
    __builtin_prefetch((void const   *)tmp___0);
#line 1800
    if (1 != 0) {
#line 1801
      goto ldv_49826;
    } else {
#line 1803
      goto ldv_49828;
    }
  } else {

  }
  ldv_49828: ;
#line 1804
  return (0);
}
}
#line 1842 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1846
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1846
  return ((int )tmp);
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1914
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1917
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1920
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1958
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1962
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1962
  if (tmp___1 != 0UL) {
#line 1962
    __min1 = 2251799813685248UL;
#line 1962
    tmp___0 = drbd_md_first_sector(bdev);
#line 1962
    __min2 = tmp___0;
#line 1962
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1962
    s = 0UL;
  }
#line 1965
  goto ldv_49905;
  case -2: 
#line 1967
  __min1___0 = 2251799813685248UL;
#line 1967
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1967
  __min2___0 = tmp___2;
#line 1967
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1970
  __min1___1 = s;
#line 1970
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1970
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1973
  goto ldv_49905;
  default: 
#line 1975
  __min1___2 = 8587575296UL;
#line 1975
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1975
  __min2___2 = tmp___3;
#line 1975
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49905: ;
#line 1978
  return (s);
}
}
#line 2012 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2015
  tmp = spinlock_check(& q->q_lock);
#line 2015
  flags = _raw_spin_lock_irqsave(tmp);
#line 2016
  list_add(& w->list, & q->q);
#line 2017
  up(& q->s);
#line 2019
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2020
  return;
}
}
#line 2052 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2055
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2055
  return (tmp);
}
}
#line 2058 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2061
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2061
  return (tmp);
}
}
#line 2143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2145
  atomic_inc(& mdev->unacked_cnt);
#line 2146
  return;
}
}
#line 2159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2161
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2161
  if (tmp != 0) {
#line 2162
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2163
  return;
}
}
#line 2171 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2175
  atomic_inc(& mdev->net_cnt);
#line 2176
  have_net_conf = (int )mdev->state.ldv_38802.conn > 1;
#line 2177
  if (have_net_conf == 0) {
#line 2178
    put_net_conf(mdev);
  } else {

  }
#line 2179
  return (have_net_conf);
}
}
#line 2437 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2439
  changed = mdev->ed_uuid != val;
#line 2440
  mdev->ed_uuid = val;
#line 2441
  return (changed);
}
}
#line 2444 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2451
  return ((int )a - (int )b);
}
}
#line 2460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2463
  spin_lock(& mdev->peer_seq_lock);
#line 2464
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2464
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2465
  mdev->peer_seq = m;
#line 2466
  spin_unlock(& mdev->peer_seq_lock);
#line 2467
  if (m == new_seq) {
#line 2468
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2469
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_50181: ;
#line 234
    goto ldv_50181;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_50186: ;
#line 243
    goto ldv_50186;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 260
  tmp = ar_hash_slot(mdev, sector);
#line 260
  slot = tmp;
#line 264
  n = slot->first;
#line 264
  goto ldv_50203;
  ldv_50202: ;
#line 265
  if ((unsigned long )req == (unsigned long )id) {
#line 266
    if (req->sector != sector) {
#line 266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              266);
    } else {

    }
#line 267
    return (req);
  } else {

  }
#line 264
  n = n->next;
  ldv_50203: ;
#line 264
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 264
    __mptr = (struct hlist_node  const  *)n;
#line 264
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 264
    if (1 != 0) {
#line 265
      goto ldv_50202;
    } else {
#line 267
      goto ldv_50204;
    }
  } else {

  }
  ldv_50204: ;
#line 270
  return (0);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 313
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_50271: ;
#line 162
  goto ldv_50271;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 114
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 116
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 117
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 136
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 136
  if (tmp___0 != 0L) {
#line 136
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (136), "i" (12UL));
    ldv_50351: ;
#line 136
    goto ldv_50351;
  } else {

  }
#line 137
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 137
  if (tmp___1 != 0L) {
#line 137
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (137), "i" (12UL));
    ldv_50352: ;
#line 137
    goto ldv_50352;
  } else {

  }
#line 139
  page = *head;
#line 141
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 142
    return (0);
  } else {

  }
#line 144
  goto ldv_50355;
  ldv_50354: 
#line 145
  tmp = page_chain_next(page);
#line 146
  n = n - 1;
#line 146
  if (n == 0) {
#line 147
    goto ldv_50353;
  } else {

  }
#line 148
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 151
  page = tmp;
  ldv_50355: ;
#line 144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    goto ldv_50354;
  } else {

  }
  ldv_50353: 
#line 155
  page->ldv_13509.private = 0UL;
#line 157
  page = *head;
#line 158
  *head = tmp;
#line 159
  return (page);
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 168
  i = 1;
#line 169
  goto ldv_50363;
  ldv_50362: 
#line 170
  i = i + 1;
#line 170
  page = tmp;
  ldv_50363: 
#line 169
  tmp = page_chain_next(page);
#line 169
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 170
    goto ldv_50362;
  } else {

  }

#line 171
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 172
    *len = i;
  } else {

  }
#line 173
  return (page);
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 179
  i = 0;
#line 180
  goto ldv_50372;
  ldv_50371: 
#line 181
  put_page(page);
#line 182
  i = i + 1;
#line 180
  page = tmp;
  ldv_50372: ;
#line 180
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 180
    tmp = page_chain_next(page);
#line 180
    if (1 != 0) {
#line 181
      goto ldv_50371;
    } else {
#line 183
      goto ldv_50373;
    }
  } else {

  }
  ldv_50373: ;
#line 184
  return (i);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 192
  tmp = page_chain_tail(chain_first, 0);
#line 193
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 193
  if (tmp___0 != 0L) {
#line 193
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (193), "i" (12UL));
    ldv_50380: ;
#line 193
    goto ldv_50380;
  } else {

  }
#line 197
  chain_last->ldv_13509.private = (unsigned long )*head;
#line 198
  *head = chain_first;
#line 199
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 203
  page = 0;
#line 204
  tmp = 0;
#line 205
  i = 0;
#line 209
  if (drbd_pp_vacant >= number) {
#line 210
    spin_lock(& drbd_pp_lock);
#line 211
    page = page_chain_del(& drbd_pp_pool, number);
#line 212
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 213
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 214
    spin_unlock(& drbd_pp_lock);
#line 215
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 216
      return (page);
    } else {

    }
  } else {

  }
#line 222
  i = 0;
#line 222
  goto ldv_50390;
  ldv_50389: 
#line 223
  tmp = alloc_pages(514U, 0U);
#line 224
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 225
    goto ldv_50388;
  } else {

  }
#line 226
  tmp->ldv_13509.private = (unsigned long )page;
#line 227
  page = tmp;
#line 222
  i = i + 1;
  ldv_50390: ;
#line 222
  if (i < number) {
#line 223
    goto ldv_50389;
  } else {

  }
  ldv_50388: ;
#line 230
  if (i == number) {
#line 231
    return (page);
  } else {

  }
#line 236
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 237
    tmp = page_chain_tail(page, 0);
#line 238
    spin_lock(& drbd_pp_lock);
#line 239
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 240
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 241
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 243
  return (0);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 256
  le = mdev->net_ee.next;
#line 256
  tle = le->next;
#line 256
  goto ldv_50402;
  ldv_50401: 
#line 257
  __mptr = (struct list_head  const  *)le;
#line 257
  e = (struct drbd_epoch_entry *)__mptr;
#line 258
  tmp = drbd_ee_has_active_page___0(e);
#line 258
  if (tmp != 0) {
#line 259
    goto ldv_50400;
  } else {

  }
#line 260
  list_move(le, to_be_freed);
#line 256
  le = tle;
#line 256
  tle = le->next;
  ldv_50402: ;
#line 256
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 257
    goto ldv_50401;
  } else {

  }
  ldv_50400: ;
#line 261
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 266
  reclaimed.next = & reclaimed;
#line 266
  reclaimed.prev = & reclaimed;
#line 269
  spin_lock_irq(& mdev->req_lock);
#line 270
  reclaim_net_ee(mdev, & reclaimed);
#line 271
  spin_unlock_irq(& mdev->req_lock);
#line 273
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 273
  e = (struct drbd_epoch_entry *)__mptr;
#line 273
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 273
  goto ldv_50416;
  ldv_50415: 
#line 274
  drbd_free_some_ee(mdev, e, 1);
#line 273
  e = t;
#line 273
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50416: ;
#line 273
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 274
    goto ldv_50415;
  } else {

  }

#line 278
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 291
  page = 0;
#line 292
  tmp = get_current();
#line 292
  wait.flags = 0U;
#line 292
  wait.private = (void *)tmp;
#line 292
  wait.func = & autoremove_wake_function;
#line 292
  wait.task_list.next = & wait.task_list;
#line 292
  wait.task_list.prev = & wait.task_list;
#line 296
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 296
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 297
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 299
  goto ldv_50427;
  ldv_50426: 
#line 300
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 302
  drbd_kick_lo_and_reclaim_net(mdev);
#line 304
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 306
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 307
      goto ldv_50425;
    } else {

    }
  } else {

  }
#line 310
  if (! retry) {
#line 311
    goto ldv_50425;
  } else {

  }
#line 313
  tmp___2 = get_current();
#line 313
  tmp___3 = signal_pending(tmp___2);
#line 313
  if (tmp___3 != 0) {
#line 314
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 315
    goto ldv_50425;
  } else {

  }
#line 318
  schedule();
  ldv_50427: ;
#line 299
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 300
    goto ldv_50426;
  } else {

  }
  ldv_50425: 
#line 320
  finish_wait(& drbd_pp_wait, & wait);
#line 322
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 323
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 324
  return (page);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 333
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 336
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 337
    return;
  } else {

  }
#line 339
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 340
    i = page_chain_free(page);
  } else {
#line 343
    tmp = page_chain_tail(page, & i);
#line 344
    spin_lock(& drbd_pp_lock);
#line 345
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 346
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 347
    spin_unlock(& drbd_pp_lock);
  }
#line 349
  i = atomic_sub_return(i, a);
#line 350
  if (i < 0) {
#line 351
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 353
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 354
  return;
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 378
  page = 0;
#line 379
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 381
  tmp = drbd_insert_fault(mdev, 8U);
#line 381
  if (tmp != 0) {
#line 382
    return (0);
  } else {

  }
#line 384
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 384
  e = (struct drbd_epoch_entry *)tmp___0;
#line 385
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 386
    if ((gfp_mask & 512U) == 0U) {
#line 387
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 388
    return (0);
  } else {

  }
#line 391
  if (data_size != 0U) {
#line 392
    page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 393
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 394
      goto fail;
    } else {

    }
  } else {

  }
#line 397
  INIT_HLIST_NODE(& e->collision);
#line 398
  e->epoch = 0;
#line 399
  e->mdev = mdev;
#line 400
  e->pages = page;
#line 401
  atomic_set(& e->pending_bios, 0);
#line 402
  e->size = data_size;
#line 403
  e->flags = 0UL;
#line 404
  e->sector = sector;
#line 405
  e->ldv_47580.block_id = id;
#line 407
  return (e);
  fail: 
#line 410
  mempool_free((void *)e, drbd_ee_mempool);
#line 411
  return (0);
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 416
  if ((e->flags & 16UL) != 0UL) {
#line 417
    kfree((void const   *)e->ldv_47580.digest);
  } else {

  }
#line 418
  drbd_pp_free(mdev, e->pages, is_net);
#line 419
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 419
  if (tmp != 0) {
#line 419
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            419);
  } else {

  }
#line 420
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 420
  if (tmp___0 == 0) {
#line 420
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            420);
  } else {

  }
#line 421
  mempool_free((void *)e, drbd_ee_mempool);
#line 422
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 426
  work_list.next = & work_list;
#line 426
  work_list.prev = & work_list;
#line 428
  count = 0;
#line 429
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 431
  spin_lock_irq(& mdev->req_lock);
#line 432
  list_splice_init(list, & work_list);
#line 433
  spin_unlock_irq(& mdev->req_lock);
#line 435
  __mptr = (struct list_head  const  *)work_list.next;
#line 435
  e = (struct drbd_epoch_entry *)__mptr;
#line 435
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 435
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 435
  goto ldv_50468;
  ldv_50467: 
#line 436
  drbd_free_some_ee(mdev, e, is_net);
#line 437
  count = count + 1;
#line 435
  e = t;
#line 435
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 435
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50468: ;
#line 435
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 436
    goto ldv_50467;
  } else {

  }

#line 439
  return (count);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 454
  work_list.next = & work_list;
#line 454
  work_list.prev = & work_list;
#line 455
  reclaimed.next = & reclaimed;
#line 455
  reclaimed.prev = & reclaimed;
#line 457
  ok = (int )mdev->state.ldv_38802.conn > 8;
#line 459
  spin_lock_irq(& mdev->req_lock);
#line 460
  reclaim_net_ee(mdev, & reclaimed);
#line 461
  list_splice_init(& mdev->done_ee, & work_list);
#line 462
  spin_unlock_irq(& mdev->req_lock);
#line 464
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 464
  e = (struct drbd_epoch_entry *)__mptr;
#line 464
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 464
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 464
  goto ldv_50485;
  ldv_50484: 
#line 465
  drbd_free_some_ee(mdev, e, 1);
#line 464
  e = t;
#line 464
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 464
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50485: ;
#line 464
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 465
    goto ldv_50484;
  } else {

  }
#line 471
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 471
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 471
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 471
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 471
  goto ldv_50494;
  ldv_50493: 
#line 473
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 473
  ok = tmp != 0 && ok != 0;
#line 474
  drbd_free_some_ee(mdev, e, 0);
#line 471
  e = t;
#line 471
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 471
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_50494: ;
#line 471
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 472
    goto ldv_50493;
  } else {

  }
#line 476
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 478
  return (ok);
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 483
  tmp = get_current();
#line 483
  wait.flags = 0U;
#line 483
  wait.private = (void *)tmp;
#line 483
  wait.func = & autoremove_wake_function;
#line 483
  wait.task_list.next = & wait.task_list;
#line 483
  wait.task_list.prev = & wait.task_list;
#line 487
  goto ldv_50502;
  ldv_50501: 
#line 488
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 489
  spin_unlock_irq(& mdev->req_lock);
#line 490
  io_schedule();
#line 491
  finish_wait(& mdev->ee_wait, & wait);
#line 492
  spin_lock_irq(& mdev->req_lock);
  ldv_50502: 
#line 487
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 487
  if (tmp___0 == 0) {
#line 488
    goto ldv_50501;
  } else {

  }

#line 492
  return;
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 498
  spin_lock_irq(& mdev->req_lock);
#line 499
  _drbd_wait_ee_list_empty(mdev, head);
#line 500
  spin_unlock_irq(& mdev->req_lock);
#line 501
  return;
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 508
  sk = sock->sk;
#line 509
  err = 0;
#line 511
  *what = "listen";
#line 512
  err = (*((sock->ops)->listen))(sock, 5);
#line 513
  if (err < 0) {
#line 514
    goto out;
  } else {

  }
#line 516
  *what = "sock_create_lite";
#line 517
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 519
  if (err < 0) {
#line 520
    goto out;
  } else {

  }
#line 522
  *what = "accept";
#line 523
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 524
  if (err < 0) {
#line 525
    sock_release(*newsock);
#line 526
    *newsock = 0;
#line 527
    goto out;
  } else {

  }
#line 529
  (*newsock)->ops = sock->ops;
#line 530
  __module_get(((*newsock)->ops)->owner);
  out: ;
#line 533
  return (err);
}
}
#line 536 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 540
  iov.iov_base = buf;
#line 540
  iov.iov_len = size;
#line 544
  msg.msg_name = 0;
#line 544
  msg.msg_namelen = 0;
#line 544
  msg.msg_iov = (struct iovec *)(& iov);
#line 544
  msg.msg_iovlen = 1UL;
#line 544
  msg.msg_control = 0;
#line 544
  msg.msg_controllen = 0UL;
#line 544
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 551
  tmp = current_thread_info___0();
#line 551
  oldfs = tmp->addr_limit;
#line 552
  tmp___0 = current_thread_info___0();
#line 552
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 552
  tmp___0->addr_limit = __constr_expr_0;
#line 553
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 554
  tmp___1 = current_thread_info___0();
#line 554
  tmp___1->addr_limit = oldfs;
#line 556
  return (rv);
}
}
#line 559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 562
  iov.iov_base = buf;
#line 562
  iov.iov_len = size;
#line 566
  msg.msg_name = 0;
#line 566
  msg.msg_namelen = 0;
#line 566
  msg.msg_iov = (struct iovec *)(& iov);
#line 566
  msg.msg_iovlen = 1UL;
#line 566
  msg.msg_control = 0;
#line 566
  msg.msg_controllen = 0UL;
#line 566
  msg.msg_flags = 16640U;
#line 573
  tmp = current_thread_info___0();
#line 573
  oldfs = tmp->addr_limit;
#line 574
  tmp___0 = current_thread_info___0();
#line 574
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 574
  tmp___0->addr_limit = __constr_expr_0;
  ldv_50540: 
#line 577
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 578
  if ((size_t )rv == size) {
#line 579
    goto ldv_50539;
  } else {

  }
#line 586
  if (rv < 0) {
#line 587
    if (rv == -104) {
#line 588
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 589
    if (rv != -512) {
#line 590
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 591
    goto ldv_50539;
  } else
#line 592
  if (rv == 0) {
#line 593
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 594
    goto ldv_50539;
  } else {
#line 600
    goto ldv_50539;
  }
#line 602
  goto ldv_50540;
  ldv_50539: 
#line 604
  tmp___1 = current_thread_info___0();
#line 604
  tmp___1->addr_limit = oldfs;
#line 606
  if ((size_t )rv != size) {
#line 607
    val.i = 0U;
#line 607
    val.ldv_38802.conn = 4U;
#line 607
    mask.i = 0U;
#line 607
    mask.ldv_38802.conn = 31U;
#line 607
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 609
  return (rv);
}
}
#line 617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 621
  if (snd != 0U) {
#line 622
    (sock->sk)->sk_sndbuf = (int )snd;
#line 623
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 625
  if (rcv != 0U) {
#line 626
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 627
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 629
  return;
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 637
  disconnect_on_error = 1;
#line 639
  tmp = get_net_conf(mdev);
#line 639
  if (tmp == 0) {
#line 640
    return (0);
  } else {

  }
#line 642
  what = "sock_create_kern";
#line 643
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 645
  if (err < 0) {
#line 646
    sock = 0;
#line 647
    goto out;
  } else {

  }
#line 650
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 650
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 650
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 652
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 662
  __min1 = (mdev->net_conf)->my_addr_len;
#line 662
  __min2 = 28;
#line 662
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 662
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 664
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 665
    src_in6.sin6_port = 0U;
  } else {
#line 667
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 669
  what = "bind before connect";
#line 670
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 673
  if (err < 0) {
#line 674
    goto out;
  } else {

  }
#line 678
  disconnect_on_error = 0;
#line 679
  what = "connect";
#line 680
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 685
  if (err < 0) {
#line 686
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 687
      sock_release(sock);
#line 688
      sock = 0;
    } else {

    }
#line 690
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 697
    disconnect_on_error = 0;
#line 698
    goto ldv_50577;
    default: 
#line 700
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_50577: ;
#line 702
    if (disconnect_on_error != 0) {
#line 703
      val.i = 0U;
#line 703
      val.ldv_38802.conn = 1U;
#line 703
      mask.i = 0U;
#line 703
      mask.ldv_38802.conn = 31U;
#line 703
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 705
  put_net_conf(mdev);
#line 706
  return (sock);
}
}
#line 709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 712
  s_estab = 0;
#line 715
  tmp = get_net_conf(mdev);
#line 715
  if (tmp == 0) {
#line 716
    return (0);
  } else {

  }
#line 718
  what = "sock_create_kern";
#line 719
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 721
  if (err != 0) {
#line 722
    s_listen = 0;
#line 723
    goto out;
  } else {

  }
#line 726
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 727
  tmp___0 = random32();
#line 727
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 729
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 730
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 731
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 732
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 735
  what = "bind before listen";
#line 736
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 739
  if (err < 0) {
#line 740
    goto out;
  } else {

  }
#line 742
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 745
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 746
    sock_release(s_listen);
  } else {

  }
#line 747
  if (err < 0) {
#line 748
    if ((err != -11 && err != -4) && err != -512) {
#line 749
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 750
      val.i = 0U;
#line 750
      val.ldv_38802.conn = 1U;
#line 750
      mask.i = 0U;
#line 750
      mask.ldv_38802.conn = 31U;
#line 750
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 753
  put_net_conf(mdev);
#line 755
  return (s_estab);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 761
  h = & mdev->data.sbuf.header.h80;
#line 763
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 763
  return (tmp);
}
}
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 768
  h = & mdev->data.rbuf.header.h80;
#line 771
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 773
  if (rr == 8 && h->magic == 1728214147U) {
#line 774
    tmp = __fswab16((int )h->command);
#line 774
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 776
  return (65535);
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 789
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 790
    return (0);
  } else {

  }
#line 792
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 794
  if (rr > 0 || rr == -11) {
#line 795
    return (1);
  } else {
#line 797
    sock_release(*sock);
#line 798
    *sock = 0;
#line 799
    return (0);
  }
}
}
#line 811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state __ns ;

  {
#line 817
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            817);
  } else {

  }
#line 819
  val.i = 0U;
#line 819
  val.ldv_38802.conn = 8U;
#line 819
  mask.i = 0U;
#line 819
  mask.ldv_38802.conn = 31U;
#line 819
  tmp = drbd_request_state(mdev, mask, val);
#line 819
  if (tmp <= 0) {
#line 820
    return (-2);
  } else {

  }
#line 822
  clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 824
  sock = 0;
#line 825
  msock = 0;
  ldv_50637: 
#line 828
  try = 0;
  ldv_50629: 
#line 830
  s = drbd_try_connect(mdev);
#line 831
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 832
    goto ldv_50628;
  } else {
#line 831
    try = try + 1;
#line 831
    if (try > 2) {
#line 832
      goto ldv_50628;
    } else {

    }
  }
#line 834
  schedule_timeout_interruptible(25L);
#line 835
  goto ldv_50629;
  ldv_50628: ;
#line 837
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 838
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 839
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 840
      sock = s;
#line 841
      s = 0;
    } else
#line 842
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 843
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 844
      msock = s;
#line 845
      s = 0;
    } else {
#line 847
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 848
      goto out_release_sockets;
    }
  } else {

  }
#line 852
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 853
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 854
    ok = drbd_socket_okay(mdev, & sock);
#line 855
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 855
    ok = tmp___0 != 0 && ok != 0;
#line 856
    if (ok != 0) {
#line 857
      goto ldv_50631;
    } else {

    }
  } else {

  }
  retry: 
#line 861
  s = drbd_wait_for_connect(mdev);
#line 862
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 863
    tmp___1 = drbd_recv_fp(mdev, s);
#line 863
    try = (int )tmp___1;
#line 864
    drbd_socket_okay(mdev, & sock);
#line 865
    drbd_socket_okay(mdev, & msock);
#line 866
    switch (try) {
    case 65522: ;
#line 868
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 869
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 870
      sock_release(sock);
    } else {

    }
#line 872
    sock = s;
#line 873
    goto ldv_50634;
    case 65521: ;
#line 875
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 876
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 877
      sock_release(msock);
    } else {

    }
#line 879
    msock = s;
#line 880
    set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 881
    goto ldv_50634;
    default: 
#line 883
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 884
    sock_release(s);
#line 885
    tmp___2 = random32();
#line 885
    if ((int )tmp___2 & 1) {
#line 886
      goto retry;
    } else {

    }
    }
    ldv_50634: ;
  } else {

  }
#line 890
  if ((int )mdev->state.ldv_38802.conn <= 1) {
#line 891
    goto out_release_sockets;
  } else {

  }
#line 892
  tmp___5 = get_current();
#line 892
  tmp___6 = signal_pending(tmp___5);
#line 892
  if (tmp___6 != 0) {
#line 893
    tmp___3 = get_current();
#line 893
    flush_signals(tmp___3);
#line 894
    __asm__  volatile   ("": : : "memory");
#line 895
    tmp___4 = get_t_state(& mdev->receiver);
#line 895
    if ((unsigned int )tmp___4 == 2U) {
#line 896
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 899
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 900
    ok = drbd_socket_okay(mdev, & sock);
#line 901
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 901
    ok = tmp___7 != 0 && ok != 0;
#line 902
    if (ok != 0) {
#line 903
      goto ldv_50631;
    } else {

    }
  } else {

  }
#line 905
  goto ldv_50637;
  ldv_50631: 
#line 907
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 908
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 910
  (sock->sk)->sk_allocation = 16U;
#line 911
  (msock->sk)->sk_allocation = 16U;
#line 913
  (sock->sk)->sk_priority = 4U;
#line 914
  (msock->sk)->sk_priority = 6U;
#line 921
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 921
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 921
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 924
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 925
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 929
  drbd_tcp_nodelay(sock);
#line 930
  drbd_tcp_nodelay(msock);
#line 932
  mdev->data.socket = sock;
#line 933
  mdev->meta.socket = msock;
#line 934
  mdev->last_received = jiffies;
#line 936
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 936
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            936);
  } else {

  }
#line 938
  h = drbd_do_handshake(mdev);
#line 939
  if (h <= 0) {
#line 940
    return (h);
  } else {

  }
#line 942
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 944
    tmp___9 = drbd_do_auth(mdev);
#line 944
    switch (tmp___9) {
    case -1: 
#line 946
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 947
    return (-1);
    case 0: 
#line 949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 950
    return (0);
    }
  } else {

  }
#line 954
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 955
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 957
  atomic_set(& mdev->packet_seq, 0);
#line 958
  mdev->peer_seq = 0U;
#line 960
  tmp___10 = drbd_send_protocol(mdev);
#line 960
  if (tmp___10 == -1) {
#line 961
    return (-1);
  } else {

  }
#line 962
  set_bit(29U, (unsigned long volatile   *)(& mdev->flags));
#line 963
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 964
  drbd_send_sizes(mdev, 0, 0);
#line 965
  drbd_send_uuids(mdev);
#line 966
  drbd_send_current_state(mdev);
#line 967
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 968
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 970
  spin_lock_irq(& mdev->req_lock);
#line 971
  __ns.i = mdev->state.i;
#line 971
  __ns.ldv_38802.conn = 9U;
#line 971
  rv = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 972
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 144U) {
#line 973
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 974
  spin_unlock_irq(& mdev->req_lock);
#line 976
  if ((int )rv <= 0) {
#line 977
    return (0);
  } else {

  }
#line 979
  drbd_thread_start(& mdev->asender);
#line 980
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 982
  return (1);
  out_release_sockets: ;
#line 985
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 986
    sock_release(sock);
  } else {

  }
#line 987
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 988
    sock_release(msock);
  } else {

  }
#line 989
  return (-1);
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 994
  h = & mdev->data.rbuf.header;
#line 997
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 998
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 998
  if (tmp___1 != 0L) {
#line 999
    tmp = get_current();
#line 999
    tmp___0 = signal_pending(tmp);
#line 999
    if (tmp___0 == 0) {
#line 1000
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 1001
    return (0);
  } else {

  }
#line 1004
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 1004
  if (tmp___9 != 0L) {
#line 1005
    tmp___2 = __fswab16((int )h->h80.command);
#line 1005
    *cmd = (enum drbd_packets )tmp___2;
#line 1006
    tmp___3 = __fswab16((int )h->h80.length);
#line 1006
    *packet_size = (unsigned int )tmp___3;
  } else
#line 1007
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1008
    tmp___4 = __fswab16((int )h->h95.command);
#line 1008
    *cmd = (enum drbd_packets )tmp___4;
#line 1009
    tmp___5 = __fswab32(h->h95.length);
#line 1009
    *packet_size = tmp___5;
  } else {
#line 1011
    tmp___6 = __fswab16((int )h->h80.length);
#line 1011
    tmp___7 = __fswab16((int )h->h80.command);
#line 1011
    tmp___8 = __fswab32(h->h80.magic);
#line 1011
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1015
    return (0);
  }
#line 1017
  mdev->last_received = jiffies;
#line 1019
  return (1);
}
}
#line 1022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1026
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1026
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1026
    if (tmp != 0) {
#line 1027
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1029
      if (rv != 0) {
#line 1030
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                  rv);
#line 1034
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1036
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1038
  return;
}
}
#line 1046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1052
  rv = FE_STILL_LIVE;
#line 1054
  spin_lock(& mdev->epoch_lock);
  ldv_50672: 
#line 1056
  next_epoch = 0;
#line 1058
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1060
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1062
  atomic_dec(& epoch->active);
#line 1063
  goto ldv_50662;
  case 1U: 
#line 1065
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1066
  goto ldv_50662;
  case 2U: ;
#line 1069
  goto ldv_50662;
  }
  ldv_50662: ;
#line 1072
  if (epoch_size != 0) {
#line 1072
    tmp___2 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1072
    if (tmp___2 == 0) {
#line 1072
      tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1072
      if (tmp___3 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1075
        if (((unsigned int )ev & 32U) == 0U) {
#line 1076
          spin_unlock(& mdev->epoch_lock);
#line 1077
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1078
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1080
        tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1080
        if (tmp___1 != 0) {
#line 1081
          atomic_dec(& mdev->unacked_cnt);
#line 1081
          tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1081
          if (tmp___0 < 0) {
#line 1081
            tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1081
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                    "drbd_may_finish_epoch", 1081, tmp);
          } else {

          }
        } else {

        }
#line 1083
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1084
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1084
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1085
          list_del(& epoch->list);
#line 1086
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1087
          mdev->epochs = mdev->epochs - 1U;
#line 1088
          kfree((void const   *)epoch);
#line 1090
          if ((unsigned int )rv == 0U) {
#line 1091
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1093
          epoch->flags = 0UL;
#line 1094
          atomic_set(& epoch->epoch_size, 0);
#line 1096
          if ((unsigned int )rv == 0U) {
#line 1097
            rv = FE_RECYCLED;
          } else {

          }
#line 1098
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1102
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1103
    goto ldv_50671;
  } else {

  }
#line 1105
  epoch = next_epoch;
#line 1106
  goto ldv_50672;
  ldv_50671: 
#line 1108
  spin_unlock(& mdev->epoch_lock);
#line 1110
  return (rv);
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1121
  write_ordering_str[0] = (char *)"none";
#line 1121
  write_ordering_str[1] = (char *)"drain";
#line 1121
  write_ordering_str[2] = (char *)"flush";
#line 1127
  pwo = mdev->write_ordering;
#line 1128
  _min1 = pwo;
#line 1128
  _min2 = wo;
#line 1128
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1129
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1130
    wo = WO_drain_io;
  } else {

  }
#line 1131
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1132
    wo = WO_none;
  } else {

  }
#line 1133
  mdev->write_ordering = wo;
#line 1134
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1135
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1136
  return;
}
}
#line 1155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1158
  bios = 0;
#line 1160
  page = e->pages;
#line 1161
  sector = e->sector;
#line 1162
  ds = e->size;
#line 1163
  n_bios = 0U;
#line 1164
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1165
  err = -12;
  next_bio: 
#line 1176
  bio = bio_alloc(16U, nr_pages);
#line 1177
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1179
    goto fail;
  } else {

  }
#line 1182
  bio->bi_sector = sector;
#line 1183
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1184
  bio->bi_rw = (unsigned long )rw;
#line 1185
  bio->bi_private = (void *)e;
#line 1186
  bio->bi_end_io = & drbd_endio_sec;
#line 1188
  bio->bi_next = bios;
#line 1189
  bios = bio;
#line 1190
  n_bios = n_bios + 1U;
#line 1192
  goto ldv_50704;
  ldv_50703: 
#line 1193
  __min1 = ds;
#line 1193
  __min2 = 4096U;
#line 1193
  len = __min1 < __min2 ? __min1 : __min2;
#line 1194
  tmp = bio_add_page(bio, page, len, 0U);
#line 1194
  if (tmp == 0) {
#line 1198
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1199
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1203
      err = -28;
#line 1204
      goto fail;
    } else {

    }
#line 1206
    goto next_bio;
  } else {

  }
#line 1208
  ds = ds - len;
#line 1209
  sector = (sector_t )(len >> 9) + sector;
#line 1210
  nr_pages = nr_pages - 1U;
#line 1192
  page = page_chain_next(page);
  ldv_50704: ;
#line 1192
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1192
    tmp___0 = page_chain_next(page);
#line 1192
    __builtin_prefetch((void const   *)tmp___0);
#line 1192
    if (1 != 0) {
#line 1193
      goto ldv_50703;
    } else {
#line 1195
      goto ldv_50705;
    }
  } else {

  }
  ldv_50705: ;
#line 1212
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1212);
  } else {

  }
#line 1213
  if (ds != 0U) {
#line 1213
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1213);
  } else {

  }
#line 1215
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_50706: 
#line 1217
  bio = bios;
#line 1218
  bios = bios->bi_next;
#line 1219
  bio->bi_next = 0;
#line 1221
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1222
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1223
    goto ldv_50706;
  } else {

  }

#line 1223
  return (0);
  fail: ;
#line 1226
  goto ldv_50709;
  ldv_50708: 
#line 1227
  bio = bios;
#line 1228
  bios = bios->bi_next;
#line 1229
  bio_put(bio);
  ldv_50709: ;
#line 1226
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1227
    goto ldv_50708;
  } else {

  }

#line 1231
  return (err);
}
}
#line 1234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1237
  p = & mdev->data.rbuf.barrier;
#line 1240
  inc_unacked(mdev);
#line 1242
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1243
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1243
  rv = (int )tmp;
#line 1250
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1252
  if (rv == 2) {
#line 1253
    return (1);
  } else {

  }
#line 1257
  tmp___0 = kmalloc(40UL, 16U);
#line 1257
  epoch = (struct drbd_epoch *)tmp___0;
#line 1258
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1259
    goto ldv_50720;
  } else {
#line 1261
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1266
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1267
  drbd_flush(mdev);
#line 1269
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1269
  if (tmp___2 != 0) {
#line 1270
    tmp___1 = kmalloc(40UL, 16U);
#line 1270
    epoch = (struct drbd_epoch *)tmp___1;
#line 1271
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1272
      goto ldv_50720;
    } else {

    }
  } else {

  }
#line 1275
  epoch = mdev->current_epoch;
#line 1276
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1276
  if (tmp___3 == 0) {
#line 1276
    goto ldv_50723;
  } else {

  }
#line 1276
  tmp___4 = get_current();
#line 1276
  __wait.flags = 0U;
#line 1276
  __wait.private = (void *)tmp___4;
#line 1276
  __wait.func = & autoremove_wake_function;
#line 1276
  __wait.task_list.next = & __wait.task_list;
#line 1276
  __wait.task_list.prev = & __wait.task_list;
  ldv_50726: 
#line 1276
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1276
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1276
  if (tmp___5 == 0) {
#line 1276
    goto ldv_50725;
  } else {

  }
#line 1276
  schedule();
#line 1276
  goto ldv_50726;
  ldv_50725: 
#line 1276
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_50723: 
#line 1278
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1278
  if (tmp___6 != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1278);
  } else {

  }
#line 1279
  if (epoch->flags != 0UL) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1279);
  } else {

  }
#line 1281
  return (1);
  default: 
#line 1283
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1284
  return (0);
  }
  ldv_50720: 
#line 1287
  epoch->flags = 0UL;
#line 1288
  atomic_set(& epoch->epoch_size, 0);
#line 1289
  atomic_set(& epoch->active, 0);
#line 1291
  spin_lock(& mdev->epoch_lock);
#line 1292
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1292
  if (tmp___7 != 0) {
#line 1293
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1294
    mdev->current_epoch = epoch;
#line 1295
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1298
    kfree((void const   *)epoch);
  }
#line 1300
  spin_unlock(& mdev->epoch_lock);
#line 1302
  return (1);
}
}
#line 1308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1310
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1310
  capacity = tmp;
#line 1314
  dig_in = mdev->int_dig_in;
#line 1315
  dig_vv = mdev->int_dig_vv;
#line 1318
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1318
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1318
    dgs = (int )tmp___0;
  } else {
#line 1318
    dgs = 0;
  }
#line 1321
  if (dgs != 0) {
#line 1322
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1323
    if (rr != dgs) {
#line 1324
      tmp___1 = get_current();
#line 1324
      tmp___2 = signal_pending(tmp___1);
#line 1324
      if (tmp___2 == 0) {
#line 1325
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1328
      return (0);
    } else {

    }
  } else {

  }
#line 1332
  data_size = data_size - dgs;
#line 1334
  _b = (data_size & 511) != 0;
#line 1334
  if (_b != 0) {
#line 1334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1334);
  } else {

  }
#line 1334
  if (_b != 0) {
#line 1334
    return (0);
  } else {

  }
#line 1335
  _b___0 = (unsigned int )data_size > 131072U;
#line 1335
  if (_b___0 != 0) {
#line 1335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1335);
  } else {

  }
#line 1335
  if (_b___0 != 0) {
#line 1335
    return (0);
  } else {

  }
#line 1339
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1344
    return (0);
  } else {

  }
#line 1350
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1351
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1352
    return (0);
  } else {

  }
#line 1354
  if (data_size == 0) {
#line 1355
    return (e);
  } else {

  }
#line 1357
  ds = data_size;
#line 1358
  page = e->pages;
#line 1359
  goto ldv_50754;
  ldv_50753: 
#line 1360
  __min1 = ds;
#line 1360
  __min2 = 4096;
#line 1360
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1361
  tmp___3 = kmap(page);
#line 1361
  data = (unsigned long *)tmp___3;
#line 1362
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1363
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1363
  if (tmp___4 != 0) {
#line 1364
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1365
    *data = ~ *data;
  } else {

  }
#line 1367
  kunmap(page);
#line 1368
  if ((unsigned int )rr != len) {
#line 1369
    drbd_free_some_ee(mdev, e, 0);
#line 1370
    tmp___5 = get_current();
#line 1370
    tmp___6 = signal_pending(tmp___5);
#line 1370
    if (tmp___6 == 0) {
#line 1371
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1373
    return (0);
  } else {

  }
#line 1375
  ds = ds - rr;
#line 1359
  page = page_chain_next(page);
  ldv_50754: ;
#line 1359
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1359
    tmp___7 = page_chain_next(page);
#line 1359
    __builtin_prefetch((void const   *)tmp___7);
#line 1359
    if (1 != 0) {
#line 1360
      goto ldv_50753;
    } else {
#line 1362
      goto ldv_50755;
    }
  } else {

  }
  ldv_50755: ;
#line 1378
  if (dgs != 0) {
#line 1379
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1380
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1380
    if (tmp___8 != 0) {
#line 1381
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1383
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1385
      drbd_free_some_ee(mdev, e, 0);
#line 1386
      return (0);
    } else {

    }
  } else {

  }
#line 1389
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1390
  return (e);
}
}
#line 1396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1399
  rv = 1;
#line 1402
  if (data_size == 0) {
#line 1403
    return (1);
  } else {

  }
#line 1405
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1407
  data = kmap(page);
#line 1408
  goto ldv_50775;
  ldv_50774: 
#line 1409
  __min1 = data_size;
#line 1409
  __min2 = 4096;
#line 1409
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1410
  __min1___1 = data_size;
#line 1410
  __min2___1 = 4096;
#line 1410
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1411
    rv = 0;
#line 1412
    tmp = get_current();
#line 1412
    tmp___0 = signal_pending(tmp);
#line 1412
    if (tmp___0 == 0) {
#line 1415
      __min1___0 = data_size;
#line 1415
      __min2___0 = 4096;
#line 1415
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1416
    goto ldv_50773;
  } else {

  }
#line 1418
  data_size = data_size - rr;
  ldv_50775: ;
#line 1408
  if (data_size != 0) {
#line 1409
    goto ldv_50774;
  } else {

  }
  ldv_50773: 
#line 1420
  kunmap(page);
#line 1421
  drbd_pp_free(mdev, page, 0);
#line 1422
  return (rv);
}
}
#line 1425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1431
  dig_in = mdev->int_dig_in;
#line 1432
  dig_vv = mdev->int_dig_vv;
#line 1434
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1434
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1434
    dgs = (int )tmp;
  } else {
#line 1434
    dgs = 0;
  }
#line 1437
  if (dgs != 0) {
#line 1438
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1439
    if (rr != dgs) {
#line 1440
      tmp___0 = get_current();
#line 1440
      tmp___1 = signal_pending(tmp___0);
#line 1440
      if (tmp___1 == 0) {
#line 1441
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1444
      return (0);
    } else {

    }
  } else {

  }
#line 1448
  data_size = data_size - dgs;
#line 1452
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1454
  bio = req->master_bio;
#line 1455
  if (bio->bi_sector != sector) {
#line 1455
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1455);
  } else {

  }
#line 1457
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1457
  i = (int )bio->bi_idx;
#line 1457
  goto ldv_50794;
  ldv_50793: 
#line 1458
  __min1 = data_size;
#line 1458
  __min2 = (int )bvec->bv_len;
#line 1458
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1459
  tmp___2 = kmap(bvec->bv_page);
#line 1459
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1462
  kunmap(bvec->bv_page);
#line 1463
  if (rr != expect) {
#line 1464
    tmp___3 = get_current();
#line 1464
    tmp___4 = signal_pending(tmp___3);
#line 1464
    if (tmp___4 == 0) {
#line 1465
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1468
    return (0);
  } else {

  }
#line 1470
  data_size = data_size - rr;
#line 1457
  bvec = bvec + 1;
#line 1457
  i = i + 1;
  ldv_50794: ;
#line 1457
  if ((int )bio->bi_vcnt > i) {
#line 1458
    goto ldv_50793;
  } else {

  }

#line 1473
  if (dgs != 0) {
#line 1474
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1475
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1475
    if (tmp___5 != 0) {
#line 1476
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1477
      return (0);
    } else {

    }
  } else {

  }
#line 1481
  if (data_size != 0) {
#line 1481
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1481);
  } else {

  }
#line 1482
  return (1);
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1489
  e = (struct drbd_epoch_entry *)w;
#line 1490
  sector = e->sector;
#line 1493
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1493
  if (tmp == 0) {
#line 1493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1493);
  } else {

  }
#line 1495
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1495
  if (tmp___0 != 0L) {
#line 1496
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1496U);
#line 1497
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1500
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1502
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1504
  atomic_dec(& mdev->unacked_cnt);
#line 1504
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1504
  if (tmp___2 < 0) {
#line 1504
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1504
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1504, tmp___1);
  } else {

  }
#line 1506
  return (ok);
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1513
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1514
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1515
    goto fail;
  } else {

  }
#line 1517
  atomic_dec(& mdev->rs_pending_cnt);
#line 1517
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1517
  if (tmp___0 < 0) {
#line 1517
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1517
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1517, tmp);
  } else {

  }
#line 1519
  inc_unacked(mdev);
#line 1523
  e->w.cb = & e_end_resync_block;
#line 1525
  spin_lock_irq(& mdev->req_lock);
#line 1526
  list_add(& e->w.list, & mdev->sync_ee);
#line 1527
  spin_unlock_irq(& mdev->req_lock);
#line 1529
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1530
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1530
  if (tmp___1 == 0) {
#line 1531
    return (1);
  } else {

  }
#line 1534
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1535
  spin_lock_irq(& mdev->req_lock);
#line 1536
  list_del(& e->w.list);
#line 1537
  spin_unlock_irq(& mdev->req_lock);
#line 1539
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1541
  put_ldev(mdev);
#line 1542
  return (0);
}
}
#line 1545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1550
  p = & mdev->data.rbuf.data;
#line 1552
  tmp = __fswab64(p->sector);
#line 1552
  sector = (sector_t )tmp;
#line 1554
  spin_lock_irq(& mdev->req_lock);
#line 1555
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1556
  spin_unlock_irq(& mdev->req_lock);
#line 1557
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1557
  if (tmp___0 != 0L) {
#line 1558
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1559
    return (0);
  } else {

  }
#line 1565
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1567
  if (ok != 0) {
#line 1568
    req_mod(req, data_received);
  } else {

  }
#line 1573
  return (ok);
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1580
  p = & mdev->data.rbuf.data;
#line 1582
  tmp = __fswab64(p->sector);
#line 1582
  sector = (sector_t )tmp;
#line 1583
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1583);
  } else {

  }
#line 1585
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1585
  if (tmp___1 != 0) {
#line 1589
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1591
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1591
    if (tmp___0 != 0) {
#line 1592
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1594
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1596
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1599
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1601
  return (ok);
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1609
  e = (struct drbd_epoch_entry *)w;
#line 1610
  sector = e->sector;
#line 1611
  ok = 1;
#line 1613
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1614
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1614
    if (tmp___0 != 0L) {
#line 1615
      pcmd = ((int )mdev->state.ldv_38802.conn > 15 && (int )mdev->state.ldv_38802.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1619
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1619
      ok = tmp & ok;
#line 1620
      if (pcmd == 23) {
#line 1621
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1621U);
      } else {

      }
    } else {
#line 1623
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1627
    atomic_dec(& mdev->unacked_cnt);
#line 1627
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1627
    if (tmp___2 < 0) {
#line 1627
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1627
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1627, tmp___1);
    } else {

    }
  } else {

  }
#line 1631
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1632
    spin_lock_irq(& mdev->req_lock);
#line 1633
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1633
    if (tmp___3 != 0) {
#line 1633
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1633);
    } else {

    }
#line 1634
    hlist_del_init(& e->collision);
#line 1635
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1637
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1637
    if (tmp___4 == 0) {
#line 1637
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1637);
    } else {

    }
  }
#line 1640
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1642
  return (ok);
}
}
#line 1645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1647
  e = (struct drbd_epoch_entry *)w;
#line 1648
  ok = 1;
#line 1650
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1650);
  } else {

  }
#line 1651
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1653
  spin_lock_irq(& mdev->req_lock);
#line 1654
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1654
  if (tmp != 0) {
#line 1654
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1654);
  } else {

  }
#line 1655
  hlist_del_init(& e->collision);
#line 1656
  spin_unlock_irq(& mdev->req_lock);
#line 1658
  atomic_dec(& mdev->unacked_cnt);
#line 1658
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1658
  if (tmp___1 < 0) {
#line 1658
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1658, tmp___0);
  } else {

  }
#line 1660
  return (ok);
}
}
#line 1663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_epoch_entry *data_e ) 
{ 
  struct drbd_epoch_entry *rs_e ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1667
  rv = 0;
#line 1669
  spin_lock_irq(& mdev->req_lock);
#line 1670
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1670
  rs_e = (struct drbd_epoch_entry *)__mptr;
#line 1670
  goto ldv_50873;
  ldv_50872: 
#line 1671
  tmp = overlaps(data_e->sector, (int )data_e->size, rs_e->sector, (int )rs_e->size);
#line 1671
  if (tmp != 0) {
#line 1672
    rv = 1;
#line 1673
    goto ldv_50871;
  } else {

  }
#line 1670
  __mptr___0 = (struct list_head  const  *)rs_e->w.list.next;
#line 1670
  rs_e = (struct drbd_epoch_entry *)__mptr___0;
  ldv_50873: ;
#line 1670
  if ((unsigned long )(& rs_e->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1671
    goto ldv_50872;
  } else {

  }
  ldv_50871: 
#line 1676
  spin_unlock_irq(& mdev->req_lock);
#line 1678
  return (rv);
}
}
#line 1702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1704
  tmp = get_current();
#line 1704
  wait.flags = 0U;
#line 1704
  wait.private = (void *)tmp;
#line 1704
  wait.func = & autoremove_wake_function;
#line 1704
  wait.task_list.next = & wait.task_list;
#line 1704
  wait.task_list.prev = & wait.task_list;
#line 1707
  ret = 0;
#line 1708
  spin_lock(& mdev->peer_seq_lock);
  ldv_50883: 
#line 1710
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1711
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1711
  if (tmp___0 <= 0) {
#line 1712
    goto ldv_50882;
  } else {

  }
#line 1713
  tmp___1 = get_current();
#line 1713
  tmp___2 = signal_pending(tmp___1);
#line 1713
  if (tmp___2 != 0) {
#line 1714
    ret = -512;
#line 1715
    goto ldv_50882;
  } else {

  }
#line 1717
  p_seq = mdev->peer_seq;
#line 1718
  spin_unlock(& mdev->peer_seq_lock);
#line 1719
  timeout = schedule_timeout(7500L);
#line 1720
  spin_lock(& mdev->peer_seq_lock);
#line 1721
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1722
    ret = -110;
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1724
    goto ldv_50882;
  } else {

  }
#line 1726
  goto ldv_50883;
  ldv_50882: 
#line 1727
  finish_wait(& mdev->seq_wait, & wait);
#line 1728
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1729
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1730
  spin_unlock(& mdev->peer_seq_lock);
#line 1731
  return (ret);
}
}
#line 1737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1739
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 1024 : 0)) | ((dpf & 32U) != 0U ? 2048 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  bool tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  bool tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 1750
  p = & mdev->data.rbuf.data;
#line 1751
  rw = 1;
#line 1754
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1754
  if (tmp___1 == 0) {
#line 1755
    spin_lock(& mdev->peer_seq_lock);
#line 1756
    tmp = __fswab32(p->seq_num);
#line 1756
    if (mdev->peer_seq + 1U == tmp) {
#line 1757
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1758
    spin_unlock(& mdev->peer_seq_lock);
#line 1760
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1761
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1762
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1762
    return (tmp___0);
  } else {

  }
#line 1770
  tmp___2 = __fswab64(p->sector);
#line 1770
  sector = (sector_t )tmp___2;
#line 1771
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1772
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1773
    put_ldev(mdev);
#line 1774
    return (0);
  } else {

  }
#line 1777
  e->w.cb = & e_end_block;
#line 1779
  tmp___3 = __fswab32(p->dp_flags);
#line 1779
  dp_flags = tmp___3;
#line 1780
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1780
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1781
  if ((unsigned long )e->pages == (unsigned long )((struct page *)0)) {
#line 1782
    if (e->size != 0U) {
#line 1782
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1782);
    } else {

    }
#line 1783
    if ((dp_flags & 32U) == 0U) {
#line 1783
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( dp_flags & DP_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1783);
    } else {

    }
  } else {

  }
#line 1786
  if ((dp_flags & 4U) != 0U) {
#line 1787
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1789
  spin_lock(& mdev->epoch_lock);
#line 1790
  e->epoch = mdev->current_epoch;
#line 1791
  atomic_inc(& (e->epoch)->epoch_size);
#line 1792
  atomic_inc(& (e->epoch)->active);
#line 1793
  spin_unlock(& mdev->epoch_lock);
#line 1796
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1797
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1801
    size = (int const   )e->size;
#line 1802
    tmp___5 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 1802
    discard = tmp___5;
#line 1803
    tmp___6 = get_current();
#line 1803
    wait.flags = 0U;
#line 1803
    wait.private = (void *)tmp___6;
#line 1803
    wait.func = & autoremove_wake_function;
#line 1803
    wait.task_list.next = & wait.task_list;
#line 1803
    wait.task_list.prev = & wait.task_list;
#line 1809
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1809
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1809);
    } else {

    }
#line 1810
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1810
    if (tmp___7 != 0L) {
#line 1810
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1810), "i" (12UL));
      ldv_50905: ;
#line 1810
      goto ldv_50905;
    } else {

    }
#line 1811
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1811
    if (tmp___8 != 0L) {
#line 1811
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1811), "i" (12UL));
      ldv_50906: ;
#line 1811
      goto ldv_50906;
    } else {

    }
#line 1847
    tmp___9 = __fswab32(p->seq_num);
#line 1847
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1847
    if (tmp___10 != 0) {
#line 1848
      goto out_interrupted;
    } else {

    }
#line 1850
    spin_lock_irq(& mdev->req_lock);
#line 1852
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1852
    hlist_add_head(& e->collision, tmp___11);
#line 1855
    slot = tl_hash_slot(mdev, sector);
#line 1856
    first = 1;
    ldv_50917: 
#line 1858
    have_unacked = 0;
#line 1859
    have_conflict = 0;
#line 1860
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1862
    n = slot->first;
#line 1862
    goto ldv_50914;
    ldv_50913: 
#line 1863
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1863
    if (tmp___14 != 0) {
#line 1866
      if (first != 0) {
#line 1867
        tmp___12 = get_current();
#line 1867
        tmp___13 = get_current();
#line 1867
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1872
      if ((i->rq_state & 16UL) != 0UL) {
#line 1873
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1874
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1862
    n = n->next;
    ldv_50914: ;
#line 1862
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1862
      __mptr = (struct hlist_node  const  *)n;
#line 1862
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1862
      if (1 != 0) {
#line 1863
        goto ldv_50913;
      } else {
#line 1865
        goto ldv_50915;
      }
    } else {

    }
    ldv_50915: ;
#line 1878
    if (have_conflict == 0) {
#line 1879
      goto ldv_50916;
    } else {

    }
#line 1882
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1883
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1885
      inc_unacked(mdev);
#line 1886
      e->w.cb = & e_send_discard_ack;
#line 1887
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1889
      spin_unlock_irq(& mdev->req_lock);
#line 1894
      put_ldev(mdev);
#line 1895
      wake_asender(mdev);
#line 1896
      finish_wait(& mdev->misc_wait, & wait);
#line 1897
      return (1);
    } else {

    }
#line 1900
    tmp___15 = get_current();
#line 1900
    tmp___16 = signal_pending(tmp___15);
#line 1900
    if (tmp___16 != 0) {
#line 1901
      hlist_del_init(& e->collision);
#line 1903
      spin_unlock_irq(& mdev->req_lock);
#line 1905
      finish_wait(& mdev->misc_wait, & wait);
#line 1906
      goto out_interrupted;
    } else {

    }
#line 1909
    spin_unlock_irq(& mdev->req_lock);
#line 1910
    if (first != 0) {
#line 1911
      first = 0;
#line 1912
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1914
    if (discard != 0) {
#line 1917
      if (have_unacked != 0) {
#line 1917
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1917);
      } else {

      }
    } else {

    }
#line 1919
    schedule();
#line 1920
    spin_lock_irq(& mdev->req_lock);
#line 1921
    goto ldv_50917;
    ldv_50916: 
#line 1922
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1925
  list_add(& e->w.list, & mdev->active_ee);
#line 1926
  spin_unlock_irq(& mdev->req_lock);
#line 1928
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) {
#line 1929
    tmp___17 = overlapping_resync_write(mdev, e);
#line 1929
    if (tmp___17) {
#line 1929
      tmp___18 = 0;
    } else {
#line 1929
      tmp___18 = 1;
    }
#line 1929
    if (tmp___18) {
#line 1929
      goto ldv_50918;
    } else {

    }
#line 1929
    tmp___19 = get_current();
#line 1929
    __wait.flags = 0U;
#line 1929
    __wait.private = (void *)tmp___19;
#line 1929
    __wait.func = & autoremove_wake_function;
#line 1929
    __wait.task_list.next = & __wait.task_list;
#line 1929
    __wait.task_list.prev = & __wait.task_list;
    ldv_50921: 
#line 1929
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1929
    tmp___20 = overlapping_resync_write(mdev, e);
#line 1929
    if (tmp___20) {
#line 1929
      tmp___21 = 0;
    } else {
#line 1929
      tmp___21 = 1;
    }
#line 1929
    if (tmp___21) {
#line 1929
      goto ldv_50920;
    } else {

    }
#line 1929
    schedule();
#line 1929
    goto ldv_50921;
    ldv_50920: 
#line 1929
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_50918: ;
  } else {

  }
#line 1931
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1933
  inc_unacked(mdev);
#line 1936
  goto ldv_50923;
  case 2: 
#line 1940
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1941
  goto ldv_50923;
  case 1: ;
#line 1944
  goto ldv_50923;
  }
  ldv_50923: ;
#line 1947
  if ((int )mdev->state.ldv_38802.pdsk <= 3) {
#line 1949
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1949U);
#line 1950
    e->flags = e->flags | 1UL;
#line 1951
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1952
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1955
  tmp___22 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1955
  if (tmp___22 == 0) {
#line 1956
    return (1);
  } else {

  }
#line 1959
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1960
  spin_lock_irq(& mdev->req_lock);
#line 1961
  list_del(& e->w.list);
#line 1962
  hlist_del_init(& e->collision);
#line 1963
  spin_unlock_irq(& mdev->req_lock);
#line 1964
  if ((int )e->flags & 1) {
#line 1965
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1968
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1969
  put_ldev(mdev);
#line 1970
  drbd_free_some_ee(mdev, e, 0);
#line 1971
  return (0);
}
}
#line 1985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1987
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1991
  throttle = 0;
#line 1994
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1995
    return (0);
  } else {

  }
#line 1997
  spin_lock_irq(& mdev->al_lock);
#line 1998
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1999
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 2000
    __mptr = (struct lc_element  const  *)tmp;
#line 2000
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 2001
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 2001
    if (tmp___0 != 0) {
#line 2002
      spin_unlock_irq(& mdev->al_lock);
#line 2003
      return (0);
    } else {

    }
  } else {

  }
#line 2007
  spin_unlock_irq(& mdev->al_lock);
#line 2009
  res = 0UL;
#line 2009
  _cpu = 4294967295U;
#line 2009
  goto ldv_50947;
  ldv_50946: 
#line 2009
  __vpp_verify = 0;
#line 2009
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2009
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_50947: 
#line 2009
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2009
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2010
    goto ldv_50946;
  } else {

  }
#line 2010
  res___0 = 0UL;
#line 2010
  _cpu___0 = 4294967295U;
#line 2010
  goto ldv_50957;
  ldv_50956: 
#line 2010
  __vpp_verify___0 = 0;
#line 2010
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2010
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_50957: 
#line 2010
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2010
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2011
    goto ldv_50956;
  } else {

  }
#line 2010
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2010
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 2013
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2017
    mdev->rs_last_events = curr_events;
#line 2021
    i = (mdev->rs_last_mark + 7) % 8;
#line 2023
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2024
      rs_left = mdev->ov_left;
    } else {
#line 2026
      tmp___2 = drbd_bm_total_weight(mdev);
#line 2026
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 2028
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2029
    if (dt == 0UL) {
#line 2030
      dt = dt + 1UL;
    } else {

    }
#line 2031
    db = mdev->rs_mark_left[i] - rs_left;
#line 2032
    dbdt = db / dt << 2;
#line 2034
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2035
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2037
  return (throttle);
}
}
#line 2041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 2044
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2044
  capacity = tmp;
#line 2046
  di = 0;
#line 2049
  p = & mdev->data.rbuf.block_req;
#line 2051
  tmp___0 = __fswab64(p->sector);
#line 2051
  sector = (sector_t )tmp___0;
#line 2052
  tmp___1 = __fswab32(p->blksize);
#line 2052
  size = (int )tmp___1;
#line 2054
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2055
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2055, (unsigned long long )sector, size);
#line 2057
    return (0);
  } else {

  }
#line 2059
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2060
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2060, (unsigned long long )sector, size);
#line 2062
    return (0);
  } else {

  }
#line 2065
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2065
  if (tmp___7 == 0) {
#line 2066
    verb = 1;
#line 2067
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2069
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2070
    goto ldv_50976;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2074
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2075
    goto ldv_50976;
    case 31U: 
#line 2077
    verb = 0;
#line 2078
    atomic_dec(& mdev->rs_pending_cnt);
#line 2078
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2078
    if (tmp___3 < 0) {
#line 2078
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2078
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2078, tmp___2);
    } else {

    }
#line 2079
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2080
    goto ldv_50976;
    default: 
#line 2082
    tmp___4 = cmdname(cmd);
#line 2082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_50976: ;
#line 2085
    if (verb != 0) {
#line 2085
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2085
      if (tmp___5 != 0) {
#line 2086
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2090
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2090
    return (tmp___6);
  } else {

  }
#line 2096
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2097
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2098
    put_ldev(mdev);
#line 2099
    return (0);
  } else {

  }
#line 2102
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2104
  e->w.cb = & w_e_end_data_req;
#line 2105
  fault_type = 5U;
#line 2107
  goto submit;
  case 9U: 
#line 2110
  e->w.cb = & w_e_end_rsdata_req;
#line 2111
  fault_type = 3U;
#line 2113
  mdev->bm_resync_fo = sector >> 3;
#line 2114
  goto ldv_50989;
  case 31U: ;
  case 33U: 
#line 2118
  fault_type = 3U;
#line 2119
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2119
  di = (struct digest_info *)tmp___8;
#line 2120
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2121
    goto out_free_e;
  } else {

  }
#line 2123
  di->digest_size = (int )digest_size;
#line 2124
  di->digest = (void *)di + 16U;
#line 2126
  e->ldv_47580.digest = di;
#line 2127
  e->flags = e->flags | 16UL;
#line 2129
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2129
  if ((unsigned int )tmp___9 != digest_size) {
#line 2130
    goto out_free_e;
  } else {

  }
#line 2132
  if ((unsigned int )cmd == 33U) {
#line 2133
    if (mdev->agreed_pro_version <= 88) {
#line 2133
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2133);
    } else {

    }
#line 2134
    e->w.cb = & w_e_end_csum_rs_req;
#line 2136
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2137
  if ((unsigned int )cmd == 31U) {
#line 2139
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2140
    e->w.cb = & w_e_end_ov_reply;
#line 2141
    atomic_dec(& mdev->rs_pending_cnt);
#line 2141
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2141
    if (tmp___11 < 0) {
#line 2141
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2141
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2141, tmp___10);
    } else {

    }
#line 2144
    goto submit_for_resync;
  } else {

  }
#line 2146
  goto ldv_50989;
  case 30U: ;
#line 2149
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2151
    now = jiffies;
#line 2153
    mdev->ov_start_sector = sector;
#line 2154
    mdev->ov_position = sector;
#line 2155
    tmp___12 = drbd_bm_bits(mdev);
#line 2155
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2156
    mdev->rs_total = mdev->ov_left;
#line 2157
    i = 0;
#line 2157
    goto ldv_51001;
    ldv_51000: 
#line 2158
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2159
    mdev->rs_mark_time[i] = now;
#line 2157
    i = i + 1;
    ldv_51001: ;
#line 2157
    if (i <= 7) {
#line 2158
      goto ldv_51000;
    } else {

    }
#line 2161
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2164
  e->w.cb = & w_e_end_ov_req;
#line 2165
  fault_type = 3U;
#line 2166
  goto ldv_50989;
  default: 
#line 2169
  tmp___13 = cmdname(cmd);
#line 2169
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2171
  fault_type = 10U;
#line 2172
  goto out_free_e;
  }
  ldv_50989: ;
#line 2197
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2197
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2197
    if (tmp___14 != 0) {
#line 2198
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2199
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2199
  if (tmp___15 != 0) {
#line 2200
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2203
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2206
  inc_unacked(mdev);
#line 2207
  spin_lock_irq(& mdev->req_lock);
#line 2208
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2209
  spin_unlock_irq(& mdev->req_lock);
#line 2211
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2211
  if (tmp___16 == 0) {
#line 2212
    return (1);
  } else {

  }
#line 2215
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2216
  spin_lock_irq(& mdev->req_lock);
#line 2217
  list_del(& e->w.list);
#line 2218
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2222
  put_ldev(mdev);
#line 2223
  drbd_free_some_ee(mdev, e, 0);
#line 2224
  return (0);
}
}
#line 2227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2229
  rv = -100;
#line 2232
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2233
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2235
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2236
  ch_self = mdev->comm_bm_set;
#line 2238
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2242
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2243
  goto ldv_51015;
  case 0: ;
#line 2245
  goto ldv_51015;
  case 1: ;
#line 2247
  if (self == 0 && peer == 1) {
#line 2248
    rv = -1;
#line 2249
    goto ldv_51015;
  } else {

  }
#line 2251
  if (self == 1 && peer == 0) {
#line 2252
    rv = 1;
#line 2253
    goto ldv_51015;
  } else {

  }
  case 2: ;
#line 2257
  if (self == 0 && peer == 1) {
#line 2258
    rv = 1;
#line 2259
    goto ldv_51015;
  } else {

  }
#line 2261
  if (self == 1 && peer == 0) {
#line 2262
    rv = -1;
#line 2263
    goto ldv_51015;
  } else {

  }
#line 2266
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2269
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2270
    tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2270
    rv = tmp != 0 ? -1 : 1;
#line 2272
    goto ldv_51015;
  } else {
#line 2274
    if (ch_peer == 0UL) {
#line 2274
      rv = 1;
#line 2274
      goto ldv_51015;
    } else {

    }
#line 2275
    if (ch_self == 0UL) {
#line 2275
      rv = -1;
#line 2275
      goto ldv_51015;
    } else {

    }
  }
#line 2277
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2278
    goto ldv_51015;
  } else {

  }
  case 4: ;
#line 2280
  if (ch_self < ch_peer) {
#line 2281
    rv = -1;
  } else
#line 2282
  if (ch_self > ch_peer) {
#line 2283
    rv = 1;
  } else {
#line 2286
    tmp___0 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2286
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2288
  goto ldv_51015;
  case 5: 
#line 2290
  rv = -1;
#line 2291
  goto ldv_51015;
  case 6: 
#line 2293
  rv = 1;
  }
  ldv_51015: ;
#line 2296
  return (rv);
}
}
#line 2299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2301
  rv = -100;
#line 2303
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2309
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2310
  goto ldv_51033;
  case 0: ;
#line 2312
  goto ldv_51033;
  case 7: 
#line 2314
  hg = drbd_asb_recover_0p(mdev);
#line 2315
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2316
    rv = hg;
  } else {

  }
#line 2317
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2318
    rv = hg;
  } else {

  }
#line 2319
  goto ldv_51033;
  case 10: 
#line 2321
  rv = drbd_asb_recover_0p(mdev);
#line 2322
  goto ldv_51033;
  case 8: ;
#line 2324
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2326
  hg = drbd_asb_recover_0p(mdev);
#line 2327
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2330
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2334
    val.i = 0U;
#line 2334
    val.ldv_38802.role = 2U;
#line 2334
    mask.i = 0U;
#line 2334
    mask.ldv_38802.role = 3U;
#line 2334
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2335
    if ((int )rv2 != 1) {
#line 2336
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2338
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2339
      rv = hg;
    }
  } else {
#line 2342
    rv = hg;
  }
  }
  ldv_51033: ;
#line 2345
  return (rv);
}
}
#line 2348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2350
  rv = -100;
#line 2352
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2360
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2361
  goto ldv_51056;
  case 10: 
#line 2363
  rv = drbd_asb_recover_0p(mdev);
#line 2364
  goto ldv_51056;
  case 0: ;
#line 2366
  goto ldv_51056;
  case 9: 
#line 2368
  hg = drbd_asb_recover_0p(mdev);
#line 2369
  if (hg == -1) {
#line 2375
    val.i = 0U;
#line 2375
    val.ldv_38802.role = 2U;
#line 2375
    mask.i = 0U;
#line 2375
    mask.ldv_38802.role = 3U;
#line 2375
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2376
    if ((int )rv2 != 1) {
#line 2377
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2379
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2380
      rv = hg;
    }
  } else {
#line 2383
    rv = hg;
  }
  }
  ldv_51056: ;
#line 2386
  return (rv);
}
}
#line 2389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2392
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2393
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2394
    return;
  } else {

  }
#line 2396
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2397
  return;
}
}
#line 2418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2423
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2424
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2426
  *rule_nr = 10;
#line 2427
  if (self == 4ULL && peer == 4ULL) {
#line 2428
    return (0);
  } else {

  }
#line 2430
  *rule_nr = 20;
#line 2431
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2433
    return (-2);
  } else {

  }
#line 2435
  *rule_nr = 30;
#line 2436
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2438
    return (2);
  } else {

  }
#line 2440
  if (self == peer) {
#line 2443
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2445
      if (mdev->agreed_pro_version <= 90) {
#line 2446
        return (-1091);
      } else {

      }
#line 2448
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2450
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2451
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2453
        if ((int )mdev->state.ldv_38802.disk > 2) {
#line 2453
          tmp = drbd_bm_total_weight(mdev);
#line 2453
          tmp___0 = (u64 )tmp;
        } else {
#line 2453
          tmp___0 = 0ULL;
        }
#line 2453
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2455
        *rule_nr = 34;
      } else {
#line 2457
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2458
        *rule_nr = 36;
      }
#line 2461
      return (1);
    } else {

    }
#line 2464
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2466
      if (mdev->agreed_pro_version <= 90) {
#line 2467
        return (-1091);
      } else {

      }
#line 2469
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2471
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2473
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2474
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2475
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2477
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2478
        *rule_nr = 35;
      } else {
#line 2480
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2481
        *rule_nr = 37;
      }
#line 2484
      return (-1);
    } else {

    }
#line 2488
    tmp___1 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2488
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2492
    *rule_nr = 40;
#line 2494
    switch (rct) {
    case 0: ;
#line 2495
    return (0);
    case 1: ;
#line 2496
    return (1);
    case 2: ;
#line 2497
    return (-1);
    case 3: 
#line 2499
    dc = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2500
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2504
  *rule_nr = 50;
#line 2505
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2506
  if (self == peer) {
#line 2507
    return (-1);
  } else {

  }
#line 2509
  *rule_nr = 51;
#line 2510
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2511
  if (self == peer) {
#line 2512
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2519
      if (mdev->agreed_pro_version <= 90) {
#line 2520
        return (-1091);
      } else {

      }
#line 2522
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2523
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2525
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2526
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2528
      return (-1);
    } else {

    }
  } else {

  }
#line 2532
  *rule_nr = 60;
#line 2533
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2534
  i = 2;
#line 2534
  goto ldv_51087;
  ldv_51086: 
#line 2535
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2536
  if (self == peer) {
#line 2537
    return (-2);
  } else {

  }
#line 2534
  i = i + 1;
  ldv_51087: ;
#line 2534
  if (i <= 3) {
#line 2535
    goto ldv_51086;
  } else {

  }
#line 2540
  *rule_nr = 70;
#line 2541
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2542
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2543
  if (self == peer) {
#line 2544
    return (1);
  } else {

  }
#line 2546
  *rule_nr = 71;
#line 2547
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2548
  if (self == peer) {
#line 2549
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2556
      if (mdev->agreed_pro_version <= 90) {
#line 2557
        return (-1091);
      } else {

      }
#line 2559
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2560
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2562
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2563
      if ((int )mdev->state.ldv_38802.disk > 2) {
#line 2563
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2563
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2563
        tmp___3 = 0ULL;
      }
#line 2563
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2566
      return (1);
    } else {

    }
  } else {

  }
#line 2571
  *rule_nr = 80;
#line 2572
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2573
  i = 2;
#line 2573
  goto ldv_51090;
  ldv_51089: 
#line 2574
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2575
  if (self == peer) {
#line 2576
    return (2);
  } else {

  }
#line 2573
  i = i + 1;
  ldv_51090: ;
#line 2573
  if (i <= 3) {
#line 2574
    goto ldv_51089;
  } else {

  }
#line 2579
  *rule_nr = 90;
#line 2580
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2581
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2582
  if (self == peer && self != 0ULL) {
#line 2583
    return (100);
  } else {

  }
#line 2585
  *rule_nr = 100;
#line 2586
  i = 2;
#line 2586
  goto ldv_51096;
  ldv_51095: 
#line 2587
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2588
  j = 2;
#line 2588
  goto ldv_51093;
  ldv_51092: 
#line 2589
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2590
  if (self == peer) {
#line 2591
    return (-100);
  } else {

  }
#line 2588
  j = j + 1;
  ldv_51093: ;
#line 2588
  if (j <= 3) {
#line 2589
    goto ldv_51092;
  } else {

  }
#line 2586
  i = i + 1;
  ldv_51096: ;
#line 2586
  if (i <= 3) {
#line 2587
    goto ldv_51095;
  } else {

  }

#line 2595
  return (-1000);
}
}
#line 2601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2605
  rv = C_MASK;
#line 2608
  mydisk = (enum drbd_disk_state )mdev->state.ldv_38802.disk;
#line 2609
  if ((unsigned int )mydisk == 3U) {
#line 2610
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_38802.disk;
  } else {

  }
#line 2612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2613
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2614
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2617
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2619
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2621
  if (hg == -1000) {
#line 2622
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2623
    return (C_MASK);
  } else {

  }
#line 2625
  if (hg < -1000) {
#line 2626
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2627
    return (C_MASK);
  } else {

  }
#line 2630
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2632
    if (hg == -100) {
#line 2632
      tmp = 1;
    } else {
#line 2632
      __x___0 = hg;
#line 2632
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2632
      if (ret == 2L) {
#line 2632
        tmp = 1;
      } else {
#line 2632
        tmp = 0;
      }
    }
#line 2632
    f = tmp;
#line 2633
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2634
    if (f != 0) {
#line 2635
      hg = hg * 2;
    } else {

    }
#line 2636
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2640
  __x___2 = hg;
#line 2640
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2640
  if (ret___0 == 100L) {
#line 2641
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2643
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2644
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2646
    forced = hg == -100;
#line 2648
    switch (pcount) {
    case 0: 
#line 2650
    hg = drbd_asb_recover_0p(mdev);
#line 2651
    goto ldv_51119;
    case 1: 
#line 2653
    hg = drbd_asb_recover_1p(mdev);
#line 2654
    goto ldv_51119;
    case 2: 
#line 2656
    hg = drbd_asb_recover_2p(mdev);
#line 2657
    goto ldv_51119;
    }
    ldv_51119: 
#line 2659
    __x___4 = hg;
#line 2659
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2659
    if (ret___1 <= 99L) {
#line 2660
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2663
      if (forced != 0) {
#line 2664
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2666
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2671
  if (hg == -100) {
#line 2672
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2673
      hg = -1;
    } else {

    }
#line 2674
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2675
      hg = 1;
    } else {

    }
#line 2677
    __x___6 = hg;
#line 2677
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2677
    if (ret___2 <= 99L) {
#line 2678
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2683
  if (hg == -100) {
#line 2688
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2689
    drbd_khelper(mdev, (char *)"split-brain");
#line 2690
    return (C_MASK);
  } else {

  }
#line 2693
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2694
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2695
    return (C_MASK);
  } else {

  }
#line 2698
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_38802.disk > 6) {
#line 2700
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2702
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2705
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2706
    return (C_MASK);
    case 10: 
#line 2708
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2713
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2713
    goto _L;
  } else {
#line 2713
    tmp___1 = constant_test_bit(24U, (unsigned long const volatile   *)(& mdev->flags));
#line 2713
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2714
      if (hg == 0) {
#line 2715
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2717
        __x___8 = hg;
#line 2717
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2717
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2717
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2720
      return (C_MASK);
    } else {

    }
  }
#line 2723
  __x___10 = hg;
#line 2723
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2723
  if (ret___4 > 1L) {
#line 2724
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2725
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 2725
    if (tmp___2 != 0) {
#line 2727
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2730
  if (hg > 0) {
#line 2731
    rv = C_WF_BITMAP_S;
  } else
#line 2732
  if (hg < 0) {
#line 2733
    rv = C_WF_BITMAP_T;
  } else {
#line 2735
    rv = C_CONNECTED;
#line 2736
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2736
    if (tmp___4 != 0UL) {
#line 2737
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2737
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2742
  return (rv);
}
}
#line 2746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2749
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2751
    return (0);
  } else {

  }
#line 2754
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2756
    return (1);
  } else {

  }
#line 2759
  if ((unsigned int )peer == (unsigned int )self) {
#line 2760
    return (0);
  } else {

  }
#line 2763
  return (1);
}
}
#line 2766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2768
  p = & mdev->data.rbuf.protocol;
#line 2771
  p_integrity_alg[0] = '\000';
#line 2771
  tmp = 1U;
#line 2771
  while (1) {
#line 2771
    if (tmp >= 64U) {
#line 2771
      break;
    } else {

    }
#line 2771
    p_integrity_alg[tmp] = (char)0;
#line 2771
    tmp = tmp + 1U;
  }
#line 2773
  tmp___0 = __fswab32(p->protocol);
#line 2773
  p_proto = (int )tmp___0;
#line 2774
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2774
  p_after_sb_0p = (int )tmp___1;
#line 2775
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2775
  p_after_sb_1p = (int )tmp___2;
#line 2776
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2776
  p_after_sb_2p = (int )tmp___3;
#line 2777
  tmp___4 = __fswab32(p->two_primaries);
#line 2777
  p_two_primaries = (int )tmp___4;
#line 2778
  tmp___5 = __fswab32(p->conn_flags);
#line 2778
  cf = (int )tmp___5;
#line 2779
  p_want_lose = cf & 1;
#line 2781
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2783
  if ((cf & 2) != 0) {
#line 2784
    set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2786
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2788
    goto disconnect;
  } else {

  }
#line 2791
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2791
  if (tmp___6 != 0) {
#line 2792
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2793
    goto disconnect;
  } else {

  }
#line 2796
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2796
  if (tmp___7 != 0) {
#line 2797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2798
    goto disconnect;
  } else {

  }
#line 2801
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2801
  if (tmp___8 != 0) {
#line 2802
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2803
    goto disconnect;
  } else {

  }
#line 2806
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2807
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2808
    goto disconnect;
  } else {

  }
#line 2811
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2813
    goto disconnect;
  } else {

  }
#line 2816
  if (mdev->agreed_pro_version > 86) {
#line 2817
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2819
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2819
    if ((unsigned int )tmp___9 != data_size) {
#line 2820
      return (0);
    } else {

    }
#line 2822
    p_integrity_alg[63] = 0;
#line 2823
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2823
    if (tmp___10 != 0) {
#line 2824
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2825
      goto disconnect;
    } else {

    }
#line 2827
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2831
  return (1);
  disconnect: 
#line 2834
  val.i = 0U;
#line 2834
  val.ldv_38802.conn = 1U;
#line 2834
  mask.i = 0U;
#line 2834
  mask.ldv_38802.conn = 31U;
#line 2834
  drbd_force_state(mdev, mask, val);
#line 2835
  return (0);
}
}
#line 2843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2848
  if ((int )((signed char )*alg) == 0) {
#line 2849
    return (0);
  } else {

  }
#line 2851
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2852
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2852
  if (tmp___0 != 0L) {
#line 2853
    tmp = PTR_ERR((void const   *)tfm);
#line 2853
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2855
    return (tfm);
  } else {

  }
#line 2857
  tmp___2 = crypto_hash_tfm(tfm);
#line 2857
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2857
  if (tmp___3 == 0) {
#line 2858
    crypto_free_hash(tfm);
#line 2859
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2860
    tmp___1 = ERR_PTR(-22L);
#line 2860
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2862
  return (tfm);
}
}
#line 2865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2867
  ok = 1;
#line 2868
  p = & mdev->data.rbuf.rs_param_95;
#line 2870
  verify_tfm = 0;
#line 2871
  csums_tfm = 0;
#line 2872
  apv = mdev->agreed_pro_version;
#line 2873
  rs_plan_s = 0;
#line 2874
  fifo_size = 0;
#line 2876
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2882
  if (packet_size > exp_max_sz) {
#line 2883
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2885
    return (0);
  } else {

  }
#line 2888
  if (apv <= 88) {
#line 2889
    header_size = 4U;
#line 2890
    data_size = packet_size - header_size;
  } else
#line 2891
  if (apv <= 94) {
#line 2892
    header_size = 132U;
#line 2893
    data_size = packet_size - header_size;
#line 2894
    if (data_size != 0U) {
#line 2894
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2894);
    } else {

    }
  } else {
#line 2896
    header_size = 148U;
#line 2897
    data_size = packet_size - header_size;
#line 2898
    if (data_size != 0U) {
#line 2898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2898);
    } else {

    }
  }
#line 2902
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2904
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2904
  if ((unsigned int )tmp != header_size) {
#line 2905
    return (0);
  } else {

  }
#line 2907
  tmp___0 = __fswab32(p->rate);
#line 2907
  mdev->sync_conf.rate = (int )tmp___0;
#line 2909
  if (apv > 87) {
#line 2910
    if (apv == 88) {
#line 2911
      if (data_size > 64U || data_size == 0U) {
#line 2912
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 2915
        return (0);
      } else {

      }
#line 2918
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2918
      if ((unsigned int )tmp___1 != data_size) {
#line 2919
        return (0);
      } else {

      }
#line 2923
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2923
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2923);
      } else {

      }
#line 2924
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2929
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2929
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2929);
      } else {

      }
#line 2930
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2930
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2930);
      } else {

      }
#line 2931
      p->verify_alg[63] = 0;
#line 2932
      p->csums_alg[63] = 0;
    }
#line 2935
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2935
    if (tmp___3 != 0) {
#line 2936
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2937
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2939
        goto disconnect;
      } else {

      }
#line 2941
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2943
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2943
      if (tmp___2 != 0L) {
#line 2944
        verify_tfm = 0;
#line 2945
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2949
    if (apv > 88) {
#line 2949
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2949
      if (tmp___5 != 0) {
#line 2950
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2951
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2953
          goto disconnect;
        } else {

        }
#line 2955
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2957
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2957
        if (tmp___4 != 0L) {
#line 2958
          csums_tfm = 0;
#line 2959
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2963
    if (apv > 94) {
#line 2964
      tmp___6 = __fswab32(p->rate);
#line 2964
      mdev->sync_conf.rate = (int )tmp___6;
#line 2965
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2965
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2966
      tmp___8 = __fswab32(p->c_delay_target);
#line 2966
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2967
      tmp___9 = __fswab32(p->c_fill_target);
#line 2967
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2968
      tmp___10 = __fswab32(p->c_max_rate);
#line 2968
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2970
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2971
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2972
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2972
        rs_plan_s = (int *)tmp___11;
#line 2973
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2974
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2975
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2980
    spin_lock(& mdev->peer_seq_lock);
#line 2982
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2983
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2984
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2984
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2985
      crypto_free_hash(mdev->verify_tfm);
#line 2986
      mdev->verify_tfm = verify_tfm;
#line 2987
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2989
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2990
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2991
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2991
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2992
      crypto_free_hash(mdev->csums_tfm);
#line 2993
      mdev->csums_tfm = csums_tfm;
#line 2994
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2996
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2997
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2998
      mdev->rs_plan_s.values = rs_plan_s;
#line 2999
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 3000
      mdev->rs_planed = 0;
    } else {

    }
#line 3002
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 3005
  return (ok);
  disconnect: 
#line 3009
  crypto_free_hash(csums_tfm);
#line 3011
  crypto_free_hash(verify_tfm);
#line 3012
  val.i = 0U;
#line 3012
  val.ldv_38802.conn = 1U;
#line 3012
  mask.i = 0U;
#line 3012
  mask.ldv_38802.conn = 31U;
#line 3012
  drbd_force_state(mdev, mask, val);
#line 3013
  return (0);
}
}
#line 3017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3021
  if (a == 0UL || b == 0UL) {
#line 3022
    return;
  } else {

  }
#line 3023
  d = a > b ? a - b : b - a;
#line 3024
  if (a >> 3 < d || b >> 3 < d) {
#line 3025
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3027
  return;
}
}
#line 3029 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 3031
  p = & mdev->data.rbuf.sizes;
#line 3032
  dd = 0;
#line 3034
  ldsc = 0;
#line 3037
  tmp = __fswab64(p->d_size);
#line 3037
  p_size = (sector_t )tmp;
#line 3038
  tmp___0 = __fswab64(p->u_size);
#line 3038
  p_usize = (sector_t )tmp___0;
#line 3040
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 3041
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3042
    val.i = 0U;
#line 3042
    val.ldv_38802.conn = 1U;
#line 3042
    mask.i = 0U;
#line 3042
    mask.ldv_38802.conn = 31U;
#line 3042
    drbd_force_state(mdev, mask, val);
#line 3043
    return (0);
  } else {

  }
#line 3048
  mdev->p_size = p_size;
#line 3050
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3050
  if (tmp___6 != 0) {
#line 3051
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3051
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3053
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3058
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3059
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3059
      __y = p_usize;
#line 3059
      if (__x != 0UL) {
#line 3059
        if (__y != 0UL) {
#line 3059
          _min1 = __x;
#line 3059
          _min2 = __y;
#line 3059
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3059
          tmp___2 = __x;
        }
#line 3059
        tmp___3 = tmp___2;
      } else {
#line 3059
        tmp___3 = __y;
      }
#line 3059
      p_usize = tmp___3;
    } else {

    }
#line 3062
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3064
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3065
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3066
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3072
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3072
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3072
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_38802.disk > 4) && (int )mdev->state.ldv_38802.conn <= 9) {
#line 3076
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3077
      val___0.i = 0U;
#line 3077
      val___0.ldv_38802.conn = 1U;
#line 3077
      mask___0.i = 0U;
#line 3077
      mask___0.ldv_38802.conn = 31U;
#line 3077
      drbd_force_state(mdev, mask___0, val___0);
#line 3078
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3079
      put_ldev(mdev);
#line 3080
      return (0);
    } else {

    }
#line 3082
    put_ldev(mdev);
  } else {

  }
#line 3085
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3085
  ddsf = (enum dds_flags )tmp___7;
#line 3086
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3086
  if (tmp___8 != 0) {
#line 3087
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3088
    put_ldev(mdev);
#line 3089
    if ((int )dd == -1) {
#line 3090
      return (0);
    } else {

    }
#line 3091
    drbd_md_sync(mdev);
  } else {
#line 3094
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3097
  tmp___9 = __fswab32(p->max_bio_size);
#line 3097
  mdev->peer_max_bio_size = tmp___9;
#line 3098
  drbd_reconsider_max_bio_size(mdev);
#line 3100
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3100
  if (tmp___11 != 0) {
#line 3101
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3101
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3102
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3103
      ldsc = 1;
    } else {

    }
#line 3106
    put_ldev(mdev);
  } else {

  }
#line 3109
  if ((int )mdev->state.ldv_38802.conn > 9) {
#line 3110
    tmp___12 = __fswab64(p->c_size);
#line 3110
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3110
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3114
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3116
    tmp___14 = test_and_clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 3116
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3118
      if ((int )mdev->state.ldv_38802.pdsk > 3 && (int )mdev->state.ldv_38802.disk > 3) {
#line 3120
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3121
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3123
          resync_after_online_grow(mdev);
        }
      } else {
#line 3125
        set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3129
  return (1);
}
}
#line 3132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3134
  p = & mdev->data.rbuf.uuids;
#line 3136
  updated_uuids = 0;
#line 3138
  tmp = kmalloc(48UL, 16U);
#line 3138
  p_uuid = (u64 *)tmp;
#line 3140
  i = 0;
#line 3140
  goto ldv_51234;
  ldv_51233: 
#line 3141
  tmp___0 = __fswab64(p->uuid[i]);
#line 3141
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3140
  i = i + 1;
  ldv_51234: ;
#line 3140
  if (i <= 5) {
#line 3141
    goto ldv_51233;
  } else {

  }
#line 3143
  kfree((void const   *)mdev->p_uuid);
#line 3144
  mdev->p_uuid = p_uuid;
#line 3146
  if ((((int )mdev->state.ldv_38802.conn <= 9 && (int )mdev->state.ldv_38802.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3152
    val.i = 0U;
#line 3152
    val.ldv_38802.conn = 1U;
#line 3152
    mask.i = 0U;
#line 3152
    mask.ldv_38802.conn = 31U;
#line 3152
    drbd_force_state(mdev, mask, val);
#line 3153
    return (0);
  } else {

  }
#line 3156
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3156
  if (tmp___1 != 0) {
#line 3157
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3162
    if (skip_initial_sync != 0) {
#line 3163
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3164
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3167
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3168
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3169
      __ns.i = mdev->state.i;
#line 3169
      __ns.ldv_38802.disk = 8U;
#line 3169
      __ns.ldv_38802.pdsk = 8U;
#line 3169
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3171
      drbd_md_sync(mdev);
#line 3172
      updated_uuids = 1;
    } else {

    }
#line 3174
    put_ldev(mdev);
  } else
#line 3175
  if ((int )mdev->state.ldv_38802.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3179
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3186
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3186
  if (tmp___2 == 0) {
#line 3186
    goto ldv_51243;
  } else {

  }
#line 3186
  tmp___3 = get_current();
#line 3186
  __wait.flags = 0U;
#line 3186
  __wait.private = (void *)tmp___3;
#line 3186
  __wait.func = & autoremove_wake_function;
#line 3186
  __wait.task_list.next = & __wait.task_list;
#line 3186
  __wait.task_list.prev = & __wait.task_list;
  ldv_51246: 
#line 3186
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3186
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3186
  if (tmp___4 == 0) {
#line 3186
    goto ldv_51245;
  } else {

  }
#line 3186
  schedule();
#line 3186
  goto ldv_51246;
  ldv_51245: 
#line 3186
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51243: ;
#line 3187
  if ((int )mdev->state.ldv_38802.conn > 9 && (int )mdev->state.ldv_38802.disk <= 3) {
#line 3188
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3188
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3190
  if (updated_uuids != 0) {
#line 3191
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3193
  return (1);
}
}
#line 3200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3204
  c_tab[0] = 0;
#line 3204
  c_tab[1] = C_TEAR_DOWN;
#line 3204
  c_tab[2] = 0;
#line 3204
  c_tab[3] = 0;
#line 3204
  c_tab[4] = 0;
#line 3204
  c_tab[5] = 0;
#line 3204
  c_tab[6] = 0;
#line 3204
  c_tab[7] = 0;
#line 3204
  c_tab[8] = 0;
#line 3204
  c_tab[9] = 0;
#line 3204
  c_tab[10] = C_CONNECTED;
#line 3204
  c_tab[11] = C_STARTING_SYNC_T;
#line 3204
  c_tab[12] = C_STARTING_SYNC_S;
#line 3204
  c_tab[13] = 0;
#line 3204
  c_tab[14] = 0;
#line 3204
  c_tab[15] = 0;
#line 3204
  c_tab[16] = 0;
#line 3204
  c_tab[17] = 0;
#line 3204
  c_tab[18] = C_VERIFY_T;
#line 3204
  c_tab[19] = 0;
#line 3204
  c_tab[20] = 0;
#line 3204
  c_tab[21] = 0;
#line 3204
  c_tab[22] = 0;
#line 3204
  c_tab[23] = 0;
#line 3204
  c_tab[24] = 0;
#line 3204
  c_tab[25] = 0;
#line 3204
  c_tab[26] = 0;
#line 3204
  c_tab[27] = 0;
#line 3204
  c_tab[28] = 0;
#line 3204
  c_tab[29] = 0;
#line 3204
  c_tab[30] = 0;
#line 3204
  c_tab[31] = C_MASK;
#line 3214
  ms.i = ps.i;
#line 3216
  ms.ldv_38802.conn = (unsigned char )c_tab[(int )ps.ldv_38802.conn];
#line 3217
  ms.ldv_38802.peer = ps.ldv_38802.role;
#line 3218
  ms.ldv_38802.role = ps.ldv_38802.peer;
#line 3219
  ms.ldv_38802.pdsk = ps.ldv_38802.disk;
#line 3220
  ms.ldv_38802.disk = ps.ldv_38802.pdsk;
#line 3221
  ms.ldv_38802.peer_isp = (unsigned char )((int )ps.ldv_38802.aftr_isp | (int )ps.ldv_38802.user_isp);
#line 3223
  return (ms);
}
}
#line 3226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3228
  p = & mdev->data.rbuf.req_state;
#line 3232
  tmp = __fswab32(p->mask);
#line 3232
  mask.i = tmp;
#line 3233
  tmp___0 = __fswab32(p->val);
#line 3233
  val.i = tmp___0;
#line 3235
  tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 3235
  if (tmp___1 != 0) {
#line 3235
    tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3235
    if (tmp___2 != 0) {
#line 3237
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3238
      return (1);
    } else {

    }
  } else {

  }
#line 3241
  mask = convert_state(mask);
#line 3242
  val = convert_state(val);
#line 3244
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3246
  drbd_send_sr_reply(mdev, rv);
#line 3247
  drbd_md_sync(mdev);
#line 3249
  return (1);
}
}
#line 3252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3254
  p = & mdev->data.rbuf.state;
#line 3260
  tmp = __fswab32(p->state);
#line 3260
  peer_state.i = tmp;
#line 3262
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_38802.disk;
#line 3263
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3264
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3265
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3265
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3268
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3270
  ns = mdev->state;
#line 3270
  os = ns;
#line 3271
  spin_unlock_irq(& mdev->req_lock);
#line 3276
  if ((int )os.ldv_38802.conn <= 7) {
#line 3277
    return (0);
  } else {

  }
#line 3285
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_38802.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3294
    if ((int )peer_state.ldv_38802.conn > 10 && (int )peer_state.ldv_38802.conn <= 15) {
#line 3296
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3301
    if ((int )os.ldv_38802.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3303
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3303
      if (tmp___1 <= mdev->rs_failed) {
#line 3304
        drbd_resync_finished(mdev);
      } else {

      }
#line 3305
      return (1);
    } else {

    }
  } else {

  }
#line 3314
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_38802.conn > 16) {
#line 3316
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3318
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3319
    ns.ldv_38802.conn = 10U;
  } else {

  }
#line 3321
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3322
    ns.ldv_38802.conn = 23U;
  } else {

  }
#line 3324
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_38802.disk > 2) {
#line 3324
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3324
    if (tmp___5 != 0) {
#line 3329
      cr = (int )os.ldv_38802.conn <= 9;
#line 3332
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3337
      tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 3337
      cr = tmp___2 | cr;
#line 3340
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_38802.conn > 10 && (int )peer_state.ldv_38802.conn <= 14)) | cr;
#line 3344
      if (cr != 0) {
#line 3345
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_38802.role,
                                      real_peer_disk);
#line 3345
        ns.ldv_38802.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3347
      put_ldev(mdev);
#line 3348
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3349
        ns.ldv_38802.conn = 10U;
#line 3350
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3351
          val.i = 0U;
#line 3351
          val.ldv_38802.disk = 2U;
#line 3351
          mask.i = 0U;
#line 3351
          mask.ldv_38802.disk = 15U;
#line 3351
          drbd_force_state(mdev, mask, val);
        } else
#line 3352
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3353
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3354
          peer_state.ldv_38802.disk = 0U;
#line 3355
          real_peer_disk = D_DISKLESS;
        } else {
#line 3357
          tmp___4 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3357
          if (tmp___4 != 0) {
#line 3358
            return (0);
          } else {

          }
#line 3359
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3359
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3359);
          } else {

          }
#line 3360
          val___0.i = 0U;
#line 3360
          val___0.ldv_38802.conn = 1U;
#line 3360
          mask___0.i = 0U;
#line 3360
          mask___0.ldv_38802.conn = 31U;
#line 3360
          drbd_force_state(mdev, mask___0, val___0);
#line 3361
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3366
  spin_lock_irq(& mdev->req_lock);
#line 3367
  if (mdev->state.i != os.i) {
#line 3368
    goto retry;
  } else {

  }
#line 3369
  clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 3370
  ns.ldv_38802.peer = peer_state.ldv_38802.role;
#line 3371
  ns.ldv_38802.pdsk = (unsigned char )real_peer_disk;
#line 3372
  ns.ldv_38802.peer_isp = (unsigned char )((int )peer_state.ldv_38802.aftr_isp | (int )peer_state.ldv_38802.user_isp);
#line 3373
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3374
    ns.ldv_38802.disk = mdev->new_state_tmp.ldv_38802.disk;
  } else {

  }
#line 3375
  cs_flags = (enum chg_state_flags )(((int )os.ldv_38802.conn > 9 || (int )ns.ldv_38802.conn <= 9) + 2);
#line 3376
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3376
    tmp___6 = is_susp(ns);
#line 3376
    if (tmp___6 != 0) {
#line 3376
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3376
        if ((int )os.ldv_38802.conn <= 9) {
#line 3376
          tmp___7 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 3376
          if (tmp___7 != 0) {
#line 3380
            spin_unlock_irq(& mdev->req_lock);
#line 3381
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3382
            tl_clear(mdev);
#line 3383
            drbd_uuid_new_current(mdev);
#line 3384
            clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 3385
            val___1.i = 0U;
#line 3385
            val___1.ldv_38802.conn = 6U;
#line 3385
            val___1.ldv_38802.susp = 0U;
#line 3385
            mask___1.i = 0U;
#line 3385
            mask___1.ldv_38802.conn = 31U;
#line 3385
            mask___1.ldv_38802.susp = 1U;
#line 3385
            drbd_force_state(mdev, mask___1, val___1);
#line 3386
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3388
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3388
  rv = (int )tmp___8;
#line 3389
  ns = mdev->state;
#line 3390
  spin_unlock_irq(& mdev->req_lock);
#line 3392
  if (rv <= 0) {
#line 3393
    val___2.i = 0U;
#line 3393
    val___2.ldv_38802.conn = 1U;
#line 3393
    mask___2.i = 0U;
#line 3393
    mask___2.ldv_38802.conn = 31U;
#line 3393
    drbd_force_state(mdev, mask___2, val___2);
#line 3394
    return (0);
  } else {

  }
#line 3397
  if ((int )os.ldv_38802.conn > 9) {
#line 3398
    if (((int )ns.ldv_38802.conn > 10 && (int )peer_state.ldv_38802.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3403
      drbd_send_uuids(mdev);
#line 3404
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3408
  (mdev->net_conf)->want_lose = 0U;
#line 3410
  drbd_md_sync(mdev);
#line 3412
  return (1);
}
}
#line 3415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3417
  p = & mdev->data.rbuf.rs_uuid;
#line 3419
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38802.conn <= 9) || (int )mdev->state.ldv_38802.disk <= 2) {
#line 3419
    goto ldv_51297;
  } else {

  }
#line 3419
  tmp = get_current();
#line 3419
  __wait.flags = 0U;
#line 3419
  __wait.private = (void *)tmp;
#line 3419
  __wait.func = & autoremove_wake_function;
#line 3419
  __wait.task_list.next = & __wait.task_list;
#line 3419
  __wait.task_list.prev = & __wait.task_list;
  ldv_51300: 
#line 3419
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3419
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38802.conn <= 9) || (int )mdev->state.ldv_38802.disk <= 2) {
#line 3419
    goto ldv_51299;
  } else {

  }
#line 3419
  schedule();
#line 3419
  goto ldv_51300;
  ldv_51299: 
#line 3419
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51297: 
#line 3429
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3429
  if (tmp___1 != 0) {
#line 3430
    tmp___0 = __fswab64(p->uuid);
#line 3430
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3431
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3433
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3434
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3436
    put_ldev(mdev);
  } else {
#line 3438
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3440
  return (1);
}
}
#line 3450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3453
  __min1 = 511UL;
#line 3453
  __min2 = c->bm_words - c->word_offset;
#line 3453
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3454
  want = num_words * 8U;
#line 3457
  if (want != data_size) {
#line 3458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3459
    return (-5);
  } else {

  }
#line 3461
  if (want == 0U) {
#line 3462
    return (0);
  } else {

  }
#line 3463
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3464
  if ((unsigned int )err != want) {
#line 3465
    if (err >= 0) {
#line 3466
      err = -5;
    } else {

    }
#line 3467
    return (err);
  } else {

  }
#line 3470
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3472
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3473
  c->bit_offset = c->word_offset * 64UL;
#line 3474
  if (c->bit_offset > c->bm_bits) {
#line 3475
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3477
  return (1);
}
}
#line 3487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3495
  s = c->bit_offset;
#line 3497
  tmp___0 = __fswab16((int )p->head.length);
#line 3497
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3498
  tmp___1 = DCBP_get_start(p);
#line 3498
  toggle = tmp___1;
#line 3502
  tmp___2 = DCBP_get_pad_bits(p);
#line 3502
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3504
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3505
  if (bits < 0) {
#line 3506
    return (-5);
  } else {

  }
#line 3508
  have = bits;
#line 3508
  goto ldv_51330;
  ldv_51329: 
#line 3509
  bits = vli_decode_bits(& rl, look_ahead);
#line 3510
  if (bits <= 0) {
#line 3511
    return (-5);
  } else {

  }
#line 3513
  if (toggle != 0) {
#line 3514
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3515
    if (c->bm_bits <= e) {
#line 3516
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3517
      return (-5);
    } else {

    }
#line 3519
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3522
  if (have < bits) {
#line 3523
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3527
    return (-5);
  } else {

  }
#line 3529
  look_ahead = look_ahead >> bits;
#line 3530
  have = have - bits;
#line 3532
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3533
  if (bits < 0) {
#line 3534
    return (-5);
  } else {

  }
#line 3535
  look_ahead = (tmp << have) | look_ahead;
#line 3536
  have = have + bits;
#line 3508
  s = (unsigned long )((unsigned long long )s + rl);
#line 3508
  toggle = toggle == 0;
  ldv_51330: ;
#line 3508
  if (have > 0) {
#line 3509
    goto ldv_51329;
  } else {

  }
#line 3539
  c->bit_offset = s;
#line 3540
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3542
  return (c->bm_bits != s);
}
}
#line 3552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3556
  tmp___0 = DCBP_get_code(p);
#line 3556
  if ((unsigned int )tmp___0 == 2U) {
#line 3557
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3557
    return (tmp);
  } else {

  }
#line 3563
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3564
  val.i = 0U;
#line 3564
  val.ldv_38802.conn = 6U;
#line 3564
  mask.i = 0U;
#line 3564
  mask.ldv_38802.conn = 31U;
#line 3564
  drbd_force_state(mdev, mask, val);
#line 3565
  return (-5);
}
}
#line 3568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3572
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3575
  total = c->bytes[0] + c->bytes[1];
#line 3579
  if (total == 0U) {
#line 3580
    return;
  } else {

  }
#line 3583
  if (total >= plain) {
#line 3584
    return;
  } else {

  }
#line 3587
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3590
  if (r > 1000U) {
#line 3591
    r = 1000U;
  } else {

  }
#line 3593
  r = 1000U - r;
#line 3594
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3595
  return;
}
}
#line 3610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3615
  ok = 0;
#line 3616
  h = & mdev->data.rbuf.header.h80;
#line 3618
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 3624
  tmp = __get_free_pages(16U, 0U);
#line 3624
  buffer = (void *)tmp;
#line 3625
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3626
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3627
    goto out;
  } else {

  }
#line 3630
  tmp___0 = drbd_bm_bits(mdev);
#line 3630
  tmp___1 = drbd_bm_words(mdev);
#line 3630
  __constr_expr_0.bm_bits = tmp___0;
#line 3630
  __constr_expr_0.bm_words = tmp___1;
#line 3630
  __constr_expr_0.bit_offset = 0UL;
#line 3630
  __constr_expr_0.word_offset = 0UL;
#line 3630
  __constr_expr_0.packets[0] = 0U;
#line 3630
  __constr_expr_0.packets[1] = 0U;
#line 3630
  __constr_expr_0.bytes[0] = 0U;
#line 3630
  __constr_expr_0.bytes[1] = 0U;
#line 3630
  c = __constr_expr_0;
  ldv_51367: ;
#line 3636
  if ((unsigned int )cmd == 4U) {
#line 3637
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3638
  if ((unsigned int )cmd == 36U) {
#line 3643
    if (data_size > 4088U) {
#line 3644
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3645
      goto out;
    } else {

    }
#line 3648
    p = (struct p_compressed_bm *)buffer;
#line 3649
    __len = 8UL;
#line 3649
    if (__len > 63UL) {
#line 3649
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3649
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3650
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3650
    if ((unsigned int )tmp___2 != data_size) {
#line 3651
      goto out;
    } else {

    }
#line 3652
    if (data_size <= 1U) {
#line 3653
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3654
      goto out;
    } else {

    }
#line 3656
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3658
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3659
    goto out;
  }
#line 3662
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3663
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3665
  if (err <= 0) {
#line 3666
    if (err < 0) {
#line 3667
      goto out;
    } else {

    }
#line 3668
    goto ldv_51366;
  } else {

  }
#line 3670
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3670
  if (tmp___3 == 0) {
#line 3671
    goto out;
  } else {

  }
#line 3672
  goto ldv_51367;
  ldv_51366: 
#line 3674
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3676
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3679
    tmp___4 = drbd_send_bitmap(mdev);
#line 3679
    ok = tmp___4 == 0;
#line 3680
    if (ok == 0) {
#line 3681
      goto out;
    } else {

    }
#line 3683
    val.i = 0U;
#line 3683
    val.ldv_38802.conn = 15U;
#line 3683
    mask.i = 0U;
#line 3683
    mask.ldv_38802.conn = 31U;
#line 3683
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3684
    if ((int )rv != 1) {
#line 3684
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3684);
    } else {

    }
  } else
#line 3685
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3688
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38802.conn);
#line 3688
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3692
  ok = 1;
  out: 
#line 3694
  drbd_bm_unlock(mdev);
#line 3695
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3696
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3697
  free_pages((unsigned long )buffer, 0U);
#line 3698
  return (ok);
}
}
#line 3701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3707
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3710
  size = (int )data_size;
#line 3711
  goto ldv_51390;
  ldv_51389: 
#line 3712
  __min1 = size;
#line 3712
  __min2 = 128;
#line 3712
  want = __min1 < __min2 ? __min1 : __min2;
#line 3713
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3714
  _b = r <= 0;
#line 3714
  if (_b != 0) {
#line 3714
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3714);
  } else {

  }
#line 3714
  if (_b != 0) {
#line 3714
    goto ldv_51388;
  } else {

  }
#line 3715
  size = size - r;
  ldv_51390: ;
#line 3711
  if (size > 0) {
#line 3712
    goto ldv_51389;
  } else {

  }
  ldv_51388: ;
#line 3717
  return (size == 0);
}
}
#line 3720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3724
  drbd_tcp_quickack(mdev->data.socket);
#line 3726
  return (1);
}
}
#line 3729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3731
  p = & mdev->data.rbuf.block_desc;
#line 3733
  switch ((int )mdev->state.ldv_38802.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3737
  goto ldv_51405;
  default: 
#line 3739
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38802.conn);
#line 3739
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_51405: 
#line 3743
  tmp___0 = __fswab32(p->blksize);
#line 3743
  tmp___1 = __fswab64(p->sector);
#line 3743
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3743U);
#line 3745
  return (1);
}
}
#line 3756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3756
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3793
  header = & mdev->data.rbuf.header;
#line 3799
  goto ldv_51426;
  ldv_51425: 
#line 3800
  drbd_thread_current_set_cpu(mdev);
#line 3801
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3801
  if (tmp == 0) {
#line 3802
    goto err_out;
  } else {

  }
#line 3804
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3804
  if (tmp___0 != 0L) {
#line 3805
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3806
    goto err_out;
  } else {
#line 3804
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3804
    if (tmp___1 != 0L) {
#line 3805
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3806
      goto err_out;
    } else {

    }
  }
#line 3809
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3810
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3811
    tmp___2 = cmdname(cmd);
#line 3811
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3812
    goto err_out;
  } else {

  }
#line 3815
  if (shs != 0UL) {
#line 3816
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3817
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3817
    if (tmp___5 != 0L) {
#line 3818
      tmp___3 = get_current();
#line 3818
      tmp___4 = signal_pending(tmp___3);
#line 3818
      if (tmp___4 == 0) {
#line 3819
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3820
      goto err_out;
    } else {

    }
  } else {

  }
#line 3824
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3826
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3826
  if (tmp___7 != 0L) {
#line 3827
    tmp___6 = cmdname(cmd);
#line 3827
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3829
    goto err_out;
  } else {

  }
  ldv_51426: 
#line 3799
  tmp___8 = get_t_state(& mdev->receiver);
#line 3799
  if ((unsigned int )tmp___8 == 1U) {
#line 3800
    goto ldv_51425;
  } else {

  }

#line 3833
  if (0) {
    err_out: 
#line 3835
    val.i = 0U;
#line 3835
    val.ldv_38802.conn = 6U;
#line 3835
    mask.i = 0U;
#line 3835
    mask.ldv_38802.conn = 31U;
#line 3835
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3839
  drbd_md_sync(mdev);
#line 3840
  return;
}
}
#line 3842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3846
  barr.w.cb = & w_prev_work_done;
#line 3847
  init_completion(& barr.done);
#line 3848
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3849
  wait_for_completion(& barr.done);
#line 3850
  return;
}
}
#line 3852 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;
  struct drbd_request *req ;
  struct hlist_node *pos ;
  struct hlist_node *n ;
  struct hlist_node  const  *__mptr ;

  {
#line 3856
  spin_lock_irq(& mdev->req_lock);
#line 3858
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3859
    spin_unlock_irq(& mdev->req_lock);
#line 3860
    return;
  } else {

  }
#line 3863
  h = mdev->ee_hash;
#line 3863
  goto ldv_51441;
  ldv_51440: ;
#line 3864
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3865
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3863
  h = h + 1;
  ldv_51441: ;
#line 3863
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3864
    goto ldv_51440;
  } else {

  }
#line 3867
  kfree((void const   *)mdev->ee_hash);
#line 3868
  mdev->ee_hash = 0;
#line 3869
  mdev->ee_hash_s = 0U;
#line 3874
  h = mdev->tl_hash;
#line 3874
  goto ldv_51454;
  ldv_51453: 
#line 3877
  pos = h->first;
#line 3877
  goto ldv_51451;
  ldv_51450: 
#line 3878
  hlist_del_init(& req->collision);
#line 3879
  hlist_add_fake(& req->collision);
#line 3877
  pos = n;
  ldv_51451: ;
#line 3877
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3877
    n = pos->next;
#line 3877
    if (1 != 0) {
#line 3877
      __mptr = (struct hlist_node  const  *)pos;
#line 3877
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3877
      if (1 != 0) {
#line 3878
        goto ldv_51450;
      } else {
#line 3880
        goto ldv_51452;
      }
    } else {
#line 3880
      goto ldv_51452;
    }
  } else {

  }
  ldv_51452: 
#line 3874
  h = h + 1;
  ldv_51454: ;
#line 3874
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3875
    goto ldv_51453;
  } else {

  }
#line 3883
  kfree((void const   *)mdev->tl_hash);
#line 3884
  mdev->tl_hash = 0;
#line 3885
  mdev->tl_hash_s = 0U;
#line 3886
  spin_unlock_irq(& mdev->req_lock);
#line 3887
  return;
}
}
#line 3889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3893
  rv = 0;
#line 3896
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3897
    return;
  } else {

  }
#line 3904
  val.i = 0U;
#line 3904
  val.ldv_38802.conn = 5U;
#line 3904
  mask.i = 0U;
#line 3904
  mask.ldv_38802.conn = 31U;
#line 3904
  drbd_force_state(mdev, mask, val);
#line 3907
  drbd_thread_stop(& mdev->asender);
#line 3908
  drbd_free_sock(mdev);
#line 3911
  spin_lock_irq(& mdev->req_lock);
#line 3912
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3913
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3914
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3915
  spin_unlock_irq(& mdev->req_lock);
#line 3927
  drbd_rs_cancel_all(mdev);
#line 3928
  mdev->rs_total = 0UL;
#line 3929
  mdev->rs_failed = 0UL;
#line 3930
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3931
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3934
  del_timer_sync(& mdev->resync_timer);
#line 3935
  resync_timer_fn((unsigned long )mdev);
#line 3940
  drbd_flush_workqueue(mdev);
#line 3944
  drbd_process_done_ee(mdev);
#line 3946
  kfree((void const   *)mdev->p_uuid);
#line 3947
  mdev->p_uuid = 0;
#line 3949
  tmp = is_susp(mdev->state);
#line 3949
  if (tmp == 0) {
#line 3950
    tl_clear(mdev);
  } else {

  }
#line 3952
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3954
  drbd_md_sync(mdev);
#line 3956
  fp = FP_DONT_CARE;
#line 3957
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3957
  if (tmp___0 != 0) {
#line 3958
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3959
    put_ldev(mdev);
  } else {

  }
#line 3962
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_38802.pdsk > 5) {
#line 3963
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3965
  spin_lock_irq(& mdev->req_lock);
#line 3966
  os = mdev->state;
#line 3967
  if ((int )os.ldv_38802.conn > 1) {
#line 3969
    ns = os;
#line 3970
    ns.ldv_38802.conn = 2U;
#line 3971
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3971
    rv = (int )tmp___1;
  } else {

  }
#line 3973
  spin_unlock_irq(& mdev->req_lock);
#line 3975
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3976
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3976
    if (tmp___2 == 0) {
#line 3976
      goto ldv_51468;
    } else {

    }
#line 3976
    tmp___3 = get_current();
#line 3976
    __wait.flags = 0U;
#line 3976
    __wait.private = (void *)tmp___3;
#line 3976
    __wait.func = & autoremove_wake_function;
#line 3976
    __wait.task_list.next = & __wait.task_list;
#line 3976
    __wait.task_list.prev = & __wait.task_list;
    ldv_51471: 
#line 3976
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3976
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3976
    if (tmp___4 == 0) {
#line 3976
      goto ldv_51470;
    } else {

    }
#line 3976
    schedule();
#line 3976
    goto ldv_51471;
    ldv_51470: 
#line 3976
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_51468: 
#line 3978
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3979
    mdev->cram_hmac_tfm = 0;
#line 3981
    kfree((void const   *)mdev->net_conf);
#line 3982
    mdev->net_conf = 0;
#line 3983
    val___0.i = 0U;
#line 3983
    val___0.ldv_38802.conn = 0U;
#line 3983
    mask___0.i = 0U;
#line 3983
    mask___0.ldv_38802.conn = 31U;
#line 3983
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3988
  tmp___5 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3988
  if (tmp___5 == 0) {
#line 3988
    goto ldv_51476;
  } else {

  }
#line 3988
  tmp___6 = get_current();
#line 3988
  __wait___0.flags = 0U;
#line 3988
  __wait___0.private = (void *)tmp___6;
#line 3988
  __wait___0.func = & autoremove_wake_function;
#line 3988
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3988
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51479: 
#line 3988
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3988
  tmp___7 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3988
  if (tmp___7 == 0) {
#line 3988
    goto ldv_51478;
  } else {

  }
#line 3988
  schedule();
#line 3988
  goto ldv_51479;
  ldv_51478: 
#line 3988
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_51476: 
#line 3997
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3997
  i = (unsigned int )tmp___8;
#line 3998
  if (i != 0U) {
#line 3999
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 4000
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 4000
  i = (unsigned int )tmp___9;
#line 4001
  if (i != 0U) {
#line 4002
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 4003
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 4003
  i = (unsigned int )tmp___10;
#line 4004
  if (i != 0U) {
#line 4005
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 4007
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 4007
  if (tmp___11 == 0) {
#line 4007
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4007);
  } else {

  }
#line 4008
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 4008
  if (tmp___12 == 0) {
#line 4008
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4008);
  } else {

  }
#line 4009
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 4009
  if (tmp___13 == 0) {
#line 4009
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4009);
  } else {

  }
#line 4010
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4010
  if (tmp___14 == 0) {
#line 4010
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4010);
  } else {

  }
#line 4013
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 4014
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 4014
  if (tmp___15 == 0) {
#line 4014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4014);
  } else {

  }
#line 4015
  return;
}
}
#line 4026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 4029
  p = & mdev->data.sbuf.handshake;
#line 4032
  tmp = ldv_mutex_lock_interruptible_75(& mdev->data.mutex);
#line 4032
  if (tmp != 0) {
#line 4033
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4034
    return (0);
  } else {

  }
#line 4037
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4038
    ldv_mutex_unlock_76(& mdev->data.mutex);
#line 4039
    return (0);
  } else {

  }
#line 4042
  memset((void *)p, 0, 80UL);
#line 4043
  p->protocol_min = 1442840576U;
#line 4044
  p->protocol_max = 1610612736U;
#line 4045
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4047
  ldv_mutex_unlock_77(& mdev->data.mutex);
#line 4048
  return (ok);
}
}
#line 4058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4061
  p = & mdev->data.rbuf.handshake;
#line 4062
  expect = 72;
#line 4067
  rv = drbd_send_handshake(mdev);
#line 4068
  if (rv == 0) {
#line 4069
    return (0);
  } else {

  }
#line 4071
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4072
  if (rv == 0) {
#line 4073
    return (0);
  } else {

  }
#line 4075
  if ((unsigned int )cmd != 65534U) {
#line 4076
    tmp = cmdname(cmd);
#line 4076
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4078
    return (-1);
  } else {

  }
#line 4081
  if ((unsigned int )expect != length) {
#line 4082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4084
    return (-1);
  } else {

  }
#line 4087
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4089
  if (rv != expect) {
#line 4090
    tmp___0 = get_current();
#line 4090
    tmp___1 = signal_pending(tmp___0);
#line 4090
    if (tmp___1 == 0) {
#line 4091
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4092
    return (0);
  } else {

  }
#line 4095
  tmp___2 = __fswab32(p->protocol_min);
#line 4095
  p->protocol_min = tmp___2;
#line 4096
  tmp___3 = __fswab32(p->protocol_max);
#line 4096
  p->protocol_max = tmp___3;
#line 4097
  if (p->protocol_max == 0U) {
#line 4098
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4100
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 4102
    goto incompat;
  } else {

  }
#line 4104
  __min1 = 96;
#line 4104
  __min2 = (int )p->protocol_max;
#line 4104
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4106
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4109
  return (1);
  incompat: 
#line 4112
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4116
  return (-1);
}
}
#line 4135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4139
  response = 0;
#line 4140
  right_response = 0;
#line 4141
  peers_ch = 0;
#line 4142
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4142
  key_len = (unsigned int )tmp;
#line 4149
  desc.tfm = mdev->cram_hmac_tfm;
#line 4150
  desc.flags = 0U;
#line 4152
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4154
  if (rv != 0) {
#line 4155
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4156
    rv = -1;
#line 4157
    goto fail;
  } else {

  }
#line 4160
  get_random_bytes((void *)(& my_challenge), 64);
#line 4162
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4163
  if (rv == 0) {
#line 4164
    goto fail;
  } else {

  }
#line 4166
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4167
  if (rv == 0) {
#line 4168
    goto fail;
  } else {

  }
#line 4170
  if ((unsigned int )cmd != 16U) {
#line 4171
    tmp___0 = cmdname(cmd);
#line 4171
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4173
    rv = 0;
#line 4174
    goto fail;
  } else {

  }
#line 4177
  if (length > 128U) {
#line 4178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4179
    rv = -1;
#line 4180
    goto fail;
  } else {

  }
#line 4183
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4183
  peers_ch = (char *)tmp___1;
#line 4184
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4185
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4186
    rv = -1;
#line 4187
    goto fail;
  } else {

  }
#line 4190
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4192
  if ((unsigned int )rv != length) {
#line 4193
    tmp___2 = get_current();
#line 4193
    tmp___3 = signal_pending(tmp___2);
#line 4193
    if (tmp___3 == 0) {
#line 4194
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4195
    rv = 0;
#line 4196
    goto fail;
  } else {

  }
#line 4199
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4200
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4200
  response = (char *)tmp___4;
#line 4201
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4202
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4203
    rv = -1;
#line 4204
    goto fail;
  } else {

  }
#line 4207
  sg_init_table(& sg, 1U);
#line 4208
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4210
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4211
  if (rv != 0) {
#line 4212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4213
    rv = -1;
#line 4214
    goto fail;
  } else {

  }
#line 4217
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4218
  if (rv == 0) {
#line 4219
    goto fail;
  } else {

  }
#line 4221
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4222
  if (rv == 0) {
#line 4223
    goto fail;
  } else {

  }
#line 4225
  if ((unsigned int )cmd != 17U) {
#line 4226
    tmp___5 = cmdname(cmd);
#line 4226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4228
    rv = 0;
#line 4229
    goto fail;
  } else {

  }
#line 4232
  if (length != resp_size) {
#line 4233
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4234
    rv = 0;
#line 4235
    goto fail;
  } else {

  }
#line 4238
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4240
  if ((unsigned int )rv != resp_size) {
#line 4241
    tmp___6 = get_current();
#line 4241
    tmp___7 = signal_pending(tmp___6);
#line 4241
    if (tmp___7 == 0) {
#line 4242
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4243
    rv = 0;
#line 4244
    goto fail;
  } else {

  }
#line 4247
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4247
  right_response = (char *)tmp___8;
#line 4248
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4249
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4250
    rv = -1;
#line 4251
    goto fail;
  } else {

  }
#line 4254
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4256
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4257
  if (rv != 0) {
#line 4258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4259
    rv = -1;
#line 4260
    goto fail;
  } else {

  }
#line 4263
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4263
  rv = tmp___9 == 0;
#line 4265
  if (rv != 0) {
#line 4266
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4269
    rv = -1;
  }
  fail: 
#line 4272
  kfree((void const   *)peers_ch);
#line 4273
  kfree((void const   *)response);
#line 4274
  kfree((void const   *)right_response);
#line 4276
  return (rv);
}
}
#line 4280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4282
  mdev = thi->mdev;
#line 4283
  tmp = mdev_to_minor(mdev);
#line 4283
  minor = tmp;
#line 4286
  tmp___0 = get_current();
#line 4286
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4288
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_51522: 
#line 4291
  h = drbd_connect(mdev);
#line 4292
  if (h == 0) {
#line 4293
    drbd_disconnect(mdev);
#line 4294
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4296
  if (h == -1) {
#line 4297
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4298
    val.i = 0U;
#line 4298
    val.ldv_38802.conn = 1U;
#line 4298
    mask.i = 0U;
#line 4298
    mask.ldv_38802.conn = 31U;
#line 4298
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4300
  if (h == 0) {
#line 4301
    goto ldv_51522;
  } else {

  }

#line 4302
  if (h > 0) {
#line 4303
    tmp___1 = get_net_conf(mdev);
#line 4303
    if (tmp___1 != 0) {
#line 4304
      drbdd(mdev);
#line 4305
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4309
  drbd_disconnect(mdev);
#line 4311
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4312
  return (0);
}
}
#line 4317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4319
  p = (struct p_req_state_reply *)h;
#line 4321
  tmp = __fswab32(p->retcode);
#line 4321
  retcode = (int )tmp;
#line 4323
  if (retcode > 0) {
#line 4324
    set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4326
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
#line 4327
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4330
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4332
  return (1);
}
}
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4337
  tmp = drbd_send_ping_ack(mdev);
#line 4337
  return (tmp);
}
}
#line 4341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4344
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4345
  tmp = test_and_set_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 4345
  if (tmp == 0) {
#line 4346
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4348
  return (1);
}
}
#line 4351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4353
  p = (struct p_block_ack *)h;
#line 4354
  tmp = __fswab64(p->sector);
#line 4354
  sector = (sector_t )tmp;
#line 4355
  tmp___0 = __fswab32(p->blksize);
#line 4355
  blksize = (int )tmp___0;
#line 4357
  if (mdev->agreed_pro_version <= 88) {
#line 4357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4357);
  } else {

  }
#line 4359
  tmp___1 = __fswab32(p->seq_num);
#line 4359
  update_peer_seq(mdev, tmp___1);
#line 4361
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4361
  if (tmp___2 != 0) {
#line 4362
    drbd_rs_complete_io(mdev, sector);
#line 4363
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4363U);
#line 4365
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4366
    put_ldev(mdev);
  } else {

  }
#line 4368
  atomic_dec(& mdev->rs_pending_cnt);
#line 4368
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4368
  if (tmp___4 < 0) {
#line 4368
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4368
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4368, tmp___3);
  } else {

  }
#line 4369
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4371
  return (1);
}
}
#line 4376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4379
  tmp = tl_hash_slot(mdev, sector);
#line 4379
  slot = tmp;
#line 4383
  n = slot->first;
#line 4383
  goto ldv_51562;
  ldv_51561: ;
#line 4384
  if ((unsigned long )req == (unsigned long )id) {
#line 4385
    if (req->sector != sector) {
#line 4386
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4390
      goto ldv_51560;
    } else {

    }
#line 4392
    return (req);
  } else {

  }
#line 4383
  n = n->next;
  ldv_51562: ;
#line 4383
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4383
    __mptr = (struct hlist_node  const  *)n;
#line 4383
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4383
    if (1 != 0) {
#line 4384
      goto ldv_51561;
    } else {
#line 4386
      goto ldv_51560;
    }
  } else {

  }
  ldv_51560: ;
#line 4395
  return (0);
}
}
#line 4401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4408
  spin_lock_irq(& mdev->req_lock);
#line 4409
  req = (*validator)(mdev, id, sector);
#line 4410
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4410
  if (tmp != 0L) {
#line 4411
    spin_unlock_irq(& mdev->req_lock);
#line 4413
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4415
    return (0);
  } else {

  }
#line 4417
  __req_mod(req, what, & m);
#line 4418
  spin_unlock_irq(& mdev->req_lock);
#line 4420
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4421
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4422
  return (1);
}
}
#line 4425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4427
  p = (struct p_block_ack *)h;
#line 4428
  tmp = __fswab64(p->sector);
#line 4428
  sector = (sector_t )tmp;
#line 4429
  tmp___0 = __fswab32(p->blksize);
#line 4429
  blksize = (int )tmp___0;
#line 4432
  tmp___1 = __fswab32(p->seq_num);
#line 4432
  update_peer_seq(mdev, tmp___1);
#line 4434
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4435
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4435U);
#line 4436
    atomic_dec(& mdev->rs_pending_cnt);
#line 4436
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4436
    if (tmp___3 < 0) {
#line 4436
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4436
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4436, tmp___2);
    } else {

    }
#line 4437
    return (1);
  } else {

  }
#line 4439
  tmp___4 = __fswab16((int )h->command);
#line 4439
  switch ((int )tmp___4) {
  case 23: ;
#line 4441
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4441);
  } else {

  }
#line 4442
  what = write_acked_by_peer_and_sis;
#line 4443
  goto ldv_51590;
  case 22: ;
#line 4445
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4445
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4445);
  } else {

  }
#line 4446
  what = write_acked_by_peer;
#line 4447
  goto ldv_51590;
  case 21: ;
#line 4449
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4449
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4449);
  } else {

  }
#line 4450
  what = recv_acked_by_peer;
#line 4451
  goto ldv_51590;
  case 24: ;
#line 4453
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4453
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4453);
  } else {

  }
#line 4454
  what = conflict_discarded_by_peer;
#line 4455
  goto ldv_51590;
  default: 
#line 4457
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4457);
#line 4458
  return (0);
  }
  ldv_51590: 
#line 4461
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4461
  return (tmp___5);
}
}
#line 4465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4467
  p = (struct p_block_ack *)h;
#line 4468
  tmp = __fswab64(p->sector);
#line 4468
  sector = (sector_t )tmp;
#line 4469
  tmp___0 = __fswab32(p->blksize);
#line 4469
  size = (int )tmp___0;
#line 4473
  tmp___1 = __fswab32(p->seq_num);
#line 4473
  update_peer_seq(mdev, tmp___1);
#line 4475
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4476
    atomic_dec(& mdev->rs_pending_cnt);
#line 4476
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4476
    if (tmp___3 < 0) {
#line 4476
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4476
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4476, tmp___2);
    } else {

    }
#line 4477
    drbd_rs_failed_io(mdev, sector, size);
#line 4478
    return (1);
  } else {

  }
#line 4481
  spin_lock_irq(& mdev->req_lock);
#line 4482
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4483
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4484
    spin_unlock_irq(& mdev->req_lock);
#line 4485
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4493
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4493U);
#line 4494
      return (1);
    } else {
#line 4496
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4498
      return (0);
    }
  } else {

  }
#line 4501
  __req_mod(req, neg_acked, & m);
#line 4502
  spin_unlock_irq(& mdev->req_lock);
#line 4504
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4505
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4506
  return (1);
}
}
#line 4509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4511
  p = (struct p_block_ack *)h;
#line 4512
  tmp = __fswab64(p->sector);
#line 4512
  sector = (sector_t )tmp;
#line 4514
  tmp___0 = __fswab32(p->seq_num);
#line 4514
  update_peer_seq(mdev, tmp___0);
#line 4515
  tmp___1 = __fswab32(p->blksize);
#line 4515
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4518
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4518
  return (tmp___2);
}
}
#line 4522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4526
  p = (struct p_block_ack *)h;
#line 4528
  tmp = __fswab64(p->sector);
#line 4528
  sector = (sector_t )tmp;
#line 4529
  tmp___0 = __fswab32(p->blksize);
#line 4529
  size = (int )tmp___0;
#line 4531
  tmp___1 = __fswab32(p->seq_num);
#line 4531
  update_peer_seq(mdev, tmp___1);
#line 4533
  atomic_dec(& mdev->rs_pending_cnt);
#line 4533
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4533
  if (tmp___3 < 0) {
#line 4533
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4533
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4533, tmp___2);
  } else {

  }
#line 4535
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4535
  if (tmp___5 != 0) {
#line 4536
    drbd_rs_complete_io(mdev, sector);
#line 4537
    tmp___4 = __fswab16((int )h->command);
#line 4537
    switch ((int )tmp___4) {
    case 27: 
#line 4539
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4541
    goto ldv_51628;
    default: 
#line 4543
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4543);
#line 4544
    put_ldev(mdev);
#line 4545
    return (0);
    }
    ldv_51628: 
#line 4547
    put_ldev(mdev);
  } else {

  }
#line 4550
  return (1);
}
}
#line 4553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4555
  p = (struct p_barrier_ack *)h;
#line 4557
  tmp = __fswab32(p->set_size);
#line 4557
  tl_release(mdev, p->barrier, tmp);
#line 4559
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4559
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4559
    if (tmp___0 == 0) {
#line 4559
      tmp___1 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 4559
      if (tmp___1 == 0) {
#line 4562
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4563
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4566
  return (1);
}
}
#line 4569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4571
  p = (struct p_block_ack *)h;
#line 4576
  tmp = __fswab64(p->sector);
#line 4576
  sector = (sector_t )tmp;
#line 4577
  tmp___0 = __fswab32(p->blksize);
#line 4577
  size = (int )tmp___0;
#line 4579
  tmp___1 = __fswab32(p->seq_num);
#line 4579
  update_peer_seq(mdev, tmp___1);
#line 4581
  tmp___2 = __fswab64(p->block_id);
#line 4581
  if (tmp___2 == 4712ULL) {
#line 4582
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4584
    ov_oos_print(mdev);
  }
#line 4586
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4586
  if (tmp___3 == 0) {
#line 4587
    return (1);
  } else {

  }
#line 4589
  drbd_rs_complete_io(mdev, sector);
#line 4590
  atomic_dec(& mdev->rs_pending_cnt);
#line 4590
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4590
  if (tmp___5 < 0) {
#line 4590
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4590
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4590, tmp___4);
  } else {

  }
#line 4592
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4595
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4596
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4598
  if (mdev->ov_left == 0UL) {
#line 4599
    tmp___6 = kmalloc(24UL, 16U);
#line 4599
    w = (struct drbd_work *)tmp___6;
#line 4600
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4601
      w->cb = & w_ov_finished;
#line 4602
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4604
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4605
      ov_oos_print(mdev);
#line 4606
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4609
  put_ldev(mdev);
#line 4610
  return (1);
}
}
#line 4613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4615
  return (1);
}
}
#line 4623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4625
  asender_tbl[0].pkt_size = 0UL;
#line 4625
  asender_tbl[0].process = 0;
#line 4625
  asender_tbl[1].pkt_size = 0UL;
#line 4625
  asender_tbl[1].process = 0;
#line 4625
  asender_tbl[2].pkt_size = 0UL;
#line 4625
  asender_tbl[2].process = 0;
#line 4625
  asender_tbl[3].pkt_size = 0UL;
#line 4625
  asender_tbl[3].process = 0;
#line 4625
  asender_tbl[4].pkt_size = 0UL;
#line 4625
  asender_tbl[4].process = 0;
#line 4625
  asender_tbl[5].pkt_size = 0UL;
#line 4625
  asender_tbl[5].process = 0;
#line 4625
  asender_tbl[6].pkt_size = 0UL;
#line 4625
  asender_tbl[6].process = 0;
#line 4625
  asender_tbl[7].pkt_size = 0UL;
#line 4625
  asender_tbl[7].process = 0;
#line 4625
  asender_tbl[8].pkt_size = 0UL;
#line 4625
  asender_tbl[8].process = 0;
#line 4625
  asender_tbl[9].pkt_size = 0UL;
#line 4625
  asender_tbl[9].process = 0;
#line 4625
  asender_tbl[10].pkt_size = 0UL;
#line 4625
  asender_tbl[10].process = 0;
#line 4625
  asender_tbl[11].pkt_size = 0UL;
#line 4625
  asender_tbl[11].process = 0;
#line 4625
  asender_tbl[12].pkt_size = 0UL;
#line 4625
  asender_tbl[12].process = 0;
#line 4625
  asender_tbl[13].pkt_size = 0UL;
#line 4625
  asender_tbl[13].process = 0;
#line 4625
  asender_tbl[14].pkt_size = 0UL;
#line 4625
  asender_tbl[14].process = 0;
#line 4625
  asender_tbl[15].pkt_size = 0UL;
#line 4625
  asender_tbl[15].process = 0;
#line 4625
  asender_tbl[16].pkt_size = 0UL;
#line 4625
  asender_tbl[16].process = 0;
#line 4625
  asender_tbl[17].pkt_size = 0UL;
#line 4625
  asender_tbl[17].process = 0;
#line 4625
  asender_tbl[18].pkt_size = 0UL;
#line 4625
  asender_tbl[18].process = 0;
#line 4625
  asender_tbl[19].pkt_size = 8UL;
#line 4625
  asender_tbl[19].process = & got_Ping;
#line 4625
  asender_tbl[20].pkt_size = 8UL;
#line 4625
  asender_tbl[20].process = & got_PingAck;
#line 4625
  asender_tbl[21].pkt_size = 32UL;
#line 4625
  asender_tbl[21].process = & got_BlockAck;
#line 4625
  asender_tbl[22].pkt_size = 32UL;
#line 4625
  asender_tbl[22].process = & got_BlockAck;
#line 4625
  asender_tbl[23].pkt_size = 32UL;
#line 4625
  asender_tbl[23].process = & got_BlockAck;
#line 4625
  asender_tbl[24].pkt_size = 32UL;
#line 4625
  asender_tbl[24].process = & got_BlockAck;
#line 4625
  asender_tbl[25].pkt_size = 32UL;
#line 4625
  asender_tbl[25].process = & got_NegAck;
#line 4625
  asender_tbl[26].pkt_size = 32UL;
#line 4625
  asender_tbl[26].process = & got_NegDReply;
#line 4625
  asender_tbl[27].pkt_size = 32UL;
#line 4625
  asender_tbl[27].process = & got_NegRSDReply;
#line 4625
  asender_tbl[28].pkt_size = 16UL;
#line 4625
  asender_tbl[28].process = & got_BarrierAck;
#line 4625
  asender_tbl[29].pkt_size = 12UL;
#line 4625
  asender_tbl[29].process = & got_RqSReply;
#line 4625
  asender_tbl[30].pkt_size = 0UL;
#line 4625
  asender_tbl[30].process = 0;
#line 4625
  asender_tbl[31].pkt_size = 0UL;
#line 4625
  asender_tbl[31].process = 0;
#line 4625
  asender_tbl[32].pkt_size = 32UL;
#line 4625
  asender_tbl[32].process = & got_OVResult;
#line 4625
  asender_tbl[33].pkt_size = 0UL;
#line 4625
  asender_tbl[33].process = 0;
#line 4625
  asender_tbl[34].pkt_size = 32UL;
#line 4625
  asender_tbl[34].process = & got_IsInSync;
#line 4625
  asender_tbl[35].pkt_size = 0UL;
#line 4625
  asender_tbl[35].process = 0;
#line 4625
  asender_tbl[36].pkt_size = 0UL;
#line 4625
  asender_tbl[36].process = 0;
#line 4625
  asender_tbl[37].pkt_size = 0UL;
#line 4625
  asender_tbl[37].process = 0;
#line 4625
  asender_tbl[38].pkt_size = 0UL;
#line 4625
  asender_tbl[38].process = 0;
#line 4625
  asender_tbl[39].pkt_size = 16UL;
#line 4625
  asender_tbl[39].process = & got_skip;
#line 4625
  asender_tbl[40].pkt_size = 0UL;
#line 4625
  asender_tbl[40].process = 0;
#line 4625
  asender_tbl[41].pkt_size = 32UL;
#line 4625
  asender_tbl[41].process = & got_NegRSDReply;
#line 4625
  asender_tbl[42].pkt_size = 0UL;
#line 4625
  asender_tbl[42].process = 0;
#line 4646
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4647
    return (0);
  } else {

  }
#line 4648
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4653
  mdev = thi->mdev;
#line 4654
  h = & mdev->meta.rbuf.header.h80;
#line 4655
  cmd = 0;
#line 4658
  buf = (void *)h;
#line 4659
  received = 0;
#line 4660
  expect = 8;
#line 4662
  ping_timeout_active = 0;
#line 4664
  tmp = mdev_to_minor(mdev);
#line 4664
  tmp___0 = get_current();
#line 4664
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4666
  tmp___1 = get_current();
#line 4666
  tmp___1->policy = 2U;
#line 4667
  tmp___2 = get_current();
#line 4667
  tmp___2->rt_priority = 2U;
#line 4669
  goto ldv_51679;
  ldv_51689: 
#line 4670
  drbd_thread_current_set_cpu(mdev);
#line 4671
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4671
  if (tmp___4 != 0) {
#line 4672
    tmp___3 = drbd_send_ping(mdev);
#line 4672
    _b = tmp___3 == 0;
#line 4672
    if (_b != 0) {
#line 4672
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4672);
    } else {

    }
#line 4672
    if (_b != 0) {
#line 4672
      goto reconnect;
    } else {

    }
#line 4673
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4675
    ping_timeout_active = 1;
  } else {

  }
#line 4680
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4680
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4680
    if (tmp___5 > 3) {
#line 4682
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_51678: 
#line 4684
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4685
  tmp___6 = get_current();
#line 4685
  flush_signals(tmp___6);
#line 4686
  tmp___7 = drbd_process_done_ee(mdev);
#line 4686
  if (tmp___7 == 0) {
#line 4687
    goto reconnect;
  } else {

  }
#line 4689
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4690
  spin_lock_irq(& mdev->req_lock);
#line 4691
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4692
  spin_unlock_irq(& mdev->req_lock);
#line 4696
  if (empty != 0) {
#line 4697
    goto ldv_51677;
  } else {

  }
#line 4698
  goto ldv_51678;
  ldv_51677: ;
#line 4700
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4701
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4704
  tmp___8 = get_current();
#line 4704
  tmp___9 = signal_pending(tmp___8);
#line 4704
  if (tmp___9 != 0) {
#line 4705
    goto ldv_51679;
  } else {

  }
#line 4707
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4709
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4711
  tmp___10 = get_current();
#line 4711
  flush_signals(tmp___10);
#line 4723
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4723
  if (tmp___11 != 0L) {
#line 4724
    received = received + rv;
#line 4725
    buf = buf + (unsigned long )rv;
  } else
#line 4726
  if (rv == 0) {
#line 4727
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4728
    goto reconnect;
  } else
#line 4729
  if (rv == -11) {
#line 4732
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4734
      goto ldv_51679;
    } else {

    }
#line 4735
    if (ping_timeout_active != 0) {
#line 4736
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4737
      goto reconnect;
    } else {

    }
#line 4739
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4740
    goto ldv_51679;
  } else
#line 4741
  if (rv == -4) {
#line 4742
    goto ldv_51679;
  } else {
#line 4744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4745
    goto reconnect;
  }
#line 4748
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4749
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4749
    if (tmp___15 != 0L) {
#line 4750
      tmp___12 = __fswab16((int )h->length);
#line 4750
      tmp___13 = __fswab16((int )h->command);
#line 4750
      tmp___14 = __fswab32(h->magic);
#line 4750
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4754
      goto reconnect;
    } else {

    }
#line 4756
    tmp___16 = __fswab16((int )h->command);
#line 4756
    cmd = get_asender_cmd((int )tmp___16);
#line 4757
    tmp___17 = __fswab16((int )h->length);
#line 4757
    len = (int )tmp___17;
#line 4758
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4758
    if (tmp___21 != 0L) {
#line 4759
      tmp___18 = __fswab16((int )h->length);
#line 4759
      tmp___19 = __fswab16((int )h->command);
#line 4759
      tmp___20 = __fswab32(h->magic);
#line 4759
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4763
      goto disconnect;
    } else {

    }
#line 4765
    expect = (int )cmd->pkt_size;
#line 4766
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4766
    if (_b___0 != 0) {
#line 4766
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4766);
    } else {

    }
#line 4766
    if (_b___0 != 0) {
#line 4767
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4769
  if (received == expect) {
#line 4770
    mdev->last_received = jiffies;
#line 4771
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4771
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4771);
    } else {

    }
#line 4772
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4772
    if (tmp___22 == 0) {
#line 4773
      goto reconnect;
    } else {

    }
#line 4777
    tmp___23 = get_asender_cmd(20);
#line 4777
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4778
      ping_timeout_active = 0;
    } else {

    }
#line 4780
    buf = (void *)h;
#line 4781
    received = 0;
#line 4782
    expect = 8;
#line 4783
    cmd = 0;
  } else {

  }
  ldv_51679: 
#line 4669
  tmp___24 = get_t_state(thi);
#line 4669
  if ((unsigned int )tmp___24 == 1U) {
#line 4670
    goto ldv_51689;
  } else {

  }

#line 4787
  if (0) {
    reconnect: 
#line 4789
    val.i = 0U;
#line 4789
    val.ldv_38802.conn = 5U;
#line 4789
    mask.i = 0U;
#line 4789
    mask.ldv_38802.conn = 31U;
#line 4789
    drbd_force_state(mdev, mask, val);
#line 4790
    drbd_md_sync(mdev);
  } else {

  }
#line 4792
  if (0) {
    disconnect: 
#line 4794
    val___0.i = 0U;
#line 4794
    val___0.ldv_38802.conn = 1U;
#line 4794
    mask___0.i = 0U;
#line 4794
    mask___0.ldv_38802.conn = 31U;
#line 4794
    drbd_force_state(mdev, mask___0, val___0);
#line 4795
    drbd_md_sync(mdev);
  } else {

  }
#line 4797
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4799
  if ((int )mdev->state.ldv_38802.conn > 9) {
#line 4799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4799);
  } else {

  }
#line 4800
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4802
  return (0);
}
}
#line 4842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4854
  LDV_IN_INTERRUPT = 1;
#line 4863
  ldv_initialize();
#line 4865
  goto ldv_51718;
  ldv_51717: 
#line 4868
  tmp = nondet_int();
#line 4868
  switch (tmp) {
  default: ;
#line 4870
  goto ldv_51716;
  }
  ldv_51716: ;
  ldv_51718: 
#line 4865
  tmp___0 = nondet_int();
#line 4865
  if (tmp___0 != 0) {
#line 4866
    goto ldv_51717;
  } else {

  }


#line 4879
  ldv_check_final_state();
#line 4882
  return;
}
}
#line 4886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4891
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4893
  mutex_lock(ldv_func_arg1);
#line 4894
  return;
}
}
#line 4896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4901
  tmp = mutex_trylock(ldv_func_arg1);
#line 4901
  ldv_func_res = tmp;
#line 4903
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4903
  return (tmp___0);
#line 4905
  return (ldv_func_res);
}
}
#line 4908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4913
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4915
  mutex_unlock(ldv_func_arg1);
#line 4916
  return;
}
}
#line 4918 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4923
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4925
  mutex_lock(ldv_func_arg1);
#line 4926
  return;
}
}
#line 4928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4933
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4935
  mutex_unlock(ldv_func_arg1);
#line 4936
  return;
}
}
#line 4938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4943
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4945
  mutex_lock(ldv_func_arg1);
#line 4946
  return;
}
}
#line 4948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4953
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4955
  mutex_unlock(ldv_func_arg1);
#line 4956
  return;
}
}
#line 4958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4963
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4965
  mutex_unlock(ldv_func_arg1);
#line 4966
  return;
}
}
#line 4968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4973
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4973
  ldv_func_res = tmp;
#line 4975
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4975
  return (tmp___0);
#line 4977
  return (ldv_func_res);
}
}
#line 4980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4985
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4987
  mutex_unlock(ldv_func_arg1);
#line 4988
  return;
}
}
#line 4990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4995
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4997
  mutex_unlock(ldv_func_arg1);
#line 4998
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6265;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6265;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6265;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6265;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6265: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 162 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 164
  tmp = current_thread_info___1();
#line 164
  tmp->preempt_count = tmp->preempt_count + 1;
#line 164
  __asm__  volatile   ("": : : "memory");
#line 165
  return;
}
}
#line 167 "include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 169
  __asm__  volatile   ("": : : "memory");
#line 169
  tmp = current_thread_info___1();
#line 169
  tmp->preempt_count = tmp->preempt_count + -1;
#line 169
  __asm__  volatile   ("": : : "memory");
#line 170
  return;
}
}
#line 270
extern int rcu_is_cpu_idle(void) ;
#line 278 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 280
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 282
  return;
}
}
#line 283 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 285
  lock_release(map, 1, (unsigned long )((void *)0));
#line 287
  return;
}
}
#line 288
extern struct lockdep_map rcu_lock_map ;
#line 291
extern int debug_lockdep_rcu_enabled(void) ;
#line 724 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 726
  __rcu_read_lock();
#line 728
  rcu_lock_acquire(& rcu_lock_map);
#line 729
  tmp = debug_lockdep_rcu_enabled();
#line 729
  if (tmp != 0 && ! __warned) {
#line 729
    tmp___0 = rcu_is_cpu_idle();
#line 729
    if (tmp___0 != 0) {
#line 729
      __warned = 1;
#line 729
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 730, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 732
  return;
}
}
#line 748 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 750
  tmp = debug_lockdep_rcu_enabled();
#line 750
  if (tmp != 0 && ! __warned) {
#line 750
    tmp___0 = rcu_is_cpu_idle();
#line 750
    if (tmp___0 != 0) {
#line 750
      __warned = 1;
#line 750
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 751, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 752
  rcu_lock_release(& rcu_lock_map);
#line 754
  __rcu_read_unlock();
#line 755
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 196 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 198
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 198
  if (tmp != 0L) {
#line 199
    if (part->partno != 0) {
#line 200
      __mptr = (struct device  const  *)part->__dev.parent;
#line 200
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 202
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 202
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 204
  return (0);
}
}
#line 368 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 370
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 371
  if (part->partno != 0) {
#line 372
    tmp = part_to_disk(part);
#line 372
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 373
  return;
}
}
#line 375 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 377
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 378
  if (part->partno != 0) {
#line 379
    tmp = part_to_disk(part);
#line 379
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 380
  return;
}
}
#line 401
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 209 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 210
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1230
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1502
mempool_t *drbd_request_mempool ;
#line 1545
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1547
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1856 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1860
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1862
  if ((unsigned int )forcedetach == 0U) {
#line 1863
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1863
    if (tmp != 0) {
#line 1864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1865
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1866
      __ns.i = mdev->state.i;
#line 1866
      __ns.ldv_38802.disk = 4U;
#line 1866
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1867
    goto ldv_49393;
  } else {

  }
  case 2: ;
  case 1: 
#line 1872
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1873
  if ((unsigned int )forcedetach == 2U) {
#line 1874
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1875
  if ((int )mdev->state.ldv_38802.disk > 2) {
#line 1876
    __ns___0.i = mdev->state.i;
#line 1876
    __ns___0.ldv_38802.disk = 2U;
#line 1876
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1880
  goto ldv_49393;
  }
  ldv_49393: ;
#line 1883
  return;
}
}
#line 2101 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2103
  atomic_inc(& mdev->ap_pending_cnt);
#line 2104
  return;
}
}
#line 2281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2283
  mxb = 1000000;
#line 2284
  tmp = get_net_conf(mdev);
#line 2284
  if (tmp != 0) {
#line 2285
    mxb = (mdev->net_conf)->max_buffers;
#line 2286
    put_net_conf(mdev);
  } else {

  }
#line 2288
  return (mxb);
}
}
#line 2291 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2293
  s = mdev->state;
#line 2298
  switch ((unsigned int )s.ldv_38802.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2323
  goto ldv_49565;
  case 13U: ;
#line 2327
  if (mdev->agreed_pro_version <= 95) {
#line 2328
    return (0);
  } else {

  }
#line 2329
  goto ldv_49565;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2336
  return (0);
  }
  ldv_49565: ;
#line 2339
  switch ((unsigned int )s.ldv_38802.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2347
  goto ldv_49576;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2355
  return (0);
  }
  ldv_49576: ;
#line 2358
  return (1);
}
}
#line 2366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2368
  tmp = drbd_get_max_buffers(mdev);
#line 2368
  mxb = tmp;
#line 2370
  tmp___0 = is_susp(mdev->state);
#line 2370
  if (tmp___0 != 0) {
#line 2371
    return (0);
  } else {

  }
#line 2372
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2372
  if (tmp___1 != 0) {
#line 2373
    return (0);
  } else {

  }
#line 2380
  tmp___2 = drbd_state_is_stable(mdev);
#line 2380
  if (tmp___2 == 0) {
#line 2381
    return (0);
  } else {

  }
#line 2385
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2385
  if (tmp___3 > mxb) {
#line 2386
    return (0);
  } else {

  }
#line 2387
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2387
  if (tmp___4 != 0) {
#line 2388
    return (0);
  } else {

  }
#line 2389
  return (1);
}
}
#line 2392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2394
  rv = 0;
#line 2396
  spin_lock_irq(& mdev->req_lock);
#line 2397
  rv = may_inc_ap_bio(mdev);
#line 2398
  if ((int )rv) {
#line 2399
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2400
  spin_unlock_irq(& mdev->req_lock);
#line 2402
  return (rv);
}
}
#line 2405 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2415
  tmp = inc_ap_bio_cond(mdev, count);
#line 2415
  if ((int )tmp) {
#line 2415
    goto ldv_49597;
  } else {

  }
#line 2415
  tmp___0 = get_current();
#line 2415
  __wait.flags = 0U;
#line 2415
  __wait.private = (void *)tmp___0;
#line 2415
  __wait.func = & autoremove_wake_function;
#line 2415
  __wait.task_list.next = & __wait.task_list;
#line 2415
  __wait.task_list.prev = & __wait.task_list;
  ldv_49600: 
#line 2415
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2415
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2415
  if ((int )tmp___1) {
#line 2415
    goto ldv_49599;
  } else {

  }
#line 2415
  schedule();
#line 2415
  goto ldv_49600;
  ldv_49599: 
#line 2415
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49597: ;
#line 2418
  return;
}
}
#line 2418 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2420
  tmp = drbd_get_max_buffers(mdev);
#line 2420
  mxb = tmp;
#line 2421
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2421
  ap_bio = tmp___0;
#line 2423
  if (ap_bio < 0) {
#line 2423
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2423);
  } else {

  }
#line 2425
  if (ap_bio == 0) {
#line 2425
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2425
    if (tmp___2 != 0) {
#line 2426
      tmp___1 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 2426
      if (tmp___1 == 0) {
#line 2427
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2433
  if (ap_bio < mxb) {
#line 2434
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2435
  return;
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_49710: ;
#line 234
    goto ldv_49710;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_49715: ;
#line 243
    goto ldv_49715;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 288
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 288
  req = (struct drbd_request *)tmp;
#line 290
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 290
  if (tmp___0 != 0L) {
#line 291
    drbd_req_make_private_bio(req, bio_src);
#line 293
    req->rq_state = (int )bio_src->bi_rw & 1 ? 2048UL : 0UL;
#line 294
    req->mdev = mdev;
#line 295
    req->master_bio = bio_src;
#line 296
    req->epoch = 0U;
#line 297
    req->sector = bio_src->bi_sector;
#line 298
    req->size = bio_src->bi_size;
#line 299
    INIT_HLIST_NODE(& req->collision);
#line 300
    INIT_LIST_HEAD(& req->tl_requests);
#line 301
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 303
  return (req);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 308
  mempool_free((void *)req, drbd_request_mempool);
#line 309
  return;
}
}
#line 324
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 330
void request_timer_fn(unsigned long data ) ;
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 373
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_38802.pdsk > 3 && (int )s.ldv_38802.conn > 13) && (int )s.ldv_38802.conn <= 21)));
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 383
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  tmp = current_thread_info___1();
#line 94
  tmp->preempt_count = tmp->preempt_count + 1;
#line 94
  __asm__  volatile   ("": : : "memory");
#line 94
  __vpp_verify = 0;
#line 94
  switch (4UL) {
  case 1UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49807;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49807;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49807;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_49807;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49807: 
#line 94
  pscr_ret__ = pfo_ret__;
#line 94
  goto ldv_49813;
  case 2UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49817;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49817;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49817;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 94
  goto ldv_49817;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49817: 
#line 94
  pscr_ret__ = pfo_ret_____0;
#line 94
  goto ldv_49813;
  case 4UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49826;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49826;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49826;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 94
  goto ldv_49826;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49826: 
#line 94
  pscr_ret__ = pfo_ret_____1;
#line 94
  goto ldv_49813;
  case 8UL: ;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49835;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49835;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49835;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 94
  goto ldv_49835;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_49835: 
#line 94
  pscr_ret__ = pfo_ret_____2;
#line 94
  goto ldv_49813;
  default: 
#line 94
  __bad_size_call_parameter();
#line 94
  goto ldv_49813;
  }
  ldv_49813: 
#line 94
  cpu = pscr_ret__;
#line 95
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 96
  __vpp_verify___0 = 0;
#line 96
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___1 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 97
  __vpp_verify___2 = 0;
#line 97
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 97
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 97
  if ((mdev->vdisk)->part0.partno != 0) {
#line 97
    __vpp_verify___3 = 0;
#line 97
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 97
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 97
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 98
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 99
  __asm__  volatile   ("": : : "memory");
#line 99
  tmp___2 = current_thread_info___1();
#line 99
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 99
  __asm__  volatile   ("": : : "memory");
#line 99
  rcu_read_unlock();
#line 100
  return;
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 105
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 106
  duration = (unsigned long )jiffies - req->start_time;
#line 108
  rcu_read_lock();
#line 108
  tmp = current_thread_info___1();
#line 108
  tmp->preempt_count = tmp->preempt_count + 1;
#line 108
  __asm__  volatile   ("": : : "memory");
#line 108
  __vpp_verify = 0;
#line 108
  switch (4UL) {
  case 1UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49873;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49873;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49873;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 108
  goto ldv_49873;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49873: 
#line 108
  pscr_ret__ = pfo_ret__;
#line 108
  goto ldv_49879;
  case 2UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49883;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49883;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49883;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 108
  goto ldv_49883;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49883: 
#line 108
  pscr_ret__ = pfo_ret_____0;
#line 108
  goto ldv_49879;
  case 4UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49892;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49892;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49892;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 108
  goto ldv_49892;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49892: 
#line 108
  pscr_ret__ = pfo_ret_____1;
#line 108
  goto ldv_49879;
  case 8UL: ;
#line 108
  switch (4UL) {
  case 1UL: 
#line 108
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49901;
  case 2UL: 
#line 108
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49901;
  case 4UL: 
#line 108
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49901;
  case 8UL: 
#line 108
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 108
  goto ldv_49901;
  default: 
#line 108
  __bad_percpu_size();
  }
  ldv_49901: 
#line 108
  pscr_ret__ = pfo_ret_____2;
#line 108
  goto ldv_49879;
  default: 
#line 108
  __bad_size_call_parameter();
#line 108
  goto ldv_49879;
  }
  ldv_49879: 
#line 108
  cpu = pscr_ret__;
#line 109
  __vpp_verify___0 = 0;
#line 109
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 109
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 109
  if ((mdev->vdisk)->part0.partno != 0) {
#line 109
    __vpp_verify___1 = 0;
#line 109
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 109
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 109
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 110
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 111
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 112
  __asm__  volatile   ("": : : "memory");
#line 112
  tmp___1 = current_thread_info___1();
#line 112
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 112
  __asm__  volatile   ("": : : "memory");
#line 112
  rcu_read_unlock();
#line 113
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 117
  s = req->rq_state;
#line 125
  list_del(& req->tl_requests);
#line 130
  if ((int )rw == 1) {
#line 135
    if ((s & 256UL) == 0UL || (s & 4UL) == 0UL) {
#line 136
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             136U);
    } else {

    }
#line 138
    if (((s & 256UL) != 0UL && (s & 4UL) != 0UL) && (s & 512UL) != 0UL) {
#line 139
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         139U);
    } else {

    }
#line 151
    if ((s & 15UL) != 0UL) {
#line 152
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 152
      if (tmp___0 != 0) {
#line 153
        if ((s & 4096UL) != 0UL) {
#line 154
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 155
        put_ldev(mdev);
      } else {
#line 156
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 156
        if (tmp != 0) {
#line 157
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 164
  drbd_req_free(req);
#line 165
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 176
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 176
  if (tmp != 0) {
#line 177
    return;
  } else {

  }
#line 179
  b = mdev->newest_tle;
#line 180
  b->w.cb = & w_send_barrier;
#line 185
  inc_ap_pending(mdev);
#line 186
  drbd_queue_work(& mdev->data.work, & b->w);
#line 187
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 188
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 193
  s = req->rq_state;
#line 205
  if (((int )mdev->state.ldv_38802.conn > 9 && (s & 64UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 208
    queue_barrier(mdev);
  } else {

  }
#line 213
  if ((s & 128UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 214
    sector = req->sector;
#line 215
    size = (int const   )req->size;
#line 221
    slot = tl_hash_slot___0(mdev, sector);
#line 222
    n = slot->first;
#line 222
    goto ldv_49945;
    ldv_49944: 
#line 223
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 223
    if (tmp != 0) {
#line 224
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 222
    n = n->next;
    ldv_49945: ;
#line 222
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 222
      __mptr = (struct hlist_node  const  *)n;
#line 222
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 222
      if (1 != 0) {
#line 223
        goto ldv_49944;
      } else {
#line 225
        goto ldv_49946;
      }
    } else {

    }
    ldv_49946: 
#line 245
    slot = ee_hash_slot___0(mdev, req->sector);
#line 246
    n = slot->first;
#line 246
    goto ldv_49952;
    ldv_49951: 
#line 247
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 247
    if (tmp___0 != 0) {
#line 248
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 249
      goto ldv_49950;
    } else {

    }
#line 246
    n = n->next;
    ldv_49952: ;
#line 246
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 246
      __mptr___0 = (struct hlist_node  const  *)n;
#line 246
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 246
      if (1 != 0) {
#line 247
        goto ldv_49951;
      } else {
#line 249
        goto ldv_49950;
      }
    } else {

    }
    ldv_49950: ;
  } else {

  }
#line 252
  return;
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 259
  bio_endio(m->bio, m->error);
#line 260
  dec_ap_bio(mdev);
#line 261
  return;
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 271
  s = req->rq_state;
#line 272
  mdev = req->mdev;
#line 273
  rw = (req->rq_state & 2048UL) != 0UL;
#line 284
  if ((s & 32UL) != 0UL) {
#line 285
    return;
  } else {

  }
#line 286
  if ((s & 16UL) != 0UL) {
#line 287
    return;
  } else {

  }
#line 288
  if ((int )s & 1 && (s & 8UL) == 0UL) {
#line 289
    return;
  } else {

  }
#line 291
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 313
    ok = (s & 4UL) != 0UL || (s & 256UL) != 0UL;
#line 314
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 314
    error = (int )tmp;
#line 318
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 318
    if (tmp___0 == 0) {
#line 319
      hlist_del(& req->collision);
    } else
#line 321
    if ((s & 880UL) != 0UL) {
#line 321
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              321);
    } else {

    }
#line 324
    if (rw == 1) {
#line 325
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 328
    _drbd_end_io_acct(mdev, req);
#line 330
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 331
    m->bio = req->master_bio;
#line 332
    req->master_bio = 0;
  } else {

  }
#line 335
  if ((int )s & 1) {
#line 336
    return;
  } else {

  }
#line 338
  if ((s & 1008UL) == 0UL || (s & 128UL) != 0UL) {
#line 343
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 344
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 351
  mdev = req->mdev;
#line 353
  tmp = is_susp(mdev->state);
#line 353
  if (tmp == 0) {
#line 354
    _req_may_be_done(req, m);
  } else {

  }
#line 355
  return;
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 382
  mdev = req->mdev;
#line 383
  sector = req->sector;
#line 384
  size = (int const   )req->size;
#line 390
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 390
  if (tmp == 0) {
#line 390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            390);
  } else {

  }
#line 392
  tmp___0 = get_net_conf(mdev);
#line 392
  if (tmp___0 == 0) {
#line 393
    return (0);
  } else {

  }
#line 396
  _b = mdev->tl_hash_s == 0U;
#line 396
  if (_b != 0) {
#line 396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            396);
  } else {

  }
#line 396
  if (_b != 0) {
#line 397
    goto out_no_conflict;
  } else {

  }
#line 398
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 398
  if (tmp___1 != 0L) {
#line 398
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (398), "i" (12UL));
    ldv_49985: ;
#line 398
    goto ldv_49985;
  } else {

  }
#line 401
  slot = tl_hash_slot___0(mdev, sector);
#line 402
  n = slot->first;
#line 402
  goto ldv_49991;
  ldv_49990: 
#line 403
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 403
  if (tmp___4 != 0) {
#line 404
    tmp___2 = get_current();
#line 404
    tmp___3 = get_current();
#line 404
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 410
    goto out_conflict;
  } else {

  }
#line 402
  n = n->next;
  ldv_49991: ;
#line 402
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 402
    __mptr = (struct hlist_node  const  *)n;
#line 402
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 402
    if (1 != 0) {
#line 403
      goto ldv_49990;
    } else {
#line 405
      goto ldv_49992;
    }
  } else {

  }
  ldv_49992: ;
#line 414
  if (mdev->ee_hash_s != 0U) {
#line 416
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 416
    if (tmp___5 != 0L) {
#line 416
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (416), "i" (12UL));
      ldv_49993: ;
#line 416
      goto ldv_49993;
    } else {

    }
#line 419
    slot = ee_hash_slot___0(mdev, sector);
#line 420
    n = slot->first;
#line 420
    goto ldv_49998;
    ldv_49997: 
#line 421
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 421
    if (tmp___8 != 0) {
#line 422
      tmp___6 = get_current();
#line 422
      tmp___7 = get_current();
#line 422
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 428
      goto out_conflict;
    } else {

    }
#line 420
    n = n->next;
    ldv_49998: ;
#line 420
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 420
      __mptr___0 = (struct hlist_node  const  *)n;
#line 420
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 420
      if (1 != 0) {
#line 421
        goto ldv_49997;
      } else {
#line 423
        goto ldv_49999;
      }
    } else {

    }
    ldv_49999: ;
  } else {

  }
  out_no_conflict: 
#line 437
  put_net_conf(mdev);
#line 438
  return (0);
  out_conflict: 
#line 441
  put_net_conf(mdev);
#line 442
  return (1);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 460
  mdev = req->mdev;
#line 461
  rv = 0;
#line 462
  m->bio = 0;
#line 464
  switch ((unsigned int )what) {
  default: 
#line 466
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          466);
#line 467
  goto ldv_50008;
  case 1U: ;
#line 478
  if ((req->rq_state & 1008UL) != 0UL) {
#line 478
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            478);
  } else {

  }
#line 479
  req->rq_state = req->rq_state | 16UL;
#line 480
  inc_ap_pending(mdev);
#line 481
  goto ldv_50008;
  case 2U: ;
#line 485
  if ((req->rq_state & 15UL) != 0UL) {
#line 485
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            485);
  } else {

  }
#line 486
  req->rq_state = req->rq_state | 1UL;
#line 487
  goto ldv_50008;
  case 23U: ;
#line 490
  if ((req->rq_state & 2048UL) != 0UL) {
#line 491
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 493
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 495
  req->rq_state = req->rq_state | 6UL;
#line 496
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 498
  _req_may_be_done_not_susp(req, m);
#line 499
  goto ldv_50008;
  case 22U: 
#line 502
  req->rq_state = req->rq_state | 8UL;
#line 503
  if ((req->rq_state & 2048UL) != 0UL) {
#line 504
    _req_may_be_done_not_susp(req, m);
  } else {
#line 506
    goto goto_queue_for_net_read;
  }
#line 507
  goto ldv_50008;
  case 21U: 
#line 510
  req->rq_state = req->rq_state | 2UL;
#line 511
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 513
  __drbd_chk_io_error____1(mdev, DRBD_IO_ERROR, "__req_mod");
#line 514
  _req_may_be_done_not_susp(req, m);
#line 515
  goto ldv_50008;
  case 20U: 
#line 519
  req->rq_state = req->rq_state | 2UL;
#line 520
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 521
  _req_may_be_done_not_susp(req, m);
#line 522
  goto ldv_50008;
  case 19U: 
#line 525
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         525U);
#line 527
  req->rq_state = req->rq_state | 2UL;
#line 528
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 530
  if ((req->rq_state & 8UL) != 0UL) {
#line 531
    _req_may_be_done(req, m);
#line 532
    goto ldv_50008;
  } else {

  }
#line 535
  __drbd_chk_io_error____1(mdev, DRBD_IO_ERROR, "__req_mod");
  goto_queue_for_net_read: ;
#line 539
  if ((req->rq_state & 1008UL) != 0UL) {
#line 539
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            539);
  } else {

  }
#line 543
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 544
    _req_may_be_done_not_susp(req, m);
#line 545
    goto ldv_50008;
  } else {

  }
#line 549
  req->rq_state = req->rq_state | 16UL;
#line 550
  inc_ap_pending(mdev);
  case 4U: 
#line 563
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 563
  hlist_add_head(& req->collision, tmp);
#line 565
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 567
  if ((req->rq_state & 16UL) == 0UL) {
#line 567
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            567);
  } else {

  }
#line 568
  req->rq_state = req->rq_state | 32UL;
#line 569
  req->w.cb = (req->rq_state & 15UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 572
  drbd_queue_work(& mdev->data.work, & req->w);
#line 573
  goto ldv_50008;
  case 3U: 
#line 579
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 579
  hlist_add_head(& req->collision, tmp___0);
#line 599
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 603
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 603
  if (tmp___1 != 0) {
#line 603
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            603);
  } else {

  }
#line 605
  req->epoch = (mdev->newest_tle)->br_number;
#line 608
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 611
  if ((req->rq_state & 16UL) == 0UL) {
#line 611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            611);
  } else {

  }
#line 612
  req->rq_state = req->rq_state | 32UL;
#line 613
  req->w.cb = & w_send_dblock;
#line 614
  drbd_queue_work(& mdev->data.work, & req->w);
#line 617
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 618
    queue_barrier(mdev);
  } else {

  }
#line 620
  goto ldv_50008;
  case 5U: 
#line 623
  req->rq_state = req->rq_state | 32UL;
#line 624
  req->w.cb = & w_send_oos;
#line 625
  drbd_queue_work(& mdev->data.work, & req->w);
#line 626
  goto ldv_50008;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 633
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 636
  _req_may_be_done_not_susp(req, m);
#line 637
  goto ldv_50008;
  case 8U: ;
#line 641
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 642
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 644
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 648
    if ((req->rq_state & 16UL) != 0UL) {
#line 649
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 649
      if (tmp___2 != 0) {
#line 649
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 649
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 649
      if (tmp___4 < 0) {
#line 649
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 649
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 649, tmp___3);
      } else {

      }
#line 650
      req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 651
      req->rq_state = req->rq_state | 256UL;
    } else {

    }
  } else {

  }
#line 657
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 658
  req->rq_state = req->rq_state | 64UL;
#line 659
  _req_may_be_done_not_susp(req, m);
#line 660
  goto ldv_50008;
  case 9U: 
#line 665
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 666
  req->rq_state = req->rq_state | 128UL;
#line 667
  _req_may_be_done_not_susp(req, m);
#line 668
  goto ldv_50008;
  case 10U: ;
#line 673
  if ((req->rq_state & 16UL) != 0UL) {
#line 674
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 674
    if (tmp___5 != 0) {
#line 674
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 674
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 674
    if (tmp___7 < 0) {
#line 674
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 674
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 674, tmp___6);
    } else {

    }
  } else {

  }
#line 675
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 676
  req->rq_state = req->rq_state | 128UL;
#line 677
  if ((req->rq_state & 64UL) != 0UL && (req->rq_state & 2048UL) != 0UL) {
#line 678
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 682
  if ((req->rq_state & 32UL) == 0UL) {
#line 683
    _req_may_be_done(req, m);
  } else {

  }
#line 684
  goto ldv_50008;
  case 15U: ;
#line 690
  if ((unsigned int )what == 15U) {
#line 691
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 694
  req->rq_state = req->rq_state | 128UL;
  case 14U: ;
  case 13U: ;
#line 698
  if ((unsigned int )what == 14U) {
#line 699
    req->rq_state = req->rq_state | 512UL;
  } else {

  }
  case 12U: 
#line 709
  req->rq_state = req->rq_state | 256UL;
#line 710
  if ((req->rq_state & 16UL) == 0UL) {
#line 710
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            710);
  } else {

  }
#line 711
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 711
  if (tmp___8 != 0) {
#line 711
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 711
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 711
  if (tmp___10 < 0) {
#line 711
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 711, tmp___9);
  } else {

  }
#line 712
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 713
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 714
  _req_may_be_done_not_susp(req, m);
#line 715
  goto ldv_50008;
  case 16U: ;
#line 719
  if ((req->rq_state & 16UL) != 0UL) {
#line 720
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 720
    if (tmp___11 != 0) {
#line 720
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 720
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 720
    if (tmp___13 < 0) {
#line 720
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 720
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 720, tmp___12);
    } else {

    }
#line 721
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 723
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 725
  req->rq_state = req->rq_state | 128UL;
#line 726
  _req_may_be_done_not_susp(req, m);
#line 728
  goto ldv_50008;
  case 25U: ;
#line 731
  if ((req->rq_state & 2UL) == 0UL) {
#line 732
    goto ldv_50008;
  } else {

  }
#line 734
  _req_may_be_done(req, m);
#line 735
  goto ldv_50008;
  case 26U: ;
#line 738
  if ((req->rq_state & 2UL) == 0UL) {
#line 739
    goto ldv_50008;
  } else {

  }
#line 741
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 743
  rv = 2;
#line 744
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 745
    rv = 1;
  } else {

  }
#line 747
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 748
  req->w.cb = & w_restart_disk_io;
#line 749
  drbd_queue_work(& mdev->data.work, & req->w);
#line 750
  goto ldv_50008;
  case 24U: ;
#line 757
  if ((req->rq_state & 256UL) == 0UL) {
#line 758
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 759
      drbd_queue_work(& mdev->data.work, & req->w);
#line 760
      rv = (req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 762
    goto ldv_50008;
  } else {

  }
  case 17U: ;
#line 767
  if ((req->rq_state & 2048UL) == 0UL) {
#line 768
    goto ldv_50008;
  } else {

  }
#line 770
  if ((req->rq_state & 16UL) != 0UL) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 775
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 777
  if ((req->rq_state & 1008UL) != 0UL) {
#line 778
    req->rq_state = req->rq_state | 128UL;
#line 779
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 780
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 782
  _req_may_be_done(req, m);
#line 783
  goto ldv_50008;
  case 18U: ;
#line 786
  if ((req->rq_state & 16UL) == 0UL) {
#line 786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            786);
  } else {

  }
#line 787
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 787
  if (tmp___14 != 0) {
#line 787
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 787
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 787
  if (tmp___16 < 0) {
#line 787
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 787, tmp___15);
  } else {

  }
#line 788
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 789
  req->rq_state = req->rq_state | 384UL;
#line 790
  _req_may_be_done_not_susp(req, m);
#line 791
  goto ldv_50008;
  }
  ldv_50008: ;
#line 794
  return (rv);
}
}
#line 804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 809
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 810
    return (1);
  } else {

  }
#line 811
  if ((int )mdev->state.ldv_38802.disk > 4) {
#line 812
    return (0);
  } else {

  }
#line 813
  if ((int )mdev->state.ldv_38802.disk <= 3) {
#line 814
    return (0);
  } else {

  }
#line 816
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 817
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 819
  if (sector >= nr_sectors) {
#line 819
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            819);
  } else {

  }
#line 820
  if (esector >= nr_sectors) {
#line 820
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            820);
  } else {

  }
#line 822
  sbnr = sector >> 3;
#line 823
  ebnr = esector >> 3;
#line 825
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 825
  return (tmp == 0);
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  int congested ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 830
  congested = 0;
#line 837
  tmp = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 837
  if (tmp == 0) {
#line 838
    return;
  } else {

  }
#line 840
  if ((mdev->net_conf)->cong_fill != 0) {
#line 840
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 840
    if (tmp___0 >= (mdev->net_conf)->cong_fill) {
#line 842
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 843
      congested = 1;
    } else {

    }
  } else {

  }
#line 846
  if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 847
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 848
    congested = 1;
  } else {

  }
#line 851
  if (congested != 0) {
#line 852
    queue_barrier(mdev);
#line 854
    if ((mdev->net_conf)->on_congestion == 1) {
#line 855
      __ns.i = mdev->state.i;
#line 855
      __ns.ldv_38802.conn = 22U;
#line 855
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 857
      __ns___0.i = mdev->state.i;
#line 857
      __ns___0.ldv_38802.conn = 1U;
#line 857
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 859
  put_ldev(mdev);
#line 860
  return;
}
}
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  union drbd_state s ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 864
  rw = (int const   )bio->bi_rw & (int const   )4097;
#line 865
  size = (int const   )bio->bi_size;
#line 866
  sector = bio->bi_sector;
#line 867
  b = 0;
#line 869
  send_oos = 0;
#line 870
  err = -5;
#line 871
  ret = 0;
#line 875
  req = drbd_req_new(mdev, bio);
#line 876
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 877
    dec_ap_bio(mdev);
#line 880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 881
    bio_endio(bio, -12);
#line 882
    return (0);
  } else {

  }
#line 884
  req->start_time = start_time;
#line 886
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 887
  if (local == 0) {
#line 888
    bio_put(req->private_bio);
#line 889
    req->private_bio = 0;
  } else {

  }
#line 891
  if (rw == 1) {
#line 892
    remote = 1;
  } else {
#line 895
    if (local != 0) {
#line 896
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 896
      if (tmp == 0) {
#line 902
        local = 0;
#line 903
        bio_put(req->private_bio);
#line 904
        req->private_bio = 0;
#line 905
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 908
    remote = local == 0 && (int )mdev->state.ldv_38802.pdsk > 7;
  }
#line 919
  if ((rw == 4096 && (int )mdev->state.ldv_38802.disk > 3) && local == 0) {
#line 920
    err = -11;
#line 921
    goto fail_and_free_req;
  } else {

  }
#line 929
  if (rw == 1 && local != 0) {
#line 929
    tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 929
    if (tmp___0 == 0) {
#line 930
      req->rq_state = req->rq_state | 4096UL;
#line 931
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 934
  s = mdev->state;
#line 935
  if (remote != 0) {
#line 935
    tmp___1 = drbd_should_do_remote(s);
#line 935
    if ((int )tmp___1) {
#line 935
      tmp___2 = 1;
    } else {
#line 935
      tmp___2 = 0;
    }
  } else {
#line 935
    tmp___2 = 0;
  }
#line 935
  remote = tmp___2;
#line 936
  if (rw == 1) {
#line 936
    tmp___3 = drbd_should_send_oos(s);
#line 936
    if ((int )tmp___3) {
#line 936
      tmp___4 = 1;
    } else {
#line 936
      tmp___4 = 0;
    }
  } else {
#line 936
    tmp___4 = 0;
  }
#line 936
  send_oos = tmp___4;
#line 937
  if (remote != 0 && send_oos != 0) {
#line 937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            937);
  } else {

  }
#line 939
  if (local == 0 && remote == 0) {
#line 939
    tmp___6 = is_susp(mdev->state);
#line 939
    if (tmp___6 == 0) {
#line 940
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 940
      if (tmp___5 != 0) {
#line 941
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 942
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 951
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 951
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 951
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 955
      tmp___7 = kmalloc(56UL, 16U);
#line 955
      b = (struct drbd_tl_epoch *)tmp___7;
#line 956
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 957
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 958
        err = -12;
#line 959
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 964
  spin_lock_irq(& mdev->req_lock);
#line 966
  tmp___9 = is_susp(mdev->state);
#line 966
  if (tmp___9 != 0) {
#line 971
    ret = 1;
#line 972
    spin_unlock_irq(& mdev->req_lock);
#line 973
    goto fail_free_complete;
  } else {

  }
#line 976
  if (remote != 0 || send_oos != 0) {
#line 977
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 977
    remote = (int )tmp___10;
#line 978
    if (rw == 1) {
#line 978
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 978
      if ((int )tmp___11) {
#line 978
        tmp___12 = 1;
      } else {
#line 978
        tmp___12 = 0;
      }
    } else {
#line 978
      tmp___12 = 0;
    }
#line 978
    send_oos = tmp___12;
#line 979
    if (remote != 0 && send_oos != 0) {
#line 979
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              979);
    } else {

    }
#line 981
    if (remote == 0 && send_oos == 0) {
#line 982
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 983
    if (local == 0 && remote == 0) {
#line 984
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 985
      spin_unlock_irq(& mdev->req_lock);
#line 986
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 990
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 991
    mdev->unused_spare_tle = b;
#line 992
    b = 0;
  } else {

  }
#line 994
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 994
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 994
    if (tmp___13 != 0) {
#line 999
      spin_unlock_irq(& mdev->req_lock);
#line 1000
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 1005
  _drbd_start_io_acct(mdev, req, bio);
#line 1017
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1017
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 1017
    if (tmp___15 != 0) {
#line 1019
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 1020
      mdev->unused_spare_tle = 0;
    } else {
#line 1017
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1022
  if (remote != 0 && rw == 1) {
#line 1022
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 1022
    if (tmp___14 != 0) {
#line 1022
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1023);
    } else {

    }
  } else {

  }
#line 1041
  if (remote != 0) {
#line 1042
    _req_mod(req, to_be_send);
  } else {

  }
#line 1043
  if (local != 0) {
#line 1044
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1049
  if (rw == 1) {
#line 1049
    tmp___16 = _req_conflicts(req);
#line 1049
    if (tmp___16 != 0) {
#line 1050
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1052
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 1056
  if (remote != 0) {
#line 1061
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1065
  if (send_oos != 0) {
#line 1065
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1065U);
#line 1065
    if (tmp___17 != 0) {
#line 1066
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1068
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1070
    maybe_pull_ahead(mdev);
  } else {

  }
#line 1072
  spin_unlock_irq(& mdev->req_lock);
#line 1073
  kfree((void const   *)b);
#line 1075
  if (local != 0) {
#line 1076
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1083
    tmp___19 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1083
    if (tmp___19 != 0) {
#line 1084
      tmp___18 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1084
      if (tmp___18 != 0) {
#line 1087
        bio_endio(req->private_bio, -5);
      } else {
#line 1089
        generic_make_request(req->private_bio);
      }
#line 1090
      put_ldev(mdev);
    } else {
#line 1092
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1095
  return (0);
  fail_conflicting: 
#line 1104
  _drbd_end_io_acct(mdev, req);
#line 1105
  spin_unlock_irq(& mdev->req_lock);
#line 1106
  if (remote != 0) {
#line 1107
    tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1107
    if (tmp___20 != 0) {
#line 1107
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1107
    tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1107
    if (tmp___22 < 0) {
#line 1107
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1107
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1107, tmp___21);
    } else {

    }
  } else {

  }
#line 1110
  err = 0;
  fail_free_complete: ;
#line 1113
  if ((req->rq_state & 4096UL) != 0UL) {
#line 1114
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1116
  if (local != 0) {
#line 1117
    bio_put(req->private_bio);
#line 1118
    req->private_bio = 0;
#line 1119
    put_ldev(mdev);
  } else {

  }
#line 1121
  if (ret == 0) {
#line 1122
    bio_endio(bio, err);
  } else {

  }
#line 1124
  drbd_req_free(req);
#line 1125
  dec_ap_bio(mdev);
#line 1126
  kfree((void const   *)b);
#line 1128
  return (ret);
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1138
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1140
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1140
    if (tmp___1 != 0) {
#line 1141
      tmp = get_current();
#line 1141
      tmp___0 = get_current();
#line 1141
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1147
    return (1);
  } else {

  }
#line 1150
  return (0);
}
}
#line 1153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1156
  mdev = (struct drbd_conf *)q->queuedata;
#line 1159
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1159
  if (tmp != 0) {
#line 1160
    bio_endio(bio, -1);
#line 1161
    return;
  } else {

  }
#line 1164
  start_time = jiffies;
#line 1169
  if ((bio->bi_size & 511U) != 0U) {
#line 1169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1169);
  } else {

  }
#line 1173
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1174
  e_enr = bio->bi_size != 0U ? (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8) : s_enr;
#line 1176
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1176
  if (tmp___1 != 0L) {
    ldv_50106: 
#line 1178
    inc_ap_bio(mdev, 1);
#line 1179
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1179
    if (tmp___0 != 0) {
#line 1180
      goto ldv_50106;
    } else {

    }

#line 1180
    return;
  } else {

  }
#line 1185
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1187
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1191
    bio_endio(bio, -22);
  } else {
#line 1203
    sect = bio->bi_sector;
#line 1204
    sps = 256;
#line 1205
    mask = sps + -1;
#line 1206
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1207
    bp = bio_split(bio, (int )first_sectors);
#line 1214
    inc_ap_bio(mdev, 3);
#line 1216
    if (s_enr + 1U != e_enr) {
#line 1216
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1216);
    } else {

    }
#line 1218
    goto ldv_50114;
    ldv_50113: 
#line 1219
    inc_ap_bio(mdev, 1);
    ldv_50114: 
#line 1218
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1218
    if (tmp___2 != 0) {
#line 1219
      goto ldv_50113;
    } else {

    }

#line 1221
    goto ldv_50117;
    ldv_50116: 
#line 1222
    inc_ap_bio(mdev, 1);
    ldv_50117: 
#line 1221
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1221
    if (tmp___3 != 0) {
#line 1222
      goto ldv_50116;
    } else {

    }
#line 1224
    dec_ap_bio(mdev);
#line 1226
    bio_pair_release(bp);
  }
#line 1228
  return;
}
}
#line 1243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1245
  mdev = (struct drbd_conf *)q->queuedata;
#line 1246
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1248
  bio_size = bvm->bi_size;
#line 1251
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1253
  if (limit < 0) {
#line 1254
    limit = 0;
  } else {

  }
#line 1255
  if (bio_size == 0U) {
#line 1256
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1257
      limit = (int )bvec->bv_len;
    } else
#line 1258
    if (limit != 0) {
#line 1258
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1258
      if (tmp != 0) {
#line 1259
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1261
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1262
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1263
          _min1 = limit;
#line 1263
          _min2 = backing_limit;
#line 1263
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1265
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1267
  return (limit);
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  int tmp ;
  int tmp___0 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1272
  mdev = (struct drbd_conf *)data;
#line 1275
  ent = 0UL;
#line 1275
  dt = 0UL;
#line 1278
  tmp = get_net_conf(mdev);
#line 1278
  if (tmp != 0) {
#line 1279
    if ((int )mdev->state.ldv_38802.conn > 8) {
#line 1280
      ent = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
    } else {

    }
#line 1282
    put_net_conf(mdev);
  } else {

  }
#line 1284
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1284
  if (tmp___0 != 0) {
#line 1285
    dt = (unsigned long )(((mdev->ldev)->dc.disk_timeout * 250) / 10);
#line 1286
    put_ldev(mdev);
  } else {

  }
#line 1288
  __x = dt;
#line 1288
  __y = ent;
#line 1288
  if (__x != 0UL) {
#line 1288
    if (__y != 0UL) {
#line 1288
      _min1 = __x;
#line 1288
      _min2 = __y;
#line 1288
      tmp___1 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1288
      tmp___1 = __x;
    }
#line 1288
    tmp___2 = tmp___1;
  } else {
#line 1288
    tmp___2 = __y;
  }
#line 1288
  et = tmp___2;
#line 1290
  if (et == 0UL) {
#line 1291
    return;
  } else {

  }
#line 1293
  now = jiffies;
#line 1295
  spin_lock_irq(& mdev->req_lock);
#line 1296
  le = & (mdev->oldest_tle)->requests;
#line 1297
  tmp___3 = list_empty((struct list_head  const  *)le);
#line 1297
  if (tmp___3 != 0) {
#line 1298
    spin_unlock_irq(& mdev->req_lock);
#line 1299
    mod_timer(& mdev->request_timer, now + et);
#line 1300
    return;
  } else {

  }
#line 1303
  le = le->prev;
#line 1304
  __mptr = (struct list_head  const  *)le;
#line 1304
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1324
  if (((ent != 0UL && (req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1325
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1326
    __ns.i = mdev->state.i;
#line 1326
    __ns.ldv_38802.conn = 3U;
#line 1326
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1330
  if (((dt != 0UL && (int )req->rq_state & 1) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1331
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1332
    __drbd_chk_io_error____1(mdev, DRBD_FORCE_DETACH, "request_timer_fn");
  } else {

  }
#line 1334
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1335
  spin_unlock_irq(& mdev->req_lock);
#line 1336
  mod_timer(& mdev->request_timer, nt);
#line 1337
  return;
}
}
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1344
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1346
  mutex_lock(ldv_func_arg1);
#line 1347
  return;
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1354
  tmp = mutex_trylock(ldv_func_arg1);
#line 1354
  ldv_func_res = tmp;
#line 1356
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1356
  return (tmp___0);
#line 1358
  return (ldv_func_res);
}
}
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1366
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1368
  mutex_unlock(ldv_func_arg1);
#line 1369
  return;
}
}
#line 1371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1376
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1378
  mutex_lock(ldv_func_arg1);
#line 1379
  return;
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1386
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1388
  mutex_unlock(ldv_func_arg1);
#line 1389
  return;
}
}
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1396
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1398
  mutex_lock(ldv_func_arg1);
#line 1399
  return;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1406
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1408
  mutex_unlock(ldv_func_arg1);
#line 1409
  return;
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1416
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1418
  mutex_unlock(ldv_func_arg1);
#line 1419
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5521;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5521;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5521;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5521;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5521: ;
#line 211
  return (__ret);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) ;
#line 754 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 756
  return ((bdev->bd_disk)->queue);
}
}
#line 1033 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1035
  retval = 512;
#line 1037
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1038
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1040
  return ((unsigned short )retval);
}
}
#line 1043 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1045
  tmp = bdev_get_queue(bdev);
#line 1045
  tmp___0 = queue_logical_block_size(tmp);
#line 1045
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1575 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1577
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1704
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1714
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1715
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1723
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1856 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1860
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1862
  if ((unsigned int )forcedetach == 0U) {
#line 1863
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1863
    if (tmp != 0) {
#line 1864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1865
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1866
      __ns.i = mdev->state.i;
#line 1866
      __ns.ldv_38802.disk = 4U;
#line 1866
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1867
    goto ldv_48600;
  } else {

  }
  case 2: ;
  case 1: 
#line 1872
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1873
  if ((unsigned int )forcedetach == 2U) {
#line 1874
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1875
  if ((int )mdev->state.ldv_38802.disk > 2) {
#line 1876
    __ns___0.i = mdev->state.i;
#line 1876
    __ns___0.ldv_38802.disk = 2U;
#line 1876
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1880
  goto ldv_48600;
  }
  ldv_48600: ;
#line 1883
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1896
  if (error != 0) {
#line 1898
    tmp = spinlock_check(& mdev->req_lock);
#line 1898
    flags = _raw_spin_lock_irqsave(tmp);
#line 1899
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1900
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1902
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 127
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 127
  if (r == 0 || (int )mdev->state.ldv_38802.disk <= 2) {
#line 127
    goto ldv_48900;
  } else {

  }
#line 127
  tmp = get_current();
#line 127
  __wait.flags = 0U;
#line 127
  __wait.private = (void *)tmp;
#line 127
  __wait.func = & autoremove_wake_function;
#line 127
  __wait.task_list.next = & __wait.task_list;
#line 127
  __wait.task_list.prev = & __wait.task_list;
  ldv_48903: 
#line 127
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 127
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 127
  if (r == 0 || (int )mdev->state.ldv_38802.disk <= 2) {
#line 127
    goto ldv_48902;
  } else {

  }
#line 127
  schedule();
#line 127
  goto ldv_48903;
  ldv_48902: 
#line 127
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48900: ;
#line 131
  if (r == 0) {
#line 131
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 131
    tmp___1 = tmp___0;
  } else {
#line 131
    tmp___1 = 0;
  }
#line 131
  return (tmp___1);
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 136
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 136
  if (tmp != 0) {
#line 137
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 138
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static bool md_io_allowed(struct drbd_conf *mdev ) 
{ 
  enum drbd_disk_state ds ;

  {
#line 142
  ds = (enum drbd_disk_state )mdev->state.ldv_38802.disk;
#line 143
  return ((bool )((unsigned int )ds > 2U || (unsigned int )ds == 1U));
}
}
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) 
{ 
  long dt ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
#line 149
  dt = (long )((bdev->dc.disk_timeout * 250) / 10);
#line 150
  if (dt == 0L) {
#line 151
    dt = 9223372036854775807L;
  } else {

  }
#line 153
  __ret = dt;
#line 153
  if (*done == 0U) {
#line 153
    tmp___2 = md_io_allowed(mdev);
#line 153
    if ((int )tmp___2) {
#line 153
      tmp = get_current();
#line 153
      __wait.flags = 0U;
#line 153
      __wait.private = (void *)tmp;
#line 153
      __wait.func = & autoremove_wake_function;
#line 153
      __wait.task_list.next = & __wait.task_list;
#line 153
      __wait.task_list.prev = & __wait.task_list;
      ldv_48920: 
#line 153
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 153
      if (*done != 0U) {
#line 153
        goto ldv_48919;
      } else {
#line 153
        tmp___0 = md_io_allowed(mdev);
#line 153
        if (tmp___0) {
#line 153
          tmp___1 = 0;
        } else {
#line 153
          tmp___1 = 1;
        }
#line 153
        if (tmp___1) {
#line 153
          goto ldv_48919;
        } else {

        }
      }
#line 153
      __ret = schedule_timeout(__ret);
#line 153
      if (__ret == 0L) {
#line 153
        goto ldv_48919;
      } else {

      }
#line 153
      goto ldv_48920;
      ldv_48919: 
#line 153
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 153
  dt = __ret;
#line 154
  if (dt == 0L) {
#line 155
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
  } else {

  }
#line 156
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 166
  mdev->md_io.done = 0U;
#line 167
  mdev->md_io.error = -19;
#line 169
  if (rw & 1) {
#line 169
    tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 169
    if (tmp == 0) {
#line 170
      rw = rw | 3072;
    } else {

    }
  } else {

  }
#line 171
  rw = rw | 16;
#line 173
  bio = bio_alloc_drbd(16U);
#line 174
  bio->bi_bdev = bdev->md_bdev;
#line 175
  bio->bi_sector = sector;
#line 176
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 176
  ok = tmp___0 == size;
#line 177
  if (ok == 0) {
#line 178
    goto out;
  } else {

  }
#line 179
  bio->bi_private = (void *)(& mdev->md_io);
#line 180
  bio->bi_end_io = & drbd_md_io_complete;
#line 181
  bio->bi_rw = (unsigned long )rw;
#line 183
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 183
  if (tmp___1 == 0) {
#line 184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 185
    ok = 0;
#line 186
    goto out;
  } else {

  }
#line 189
  atomic_inc(& bio->bi_cnt);
#line 190
  atomic_inc(& mdev->md_io_in_use);
#line 191
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 191
  if (tmp___2 != 0) {
#line 192
    bio_endio(bio, -5);
  } else {
#line 194
    submit_bio(rw, bio);
  }
#line 195
  wait_until_done_or_disk_failure(mdev, bdev, & mdev->md_io.done);
#line 196
  ok = (int )bio->bi_flags & 1 && mdev->md_io.error == 0;
  out: 
#line 199
  bio_put(bio);
#line 200
  return (ok);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 207
  offset = 0;
#line 208
  iop = mdev->md_io_page;
#line 210
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 210
  if (tmp != 1) {
#line 210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            210);
  } else {

  }
#line 212
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 212
  if (tmp___0 != 0L) {
#line 212
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (212), "i" (12UL));
    ldv_48944: ;
#line 212
    goto ldv_48944;
  } else {

  }
#line 214
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 214
  logical_block_size = (int )tmp___1;
#line 215
  if (logical_block_size == 0) {
#line 216
    logical_block_size = 512;
  } else {

  }
#line 219
  if (logical_block_size != 512) {
#line 220
    mask = logical_block_size / 512 + -1;
#line 221
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 221
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              221);
    } else {

    }
#line 222
    if ((mask + 1) * 512 != logical_block_size) {
#line 222
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              222);
    } else {

    }
#line 223
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 224
    sector = (sector_t )(~ mask) & sector;
#line 225
    iop = mdev->md_io_tmpp;
#line 227
    if (rw & 1) {
#line 230
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 230
      p = tmp___2;
#line 231
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 231
      hp = tmp___3;
#line 233
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 236
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 236
      if (tmp___4 != 0L) {
#line 237
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 240
        return (0);
      } else {

      }
#line 243
      __len = 512UL;
#line 243
      if (__len > 63UL) {
#line 243
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 243
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 247
  tmp___7 = drbd_md_first_sector(bdev);
#line 247
  if (tmp___7 > sector) {
#line 249
    tmp___5 = get_current();
#line 249
    tmp___6 = get_current();
#line 249
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 247
    tmp___8 = drbd_md_last_sector(bdev);
#line 247
    if (tmp___8 < sector) {
#line 249
      tmp___5 = get_current();
#line 249
      tmp___6 = get_current();
#line 249
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 253
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 254
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 254
  if (tmp___9 != 0L) {
#line 255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 257
    return (0);
  } else {

  }
#line 260
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 261
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 261
    p___0 = tmp___10;
#line 262
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 262
    hp___0 = tmp___11;
#line 264
    __len___0 = 512UL;
#line 264
    if (__len___0 > 63UL) {
#line 264
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 264
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 267
  return (ok);
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 274
  al_flags = 0UL;
#line 277
  spin_lock_irq(& mdev->al_lock);
#line 278
  tmp = lc_find(mdev->resync, enr / 4U);
#line 279
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 279
  if (tmp___2 != 0L) {
#line 280
    __mptr = (struct lc_element  const  *)tmp;
#line 280
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 281
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 281
    if (tmp___1 != 0) {
#line 282
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 282
      wake = tmp___0 == 0;
#line 283
      spin_unlock_irq(& mdev->al_lock);
#line 284
      if (wake != 0) {
#line 285
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 286
      return (0);
    } else {

    }
  } else {

  }
#line 289
  al_ext = lc_get(mdev->act_log, enr);
#line 290
  al_flags = (mdev->act_log)->flags;
#line 291
  spin_unlock_irq(& mdev->al_lock);
#line 302
  return (al_ext);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 307
  enr = (unsigned int )(sector >> 13);
#line 311
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 311
  if (tmp <= 0) {
#line 311
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            311);
  } else {

  }
#line 313
  al_ext = _al_get(mdev, enr);
#line 313
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 313
    goto ldv_48974;
  } else {

  }
#line 313
  tmp___0 = get_current();
#line 313
  __wait.flags = 0U;
#line 313
  __wait.private = (void *)tmp___0;
#line 313
  __wait.func = & autoremove_wake_function;
#line 313
  __wait.task_list.next = & __wait.task_list;
#line 313
  __wait.task_list.prev = & __wait.task_list;
  ldv_48977: 
#line 313
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 313
  al_ext = _al_get(mdev, enr);
#line 313
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 313
    goto ldv_48976;
  } else {

  }
#line 313
  schedule();
#line 313
  goto ldv_48977;
  ldv_48976: 
#line 313
  finish_wait(& mdev->al_wait, & __wait);
  ldv_48974: ;
#line 315
  if (al_ext->lc_number != enr) {
#line 322
    init_completion(& al_work.event);
#line 323
    al_work.al_ext = al_ext;
#line 324
    al_work.enr = enr;
#line 325
    al_work.old_enr = al_ext->lc_number;
#line 326
    al_work.w.cb = & w_al_write_transaction;
#line 327
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 328
    wait_for_completion(& al_work.event);
#line 330
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 332
    spin_lock_irq(& mdev->al_lock);
#line 333
    lc_changed(mdev->act_log, al_ext);
#line 334
    spin_unlock_irq(& mdev->al_lock);
#line 335
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 337
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 341
  enr = (unsigned int )(sector >> 13);
#line 345
  tmp = spinlock_check(& mdev->al_lock);
#line 345
  flags = _raw_spin_lock_irqsave(tmp);
#line 347
  extent = lc_find(mdev->act_log, enr);
#line 349
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 350
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 352
    return;
  } else {

  }
#line 355
  tmp___0 = lc_put(mdev->act_log, extent);
#line 355
  if (tmp___0 == 0U) {
#line 356
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 358
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 359
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 372
  return (al_enr >> 5);
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 381
  return (rs_enr >> 3);
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 391
  __mptr = (struct drbd_work  const  *)w;
#line 391
  aw = (struct update_al_work *)__mptr;
#line 392
  updated = aw->al_ext;
#line 393
  new_enr = aw->enr;
#line 394
  evicted = aw->old_enr;
#line 399
  xor_sum = 0U;
#line 401
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 401
  if (tmp___0 == 0) {
#line 402
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.disk);
#line 402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 405
    complete(& ((struct update_al_work *)w)->event);
#line 406
    return (1);
  } else {

  }
#line 414
  if ((int )mdev->state.ldv_38802.conn <= 9 && evicted != 4294967295U) {
#line 415
    tmp___1 = al_extent_to_bm_page(evicted);
#line 415
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 418
  if ((int )mdev->state.ldv_38802.disk <= 3) {
#line 419
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.disk);
#line 419
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 422
    complete(& ((struct update_al_work *)w)->event);
#line 423
    put_ldev(mdev);
#line 424
    return (1);
  } else {

  }
#line 427
  tmp___3 = drbd_md_get_buffer(mdev);
#line 427
  buffer = (struct al_transaction *)tmp___3;
#line 428
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 430
    complete(& ((struct update_al_work *)w)->event);
#line 431
    put_ldev(mdev);
#line 432
    return (1);
  } else {

  }
#line 435
  buffer->magic = 1728214147U;
#line 436
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 436
  buffer->tr_number = tmp___4;
#line 438
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 438
  n = (int )tmp___5;
#line 440
  tmp___6 = __fswab32((__u32 )n);
#line 440
  buffer->updates[0].pos = tmp___6;
#line 441
  tmp___7 = __fswab32(new_enr);
#line 441
  buffer->updates[0].extent = tmp___7;
#line 443
  xor_sum = xor_sum ^ new_enr;
#line 445
  __min1 = 61;
#line 445
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 445
  mx = __min1 < __min2 ? __min1 : __min2;
#line 447
  i = 0;
#line 447
  goto ldv_49017;
  ldv_49016: 
#line 448
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 449
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 449
  extent_nr = tmp___8->lc_number;
#line 450
  tmp___9 = __fswab32(idx);
#line 450
  buffer->updates[i + 1].pos = tmp___9;
#line 451
  tmp___10 = __fswab32(extent_nr);
#line 451
  buffer->updates[i + 1].extent = tmp___10;
#line 452
  xor_sum = xor_sum ^ extent_nr;
#line 447
  i = i + 1;
  ldv_49017: ;
#line 447
  if (i < mx) {
#line 448
    goto ldv_49016;
  } else {

  }

#line 454
  goto ldv_49020;
  ldv_49019: 
#line 455
  buffer->updates[i + 1].pos = 4294967295U;
#line 456
  buffer->updates[i + 1].extent = 4294967295U;
#line 457
  xor_sum = ~ xor_sum;
#line 454
  i = i + 1;
  ldv_49020: ;
#line 454
  if (i <= 60) {
#line 455
    goto ldv_49019;
  } else {

  }
#line 459
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 460
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 461
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 463
  tmp___11 = __fswab32(xor_sum);
#line 463
  buffer->xor_sum = tmp___11;
#line 465
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 468
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 468
  if (tmp___12 == 0) {
#line 469
    drbd_chk_io_error____0(mdev, 1, DRBD_META_IO_ERROR, "w_al_write_transaction");
  } else {

  }
#line 471
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 471
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 473
    mdev->al_tr_pos = 0;
  } else {

  }
#line 475
  if (mdev->al_tr_pos > 63) {
#line 475
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            475);
  } else {

  }
#line 476
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 478
  drbd_md_put_buffer(mdev);
#line 480
  complete(& ((struct update_al_work *)w)->event);
#line 481
  put_ldev(mdev);
#line 483
  return (1);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 502
  xor_sum = 0U;
#line 504
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 508
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 508
  if (tmp == 0) {
#line 509
    return (-1);
  } else {

  }
#line 511
  tmp___0 = __fswab32(b->magic);
#line 511
  rv = tmp___0 == 2205418087U;
#line 513
  i = 0;
#line 513
  goto ldv_49034;
  ldv_49033: 
#line 514
  tmp___1 = __fswab32(b->updates[i].extent);
#line 514
  xor_sum = tmp___1 ^ xor_sum;
#line 513
  i = i + 1;
  ldv_49034: ;
#line 513
  if (i <= 61) {
#line 514
    goto ldv_49033;
  } else {

  }
#line 515
  tmp___2 = __fswab32(b->xor_sum);
#line 515
  rv = (tmp___2 == xor_sum) & rv;
#line 517
  return (rv);
}
}
#line 527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 533
  active_extents = 0;
#line 534
  transactions = 0;
#line 535
  found_valid = 0;
#line 536
  from = 0;
#line 537
  to = 0;
#line 538
  from_tnr = 0U;
#line 539
  to_tnr = 0U;
#line 542
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 547
  tmp = drbd_md_get_buffer(mdev);
#line 547
  buffer = (struct al_transaction *)tmp;
#line 548
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 549
    return (0);
  } else {

  }
#line 552
  i = 0;
#line 552
  goto ldv_49054;
  ldv_49053: 
#line 553
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 554
  if (rv == 0) {
#line 555
    goto ldv_49052;
  } else {

  }
#line 556
  if (rv == -1) {
#line 557
    drbd_md_put_buffer(mdev);
#line 558
    return (0);
  } else {

  }
#line 560
  tmp___0 = __fswab32(buffer->tr_number);
#line 560
  cnr = tmp___0;
#line 562
  found_valid = found_valid + 1;
#line 562
  if (found_valid == 1) {
#line 563
    from = i;
#line 564
    to = i;
#line 565
    from_tnr = cnr;
#line 566
    to_tnr = cnr;
#line 567
    goto ldv_49052;
  } else {

  }
#line 569
  if ((int )cnr - (int )from_tnr < 0) {
#line 570
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 570
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              570);
    } else {

    }
#line 571
    from = i;
#line 572
    from_tnr = cnr;
  } else {

  }
#line 574
  if ((int )cnr - (int )to_tnr > 0) {
#line 575
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 575
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              575);
    } else {

    }
#line 576
    to = i;
#line 577
    to_tnr = cnr;
  } else {

  }
  ldv_49052: 
#line 552
  i = i + 1;
  ldv_49054: ;
#line 552
  if (i <= mx) {
#line 553
    goto ldv_49053;
  } else {

  }

#line 581
  if (found_valid == 0) {
#line 582
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 583
    drbd_md_put_buffer(mdev);
#line 584
    return (1);
  } else {

  }
#line 589
  i = from;
  ldv_49069: 
#line 595
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 596
  _b = rv == 0;
#line 596
  if (_b != 0) {
#line 596
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            596);
  } else {

  }
#line 596
  if (_b != 0) {
#line 596
    goto cancel;
  } else {

  }
#line 597
  if (rv == -1) {
#line 598
    drbd_md_put_buffer(mdev);
#line 599
    return (0);
  } else {

  }
#line 602
  tmp___1 = __fswab32(buffer->tr_number);
#line 602
  trn = tmp___1;
#line 604
  spin_lock_irq(& mdev->al_lock);
#line 610
  j = 61;
#line 610
  goto ldv_49066;
  ldv_49065: 
#line 611
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 611
  pos = (int )tmp___2;
#line 612
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 612
  extent_nr = tmp___3;
#line 614
  if (extent_nr == 4294967295U) {
#line 615
    goto ldv_49064;
  } else {

  }
#line 617
  lc_set(mdev->act_log, extent_nr, pos);
#line 618
  active_extents = active_extents + 1;
  ldv_49064: 
#line 610
  j = j - 1;
  ldv_49066: ;
#line 610
  if (j >= 0) {
#line 611
    goto ldv_49065;
  } else {

  }
#line 620
  spin_unlock_irq(& mdev->al_lock);
#line 622
  transactions = transactions + 1;
  cancel: ;
#line 625
  if (i == to) {
#line 626
    goto ldv_49068;
  } else {

  }
#line 627
  i = i + 1;
#line 628
  if (i > mx) {
#line 629
    i = 0;
  } else {

  }
#line 630
  goto ldv_49069;
  ldv_49068: 
#line 632
  mdev->al_tr_number = to_tnr + 1U;
#line 633
  mdev->al_tr_pos = to;
#line 634
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 634
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 636
    mdev->al_tr_pos = 0;
  } else {

  }
#line 639
  drbd_md_put_buffer(mdev);
#line 641
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 644
  return (1);
}
}
#line 651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 654
  add = 0UL;
#line 658
  tmp___0 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___0 != 0) {
#line 658
    goto ldv_49078;
  } else {

  }
#line 658
  tmp___1 = get_current();
#line 658
  __wait.flags = 0U;
#line 658
  __wait.private = (void *)tmp___1;
#line 658
  __wait.func = & autoremove_wake_function;
#line 658
  __wait.task_list.next = & __wait.task_list;
#line 658
  __wait.task_list.prev = & __wait.task_list;
  ldv_49081: 
#line 658
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 658
  tmp___2 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___2 != 0) {
#line 658
    goto ldv_49080;
  } else {

  }
#line 658
  schedule();
#line 658
  goto ldv_49081;
  ldv_49080: 
#line 658
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49078: 
#line 660
  i = 0;
#line 660
  goto ldv_49086;
  ldv_49085: 
#line 661
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 661
  enr = tmp___3->lc_number;
#line 662
  if (enr == 4294967295U) {
#line 663
    goto ldv_49082;
  } else {

  }
#line 664
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 664
  tmp = (int )tmp___4;
#line 665
  descriptor.modname = "drbd";
#line 665
  descriptor.function = "drbd_al_apply_to_bm";
#line 665
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 665
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 665
  descriptor.lineno = 665U;
#line 665
  descriptor.flags = 0U;
#line 665
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 665
  if (tmp___5 != 0L) {
#line 665
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 666
  add = (unsigned long )tmp + add;
  ldv_49082: 
#line 660
  i = i + 1;
  ldv_49086: ;
#line 660
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 661
    goto ldv_49085;
  } else {

  }
#line 669
  lc_unlock(mdev->act_log);
#line 670
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 672
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 672
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 673
  return;
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 680
  spin_lock_irq(& mdev->al_lock);
#line 681
  rv = al_ext->refcnt == 0U;
#line 682
  tmp = __builtin_expect(rv != 0, 1L);
#line 682
  if (tmp != 0L) {
#line 683
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 684
  spin_unlock_irq(& mdev->al_lock);
#line 686
  return (rv);
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 703
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 703
  if (tmp == 0) {
#line 703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            703);
  } else {

  }
#line 705
  i = 0;
#line 705
  goto ldv_49104;
  ldv_49103: 
#line 706
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 707
  if (al_ext->lc_number == 4294967295U) {
#line 708
    goto ldv_49098;
  } else {

  }
#line 709
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 709
  if (tmp___0 != 0) {
#line 709
    goto ldv_49099;
  } else {

  }
#line 709
  tmp___1 = get_current();
#line 709
  __wait.flags = 0U;
#line 709
  __wait.private = (void *)tmp___1;
#line 709
  __wait.func = & autoremove_wake_function;
#line 709
  __wait.task_list.next = & __wait.task_list;
#line 709
  __wait.task_list.prev = & __wait.task_list;
  ldv_49102: 
#line 709
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 709
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 709
  if (tmp___2 != 0) {
#line 709
    goto ldv_49101;
  } else {

  }
#line 709
  schedule();
#line 709
  goto ldv_49102;
  ldv_49101: 
#line 709
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49099: ;
  ldv_49098: 
#line 705
  i = i + 1;
  ldv_49104: ;
#line 705
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 706
    goto ldv_49103;
  } else {

  }
#line 712
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 713
  return;
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 717
  __mptr = (struct drbd_work  const  *)w;
#line 717
  udw = (struct update_odbm_work *)__mptr;
#line 719
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 719
  if (tmp___0 == 0) {
#line 720
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 720
    if (tmp != 0) {
#line 721
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 722
    kfree((void const   *)udw);
#line 723
    return (1);
  } else {

  }
#line 726
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 726
  drbd_bm_write_page(mdev, tmp___1);
#line 727
  put_ldev(mdev);
#line 729
  kfree((void const   *)udw);
#line 731
  tmp___2 = drbd_bm_total_weight(mdev);
#line 731
  if (tmp___2 <= mdev->rs_failed) {
#line 732
    switch ((int )mdev->state.ldv_38802.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 735
    drbd_resync_finished(mdev);
    default: ;
#line 738
    goto ldv_49120;
    }
    ldv_49120: ;
  } else {

  }
#line 741
  drbd_bcast_sync_progress(mdev);
#line 743
  return (1);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 761
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 761
  if (tmp == 0) {
#line 761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            761);
  } else {

  }
#line 765
  enr = (unsigned int )(sector >> 15);
#line 767
  e = lc_get(mdev->resync, enr);
#line 768
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 769
    __mptr = (struct lc_element  const  *)e;
#line 769
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 770
    if (ext->lce.lc_number == enr) {
#line 771
      if (success != 0) {
#line 772
        ext->rs_left = ext->rs_left - count;
      } else {
#line 774
        ext->rs_failed = ext->rs_failed + count;
      }
#line 775
      if (ext->rs_left < ext->rs_failed) {
#line 776
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38802.conn);
#line 776
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 789
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 798
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 798
      rs_left = tmp___1;
#line 799
      if (ext->flags != 0UL) {
#line 800
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 804
        ext->flags = 0UL;
      } else {

      }
#line 806
      if (ext->rs_failed != 0) {
#line 807
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 811
      ext->rs_left = rs_left;
#line 812
      ext->rs_failed = success == 0 ? count : 0;
#line 813
      lc_changed(mdev->resync, & ext->lce);
    }
#line 815
    lc_put(mdev->resync, & ext->lce);
#line 818
    if (ext->rs_left == ext->rs_failed) {
#line 819
      ext->rs_failed = 0;
#line 821
      tmp___2 = kmalloc(32UL, 32U);
#line 821
      udw = (struct update_odbm_work *)tmp___2;
#line 822
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 823
        udw->enr = ext->lce.lc_number;
#line 824
        udw->w.cb = & w_update_odbm;
#line 825
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 827
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 835
  return;
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 840
  now = jiffies;
#line 841
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 842
  next = (mdev->rs_last_mark + 1) % 8;
#line 843
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 844
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 847
      mdev->rs_mark_time[next] = now;
#line 848
      mdev->rs_mark_left[next] = still_to_go;
#line 849
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 851
  return;
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 866
  count = 0UL;
#line 868
  wake_up = 0;
#line 871
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 872
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 874
    return;
  } else {

  }
#line 876
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 877
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 879
  _b = sector >= nr_sectors;
#line 879
  if (_b != 0) {
#line 879
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            879);
  } else {

  }
#line 879
  if (_b != 0) {
#line 879
    return;
  } else {

  }
#line 880
  _b___0 = esector >= nr_sectors;
#line 880
  if (_b___0 != 0) {
#line 880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            880);
  } else {

  }
#line 880
  if (_b___0 != 0) {
#line 880
    esector = nr_sectors - 1UL;
  } else {

  }
#line 882
  lbnr = (nr_sectors - 1UL) >> 3;
#line 887
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 887
  if (tmp != 0L) {
#line 888
    return;
  } else {

  }
#line 889
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 889
  if (tmp___0 != 0L) {
#line 890
    ebnr = lbnr;
  } else {
#line 892
    ebnr = (esector - 7UL) >> 3;
  }
#line 893
  sbnr = (sector + 7UL) >> 3;
#line 895
  if (sbnr > ebnr) {
#line 896
    return;
  } else {

  }
#line 902
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 902
  count = (unsigned long )tmp___1;
#line 903
  if (count != 0UL) {
#line 903
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 903
    if (tmp___4 != 0) {
#line 904
      tmp___2 = drbd_bm_total_weight(mdev);
#line 904
      drbd_advance_rs_marks(mdev, tmp___2);
#line 905
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 905
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 906
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 907
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 911
      wake_up = 1;
#line 912
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 914
  if (wake_up != 0) {
#line 915
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 916
  return;
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 931
  count = 0U;
#line 935
  if (size == 0) {
#line 936
    return (0);
  } else {

  }
#line 938
  if ((size < 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 939
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 941
    return (0);
  } else {

  }
#line 944
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 944
  if (tmp == 0) {
#line 945
    return (0);
  } else {

  }
#line 947
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 948
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 950
  _b = sector >= nr_sectors;
#line 950
  if (_b != 0) {
#line 950
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            950);
  } else {

  }
#line 950
  if (_b != 0) {
#line 951
    goto out;
  } else {

  }
#line 952
  _b___0 = esector >= nr_sectors;
#line 952
  if (_b___0 != 0) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            952);
  } else {

  }
#line 952
  if (_b___0 != 0) {
#line 953
    esector = nr_sectors - 1UL;
  } else {

  }
#line 955
  lbnr = (nr_sectors - 1UL) >> 3;
#line 959
  sbnr = sector >> 3;
#line 960
  ebnr = esector >> 3;
#line 964
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 964
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 965
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 965
  count = (unsigned int )tmp___1;
#line 967
  enr = (unsigned int )(sector >> 15);
#line 968
  e = lc_find(mdev->resync, enr);
#line 969
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 970
    __mptr = (struct lc_element  const  *)e;
#line 970
    __mptr___0 = (struct lc_element  const  *)e;
#line 970
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 971
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 974
  put_ldev(mdev);
#line 976
  return ((int )count);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 984
  wakeup = 0;
#line 987
  spin_lock_irq(& mdev->al_lock);
#line 988
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 989
    spin_unlock_irq(& mdev->al_lock);
#line 990
    return (0);
  } else {

  }
#line 992
  e = lc_get(mdev->resync, enr);
#line 993
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 993
    __mptr = (struct lc_element  const  *)e;
#line 993
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 993
    bm_ext = 0;
  }
#line 994
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 995
    if (bm_ext->lce.lc_number != enr) {
#line 996
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 997
      bm_ext->rs_failed = 0;
#line 998
      lc_changed(mdev->resync, & bm_ext->lce);
#line 999
      wakeup = 1;
    } else {

    }
#line 1001
    if (bm_ext->lce.refcnt == 1U) {
#line 1002
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1003
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1005
  rs_flags = (mdev->resync)->flags;
#line 1006
  spin_unlock_irq(& mdev->al_lock);
#line 1007
  if (wakeup != 0) {
#line 1008
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1010
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1011
    if ((rs_flags & 4UL) != 0UL) {
#line 1012
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1014
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1014
    if (tmp != 0L) {
#line 1014
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1014), "i" (12UL));
      ldv_49207: ;
#line 1014
      goto ldv_49207;
    } else {

    }
  } else {

  }
#line 1017
  return (bm_ext);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1023
  rv = 0;
#line 1025
  spin_lock_irq(& mdev->al_lock);
#line 1026
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1026
  if (tmp != 0L) {
#line 1027
    rv = 1;
  } else {
#line 1029
    al_ext = lc_find(mdev->act_log, enr);
#line 1030
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1031
      if (al_ext->refcnt != 0U) {
#line 1032
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1035
  spin_unlock_irq(& mdev->al_lock);
#line 1042
  return (rv);
}
}
#line 1052 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1054
  enr = (unsigned int )(sector >> 15);
#line 1057
  sa = 200;
  retry: 
#line 1061
  __ret = 0;
#line 1061
  bm_ext = _bme_get(mdev, enr);
#line 1061
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1061
    tmp = get_current();
#line 1061
    __wait.flags = 0U;
#line 1061
    __wait.private = (void *)tmp;
#line 1061
    __wait.func = & autoremove_wake_function;
#line 1061
    __wait.task_list.next = & __wait.task_list;
#line 1061
    __wait.task_list.prev = & __wait.task_list;
    ldv_49228: 
#line 1061
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1061
    bm_ext = _bme_get(mdev, enr);
#line 1061
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1061
      goto ldv_49226;
    } else {

    }
#line 1061
    tmp___0 = get_current();
#line 1061
    tmp___1 = signal_pending(tmp___0);
#line 1061
    if (tmp___1 == 0) {
#line 1061
      schedule();
#line 1061
      goto ldv_49227;
    } else {

    }
#line 1061
    __ret = -512;
#line 1061
    goto ldv_49226;
    ldv_49227: ;
#line 1061
    goto ldv_49228;
    ldv_49226: 
#line 1061
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1061
  sig = __ret;
#line 1063
  if (sig != 0) {
#line 1064
    return (-4);
  } else {

  }
#line 1066
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1066
  if (tmp___2 != 0) {
#line 1067
    return (0);
  } else {

  }
#line 1069
  i = 0;
#line 1069
  goto ldv_49237;
  ldv_49236: 
#line 1070
  __ret___0 = 0;
#line 1070
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1070
  if (tmp___8 != 0) {
#line 1070
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1070
    if (tmp___9 == 0) {
#line 1070
      tmp___3 = get_current();
#line 1070
      __wait___0.flags = 0U;
#line 1070
      __wait___0.private = (void *)tmp___3;
#line 1070
      __wait___0.func = & autoremove_wake_function;
#line 1070
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1070
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49234: 
#line 1070
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1070
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1070
      if (tmp___4 == 0) {
#line 1070
        goto ldv_49232;
      } else {
#line 1070
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1070
        if (tmp___5 != 0) {
#line 1070
          goto ldv_49232;
        } else {

        }
      }
#line 1070
      tmp___6 = get_current();
#line 1070
      tmp___7 = signal_pending(tmp___6);
#line 1070
      if (tmp___7 == 0) {
#line 1070
        schedule();
#line 1070
        goto ldv_49233;
      } else {

      }
#line 1070
      __ret___0 = -512;
#line 1070
      goto ldv_49232;
      ldv_49233: ;
#line 1070
      goto ldv_49234;
      ldv_49232: 
#line 1070
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1070
  sig = __ret___0;
#line 1074
  if (sig != 0) {
#line 1074
    goto _L;
  } else {
#line 1074
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1074
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1075
      spin_lock_irq(& mdev->al_lock);
#line 1076
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1076
      if (tmp___10 == 0U) {
#line 1077
        bm_ext->flags = 0UL;
#line 1078
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1079
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1081
      spin_unlock_irq(& mdev->al_lock);
#line 1082
      if (sig != 0) {
#line 1083
        return (-4);
      } else {

      }
#line 1084
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1084
      if (tmp___11 != 0L) {
#line 1085
        return (-4);
      } else {

      }
#line 1086
      if (sa != 0) {
#line 1086
        sa = sa - 1;
#line 1086
        if (sa == 0) {
#line 1087
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1089
      goto retry;
    } else {

    }
  }
#line 1069
  i = i + 1;
  ldv_49237: ;
#line 1069
  if (i <= 3) {
#line 1070
    goto ldv_49236;
  } else {

  }
#line 1092
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1093
  return (0);
}
}
#line 1105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1107
  enr = (unsigned int )(sector >> 15);
#line 1108
  al_enr = enr * 4U;
#line 1113
  spin_lock_irq(& mdev->al_lock);
#line 1114
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1128
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1129
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1129
      __mptr = (struct lc_element  const  *)e;
#line 1129
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1129
      bm_ext = 0;
    }
#line 1130
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1131
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1131
      if (tmp != 0) {
#line 1131
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1131);
      } else {

      }
#line 1132
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1132
      if (tmp___0 == 0) {
#line 1132
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1132);
      } else {

      }
#line 1133
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1134
      mdev->resync_wenr = 4294967295U;
#line 1135
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1135
      if (tmp___1 == 0U) {
#line 1136
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1137
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1139
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1143
  e = lc_try_get(mdev->resync, enr);
#line 1144
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1144
    __mptr___0 = (struct lc_element  const  *)e;
#line 1144
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1144
    bm_ext = 0;
  }
#line 1145
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1146
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1146
    if (tmp___2 != 0) {
#line 1147
      goto proceed;
    } else {

    }
#line 1148
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1148
    if (tmp___3 == 0) {
#line 1149
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1155
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1156
      if (bm_ext->lce.refcnt == 0U) {
#line 1156
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1156);
      } else {

      }
    }
#line 1158
    goto check_al;
  } else {
#line 1161
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1162
      goto try_again;
    } else {

    }
#line 1164
    e = lc_get(mdev->resync, enr);
#line 1165
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1165
      __mptr___1 = (struct lc_element  const  *)e;
#line 1165
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1165
      bm_ext = 0;
    }
#line 1166
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1167
      rs_flags = (mdev->resync)->flags;
#line 1168
      if ((rs_flags & 4UL) != 0UL) {
#line 1169
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1171
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1171
      if (tmp___4 != 0L) {
#line 1171
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1171), "i" (12UL));
        ldv_49258: ;
#line 1171
        goto ldv_49258;
      } else {

      }
#line 1172
      goto try_again;
    } else {

    }
#line 1174
    if (bm_ext->lce.lc_number != enr) {
#line 1175
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1176
      bm_ext->rs_failed = 0;
#line 1177
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1178
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1179
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1179
      if (tmp___5 != 0) {
#line 1179
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1179);
      } else {

      }
    } else {

    }
#line 1181
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1182
    if (bm_ext->lce.refcnt != 1U) {
#line 1182
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1182);
    } else {

    }
#line 1183
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1184
    goto check_al;
  }
  check_al: 
#line 1187
  i = 0;
#line 1187
  goto ldv_49260;
  ldv_49259: 
#line 1188
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1188
  if (tmp___6 != 0L) {
#line 1189
    goto try_again;
  } else {

  }
#line 1190
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1190
  if (tmp___7 != 0) {
#line 1191
    goto try_again;
  } else {

  }
#line 1187
  i = i + 1;
  ldv_49260: ;
#line 1187
  if (i <= 3) {
#line 1188
    goto ldv_49259;
  } else {

  }
#line 1193
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1195
  mdev->resync_wenr = 4294967295U;
#line 1196
  spin_unlock_irq(& mdev->al_lock);
#line 1197
  return (0);
  try_again: ;
#line 1200
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1201
    mdev->resync_wenr = enr;
  } else {

  }
#line 1202
  spin_unlock_irq(& mdev->al_lock);
#line 1203
  return (-11);
}
}
#line 1206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1208
  enr = (unsigned int )(sector >> 15);
#line 1213
  tmp = spinlock_check(& mdev->al_lock);
#line 1213
  flags = _raw_spin_lock_irqsave(tmp);
#line 1214
  e = lc_find(mdev->resync, enr);
#line 1215
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1215
    __mptr = (struct lc_element  const  *)e;
#line 1215
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1215
    bm_ext = 0;
  }
#line 1216
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1217
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1218
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1218
    if (tmp___0 != 0) {
#line 1219
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1220
    return;
  } else {

  }
#line 1223
  if (bm_ext->lce.refcnt == 0U) {
#line 1224
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1225
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1228
    return;
  } else {

  }
#line 1231
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1231
  if (tmp___1 == 0U) {
#line 1232
    bm_ext->flags = 0UL;
#line 1233
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1234
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1237
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1238
  return;
}
}
#line 1244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1246
  spin_lock_irq(& mdev->al_lock);
#line 1248
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1248
  if (tmp != 0) {
#line 1249
    lc_reset(mdev->resync);
#line 1250
    put_ldev(mdev);
  } else {

  }
#line 1252
  mdev->resync_locked = 0U;
#line 1253
  mdev->resync_wenr = 4294967295U;
#line 1254
  spin_unlock_irq(& mdev->al_lock);
#line 1255
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1256
  return;
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1271
  spin_lock_irq(& mdev->al_lock);
#line 1273
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1273
  if (tmp___3 != 0) {
#line 1275
    i = 0;
#line 1275
    goto ldv_49289;
    ldv_49288: 
#line 1276
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1277
    __mptr = (struct lc_element  const  *)e;
#line 1277
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1278
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1279
      goto ldv_49287;
    } else {

    }
#line 1280
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1281
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1284
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1284
      if (tmp != 0) {
#line 1284
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1284);
      } else {

      }
#line 1285
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1285
      if (tmp___0 == 0) {
#line 1285
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1285);
      } else {

      }
#line 1286
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1287
      mdev->resync_wenr = 4294967295U;
#line 1288
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1290
    if (bm_ext->lce.refcnt != 0U) {
#line 1291
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1293
      put_ldev(mdev);
#line 1294
      spin_unlock_irq(& mdev->al_lock);
#line 1295
      return (-11);
    } else {

    }
#line 1297
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1297
    if (tmp___1 != 0) {
#line 1297
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1297);
    } else {

    }
#line 1298
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1298
    if (tmp___2 != 0) {
#line 1298
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1298);
    } else {

    }
#line 1299
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_49287: 
#line 1275
    i = i + 1;
    ldv_49289: ;
#line 1275
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1276
      goto ldv_49288;
    } else {

    }

#line 1301
    if ((mdev->resync)->used != 0U) {
#line 1301
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1301);
    } else {

    }
#line 1302
    put_ldev(mdev);
  } else {

  }
#line 1304
  spin_unlock_irq(& mdev->al_lock);
#line 1305
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1307
  return (0);
}
}
#line 1316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1322
  wake_up = 0;
#line 1324
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1327
    return;
  } else {

  }
#line 1329
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1330
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1332
  _b = sector >= nr_sectors;
#line 1332
  if (_b != 0) {
#line 1332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1332);
  } else {

  }
#line 1332
  if (_b != 0) {
#line 1332
    return;
  } else {

  }
#line 1333
  _b___0 = esector >= nr_sectors;
#line 1333
  if (_b___0 != 0) {
#line 1333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1333);
  } else {

  }
#line 1333
  if (_b___0 != 0) {
#line 1333
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1335
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1340
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1340
  if (tmp != 0L) {
#line 1341
    return;
  } else {

  }
#line 1342
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1342
  if (tmp___0 != 0L) {
#line 1343
    ebnr = lbnr;
  } else {
#line 1345
    ebnr = (esector - 7UL) >> 3;
  }
#line 1346
  sbnr = (sector + 7UL) >> 3;
#line 1348
  if (sbnr > ebnr) {
#line 1349
    return;
  } else {

  }
#line 1355
  spin_lock_irq(& mdev->al_lock);
#line 1356
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1356
  count = (unsigned long )tmp___1;
#line 1357
  if (count != 0UL) {
#line 1358
    mdev->rs_failed = mdev->rs_failed + count;
#line 1360
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1360
    if (tmp___2 != 0) {
#line 1361
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1362
      put_ldev(mdev);
    } else {

    }
#line 1367
    wake_up = 1;
  } else {

  }
#line 1369
  spin_unlock_irq(& mdev->al_lock);
#line 1370
  if (wake_up != 0) {
#line 1371
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1372
  return;
}
}
#line 1374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1379
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1381
  mutex_lock(ldv_func_arg1);
#line 1382
  return;
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1389
  tmp = mutex_trylock(ldv_func_arg1);
#line 1389
  ldv_func_res = tmp;
#line 1391
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1391
  return (tmp___0);
#line 1393
  return (ldv_func_res);
}
}
#line 1396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1401
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1403
  mutex_unlock(ldv_func_arg1);
#line 1404
  return;
}
}
#line 1406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1411
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1413
  mutex_lock(ldv_func_arg1);
#line 1414
  return;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1421
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1423
  mutex_unlock(ldv_func_arg1);
#line 1424
  return;
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1431
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1433
  mutex_lock(ldv_func_arg1);
#line 1434
  return;
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1441
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1443
  mutex_unlock(ldv_func_arg1);
#line 1444
  return;
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1451
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1453
  mutex_unlock(ldv_func_arg1);
#line 1454
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 308 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 310
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 311
  return;
}
}
#line 447 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 449
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 449
  return ((unsigned int )tmp);
}
}
#line 642
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 644
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) ;
#line 83
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 87
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6353;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6353;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6353;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6353;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6353: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 210
extern int del_timer(struct timer_list * ) ;
#line 279 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 303
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 204 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 204
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 204
  return (tmp);
}
}
#line 2085 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2086
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2087
extern struct block_device *bdget(dev_t  ) ;
#line 2092
extern void bdput(struct block_device * ) ;
#line 2130
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1886 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2167
extern int wake_up_process(struct task_struct * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 47 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 48
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 405 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 410
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 604
extern struct gendisk *alloc_disk(int  ) ;
#line 606
extern void put_disk(struct gendisk * ) ;
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 65
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 66
extern void mempool_free_pages(void * , void * ) ;
#line 67 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 69
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 69
  return (tmp);
}
}
#line 213 "include/linux/bio.h"
extern void bioset_free(struct bio_set * ) ;
#line 217
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 219
extern void bio_free(struct bio * , struct bio_set * ) ;
#line 840 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 841
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 842
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 844
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 875
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 881
extern void blk_queue_flush(struct request_queue * , unsigned int  ) ;
#line 890
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_48499: ;
#line 593
    goto ldv_48499;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_48514: ;
#line 618
    goto ldv_48514;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1167
  ldv_mutex_lock_126(& mdev->data.mutex);
#line 1170
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1170
  if (tmp != 0L) {
#line 1171
    ldv_mutex_unlock_127(& mdev->data.mutex);
#line 1172
    return (0);
  } else {

  }
#line 1174
  return (1);
}
}
#line 1177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1179
  ldv_mutex_unlock_128(& mdev->data.mutex);
#line 1180
  return;
}
}
#line 1201
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1215
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1221
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1226
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1232
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1236
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1239
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1275
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1277
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1282
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1288
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1289
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1290
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1292
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1298
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1502 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1518 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1521 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1533 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1539
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1540
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1542 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1552
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1553
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1720
void drbd_nl_cleanup(void) ;
#line 1721
int drbd_nl_init(void) ;
#line 1722
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1807 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1809
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1809
  if (tmp == 0) {
#line 1809
    goto ldv_49608;
  } else {

  }
#line 1809
  tmp___0 = get_current();
#line 1809
  __wait.flags = 0U;
#line 1809
  __wait.private = (void *)tmp___0;
#line 1809
  __wait.func = & autoremove_wake_function;
#line 1809
  __wait.task_list.next = & __wait.task_list;
#line 1809
  __wait.task_list.prev = & __wait.task_list;
  ldv_49611: 
#line 1809
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1809
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1809
  if (tmp___1 == 0) {
#line 1809
    goto ldv_49610;
  } else {

  }
#line 1809
  schedule();
#line 1809
  goto ldv_49611;
  ldv_49610: 
#line 1809
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49608: ;
#line 1812
  return;
}
}
#line 1856 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1860
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1862
  if ((unsigned int )forcedetach == 0U) {
#line 1863
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1863
    if (tmp != 0) {
#line 1864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1865
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1866
      __ns.i = mdev->state.i;
#line 1866
      __ns.ldv_38802.disk = 4U;
#line 1866
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1867
    goto ldv_49640;
  } else {

  }
  case 2: ;
  case 1: 
#line 1872
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1873
  if ((unsigned int )forcedetach == 2U) {
#line 1874
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1875
  if ((int )mdev->state.ldv_38802.disk > 2) {
#line 1876
    __ns___0.i = mdev->state.i;
#line 1876
    __ns___0.ldv_38802.disk = 2U;
#line 1876
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1880
  goto ldv_49640;
  }
  ldv_49640: ;
#line 1883
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1896
  if (error != 0) {
#line 1898
    tmp = spinlock_check(& mdev->req_lock);
#line 1898
    flags = _raw_spin_lock_irqsave(tmp);
#line 1899
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1900
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1902
  return;
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1958
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1962
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1962
  if (tmp___1 != 0UL) {
#line 1962
    __min1 = 2251799813685248UL;
#line 1962
    tmp___0 = drbd_md_first_sector(bdev);
#line 1962
    __min2 = tmp___0;
#line 1962
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1962
    s = 0UL;
  }
#line 1965
  goto ldv_49681;
  case -2: 
#line 1967
  __min1___0 = 2251799813685248UL;
#line 1967
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1967
  __min2___0 = tmp___2;
#line 1967
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1970
  __min1___1 = s;
#line 1970
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1970
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1973
  goto ldv_49681;
  default: 
#line 1975
  __min1___2 = 8587575296UL;
#line 1975
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1975
  __min2___2 = tmp___3;
#line 1975
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49681: ;
#line 1978
  return (s);
}
}
#line 1986 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1989
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1991
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1997
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1998
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1998
    if (tmp != 0) {
#line 1999
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 2000
      dump_stack();
    } else {

    }
#line 2002
    return (0UL);
  } else {

  }
#line 2004
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 2004
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 2007
  return (0UL);
  }
}
}
#line 2069 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2071
  _drbd_thread_stop(thi, 0, 0);
#line 2072
  return;
}
}
#line 2074 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2076
  _drbd_thread_stop(thi, 1, 0);
#line 2077
  return;
}
}
#line 2291 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2293
  s = mdev->state;
#line 2298
  switch ((unsigned int )s.ldv_38802.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2323
  goto ldv_49812;
  case 13U: ;
#line 2327
  if (mdev->agreed_pro_version <= 95) {
#line 2328
    return (0);
  } else {

  }
#line 2329
  goto ldv_49812;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2336
  return (0);
  }
  ldv_49812: ;
#line 2339
  switch ((unsigned int )s.ldv_38802.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2347
  goto ldv_49823;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2355
  return (0);
  }
  ldv_49823: ;
#line 2358
  return (1);
}
}
#line 2366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2368
  tmp = drbd_get_max_buffers(mdev);
#line 2368
  mxb = tmp;
#line 2370
  tmp___0 = is_susp(mdev->state);
#line 2370
  if (tmp___0 != 0) {
#line 2371
    return (0);
  } else {

  }
#line 2372
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2372
  if (tmp___1 != 0) {
#line 2373
    return (0);
  } else {

  }
#line 2380
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2380
  if (tmp___2 == 0) {
#line 2381
    return (0);
  } else {

  }
#line 2385
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2385
  if (tmp___3 > mxb) {
#line 2386
    return (0);
  } else {

  }
#line 2387
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2387
  if (tmp___4 != 0) {
#line 2388
    return (0);
  } else {

  }
#line 2389
  return (1);
}
}
#line 2471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2473
  sk = (mdev->data.socket)->sk;
#line 2474
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2475
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2476
  return;
}
}
#line 2478 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2485
  return (0);
}
}
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_50077;
  ldv_50076: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_50077: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_50076;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 137
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 183
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 214
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void bio_destructor_drbd(struct bio *bio ) 
{ 


  {
#line 222
  bio_free(bio, drbd_md_io_bio_set);
#line 223
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;

  {
#line 229
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 230
    tmp = bio_alloc(gfp_mask, 1U);
#line 230
    return (tmp);
  } else {

  }
#line 232
  bio = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 233
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 234
    return (0);
  } else {

  }
#line 235
  bio->bi_destructor = & bio_destructor_drbd;
#line 236
  return (bio);
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 273
  tmp = kmalloc(56UL, 208U);
#line 273
  b = (struct drbd_tl_epoch *)tmp;
#line 274
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 275
    return (0);
  } else {

  }
#line 276
  INIT_LIST_HEAD(& b->requests);
#line 277
  INIT_LIST_HEAD(& b->w.list);
#line 278
  b->next = 0;
#line 279
  b->br_number = 4711U;
#line 280
  b->n_writes = 0;
#line 281
  b->w.cb = 0;
#line 283
  mdev->oldest_tle = b;
#line 284
  mdev->newest_tle = b;
#line 285
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 286
  INIT_LIST_HEAD(& mdev->barrier_acked_requests);
#line 288
  mdev->tl_hash = 0;
#line 289
  mdev->tl_hash_s = 0U;
#line 291
  return (1);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 296
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            296);
  } else {

  }
#line 297
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 297
  if (tmp == 0) {
#line 297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            297);
  } else {

  }
#line 298
  kfree((void const   *)mdev->oldest_tle);
#line 299
  mdev->oldest_tle = 0;
#line 300
  kfree((void const   *)mdev->unused_spare_tle);
#line 301
  mdev->unused_spare_tle = 0;
#line 302
  kfree((void const   *)mdev->tl_hash);
#line 303
  mdev->tl_hash = 0;
#line 304
  mdev->tl_hash_s = 0U;
#line 305
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 318
  INIT_LIST_HEAD(& new->requests);
#line 319
  INIT_LIST_HEAD(& new->w.list);
#line 320
  new->w.cb = 0;
#line 321
  new->next = 0;
#line 322
  new->n_writes = 0;
#line 324
  newest_before = mdev->newest_tle;
#line 325
  new->br_number = newest_before->br_number + 1U;
#line 326
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 327
    (mdev->newest_tle)->next = new;
#line 328
    mdev->newest_tle = new;
  } else {

  }
#line 330
  return;
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 349
  spin_lock_irq(& mdev->req_lock);
#line 351
  b = mdev->oldest_tle;
#line 354
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 357
    goto bail;
  } else {

  }
#line 359
  if (b->br_number != barrier_nr) {
#line 360
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 362
    goto bail;
  } else {

  }
#line 364
  if ((unsigned int )b->n_writes != set_size) {
#line 365
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 367
    goto bail;
  } else {

  }
#line 371
  le = b->requests.next;
#line 371
  tle = le->next;
#line 371
  goto ldv_50314;
  ldv_50313: 
#line 372
  __mptr = (struct list_head  const  *)le;
#line 372
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 373
  _req_mod(r, barrier_acked);
#line 371
  le = tle;
#line 371
  tle = le->next;
  ldv_50314: ;
#line 371
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 372
    goto ldv_50313;
  } else {

  }
#line 388
  list_splice_init(& b->requests, & mdev->barrier_acked_requests);
#line 390
  nob = b->next;
#line 391
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 391
  if (tmp != 0) {
#line 392
    _tl_add_barrier(mdev, b);
#line 393
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 394
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 398
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 398
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              398);
    } else {

    }
#line 399
    mdev->oldest_tle = nob;
#line 400
    kfree((void const   *)b);
  }
#line 403
  spin_unlock_irq(& mdev->req_lock);
#line 404
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 404
  if (tmp___0 != 0) {
#line 404
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 404
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
  if (tmp___2 < 0) {
#line 404
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 404, tmp___1);
  } else {

  }
#line 406
  return;
  bail: 
#line 409
  spin_unlock_irq(& mdev->req_lock);
#line 410
  val.i = 0U;
#line 410
  val.ldv_38802.conn = 6U;
#line 410
  mask.i = 0U;
#line 410
  mask.ldv_38802.conn = 31U;
#line 410
  drbd_force_state(mdev, mask, val);
#line 412
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 429
  b = mdev->oldest_tle;
#line 430
  pn = & mdev->oldest_tle;
#line 431
  goto ldv_50349;
  ldv_50348: 
#line 432
  n_writes = 0;
#line 433
  n_reads = 0;
#line 434
  INIT_LIST_HEAD(& carry_reads);
#line 435
  le = b->requests.next;
#line 435
  tle = le->next;
#line 435
  goto ldv_50341;
  ldv_50340: 
#line 436
  __mptr = (struct list_head  const  *)le;
#line 436
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 437
  rv = _req_mod(req, what);
#line 439
  n_writes = (rv & 1) + n_writes;
#line 440
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 435
  le = tle;
#line 435
  tle = le->next;
  ldv_50341: ;
#line 435
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 436
    goto ldv_50340;
  } else {

  }
#line 442
  tmp = b->next;
#line 444
  if (n_writes != 0) {
#line 445
    if ((unsigned int )what == 24U) {
#line 446
      b->n_writes = n_writes;
#line 447
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 448
        b->w.cb = & w_send_barrier;
#line 449
        inc_ap_pending(mdev);
#line 450
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 453
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 455
    pn = & b->next;
  } else {
#line 457
    if (n_reads != 0) {
#line 458
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 461
    list_del(& b->requests);
#line 466
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 467
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 467
      if (tmp___0 != 0) {
#line 467
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 467
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 467
      if (tmp___2 < 0) {
#line 467
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 467
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 467, tmp___1);
      } else {

      }
    } else {

    }
#line 469
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 471
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 471
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                471);
      } else {

      }
#line 472
      INIT_LIST_HEAD(& b->requests);
#line 473
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 474
      INIT_LIST_HEAD(& b->w.list);
#line 475
      b->w.cb = 0;
#line 476
      b->br_number = random32();
#line 477
      b->n_writes = 0;
#line 479
      *pn = b;
#line 480
      goto ldv_50347;
    } else {

    }
#line 482
    *pn = tmp;
#line 483
    kfree((void const   *)b);
  }
#line 485
  b = tmp;
#line 486
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_50349: ;
#line 431
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 432
    goto ldv_50348;
  } else {

  }
  ldv_50347: ;
#line 491
  switch ((unsigned int )what) {
  case 25U: ;
  case 26U: 
#line 494
  le = mdev->barrier_acked_requests.next;
#line 494
  tle = le->next;
#line 494
  goto ldv_50355;
  ldv_50354: 
#line 495
  __mptr___0 = (struct list_head  const  *)le;
#line 495
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 496
  _req_mod(req, what);
#line 494
  le = tle;
#line 494
  tle = le->next;
  ldv_50355: ;
#line 494
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 495
    goto ldv_50354;
  } else {

  }

  case 10U: ;
  case 24U: ;
#line 501
  goto ldv_50359;
  default: 
#line 503
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "what = %d in _tl_restart()\n",
          (unsigned int )what);
  }
  ldv_50359: ;
#line 506
  return;
}
}
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 521
  spin_lock_irq(& mdev->req_lock);
#line 523
  _tl_restart(mdev, connection_lost_while_pending);
#line 526
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 526
  if (tmp == 0) {
#line 526
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            526);
  } else {

  }
#line 529
  le = mdev->out_of_sequence_requests.next;
#line 529
  tle = le->next;
#line 529
  goto ldv_50370;
  ldv_50369: 
#line 530
  __mptr = (struct list_head  const  *)le;
#line 530
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 533
  _req_mod(r, connection_lost_while_pending);
#line 529
  le = tle;
#line 529
  tle = le->next;
  ldv_50370: ;
#line 529
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 530
    goto ldv_50369;
  } else {

  }
#line 537
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 539
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 541
  spin_unlock_irq(& mdev->req_lock);
#line 542
  return;
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 546
  spin_lock_irq(& mdev->req_lock);
#line 547
  _tl_restart(mdev, what);
#line 548
  spin_unlock_irq(& mdev->req_lock);
#line 549
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 561
  spin_lock_irq(& mdev->req_lock);
#line 562
  b = mdev->oldest_tle;
#line 563
  goto ldv_50390;
  ldv_50389: 
#line 564
  le = b->requests.next;
#line 564
  tle = le->next;
#line 564
  goto ldv_50387;
  ldv_50386: 
#line 565
  __mptr = (struct list_head  const  *)le;
#line 565
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 566
  if ((req->rq_state & 1UL) == 0UL) {
#line 567
    goto ldv_50385;
  } else {

  }
#line 568
  _req_mod(req, abort_disk_io);
  ldv_50385: 
#line 564
  le = tle;
#line 564
  tle = le->next;
  ldv_50387: ;
#line 564
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 565
    goto ldv_50386;
  } else {

  }
#line 570
  b = b->next;
  ldv_50390: ;
#line 563
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 564
    goto ldv_50389;
  } else {

  }
#line 573
  le = mdev->barrier_acked_requests.next;
#line 573
  tle = le->next;
#line 573
  goto ldv_50396;
  ldv_50395: 
#line 574
  __mptr___0 = (struct list_head  const  *)le;
#line 574
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 575
  if ((req->rq_state & 1UL) == 0UL) {
#line 576
    goto ldv_50394;
  } else {

  }
#line 577
  _req_mod(req, abort_disk_io);
  ldv_50394: 
#line 573
  le = tle;
#line 573
  tle = le->next;
  ldv_50396: ;
#line 573
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 574
    goto ldv_50395;
  } else {

  }
#line 580
  spin_unlock_irq(& mdev->req_lock);
#line 581
  return;
}
}
#line 589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 592
  return (((((int )os.ldv_38802.conn > 9 && (int )ns.ldv_38802.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_38802.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 609
  tmp = spinlock_check(& mdev->req_lock);
#line 609
  flags = _raw_spin_lock_irqsave(tmp);
#line 610
  os = mdev->state;
#line 611
  ns.i = (os.i & ~ mask.i) | val.i;
#line 612
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 613
  ns = mdev->state;
#line 614
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 616
  return (rv);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 628
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 629
  return;
}
}
#line 631
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 632
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 643
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) ;
#line 645
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 656
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 656
  if (tmp != 0) {
#line 657
    return (SS_CW_SUCCESS);
  } else {

  }
#line 659
  tmp___0 = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 659
  if (tmp___0 != 0) {
#line 660
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 662
  rv = SS_UNKNOWN_ERROR;
#line 663
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 663
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 664
  os = mdev->state;
#line 665
  ns.i = (os.i & ~ mask.i) | val.i;
#line 666
  ns = sanitize_state(mdev, os, ns, 0);
#line 668
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 668
  if (tmp___2 == 0) {
#line 669
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 670
  if ((int )rv == 0) {
#line 671
    rv = is_valid_state(mdev, ns);
#line 672
    if ((int )rv == 1) {
#line 673
      rv = is_valid_state_transition(mdev, ns, os);
#line 674
      if ((int )rv == 1) {
#line 675
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 678
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 680
  return (rv);
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 702
  init_completion(& done);
#line 704
  if (((unsigned int )f & 8U) != 0U) {
#line 705
    ldv_mutex_lock_129(& mdev->state_mutex);
  } else {

  }
#line 707
  tmp = spinlock_check(& mdev->req_lock);
#line 707
  flags = _raw_spin_lock_irqsave(tmp);
#line 708
  os = mdev->state;
#line 709
  ns.i = (os.i & ~ mask.i) | val.i;
#line 710
  ns = sanitize_state(mdev, os, ns, 0);
#line 712
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 712
  if (tmp___3 != 0) {
#line 713
    rv = is_valid_state(mdev, ns);
#line 714
    if ((int )rv == 1) {
#line 715
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 716
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 718
    if ((int )rv <= 0) {
#line 719
      if (((unsigned int )f & 2U) != 0U) {
#line 720
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 721
      goto abort;
    } else {

    }
#line 724
    drbd_state_lock___0(mdev);
#line 725
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 725
    if (tmp___0 == 0) {
#line 726
      drbd_state_unlock(mdev);
#line 727
      rv = SS_CW_FAILED_BY_PEER;
#line 728
      if (((unsigned int )f & 2U) != 0U) {
#line 729
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 730
      goto abort;
    } else {

    }
#line 733
    rv = _req_st_cond(mdev, mask, val);
#line 733
    if ((int )rv != 0) {
#line 733
      goto ldv_50471;
    } else {

    }
#line 733
    tmp___1 = get_current();
#line 733
    __wait.flags = 0U;
#line 733
    __wait.private = (void *)tmp___1;
#line 733
    __wait.func = & autoremove_wake_function;
#line 733
    __wait.task_list.next = & __wait.task_list;
#line 733
    __wait.task_list.prev = & __wait.task_list;
    ldv_50474: 
#line 733
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 733
    rv = _req_st_cond(mdev, mask, val);
#line 733
    if ((int )rv != 0) {
#line 733
      goto ldv_50473;
    } else {

    }
#line 733
    schedule();
#line 733
    goto ldv_50474;
    ldv_50473: 
#line 733
    finish_wait(& mdev->state_wait, & __wait);
    ldv_50471: ;
#line 736
    if ((int )rv <= 0) {
#line 737
      drbd_state_unlock(mdev);
#line 738
      if (((unsigned int )f & 2U) != 0U) {
#line 739
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 740
      goto abort;
    } else {

    }
#line 742
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 742
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 743
    os = mdev->state;
#line 744
    ns.i = (os.i & ~ mask.i) | val.i;
#line 745
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 746
    drbd_state_unlock(mdev);
  } else {
#line 748
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 751
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 753
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 754
    tmp___4 = get_current();
#line 754
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 754
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              754);
    } else {

    }
#line 755
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 759
  if (((unsigned int )f & 8U) != 0U) {
#line 760
    ldv_mutex_unlock_130(& mdev->state_mutex);
  } else {

  }
#line 762
  return (rv);
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 781
  rv = drbd_req_state(mdev, mask, val, f);
#line 781
  if ((int )rv != -18) {
#line 781
    goto ldv_50485;
  } else {

  }
#line 781
  tmp = get_current();
#line 781
  __wait.flags = 0U;
#line 781
  __wait.private = (void *)tmp;
#line 781
  __wait.func = & autoremove_wake_function;
#line 781
  __wait.task_list.next = & __wait.task_list;
#line 781
  __wait.task_list.prev = & __wait.task_list;
  ldv_50488: 
#line 781
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 781
  rv = drbd_req_state(mdev, mask, val, f);
#line 781
  if ((int )rv != -18) {
#line 781
    goto ldv_50487;
  } else {

  }
#line 781
  schedule();
#line 781
  goto ldv_50488;
  ldv_50487: 
#line 781
  finish_wait(& mdev->state_wait, & __wait);
  ldv_50485: ;
#line 784
  return (rv);
}
}
#line 787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 789
  tmp = is_susp(ns);
#line 789
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38802.pdsk);
#line 789
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38802.disk);
#line 789
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_38802.peer);
#line 789
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38802.role);
#line 789
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_38802.conn);
#line 789
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 800
  return;
}
}
#line 803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 806
  if ((int )err == -18) {
#line 807
    return;
  } else {

  }
#line 808
  tmp = drbd_set_st_err_str(err);
#line 808
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 809
  print_st(mdev, (char *)" state", os);
#line 810
  print_st(mdev, (char *)"wanted", ns);
#line 811
  return;
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 825
  rv = 1;
#line 827
  fp = FP_DONT_CARE;
#line 828
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 828
  if (tmp != 0) {
#line 829
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 830
    put_ldev(mdev);
  } else {

  }
#line 833
  tmp___0 = get_net_conf(mdev);
#line 833
  if (tmp___0 != 0) {
#line 834
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 836
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 837
    put_net_conf(mdev);
  } else {

  }
#line 840
  if ((int )rv <= 0) {

  } else
#line 842
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 843
    rv = SS_DEVICE_IN_USE;
  } else
#line 845
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38802.conn <= 9) && (int )ns.ldv_38802.disk <= 7) {
#line 846
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 848
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_38802.conn <= 9) && (int )ns.ldv_38802.pdsk > 5) {
#line 850
    rv = SS_PRIMARY_NOP;
  } else
#line 852
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38802.disk <= 4) && (int )ns.ldv_38802.pdsk <= 4) {
#line 853
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 855
  if ((int )ns.ldv_38802.conn > 10 && (int )ns.ldv_38802.disk <= 3) {
#line 856
    rv = SS_NO_LOCAL_DISK;
  } else
#line 858
  if ((int )ns.ldv_38802.conn > 10 && (int )ns.ldv_38802.pdsk <= 3) {
#line 859
    rv = SS_NO_REMOTE_DISK;
  } else
#line 861
  if (((int )ns.ldv_38802.conn > 10 && (int )ns.ldv_38802.disk <= 7) && (int )ns.ldv_38802.pdsk <= 7) {
#line 862
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 864
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 869
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 871
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 873
    rv = SS_NO_VERIFY_ALG;
  } else
#line 875
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 877
    rv = SS_NOT_SUPPORTED;
  } else
#line 879
  if ((int )ns.ldv_38802.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 880
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 882
  return (rv);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 895
  rv = 1;
#line 897
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_38802.conn > 10) {
#line 899
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 901
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 902
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 904
  if ((int )ns.ldv_38802.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 905
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 907
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_38802.conn <= 1) {
#line 908
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 910
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_38802.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 911
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 913
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 914
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 916
  if ((int )ns.ldv_38802.conn == (int )os.ldv_38802.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 917
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 921
  tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 921
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 924
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 926
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_38802.conn <= 9) {
#line 927
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 929
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_38802.conn != (int )os.ldv_38802.conn) && (int )os.ldv_38802.conn > 10) {
#line 931
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 933
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_38802.conn <= 9) {
#line 935
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 937
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_38802.conn <= 8) {
#line 939
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 941
  return (rv);
}
}
#line 944 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 946
  msg_table[0] = "";
#line 946
  msg_table[1] = "Online-verify aborted.";
#line 946
  msg_table[2] = "Resync aborted.";
#line 946
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 946
  msg_table[4] = "Implicitly upgraded disk";
#line 946
  msg_table[5] = "Implicitly upgraded pdsk";
#line 955
  if ((unsigned int )warn != 0U) {
#line 956
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 957
  return;
}
}
#line 969 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;

  {
#line 975
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 976
    *warn = NO_WARNING;
  } else {

  }
#line 978
  fp = FP_DONT_CARE;
#line 979
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 979
  if (tmp != 0) {
#line 980
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 981
    put_ldev(mdev);
  } else {

  }
#line 985
  if (((int )ns.ldv_38802.conn > 2 && (int )ns.ldv_38802.conn <= 7) && (int )os.ldv_38802.conn <= 1) {
#line 987
    ns.ldv_38802.conn = os.ldv_38802.conn;
  } else {

  }
#line 991
  if (((((int )os.ldv_38802.conn > 2 && (int )os.ldv_38802.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_38802.conn <= 10) {
#line 993
    ns.ldv_38802.conn = os.ldv_38802.conn;
  } else {

  }
#line 996
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 997
    ns.ldv_38802.disk = 0U;
  } else {

  }
#line 1000
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 1001
    ns.ldv_38802.conn = os.ldv_38802.conn;
  } else {

  }
#line 1003
  if ((int )ns.ldv_38802.conn <= 9) {
#line 1004
    ns.ldv_38802.peer_isp = 0U;
#line 1005
    ns.ldv_38802.peer = 0U;
#line 1006
    if ((int )ns.ldv_38802.pdsk > 6 || (int )ns.ldv_38802.pdsk <= 3) {
#line 1007
      ns.ldv_38802.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 1011
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1012
    ns.ldv_38802.aftr_isp = 0U;
  } else {

  }
#line 1015
  if (((int )os.ldv_38802.conn > 10 && (int )ns.ldv_38802.conn > 10) && ((int )ns.ldv_38802.disk <= 2 || (int )ns.ldv_38802.pdsk <= 2)) {
#line 1017
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1018
      *warn = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 1020
    ns.ldv_38802.conn = 10U;
  } else {

  }
#line 1024
  if ((int )ns.ldv_38802.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1024
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1024
    if (tmp___0 != 0) {
#line 1026
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 1027
        ns.ldv_38802.disk = mdev->new_state_tmp.ldv_38802.disk;
#line 1028
        ns.ldv_38802.pdsk = mdev->new_state_tmp.ldv_38802.pdsk;
      } else {
#line 1030
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1031
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 1032
        ns.ldv_38802.disk = 0U;
#line 1033
        ns.ldv_38802.pdsk = 6U;
      }
#line 1035
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1039
  if ((int )ns.ldv_38802.conn > 9 && (int )ns.ldv_38802.conn <= 21) {
#line 1040
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 1041
      ns.ldv_38802.disk = 8U;
    } else {

    }
#line 1042
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 1043
      ns.ldv_38802.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 1047
  disk_min = D_DISKLESS;
#line 1048
  disk_max = D_UP_TO_DATE;
#line 1049
  pdsk_min = D_INCONSISTENT;
#line 1050
  pdsk_max = D_UNKNOWN;
#line 1051
  switch ((unsigned int )ns.ldv_38802.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 1057
  disk_min = D_INCONSISTENT;
#line 1058
  disk_max = D_OUTDATED;
#line 1059
  pdsk_min = D_UP_TO_DATE;
#line 1060
  pdsk_max = D_UP_TO_DATE;
#line 1061
  goto ldv_50533;
  case 18U: ;
  case 19U: 
#line 1064
  disk_min = D_UP_TO_DATE;
#line 1065
  disk_max = D_UP_TO_DATE;
#line 1066
  pdsk_min = D_UP_TO_DATE;
#line 1067
  pdsk_max = D_UP_TO_DATE;
#line 1068
  goto ldv_50533;
  case 10U: 
#line 1070
  disk_min = D_DISKLESS;
#line 1071
  disk_max = D_UP_TO_DATE;
#line 1072
  pdsk_min = D_DISKLESS;
#line 1073
  pdsk_max = D_UP_TO_DATE;
#line 1074
  goto ldv_50533;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 1079
  disk_min = D_UP_TO_DATE;
#line 1080
  disk_max = D_UP_TO_DATE;
#line 1081
  pdsk_min = D_INCONSISTENT;
#line 1082
  pdsk_max = D_CONSISTENT;
#line 1083
  goto ldv_50533;
  case 17U: 
#line 1085
  disk_min = D_INCONSISTENT;
#line 1086
  disk_max = D_INCONSISTENT;
#line 1087
  pdsk_min = D_UP_TO_DATE;
#line 1088
  pdsk_max = D_UP_TO_DATE;
#line 1089
  goto ldv_50533;
  case 16U: 
#line 1091
  disk_min = D_UP_TO_DATE;
#line 1092
  disk_max = D_UP_TO_DATE;
#line 1093
  pdsk_min = D_INCONSISTENT;
#line 1094
  pdsk_max = D_INCONSISTENT;
#line 1095
  goto ldv_50533;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1107
  goto ldv_50533;
  }
  ldv_50533: ;
#line 1109
  if ((unsigned int )ns.ldv_38802.disk > (unsigned int )disk_max) {
#line 1110
    ns.ldv_38802.disk = (unsigned char )disk_max;
  } else {

  }
#line 1112
  if ((unsigned int )ns.ldv_38802.disk < (unsigned int )disk_min) {
#line 1113
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1114
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 1115
    ns.ldv_38802.disk = (unsigned char )disk_min;
  } else {

  }
#line 1117
  if ((unsigned int )ns.ldv_38802.pdsk > (unsigned int )pdsk_max) {
#line 1118
    ns.ldv_38802.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1120
  if ((unsigned int )ns.ldv_38802.pdsk < (unsigned int )pdsk_min) {
#line 1121
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1122
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 1123
    ns.ldv_38802.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1126
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38802.conn <= 9) && (int )ns.ldv_38802.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38802.conn > 9) || (int )os.ldv_38802.pdsk <= 5)) {
#line 1129
    ns.ldv_38802.susp_fen = 1U;
  } else {

  }
#line 1131
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38802.disk <= 7) && (int )ns.ldv_38802.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38802.disk > 7) || (int )os.ldv_38802.pdsk > 7)) {
#line 1134
    ns.ldv_38802.susp_nod = 1U;
  } else {

  }
#line 1136
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1137
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1138
      ns.ldv_38802.conn = 20U;
    } else {

    }
#line 1139
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1140
      ns.ldv_38802.conn = 21U;
    } else {

    }
  } else {
#line 1142
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1143
      ns.ldv_38802.conn = 16U;
    } else {

    }
#line 1144
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1145
      ns.ldv_38802.conn = 17U;
    } else {

    }
  }
#line 1148
  return (ns);
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1154
  if (mdev->agreed_pro_version <= 89) {
#line 1155
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1156
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1157
  mdev->ov_position = 0UL;
#line 1158
  if ((unsigned int )cs == 19U) {
#line 1164
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1166
    bit = mdev->ov_start_sector >> 3;
#line 1167
    if (mdev->rs_total <= bit) {
#line 1168
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1170
      mdev->rs_total = 1UL;
    } else {
#line 1172
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1173
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1175
  mdev->ov_left = mdev->rs_total;
#line 1176
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1180
  tmp = test_and_clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1180
  if (tmp != 0) {
#line 1181
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1182
  return;
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1198
  rv = 1;
#line 1202
  os = mdev->state;
#line 1204
  ns = sanitize_state(mdev, os, ns, & ssw);
#line 1206
  if (ns.i == os.i) {
#line 1207
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1209
  if (((unsigned int )flags & 1U) == 0U) {
#line 1213
    rv = is_valid_state(mdev, ns);
#line 1214
    if ((int )rv <= 0) {
#line 1218
      tmp = is_valid_state(mdev, os);
#line 1218
      if ((int )tmp == (int )rv) {
#line 1219
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1221
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1224
  if ((int )rv <= 0) {
#line 1225
    if (((unsigned int )flags & 2U) != 0U) {
#line 1226
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1227
    return (rv);
  } else {

  }
#line 1230
  print_sanitize_warnings(mdev, ssw);
#line 1234
  pbp = (char *)(& pb);
#line 1235
  *pbp = 0;
#line 1236
  if ((int )ns.ldv_38802.role != (int )os.ldv_38802.role) {
#line 1237
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_38802.role);
#line 1237
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_38802.role);
#line 1237
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1237
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1240
  if ((int )ns.ldv_38802.peer != (int )os.ldv_38802.peer) {
#line 1241
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38802.peer);
#line 1241
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_38802.peer);
#line 1241
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1241
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1244
  if ((int )ns.ldv_38802.conn != (int )os.ldv_38802.conn) {
#line 1245
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_38802.conn);
#line 1245
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_38802.conn);
#line 1245
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1245
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1248
  if ((int )ns.ldv_38802.disk != (int )os.ldv_38802.disk) {
#line 1249
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38802.disk);
#line 1249
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_38802.disk);
#line 1249
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1249
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1252
  if ((int )ns.ldv_38802.pdsk != (int )os.ldv_38802.pdsk) {
#line 1253
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38802.pdsk);
#line 1253
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_38802.pdsk);
#line 1253
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1253
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1256
  tmp___18 = is_susp(ns);
#line 1256
  tmp___19 = is_susp(os);
#line 1256
  if (tmp___18 != tmp___19) {
#line 1257
    tmp___15 = is_susp(ns);
#line 1257
    tmp___16 = is_susp(os);
#line 1257
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1257
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1260
  if ((int )ns.ldv_38802.aftr_isp != (int )os.ldv_38802.aftr_isp) {
#line 1261
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_38802.aftr_isp,
                       (int )ns.ldv_38802.aftr_isp);
#line 1261
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1264
  if ((int )ns.ldv_38802.peer_isp != (int )os.ldv_38802.peer_isp) {
#line 1265
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_38802.peer_isp,
                       (int )ns.ldv_38802.peer_isp);
#line 1265
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1268
  if ((int )ns.ldv_38802.user_isp != (int )os.ldv_38802.user_isp) {
#line 1269
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_38802.user_isp,
                       (int )ns.ldv_38802.user_isp);
#line 1269
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1272
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1283
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1283
    tmp___23 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1283
    if (tmp___23 == 0) {
#line 1287
      set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1293
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1295
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1297
  mdev->state = ns;
#line 1299
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38802.disk > 2) {
#line 1300
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1302
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1303
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1306
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_38802.conn <= 9) {
#line 1308
    tmp___24 = drbd_bm_bits(mdev);
#line 1308
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1310
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1314
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1316
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1317
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1319
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1320
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1323
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1325
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1326
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1329
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1331
    now = jiffies;
#line 1334
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_38802.conn);
#line 1335
    mdev->rs_start = now;
#line 1336
    mdev->rs_last_events = 0;
#line 1337
    mdev->rs_last_sect_ev = 0;
#line 1338
    mdev->ov_last_oos_size = 0UL;
#line 1339
    mdev->ov_last_oos_start = 0UL;
#line 1341
    i = 0;
#line 1341
    goto ldv_50577;
    ldv_50576: 
#line 1342
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1343
    mdev->rs_mark_time[i] = now;
#line 1341
    i = i + 1;
    ldv_50577: ;
#line 1341
    if (i <= 7) {
#line 1342
      goto ldv_50576;
    } else {

    }
#line 1346
    drbd_rs_controller_reset(mdev);
#line 1348
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1349
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1351
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1355
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1355
  if (tmp___26 != 0) {
#line 1356
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1360
    tmp___25 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 1360
    if (tmp___25 != 0) {
#line 1361
      mdf = mdf | 64U;
    } else {

    }
#line 1362
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_38802.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1364
      mdf = mdf | 2U;
    } else {

    }
#line 1365
    if ((int )mdev->state.ldv_38802.conn > 9) {
#line 1366
      mdf = mdf | 4U;
    } else {

    }
#line 1367
    if ((int )mdev->state.ldv_38802.disk > 4) {
#line 1368
      mdf = mdf | 1U;
    } else {

    }
#line 1369
    if ((int )mdev->state.ldv_38802.disk > 5) {
#line 1370
      mdf = mdf | 16U;
    } else {

    }
#line 1371
    if ((int )mdev->state.ldv_38802.pdsk <= 5 && (int )mdev->state.ldv_38802.pdsk > 3) {
#line 1372
      mdf = mdf | 32U;
    } else {

    }
#line 1373
    if ((mdev->ldev)->md.flags != mdf) {
#line 1374
      (mdev->ldev)->md.flags = mdf;
#line 1375
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1377
    if ((int )os.ldv_38802.disk <= 6 && (int )ns.ldv_38802.disk > 6) {
#line 1378
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1379
    put_ldev(mdev);
  } else {

  }
#line 1383
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1385
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1388
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1389
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1392
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1393
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1396
  if (((int )os.ldv_38802.conn > 8 && (int )ns.ldv_38802.conn <= 7) && (int )ns.ldv_38802.conn > 2) {
#line 1398
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1401
  if ((int )os.ldv_38802.conn <= 9 && (int )ns.ldv_38802.conn > 9) {
#line 1402
    drbd_resume_al(mdev);
  } else {

  }
#line 1407
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 1408
    mdev->last_reconnect_jif = jiffies;
  } else {

  }
#line 1409
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_38802.disk > 3) {
#line 1411
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1413
  tmp___27 = kmalloc(48UL, 32U);
#line 1413
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1414
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1415
    ascw->os = os;
#line 1416
    ascw->ns = ns;
#line 1417
    ascw->flags = flags;
#line 1418
    ascw->w.cb = & w_after_state_ch;
#line 1419
    ascw->done = done;
#line 1420
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1422
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1425
  return (rv);
}
}
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1431
  __mptr = (struct drbd_work  const  *)w;
#line 1431
  ascw = (struct after_state_chg_work *)__mptr;
#line 1432
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1433
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1434
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1434
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1434);
    } else {

    }
#line 1435
    complete(ascw->done);
  } else {

  }
#line 1437
  kfree((void const   *)ascw);
#line 1439
  return (1);
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1444
  if (rv != 0) {
#line 1445
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1446
    val.i = 0U;
#line 1446
    val.ldv_38802.conn = 10U;
#line 1446
    mask.i = 0U;
#line 1446
    mask.ldv_38802.conn = 31U;
#line 1446
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1447
    return;
  } else {

  }
#line 1450
  switch ((int )mdev->state.ldv_38802.conn) {
  case 12: 
#line 1452
  val___0.i = 0U;
#line 1452
  val___0.ldv_38802.conn = 15U;
#line 1452
  mask___0.i = 0U;
#line 1452
  mask___0.ldv_38802.conn = 31U;
#line 1452
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1453
  goto ldv_50601;
  case 11: 
#line 1455
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1456
  goto ldv_50601;
  }
  ldv_50601: ;
#line 1459
  return;
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1466
  tmp = get_current();
#line 1466
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1466);
  } else {

  }
#line 1469
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1471
  drbd_bm_lock(mdev, why, flags);
#line 1472
  rv = (*io_fn)(mdev);
#line 1473
  drbd_bm_unlock(mdev);
#line 1475
  drbd_resume_io(mdev);
#line 1477
  return (rv);
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 1491
  what = nothing;
#line 1492
  nsm.i = 4294967295U;
#line 1494
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1495
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 1496
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1497
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1500
  fp = FP_DONT_CARE;
#line 1501
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1501
  if (tmp != 0) {
#line 1502
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1503
    put_ldev(mdev);
  } else {

  }
#line 1507
  drbd_bcast_state(mdev, ns);
#line 1509
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38802.disk > 7) || (int )os.ldv_38802.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38802.disk <= 7) && (int )ns.ldv_38802.pdsk <= 7)) {
#line 1511
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1516
  if ((int )os.ldv_38802.disk <= 3 && (int )ns.ldv_38802.disk > 3) {
#line 1517
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
  } else {

  }
#line 1519
  nsm.i = 4294967295U;
#line 1520
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1521
    if ((int )os.ldv_38802.conn <= 9 && (int )ns.ldv_38802.conn > 9) {
#line 1522
      what = resend;
    } else {

    }
#line 1524
    if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_38802.disk > 3) {
#line 1526
      what = restart_frozen_disk_io;
    } else {

    }
#line 1528
    if ((unsigned int )what != 27U) {
#line 1529
      nsm.ldv_38802.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1532
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1534
    if ((int )os.ldv_38802.pdsk > 5 && (int )ns.ldv_38802.pdsk <= 5) {
#line 1535
      tl_clear(mdev);
#line 1536
      tmp___0 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1536
      if (tmp___0 != 0) {
#line 1537
        drbd_uuid_new_current(mdev);
#line 1538
        clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1540
      spin_lock_irq(& mdev->req_lock);
#line 1541
      __ns.i = mdev->state.i;
#line 1541
      __ns.ldv_38802.susp_fen = 0U;
#line 1541
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1542
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1545
    if ((int )os.ldv_38802.conn <= 9 && (int )ns.ldv_38802.conn > 9) {
#line 1546
      clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1547
      what = resend;
#line 1548
      nsm.ldv_38802.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1552
  if ((unsigned int )what != 27U) {
#line 1553
    spin_lock_irq(& mdev->req_lock);
#line 1554
    _tl_restart(mdev, what);
#line 1555
    nsm.i = nsm.i & mdev->state.i;
#line 1556
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1557
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1564
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1564
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1564
    if (tmp___1 != 0) {
#line 1567
      drbd_gen_and_send_sync_uuid(mdev);
#line 1568
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1572
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_38802.pdsk > 0) {
#line 1575
    mdev->rs_total = 0UL;
#line 1576
    mdev->rs_failed = 0UL;
#line 1577
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1578
    drbd_rs_cancel_all(mdev);
#line 1580
    drbd_send_uuids(mdev);
#line 1581
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1586
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1588
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1593
  if ((((int )os.ldv_38802.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_38802.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1599
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1599
    if (tmp___3 != 0) {
#line 1600
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38802.disk > 7) {
#line 1602
        tmp___2 = is_susp(mdev->state);
#line 1602
        if (tmp___2 != 0) {
#line 1603
          set_bit(26U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1605
          drbd_uuid_new_current(mdev);
#line 1606
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1609
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1613
  if ((int )ns.ldv_38802.pdsk <= 3) {
#line 1613
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1613
    if (tmp___4 != 0) {
#line 1614
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38802.disk > 7) {
#line 1616
        drbd_uuid_new_current(mdev);
#line 1617
        drbd_send_uuids(mdev);
      } else {

      }
#line 1620
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1624
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1626
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1632
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_38802.conn <= 10) {
#line 1632
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1632
    if (tmp___5 != 0) {
#line 1636
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1638
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1642
  if (((int )ns.ldv_38802.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1644
    drbd_send_sizes(mdev, 0, 0);
#line 1645
    drbd_send_uuids(mdev);
#line 1646
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1650
  if ((int )ns.ldv_38802.conn > 9 && ((int )os.ldv_38802.aftr_isp != (int )ns.ldv_38802.aftr_isp || (int )os.ldv_38802.user_isp != (int )ns.ldv_38802.user_isp)) {
#line 1653
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1656
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1658
    suspend_other_sg(mdev);
  } else {

  }
#line 1662
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_38802.conn > 9) {
#line 1663
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1665
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1666
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1669
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1672
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1677
  if ((((int )os.ldv_38802.conn <= 9 && (int )ns.ldv_38802.conn <= 9) && (int )os.ldv_38802.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1680
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1685
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1686
    eh = EP_PASS_ON;
#line 1687
    was_io_error = 0;
#line 1692
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1693
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1694
      was_io_error = test_and_clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 1696
      if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1697
        drbd_khelper(mdev, (char *)"local-io-error");
      } else {

      }
#line 1712
      tmp___6 = test_and_clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1712
      if (tmp___6 != 0) {
#line 1713
        tl_abort_disk_io(mdev);
      } else {

      }
#line 1718
      if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1719
        tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.disk);
#line 1719
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___7);
      } else {

      }
#line 1723
      if ((int )ns.ldv_38802.conn > 9) {
#line 1724
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1726
      drbd_rs_cancel_all(mdev);
#line 1731
      drbd_md_sync(mdev);
    } else {

    }
#line 1733
    put_ldev(mdev);
  } else {

  }
#line 1739
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1742
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1743
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38802.disk);
#line 1743
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1747
    if ((int )ns.ldv_38802.conn > 9) {
#line 1748
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1752
    put_ldev(mdev);
  } else {

  }
#line 1756
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_38802.conn > 9) {
#line 1757
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1760
  if ((int )ns.ldv_38802.disk > 3 && (int )ns.ldv_38802.pdsk > 3) {
#line 1760
    tmp___9 = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1760
    if (tmp___9 != 0) {
#line 1762
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1763
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1767
  if ((((int )os.ldv_38802.conn > 10 && (int )ns.ldv_38802.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1770
    resume_next_sg(mdev);
  } else {

  }
#line 1774
  if (((int )os.ldv_38802.disk <= 7 && (int )os.ldv_38802.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1775
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1778
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1779
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
#line 1780
    __wake_up(& mdev->state_wait, 3U, 1, 0);
  } else {

  }
#line 1790
  if ((int )os.ldv_38802.conn > 10 && (int )ns.ldv_38802.conn <= 10) {
#line 1790
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1790
    if (tmp___10 != 0) {
#line 1791
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1793
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1797
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1797
    tmp___11 = is_susp(ns);
#line 1797
    if (tmp___11 == 0) {
#line 1797
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1798
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1801
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1802
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1806
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1809
    if ((int )os.ldv_38802.aftr_isp != (int )ns.ldv_38802.aftr_isp) {
#line 1810
      resume_next_sg(mdev);
    } else {

    }
#line 1812
    tmp___12 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1812
    if (tmp___12 != 0) {
#line 1813
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1816
  drbd_md_sync(mdev);
#line 1817
  return;
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1822
  thi = (struct drbd_thread *)arg;
#line 1823
  mdev = thi->mdev;
  restart: 
#line 1828
  retval = (*(thi->function))(thi);
#line 1830
  tmp = spinlock_check(& thi->t_lock);
#line 1830
  flags = _raw_spin_lock_irqsave(tmp);
#line 1842
  if ((unsigned int )thi->t_state == 3U) {
#line 1843
    tmp___0 = get_current();
#line 1843
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1844
    thi->t_state = Running;
#line 1845
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1846
    goto restart;
  } else {

  }
#line 1849
  thi->task = 0;
#line 1850
  thi->t_state = None;
#line 1851
  __asm__  volatile   ("mfence": : : "memory");
#line 1852
  complete(& thi->stop);
#line 1853
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1855
  tmp___1 = get_current();
#line 1855
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1858
  module_put(& __this_module);
#line 1859
  return (retval);
}
}
#line 1862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1865
  spinlock_check(& thi->t_lock);
#line 1865
  __raw_spin_lock_init(& thi->t_lock.ldv_5988.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1866
  thi->task = 0;
#line 1867
  thi->t_state = None;
#line 1868
  thi->function = func;
#line 1869
  thi->mdev = mdev;
#line 1870
  return;
}
}
#line 1872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 1874
  mdev = thi->mdev;
#line 1878
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1885
  tmp = spinlock_check(& thi->t_lock);
#line 1885
  flags = _raw_spin_lock_irqsave(tmp);
#line 1887
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1889
  tmp___0 = get_current();
#line 1889
  tmp___1 = get_current();
#line 1889
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1893
  tmp___2 = try_module_get(& __this_module);
#line 1893
  if (tmp___2) {
#line 1893
    tmp___3 = 0;
  } else {
#line 1893
    tmp___3 = 1;
  }
#line 1893
  if (tmp___3) {
#line 1894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1895
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1896
    return (0);
  } else {

  }
#line 1899
  init_completion(& thi->stop);
#line 1900
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1900);
  } else {

  }
#line 1901
  thi->reset_cpu_mask = 1;
#line 1902
  thi->t_state = Running;
#line 1903
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1904
  tmp___4 = get_current();
#line 1904
  flush_signals(tmp___4);
#line 1906
  tmp___5 = mdev_to_minor(mdev);
#line 1906
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___5,
                              me);
#line 1909
  tmp___6 = IS_ERR((void const   *)nt);
#line 1909
  if (tmp___6 != 0L) {
#line 1910
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1912
    module_put(& __this_module);
#line 1913
    return (0);
  } else {

  }
#line 1915
  tmp___7 = spinlock_check(& thi->t_lock);
#line 1915
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1916
  thi->task = nt;
#line 1917
  thi->t_state = Running;
#line 1918
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1919
  wake_up_process(nt);
#line 1920
  goto ldv_50657;
  case 2U: 
#line 1922
  thi->t_state = Restarting;
#line 1923
  tmp___8 = get_current();
#line 1923
  tmp___9 = get_current();
#line 1923
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___9->comm), tmp___8->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1929
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1930
  goto ldv_50657;
  }
  ldv_50657: ;
#line 1933
  return (1);
}
}
#line 1937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1941
  ns = restart != 0 ? Restarting : Exiting;
#line 1944
  tmp = spinlock_check(& thi->t_lock);
#line 1944
  flags = _raw_spin_lock_irqsave(tmp);
#line 1946
  if ((unsigned int )thi->t_state == 0U) {
#line 1947
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1948
    if (restart != 0) {
#line 1949
      drbd_thread_start(thi);
    } else {

    }
#line 1950
    return;
  } else {

  }
#line 1953
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1954
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1955
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1956
      return;
    } else {

    }
#line 1959
    thi->t_state = ns;
#line 1960
    __asm__  volatile   ("mfence": : : "memory");
#line 1961
    init_completion(& thi->stop);
#line 1962
    tmp___0 = get_current();
#line 1962
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1963
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1967
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1969
  if (wait != 0) {
#line 1970
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1971
  return;
}
}
#line 1981 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1986
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1986
  if (tmp != 0U) {
#line 1987
    return;
  } else {

  }
#line 1989
  tmp___0 = mdev_to_minor(mdev);
#line 1989
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1989
  ord = (int )(tmp___0 % tmp___1);
#line 1990
  cpu = -1;
#line 1990
  goto ldv_50678;
  ldv_50677: 
#line 1991
  tmp___2 = ord;
#line 1991
  ord = ord - 1;
#line 1991
  if (tmp___2 == 0) {
#line 1992
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1993
    return;
  } else {

  }
  ldv_50678: 
#line 1990
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1990
  cpu = (int )tmp___3;
#line 1990
  if (cpu < nr_cpu_ids) {
#line 1991
    goto ldv_50677;
  } else {

  }
#line 1997
  cpumask_setall(mdev->cpu_mask);
#line 1998
  return;
}
}
#line 2007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 2009
  tmp = get_current();
#line 2009
  p = tmp;
#line 2010
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 2015
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 2015
  if (_b != 0) {
#line 2015
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2015);
  } else {

  }
#line 2015
  if (_b != 0) {
#line 2016
    return;
  } else {

  }
#line 2017
  if (thi->reset_cpu_mask == 0) {
#line 2018
    return;
  } else {

  }
#line 2019
  thi->reset_cpu_mask = 0;
#line 2020
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 2021
  return;
}
}
#line 2025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 2031
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 2031
  if (_b != 0) {
#line 2031
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2031);
  } else {

  }
#line 2031
  if (_b != 0) {
#line 2031
    return (0);
  } else {

  }
#line 2032
  _b___0 = size == 0UL;
#line 2032
  if (_b___0 != 0) {
#line 2032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2032);
  } else {

  }
#line 2032
  if (_b___0 != 0) {
#line 2032
    return (0);
  } else {

  }
#line 2034
  h->magic = 1728214147U;
#line 2035
  tmp = __fswab16((int )((__u16 )cmd));
#line 2035
  h->command = tmp;
#line 2036
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 2036
  h->length = tmp___0;
#line 2038
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 2040
  ok = (size_t )sent == size;
#line 2041
  if (ok == 0) {
#line 2041
    tmp___2 = get_current();
#line 2041
    tmp___3 = signal_pending(tmp___2);
#line 2041
    if (tmp___3 == 0) {
#line 2042
      tmp___1 = cmdname(cmd);
#line 2042
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 2044
  return (ok);
}
}
#line 2050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 2053
  ok = 0;
#line 2056
  if (use_data_socket != 0) {
#line 2057
    ldv_mutex_lock_131(& mdev->data.mutex);
#line 2058
    sock = mdev->data.socket;
  } else {
#line 2060
    ldv_mutex_lock_132(& mdev->meta.mutex);
#line 2061
    sock = mdev->meta.socket;
  }
#line 2066
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 2066
  if (tmp != 0L) {
#line 2067
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 2069
  if (use_data_socket != 0) {
#line 2070
    ldv_mutex_unlock_133(& mdev->data.mutex);
  } else {
#line 2072
    ldv_mutex_unlock_134(& mdev->meta.mutex);
  }
#line 2073
  return (ok);
}
}
#line 2076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2082
  h.magic = 1728214147U;
#line 2083
  tmp = __fswab16((int )((__u16 )cmd));
#line 2083
  h.command = tmp;
#line 2084
  tmp___0 = __fswab16((int )((__u16 )size));
#line 2084
  h.length = tmp___0;
#line 2086
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 2086
  if (tmp___1 == 0) {
#line 2087
    return (0);
  } else {

  }
#line 2089
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 2089
  ok = tmp___2 == 8;
#line 2091
  if (ok != 0) {
#line 2091
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 2091
    if ((size_t )tmp___3 == size) {
#line 2091
      tmp___4 = 1;
    } else {
#line 2091
      tmp___4 = 0;
    }
  } else {
#line 2091
    tmp___4 = 0;
  }
#line 2091
  ok = tmp___4;
#line 2094
  drbd_put_data_sock___0(mdev);
#line 2096
  return (ok);
}
}
#line 2099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 2104
  apv = mdev->agreed_pro_version;
#line 2106
  if (apv > 87) {
#line 2106
    if (apv == 88) {
#line 2106
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 2106
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 2106
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 2106
    size = tmp___0;
  } else {
#line 2106
    size = 12;
  }
#line 2115
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 2116
  sock = mdev->data.socket;
#line 2118
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2118
  if (tmp___6 != 0L) {
#line 2119
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 2121
    p = & mdev->data.sbuf.rs_param_95;
#line 2124
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2126
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2126
    p->rate = tmp___1;
#line 2127
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2127
    p->c_plan_ahead = tmp___2;
#line 2128
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2128
    p->c_delay_target = tmp___3;
#line 2129
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2129
    p->c_fill_target = tmp___4;
#line 2130
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2130
    p->c_max_rate = tmp___5;
#line 2132
    if (apv > 87) {
#line 2133
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2134
    if (apv > 88) {
#line 2135
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2137
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2139
    rv = 0;
  }
#line 2141
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 2143
  return (rv);
}
}
#line 2146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2151
  size = 32;
#line 2153
  if (mdev->agreed_pro_version > 86) {
#line 2154
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2154
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2158
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2158
  p = (struct p_protocol *)tmp___0;
#line 2159
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2160
    return (0);
  } else {

  }
#line 2162
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2162
  p->protocol = tmp___1;
#line 2163
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2163
  p->after_sb_0p = tmp___2;
#line 2164
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2164
  p->after_sb_1p = tmp___3;
#line 2165
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2165
  p->after_sb_2p = tmp___4;
#line 2166
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2166
  p->two_primaries = tmp___5;
#line 2168
  cf = 0;
#line 2169
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2170
    cf = cf | 1;
  } else {

  }
#line 2171
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2172
    if (mdev->agreed_pro_version > 91) {
#line 2173
      cf = cf | 2;
    } else {
#line 2175
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2176
      kfree((void const   *)p);
#line 2177
      return (-1);
    }
  } else {

  }
#line 2180
  tmp___6 = __fswab32((__u32 )cf);
#line 2180
  p->conn_flags = tmp___6;
#line 2182
  if (mdev->agreed_pro_version > 86) {
#line 2183
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2185
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2187
  kfree((void const   *)p);
#line 2188
  return (rv);
}
}
#line 2191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2196
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2196
  if (tmp == 0) {
#line 2197
    return (1);
  } else {

  }
#line 2199
  i = 0;
#line 2199
  goto ldv_50744;
  ldv_50743: ;
#line 2200
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2200
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2200
    p.uuid[i] = tmp___0;
  } else {
#line 2200
    p.uuid[i] = 0ULL;
  }
#line 2199
  i = i + 1;
  ldv_50744: ;
#line 2199
  if (i <= 3) {
#line 2200
    goto ldv_50743;
  } else {

  }
#line 2202
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2203
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2203
  p.uuid[4] = tmp___1;
#line 2204
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2205
  tmp___2 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2205
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2206
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2207
  tmp___3 = __fswab64(uuid_flags);
#line 2207
  p.uuid[5] = tmp___3;
#line 2209
  put_ldev(mdev);
#line 2211
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2211
  return (tmp___4);
}
}
#line 2215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2217
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2217
  return (tmp);
}
}
#line 2220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2222
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2222
  return (tmp);
}
}
#line 2225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2227
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2227
  if (tmp != 0) {
#line 2228
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2229
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2235
    put_ldev(mdev);
  } else {
#line 2237
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2238
  return;
}
}
#line 2243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2248
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2248
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2248);
  } else {

  }
#line 2250
  uuid = (mdev->ldev)->md.uuid[1];
#line 2251
  if (uuid != 0ULL && uuid != 4ULL) {
#line 2252
    uuid = uuid + 281474976710656ULL;
  } else {
#line 2254
    get_random_bytes((void *)(& uuid), 8);
  }
#line 2255
  drbd_uuid_set(mdev, 1, uuid);
#line 2256
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2257
  drbd_md_sync(mdev);
#line 2258
  tmp = __fswab64(uuid);
#line 2258
  p.uuid = tmp;
#line 2260
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2260
  return (tmp___0);
}
}
#line 2264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  unsigned int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___0 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2272
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2272
  if (tmp___0 != 0) {
#line 2273
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2273
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2273);
    } else {

    }
#line 2274
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2275
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2276
    q_order_type = drbd_queue_order_type(mdev);
#line 2277
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2277
    max_bio_size = tmp << 9;
#line 2278
    _min1 = max_bio_size;
#line 2278
    _min2 = 131072U;
#line 2278
    max_bio_size = _min1 < _min2 ? _min1 : _min2;
#line 2279
    put_ldev(mdev);
  } else {
#line 2281
    d_size = 0UL;
#line 2282
    u_size = 0UL;
#line 2283
    q_order_type = 0;
#line 2284
    max_bio_size = 131072U;
  }
#line 2288
  if (mdev->agreed_pro_version <= 94) {
#line 2289
    _min1___0 = max_bio_size;
#line 2289
    _min2___0 = 32768U;
#line 2289
    max_bio_size = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
  } else {

  }
#line 2291
  tmp___1 = __fswab64((__u64 )d_size);
#line 2291
  p.d_size = tmp___1;
#line 2292
  tmp___2 = __fswab64((__u64 )u_size);
#line 2292
  p.u_size = tmp___2;
#line 2293
  if (trigger_reply == 0) {
#line 2293
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2293
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2293
    tmp___4 = 0ULL;
  }
#line 2293
  tmp___5 = __fswab64(tmp___4);
#line 2293
  p.c_size = tmp___5;
#line 2294
  tmp___6 = __fswab32(max_bio_size);
#line 2294
  p.max_bio_size = tmp___6;
#line 2295
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2295
  p.queue_order_type = tmp___7;
#line 2296
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2296
  p.dds_flags = tmp___8;
#line 2298
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2300
  return (ok);
}
}
#line 2307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2311
  ok = 0;
#line 2315
  drbd_state_lock___0(mdev);
#line 2317
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2319
  tmp = __fswab32(mdev->state.i);
#line 2319
  p.state = tmp;
#line 2320
  sock = mdev->data.socket;
#line 2322
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2322
  if (tmp___0 != 0L) {
#line 2323
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2327
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2329
  drbd_state_unlock(mdev);
#line 2330
  return (ok);
}
}
#line 2343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2347
  ok = 0;
#line 2349
  ldv_mutex_lock_139(& mdev->data.mutex);
#line 2351
  tmp = __fswab32(state.i);
#line 2351
  p.state = tmp;
#line 2352
  sock = mdev->data.socket;
#line 2354
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2354
  if (tmp___0 != 0L) {
#line 2355
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2359
  ldv_mutex_unlock_140(& mdev->data.mutex);
#line 2361
  return (ok);
}
}
#line 2364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2369
  tmp = __fswab32(mask.i);
#line 2369
  p.mask = tmp;
#line 2370
  tmp___0 = __fswab32(val.i);
#line 2370
  p.val = tmp___0;
#line 2372
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2372
  return (tmp___1);
}
}
#line 2376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2380
  tmp = __fswab32((__u32 )retcode);
#line 2380
  p.retcode = tmp;
#line 2382
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2382
  return (tmp___0);
}
}
#line 2386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2399
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2401
    return (0);
  } else {

  }
#line 2403
  if (c->bit_offset >= c->bm_bits) {
#line 2404
    return (0);
  } else {

  }
#line 2407
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2408
  memset((void *)(& p->code), 0, 4087UL);
#line 2410
  plain_bits = 0UL;
#line 2415
  toggle = 2U;
  ldv_50817: ;
#line 2420
  if (toggle == 0U) {
#line 2420
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2420
    tmp = tmp___0;
  } else {
#line 2420
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2420
    tmp = tmp___1;
  }
#line 2422
  if (tmp == 0xffffffffffffffffUL) {
#line 2423
    tmp = c->bm_bits;
  } else {

  }
#line 2424
  rl = tmp - c->bit_offset;
#line 2426
  if (toggle == 2U) {
#line 2427
    if (rl == 0UL) {
#line 2430
      DCBP_set_start(p, 1);
#line 2432
      toggle = toggle == 0U;
#line 2433
      goto ldv_50815;
    } else {

    }
#line 2435
    DCBP_set_start(p, 0);
  } else {

  }
#line 2440
  if (rl == 0UL) {
#line 2441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2443
    return (-1);
  } else {

  }
#line 2446
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2447
  if (bits == -105) {
#line 2448
    goto ldv_50816;
  } else {

  }
#line 2449
  if (bits <= 0) {
#line 2450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2451
    return (0);
  } else {

  }
#line 2454
  toggle = toggle == 0U;
#line 2455
  plain_bits = plain_bits + rl;
#line 2456
  c->bit_offset = tmp;
  ldv_50815: ;
#line 2457
  if (c->bit_offset < c->bm_bits) {
#line 2458
    goto ldv_50817;
  } else {

  }
  ldv_50816: 
#line 2459
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2461
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2464
    c->bit_offset = c->bit_offset - plain_bits;
#line 2465
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2466
    c->bit_offset = c->word_offset * 64UL;
#line 2467
    return (0);
  } else {

  }
#line 2472
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2475
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2477
  return ((int )len);
}
}
#line 2487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2490
  p = (struct p_compressed_bm *)h;
#line 2495
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2497
  if (len < 0) {
#line 2498
    return (-5);
  } else {

  }
#line 2500
  if (len != 0) {
#line 2501
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2502
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2505
    c->packets[0] = c->packets[0] + 1U;
#line 2506
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2508
    if (c->bit_offset >= c->bm_bits) {
#line 2509
      len = 0;
    } else {

    }
  } else {
#line 2513
    __min1 = 511UL;
#line 2513
    __min2 = c->bm_words - c->word_offset;
#line 2513
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2514
    len = (int )((unsigned int )num_words * 8U);
#line 2515
    if (len != 0) {
#line 2516
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2517
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2519
    c->word_offset = c->word_offset + num_words;
#line 2520
    c->bit_offset = c->word_offset * 64UL;
#line 2522
    c->packets[1] = c->packets[1] + 1U;
#line 2523
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2525
    if (c->bit_offset > c->bm_bits) {
#line 2526
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2528
  if (ok != 0) {
#line 2529
    if (len == 0) {
#line 2530
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2531
      return (0);
    } else {
#line 2533
      return (1);
    }
  } else {

  }
#line 2535
  return (-5);
}
}
#line 2539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2545
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2545
  if (_b != 0) {
#line 2545
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2545);
  } else {

  }
#line 2545
  if (_b != 0) {
#line 2545
    return (0);
  } else {

  }
#line 2549
  tmp = __get_free_pages(16U, 0U);
#line 2549
  p = (struct p_header80 *)tmp;
#line 2550
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2552
    return (0);
  } else {

  }
#line 2555
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2555
  if (tmp___2 != 0) {
#line 2556
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2556
    if (tmp___1 != 0) {
#line 2557
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2558
      drbd_bm_set_all(mdev);
#line 2559
      tmp___0 = drbd_bm_write(mdev);
#line 2559
      if (tmp___0 != 0) {
#line 2563
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2565
        drbd_md_clear_flag(mdev, 8);
#line 2566
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2569
    put_ldev(mdev);
  } else {

  }
#line 2572
  tmp___3 = drbd_bm_bits(mdev);
#line 2572
  tmp___4 = drbd_bm_words(mdev);
#line 2572
  __constr_expr_0.bm_bits = tmp___3;
#line 2572
  __constr_expr_0.bm_words = tmp___4;
#line 2572
  __constr_expr_0.bit_offset = 0UL;
#line 2572
  __constr_expr_0.word_offset = 0UL;
#line 2572
  __constr_expr_0.packets[0] = 0U;
#line 2572
  __constr_expr_0.packets[1] = 0U;
#line 2572
  __constr_expr_0.bytes[0] = 0U;
#line 2572
  __constr_expr_0.bytes[1] = 0U;
#line 2572
  c = __constr_expr_0;
  ldv_50840: 
#line 2578
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2579
  if (err > 0) {
#line 2580
    goto ldv_50840;
  } else {

  }
#line 2581
  free_pages((unsigned long )p, 0U);
#line 2582
  return (err == 0);
}
}
#line 2585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2589
  tmp = drbd_get_data_sock___0(mdev);
#line 2589
  if (tmp == 0) {
#line 2590
    return (-1);
  } else {

  }
#line 2591
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2591
  err = tmp___0 == 0;
#line 2592
  drbd_put_data_sock___0(mdev);
#line 2593
  return (err);
}
}
#line 2596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2601
  p.barrier = barrier_nr;
#line 2602
  tmp = __fswab32(set_size);
#line 2602
  p.set_size = tmp;
#line 2604
  if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 2605
    return (0);
  } else {

  }
#line 2606
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2608
  return (ok);
}
}
#line 2619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2627
  p.sector = sector;
#line 2628
  p.block_id = block_id;
#line 2629
  p.blksize = blksize;
#line 2630
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2630
  tmp___0 = __fswab32((__u32 )tmp);
#line 2630
  p.seq_num = tmp___0;
#line 2632
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_38802.conn <= 9) {
#line 2633
    return (0);
  } else {

  }
#line 2634
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2636
  return (ok);
}
}
#line 2642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2645
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2645
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2645
    tmp___0 = tmp;
  } else {
#line 2645
    tmp___0 = 0U;
  }
#line 2645
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2647
  tmp___1 = __fswab32((__u32 )data_size);
#line 2647
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2647
  return (tmp___2);
}
}
#line 2651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2654
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2654
  return (tmp);
}
}
#line 2663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2666
  tmp = __fswab32(e->size);
#line 2666
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2666
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_47580.block_id);
#line 2666
  return (tmp___1);
}
}
#line 2674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2677
  tmp = __fswab64(block_id);
#line 2677
  tmp___0 = __fswab32((__u32 )blksize);
#line 2677
  tmp___1 = __fswab64((__u64 )sector);
#line 2677
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2677
  return (tmp___2);
}
}
#line 2683 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2689
  tmp = __fswab64((__u64 )sector);
#line 2689
  p.sector = tmp;
#line 2690
  p.block_id = block_id;
#line 2691
  tmp___0 = __fswab32((__u32 )size);
#line 2691
  p.blksize = tmp___0;
#line 2693
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2695
  return (ok);
}
}
#line 2698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2706
  tmp = __fswab64((__u64 )sector);
#line 2706
  p.sector = tmp;
#line 2707
  p.block_id = 1728263026ULL;
#line 2708
  tmp___0 = __fswab32((__u32 )size);
#line 2708
  p.blksize = tmp___0;
#line 2710
  p.head.magic = 1728214147U;
#line 2711
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2711
  p.head.command = tmp___1;
#line 2712
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2712
  p.head.length = tmp___2;
#line 2714
  ldv_mutex_lock_141(& mdev->data.mutex);
#line 2716
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2716
  ok = tmp___3 == 32;
#line 2717
  if (ok != 0) {
#line 2717
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2717
    if (tmp___4 == digest_size) {
#line 2717
      tmp___5 = 1;
    } else {
#line 2717
      tmp___5 = 0;
    }
  } else {
#line 2717
    tmp___5 = 0;
  }
#line 2717
  ok = tmp___5;
#line 2719
  ldv_mutex_unlock_142(& mdev->data.mutex);
#line 2721
  return (ok);
}
}
#line 2724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2729
  tmp = __fswab64((__u64 )sector);
#line 2729
  p.sector = tmp;
#line 2730
  p.block_id = 1728261953ULL;
#line 2731
  tmp___0 = __fswab32((__u32 )size);
#line 2731
  p.blksize = tmp___0;
#line 2733
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2735
  return (ok);
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2747
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2747
    tmp___0 = 1;
  } else {
#line 2747
    tmp = get_t_state(& mdev->asender);
#line 2747
    if ((unsigned int )tmp != 1U) {
#line 2747
      tmp___0 = 1;
    } else
#line 2747
    if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 2747
      tmp___0 = 1;
    } else {
#line 2747
      tmp___0 = 0;
    }
  }
#line 2747
  drop_it = tmp___0;
#line 2752
  if (drop_it != 0) {
#line 2753
    return (1);
  } else {

  }
#line 2755
  mdev->ko_count = mdev->ko_count - 1U;
#line 2755
  drop_it = mdev->ko_count == 0U;
#line 2756
  if (drop_it == 0) {
#line 2757
    tmp___1 = get_current();
#line 2757
    tmp___2 = get_current();
#line 2757
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2759
    request_ping(mdev);
  } else {

  }
#line 2762
  return (drop_it);
}
}
#line 2786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2789
  tmp = kmap(page);
#line 2789
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2789
  sent = tmp___0;
#line 2790
  kunmap(page);
#line 2791
  if ((size_t )sent == size) {
#line 2792
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2793
  return ((size_t )sent == size);
}
}
#line 2796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2799
  tmp = current_thread_info___2();
#line 2799
  oldfs = tmp->addr_limit;
#line 2801
  len = (int )size;
#line 2809
  if ((int )disable_sendpage) {
#line 2810
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2810
    return (tmp___0);
  } else {
#line 2809
    tmp___1 = page_count(page);
#line 2809
    if (tmp___1 <= 0) {
#line 2810
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2810
      return (tmp___0);
    } else {
#line 2809
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2809
      if (tmp___2 != 0) {
#line 2810
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2810
        return (tmp___0);
      } else {

      }
    }
  }
#line 2812
  msg_flags = msg_flags | 16384U;
#line 2813
  drbd_update_congested(mdev);
#line 2814
  tmp___3 = current_thread_info___2();
#line 2814
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2814
  tmp___3->addr_limit = __constr_expr_0;
  ldv_50939: 
#line 2816
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2816
  sent = (int )tmp___4;
#line 2819
  if (sent == -11) {
#line 2820
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2820
    if (tmp___5 != 0) {
#line 2822
      goto ldv_50936;
    } else {
#line 2824
      goto ldv_50937;
    }
  } else {

  }
#line 2826
  if (sent <= 0) {
#line 2827
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2829
    goto ldv_50936;
  } else {

  }
#line 2831
  len = len - sent;
#line 2832
  offset = offset + sent;
  ldv_50937: ;
#line 2833
  if (len > 0) {
#line 2834
    goto ldv_50939;
  } else {

  }
  ldv_50936: 
#line 2834
  tmp___6 = current_thread_info___2();
#line 2834
  tmp___6->addr_limit = oldfs;
#line 2835
  clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 2837
  ok = len == 0;
#line 2838
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2838
  if (tmp___7 != 0L) {
#line 2839
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2840
  return (ok);
}
}
#line 2843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2848
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2848
  i = (int )bio->bi_idx;
#line 2848
  goto ldv_50947;
  ldv_50946: 
#line 2849
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2849
  if (tmp == 0) {
#line 2852
    return (0);
  } else {

  }
#line 2848
  bvec = bvec + 1;
#line 2848
  i = i + 1;
  ldv_50947: ;
#line 2848
  if ((int )bio->bi_vcnt > i) {
#line 2849
    goto ldv_50946;
  } else {

  }

#line 2854
  return (1);
}
}
#line 2857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2862
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2862
  i = (int )bio->bi_idx;
#line 2862
  goto ldv_50956;
  ldv_50955: 
#line 2863
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2863
  if (tmp == 0) {
#line 2866
    return (0);
  } else {

  }
#line 2862
  bvec = bvec + 1;
#line 2862
  i = i + 1;
  ldv_50956: ;
#line 2862
  if ((int )bio->bi_vcnt > i) {
#line 2863
    goto ldv_50955;
  } else {

  }

#line 2868
  return (1);
}
}
#line 2871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2873
  page = e->pages;
#line 2874
  len = e->size;
#line 2876
  goto ldv_50970;
  ldv_50969: 
#line 2877
  __min1 = len;
#line 2877
  __min2 = 4096U;
#line 2877
  l = __min1 < __min2 ? __min1 : __min2;
#line 2878
  tmp = page_chain_next(page);
#line 2878
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2878
  if (tmp___0 == 0) {
#line 2880
    return (0);
  } else {

  }
#line 2881
  len = len - l;
#line 2876
  page = page_chain_next(page);
  ldv_50970: ;
#line 2876
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2876
    tmp___1 = page_chain_next(page);
#line 2876
    __builtin_prefetch((void const   *)tmp___1);
#line 2876
    if (1 != 0) {
#line 2877
      goto ldv_50969;
    } else {
#line 2879
      goto ldv_50971;
    }
  } else {

  }
  ldv_50971: ;
#line 2883
  return (1);
}
}
#line 2886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2888
  if (mdev->agreed_pro_version > 94) {
#line 2889
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 1024UL) != 0UL ? 16 : 0)) | ((bi_rw & 2048UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2894
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2902
  ok = 1;
#line 2904
  dp_flags = 0U;
#line 2908
  tmp = drbd_get_data_sock___0(mdev);
#line 2908
  if (tmp == 0) {
#line 2909
    return (0);
  } else {

  }
#line 2911
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2911
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2911
    dgs = (int )tmp___0;
  } else {
#line 2911
    dgs = 0;
  }
#line 2914
  if (req->size <= 32768U) {
#line 2915
    p.head.h80.magic = 1728214147U;
#line 2916
    p.head.h80.command = 0U;
#line 2917
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2917
    p.head.h80.length = tmp___1;
  } else {
#line 2920
    p.head.h95.magic = 23171U;
#line 2921
    p.head.h95.command = 0U;
#line 2922
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2922
    p.head.h95.length = tmp___2;
  }
#line 2926
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2926
  p.sector = tmp___3;
#line 2927
  p.block_id = (u64 )req;
#line 2928
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2928
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2928
  p.seq_num = tmp___5;
#line 2930
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2932
  if ((int )mdev->state.ldv_38802.conn > 15 && (int )mdev->state.ldv_38802.conn <= 21) {
#line 2934
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2936
  tmp___6 = __fswab32(dp_flags);
#line 2936
  p.dp_flags = tmp___6;
#line 2937
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 2938
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2938
  ok = tmp___7 == 32;
#line 2940
  if (ok != 0 && dgs != 0) {
#line 2941
    dgb = mdev->int_dig_out;
#line 2942
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2943
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2943
    ok = tmp___8 == dgs;
  } else {

  }
#line 2945
  if (ok != 0) {
#line 2957
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2958
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2960
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2963
    if (dgs > 0 && dgs <= 64) {
#line 2967
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2968
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2968
      if (tmp___9 != 0) {
#line 2969
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2978
  drbd_put_data_sock___0(mdev);
#line 2980
  return (ok);
}
}
#line 2987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2995
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2995
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2995
    dgs = (int )tmp;
  } else {
#line 2995
    dgs = 0;
  }
#line 2998
  if (e->size <= 32768U) {
#line 2999
    p.head.h80.magic = 1728214147U;
#line 3000
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 3000
    p.head.h80.command = tmp___0;
#line 3001
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 3001
    p.head.h80.length = tmp___1;
  } else {
#line 3004
    p.head.h95.magic = 23171U;
#line 3005
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 3005
    p.head.h95.command = tmp___2;
#line 3006
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 3006
    p.head.h95.length = tmp___3;
  }
#line 3010
  tmp___4 = __fswab64((__u64 )e->sector);
#line 3010
  p.sector = tmp___4;
#line 3011
  p.block_id = e->ldv_47580.block_id;
#line 3018
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 3018
  if (tmp___5 == 0) {
#line 3019
    return (0);
  } else {

  }
#line 3021
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 3021
  ok = tmp___6 == 32;
#line 3022
  if (ok != 0 && dgs != 0) {
#line 3023
    dgb = mdev->int_dig_out;
#line 3024
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 3025
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 3025
    ok = tmp___7 == dgs;
  } else {

  }
#line 3027
  if (ok != 0) {
#line 3028
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 3030
  drbd_put_data_sock___0(mdev);
#line 3032
  return (ok);
}
}
#line 3035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 3039
  tmp = __fswab64((__u64 )req->sector);
#line 3039
  p.sector = tmp;
#line 3040
  tmp___0 = __fswab32(req->size);
#line 3040
  p.blksize = tmp___0;
#line 3042
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 3042
  return (tmp___1);
}
}
#line 3061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 3066
  sent = 0;
#line 3068
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 3069
    return (-1000);
  } else {

  }
#line 3073
  iov.iov_base = buf;
#line 3074
  iov.iov_len = size;
#line 3076
  msg.msg_name = 0;
#line 3077
  msg.msg_namelen = 0;
#line 3078
  msg.msg_control = 0;
#line 3079
  msg.msg_controllen = 0UL;
#line 3080
  msg.msg_flags = msg_flags | 16384U;
#line 3082
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3083
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 3084
    drbd_update_congested(mdev);
  } else {

  }
  ldv_51013: 
#line 3096
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 3097
  if (rv == -11) {
#line 3098
    tmp = we_should_drop_the_connection(mdev, sock);
#line 3098
    if (tmp != 0) {
#line 3099
      goto ldv_51011;
    } else {
#line 3101
      goto ldv_51012;
    }
  } else {

  }
#line 3103
  if (rv == 0) {
#line 3103
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3103);
  } else {

  }
#line 3104
  if (rv == -4) {
#line 3105
    tmp___0 = get_current();
#line 3105
    flush_signals(tmp___0);
#line 3106
    rv = 0;
  } else {

  }
#line 3108
  if (rv < 0) {
#line 3109
    goto ldv_51011;
  } else {

  }
#line 3110
  sent = sent + rv;
#line 3111
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 3112
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_51012: ;
#line 3113
  if ((size_t )sent < size) {
#line 3114
    goto ldv_51013;
  } else {

  }
  ldv_51011: ;
#line 3115
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3116
    clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 3118
  if (rv <= 0) {
#line 3119
    if (rv != -11) {
#line 3120
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 3123
      val.i = 0U;
#line 3123
      val.ldv_38802.conn = 4U;
#line 3123
      mask.i = 0U;
#line 3123
      mask.ldv_38802.conn = 31U;
#line 3123
      drbd_force_state(mdev, mask, val);
    } else {
#line 3125
      val___0.i = 0U;
#line 3125
      val___0.ldv_38802.conn = 3U;
#line 3125
      mask___0.i = 0U;
#line 3125
      mask___0.ldv_38802.conn = 31U;
#line 3125
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 3128
  return (sent);
}
}
#line 3131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 3133
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 3135
  rv = 0;
#line 3137
  ldv_mutex_lock_143(& drbd_main_mutex);
#line 3138
  tmp = spinlock_check(& mdev->req_lock);
#line 3138
  flags = _raw_spin_lock_irqsave(tmp);
#line 3142
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 3143
    if ((mode & 2U) != 0U) {
#line 3144
      rv = -30;
    } else
#line 3145
    if (! allow_oos) {
#line 3146
      rv = -124;
    } else {

    }
  } else {

  }
#line 3149
  if (rv == 0) {
#line 3150
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 3151
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 3152
  ldv_mutex_unlock_144(& drbd_main_mutex);
#line 3154
  return (rv);
}
}
#line 3157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3159
  mdev = (struct drbd_conf *)gd->private_data;
#line 3160
  ldv_mutex_lock_145(& drbd_main_mutex);
#line 3161
  mdev->open_cnt = mdev->open_cnt - 1;
#line 3162
  ldv_mutex_unlock_146(& drbd_main_mutex);
#line 3163
  return (0);
}
}
#line 3166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3170
  __constr_expr_0.rate = 250;
#line 3170
  __constr_expr_0.after = -1;
#line 3170
  __constr_expr_0.al_extents = 127;
#line 3170
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3170
  __constr_expr_0.verify_alg_len = 0;
#line 3170
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3170
  __constr_expr_0.cpu_mask_len = 0;
#line 3170
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3170
  __constr_expr_0.csums_alg_len = 0;
#line 3170
  __constr_expr_0.use_rle = 0U;
#line 3170
  __constr_expr_0.on_no_data = 0;
#line 3170
  __constr_expr_0.c_plan_ahead = 0;
#line 3170
  __constr_expr_0.c_delay_target = 10;
#line 3170
  __constr_expr_0.c_fill_target = 0;
#line 3170
  __constr_expr_0.c_max_rate = 102400;
#line 3170
  __constr_expr_0.c_min_rate = 4096;
#line 3170
  mdev->sync_conf = __constr_expr_0;
#line 3188
  __constr_expr_1.ldv_38802.role = 2U;
#line 3188
  __constr_expr_1.ldv_38802.peer = 0U;
#line 3188
  __constr_expr_1.ldv_38802.conn = 0U;
#line 3188
  __constr_expr_1.ldv_38802.disk = 0U;
#line 3188
  __constr_expr_1.ldv_38802.pdsk = 6U;
#line 3188
  __constr_expr_1.ldv_38802.susp = 0U;
#line 3188
  __constr_expr_1.ldv_38802.aftr_isp = (unsigned char)0;
#line 3188
  __constr_expr_1.ldv_38802.peer_isp = (unsigned char)0;
#line 3188
  __constr_expr_1.ldv_38802.user_isp = (unsigned char)0;
#line 3188
  __constr_expr_1.ldv_38802.susp_nod = 0U;
#line 3188
  __constr_expr_1.ldv_38802.susp_fen = 0U;
#line 3188
  __constr_expr_1.ldv_38802._pad = (unsigned short)0;
#line 3188
  mdev->state = __constr_expr_1;
#line 3189
  return;
}
}
#line 3200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;

  {
#line 3205
  drbd_set_defaults(mdev);
#line 3207
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3208
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3209
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3210
  atomic_set(& mdev->unacked_cnt, 0);
#line 3211
  atomic_set(& mdev->local_cnt, 0);
#line 3212
  atomic_set(& mdev->net_cnt, 0);
#line 3213
  atomic_set(& mdev->packet_seq, 0);
#line 3214
  atomic_set(& mdev->pp_in_use, 0);
#line 3215
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3216
  atomic_set(& mdev->rs_sect_in, 0);
#line 3217
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3218
  atomic_set(& mdev->ap_in_flight, 0);
#line 3219
  atomic_set(& mdev->md_io_in_use, 0);
#line 3221
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key);
#line 3222
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___0);
#line 3223
  sema_init(& mdev->data.work.s, 0);
#line 3224
  sema_init(& mdev->meta.work.s, 0);
#line 3225
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___1);
#line 3227
  spinlock_check(& mdev->data.work.q_lock);
#line 3227
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5988.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___2);
#line 3228
  spinlock_check(& mdev->meta.work.q_lock);
#line 3228
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5988.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___3);
#line 3230
  spinlock_check(& mdev->al_lock);
#line 3230
  __raw_spin_lock_init(& mdev->al_lock.ldv_5988.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___4);
#line 3231
  spinlock_check(& mdev->req_lock);
#line 3231
  __raw_spin_lock_init(& mdev->req_lock.ldv_5988.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___5);
#line 3232
  spinlock_check(& mdev->peer_seq_lock);
#line 3232
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5988.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___6);
#line 3233
  spinlock_check(& mdev->epoch_lock);
#line 3233
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5988.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___7);
#line 3235
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3236
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3237
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3238
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3239
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3240
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3241
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3242
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3243
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3244
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3245
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3246
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3247
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3248
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3250
  mdev->resync_work.cb = & w_resync_timer;
#line 3251
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3252
  mdev->go_diskless.cb = & w_go_diskless;
#line 3253
  mdev->md_sync_work.cb = & w_md_sync;
#line 3254
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3255
  mdev->start_resync_work.cb = & w_start_resync;
#line 3256
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___8);
#line 3257
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___9);
#line 3258
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___10);
#line 3259
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___11);
#line 3260
  mdev->resync_timer.function = & resync_timer_fn;
#line 3261
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3262
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3263
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3264
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3265
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3266
  mdev->request_timer.function = & request_timer_fn;
#line 3267
  mdev->request_timer.data = (unsigned long )mdev;
#line 3269
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___12);
#line 3270
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___13);
#line 3271
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___14);
#line 3272
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___15);
#line 3273
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___16);
#line 3274
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___17);
#line 3276
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3277
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3278
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3280
  mdev->agreed_pro_version = 96;
#line 3281
  mdev->write_ordering = WO_bdev_flush;
#line 3282
  mdev->resync_wenr = 4294967295U;
#line 3283
  mdev->peer_max_bio_size = 4096U;
#line 3284
  mdev->local_max_bio_size = 4096U;
#line 3285
  return;
}
}
#line 3287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3290
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3291
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3295
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3295
  if (tmp___0 != 0) {
#line 3296
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3297
  tmp___9 = 0UL;
#line 3297
  mdev->rs_failed = tmp___9;
#line 3297
  tmp___8 = tmp___9;
#line 3297
  mdev->rs_total = tmp___8;
#line 3297
  tmp___7 = tmp___8;
#line 3297
  mdev->rs_start = tmp___7;
#line 3297
  tmp___6 = tmp___7;
#line 3297
  mdev->p_size = tmp___6;
#line 3297
  tmp___5 = (unsigned int )tmp___6;
#line 3297
  mdev->writ_cnt = tmp___5;
#line 3297
  tmp___4 = tmp___5;
#line 3297
  mdev->send_cnt = tmp___4;
#line 3297
  tmp___3 = tmp___4;
#line 3297
  mdev->recv_cnt = tmp___3;
#line 3297
  tmp___2 = tmp___3;
#line 3297
  mdev->read_cnt = tmp___2;
#line 3297
  tmp___1 = tmp___2;
#line 3297
  mdev->bm_writ_cnt = tmp___1;
#line 3297
  mdev->al_writ_cnt = tmp___1;
#line 3307
  mdev->rs_last_events = 0;
#line 3308
  mdev->rs_last_sect_ev = 0;
#line 3309
  i = 0;
#line 3309
  goto ldv_51069;
  ldv_51068: 
#line 3310
  mdev->rs_mark_left[i] = 0UL;
#line 3311
  mdev->rs_mark_time[i] = 0UL;
#line 3309
  i = i + 1;
  ldv_51069: ;
#line 3309
  if (i <= 7) {
#line 3310
    goto ldv_51068;
  } else {

  }

#line 3313
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3313);
  } else {

  }
#line 3315
  drbd_set_my_capacity(mdev, 0UL);
#line 3316
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3318
    drbd_bm_resize(mdev, 0UL, 1);
#line 3319
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3322
  drbd_free_resources(mdev);
#line 3323
  clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3329
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3329
  if (tmp___10 == 0) {
#line 3329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3329);
  } else {

  }
#line 3330
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3330
  if (tmp___11 == 0) {
#line 3330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3330);
  } else {

  }
#line 3331
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3331
  if (tmp___12 == 0) {
#line 3331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3331);
  } else {

  }
#line 3332
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3332
  if (tmp___13 == 0) {
#line 3332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3332);
  } else {

  }
#line 3333
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3333
  if (tmp___14 == 0) {
#line 3333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3333);
  } else {

  }
#line 3334
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3334
  if (tmp___15 == 0) {
#line 3334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3334);
  } else {

  }
#line 3335
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3335
  if (tmp___16 == 0) {
#line 3335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3335);
  } else {

  }
#line 3336
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3336
  if (tmp___17 == 0) {
#line 3336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3336);
  } else {

  }
#line 3337
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3337
  if (tmp___18 == 0) {
#line 3337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3337);
  } else {

  }
#line 3338
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3338
  if (tmp___19 == 0) {
#line 3338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3338);
  } else {

  }
#line 3339
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3339
  if (tmp___20 == 0) {
#line 3339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3339);
  } else {

  }
#line 3341
  drbd_set_defaults(mdev);
#line 3342
  return;
}
}
#line 3345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3349
  goto ldv_51076;
  ldv_51075: 
#line 3350
  page = drbd_pp_pool;
#line 3351
  drbd_pp_pool = (struct page *)page->ldv_13509.private;
#line 3352
  __free_pages(page, 0U);
#line 3353
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_51076: ;
#line 3349
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3350
    goto ldv_51075;
  } else {

  }

#line 3358
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 3359
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 3360
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 3361
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 3362
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3363
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3364
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3365
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3366
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3367
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3368
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3369
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3370
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3371
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3372
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3373
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3375
  drbd_md_io_bio_set = 0;
#line 3376
  drbd_md_io_page_pool = 0;
#line 3377
  drbd_ee_mempool = 0;
#line 3378
  drbd_request_mempool = 0;
#line 3379
  drbd_ee_cache = 0;
#line 3380
  drbd_request_cache = 0;
#line 3381
  drbd_bm_ext_cache = 0;
#line 3382
  drbd_al_ext_cache = 0;
#line 3384
  return;
}
}
#line 3387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3390
  number = (int const   )(minor_count * 32U);
#line 3394
  drbd_request_mempool = 0;
#line 3395
  drbd_ee_cache = 0;
#line 3396
  drbd_request_cache = 0;
#line 3397
  drbd_bm_ext_cache = 0;
#line 3398
  drbd_al_ext_cache = 0;
#line 3399
  drbd_pp_pool = 0;
#line 3400
  drbd_md_io_page_pool = 0;
#line 3401
  drbd_md_io_bio_set = 0;
#line 3404
  drbd_request_cache = kmem_cache_create("drbd_req", 112UL, 0UL, 0UL, 0);
#line 3406
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3407
    goto Enomem;
  } else {

  }
#line 3409
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3411
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3412
    goto Enomem;
  } else {

  }
#line 3414
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3416
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3417
    goto Enomem;
  } else {

  }
#line 3419
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3421
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3422
    goto Enomem;
  } else {

  }
#line 3431
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 3432
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 3433
    goto Enomem;
  } else {

  }
#line 3435
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3437
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3438
    goto Enomem;
  } else {

  }
#line 3440
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3442
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3443
    goto Enomem;
  } else {

  }
#line 3446
  spinlock_check(& drbd_pp_lock);
#line 3446
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5988.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3448
  i = 0;
#line 3448
  goto ldv_51087;
  ldv_51086: 
#line 3449
  page = alloc_pages(131282U, 0U);
#line 3450
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3451
    goto Enomem;
  } else {

  }
#line 3452
  page->ldv_13509.private = (unsigned long )drbd_pp_pool;
#line 3453
  drbd_pp_pool = page;
#line 3448
  i = i + 1;
  ldv_51087: ;
#line 3448
  if (i < number) {
#line 3449
    goto ldv_51086;
  } else {

  }
#line 3455
  drbd_pp_vacant = number;
#line 3457
  return (0);
  Enomem: 
#line 3460
  drbd_destroy_mempools();
#line 3461
  return (-12);
}
}
#line 3464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3471
  return (0);
}
}
#line 3474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3482
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3483
  if (rr != 0) {
#line 3484
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3486
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3487
  if (rr != 0) {
#line 3488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3490
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3491
  if (rr != 0) {
#line 3492
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3494
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3495
  if (rr != 0) {
#line 3496
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3498
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3499
  if (rr != 0) {
#line 3500
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3501
  return;
}
}
#line 3505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3507
  tmp = minor_to_mdev(minor);
#line 3507
  mdev = tmp;
#line 3509
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3510
    return;
  } else {

  }
#line 3512
  del_timer_sync(& mdev->request_timer);
#line 3515
  if (mdev->open_cnt != 0) {
#line 3516
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3517);
  } else {

  }
#line 3519
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3519
  _b = tmp___0 == 0;
#line 3519
  if (_b != 0) {
#line 3519
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3519);
  } else {

  }
#line 3519
  if (_b != 0) {
#line 3521
    lp = mdev->data.work.q.next;
#line 3521
    goto ldv_51108;
    ldv_51107: 
#line 3522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3521
    lp = lp->next;
    ldv_51108: ;
#line 3521
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3522
      goto ldv_51107;
    } else {

    }

  } else {

  }
#line 3527
  del_gendisk(mdev->vdisk);
#line 3532
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3533
    bdput(mdev->this_bdev);
  } else {

  }
#line 3535
  drbd_free_resources(mdev);
#line 3537
  drbd_release_ee_lists(mdev);
#line 3540
  kfree((void const   *)mdev->ee_hash);
#line 3546
  lc_destroy(mdev->act_log);
#line 3547
  lc_destroy(mdev->resync);
#line 3549
  kfree((void const   *)mdev->p_uuid);
#line 3552
  kfree((void const   *)mdev->int_dig_out);
#line 3553
  kfree((void const   *)mdev->int_dig_in);
#line 3554
  kfree((void const   *)mdev->int_dig_vv);
#line 3559
  drbd_free_mdev(mdev);
#line 3560
  return;
}
}
#line 3562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3566
  unregister_reboot_notifier(& drbd_notifier);
#line 3576
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3577
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3579
  drbd_nl_cleanup();
#line 3581
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3582
    i = minor_count;
#line 3583
    goto ldv_51115;
    ldv_51114: 
#line 3584
    drbd_delete_device(i);
    ldv_51115: 
#line 3583
    tmp = i;
#line 3583
    i = i - 1U;
#line 3583
    if (tmp != 0U) {
#line 3584
      goto ldv_51114;
    } else {

    }
#line 3585
    drbd_destroy_mempools();
  } else {

  }
#line 3588
  kfree((void const   *)minor_table);
#line 3590
  unregister_blkdev(147U, "drbd");
#line 3592
  printk("<6>drbd: module cleanup done.\n");
#line 3593
  return;
}
}
#line 3602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3604
  mdev = (struct drbd_conf *)congested_data;
#line 3606
  reason = 45;
#line 3607
  r = 0;
#line 3609
  tmp = may_inc_ap_bio___0(mdev);
#line 3609
  if (tmp) {
#line 3609
    tmp___0 = 0;
  } else {
#line 3609
    tmp___0 = 1;
  }
#line 3609
  if (tmp___0) {
#line 3611
    r = bdi_bits;
#line 3612
    reason = 100;
#line 3613
    goto out;
  } else {

  }
#line 3616
  tmp___2 = constant_test_bit(30U, (unsigned long const volatile   *)(& mdev->flags));
#line 3616
  if (tmp___2 != 0) {
#line 3617
    r = r | 4;
#line 3623
    tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 3623
    if (tmp___1 == 0) {
#line 3624
      r = r | 8;
    } else {
#line 3626
      put_ldev(mdev);
    }
#line 3627
    r = r & bdi_bits;
#line 3628
    reason = 99;
#line 3629
    goto out;
  } else {

  }
#line 3632
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3632
  if (tmp___3 != 0) {
#line 3633
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3634
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3635
    put_ldev(mdev);
#line 3636
    if (r != 0) {
#line 3637
      reason = 98;
    } else {

    }
  } else {

  }
#line 3640
  if ((bdi_bits & 4) != 0) {
#line 3640
    tmp___4 = constant_test_bit(20U, (unsigned long const volatile   *)(& mdev->flags));
#line 3640
    if (tmp___4 != 0) {
#line 3641
      r = r | 4;
#line 3642
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3646
  mdev->congestion_reason = reason;
#line 3647
  return (r);
}
}
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3657
  tmp = kzalloc(4728UL, 208U);
#line 3657
  mdev = (struct drbd_conf *)tmp;
#line 3658
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3659
    return (0);
  } else {

  }
#line 3660
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3660
  if (tmp___0) {
#line 3660
    tmp___1 = 0;
  } else {
#line 3660
    tmp___1 = 1;
  }
#line 3660
  if (tmp___1) {
#line 3661
    goto out_no_cpumask;
  } else {

  }
#line 3663
  mdev->minor = minor;
#line 3665
  drbd_init_set_defaults(mdev);
#line 3667
  q = blk_alloc_queue(208U);
#line 3668
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3669
    goto out_no_q;
  } else {

  }
#line 3670
  mdev->rq_queue = q;
#line 3671
  q->queuedata = (void *)mdev;
#line 3673
  disk = alloc_disk(1);
#line 3674
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3675
    goto out_no_disk;
  } else {

  }
#line 3676
  mdev->vdisk = disk;
#line 3678
  set_disk_ro(disk, 1);
#line 3680
  disk->queue = q;
#line 3681
  disk->major = 147;
#line 3682
  disk->first_minor = (int )minor;
#line 3683
  disk->fops = & drbd_ops;
#line 3684
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3685
  disk->private_data = (void *)mdev;
#line 3687
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3689
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3691
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3692
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3694
  blk_queue_make_request(q, & drbd_make_request);
#line 3695
  blk_queue_flush(q, 3072U);
#line 3698
  blk_queue_max_hw_sectors(q, 16U);
#line 3699
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3700
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3701
  q->queue_lock = & mdev->req_lock;
#line 3703
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3704
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3705
    goto out_no_io_page;
  } else {

  }
#line 3707
  tmp___2 = drbd_bm_init(mdev);
#line 3707
  if (tmp___2 != 0) {
#line 3708
    goto out_no_bitmap;
  } else {

  }
#line 3710
  tmp___3 = tl_init(mdev);
#line 3710
  if (tmp___3 == 0) {
#line 3711
    goto out_no_tl;
  } else {

  }
#line 3713
  tmp___4 = kzalloc(120UL, 208U);
#line 3713
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3714
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3715
    goto out_no_app_reads;
  } else {

  }
#line 3717
  tmp___5 = kzalloc(40UL, 208U);
#line 3717
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3718
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3719
    goto out_no_epoch;
  } else {

  }
#line 3721
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3722
  mdev->epochs = 1U;
#line 3724
  return (mdev);
  out_no_epoch: 
#line 3729
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3731
  tl_cleanup(mdev);
  out_no_tl: 
#line 3733
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3735
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3737
  put_disk(disk);
  out_no_disk: 
#line 3739
  blk_cleanup_queue(q);
  out_no_q: 
#line 3741
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3743
  kfree((void const   *)mdev);
#line 3744
  return (0);
}
}
#line 3749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3751
  kfree((void const   *)mdev->current_epoch);
#line 3752
  kfree((void const   *)mdev->app_reads_hash);
#line 3753
  tl_cleanup(mdev);
#line 3754
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3755
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3756
  __free_pages(mdev->md_io_page, 0U);
#line 3757
  put_disk(mdev->vdisk);
#line 3758
  blk_cleanup_queue(mdev->rq_queue);
#line 3759
  free_cpumask_var(mdev->cpu_mask);
#line 3760
  drbd_free_tl_hash(mdev);
#line 3761
  kfree((void const   *)mdev);
#line 3762
  return;
}
}
#line 3765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3776
  if (minor_count == 0U || minor_count > 256U) {
#line 3777
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3780
    return (-22);
  } else {

  }
#line 3786
  err = drbd_nl_init();
#line 3787
  if (err != 0) {
#line 3788
    return (err);
  } else {

  }
#line 3790
  err = register_blkdev(147U, "drbd");
#line 3791
  if (err != 0) {
#line 3792
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3795
    return (err);
  } else {

  }
#line 3798
  register_reboot_notifier(& drbd_notifier);
#line 3803
  err = -12;
#line 3805
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3807
  drbd_proc = 0;
#line 3808
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3808
  minor_table = (struct drbd_conf **)tmp;
#line 3810
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3811
    goto Enomem;
  } else {

  }
#line 3813
  err = drbd_create_mempools();
#line 3814
  if (err != 0) {
#line 3815
    goto Enomem;
  } else {

  }
#line 3817
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3818
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3819
    printk("<3>drbd: unable to register proc file\n");
#line 3820
    goto Enomem;
  } else {

  }
#line 3823
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3825
  printk("<6>drbd: initialized. Version: 8.3.13 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3828
  tmp___0 = drbd_buildtag();
#line 3828
  printk("<6>drbd: %s\n", tmp___0);
#line 3829
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3831
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3833
  return (0);
  Enomem: 
#line 3836
  drbd_cleanup();
#line 3837
  if (err == -12) {
#line 3839
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3841
    printk("<3>drbd: initialization failure\n");
  }
#line 3842
  return (err);
}
}
#line 3845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3847
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3848
    return;
  } else {

  }
#line 3850
  blkdev_put(ldev->backing_bdev, 131U);
#line 3851
  blkdev_put(ldev->md_bdev, 131U);
#line 3853
  kfree((void const   *)ldev);
#line 3854
  return;
}
}
#line 3856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3858
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3859
    ldv_mutex_lock_147(& mdev->data.mutex);
#line 3860
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3861
    sock_release(mdev->data.socket);
#line 3862
    mdev->data.socket = 0;
#line 3863
    ldv_mutex_unlock_148(& mdev->data.mutex);
  } else {

  }
#line 3865
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3866
    ldv_mutex_lock_149(& mdev->meta.mutex);
#line 3867
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3868
    sock_release(mdev->meta.socket);
#line 3869
    mdev->meta.socket = 0;
#line 3870
    ldv_mutex_unlock_150(& mdev->meta.mutex);
  } else {

  }
#line 3872
  return;
}
}
#line 3875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3877
  crypto_free_hash(mdev->csums_tfm);
#line 3878
  mdev->csums_tfm = 0;
#line 3879
  crypto_free_hash(mdev->verify_tfm);
#line 3880
  mdev->verify_tfm = 0;
#line 3881
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3882
  mdev->cram_hmac_tfm = 0;
#line 3883
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3884
  mdev->integrity_w_tfm = 0;
#line 3885
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3886
  mdev->integrity_r_tfm = 0;
#line 3888
  drbd_free_sock(mdev);
#line 3890
  drbd_free_bc(mdev->ldev);
#line 3890
  mdev->ldev = 0;
#line 3891
  return;
}
}
#line 3919 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3925
  del_timer(& mdev->md_sync_timer);
#line 3927
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 3927
  if (tmp == 0) {
#line 3928
    return;
  } else {

  }
#line 3932
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3932
  if (tmp___0 == 0) {
#line 3933
    return;
  } else {

  }
#line 3935
  tmp___1 = drbd_md_get_buffer(mdev);
#line 3935
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3936
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3937
    goto out;
  } else {

  }
#line 3939
  memset((void *)buffer, 0, 512UL);
#line 3941
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3941
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3941
  buffer->la_size = tmp___3;
#line 3942
  i = 0;
#line 3942
  goto ldv_51181;
  ldv_51180: 
#line 3943
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3943
  buffer->uuid[i] = tmp___4;
#line 3942
  i = i + 1;
  ldv_51181: ;
#line 3942
  if (i <= 3) {
#line 3943
    goto ldv_51180;
  } else {

  }
#line 3944
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3944
  buffer->flags = tmp___5;
#line 3945
  buffer->magic = 1795323011U;
#line 3947
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3947
  buffer->md_size_sect = tmp___6;
#line 3948
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3948
  buffer->al_offset = tmp___7;
#line 3949
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3949
  buffer->al_nr_extents = tmp___8;
#line 3950
  buffer->bm_bytes_per_bit = 1048576U;
#line 3951
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3951
  buffer->device_uuid = tmp___9;
#line 3953
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3953
  buffer->bm_offset = tmp___10;
#line 3954
  tmp___11 = __fswab32(mdev->peer_max_bio_size);
#line 3954
  buffer->la_peer_max_bio_size = tmp___11;
#line 3956
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3956
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3956);
  } else {

  }
#line 3957
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3959
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3959
  if (tmp___13 == 0) {
#line 3961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3962
    drbd_chk_io_error____1(mdev, 1, DRBD_META_IO_ERROR, "drbd_md_sync");
  } else {

  }
#line 3967
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3967
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3969
  drbd_md_put_buffer(mdev);
  out: 
#line 3971
  put_ldev(mdev);
#line 3972
  return;
}
}
#line 3982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  unsigned int peer ;
  __u32 tmp___16 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
#line 3985
  rv = 101;
#line 3987
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3987
  if (tmp == 0) {
#line 3988
    return (118);
  } else {

  }
#line 3990
  tmp___0 = drbd_md_get_buffer(mdev);
#line 3990
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3991
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3992
    goto out;
  } else {

  }
#line 3994
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3994
  if (tmp___1 == 0) {
#line 3997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3998
    rv = 118;
#line 3999
    goto err;
  } else {

  }
#line 4002
  tmp___2 = __fswab32(buffer->magic);
#line 4002
  if (tmp___2 != 2205418091U) {
#line 4003
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 4004
    rv = 119;
#line 4005
    goto err;
  } else {

  }
#line 4007
  tmp___4 = __fswab32(buffer->al_offset);
#line 4007
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 4008
    tmp___3 = __fswab32(buffer->al_offset);
#line 4008
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 4010
    rv = 119;
#line 4011
    goto err;
  } else {

  }
#line 4013
  tmp___6 = __fswab32(buffer->bm_offset);
#line 4013
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 4014
    tmp___5 = __fswab32(buffer->bm_offset);
#line 4014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 4016
    rv = 119;
#line 4017
    goto err;
  } else {

  }
#line 4019
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 4019
  if (tmp___8 != bdev->md.md_size_sect) {
#line 4020
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 4020
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 4022
    rv = 119;
#line 4023
    goto err;
  } else {

  }
#line 4026
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 4026
  if (tmp___10 != 4096U) {
#line 4027
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 4027
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 4029
    rv = 119;
#line 4030
    goto err;
  } else {

  }
#line 4033
  tmp___11 = __fswab64(buffer->la_size);
#line 4033
  bdev->md.la_size_sect = tmp___11;
#line 4034
  i = 0;
#line 4034
  goto ldv_51194;
  ldv_51193: 
#line 4035
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 4035
  bdev->md.uuid[i] = tmp___12;
#line 4034
  i = i + 1;
  ldv_51194: ;
#line 4034
  if (i <= 3) {
#line 4035
    goto ldv_51193;
  } else {

  }
#line 4036
  tmp___13 = __fswab32(buffer->flags);
#line 4036
  bdev->md.flags = tmp___13;
#line 4037
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 4037
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 4038
  tmp___15 = __fswab64(buffer->device_uuid);
#line 4038
  bdev->md.device_uuid = tmp___15;
#line 4040
  spin_lock_irq(& mdev->req_lock);
#line 4041
  if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 4043
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 4043
    peer = tmp___16;
#line 4044
    _max1 = peer;
#line 4044
    _max2 = 4096U;
#line 4044
    peer = _max1 > _max2 ? _max1 : _max2;
#line 4045
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 4047
  spin_unlock_irq(& mdev->req_lock);
#line 4049
  if (mdev->sync_conf.al_extents <= 6) {
#line 4050
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 4053
  drbd_md_put_buffer(mdev);
  out: 
#line 4055
  put_ldev(mdev);
#line 4057
  return (rv);
}
}
#line 4078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4080
  tmp = test_and_set_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 4080
  if (tmp == 0) {
#line 4081
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 4082
  return;
}
}
#line 4085 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 4089
  i = 2;
#line 4089
  goto ldv_51208;
  ldv_51207: 
#line 4090
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 4089
  i = i + 1;
  ldv_51208: ;
#line 4089
  if (i <= 2) {
#line 4090
    goto ldv_51207;
  } else {

  }

#line 4094
  return;
}
}
#line 4093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4095
  if (idx == 0) {
#line 4096
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 4097
      val = val | 1ULL;
    } else {
#line 4099
      val = val & 0xfffffffffffffffeULL;
    }
#line 4101
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 4104
  (mdev->ldev)->md.uuid[idx] = val;
#line 4105
  drbd_md_mark_dirty(mdev);
#line 4106
  return;
}
}
#line 4109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4111
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 4112
    drbd_uuid_move_history(mdev);
#line 4113
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 4115
  _drbd_uuid_set(mdev, idx, val);
#line 4116
  return;
}
}
#line 4125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 4128
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4130
  if (bm_uuid != 0ULL) {
#line 4131
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 4133
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 4135
  get_random_bytes((void *)(& val), 8);
#line 4136
  _drbd_uuid_set(mdev, 0, val);
#line 4137
  drbd_print_uuids(mdev, "new current UUID");
#line 4139
  drbd_md_sync(mdev);
#line 4140
  return;
}
}
#line 4142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 4144
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 4145
    return;
  } else {

  }
#line 4147
  if (val == 0ULL) {
#line 4148
    drbd_uuid_move_history(mdev);
#line 4149
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 4150
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 4152
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4153
    if (bm_uuid != 0ULL) {
#line 4154
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 4156
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 4158
  drbd_md_mark_dirty(mdev);
#line 4159
  return;
}
}
#line 4167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4169
  rv = -5;
#line 4171
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4171
  if (tmp != 0) {
#line 4172
    drbd_md_set_flag(mdev, 8);
#line 4173
    drbd_md_sync(mdev);
#line 4174
    drbd_bm_set_all(mdev);
#line 4176
    rv = drbd_bm_write(mdev);
#line 4178
    if (rv == 0) {
#line 4179
      drbd_md_clear_flag(mdev, 8);
#line 4180
      drbd_md_sync(mdev);
    } else {

    }
#line 4183
    put_ldev(mdev);
  } else {

  }
#line 4186
  return (rv);
}
}
#line 4195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4197
  rv = -5;
#line 4199
  drbd_resume_al(mdev);
#line 4200
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4200
  if (tmp != 0) {
#line 4201
    drbd_bm_clear_all(mdev);
#line 4202
    rv = drbd_bm_write(mdev);
#line 4203
    put_ldev(mdev);
  } else {

  }
#line 4206
  return (rv);
}
}
#line 4209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4211
  __mptr = (struct drbd_work  const  *)w;
#line 4211
  work = (struct bm_io_work *)__mptr;
#line 4212
  rv = -5;
#line 4214
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4214
  if (tmp != 0) {
#line 4214
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4214);
  } else {

  }
#line 4216
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4216
  if (tmp___0 != 0) {
#line 4217
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4218
    rv = (*(work->io_fn))(mdev);
#line 4219
    drbd_bm_unlock(mdev);
#line 4220
    put_ldev(mdev);
  } else {

  }
#line 4223
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 4224
  __asm__  volatile   ("": : : "memory");
#line 4225
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4227
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4228
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4230
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4231
  work->why = 0;
#line 4232
  work->flags = 0;
#line 4234
  return (1);
}
}
#line 4237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4239
  lc_destroy(mdev->resync);
#line 4240
  mdev->resync = 0;
#line 4241
  lc_destroy(mdev->act_log);
#line 4242
  mdev->act_log = 0;
#line 4243
  drbd_free_bc(mdev->ldev);
#line 4243
  mdev->ldev = 0;
#line 4247
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4248
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4249
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4251
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4252
  return;
}
}
#line 4254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4256
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4256);
  } else {

  }
#line 4261
  val.i = 0U;
#line 4261
  val.ldv_38802.disk = 0U;
#line 4261
  mask.i = 0U;
#line 4261
  mask.ldv_38802.disk = 15U;
#line 4261
  drbd_force_state(mdev, mask, val);
#line 4262
  return (1);
}
}
#line 4265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4267
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4267);
  } else {

  }
#line 4268
  tmp = test_and_set_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4268
  if (tmp == 0) {
#line 4269
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4270
  return;
}
}
#line 4284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4289
  tmp = get_current();
#line 4289
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4289);
  } else {

  }
#line 4291
  tmp___0 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 4291
  if (tmp___0 != 0) {
#line 4291
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4291);
  } else {

  }
#line 4292
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 4292
  if (tmp___1 != 0) {
#line 4292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4292);
  } else {

  }
#line 4293
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4293
  if (tmp___2 == 0) {
#line 4293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4293);
  } else {

  }
#line 4294
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4298
  mdev->bm_io_work.io_fn = io_fn;
#line 4299
  mdev->bm_io_work.done = done;
#line 4300
  mdev->bm_io_work.why = why;
#line 4301
  mdev->bm_io_work.flags = flags;
#line 4303
  spin_lock_irq(& mdev->req_lock);
#line 4304
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 4305
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4305
  if (tmp___4 == 0) {
#line 4306
    tmp___3 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4306
    if (tmp___3 == 0) {
#line 4307
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4309
  spin_unlock_irq(& mdev->req_lock);
#line 4310
  return;
}
}
#line 4321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4326
  tmp = get_current();
#line 4326
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4326);
  } else {

  }
#line 4328
  if (((unsigned int )flags & 9U) == 0U) {
#line 4329
    drbd_suspend_io(mdev);
  } else {

  }
#line 4331
  drbd_bm_lock(mdev, why, flags);
#line 4332
  rv = (*io_fn)(mdev);
#line 4333
  drbd_bm_unlock(mdev);
#line 4335
  if (((unsigned int )flags & 9U) == 0U) {
#line 4336
    drbd_resume_io(mdev);
  } else {

  }
#line 4338
  return (rv);
}
}
#line 4341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4343
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4344
    drbd_md_mark_dirty(mdev);
#line 4345
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4347
  return;
}
}
#line 4349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4351
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4352
    drbd_md_mark_dirty(mdev);
#line 4353
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4355
  return;
}
}
#line 4356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4358
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4363
  mdev = (struct drbd_conf *)data;
#line 4365
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4366
  return;
}
}
#line 4368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4370
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4375
  drbd_md_sync(mdev);
#line 4376
  return (1);
}
}
#line 4396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4400
  tmp = rsp->count;
#line 4400
  rsp->count = rsp->count - 1UL;
#line 4400
  if (tmp == 0UL) {
#line 4401
    get_random_bytes((void *)(& refresh), 8);
#line 4402
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4403
    rsp->count = 10000UL;
  } else {

  }
#line 4405
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4406
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4406
  return ((unsigned long )tmp___0);
}
}
#line 4410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4411
  _faults[0] = (char *)"Meta-data write";
#line 4411
  _faults[1] = (char *)"Meta-data read";
#line 4411
  _faults[2] = (char *)"Resync write";
#line 4411
  _faults[3] = (char *)"Resync read";
#line 4411
  _faults[4] = (char *)"Data write";
#line 4411
  _faults[5] = (char *)"Data read";
#line 4411
  _faults[6] = (char *)"Data read ahead";
#line 4411
  _faults[7] = (char *)"BM allocation";
#line 4411
  _faults[8] = (char *)"EE allocation";
#line 4411
  _faults[9] = (char *)"receive data corruption";
#line 4424
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4430
  rrs.state = 0UL;
#line 4430
  rrs.count = 0UL;
#line 4432
  if (fault_devs == 0) {
#line 4432
    goto _L;
  } else {
#line 4432
    tmp = mdev_to_minor(mdev);
#line 4432
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4432
      tmp___0 = _drbd_fault_random(& rrs);
#line 4432
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4432
        tmp___1 = 1;
      } else {
#line 4432
        tmp___1 = 0;
      }
    } else {
#line 4432
      tmp___1 = 0;
    }
  }
#line 4432
  ret = (unsigned int )tmp___1;
#line 4437
  if (ret != 0U) {
#line 4438
    fault_count = fault_count + 1;
#line 4440
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4440
    if (tmp___3 != 0) {
#line 4441
      tmp___2 = _drbd_fault_str(type);
#line 4441
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4445
  return (ret);
}
}
#line 4449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4454
  buildtag[0] = '\000';
#line 4454
  tmp = 1U;
#line 4454
  while (1) {
#line 4454
    if (tmp >= 38U) {
#line 4454
      break;
    } else {

    }
#line 4454
    buildtag[tmp] = (char)0;
#line 4454
    tmp = tmp + 1U;
  }
#line 4456
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4458
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 4464
  return ((char const   *)(& buildtag));
}
}
#line 4512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_109_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4711
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4668
  LDV_IN_INTERRUPT = 1;
#line 4677
  ldv_initialize();
#line 4693
  ldv_handler_precall();
#line 4694
  tmp = drbd_init();
#line 4694
  if (tmp != 0) {
#line 4695
    goto ldv_final;
  } else {

  }
#line 4718
  goto ldv_51388;
  ldv_51387: 
#line 4722
  tmp___0 = nondet_int();
#line 4722
  switch (tmp___0) {
  case 0: ;
#line 4727
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4740
    ldv_handler_precall();
#line 4741
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 4742
    ldv_check_return_value(res_drbd_open_73);
#line 4743
    if (res_drbd_open_73 != 0) {
#line 4744
      goto ldv_module_exit;
    } else {

    }
#line 4765
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4771
  goto ldv_51382;
  case 1: ;
#line 4775
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4788
    ldv_handler_precall();
#line 4789
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 4810
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4816
  goto ldv_51382;
  case 2: 
#line 4835
  ldv_handler_precall();
#line 4836
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 4861
  goto ldv_51382;
  case 3: 
#line 4886
  ldv_handler_precall();
#line 4887
  md_sync_timer_fn(var_md_sync_timer_fn_109_p0);
#line 4906
  goto ldv_51382;
  default: ;
#line 4907
  goto ldv_51382;
  }
  ldv_51382: ;
  ldv_51388: 
#line 4718
  tmp___1 = nondet_int();
#line 4718
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4720
    goto ldv_51387;
  } else {

  }

  ldv_module_exit: 
#line 4929
  ldv_handler_precall();
#line 4930
  drbd_cleanup();
  ldv_final: 
#line 4951
  ldv_check_final_state();
#line 4954
  return;
}
}
#line 4958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4963
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4965
  mutex_lock(ldv_func_arg1);
#line 4966
  return;
}
}
#line 4968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4973
  tmp = mutex_trylock(ldv_func_arg1);
#line 4973
  ldv_func_res = tmp;
#line 4975
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4975
  return (tmp___0);
#line 4977
  return (ldv_func_res);
}
}
#line 4980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4985
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4987
  mutex_unlock(ldv_func_arg1);
#line 4988
  return;
}
}
#line 4990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4995
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4997
  mutex_lock(ldv_func_arg1);
#line 4998
  return;
}
}
#line 5000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5005
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5007
  mutex_unlock(ldv_func_arg1);
#line 5008
  return;
}
}
#line 5010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5015
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5017
  mutex_lock(ldv_func_arg1);
#line 5018
  return;
}
}
#line 5020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5025
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5027
  mutex_unlock(ldv_func_arg1);
#line 5028
  return;
}
}
#line 5030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5035
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5037
  mutex_unlock(ldv_func_arg1);
#line 5038
  return;
}
}
#line 5040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5045
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5047
  mutex_lock(ldv_func_arg1);
#line 5048
  return;
}
}
#line 5050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5055
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5057
  mutex_unlock(ldv_func_arg1);
#line 5058
  return;
}
}
#line 5060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5065
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5067
  mutex_lock(ldv_func_arg1);
#line 5068
  return;
}
}
#line 5070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5075
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5077
  mutex_lock(ldv_func_arg1);
#line 5078
  return;
}
}
#line 5080 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5085
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5087
  mutex_unlock(ldv_func_arg1);
#line 5088
  return;
}
}
#line 5090 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5095
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5097
  mutex_unlock(ldv_func_arg1);
#line 5098
  return;
}
}
#line 5100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5105
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5107
  mutex_lock(ldv_func_arg1);
#line 5108
  return;
}
}
#line 5110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5115
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5117
  mutex_unlock(ldv_func_arg1);
#line 5118
  return;
}
}
#line 5120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5125
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5127
  mutex_lock(ldv_func_arg1);
#line 5128
  return;
}
}
#line 5130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5135
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5137
  mutex_unlock(ldv_func_arg1);
#line 5138
  return;
}
}
#line 5140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5145
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5147
  mutex_lock(ldv_func_arg1);
#line 5148
  return;
}
}
#line 5150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5155
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5157
  mutex_unlock(ldv_func_arg1);
#line 5158
  return;
}
}
#line 5160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5165
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5167
  mutex_lock(ldv_func_arg1);
#line 5168
  return;
}
}
#line 5170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5175
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5177
  mutex_unlock(ldv_func_arg1);
#line 5178
  return;
}
}
#line 5180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5185
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5187
  mutex_lock(ldv_func_arg1);
#line 5188
  return;
}
}
#line 5190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5195
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5197
  mutex_unlock(ldv_func_arg1);
#line 5198
  return;
}
}
#line 5200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5205
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5207
  mutex_lock(ldv_func_arg1);
#line 5208
  return;
}
}
#line 5210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5215
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5217
  mutex_unlock(ldv_func_arg1);
#line 5218
  return;
}
}
#line 5220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5225
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5227
  mutex_lock(ldv_func_arg1);
#line 5228
  return;
}
}
#line 5230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5235
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5237
  mutex_unlock(ldv_func_arg1);
#line 5238
  return;
}
}
#line 5240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5245
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5247
  mutex_lock(ldv_func_arg1);
#line 5248
  return;
}
}
#line 5250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5255
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5257
  mutex_unlock(ldv_func_arg1);
#line 5258
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_184(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 116
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 128
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 152
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 157
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 162
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 167
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 177
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 179
  mutex_lock(ldv_func_arg1);
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 187
  tmp = mutex_trylock(ldv_func_arg1);
#line 187
  ldv_func_res = tmp;
#line 189
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 189
  return (tmp___0);
#line 191
  return (ldv_func_res);
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 199
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 201
  mutex_unlock(ldv_func_arg1);
#line 202
  return;
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_184(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 209
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 211
  mutex_lock(ldv_func_arg1);
#line 212
  return;
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 219
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 221
  mutex_unlock(ldv_func_arg1);
#line 222
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 326 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 394 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 397
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 397
  return (tmp != 0);
}
}
#line 483 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 486
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 487
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_192(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_193(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_198(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_200(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_202(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_194(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_196(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_199(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___3(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6281;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6281;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6281;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6281;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6281: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 552 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2126 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___3();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___3();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 124 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 126
extern void cn_del_callback(struct cb_id * ) ;
#line 127
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 404 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 59 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  pagefault_disable___0();
#line 62
  tmp = lowmem_page_address((struct page  const  *)page);
#line 62
  return (tmp);
}
}
#line 66 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 68
  pagefault_enable___0();
#line 69
  return;
}
}
#line 845 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 849
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 865
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 872
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1563 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1958
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1962
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1962
  if (tmp___1 != 0UL) {
#line 1962
    __min1 = 2251799813685248UL;
#line 1962
    tmp___0 = drbd_md_first_sector(bdev);
#line 1962
    __min2 = tmp___0;
#line 1962
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1962
    s = 0UL;
  }
#line 1965
  goto ldv_49496;
  case -2: 
#line 1967
  __min1___0 = 2251799813685248UL;
#line 1967
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1967
  __min2___0 = tmp___2;
#line 1967
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1970
  __min1___1 = s;
#line 1970
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1970
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1973
  goto ldv_49496;
  default: 
#line 1975
  __min1___2 = 8587575296UL;
#line 1975
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1975
  __min2___2 = tmp___3;
#line 1975
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49496: ;
#line 1978
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[90U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"detach_force", 40960, 4}, 
        {"disk_timeout", 0, 4}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 100
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 101
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_50280;
  ldv_50279: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_50277;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_50277: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_50280: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_50279;
  } else {

  }

#line 14
  return (1);
}
}
#line 35
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 35 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  unsigned short *tmp___6 ;
  u16 tmp___7 ;

  {
#line 20
  goto ldv_50342;
  ldv_50341: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_50309;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_50309;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_50309;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_50309;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_50309;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_50309;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50309;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50309;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50309;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_50309;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50309;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50309;
  case 89: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->disk_timeout = (int )tmp___5;
#line 20
  goto ldv_50309;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_50309: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_50342: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___7 = get_unaligned_le16((void const   *)tmp___6);
#line 20
  tag = (int )tmp___7;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_50341;
  } else {

  }

#line 20
  return (1);
}
}
#line 39
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) ;
#line 39 "include/linux/drbd_nl.h"
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 37
  goto ldv_50359;
  ldv_50358: 
#line 37
  tmp = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 37
  dlen = (int )tmp___0;
#line 37
  switch (tag & 8191) {
  case 88: 
#line 37
  arg->detach_force = (int )((signed char )*((char *)tags)) != 0;
#line 37
  goto ldv_50356;
  default: ;
#line 37
  if ((tag & 8192) != 0) {
#line 37
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 37
    return (0);
  } else {

  }
  }
  ldv_50356: 
#line 37
  tags = tags + (unsigned long )dlen;
  ldv_50359: 
#line 37
  tmp___1 = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 37
  tag = (int )tmp___2;
#line 37
  if (tag != 0) {
#line 38
    goto ldv_50358;
  } else {

  }

#line 37
  return (1);
}
}
#line 73
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 73 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 41
  goto ldv_50450;
  ldv_50449: 
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 41
  dlen = (int )tmp___0;
#line 41
  switch (tag & 8191) {
  case 8: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->my_addr_len = dlen;
#line 41
  __min1 = (size_t )dlen;
#line 41
  __min2 = 128UL;
#line 41
  __len = __min1 < __min2 ? __min1 : __min2;
#line 41
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 41
  goto ldv_50382;
  case 9: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->peer_addr_len = dlen;
#line 41
  __min1___0 = (size_t )dlen;
#line 41
  __min2___0 = 128UL;
#line 41
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 41
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 41
  goto ldv_50382;
  case 10: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->shared_secret_len = dlen;
#line 41
  __min1___1 = (size_t )dlen;
#line 41
  __min2___1 = 64UL;
#line 41
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 41
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 41
  goto ldv_50382;
  case 11: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->cram_hmac_alg_len = dlen;
#line 41
  __min1___2 = (size_t )dlen;
#line 41
  __min2___2 = 64UL;
#line 41
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 41
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 41
  goto ldv_50382;
  case 44: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->integrity_alg_len = dlen;
#line 41
  __min1___3 = (size_t )dlen;
#line 41
  __min2___3 = 64UL;
#line 41
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 41
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 41
  goto ldv_50382;
  case 14: 
#line 41
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->timeout = (int )tmp___1;
#line 41
  goto ldv_50382;
  case 15: 
#line 41
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->wire_protocol = (int )tmp___2;
#line 41
  goto ldv_50382;
  case 16: 
#line 41
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->try_connect_int = (int )tmp___3;
#line 41
  goto ldv_50382;
  case 17: 
#line 41
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_int = (int )tmp___4;
#line 41
  goto ldv_50382;
  case 18: 
#line 41
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_epoch_size = (int )tmp___5;
#line 41
  goto ldv_50382;
  case 19: 
#line 41
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_buffers = (int )tmp___6;
#line 41
  goto ldv_50382;
  case 20: 
#line 41
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->unplug_watermark = (int )tmp___7;
#line 41
  goto ldv_50382;
  case 21: 
#line 41
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->sndbuf_size = (int )tmp___8;
#line 41
  goto ldv_50382;
  case 22: 
#line 41
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ko_count = (int )tmp___9;
#line 41
  goto ldv_50382;
  case 24: 
#line 41
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_0p = (int )tmp___10;
#line 41
  goto ldv_50382;
  case 25: 
#line 41
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_1p = (int )tmp___11;
#line 41
  goto ldv_50382;
  case 26: 
#line 41
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_2p = (int )tmp___12;
#line 41
  goto ldv_50382;
  case 39: 
#line 41
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rr_conflict = (int )tmp___13;
#line 41
  goto ldv_50382;
  case 40: 
#line 41
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_timeo = (int )tmp___14;
#line 41
  goto ldv_50382;
  case 67: 
#line 41
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rcvbuf_size = (int )tmp___15;
#line 41
  goto ldv_50382;
  case 81: 
#line 41
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->on_congestion = (int )tmp___16;
#line 41
  goto ldv_50382;
  case 82: 
#line 41
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_fill = (int )tmp___17;
#line 41
  goto ldv_50382;
  case 83: 
#line 41
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_extents = (int )tmp___18;
#line 41
  goto ldv_50382;
  case 60: 
#line 41
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 27: 
#line 41
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 28: 
#line 41
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 41: 
#line 41
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 61: 
#line 41
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 62: 
#line 41
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  case 70: 
#line 41
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_50382;
  default: ;
#line 41
  if ((tag & 8192) != 0) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 41
    return (0);
  } else {

  }
  }
  ldv_50382: 
#line 41
  tags = tags + (unsigned long )dlen;
  ldv_50450: 
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 41
  tag = (int )tmp___20;
#line 41
  if (tag != 0) {
#line 42
    goto ldv_50449;
  } else {

  }

#line 41
  return (1);
}
}
#line 77
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 77 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 75
  goto ldv_50467;
  ldv_50466: 
#line 75
  tmp = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 75
  dlen = (int )tmp___0;
#line 75
  switch (tag & 8191) {
  case 84: 
#line 75
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 75
  goto ldv_50464;
  default: ;
#line 75
  if ((tag & 8192) != 0) {
#line 75
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 75
    return (0);
  } else {

  }
  }
  ldv_50464: 
#line 75
  tags = tags + (unsigned long )dlen;
  ldv_50467: 
#line 75
  tmp___1 = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 75
  tag = (int )tmp___2;
#line 75
  if (tag != 0) {
#line 76
    goto ldv_50466;
  } else {

  }

#line 75
  return (1);
}
}
#line 83
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 83 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 79
  goto ldv_50486;
  ldv_50485: 
#line 79
  tmp = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 79
  dlen = (int )tmp___0;
#line 79
  switch (tag & 8191) {
  case 29: 
#line 79
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 79
  goto ldv_50481;
  case 68: 
#line 79
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_50481;
  case 69: 
#line 79
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_50481;
  default: ;
#line 79
  if ((tag & 8192) != 0) {
#line 79
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 79
    return (0);
  } else {

  }
  }
  ldv_50481: 
#line 79
  tags = tags + (unsigned long )dlen;
  ldv_50486: 
#line 79
  tmp___1 = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 79
  tag = (int )tmp___2;
#line 79
  if (tag != 0) {
#line 80
    goto ldv_50485;
  } else {

  }

#line 79
  return (1);
}
}
#line 104
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 104 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 85
  goto ldv_50542;
  ldv_50541: 
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 85
  dlen = (int )tmp___0;
#line 85
  switch (tag & 8191) {
  case 30: 
#line 85
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->rate = (int )tmp___1;
#line 85
  goto ldv_50500;
  case 31: 
#line 85
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->after = (int )tmp___2;
#line 85
  goto ldv_50500;
  case 32: 
#line 85
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->al_extents = (int )tmp___3;
#line 85
  goto ldv_50500;
  case 52: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->verify_alg_len = dlen;
#line 85
  __min1 = (size_t )dlen;
#line 85
  __min2 = 64UL;
#line 85
  __len = __min1 < __min2 ? __min1 : __min2;
#line 85
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 85
  goto ldv_50500;
  case 51: ;
#line 85
  if (dlen > 32) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->cpu_mask_len = dlen;
#line 85
  __min1___0 = (size_t )dlen;
#line 85
  __min2___0 = 32UL;
#line 85
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 85
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 85
  goto ldv_50500;
  case 64: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->csums_alg_len = dlen;
#line 85
  __min1___1 = (size_t )dlen;
#line 85
  __min2___1 = 64UL;
#line 85
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 85
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 85
  goto ldv_50500;
  case 65: 
#line 85
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 85
  goto ldv_50500;
  case 75: 
#line 85
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->on_no_data = (int )tmp___4;
#line 85
  goto ldv_50500;
  case 76: 
#line 85
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_plan_ahead = (int )tmp___5;
#line 85
  goto ldv_50500;
  case 77: 
#line 85
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_delay_target = (int )tmp___6;
#line 85
  goto ldv_50500;
  case 78: 
#line 85
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_fill_target = (int )tmp___7;
#line 85
  goto ldv_50500;
  case 79: 
#line 85
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_max_rate = (int )tmp___8;
#line 85
  goto ldv_50500;
  case 80: 
#line 85
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_min_rate = (int )tmp___9;
#line 85
  goto ldv_50500;
  default: ;
#line 85
  if ((tag & 8192) != 0) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 85
    return (0);
  } else {

  }
  }
  ldv_50500: 
#line 85
  tags = tags + (unsigned long )dlen;
  ldv_50542: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 85
  tag = (int )tmp___11;
#line 85
  if (tag != 0) {
#line 86
    goto ldv_50541;
  } else {

  }

#line 85
  return (1);
}
}
#line 148
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 148 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 146
  goto ldv_50841;
  ldv_50840: 
#line 146
  tmp = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 146
  dlen = (int )tmp___0;
#line 146
  switch (tag & 8191) {
  case 66: 
#line 146
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_50838;
  default: ;
#line 146
  if ((tag & 8192) != 0) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 146
    return (0);
  } else {

  }
  }
  ldv_50838: 
#line 146
  tags = tags + (unsigned long )dlen;
  ldv_50841: 
#line 146
  tmp___1 = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 146
  tag = (int )tmp___2;
#line 146
  if (tag != 0) {
#line 147
    goto ldv_50840;
  } else {

  }

#line 146
  return (1);
}
}
#line 152
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 152 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 150
  goto ldv_50858;
  ldv_50857: 
#line 150
  tmp = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 150
  dlen = (int )tmp___0;
#line 150
  switch (tag & 8191) {
  case 63: 
#line 150
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 150
  goto ldv_50855;
  default: ;
#line 150
  if ((tag & 8192) != 0) {
#line 150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 150
    return (0);
  } else {

  }
  }
  ldv_50855: 
#line 150
  tags = tags + (unsigned long )dlen;
  ldv_50858: 
#line 150
  tmp___1 = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 150
  tag = (int )tmp___2;
#line 150
  if (tag != 0) {
#line 151
    goto ldv_50857;
  } else {

  }

#line 150
  return (1);
}
}
#line 35
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 35 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;
  void *__gu_p___28 ;
  unsigned short *tmp___23 ;
  void *__gu_p___29 ;
  unsigned short *tmp___24 ;
  void *__gu_p___30 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_50903;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_50903;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_50903;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_50903;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50903;
  }
  ldv_50903: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_50910;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_50910;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_50910;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_50910;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50910;
  }
  ldv_50910: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_50917;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_50917;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50917;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50917;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50917;
  }
  ldv_50917: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_50924;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_50924;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_50924;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_50924;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50924;
  }
  ldv_50924: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_50931;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_50931;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50931;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50931;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50931;
  }
  ldv_50931: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_50941;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_50941;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_50941;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_50941;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50941;
  }
  ldv_50941: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_50948;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_50948;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50948;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50948;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50948;
  }
  ldv_50948: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_50958;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_50958;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_50958;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_50958;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50958;
  }
  ldv_50958: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_50965;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_50965;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_50965;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_50965;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50965;
  }
  ldv_50965: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_50972;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_50972;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50972;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50972;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50972;
  }
  ldv_50972: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_50979;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_50979;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_50979;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_50979;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50979;
  }
  ldv_50979: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_50986;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_50986;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_50986;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_50986;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50986;
  }
  ldv_50986: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_50993;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_50993;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50993;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50993;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50993;
  }
  ldv_50993: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_51000;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_51000;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_51000;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_51000;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51000;
  }
  ldv_51000: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_51007;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_51007;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_51007;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_51007;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51007;
  }
  ldv_51007: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_51014;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_51014;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51014;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51014;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51014;
  }
  ldv_51014: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_51021;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_51021;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_51021;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_51021;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51021;
  }
  ldv_51021: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_51028;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_51028;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_51028;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_51028;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51028;
  }
  ldv_51028: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_51035;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_51035;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_51035;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_51035;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51035;
  }
  ldv_51035: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_51042;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_51042;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_51042;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_51042;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51042;
  }
  ldv_51042: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_51049;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_51049;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_51049;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_51049;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51049;
  }
  ldv_51049: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_51056;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_51056;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_51056;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_51056;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51056;
  }
  ldv_51056: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_51063;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_51063;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_51063;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_51063;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51063;
  }
  ldv_51063: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_51070;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_51070;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_51070;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_51070;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51070;
  }
  ldv_51070: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_51077;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_51077;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51077;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51077;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51077;
  }
  ldv_51077: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_51084;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_51084;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_51084;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_51084;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51084;
  }
  ldv_51084: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_51091;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_51091;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_51091;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_51091;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51091;
  }
  ldv_51091: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_51098;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_51098;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_51098;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_51098;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51098;
  }
  ldv_51098: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_51105;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_51105;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_51105;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_51105;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51105;
  }
  ldv_51105: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  tmp___23 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___28 = (void *)tmp___23;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___28) = 89U;
#line 20
  goto ldv_51112;
  case 2UL: 
#line 20
  put_unaligned_le16(89, __gu_p___28);
#line 20
  goto ldv_51112;
  case 4UL: 
#line 20
  put_unaligned_le32(89U, __gu_p___28);
#line 20
  goto ldv_51112;
  case 8UL: 
#line 20
  put_unaligned_le64(89ULL, __gu_p___28);
#line 20
  goto ldv_51112;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51112;
  }
  ldv_51112: 
#line 20
  tmp___24 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___29 = (void *)tmp___24;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___29) = 4U;
#line 20
  goto ldv_51119;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___29);
#line 20
  goto ldv_51119;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___29);
#line 20
  goto ldv_51119;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___29);
#line 20
  goto ldv_51119;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51119;
  }
  ldv_51119: 
#line 20
  __gu_p___30 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___30) = (unsigned char )arg->disk_timeout;
#line 20
  goto ldv_51126;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_timeout), __gu_p___30);
#line 20
  goto ldv_51126;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51126;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51126;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51126;
  }
  ldv_51126: 
#line 20
  tags = tags + 4U;
#line 20
  return (tags);
}
}
#line 73
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 73 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p = (void *)tmp;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p) = 8U;
#line 41
  goto ldv_51165;
  case 2UL: 
#line 41
  put_unaligned_le16(57352, __gu_p);
#line 41
  goto ldv_51165;
  case 4UL: 
#line 41
  put_unaligned_le32(57352U, __gu_p);
#line 41
  goto ldv_51165;
  case 8UL: 
#line 41
  put_unaligned_le64(57352ULL, __gu_p);
#line 41
  goto ldv_51165;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51165;
  }
  ldv_51165: 
#line 41
  tmp___0 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___0 = (void *)tmp___0;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 41
  goto ldv_51172;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 41
  goto ldv_51172;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51172;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51172;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51172;
  }
  ldv_51172: 
#line 41
  __len = (size_t )arg->my_addr_len;
#line 41
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 41
  tags = tags + (unsigned long )arg->my_addr_len;
#line 41
  tmp___1 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___1 = (void *)tmp___1;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___1) = 9U;
#line 41
  goto ldv_51182;
  case 2UL: 
#line 41
  put_unaligned_le16(57353, __gu_p___1);
#line 41
  goto ldv_51182;
  case 4UL: 
#line 41
  put_unaligned_le32(57353U, __gu_p___1);
#line 41
  goto ldv_51182;
  case 8UL: 
#line 41
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 41
  goto ldv_51182;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51182;
  }
  ldv_51182: 
#line 41
  tmp___2 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___2 = (void *)tmp___2;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 41
  goto ldv_51189;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 41
  goto ldv_51189;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51189;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51189;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51189;
  }
  ldv_51189: 
#line 41
  __len___0 = (size_t )arg->peer_addr_len;
#line 41
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 41
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 41
  tmp___3 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___3 = (void *)tmp___3;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___3) = 10U;
#line 41
  goto ldv_51199;
  case 2UL: 
#line 41
  put_unaligned_le16(49162, __gu_p___3);
#line 41
  goto ldv_51199;
  case 4UL: 
#line 41
  put_unaligned_le32(49162U, __gu_p___3);
#line 41
  goto ldv_51199;
  case 8UL: 
#line 41
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 41
  goto ldv_51199;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51199;
  }
  ldv_51199: 
#line 41
  tmp___4 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___4 = (void *)tmp___4;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 41
  goto ldv_51206;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 41
  goto ldv_51206;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51206;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51206;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51206;
  }
  ldv_51206: 
#line 41
  __len___1 = (size_t )arg->shared_secret_len;
#line 41
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 41
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 41
  tmp___5 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___5 = (void *)tmp___5;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___5) = 11U;
#line 41
  goto ldv_51216;
  case 2UL: 
#line 41
  put_unaligned_le16(49163, __gu_p___5);
#line 41
  goto ldv_51216;
  case 4UL: 
#line 41
  put_unaligned_le32(49163U, __gu_p___5);
#line 41
  goto ldv_51216;
  case 8UL: 
#line 41
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 41
  goto ldv_51216;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51216;
  }
  ldv_51216: 
#line 41
  tmp___6 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___6 = (void *)tmp___6;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 41
  goto ldv_51223;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 41
  goto ldv_51223;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51223;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51223;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51223;
  }
  ldv_51223: 
#line 41
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 41
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 41
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 41
  tmp___7 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___7 = (void *)tmp___7;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___7) = 44U;
#line 41
  goto ldv_51233;
  case 2UL: 
#line 41
  put_unaligned_le16(49196, __gu_p___7);
#line 41
  goto ldv_51233;
  case 4UL: 
#line 41
  put_unaligned_le32(49196U, __gu_p___7);
#line 41
  goto ldv_51233;
  case 8UL: 
#line 41
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 41
  goto ldv_51233;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51233;
  }
  ldv_51233: 
#line 41
  tmp___8 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___8 = (void *)tmp___8;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 41
  goto ldv_51240;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 41
  goto ldv_51240;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51240;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51240;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51240;
  }
  ldv_51240: 
#line 41
  __len___3 = (size_t )arg->integrity_alg_len;
#line 41
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 41
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 41
  tmp___9 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___9 = (void *)tmp___9;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___9) = 14U;
#line 41
  goto ldv_51250;
  case 2UL: 
#line 41
  put_unaligned_le16(14, __gu_p___9);
#line 41
  goto ldv_51250;
  case 4UL: 
#line 41
  put_unaligned_le32(14U, __gu_p___9);
#line 41
  goto ldv_51250;
  case 8UL: 
#line 41
  put_unaligned_le64(14ULL, __gu_p___9);
#line 41
  goto ldv_51250;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51250;
  }
  ldv_51250: 
#line 41
  tmp___10 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___10 = (void *)tmp___10;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___10) = 4U;
#line 41
  goto ldv_51257;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___10);
#line 41
  goto ldv_51257;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___10);
#line 41
  goto ldv_51257;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___10);
#line 41
  goto ldv_51257;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51257;
  }
  ldv_51257: 
#line 41
  __gu_p___11 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 41
  goto ldv_51264;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 41
  goto ldv_51264;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51264;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51264;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51264;
  }
  ldv_51264: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___11 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___12 = (void *)tmp___11;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___12) = 15U;
#line 41
  goto ldv_51271;
  case 2UL: 
#line 41
  put_unaligned_le16(8207, __gu_p___12);
#line 41
  goto ldv_51271;
  case 4UL: 
#line 41
  put_unaligned_le32(8207U, __gu_p___12);
#line 41
  goto ldv_51271;
  case 8UL: 
#line 41
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 41
  goto ldv_51271;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51271;
  }
  ldv_51271: 
#line 41
  tmp___12 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___13 = (void *)tmp___12;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___13) = 4U;
#line 41
  goto ldv_51278;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___13);
#line 41
  goto ldv_51278;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___13);
#line 41
  goto ldv_51278;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___13);
#line 41
  goto ldv_51278;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51278;
  }
  ldv_51278: 
#line 41
  __gu_p___14 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 41
  goto ldv_51285;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 41
  goto ldv_51285;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51285;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51285;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51285;
  }
  ldv_51285: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___13 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___15 = (void *)tmp___13;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___15) = 16U;
#line 41
  goto ldv_51292;
  case 2UL: 
#line 41
  put_unaligned_le16(16, __gu_p___15);
#line 41
  goto ldv_51292;
  case 4UL: 
#line 41
  put_unaligned_le32(16U, __gu_p___15);
#line 41
  goto ldv_51292;
  case 8UL: 
#line 41
  put_unaligned_le64(16ULL, __gu_p___15);
#line 41
  goto ldv_51292;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51292;
  }
  ldv_51292: 
#line 41
  tmp___14 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___16 = (void *)tmp___14;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___16) = 4U;
#line 41
  goto ldv_51299;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___16);
#line 41
  goto ldv_51299;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___16);
#line 41
  goto ldv_51299;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___16);
#line 41
  goto ldv_51299;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51299;
  }
  ldv_51299: 
#line 41
  __gu_p___17 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 41
  goto ldv_51306;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 41
  goto ldv_51306;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51306;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51306;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51306;
  }
  ldv_51306: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___15 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___18 = (void *)tmp___15;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___18) = 17U;
#line 41
  goto ldv_51313;
  case 2UL: 
#line 41
  put_unaligned_le16(17, __gu_p___18);
#line 41
  goto ldv_51313;
  case 4UL: 
#line 41
  put_unaligned_le32(17U, __gu_p___18);
#line 41
  goto ldv_51313;
  case 8UL: 
#line 41
  put_unaligned_le64(17ULL, __gu_p___18);
#line 41
  goto ldv_51313;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51313;
  }
  ldv_51313: 
#line 41
  tmp___16 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___19 = (void *)tmp___16;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___19) = 4U;
#line 41
  goto ldv_51320;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___19);
#line 41
  goto ldv_51320;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___19);
#line 41
  goto ldv_51320;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___19);
#line 41
  goto ldv_51320;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51320;
  }
  ldv_51320: 
#line 41
  __gu_p___20 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 41
  goto ldv_51327;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 41
  goto ldv_51327;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51327;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51327;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51327;
  }
  ldv_51327: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___17 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___21 = (void *)tmp___17;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___21) = 18U;
#line 41
  goto ldv_51334;
  case 2UL: 
#line 41
  put_unaligned_le16(18, __gu_p___21);
#line 41
  goto ldv_51334;
  case 4UL: 
#line 41
  put_unaligned_le32(18U, __gu_p___21);
#line 41
  goto ldv_51334;
  case 8UL: 
#line 41
  put_unaligned_le64(18ULL, __gu_p___21);
#line 41
  goto ldv_51334;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51334;
  }
  ldv_51334: 
#line 41
  tmp___18 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___22 = (void *)tmp___18;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___22) = 4U;
#line 41
  goto ldv_51341;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___22);
#line 41
  goto ldv_51341;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___22);
#line 41
  goto ldv_51341;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___22);
#line 41
  goto ldv_51341;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51341;
  }
  ldv_51341: 
#line 41
  __gu_p___23 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 41
  goto ldv_51348;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 41
  goto ldv_51348;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_51348;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_51348;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51348;
  }
  ldv_51348: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___24 = (void *)tmp___19;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___24) = 19U;
#line 41
  goto ldv_51355;
  case 2UL: 
#line 41
  put_unaligned_le16(19, __gu_p___24);
#line 41
  goto ldv_51355;
  case 4UL: 
#line 41
  put_unaligned_le32(19U, __gu_p___24);
#line 41
  goto ldv_51355;
  case 8UL: 
#line 41
  put_unaligned_le64(19ULL, __gu_p___24);
#line 41
  goto ldv_51355;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51355;
  }
  ldv_51355: 
#line 41
  tmp___20 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___25 = (void *)tmp___20;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___25) = 4U;
#line 41
  goto ldv_51362;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___25);
#line 41
  goto ldv_51362;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___25);
#line 41
  goto ldv_51362;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___25);
#line 41
  goto ldv_51362;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51362;
  }
  ldv_51362: 
#line 41
  __gu_p___26 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 41
  goto ldv_51369;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 41
  goto ldv_51369;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_51369;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_51369;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51369;
  }
  ldv_51369: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___21 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___27 = (void *)tmp___21;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___27) = 20U;
#line 41
  goto ldv_51376;
  case 2UL: 
#line 41
  put_unaligned_le16(20, __gu_p___27);
#line 41
  goto ldv_51376;
  case 4UL: 
#line 41
  put_unaligned_le32(20U, __gu_p___27);
#line 41
  goto ldv_51376;
  case 8UL: 
#line 41
  put_unaligned_le64(20ULL, __gu_p___27);
#line 41
  goto ldv_51376;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51376;
  }
  ldv_51376: 
#line 41
  tmp___22 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___28 = (void *)tmp___22;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___28) = 4U;
#line 41
  goto ldv_51383;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___28);
#line 41
  goto ldv_51383;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___28);
#line 41
  goto ldv_51383;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___28);
#line 41
  goto ldv_51383;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51383;
  }
  ldv_51383: 
#line 41
  __gu_p___29 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 41
  goto ldv_51390;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 41
  goto ldv_51390;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_51390;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_51390;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51390;
  }
  ldv_51390: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___23 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___30 = (void *)tmp___23;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___30) = 21U;
#line 41
  goto ldv_51397;
  case 2UL: 
#line 41
  put_unaligned_le16(21, __gu_p___30);
#line 41
  goto ldv_51397;
  case 4UL: 
#line 41
  put_unaligned_le32(21U, __gu_p___30);
#line 41
  goto ldv_51397;
  case 8UL: 
#line 41
  put_unaligned_le64(21ULL, __gu_p___30);
#line 41
  goto ldv_51397;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51397;
  }
  ldv_51397: 
#line 41
  tmp___24 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___31 = (void *)tmp___24;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___31) = 4U;
#line 41
  goto ldv_51404;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___31);
#line 41
  goto ldv_51404;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___31);
#line 41
  goto ldv_51404;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___31);
#line 41
  goto ldv_51404;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51404;
  }
  ldv_51404: 
#line 41
  __gu_p___32 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 41
  goto ldv_51411;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 41
  goto ldv_51411;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_51411;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_51411;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51411;
  }
  ldv_51411: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___25 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___33 = (void *)tmp___25;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___33) = 22U;
#line 41
  goto ldv_51418;
  case 2UL: 
#line 41
  put_unaligned_le16(22, __gu_p___33);
#line 41
  goto ldv_51418;
  case 4UL: 
#line 41
  put_unaligned_le32(22U, __gu_p___33);
#line 41
  goto ldv_51418;
  case 8UL: 
#line 41
  put_unaligned_le64(22ULL, __gu_p___33);
#line 41
  goto ldv_51418;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51418;
  }
  ldv_51418: 
#line 41
  tmp___26 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___34 = (void *)tmp___26;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___34) = 4U;
#line 41
  goto ldv_51425;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___34);
#line 41
  goto ldv_51425;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___34);
#line 41
  goto ldv_51425;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___34);
#line 41
  goto ldv_51425;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51425;
  }
  ldv_51425: 
#line 41
  __gu_p___35 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 41
  goto ldv_51432;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 41
  goto ldv_51432;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_51432;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_51432;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51432;
  }
  ldv_51432: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___27 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___36 = (void *)tmp___27;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___36) = 24U;
#line 41
  goto ldv_51439;
  case 2UL: 
#line 41
  put_unaligned_le16(24, __gu_p___36);
#line 41
  goto ldv_51439;
  case 4UL: 
#line 41
  put_unaligned_le32(24U, __gu_p___36);
#line 41
  goto ldv_51439;
  case 8UL: 
#line 41
  put_unaligned_le64(24ULL, __gu_p___36);
#line 41
  goto ldv_51439;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51439;
  }
  ldv_51439: 
#line 41
  tmp___28 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___37 = (void *)tmp___28;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___37) = 4U;
#line 41
  goto ldv_51446;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___37);
#line 41
  goto ldv_51446;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___37);
#line 41
  goto ldv_51446;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___37);
#line 41
  goto ldv_51446;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51446;
  }
  ldv_51446: 
#line 41
  __gu_p___38 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 41
  goto ldv_51453;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 41
  goto ldv_51453;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_51453;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_51453;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51453;
  }
  ldv_51453: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___29 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___39 = (void *)tmp___29;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___39) = 25U;
#line 41
  goto ldv_51460;
  case 2UL: 
#line 41
  put_unaligned_le16(25, __gu_p___39);
#line 41
  goto ldv_51460;
  case 4UL: 
#line 41
  put_unaligned_le32(25U, __gu_p___39);
#line 41
  goto ldv_51460;
  case 8UL: 
#line 41
  put_unaligned_le64(25ULL, __gu_p___39);
#line 41
  goto ldv_51460;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51460;
  }
  ldv_51460: 
#line 41
  tmp___30 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___40 = (void *)tmp___30;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___40) = 4U;
#line 41
  goto ldv_51467;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___40);
#line 41
  goto ldv_51467;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___40);
#line 41
  goto ldv_51467;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___40);
#line 41
  goto ldv_51467;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51467;
  }
  ldv_51467: 
#line 41
  __gu_p___41 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 41
  goto ldv_51474;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 41
  goto ldv_51474;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_51474;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_51474;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51474;
  }
  ldv_51474: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___31 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___42 = (void *)tmp___31;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___42) = 26U;
#line 41
  goto ldv_51481;
  case 2UL: 
#line 41
  put_unaligned_le16(26, __gu_p___42);
#line 41
  goto ldv_51481;
  case 4UL: 
#line 41
  put_unaligned_le32(26U, __gu_p___42);
#line 41
  goto ldv_51481;
  case 8UL: 
#line 41
  put_unaligned_le64(26ULL, __gu_p___42);
#line 41
  goto ldv_51481;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51481;
  }
  ldv_51481: 
#line 41
  tmp___32 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___43 = (void *)tmp___32;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___43) = 4U;
#line 41
  goto ldv_51488;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___43);
#line 41
  goto ldv_51488;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___43);
#line 41
  goto ldv_51488;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___43);
#line 41
  goto ldv_51488;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51488;
  }
  ldv_51488: 
#line 41
  __gu_p___44 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 41
  goto ldv_51495;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 41
  goto ldv_51495;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_51495;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_51495;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51495;
  }
  ldv_51495: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___33 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___45 = (void *)tmp___33;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___45) = 39U;
#line 41
  goto ldv_51502;
  case 2UL: 
#line 41
  put_unaligned_le16(39, __gu_p___45);
#line 41
  goto ldv_51502;
  case 4UL: 
#line 41
  put_unaligned_le32(39U, __gu_p___45);
#line 41
  goto ldv_51502;
  case 8UL: 
#line 41
  put_unaligned_le64(39ULL, __gu_p___45);
#line 41
  goto ldv_51502;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51502;
  }
  ldv_51502: 
#line 41
  tmp___34 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___46 = (void *)tmp___34;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___46) = 4U;
#line 41
  goto ldv_51509;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___46);
#line 41
  goto ldv_51509;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___46);
#line 41
  goto ldv_51509;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___46);
#line 41
  goto ldv_51509;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51509;
  }
  ldv_51509: 
#line 41
  __gu_p___47 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 41
  goto ldv_51516;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 41
  goto ldv_51516;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_51516;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_51516;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51516;
  }
  ldv_51516: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___35 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___48 = (void *)tmp___35;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___48) = 40U;
#line 41
  goto ldv_51523;
  case 2UL: 
#line 41
  put_unaligned_le16(40, __gu_p___48);
#line 41
  goto ldv_51523;
  case 4UL: 
#line 41
  put_unaligned_le32(40U, __gu_p___48);
#line 41
  goto ldv_51523;
  case 8UL: 
#line 41
  put_unaligned_le64(40ULL, __gu_p___48);
#line 41
  goto ldv_51523;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51523;
  }
  ldv_51523: 
#line 41
  tmp___36 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___49 = (void *)tmp___36;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___49) = 4U;
#line 41
  goto ldv_51530;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___49);
#line 41
  goto ldv_51530;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___49);
#line 41
  goto ldv_51530;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___49);
#line 41
  goto ldv_51530;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51530;
  }
  ldv_51530: 
#line 41
  __gu_p___50 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 41
  goto ldv_51537;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 41
  goto ldv_51537;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_51537;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_51537;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51537;
  }
  ldv_51537: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___37 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___51 = (void *)tmp___37;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___51) = 67U;
#line 41
  goto ldv_51544;
  case 2UL: 
#line 41
  put_unaligned_le16(67, __gu_p___51);
#line 41
  goto ldv_51544;
  case 4UL: 
#line 41
  put_unaligned_le32(67U, __gu_p___51);
#line 41
  goto ldv_51544;
  case 8UL: 
#line 41
  put_unaligned_le64(67ULL, __gu_p___51);
#line 41
  goto ldv_51544;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51544;
  }
  ldv_51544: 
#line 41
  tmp___38 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___52 = (void *)tmp___38;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___52) = 4U;
#line 41
  goto ldv_51551;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___52);
#line 41
  goto ldv_51551;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___52);
#line 41
  goto ldv_51551;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___52);
#line 41
  goto ldv_51551;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51551;
  }
  ldv_51551: 
#line 41
  __gu_p___53 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 41
  goto ldv_51558;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 41
  goto ldv_51558;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_51558;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_51558;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51558;
  }
  ldv_51558: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___39 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___54 = (void *)tmp___39;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___54) = 81U;
#line 41
  goto ldv_51565;
  case 2UL: 
#line 41
  put_unaligned_le16(81, __gu_p___54);
#line 41
  goto ldv_51565;
  case 4UL: 
#line 41
  put_unaligned_le32(81U, __gu_p___54);
#line 41
  goto ldv_51565;
  case 8UL: 
#line 41
  put_unaligned_le64(81ULL, __gu_p___54);
#line 41
  goto ldv_51565;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51565;
  }
  ldv_51565: 
#line 41
  tmp___40 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___55 = (void *)tmp___40;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___55) = 4U;
#line 41
  goto ldv_51572;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___55);
#line 41
  goto ldv_51572;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___55);
#line 41
  goto ldv_51572;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___55);
#line 41
  goto ldv_51572;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51572;
  }
  ldv_51572: 
#line 41
  __gu_p___56 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 41
  goto ldv_51579;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 41
  goto ldv_51579;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_51579;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_51579;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51579;
  }
  ldv_51579: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___41 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___57 = (void *)tmp___41;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___57) = 82U;
#line 41
  goto ldv_51586;
  case 2UL: 
#line 41
  put_unaligned_le16(82, __gu_p___57);
#line 41
  goto ldv_51586;
  case 4UL: 
#line 41
  put_unaligned_le32(82U, __gu_p___57);
#line 41
  goto ldv_51586;
  case 8UL: 
#line 41
  put_unaligned_le64(82ULL, __gu_p___57);
#line 41
  goto ldv_51586;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51586;
  }
  ldv_51586: 
#line 41
  tmp___42 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___58 = (void *)tmp___42;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___58) = 4U;
#line 41
  goto ldv_51593;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___58);
#line 41
  goto ldv_51593;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___58);
#line 41
  goto ldv_51593;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___58);
#line 41
  goto ldv_51593;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51593;
  }
  ldv_51593: 
#line 41
  __gu_p___59 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 41
  goto ldv_51600;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 41
  goto ldv_51600;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_51600;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_51600;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51600;
  }
  ldv_51600: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___43 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___60 = (void *)tmp___43;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___60) = 83U;
#line 41
  goto ldv_51607;
  case 2UL: 
#line 41
  put_unaligned_le16(83, __gu_p___60);
#line 41
  goto ldv_51607;
  case 4UL: 
#line 41
  put_unaligned_le32(83U, __gu_p___60);
#line 41
  goto ldv_51607;
  case 8UL: 
#line 41
  put_unaligned_le64(83ULL, __gu_p___60);
#line 41
  goto ldv_51607;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51607;
  }
  ldv_51607: 
#line 41
  tmp___44 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___61 = (void *)tmp___44;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___61) = 4U;
#line 41
  goto ldv_51614;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___61);
#line 41
  goto ldv_51614;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___61);
#line 41
  goto ldv_51614;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___61);
#line 41
  goto ldv_51614;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51614;
  }
  ldv_51614: 
#line 41
  __gu_p___62 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 41
  goto ldv_51621;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 41
  goto ldv_51621;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_51621;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_51621;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51621;
  }
  ldv_51621: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___45 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___63 = (void *)tmp___45;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___63) = 60U;
#line 41
  goto ldv_51628;
  case 2UL: 
#line 41
  put_unaligned_le16(41020, __gu_p___63);
#line 41
  goto ldv_51628;
  case 4UL: 
#line 41
  put_unaligned_le32(41020U, __gu_p___63);
#line 41
  goto ldv_51628;
  case 8UL: 
#line 41
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 41
  goto ldv_51628;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51628;
  }
  ldv_51628: 
#line 41
  tmp___46 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___64 = (void *)tmp___46;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___64) = 1U;
#line 41
  goto ldv_51635;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___64);
#line 41
  goto ldv_51635;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___64);
#line 41
  goto ldv_51635;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___64);
#line 41
  goto ldv_51635;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51635;
  }
  ldv_51635: 
#line 41
  *((char *)tags) = (char )arg->mind_af;
#line 41
  tags = tags + 1U;
#line 41
  tmp___47 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___65 = (void *)tmp___47;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___65) = 27U;
#line 41
  goto ldv_51642;
  case 2UL: 
#line 41
  put_unaligned_le16(32795, __gu_p___65);
#line 41
  goto ldv_51642;
  case 4UL: 
#line 41
  put_unaligned_le32(32795U, __gu_p___65);
#line 41
  goto ldv_51642;
  case 8UL: 
#line 41
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 41
  goto ldv_51642;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51642;
  }
  ldv_51642: 
#line 41
  tmp___48 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___66 = (void *)tmp___48;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___66) = 1U;
#line 41
  goto ldv_51649;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___66);
#line 41
  goto ldv_51649;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___66);
#line 41
  goto ldv_51649;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___66);
#line 41
  goto ldv_51649;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51649;
  }
  ldv_51649: 
#line 41
  *((char *)tags) = (char )arg->want_lose;
#line 41
  tags = tags + 1U;
#line 41
  tmp___49 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___67 = (void *)tmp___49;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___67) = 28U;
#line 41
  goto ldv_51656;
  case 2UL: 
#line 41
  put_unaligned_le16(32796, __gu_p___67);
#line 41
  goto ldv_51656;
  case 4UL: 
#line 41
  put_unaligned_le32(32796U, __gu_p___67);
#line 41
  goto ldv_51656;
  case 8UL: 
#line 41
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 41
  goto ldv_51656;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51656;
  }
  ldv_51656: 
#line 41
  tmp___50 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___68 = (void *)tmp___50;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___68) = 1U;
#line 41
  goto ldv_51663;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___68);
#line 41
  goto ldv_51663;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___68);
#line 41
  goto ldv_51663;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___68);
#line 41
  goto ldv_51663;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51663;
  }
  ldv_51663: 
#line 41
  *((char *)tags) = (char )arg->two_primaries;
#line 41
  tags = tags + 1U;
#line 41
  tmp___51 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___69 = (void *)tmp___51;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___69) = 41U;
#line 41
  goto ldv_51670;
  case 2UL: 
#line 41
  put_unaligned_le16(32809, __gu_p___69);
#line 41
  goto ldv_51670;
  case 4UL: 
#line 41
  put_unaligned_le32(32809U, __gu_p___69);
#line 41
  goto ldv_51670;
  case 8UL: 
#line 41
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 41
  goto ldv_51670;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51670;
  }
  ldv_51670: 
#line 41
  tmp___52 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___70 = (void *)tmp___52;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___70) = 1U;
#line 41
  goto ldv_51677;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___70);
#line 41
  goto ldv_51677;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___70);
#line 41
  goto ldv_51677;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___70);
#line 41
  goto ldv_51677;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51677;
  }
  ldv_51677: 
#line 41
  *((char *)tags) = (char )arg->always_asbp;
#line 41
  tags = tags + 1U;
#line 41
  tmp___53 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___71 = (void *)tmp___53;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___71) = 61U;
#line 41
  goto ldv_51684;
  case 2UL: 
#line 41
  put_unaligned_le16(32829, __gu_p___71);
#line 41
  goto ldv_51684;
  case 4UL: 
#line 41
  put_unaligned_le32(32829U, __gu_p___71);
#line 41
  goto ldv_51684;
  case 8UL: 
#line 41
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 41
  goto ldv_51684;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51684;
  }
  ldv_51684: 
#line 41
  tmp___54 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___72 = (void *)tmp___54;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___72) = 1U;
#line 41
  goto ldv_51691;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___72);
#line 41
  goto ldv_51691;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___72);
#line 41
  goto ldv_51691;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___72);
#line 41
  goto ldv_51691;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51691;
  }
  ldv_51691: 
#line 41
  *((char *)tags) = (char )arg->no_cork;
#line 41
  tags = tags + 1U;
#line 41
  tmp___55 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___73 = (void *)tmp___55;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___73) = 62U;
#line 41
  goto ldv_51698;
  case 2UL: 
#line 41
  put_unaligned_le16(41022, __gu_p___73);
#line 41
  goto ldv_51698;
  case 4UL: 
#line 41
  put_unaligned_le32(41022U, __gu_p___73);
#line 41
  goto ldv_51698;
  case 8UL: 
#line 41
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 41
  goto ldv_51698;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51698;
  }
  ldv_51698: 
#line 41
  tmp___56 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___74 = (void *)tmp___56;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___74) = 1U;
#line 41
  goto ldv_51705;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___74);
#line 41
  goto ldv_51705;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___74);
#line 41
  goto ldv_51705;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___74);
#line 41
  goto ldv_51705;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51705;
  }
  ldv_51705: 
#line 41
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 41
  tags = tags + 1U;
#line 41
  tmp___57 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___75 = (void *)tmp___57;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___75) = 70U;
#line 41
  goto ldv_51712;
  case 2UL: 
#line 41
  put_unaligned_le16(41030, __gu_p___75);
#line 41
  goto ldv_51712;
  case 4UL: 
#line 41
  put_unaligned_le32(41030U, __gu_p___75);
#line 41
  goto ldv_51712;
  case 8UL: 
#line 41
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 41
  goto ldv_51712;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51712;
  }
  ldv_51712: 
#line 41
  tmp___58 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___76 = (void *)tmp___58;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___76) = 1U;
#line 41
  goto ldv_51719;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___76);
#line 41
  goto ldv_51719;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___76);
#line 41
  goto ldv_51719;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___76);
#line 41
  goto ldv_51719;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51719;
  }
  ldv_51719: 
#line 41
  *((char *)tags) = (char )arg->dry_run;
#line 41
  tags = tags + 1U;
#line 41
  return (tags);
}
}
#line 104
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 104 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p = (void *)tmp;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p) = 30U;
#line 85
  goto ldv_51816;
  case 2UL: 
#line 85
  put_unaligned_le16(30, __gu_p);
#line 85
  goto ldv_51816;
  case 4UL: 
#line 85
  put_unaligned_le32(30U, __gu_p);
#line 85
  goto ldv_51816;
  case 8UL: 
#line 85
  put_unaligned_le64(30ULL, __gu_p);
#line 85
  goto ldv_51816;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51816;
  }
  ldv_51816: 
#line 85
  tmp___0 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___0 = (void *)tmp___0;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___0) = 4U;
#line 85
  goto ldv_51823;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___0);
#line 85
  goto ldv_51823;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___0);
#line 85
  goto ldv_51823;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___0);
#line 85
  goto ldv_51823;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51823;
  }
  ldv_51823: 
#line 85
  __gu_p___1 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 85
  goto ldv_51830;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 85
  goto ldv_51830;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 85
  goto ldv_51830;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 85
  goto ldv_51830;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51830;
  }
  ldv_51830: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___1 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___2 = (void *)tmp___1;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___2) = 31U;
#line 85
  goto ldv_51837;
  case 2UL: 
#line 85
  put_unaligned_le16(31, __gu_p___2);
#line 85
  goto ldv_51837;
  case 4UL: 
#line 85
  put_unaligned_le32(31U, __gu_p___2);
#line 85
  goto ldv_51837;
  case 8UL: 
#line 85
  put_unaligned_le64(31ULL, __gu_p___2);
#line 85
  goto ldv_51837;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51837;
  }
  ldv_51837: 
#line 85
  tmp___2 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___3 = (void *)tmp___2;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___3) = 4U;
#line 85
  goto ldv_51844;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___3);
#line 85
  goto ldv_51844;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___3);
#line 85
  goto ldv_51844;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___3);
#line 85
  goto ldv_51844;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51844;
  }
  ldv_51844: 
#line 85
  __gu_p___4 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 85
  goto ldv_51851;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 85
  goto ldv_51851;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 85
  goto ldv_51851;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 85
  goto ldv_51851;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51851;
  }
  ldv_51851: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___3 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___5 = (void *)tmp___3;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___5) = 32U;
#line 85
  goto ldv_51858;
  case 2UL: 
#line 85
  put_unaligned_le16(32, __gu_p___5);
#line 85
  goto ldv_51858;
  case 4UL: 
#line 85
  put_unaligned_le32(32U, __gu_p___5);
#line 85
  goto ldv_51858;
  case 8UL: 
#line 85
  put_unaligned_le64(32ULL, __gu_p___5);
#line 85
  goto ldv_51858;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51858;
  }
  ldv_51858: 
#line 85
  tmp___4 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___6 = (void *)tmp___4;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___6) = 4U;
#line 85
  goto ldv_51865;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___6);
#line 85
  goto ldv_51865;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___6);
#line 85
  goto ldv_51865;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___6);
#line 85
  goto ldv_51865;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51865;
  }
  ldv_51865: 
#line 85
  __gu_p___7 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 85
  goto ldv_51872;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 85
  goto ldv_51872;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_51872;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_51872;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51872;
  }
  ldv_51872: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___5 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___8 = (void *)tmp___5;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___8) = 52U;
#line 85
  goto ldv_51879;
  case 2UL: 
#line 85
  put_unaligned_le16(49204, __gu_p___8);
#line 85
  goto ldv_51879;
  case 4UL: 
#line 85
  put_unaligned_le32(49204U, __gu_p___8);
#line 85
  goto ldv_51879;
  case 8UL: 
#line 85
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 85
  goto ldv_51879;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51879;
  }
  ldv_51879: 
#line 85
  tmp___6 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___9 = (void *)tmp___6;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 85
  goto ldv_51886;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 85
  goto ldv_51886;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_51886;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_51886;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51886;
  }
  ldv_51886: 
#line 85
  __len = (size_t )arg->verify_alg_len;
#line 85
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 85
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 85
  tmp___7 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___10 = (void *)tmp___7;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___10) = 51U;
#line 85
  goto ldv_51896;
  case 2UL: 
#line 85
  put_unaligned_le16(49203, __gu_p___10);
#line 85
  goto ldv_51896;
  case 4UL: 
#line 85
  put_unaligned_le32(49203U, __gu_p___10);
#line 85
  goto ldv_51896;
  case 8UL: 
#line 85
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 85
  goto ldv_51896;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51896;
  }
  ldv_51896: 
#line 85
  tmp___8 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___11 = (void *)tmp___8;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 85
  goto ldv_51903;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 85
  goto ldv_51903;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_51903;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_51903;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51903;
  }
  ldv_51903: 
#line 85
  __len___0 = (size_t )arg->cpu_mask_len;
#line 85
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 85
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 85
  tmp___9 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___12 = (void *)tmp___9;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___12) = 64U;
#line 85
  goto ldv_51913;
  case 2UL: 
#line 85
  put_unaligned_le16(49216, __gu_p___12);
#line 85
  goto ldv_51913;
  case 4UL: 
#line 85
  put_unaligned_le32(49216U, __gu_p___12);
#line 85
  goto ldv_51913;
  case 8UL: 
#line 85
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 85
  goto ldv_51913;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51913;
  }
  ldv_51913: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___13 = (void *)tmp___10;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 85
  goto ldv_51920;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 85
  goto ldv_51920;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_51920;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_51920;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51920;
  }
  ldv_51920: 
#line 85
  __len___1 = (size_t )arg->csums_alg_len;
#line 85
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 85
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 85
  tmp___11 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___14 = (void *)tmp___11;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___14) = 65U;
#line 85
  goto ldv_51930;
  case 2UL: 
#line 85
  put_unaligned_le16(32833, __gu_p___14);
#line 85
  goto ldv_51930;
  case 4UL: 
#line 85
  put_unaligned_le32(32833U, __gu_p___14);
#line 85
  goto ldv_51930;
  case 8UL: 
#line 85
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 85
  goto ldv_51930;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51930;
  }
  ldv_51930: 
#line 85
  tmp___12 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___15 = (void *)tmp___12;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___15) = 1U;
#line 85
  goto ldv_51937;
  case 2UL: 
#line 85
  put_unaligned_le16(1, __gu_p___15);
#line 85
  goto ldv_51937;
  case 4UL: 
#line 85
  put_unaligned_le32(1U, __gu_p___15);
#line 85
  goto ldv_51937;
  case 8UL: 
#line 85
  put_unaligned_le64(1ULL, __gu_p___15);
#line 85
  goto ldv_51937;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51937;
  }
  ldv_51937: 
#line 85
  *((char *)tags) = (char )arg->use_rle;
#line 85
  tags = tags + 1U;
#line 85
  tmp___13 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___16 = (void *)tmp___13;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___16) = 75U;
#line 85
  goto ldv_51944;
  case 2UL: 
#line 85
  put_unaligned_le16(75, __gu_p___16);
#line 85
  goto ldv_51944;
  case 4UL: 
#line 85
  put_unaligned_le32(75U, __gu_p___16);
#line 85
  goto ldv_51944;
  case 8UL: 
#line 85
  put_unaligned_le64(75ULL, __gu_p___16);
#line 85
  goto ldv_51944;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51944;
  }
  ldv_51944: 
#line 85
  tmp___14 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___17 = (void *)tmp___14;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___17) = 4U;
#line 85
  goto ldv_51951;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___17);
#line 85
  goto ldv_51951;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___17);
#line 85
  goto ldv_51951;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___17);
#line 85
  goto ldv_51951;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51951;
  }
  ldv_51951: 
#line 85
  __gu_p___18 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 85
  goto ldv_51958;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 85
  goto ldv_51958;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_51958;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_51958;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51958;
  }
  ldv_51958: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___15 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___19 = (void *)tmp___15;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___19) = 76U;
#line 85
  goto ldv_51965;
  case 2UL: 
#line 85
  put_unaligned_le16(76, __gu_p___19);
#line 85
  goto ldv_51965;
  case 4UL: 
#line 85
  put_unaligned_le32(76U, __gu_p___19);
#line 85
  goto ldv_51965;
  case 8UL: 
#line 85
  put_unaligned_le64(76ULL, __gu_p___19);
#line 85
  goto ldv_51965;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51965;
  }
  ldv_51965: 
#line 85
  tmp___16 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___20 = (void *)tmp___16;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___20) = 4U;
#line 85
  goto ldv_51972;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___20);
#line 85
  goto ldv_51972;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___20);
#line 85
  goto ldv_51972;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___20);
#line 85
  goto ldv_51972;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51972;
  }
  ldv_51972: 
#line 85
  __gu_p___21 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 85
  goto ldv_51979;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 85
  goto ldv_51979;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_51979;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_51979;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51979;
  }
  ldv_51979: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___17 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___22 = (void *)tmp___17;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___22) = 77U;
#line 85
  goto ldv_51986;
  case 2UL: 
#line 85
  put_unaligned_le16(77, __gu_p___22);
#line 85
  goto ldv_51986;
  case 4UL: 
#line 85
  put_unaligned_le32(77U, __gu_p___22);
#line 85
  goto ldv_51986;
  case 8UL: 
#line 85
  put_unaligned_le64(77ULL, __gu_p___22);
#line 85
  goto ldv_51986;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51986;
  }
  ldv_51986: 
#line 85
  tmp___18 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___23 = (void *)tmp___18;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___23) = 4U;
#line 85
  goto ldv_51993;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___23);
#line 85
  goto ldv_51993;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___23);
#line 85
  goto ldv_51993;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___23);
#line 85
  goto ldv_51993;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_51993;
  }
  ldv_51993: 
#line 85
  __gu_p___24 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 85
  goto ldv_52000;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 85
  goto ldv_52000;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_52000;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_52000;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52000;
  }
  ldv_52000: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___19 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___25 = (void *)tmp___19;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___25) = 78U;
#line 85
  goto ldv_52007;
  case 2UL: 
#line 85
  put_unaligned_le16(78, __gu_p___25);
#line 85
  goto ldv_52007;
  case 4UL: 
#line 85
  put_unaligned_le32(78U, __gu_p___25);
#line 85
  goto ldv_52007;
  case 8UL: 
#line 85
  put_unaligned_le64(78ULL, __gu_p___25);
#line 85
  goto ldv_52007;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52007;
  }
  ldv_52007: 
#line 85
  tmp___20 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___26 = (void *)tmp___20;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___26) = 4U;
#line 85
  goto ldv_52014;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___26);
#line 85
  goto ldv_52014;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___26);
#line 85
  goto ldv_52014;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___26);
#line 85
  goto ldv_52014;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52014;
  }
  ldv_52014: 
#line 85
  __gu_p___27 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 85
  goto ldv_52021;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 85
  goto ldv_52021;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52021;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52021;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52021;
  }
  ldv_52021: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___21 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___28 = (void *)tmp___21;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___28) = 79U;
#line 85
  goto ldv_52028;
  case 2UL: 
#line 85
  put_unaligned_le16(79, __gu_p___28);
#line 85
  goto ldv_52028;
  case 4UL: 
#line 85
  put_unaligned_le32(79U, __gu_p___28);
#line 85
  goto ldv_52028;
  case 8UL: 
#line 85
  put_unaligned_le64(79ULL, __gu_p___28);
#line 85
  goto ldv_52028;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52028;
  }
  ldv_52028: 
#line 85
  tmp___22 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___29 = (void *)tmp___22;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___29) = 4U;
#line 85
  goto ldv_52035;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___29);
#line 85
  goto ldv_52035;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___29);
#line 85
  goto ldv_52035;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___29);
#line 85
  goto ldv_52035;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52035;
  }
  ldv_52035: 
#line 85
  __gu_p___30 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 85
  goto ldv_52042;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 85
  goto ldv_52042;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52042;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52042;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52042;
  }
  ldv_52042: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___23 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___31 = (void *)tmp___23;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___31) = 80U;
#line 85
  goto ldv_52049;
  case 2UL: 
#line 85
  put_unaligned_le16(80, __gu_p___31);
#line 85
  goto ldv_52049;
  case 4UL: 
#line 85
  put_unaligned_le32(80U, __gu_p___31);
#line 85
  goto ldv_52049;
  case 8UL: 
#line 85
  put_unaligned_le64(80ULL, __gu_p___31);
#line 85
  goto ldv_52049;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52049;
  }
  ldv_52049: 
#line 85
  tmp___24 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___32 = (void *)tmp___24;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___32) = 4U;
#line 85
  goto ldv_52056;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___32);
#line 85
  goto ldv_52056;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___32);
#line 85
  goto ldv_52056;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___32);
#line 85
  goto ldv_52056;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52056;
  }
  ldv_52056: 
#line 85
  __gu_p___33 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 85
  goto ldv_52063;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 85
  goto ldv_52063;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52063;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52063;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52063;
  }
  ldv_52063: 
#line 85
  tags = tags + 4U;
#line 85
  return (tags);
}
}
#line 116
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 116 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 114
  tmp = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p = (void *)tmp;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p) = 33U;
#line 114
  goto ldv_52151;
  case 2UL: 
#line 114
  put_unaligned_le16(33, __gu_p);
#line 114
  goto ldv_52151;
  case 4UL: 
#line 114
  put_unaligned_le32(33U, __gu_p);
#line 114
  goto ldv_52151;
  case 8UL: 
#line 114
  put_unaligned_le64(33ULL, __gu_p);
#line 114
  goto ldv_52151;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52151;
  }
  ldv_52151: 
#line 114
  tmp___0 = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p___0 = (void *)tmp___0;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___0) = 4U;
#line 114
  goto ldv_52158;
  case 2UL: 
#line 114
  put_unaligned_le16(4, __gu_p___0);
#line 114
  goto ldv_52158;
  case 4UL: 
#line 114
  put_unaligned_le32(4U, __gu_p___0);
#line 114
  goto ldv_52158;
  case 8UL: 
#line 114
  put_unaligned_le64(4ULL, __gu_p___0);
#line 114
  goto ldv_52158;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52158;
  }
  ldv_52158: 
#line 114
  __gu_p___1 = (void *)tags;
#line 114
  switch (4UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 114
  goto ldv_52165;
  case 2UL: 
#line 114
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 114
  goto ldv_52165;
  case 4UL: 
#line 114
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52165;
  case 8UL: 
#line 114
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52165;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52165;
  }
  ldv_52165: 
#line 114
  tags = tags + 4U;
#line 114
  return (tags);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 190
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  struct task_struct *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 194
  envp[0] = (char *)"HOME=/";
#line 194
  envp[1] = (char *)"TERM=linux";
#line 194
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 194
  envp[3] = 0;
#line 194
  envp[4] = 0;
#line 194
  envp[5] = 0;
#line 202
  argv[0] = (char *)(& usermode_helper);
#line 202
  argv[1] = cmd;
#line 202
  argv[2] = (char *)(& mb);
#line 202
  argv[3] = 0;
#line 205
  tmp = get_current();
#line 205
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 206
    set_bit(30U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 208
  tmp___0 = mdev_to_minor(mdev);
#line 208
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp___0);
#line 210
  tmp___1 = get_net_conf(mdev);
#line 210
  if (tmp___1 != 0) {
#line 211
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 213
    afs = (char *)"ipv6";
#line 214
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 216
    goto ldv_52486;
    case 2: 
#line 218
    afs = (char *)"ipv4";
#line 219
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 221
    goto ldv_52486;
    default: 
#line 223
    afs = (char *)"ssocks";
#line 224
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_52486: 
#line 227
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 228
    envp[3] = (char *)(& af);
#line 229
    envp[4] = (char *)(& ad);
#line 230
    put_net_conf(mdev);
  } else {

  }
#line 235
  drbd_md_sync(mdev);
#line 237
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 239
  drbd_bcast_ev_helper(mdev, cmd);
#line 240
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 241
  if (ret != 0) {
#line 242
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 246
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 250
  tmp___2 = get_current();
#line 250
  if ((unsigned long )tmp___2 == (unsigned long )mdev->worker.task) {
#line 251
    clear_bit(30, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 253
  if (ret < 0) {
#line 254
    ret = 0;
  } else {

  }
#line 256
  return (ret);
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 266
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            266);
  } else {

  }
#line 268
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 268
  if (tmp != 0) {
#line 269
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 270
    put_ldev(mdev);
  } else {
#line 272
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 273
    nps = (enum drbd_disk_state )mdev->state.ldv_38802.pdsk;
#line 274
    goto out;
  }
#line 277
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 279
  switch ((r >> 8) & 255) {
  case 3: 
#line 281
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 282
  nps = D_INCONSISTENT;
#line 283
  goto ldv_52498;
  case 4: 
#line 285
  ex_to_string = (char *)"peer was fenced";
#line 286
  nps = D_OUTDATED;
#line 287
  goto ldv_52498;
  case 5: ;
#line 289
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 291
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 292
    nps = D_OUTDATED;
  } else {
#line 294
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 295
    nps = (enum drbd_disk_state )mdev->state.ldv_38802.pdsk;
  }
#line 297
  goto ldv_52498;
  case 6: 
#line 301
  ex_to_string = (char *)"peer is active";
#line 302
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 303
  nps = D_UNKNOWN;
#line 304
  val.i = 0U;
#line 304
  val.ldv_38802.disk = 5U;
#line 304
  mask.i = 0U;
#line 304
  mask.ldv_38802.disk = 15U;
#line 304
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 305
  goto ldv_52498;
  case 7: ;
#line 307
  if ((unsigned int )fp != 2U) {
#line 308
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 309
  ex_to_string = (char *)"peer was stonithed";
#line 310
  nps = D_OUTDATED;
#line 311
  goto ldv_52498;
  default: 
#line 314
  nps = D_UNKNOWN;
#line 315
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 316
  return (nps);
  }
  ldv_52498: 
#line 319
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 323
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 326
    val___0.i = 0U;
#line 326
    val___0.ldv_38802.susp_fen = 0U;
#line 326
    mask___0.i = 0U;
#line 326
    mask___0.ldv_38802.susp_fen = 1U;
#line 326
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 329
  return (nps);
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;
  int tmp ;

  {
#line 334
  mdev = (struct drbd_conf *)data;
#line 338
  nps = drbd_try_outdate_peer(mdev);
#line 351
  spin_lock_irq(& mdev->req_lock);
#line 352
  ns = mdev->state;
#line 353
  if ((int )ns.ldv_38802.conn <= 8) {
#line 353
    tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 353
    if (tmp == 0) {
#line 354
      ns.ldv_38802.pdsk = (unsigned char )nps;
#line 355
      _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
    } else {

    }
  } else {

  }
#line 357
  spin_unlock_irq(& mdev->req_lock);
#line 359
  return (0);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 366
  tmp = mdev_to_minor(mdev);
#line 366
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 366
  __k = tmp___0;
#line 366
  tmp___1 = IS_ERR((void const   *)__k);
#line 366
  if (tmp___1 == 0L) {
#line 366
    wake_up_process(__k);
  } else {

  }
#line 366
  opa = __k;
#line 367
  tmp___2 = IS_ERR((void const   *)opa);
#line 367
  if (tmp___2 != 0L) {
#line 368
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 369
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 374
  max_tries = 4;
#line 375
  rv = 0;
#line 376
  try = 0;
#line 377
  forced = 0;
#line 381
  if ((unsigned int )new_role == 1U) {
#line 382
    request_ping(mdev);
  } else {

  }
#line 384
  ldv_mutex_lock_199(& mdev->state_mutex);
#line 386
  mask.i = 0U;
#line 386
  mask.ldv_38802.role = 3U;
#line 387
  val.i = 0U;
#line 387
  val.ldv_38802.role = (unsigned char )new_role;
#line 389
  goto ldv_52536;
  ldv_52539: 
#line 390
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 394
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 395
    val.ldv_38802.pdsk = 0U;
#line 396
    mask.ldv_38802.pdsk = 0U;
#line 397
    goto ldv_52536;
  } else {

  }
#line 400
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_38802.disk <= 7 && (int )mdev->state.ldv_38802.disk > 3)) {
#line 403
    mask.ldv_38802.disk = 15U;
#line 404
    val.ldv_38802.disk = 8U;
#line 405
    forced = 1;
#line 406
    goto ldv_52536;
  } else {

  }
#line 409
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 411
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 411
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              411);
    } else {

    }
#line 412
    nps = drbd_try_outdate_peer(mdev);
#line 414
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 415
      val.ldv_38802.disk = 8U;
#line 416
      mask.ldv_38802.disk = 15U;
    } else {

    }
#line 419
    val.ldv_38802.pdsk = (unsigned char )nps;
#line 420
    mask.ldv_38802.pdsk = 15U;
#line 422
    goto ldv_52536;
  } else {

  }
#line 425
  if ((int )rv == 2) {
#line 426
    goto fail;
  } else {

  }
#line 427
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 428
    nps = drbd_try_outdate_peer(mdev);
#line 430
    if (force != 0 && (unsigned int )nps > 5U) {
#line 431
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 432
      nps = D_OUTDATED;
    } else {

    }
#line 435
    mask.ldv_38802.pdsk = 15U;
#line 436
    val.ldv_38802.pdsk = (unsigned char )nps;
#line 438
    goto ldv_52536;
  } else {

  }
#line 440
  if ((int )rv == -1) {
#line 443
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 444
    if (try < max_tries) {
#line 445
      try = max_tries + -1;
    } else {

    }
#line 446
    goto ldv_52536;
  } else {

  }
#line 448
  if ((int )rv <= 0) {
#line 449
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 451
    if ((int )rv <= 0) {
#line 452
      goto fail;
    } else {

    }
  } else {

  }
#line 454
  goto ldv_52538;
  ldv_52536: 
#line 389
  tmp = try;
#line 389
  try = try + 1;
#line 389
  if (tmp < max_tries) {
#line 390
    goto ldv_52539;
  } else {

  }
  ldv_52538: ;
#line 457
  if ((int )rv <= 0) {
#line 458
    goto fail;
  } else {

  }
#line 460
  if (forced != 0) {
#line 461
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 464
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 464
  if (tmp___0 == 0) {
#line 464
    goto ldv_52540;
  } else {

  }
#line 464
  tmp___1 = get_current();
#line 464
  __wait.flags = 0U;
#line 464
  __wait.private = (void *)tmp___1;
#line 464
  __wait.func = & autoremove_wake_function;
#line 464
  __wait.task_list.next = & __wait.task_list;
#line 464
  __wait.task_list.prev = & __wait.task_list;
  ldv_52543: 
#line 464
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 464
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 464
  if (tmp___2 == 0) {
#line 464
    goto ldv_52542;
  } else {

  }
#line 464
  schedule();
#line 464
  goto ldv_52543;
  ldv_52542: 
#line 464
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52540: ;
#line 466
  if ((unsigned int )new_role == 2U) {
#line 467
    set_disk_ro(mdev->vdisk, 1);
#line 468
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 468
    if (tmp___3 != 0) {
#line 469
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 470
      put_ldev(mdev);
    } else {

    }
  } else {
#line 473
    tmp___4 = get_net_conf(mdev);
#line 473
    if (tmp___4 != 0) {
#line 474
      (mdev->net_conf)->want_lose = 0U;
#line 475
      put_net_conf(mdev);
    } else {

    }
#line 477
    set_disk_ro(mdev->vdisk, 0);
#line 478
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 478
    if (tmp___5 != 0) {
#line 479
      if ((((int )mdev->state.ldv_38802.conn <= 9 || (int )mdev->state.ldv_38802.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 482
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 484
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 485
      put_ldev(mdev);
    } else {

    }
  }
#line 492
  if ((int )mdev->state.ldv_38802.conn > 8) {
#line 494
    if (forced != 0) {
#line 495
      drbd_send_uuids(mdev);
    } else {

    }
#line 496
    drbd_send_current_state(mdev);
  } else {

  }
#line 499
  drbd_md_sync(mdev);
#line 501
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 503
  ldv_mutex_unlock_200(& mdev->state_mutex);
#line 504
  return (rv);
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 511
  if ((unsigned int )minor >= minor_count) {
#line 512
    return (0);
  } else {

  }
#line 514
  mdev = minor_to_mdev((unsigned int )minor);
#line 516
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 517
    disk = 0;
#line 518
    mdev = drbd_new_device((unsigned int )minor);
#line 520
    spin_lock_irq(& drbd_pp_lock);
#line 521
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 522
      *(minor_table + (unsigned long )minor) = mdev;
#line 523
      disk = mdev->vdisk;
#line 524
      mdev = 0;
    } else {

    }
#line 526
    spin_unlock_irq(& drbd_pp_lock);
#line 528
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 531
      add_disk(disk);
    } else {
#line 533
      drbd_free_mdev(mdev);
    }
#line 535
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 538
  return (mdev);
}
}
#line 541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 546
  memset((void *)(& primary_args), 0, 4UL);
#line 547
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 547
  if (tmp == 0) {
#line 548
    reply->ret_code = 126;
#line 549
    return (0);
  } else {

  }
#line 552
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 552
  reply->ret_code = (int )tmp___0;
#line 555
  return (0);
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 561
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 561
  reply->ret_code = (int )tmp;
#line 563
  return (0);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 571
  md_size_sect = 0UL;
#line 572
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 575
  bdev->md.md_size_sect = 262144U;
#line 576
  tmp = drbd_md_ss__(mdev, bdev);
#line 576
  bdev->md.md_offset = (u64 )tmp;
#line 577
  bdev->md.al_offset = 8;
#line 578
  bdev->md.bm_offset = 72;
#line 579
  goto ldv_52567;
  case -2: 
#line 582
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 582
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 583
  bdev->md.md_offset = 0ULL;
#line 584
  bdev->md.al_offset = 8;
#line 585
  bdev->md.bm_offset = 72;
#line 586
  goto ldv_52567;
  case -1: ;
  case -3: 
#line 589
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 589
  bdev->md.md_offset = (u64 )tmp___1;
#line 591
  bdev->md.al_offset = -64;
#line 593
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 594
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 595
  md_size_sect = md_size_sect >> 15;
#line 596
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 600
  md_size_sect = md_size_sect + 72UL;
#line 602
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 604
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 605
  goto ldv_52567;
  }
  ldv_52567: ;
#line 608
  return;
}
}
#line 610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 614
  units[0] = 75;
#line 614
  units[1] = 77;
#line 614
  units[2] = 71;
#line 614
  units[3] = 84;
#line 614
  units[4] = 80;
#line 614
  units[5] = 69;
#line 615
  base = 0;
#line 616
  goto ldv_52578;
  ldv_52577: 
#line 618
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 619
  base = base + 1;
  ldv_52578: ;
#line 616
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 617
    goto ldv_52577;
  } else {

  }
#line 621
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 623
  return (buf);
}
}
#line 639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 641
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 642
  tmp = is_susp(mdev->state);
#line 642
  if (tmp != 0) {
#line 643
    return;
  } else {

  }
#line 644
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 644
  if (tmp___0 == 0) {
#line 644
    goto ldv_52583;
  } else {

  }
#line 644
  tmp___1 = get_current();
#line 644
  __wait.flags = 0U;
#line 644
  __wait.private = (void *)tmp___1;
#line 644
  __wait.func = & autoremove_wake_function;
#line 644
  __wait.task_list.next = & __wait.task_list;
#line 644
  __wait.task_list.prev = & __wait.task_list;
  ldv_52586: 
#line 644
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 644
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 644
  if (tmp___2 == 0) {
#line 644
    goto ldv_52585;
  } else {

  }
#line 644
  schedule();
#line 644
  goto ldv_52586;
  ldv_52585: 
#line 644
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52583: ;
#line 647
  return;
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 649
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 650
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 651
  return;
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 668
  rv = 0;
#line 679
  drbd_suspend_io(mdev);
#line 682
  tmp = lc_try_lock(mdev->act_log);
#line 682
  if (tmp != 0) {
#line 682
    goto ldv_52602;
  } else {

  }
#line 682
  tmp___0 = get_current();
#line 682
  __wait.flags = 0U;
#line 682
  __wait.private = (void *)tmp___0;
#line 682
  __wait.func = & autoremove_wake_function;
#line 682
  __wait.task_list.next = & __wait.task_list;
#line 682
  __wait.task_list.prev = & __wait.task_list;
  ldv_52605: 
#line 682
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 682
  tmp___1 = lc_try_lock(mdev->act_log);
#line 682
  if (tmp___1 != 0) {
#line 682
    goto ldv_52604;
  } else {

  }
#line 682
  schedule();
#line 682
  goto ldv_52605;
  ldv_52604: 
#line 682
  finish_wait(& mdev->al_wait, & __wait);
  ldv_52602: 
#line 684
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 685
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 686
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 689
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 691
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 693
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 693
  if (tmp___5 != size) {
#line 693
    goto _L;
  } else {
#line 693
    tmp___6 = drbd_bm_capacity(mdev);
#line 693
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 696
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 697
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 697
      if (tmp___3 != 0L) {
#line 699
        tmp___2 = drbd_bm_capacity(mdev);
#line 699
        size = tmp___2 >> 1;
#line 700
        if (size == 0UL) {
#line 701
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 704
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 708
        rv = dev_size_error;
      } else {

      }
#line 711
      drbd_set_my_capacity(mdev, size);
#line 712
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 713
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 713
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 716
  if ((int )rv == -1) {
#line 717
    goto out;
  } else {

  }
#line 719
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 721
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 721
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 724
  if (la_size_changed != 0 || md_moved != 0) {
#line 727
    drbd_al_shrink(mdev);
#line 728
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 732
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 734
    if (err___0 != 0) {
#line 735
      rv = dev_size_error;
#line 736
      goto out;
    } else {

    }
#line 738
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 741
  if (size > la_size) {
#line 742
    rv = grew;
  } else {

  }
#line 743
  if (size < la_size) {
#line 744
    rv = shrunk;
  } else {

  }
  out: 
#line 746
  lc_unlock(mdev->act_log);
#line 747
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 748
  drbd_resume_io(mdev);
#line 750
  return (rv);
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 756
  p_size = mdev->p_size;
#line 757
  la_size = (sector_t )bdev->md.la_size_sect;
#line 759
  u_size = (sector_t )bdev->dc.disk_size;
#line 760
  size = 0UL;
#line 762
  m_size = drbd_get_max_capacity___1(bdev);
#line 764
  if ((int )mdev->state.ldv_38802.conn <= 9 && assume_peer_has_space != 0) {
#line 765
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 766
    p_size = m_size;
  } else {

  }
#line 769
  if (p_size != 0UL && m_size != 0UL) {
#line 770
    __min1 = p_size;
#line 770
    __min2 = m_size;
#line 770
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 772
  if (la_size != 0UL) {
#line 773
    size = la_size;
#line 774
    if (m_size != 0UL && m_size < size) {
#line 775
      size = m_size;
    } else {

    }
#line 776
    if (p_size != 0UL && p_size < size) {
#line 777
      size = p_size;
    } else {

    }
  } else {
#line 779
    if (m_size != 0UL) {
#line 780
      size = m_size;
    } else {

    }
#line 781
    if (p_size != 0UL) {
#line 782
      size = p_size;
    } else {

    }
  }
#line 786
  if (size == 0UL) {
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 789
  if (u_size != 0UL) {
#line 790
    if (u_size > size) {
#line 791
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 794
      size = u_size;
    }
  } else {

  }
#line 797
  return (size);
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 815
  _b = mdev->sync_conf.al_extents <= 6;
#line 815
  if (_b != 0) {
#line 815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            815);
  } else {

  }
#line 815
  if (_b != 0) {
#line 816
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 818
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 820
    return (0);
  } else {

  }
#line 822
  in_use = 0U;
#line 823
  t = mdev->act_log;
#line 824
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 827
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 828
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 829
    return (-12);
  } else {

  }
#line 831
  spin_lock_irq(& mdev->al_lock);
#line 832
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 833
    i = 0;
#line 833
    goto ldv_52634;
    ldv_52633: 
#line 834
    e = lc_element_by_index(t, (unsigned int )i);
#line 835
    if (e->refcnt != 0U) {
#line 836
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 838
    in_use = e->refcnt + in_use;
#line 833
    i = i + 1;
    ldv_52634: ;
#line 833
    if ((unsigned int )i < t->nr_elements) {
#line 834
      goto ldv_52633;
    } else {

    }

  } else {

  }
#line 841
  if (in_use == 0U) {
#line 842
    mdev->act_log = n;
  } else {

  }
#line 843
  spin_unlock_irq(& mdev->al_lock);
#line 844
  if (in_use != 0U) {
#line 845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 846
    lc_destroy(n);
#line 847
    return (-16);
  } else
#line 849
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 850
    lc_destroy(t);
  } else {

  }
#line 852
  drbd_md_mark_dirty(mdev);
#line 853
  return (0);
}
}
#line 856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  unsigned int max_hw_sectors ;
  unsigned int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 858
  q = mdev->rq_queue;
#line 859
  max_hw_sectors = max_bio_size >> 9;
#line 860
  max_segments = 0U;
#line 862
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 862
  if (tmp___0 != 0) {
#line 863
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 865
    tmp = queue_max_hw_sectors(b);
#line 865
    _min1 = tmp;
#line 865
    _min2 = max_bio_size >> 9;
#line 865
    max_hw_sectors = _min1 < _min2 ? _min1 : _min2;
#line 866
    max_segments = (unsigned int )(mdev->ldev)->dc.max_bio_bvecs;
#line 867
    put_ldev(mdev);
  } else {

  }
#line 870
  blk_queue_logical_block_size(q, 512);
#line 871
  blk_queue_max_hw_sectors(q, max_hw_sectors);
#line 873
  blk_queue_max_segments(q, max_segments != 0U ? (int )((unsigned short )max_segments) : 128);
#line 874
  blk_queue_segment_boundary(q, 4095UL);
#line 876
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 876
  if (tmp___1 != 0) {
#line 877
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 879
    blk_queue_stack_limits(q, b___0);
#line 881
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 882
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 885
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 887
    put_ldev(mdev);
  } else {

  }
#line 889
  return;
}
}
#line 891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  unsigned int now ;
  unsigned int new ;
  unsigned int local ;
  unsigned int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;

  {
#line 895
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 895
  now = tmp << 9;
#line 896
  local = mdev->local_max_bio_size;
#line 897
  peer = mdev->peer_max_bio_size;
#line 899
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 899
  if (tmp___1 != 0) {
#line 900
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 900
    local = tmp___0 << 9;
#line 901
    mdev->local_max_bio_size = local;
#line 902
    put_ldev(mdev);
  } else {

  }
#line 904
  _min1 = local;
#line 904
  _min2 = 131072U;
#line 904
  local = _min1 < _min2 ? _min1 : _min2;
#line 909
  if ((int )mdev->state.ldv_38802.conn > 9) {
#line 910
    if (mdev->agreed_pro_version <= 93) {
#line 911
      _min1___0 = mdev->peer_max_bio_size;
#line 911
      _min2___0 = 32768U;
#line 911
      peer = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
    } else
#line 913
    if (mdev->agreed_pro_version == 94) {
#line 914
      peer = 32768U;
    } else {
#line 916
      peer = 131072U;
    }
  } else {

  }
#line 919
  _min1___1 = local;
#line 919
  _min2___1 = peer;
#line 919
  new = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 921
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%u < %u)\n",
            new, now);
  } else {

  }
#line 924
  if (new != now) {
#line 925
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 927
  drbd_setup_queue_param(mdev, new);
#line 928
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 939
  tmp = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 939
  if (tmp == 0) {
#line 939
    goto ldv_52667;
  } else {

  }
#line 939
  tmp___0 = get_current();
#line 939
  __wait.flags = 0U;
#line 939
  __wait.private = (void *)tmp___0;
#line 939
  __wait.func = & autoremove_wake_function;
#line 939
  __wait.task_list.next = & __wait.task_list;
#line 939
  __wait.task_list.prev = & __wait.task_list;
  ldv_52670: 
#line 939
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 939
  tmp___1 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 939
  if (tmp___1 == 0) {
#line 939
    goto ldv_52669;
  } else {

  }
#line 939
  schedule();
#line 939
  goto ldv_52670;
  ldv_52669: 
#line 939
  finish_wait(& mdev->state_wait, & __wait);
  ldv_52667: 
#line 940
  tmp___2 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 940
  if (tmp___2 == 0) {
#line 940
    goto ldv_52671;
  } else {

  }
#line 940
  tmp___3 = get_current();
#line 940
  __wait___0.flags = 0U;
#line 940
  __wait___0.private = (void *)tmp___3;
#line 940
  __wait___0.func = & autoremove_wake_function;
#line 940
  __wait___0.task_list.next = & __wait___0.task_list;
#line 940
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52674: 
#line 940
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 940
  tmp___4 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 940
  if (tmp___4 == 0) {
#line 940
    goto ldv_52673;
  } else {

  }
#line 940
  schedule();
#line 940
  goto ldv_52674;
  ldv_52673: 
#line 940
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_52671: 
#line 941
  drbd_thread_start(& mdev->worker);
#line 942
  drbd_flush_workqueue(mdev);
#line 943
  return;
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 950
  spin_lock_irq(& mdev->req_lock);
#line 951
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 954
    set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
#line 955
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 957
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  }
#line 958
  spin_unlock_irq(& mdev->req_lock);
#line 959
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 960
  return;
}
}
#line 963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 965
  s = 0;
#line 967
  tmp = lc_try_lock(mdev->act_log);
#line 967
  if (tmp != 0) {
#line 968
    drbd_al_shrink(mdev);
#line 969
    lc_unlock(mdev->act_log);
  } else {
#line 971
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 972
    return;
  }
#line 975
  spin_lock_irq(& mdev->req_lock);
#line 976
  if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 977
    tmp___0 = test_and_set_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 977
    s = tmp___0 == 0;
  } else {

  }
#line 979
  spin_unlock_irq(& mdev->req_lock);
#line 981
  if (s != 0) {
#line 982
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 983
  return;
}
}
#line 987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 994
  nbc = 0;
#line 996
  resync_lru = 0;
#line 999
  cp_discovered = 0;
#line 1002
  drbd_reconfig_start(mdev);
#line 1005
  if ((int )mdev->state.ldv_38802.disk > 0) {
#line 1006
    retcode = ERR_DISK_CONFIGURED;
#line 1007
    goto fail;
  } else {

  }
#line 1013
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1013
  if (tmp == 0) {
#line 1013
    goto ldv_52700;
  } else {

  }
#line 1013
  tmp___0 = get_current();
#line 1013
  __wait.flags = 0U;
#line 1013
  __wait.private = (void *)tmp___0;
#line 1013
  __wait.func = & autoremove_wake_function;
#line 1013
  __wait.task_list.next = & __wait.task_list;
#line 1013
  __wait.task_list.prev = & __wait.task_list;
  ldv_52703: 
#line 1013
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1013
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1013
  if (tmp___1 == 0) {
#line 1013
    goto ldv_52702;
  } else {

  }
#line 1013
  schedule();
#line 1013
  goto ldv_52703;
  ldv_52702: 
#line 1013
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52700: 
#line 1016
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1019
  mdev->rs_total = 0UL;
#line 1020
  mdev->rs_failed = 0UL;
#line 1021
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 1024
  tmp___2 = kzalloc(400UL, 208U);
#line 1024
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1025
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1026
    retcode = ERR_NOMEM;
#line 1027
    goto fail;
  } else {

  }
#line 1030
  nbc->dc.disk_size = 0ULL;
#line 1031
  nbc->dc.on_io_error = 0;
#line 1032
  nbc->dc.fencing = 0;
#line 1033
  nbc->dc.max_bio_bvecs = 0;
#line 1035
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1035
  if (tmp___3 == 0) {
#line 1036
    retcode = ERR_MANDATORY_TAG;
#line 1037
    goto fail;
  } else {

  }
#line 1040
  if (nbc->dc.meta_dev_idx < -3) {
#line 1041
    retcode = ERR_MD_IDX_INVALID;
#line 1042
    goto fail;
  } else {

  }
#line 1045
  tmp___4 = get_net_conf(mdev);
#line 1045
  if (tmp___4 != 0) {
#line 1046
    prot = (mdev->net_conf)->wire_protocol;
#line 1047
    put_net_conf(mdev);
#line 1048
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1049
      retcode = ERR_STONITH_AND_PROT_A;
#line 1050
      goto fail;
    } else {

    }
  } else {

  }
#line 1054
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1056
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1056
  if (tmp___6 != 0L) {
#line 1057
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1057
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1059
    retcode = ERR_OPEN_DISK;
#line 1060
    goto fail;
  } else {

  }
#line 1062
  nbc->backing_bdev = bdev;
#line 1072
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1076
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1076
  if (tmp___8 != 0L) {
#line 1077
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1077
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1079
    retcode = ERR_OPEN_MD_DISK;
#line 1080
    goto fail;
  } else {

  }
#line 1082
  nbc->md_bdev = bdev;
#line 1084
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1087
    retcode = ERR_MD_IDX_INVALID;
#line 1088
    goto fail;
  } else {

  }
#line 1091
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1094
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1095
    retcode = ERR_NOMEM;
#line 1096
    goto fail;
  } else {

  }
#line 1100
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1102
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1102
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1103
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1103
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1106
    retcode = ERR_DISK_TOO_SMALL;
#line 1107
    goto fail;
  } else {

  }
#line 1110
  if (nbc->dc.meta_dev_idx < 0) {
#line 1111
    max_possible_sectors = 2251799813685248UL;
#line 1113
    min_md_device_sectors = 2048UL;
  } else {
#line 1115
    max_possible_sectors = 8587575296UL;
#line 1116
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1119
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1119
  if (tmp___11 < min_md_device_sectors) {
#line 1120
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1121
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1124
    goto fail;
  } else {

  }
#line 1129
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1129
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1129
  if (tmp___12 < tmp___13) {
#line 1131
    retcode = ERR_DISK_TOO_SMALL;
#line 1132
    goto fail;
  } else {

  }
#line 1135
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1137
  if (nbc->known_size > max_possible_sectors) {
#line 1138
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1141
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1142
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1146
  drbd_suspend_io(mdev);
#line 1148
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1148
  if (tmp___14 == 0) {
#line 1148
    goto ldv_52705;
  } else {
#line 1148
    tmp___15 = is_susp(mdev->state);
#line 1148
    if (tmp___15 != 0) {
#line 1148
      goto ldv_52705;
    } else {

    }
  }
#line 1148
  tmp___16 = get_current();
#line 1148
  __wait___0.flags = 0U;
#line 1148
  __wait___0.private = (void *)tmp___16;
#line 1148
  __wait___0.func = & autoremove_wake_function;
#line 1148
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1148
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52708: 
#line 1148
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1148
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1148
  if (tmp___17 == 0) {
#line 1148
    goto ldv_52707;
  } else {
#line 1148
    tmp___18 = is_susp(mdev->state);
#line 1148
    if (tmp___18 != 0) {
#line 1148
      goto ldv_52707;
    } else {

    }
  }
#line 1148
  schedule();
#line 1148
  goto ldv_52708;
  ldv_52707: 
#line 1148
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_52705: 
#line 1150
  drbd_flush_workqueue(mdev);
#line 1152
  val.i = 0U;
#line 1152
  val.ldv_38802.disk = 1U;
#line 1152
  mask.i = 0U;
#line 1152
  mask.ldv_38802.disk = 15U;
#line 1152
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1153
  retcode = (enum drbd_ret_code )rv;
#line 1154
  drbd_resume_io(mdev);
#line 1155
  if ((int )rv <= 0) {
#line 1156
    goto fail;
  } else {

  }
#line 1158
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1158
  if (tmp___19 == 0) {
#line 1159
    goto force_diskless;
  } else {

  }
#line 1161
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1164
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1164
  logical_block_size = (int )tmp___20;
#line 1165
  if (logical_block_size == 0) {
#line 1166
    logical_block_size = 512;
  } else {

  }
#line 1168
  if (logical_block_size != 512) {
#line 1169
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1170
      tmp___21 = alloc_pages(16U, 0U);
#line 1170
      page = tmp___21;
#line 1171
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1172
        goto force_diskless_dec;
      } else {

      }
#line 1174
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1176
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1178
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1182
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1183
    tmp___22 = drbd_bm_init(mdev);
#line 1183
    if (tmp___22 != 0) {
#line 1184
      retcode = ERR_NOMEM;
#line 1185
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1189
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1189
  retcode = (enum drbd_ret_code )tmp___23;
#line 1190
  if ((unsigned int )retcode != 101U) {
#line 1191
    goto force_diskless_dec;
  } else {

  }
#line 1193
  if (((int )mdev->state.ldv_38802.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1198
    retcode = ERR_DATA_NOT_CURRENT;
#line 1199
    goto force_diskless_dec;
  } else {

  }
#line 1203
  tmp___24 = drbd_check_al_size(mdev);
#line 1203
  if (tmp___24 != 0) {
#line 1204
    retcode = ERR_NOMEM;
#line 1205
    goto force_diskless_dec;
  } else {

  }
#line 1209
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1209
  if (tmp___25 != 0) {
#line 1209
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1209
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1211
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1212
      retcode = ERR_DISK_TOO_SMALL;
#line 1213
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1216
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1216
  if (tmp___27 == 0) {
#line 1217
    retcode = ERR_IO_MD_DISK;
#line 1218
    goto force_diskless_dec;
  } else {

  }
#line 1223
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1224
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1226
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1232
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1232
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1232);
  } else {

  }
#line 1233
  mdev->ldev = nbc;
#line 1234
  mdev->resync = resync_lru;
#line 1235
  nbc = 0;
#line 1236
  resync_lru = 0;
#line 1238
  mdev->write_ordering = WO_bdev_flush;
#line 1239
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1241
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1241
  if (tmp___28 != 0) {
#line 1242
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1244
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1246
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1246
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1248
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 1249
    cp_discovered = 1;
  } else {

  }
#line 1252
  mdev->send_cnt = 0U;
#line 1253
  mdev->recv_cnt = 0U;
#line 1254
  mdev->read_cnt = 0U;
#line 1255
  mdev->writ_cnt = 0U;
#line 1257
  drbd_reconsider_max_bio_size(mdev);
#line 1273
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 1274
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1274
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1274
    if (tmp___30 != 0) {
#line 1274
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1274
      if (tmp___31 == 0) {
#line 1277
        set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1279
  dd = drbd_determine_dev_size(mdev, 0);
#line 1280
  if ((int )dd == -1) {
#line 1281
    retcode = ERR_NOMEM_BITMAP;
#line 1282
    goto force_diskless_dec;
  } else
#line 1283
  if ((int )dd == 2) {
#line 1284
    set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1286
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1286
  if (tmp___34 != 0) {
#line 1287
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1289
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1289
    if (tmp___32 != 0) {
#line 1291
      retcode = ERR_IO_MD_DISK;
#line 1292
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1295
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1295
    if (tmp___33 < 0) {
#line 1297
      retcode = ERR_IO_MD_DISK;
#line 1298
      goto force_diskless_dec;
    } else {

    }
  }
#line 1302
  if (cp_discovered != 0) {
#line 1303
    drbd_al_apply_to_bm(mdev);
#line 1304
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1304
    if (tmp___35 != 0) {
#line 1306
      retcode = ERR_IO_MD_DISK;
#line 1307
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1311
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1311
  tmp___37 = drbd_bm_bits(mdev);
#line 1311
  if (tmp___36 == tmp___37) {
#line 1312
    drbd_suspend_al(mdev);
  } else {

  }
#line 1314
  spin_lock_irq(& mdev->req_lock);
#line 1315
  os = mdev->state;
#line 1316
  ns.i = os.i;
#line 1322
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1322
  if (tmp___39 != 0) {
#line 1323
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1323
    if (tmp___38 != 0) {
#line 1324
      ns.ldv_38802.disk = 7U;
    } else {
#line 1326
      ns.ldv_38802.disk = 5U;
    }
  } else {
#line 1328
    ns.ldv_38802.disk = 4U;
  }
#line 1331
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1331
  if (tmp___40 != 0) {
#line 1332
    ns.ldv_38802.pdsk = 5U;
  } else {

  }
#line 1334
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1336
    ns.ldv_38802.disk = 8U;
  } else {

  }
#line 1345
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1346
    mdev->new_state_tmp.i = ns.i;
#line 1347
    ns.i = os.i;
#line 1348
    ns.ldv_38802.disk = 3U;
#line 1353
    kfree((void const   *)mdev->p_uuid);
#line 1354
    mdev->p_uuid = 0;
  } else {

  }
#line 1357
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1358
  ns = mdev->state;
#line 1359
  spin_unlock_irq(& mdev->req_lock);
#line 1361
  if ((int )rv <= 0) {
#line 1362
    goto force_diskless_dec;
  } else {

  }
#line 1364
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1365
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1367
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1369
  drbd_md_mark_dirty(mdev);
#line 1370
  drbd_md_sync(mdev);
#line 1372
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1373
  put_ldev(mdev);
#line 1374
  reply->ret_code = (int )retcode;
#line 1375
  drbd_reconfig_done(mdev);
#line 1376
  return (0);
  force_diskless_dec: 
#line 1379
  put_ldev(mdev);
  force_diskless: 
#line 1381
  val___0.i = 0U;
#line 1381
  val___0.ldv_38802.disk = 2U;
#line 1381
  mask___0.i = 0U;
#line 1381
  mask___0.ldv_38802.disk = 15U;
#line 1381
  drbd_force_state(mdev, mask___0, val___0);
#line 1382
  drbd_md_sync(mdev);
  fail: ;
#line 1384
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1385
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1386
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1388
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1389
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1391
    kfree((void const   *)nbc);
  } else {

  }
#line 1393
  lc_destroy(resync_lru);
#line 1395
  reply->ret_code = (int )retcode;
#line 1396
  drbd_reconfig_done(mdev);
#line 1397
  return (0);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  struct detach dt ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___0 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1410
  dt.detach_force = (unsigned char)0;
#line 1412
  tmp = detach_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dt);
#line 1412
  if (tmp == 0) {
#line 1413
    reply->ret_code = 126;
#line 1414
    goto out;
  } else {

  }
#line 1417
  if ((unsigned int )*((unsigned char *)(& dt) + 0UL) != 0U) {
#line 1418
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 1419
    val.i = 0U;
#line 1419
    val.ldv_38802.disk = 2U;
#line 1419
    mask.i = 0U;
#line 1419
    mask.ldv_38802.disk = 15U;
#line 1419
    drbd_force_state(mdev, mask, val);
#line 1420
    reply->ret_code = 1;
#line 1421
    goto out;
  } else {

  }
#line 1424
  drbd_suspend_io(mdev);
#line 1425
  drbd_md_get_buffer(mdev);
#line 1426
  val___0.i = 0U;
#line 1426
  val___0.ldv_38802.disk = 2U;
#line 1426
  mask___0.i = 0U;
#line 1426
  mask___0.ldv_38802.disk = 15U;
#line 1426
  tmp___0 = drbd_request_state(mdev, mask___0, val___0);
#line 1426
  retcode = (enum drbd_ret_code )tmp___0;
#line 1427
  drbd_md_put_buffer(mdev);
#line 1429
  __ret = 0;
#line 1429
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1429
    tmp___1 = get_current();
#line 1429
    __wait.flags = 0U;
#line 1429
    __wait.private = (void *)tmp___1;
#line 1429
    __wait.func = & autoremove_wake_function;
#line 1429
    __wait.task_list.next = & __wait.task_list;
#line 1429
    __wait.task_list.prev = & __wait.task_list;
    ldv_52741: 
#line 1429
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1429
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1429
      goto ldv_52739;
    } else {

    }
#line 1429
    tmp___2 = get_current();
#line 1429
    tmp___3 = signal_pending(tmp___2);
#line 1429
    if (tmp___3 == 0) {
#line 1429
      schedule();
#line 1429
      goto ldv_52740;
    } else {

    }
#line 1429
    __ret = -512;
#line 1429
    goto ldv_52739;
    ldv_52740: ;
#line 1429
    goto ldv_52741;
    ldv_52739: 
#line 1429
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1429
  ret = __ret;
#line 1431
  drbd_resume_io(mdev);
#line 1433
  if ((long )retcode == 4294967285L) {
#line 1434
    retcode = 2;
  } else {

  }
#line 1435
  if (ret != 0) {
#line 1436
    retcode = ERR_INTR;
  } else {

  }
#line 1437
  reply->ret_code = (int )retcode;
  out: ;
#line 1439
  return (0);
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1447
  new_conf = 0;
#line 1448
  tfm = 0;
#line 1449
  integrity_w_tfm = 0;
#line 1450
  integrity_r_tfm = 0;
#line 1451
  new_tl_hash = 0;
#line 1452
  new_ee_hash = 0;
#line 1455
  int_dig_out = 0;
#line 1456
  int_dig_in = 0;
#line 1457
  int_dig_vv = 0;
#line 1460
  drbd_reconfig_start(mdev);
#line 1462
  if ((int )mdev->state.ldv_38802.conn > 0) {
#line 1463
    retcode = ERR_NET_CONFIGURED;
#line 1464
    goto fail;
  } else {

  }
#line 1468
  tmp = kzalloc(544UL, 208U);
#line 1468
  new_conf = (struct net_conf *)tmp;
#line 1469
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1470
    retcode = ERR_NOMEM;
#line 1471
    goto fail;
  } else {

  }
#line 1474
  new_conf->timeout = 60;
#line 1475
  new_conf->try_connect_int = 10;
#line 1476
  new_conf->ping_int = 10;
#line 1477
  new_conf->max_epoch_size = 2048;
#line 1478
  new_conf->max_buffers = 2048;
#line 1479
  new_conf->unplug_watermark = 128;
#line 1480
  new_conf->sndbuf_size = 0;
#line 1481
  new_conf->rcvbuf_size = 0;
#line 1482
  new_conf->ko_count = 0;
#line 1483
  new_conf->after_sb_0p = 0;
#line 1484
  new_conf->after_sb_1p = 0;
#line 1485
  new_conf->after_sb_2p = 0;
#line 1486
  new_conf->want_lose = 0U;
#line 1487
  new_conf->two_primaries = 0U;
#line 1488
  new_conf->wire_protocol = 3;
#line 1489
  new_conf->ping_timeo = 5;
#line 1490
  new_conf->rr_conflict = 0;
#line 1491
  new_conf->on_congestion = 0;
#line 1492
  new_conf->cong_extents = 127;
#line 1494
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1494
  if (tmp___0 == 0) {
#line 1495
    retcode = ERR_MANDATORY_TAG;
#line 1496
    goto fail;
  } else {

  }
#line 1499
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1501
    retcode = ERR_NOT_PROTO_C;
#line 1502
    goto fail;
  } else {

  }
#line 1505
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1505
  if (tmp___1 != 0) {
#line 1506
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1507
    put_ldev(mdev);
#line 1508
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1509
      retcode = ERR_STONITH_AND_PROT_A;
#line 1510
      goto fail;
    } else {

    }
  } else {

  }
#line 1514
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1515
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1516
    goto fail;
  } else {

  }
#line 1519
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1520
    retcode = ERR_DISCARD;
#line 1521
    goto fail;
  } else {

  }
#line 1524
  retcode = NO_ERROR;
#line 1526
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1527
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1528
  i = 0;
#line 1528
  goto ldv_52769;
  ldv_52768: 
#line 1529
  odev = minor_to_mdev((unsigned int )i);
#line 1530
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1531
    goto ldv_52767;
  } else {

  }
#line 1532
  tmp___4 = get_net_conf(odev);
#line 1532
  if (tmp___4 != 0) {
#line 1533
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1534
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1534
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1534
      if (tmp___2 == 0) {
#line 1536
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1538
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1539
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1539
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1539
      if (tmp___3 == 0) {
#line 1541
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1543
    put_net_conf(odev);
#line 1544
    if ((unsigned int )retcode != 101U) {
#line 1545
      goto fail;
    } else {

    }
  } else {

  }
  ldv_52767: 
#line 1528
  i = i + 1;
  ldv_52769: ;
#line 1528
  if ((unsigned int )i < minor_count) {
#line 1529
    goto ldv_52768;
  } else {

  }

#line 1549
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1550
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1552
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1553
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1553
    if (tmp___5 != 0L) {
#line 1554
      tfm = 0;
#line 1555
      retcode = ERR_AUTH_ALG;
#line 1556
      goto fail;
    } else {

    }
#line 1559
    tmp___6 = crypto_hash_tfm(tfm);
#line 1559
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1559
    if (tmp___7 == 0) {
#line 1560
      retcode = ERR_AUTH_ALG_ND;
#line 1561
      goto fail;
    } else {

    }
  } else {

  }
#line 1565
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1566
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1567
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1567
    if (tmp___8 != 0L) {
#line 1568
      integrity_w_tfm = 0;
#line 1569
      retcode = ERR_INTEGRITY_ALG;
#line 1570
      goto fail;
    } else {

    }
#line 1573
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1573
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1573
    if (tmp___10 == 0) {
#line 1574
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1575
      goto fail;
    } else {

    }
#line 1578
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1579
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1579
    if (tmp___11 != 0L) {
#line 1580
      integrity_r_tfm = 0;
#line 1581
      retcode = ERR_INTEGRITY_ALG;
#line 1582
      goto fail;
    } else {

    }
  } else {

  }
#line 1586
  ns = new_conf->max_epoch_size / 8;
#line 1587
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1588
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1588
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1589
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1590
      retcode = ERR_NOMEM;
#line 1591
      goto fail;
    } else {

    }
  } else {

  }
#line 1595
  ns = new_conf->max_buffers / 8;
#line 1596
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1597
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1597
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1598
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1599
      retcode = ERR_NOMEM;
#line 1600
      goto fail;
    } else {

    }
  } else {

  }
#line 1604
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1606
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1607
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1607
    i = (int )tmp___14;
#line 1608
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1609
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1610
      retcode = ERR_NOMEM;
#line 1611
      goto fail;
    } else {

    }
#line 1613
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1614
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1615
      retcode = ERR_NOMEM;
#line 1616
      goto fail;
    } else {

    }
#line 1618
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1619
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1620
      retcode = ERR_NOMEM;
#line 1621
      goto fail;
    } else {

    }
  } else {

  }
#line 1625
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1626
    tmp___15 = drbd_bm_init(mdev);
#line 1626
    if (tmp___15 != 0) {
#line 1627
      retcode = ERR_NOMEM;
#line 1628
      goto fail;
    } else {

    }
  } else {

  }
#line 1632
  drbd_flush_workqueue(mdev);
#line 1633
  spin_lock_irq(& mdev->req_lock);
#line 1634
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1635
    retcode = ERR_NET_CONFIGURED;
#line 1636
    spin_unlock_irq(& mdev->req_lock);
#line 1637
    goto fail;
  } else {

  }
#line 1639
  mdev->net_conf = new_conf;
#line 1641
  mdev->send_cnt = 0U;
#line 1642
  mdev->recv_cnt = 0U;
#line 1644
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1645
    kfree((void const   *)mdev->tl_hash);
#line 1646
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1647
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1650
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1651
    kfree((void const   *)mdev->ee_hash);
#line 1652
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1653
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1656
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1657
  mdev->cram_hmac_tfm = tfm;
#line 1659
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1660
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1662
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1663
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1665
  kfree((void const   *)mdev->int_dig_out);
#line 1666
  kfree((void const   *)mdev->int_dig_in);
#line 1667
  kfree((void const   *)mdev->int_dig_vv);
#line 1668
  mdev->int_dig_out = int_dig_out;
#line 1669
  mdev->int_dig_in = int_dig_in;
#line 1670
  mdev->int_dig_vv = int_dig_vv;
#line 1671
  __ns.i = mdev->state.i;
#line 1671
  __ns.ldv_38802.conn = 2U;
#line 1671
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1671
  retcode = (enum drbd_ret_code )tmp___16;
#line 1672
  spin_unlock_irq(& mdev->req_lock);
#line 1674
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1675
  reply->ret_code = (int )retcode;
#line 1676
  drbd_reconfig_done(mdev);
#line 1677
  return (0);
  fail: 
#line 1680
  kfree((void const   *)int_dig_out);
#line 1681
  kfree((void const   *)int_dig_in);
#line 1682
  kfree((void const   *)int_dig_vv);
#line 1683
  crypto_free_hash(tfm);
#line 1684
  crypto_free_hash(integrity_w_tfm);
#line 1685
  crypto_free_hash(integrity_r_tfm);
#line 1686
  kfree((void const   *)new_tl_hash);
#line 1687
  kfree((void const   *)new_ee_hash);
#line 1688
  kfree((void const   *)new_conf);
#line 1690
  reply->ret_code = (int )retcode;
#line 1691
  drbd_reconfig_done(mdev);
#line 1692
  return (0);
}
}
#line 1695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1701
  memset((void *)(& dc), 0, 4UL);
#line 1702
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1702
  if (tmp == 0) {
#line 1703
    retcode = 126;
#line 1704
    goto fail;
  } else {

  }
#line 1707
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1708
    spin_lock_irq(& mdev->req_lock);
#line 1709
    if ((int )mdev->state.ldv_38802.conn > 7) {
#line 1710
      __ns.i = mdev->state.i;
#line 1710
      __ns.ldv_38802.conn = 1U;
#line 1710
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1711
    spin_unlock_irq(& mdev->req_lock);
#line 1712
    goto done;
  } else {

  }
#line 1715
  val.i = 0U;
#line 1715
  val.ldv_38802.conn = 1U;
#line 1715
  mask.i = 0U;
#line 1715
  mask.ldv_38802.conn = 31U;
#line 1715
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1715
  retcode = (int )tmp___0;
#line 1717
  if (retcode == 2) {
#line 1718
    goto done;
  } else
#line 1719
  if (retcode == -9) {
#line 1720
    goto done;
  } else
#line 1721
  if (retcode == -7) {
#line 1724
    val___0.i = 0U;
#line 1724
    val___0.ldv_38802.conn = 1U;
#line 1724
    val___0.ldv_38802.pdsk = 5U;
#line 1723
    mask___0.i = 0U;
#line 1723
    mask___0.ldv_38802.conn = 31U;
#line 1724
    mask___0.ldv_38802.pdsk = 15U;
#line 1724
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1725
  if (retcode == -10) {
#line 1728
    val___1.i = 0U;
#line 1728
    val___1.ldv_38802.conn = 1U;
#line 1728
    val___1.ldv_38802.disk = 5U;
#line 1727
    mask___1.i = 0U;
#line 1727
    mask___1.ldv_38802.conn = 31U;
#line 1728
    mask___1.ldv_38802.disk = 15U;
#line 1728
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1728
    retcode = (int )tmp___1;
#line 1730
    if (retcode == -11 || retcode == -16) {
#line 1731
      val___2.i = 0U;
#line 1731
      val___2.ldv_38802.conn = 1U;
#line 1731
      mask___2.i = 0U;
#line 1731
      mask___2.ldv_38802.conn = 31U;
#line 1731
      drbd_force_state(mdev, mask___2, val___2);
#line 1732
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1736
  if (retcode <= 0) {
#line 1737
    goto fail;
  } else {

  }
#line 1739
  __ret = 0;
#line 1739
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1739
    tmp___2 = get_current();
#line 1739
    __wait.flags = 0U;
#line 1739
    __wait.private = (void *)tmp___2;
#line 1739
    __wait.func = & autoremove_wake_function;
#line 1739
    __wait.task_list.next = & __wait.task_list;
#line 1739
    __wait.task_list.prev = & __wait.task_list;
    ldv_52804: 
#line 1739
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1739
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1739
      goto ldv_52802;
    } else {

    }
#line 1739
    tmp___3 = get_current();
#line 1739
    tmp___4 = signal_pending(tmp___3);
#line 1739
    if (tmp___4 == 0) {
#line 1739
      schedule();
#line 1739
      goto ldv_52803;
    } else {

    }
#line 1739
    __ret = -512;
#line 1739
    goto ldv_52802;
    ldv_52803: ;
#line 1739
    goto ldv_52804;
    ldv_52802: 
#line 1739
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1739
  if (__ret != 0) {
#line 1743
    retcode = 129;
#line 1744
    goto fail;
  } else {

  }
  done: 
#line 1748
  retcode = 101;
  fail: 
#line 1750
  drbd_md_sync(mdev);
#line 1751
  reply->ret_code = retcode;
#line 1752
  return (0);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1759
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1760
  if ((int )mdev->state.ldv_38802.role != (int )mdev->state.ldv_38802.peer) {
#line 1761
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1763
    iass = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1765
  if (iass != 0) {
#line 1766
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1768
    val.i = 0U;
#line 1768
    val.ldv_38802.conn = 15U;
#line 1768
    mask.i = 0U;
#line 1768
    mask.ldv_38802.conn = 31U;
#line 1768
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1770
  return;
}
}
#line 1771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1775
  retcode = 101;
#line 1779
  memset((void *)(& rs), 0, 16UL);
#line 1780
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1780
  if (tmp == 0) {
#line 1781
    retcode = 126;
#line 1782
    goto fail;
  } else {

  }
#line 1785
  if ((int )mdev->state.ldv_38802.conn > 10) {
#line 1786
    retcode = 130;
#line 1787
    goto fail;
  } else {

  }
#line 1790
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1792
    retcode = 131;
#line 1793
    goto fail;
  } else {

  }
#line 1796
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1796
  if (tmp___0 == 0) {
#line 1797
    retcode = 138;
#line 1798
    goto fail;
  } else {

  }
#line 1801
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1802
    retcode = 153;
#line 1803
    goto fail_ldev;
  } else {

  }
#line 1806
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1806
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1807
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1809
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1810
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1811
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1812
  drbd_md_sync(mdev);
#line 1813
  put_ldev(mdev);
#line 1814
  if ((int )dd == -1) {
#line 1815
    retcode = 140;
#line 1816
    goto fail;
  } else {

  }
#line 1819
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1820
    if ((int )dd == 2) {
#line 1821
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1823
    drbd_send_uuids(mdev);
#line 1824
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1828
  reply->ret_code = retcode;
#line 1829
  return (0);
  fail_ldev: 
#line 1832
  put_ldev(mdev);
#line 1833
  goto fail;
}
}
#line 1836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1839
  retcode = 101;
#line 1843
  verify_tfm = 0;
#line 1844
  csums_tfm = 0;
#line 1847
  rs_plan_s = 0;
#line 1850
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1850
  if (tmp) {
#line 1850
    tmp___0 = 0;
  } else {
#line 1850
    tmp___0 = 1;
  }
#line 1850
  if (tmp___0) {
#line 1851
    retcode = 122;
#line 1852
    goto fail;
  } else {

  }
#line 1855
  if ((nlp->flags & 2) != 0) {
#line 1856
    memset((void *)(& sc), 0, 212UL);
#line 1857
    sc.rate = 250;
#line 1858
    sc.after = -1;
#line 1859
    sc.al_extents = 127;
#line 1860
    sc.on_no_data = 0;
#line 1861
    sc.c_plan_ahead = 0;
#line 1862
    sc.c_delay_target = 10;
#line 1863
    sc.c_fill_target = 0;
#line 1864
    sc.c_max_rate = 102400;
#line 1865
    sc.c_min_rate = 4096;
  } else {
#line 1867
    __len = 212UL;
#line 1867
    if (__len > 63UL) {
#line 1867
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1867
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1869
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1869
  if (tmp___1 == 0) {
#line 1870
    retcode = 126;
#line 1871
    goto fail;
  } else {

  }
#line 1875
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1880
  if (rsr != 0) {
#line 1880
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1880
    if (tmp___2 != 0) {
#line 1881
      retcode = 148;
#line 1882
      goto fail;
    } else {

    }
  } else {

  }
#line 1885
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1886
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1887
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1887
    if (tmp___3 != 0L) {
#line 1888
      csums_tfm = 0;
#line 1889
      retcode = 144;
#line 1890
      goto fail;
    } else {

    }
#line 1893
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1893
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1893
    if (tmp___5 == 0) {
#line 1894
      retcode = 145;
#line 1895
      goto fail;
    } else {

    }
  } else {

  }
#line 1900
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1902
  if (ovr != 0) {
#line 1903
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1903
    if (tmp___6 != 0) {
#line 1904
      retcode = 149;
#line 1905
      goto fail;
    } else {

    }
  } else {

  }
#line 1909
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1910
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1911
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1911
    if (tmp___7 != 0L) {
#line 1912
      verify_tfm = 0;
#line 1913
      retcode = 146;
#line 1914
      goto fail;
    } else {

    }
#line 1917
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1917
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1917
    if (tmp___9 == 0) {
#line 1918
      retcode = 147;
#line 1919
      goto fail;
    } else {

    }
  } else {

  }
#line 1924
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1925
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1927
    if (err != 0) {
#line 1928
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1929
      retcode = 143;
#line 1930
      goto fail;
    } else {

    }
  } else {

  }
#line 1934
  _b = sc.rate <= 0;
#line 1934
  if (_b != 0) {
#line 1934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1934);
  } else {

  }
#line 1934
  if (_b != 0) {
#line 1934
    sc.rate = 1;
  } else {

  }
#line 1935
  _b___0 = sc.al_extents <= 6;
#line 1935
  if (_b___0 != 0) {
#line 1935
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1935);
  } else {

  }
#line 1935
  if (_b___0 != 0) {
#line 1935
    sc.al_extents = 127;
  } else {

  }
#line 1937
  if (sc.al_extents > 3843) {
#line 1938
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1939
    sc.al_extents = 3843;
  } else {

  }
#line 1946
  if (sc.after >= 0) {
#line 1947
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1952
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1953
  if (retcode != 101) {
#line 1954
    goto fail;
  } else {

  }
#line 1956
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1957
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1958
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1958
    rs_plan_s = (int *)tmp___10;
#line 1959
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1960
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1961
      retcode = 122;
#line 1962
      goto fail;
    } else {

    }
  } else {

  }
#line 1968
  spin_lock(& mdev->peer_seq_lock);
#line 1969
  mdev->sync_conf = sc;
#line 1971
  if (rsr == 0) {
#line 1972
    crypto_free_hash(mdev->csums_tfm);
#line 1973
    mdev->csums_tfm = csums_tfm;
#line 1974
    csums_tfm = 0;
  } else {

  }
#line 1977
  if (ovr == 0) {
#line 1978
    crypto_free_hash(mdev->verify_tfm);
#line 1979
    mdev->verify_tfm = verify_tfm;
#line 1980
    verify_tfm = 0;
  } else {

  }
#line 1983
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1984
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1985
    mdev->rs_plan_s.values = rs_plan_s;
#line 1986
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1987
    mdev->rs_planed = 0;
#line 1988
    rs_plan_s = 0;
  } else {

  }
#line 1991
  spin_unlock(& mdev->peer_seq_lock);
#line 1993
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1993
  if (tmp___14 != 0) {
#line 1994
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1994
    if (tmp___11 != 0) {
#line 1994
      goto ldv_52849;
    } else {

    }
#line 1994
    tmp___12 = get_current();
#line 1994
    __wait.flags = 0U;
#line 1994
    __wait.private = (void *)tmp___12;
#line 1994
    __wait.func = & autoremove_wake_function;
#line 1994
    __wait.task_list.next = & __wait.task_list;
#line 1994
    __wait.task_list.prev = & __wait.task_list;
    ldv_52852: 
#line 1994
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1994
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1994
    if (tmp___13 != 0) {
#line 1994
      goto ldv_52851;
    } else {

    }
#line 1994
    schedule();
#line 1994
    goto ldv_52852;
    ldv_52851: 
#line 1994
    finish_wait(& mdev->al_wait, & __wait);
    ldv_52849: 
#line 1995
    drbd_al_shrink(mdev);
#line 1996
    err = drbd_check_al_size(mdev);
#line 1997
    lc_unlock(mdev->act_log);
#line 1998
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 2000
    put_ldev(mdev);
#line 2001
    drbd_md_sync(mdev);
#line 2003
    if (err != 0) {
#line 2004
      retcode = 122;
#line 2005
      goto fail;
    } else {

    }
  } else {

  }
#line 2009
  if ((int )mdev->state.ldv_38802.conn > 9) {
#line 2010
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 2012
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2012
  if (tmp___15) {
#line 2012
    tmp___16 = 0;
  } else {
#line 2012
    tmp___16 = 1;
  }
#line 2012
  if (tmp___16) {
#line 2013
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2014
    drbd_calc_cpu_mask(mdev);
#line 2015
    mdev->receiver.reset_cpu_mask = 1;
#line 2016
    mdev->asender.reset_cpu_mask = 1;
#line 2017
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 2020
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 2022
  kfree((void const   *)rs_plan_s);
#line 2023
  free_cpumask_var(new_cpu_mask);
#line 2024
  crypto_free_hash(csums_tfm);
#line 2025
  crypto_free_hash(verify_tfm);
#line 2026
  reply->ret_code = retcode;
#line 2027
  return (0);
}
}
#line 2030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2038
  drbd_suspend_io(mdev);
#line 2039
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2039
  if (tmp == 0) {
#line 2039
    goto ldv_52859;
  } else {

  }
#line 2039
  tmp___0 = get_current();
#line 2039
  __wait.flags = 0U;
#line 2039
  __wait.private = (void *)tmp___0;
#line 2039
  __wait.func = & autoremove_wake_function;
#line 2039
  __wait.task_list.next = & __wait.task_list;
#line 2039
  __wait.task_list.prev = & __wait.task_list;
  ldv_52862: 
#line 2039
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2039
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2039
  if (tmp___1 == 0) {
#line 2039
    goto ldv_52861;
  } else {

  }
#line 2039
  schedule();
#line 2039
  goto ldv_52862;
  ldv_52861: 
#line 2039
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52859: 
#line 2040
  drbd_flush_workqueue(mdev);
#line 2042
  val.i = 0U;
#line 2042
  val.ldv_38802.conn = 12U;
#line 2042
  mask.i = 0U;
#line 2042
  mask.ldv_38802.conn = 31U;
#line 2042
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2042
  retcode = (int )tmp___2;
#line 2044
  if (retcode <= 0 && retcode != -15) {
#line 2045
    val___0.i = 0U;
#line 2045
    val___0.ldv_38802.conn = 12U;
#line 2045
    mask___0.i = 0U;
#line 2045
    mask___0.ldv_38802.conn = 31U;
#line 2045
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2047
  goto ldv_52879;
  ldv_52878: 
#line 2048
  spin_lock_irq(& mdev->req_lock);
#line 2049
  if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 2050
    __ns.i = mdev->state.i;
#line 2050
    __ns.ldv_38802.disk = 4U;
#line 2050
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2050
    retcode = (int )tmp___3;
  } else {

  }
#line 2051
  spin_unlock_irq(& mdev->req_lock);
#line 2053
  if (retcode != -15) {
#line 2054
    goto ldv_52873;
  } else {

  }
#line 2056
  val___1.i = 0U;
#line 2056
  val___1.ldv_38802.conn = 12U;
#line 2056
  mask___1.i = 0U;
#line 2056
  mask___1.ldv_38802.conn = 31U;
#line 2056
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_52879: ;
#line 2047
  if (retcode == -15) {
#line 2048
    goto ldv_52878;
  } else {

  }
  ldv_52873: 
#line 2058
  drbd_resume_io(mdev);
#line 2060
  reply->ret_code = retcode;
#line 2061
  return (0);
}
}
#line 2064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2068
  rv = drbd_bmio_set_n_write(mdev);
#line 2069
  drbd_suspend_al(mdev);
#line 2070
  return (rv);
}
}
#line 2073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2081
  drbd_suspend_io(mdev);
#line 2082
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2082
  if (tmp == 0) {
#line 2082
    goto ldv_52890;
  } else {

  }
#line 2082
  tmp___0 = get_current();
#line 2082
  __wait.flags = 0U;
#line 2082
  __wait.private = (void *)tmp___0;
#line 2082
  __wait.func = & autoremove_wake_function;
#line 2082
  __wait.task_list.next = & __wait.task_list;
#line 2082
  __wait.task_list.prev = & __wait.task_list;
  ldv_52893: 
#line 2082
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2082
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2082
  if (tmp___1 == 0) {
#line 2082
    goto ldv_52892;
  } else {

  }
#line 2082
  schedule();
#line 2082
  goto ldv_52893;
  ldv_52892: 
#line 2082
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52890: 
#line 2083
  drbd_flush_workqueue(mdev);
#line 2085
  val.i = 0U;
#line 2085
  val.ldv_38802.conn = 11U;
#line 2085
  mask.i = 0U;
#line 2085
  mask.ldv_38802.conn = 31U;
#line 2085
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2085
  retcode = (int )tmp___2;
#line 2087
  if (retcode <= 0) {
#line 2088
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2091
      val___0.i = 0U;
#line 2091
      val___0.ldv_38802.pdsk = 4U;
#line 2091
      mask___0.i = 0U;
#line 2091
      mask___0.ldv_38802.pdsk = 15U;
#line 2091
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2092
      if (retcode > 0) {
#line 2093
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2093
        if (tmp___3 != 0) {
#line 2096
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2099
      val___1.i = 0U;
#line 2099
      val___1.ldv_38802.conn = 11U;
#line 2099
      mask___1.i = 0U;
#line 2099
      mask___1.ldv_38802.conn = 31U;
#line 2099
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2101
  drbd_resume_io(mdev);
#line 2103
  reply->ret_code = retcode;
#line 2104
  return (0);
}
}
#line 2107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2110
  retcode = 101;
#line 2112
  val.i = 0U;
#line 2112
  val.ldv_38802.user_isp = 1U;
#line 2112
  mask.i = 0U;
#line 2112
  mask.ldv_38802.user_isp = 1U;
#line 2112
  tmp = drbd_request_state(mdev, mask, val);
#line 2112
  if (tmp == 2) {
#line 2113
    retcode = 134;
  } else {

  }
#line 2115
  reply->ret_code = retcode;
#line 2116
  return (0);
}
}
#line 2119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2122
  retcode = 101;
#line 2125
  val.i = 0U;
#line 2125
  val.ldv_38802.user_isp = 0U;
#line 2125
  mask.i = 0U;
#line 2125
  mask.ldv_38802.user_isp = 1U;
#line 2125
  tmp = drbd_request_state(mdev, mask, val);
#line 2125
  if (tmp == 2) {
#line 2126
    s = mdev->state;
#line 2127
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2128
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2131
      retcode = 135;
    }
  } else {

  }
#line 2135
  reply->ret_code = retcode;
#line 2136
  return (0);
}
}
#line 2139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2142
  val.i = 0U;
#line 2142
  val.ldv_38802.susp = 1U;
#line 2142
  mask.i = 0U;
#line 2142
  mask.ldv_38802.susp = 1U;
#line 2142
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2144
  return (0);
}
}
#line 2147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2150
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 2150
  if (tmp != 0) {
#line 2151
    drbd_uuid_new_current(mdev);
#line 2152
    clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2154
  drbd_suspend_io(mdev);
#line 2155
  val.i = 0U;
#line 2155
  val.ldv_38802.susp = 0U;
#line 2155
  val.ldv_38802.susp_nod = 0U;
#line 2155
  val.ldv_38802.susp_fen = 0U;
#line 2155
  mask.i = 0U;
#line 2155
  mask.ldv_38802.susp = 1U;
#line 2155
  mask.ldv_38802.susp_nod = 1U;
#line 2155
  mask.ldv_38802.susp_fen = 1U;
#line 2155
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2156
  if (reply->ret_code == 1) {
#line 2157
    if ((int )mdev->state.ldv_38802.conn <= 9) {
#line 2158
      tl_clear(mdev);
    } else {

    }
#line 2159
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2160
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2162
  drbd_resume_io(mdev);
#line 2164
  return (0);
}
}
#line 2167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2170
  val.i = 0U;
#line 2170
  val.ldv_38802.disk = 5U;
#line 2170
  mask.i = 0U;
#line 2170
  mask.ldv_38802.disk = 15U;
#line 2170
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2171
  return (0);
}
}
#line 2174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2179
  tl = (unsigned short *)(& reply->tag_list);
#line 2181
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2181
  if (tmp != 0) {
#line 2182
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2183
    put_ldev(mdev);
  } else {

  }
#line 2186
  tmp___0 = get_net_conf(mdev);
#line 2186
  if (tmp___0 != 0) {
#line 2187
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2188
    put_net_conf(mdev);
  } else {

  }
#line 2190
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2192
  tmp___1 = tl;
#line 2192
  tl = tl + 1;
#line 2192
  __gu_p = (void *)tmp___1;
#line 2192
  switch (2UL) {
  case 1UL: 
#line 2192
  *((u8 *)__gu_p) = 0U;
#line 2192
  goto ldv_52962;
  case 2UL: 
#line 2192
  put_unaligned_le16(0, __gu_p);
#line 2192
  goto ldv_52962;
  case 4UL: 
#line 2192
  put_unaligned_le32(0U, __gu_p);
#line 2192
  goto ldv_52962;
  case 8UL: 
#line 2192
  put_unaligned_le64(0ULL, __gu_p);
#line 2192
  goto ldv_52962;
  default: 
#line 2192
  __bad_unaligned_access_size();
#line 2192
  goto ldv_52962;
  }
  ldv_52962: ;
#line 2194
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2200
  tl = (unsigned short *)(& reply->tag_list);
#line 2201
  s = mdev->state;
#line 2205
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2208
  if ((int )s.ldv_38802.conn > 15 && (int )s.ldv_38802.conn <= 21) {
#line 2209
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2209
    if (tmp != 0) {
#line 2210
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2211
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2212
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2215
  tmp___0 = tl;
#line 2215
  tl = tl + 1;
#line 2215
  __gu_p = (void *)tmp___0;
#line 2215
  switch (2UL) {
  case 1UL: 
#line 2215
  *((u8 *)__gu_p) = 0U;
#line 2215
  goto ldv_52978;
  case 2UL: 
#line 2215
  put_unaligned_le16(0, __gu_p);
#line 2215
  goto ldv_52978;
  case 4UL: 
#line 2215
  put_unaligned_le32(0U, __gu_p);
#line 2215
  goto ldv_52978;
  case 8UL: 
#line 2215
  put_unaligned_le64(0ULL, __gu_p);
#line 2215
  goto ldv_52978;
  default: 
#line 2215
  __bad_unaligned_access_size();
#line 2215
  goto ldv_52978;
  }
  ldv_52978: ;
#line 2217
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2225
  tl = (unsigned short *)(& reply->tag_list);
#line 2227
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2227
  if (tmp != 0) {
#line 2228
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2229
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2230
    put_ldev(mdev);
  } else {

  }
#line 2232
  tmp___0 = tl;
#line 2232
  tl = tl + 1;
#line 2232
  __gu_p = (void *)tmp___0;
#line 2232
  switch (2UL) {
  case 1UL: 
#line 2232
  *((u8 *)__gu_p) = 0U;
#line 2232
  goto ldv_52991;
  case 2UL: 
#line 2232
  put_unaligned_le16(0, __gu_p);
#line 2232
  goto ldv_52991;
  case 4UL: 
#line 2232
  put_unaligned_le32(0U, __gu_p);
#line 2232
  goto ldv_52991;
  case 8UL: 
#line 2232
  put_unaligned_le64(0ULL, __gu_p);
#line 2232
  goto ldv_52991;
  default: 
#line 2232
  __bad_unaligned_access_size();
#line 2232
  goto ldv_52991;
  }
  ldv_52991: ;
#line 2234
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2249
  tl = (unsigned short *)(& reply->tag_list);
#line 2251
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2251
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2251
    rv = tmp != 0;
  } else {
#line 2251
    rv = 2;
  }
#line 2254
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2255
  tmp___0 = tl;
#line 2255
  tl = tl + 1;
#line 2255
  __gu_p = (void *)tmp___0;
#line 2255
  switch (2UL) {
  case 1UL: 
#line 2255
  *((u8 *)__gu_p) = 0U;
#line 2255
  goto ldv_53005;
  case 2UL: 
#line 2255
  put_unaligned_le16(0, __gu_p);
#line 2255
  goto ldv_53005;
  case 4UL: 
#line 2255
  put_unaligned_le32(0U, __gu_p);
#line 2255
  goto ldv_53005;
  case 8UL: 
#line 2255
  put_unaligned_le64(0ULL, __gu_p);
#line 2255
  goto ldv_53005;
  default: 
#line 2255
  __bad_unaligned_access_size();
#line 2255
  goto ldv_53005;
  }
  ldv_53005: ;
#line 2257
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2264
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2267
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2267
  if (tmp == 0) {
#line 2268
    reply->ret_code = 126;
#line 2269
    return (0);
  } else {

  }
#line 2274
  drbd_suspend_io(mdev);
#line 2275
  tmp___0 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2275
  if (tmp___0 == 0) {
#line 2275
    goto ldv_53016;
  } else {

  }
#line 2275
  tmp___1 = get_current();
#line 2275
  __wait.flags = 0U;
#line 2275
  __wait.private = (void *)tmp___1;
#line 2275
  __wait.func = & autoremove_wake_function;
#line 2275
  __wait.task_list.next = & __wait.task_list;
#line 2275
  __wait.task_list.prev = & __wait.task_list;
  ldv_53019: 
#line 2275
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2275
  tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2275
  if (tmp___2 == 0) {
#line 2275
    goto ldv_53018;
  } else {

  }
#line 2275
  schedule();
#line 2275
  goto ldv_53019;
  ldv_53018: 
#line 2275
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53016: 
#line 2278
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2279
  val.i = 0U;
#line 2279
  val.ldv_38802.conn = 18U;
#line 2279
  mask.i = 0U;
#line 2279
  mask.ldv_38802.conn = 31U;
#line 2279
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2280
  drbd_resume_io(mdev);
#line 2281
  return (0);
}
}
#line 2285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2288
  retcode = 101;
#line 2289
  skip_initial_sync = 0;
#line 2294
  memset((void *)(& args), 0, 4UL);
#line 2295
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2295
  if (tmp == 0) {
#line 2296
    reply->ret_code = 126;
#line 2297
    return (0);
  } else {

  }
#line 2300
  ldv_mutex_lock_201(& mdev->state_mutex);
#line 2302
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2302
  if (tmp___0 == 0) {
#line 2303
    retcode = 138;
#line 2304
    goto out;
  } else {

  }
#line 2308
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2310
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2311
    skip_initial_sync = 1;
  } else
#line 2312
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2313
    retcode = 151;
#line 2314
    goto out_dec;
  } else {

  }
#line 2317
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2318
  drbd_uuid_new_current(mdev);
#line 2320
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2321
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2323
    if (err != 0) {
#line 2324
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2325
      retcode = 118;
    } else {

    }
#line 2327
    if (skip_initial_sync != 0) {
#line 2328
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2329
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2330
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2331
      spin_lock_irq(& mdev->req_lock);
#line 2332
      __ns.i = mdev->state.i;
#line 2332
      __ns.ldv_38802.disk = 8U;
#line 2332
      __ns.ldv_38802.pdsk = 8U;
#line 2332
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2334
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2338
  drbd_md_sync(mdev);
  out_dec: 
#line 2340
  put_ldev(mdev);
  out: 
#line 2342
  ldv_mutex_unlock_202(& mdev->state_mutex);
#line 2344
  reply->ret_code = retcode;
#line 2345
  return (0);
}
}
#line 2355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2355
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1320}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 2388
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2394
  reply_size = 34;
#line 2398
  tmp = try_module_get(& __this_module);
#line 2398
  if (tmp) {
#line 2398
    tmp___0 = 0;
  } else {
#line 2398
    tmp___0 = 1;
  }
#line 2398
  if (tmp___0) {
#line 2399
    printk("<3>drbd: try_module_get() failed!\n");
#line 2400
    return;
  } else {

  }
#line 2403
  tmp___1 = capable(21);
#line 2403
  if (tmp___1) {
#line 2403
    tmp___2 = 0;
  } else {
#line 2403
    tmp___2 = 1;
  }
#line 2403
  if (tmp___2) {
#line 2404
    retcode = 152;
#line 2405
    goto fail;
  } else {

  }
#line 2408
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2410
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2411
    retcode = 127;
#line 2412
    goto fail;
  } else {

  }
#line 2415
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2417
    retcode = 137;
#line 2418
    goto fail;
  } else {

  }
#line 2421
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2424
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2425
    retcode = 137;
#line 2426
    goto fail;
  } else {

  }
#line 2429
  reply_size = cm->reply_body_size + reply_size;
#line 2432
  tmp___3 = kzalloc((size_t )reply_size, 208U);
#line 2432
  cn_reply = (struct cn_msg *)tmp___3;
#line 2433
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2434
    retcode = 122;
#line 2435
    goto fail;
  } else {

  }
#line 2437
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2439
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2441
  reply->minor = nlp->drbd_minor;
#line 2442
  reply->ret_code = 101;
#line 2445
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2447
  cn_reply->id = req->id;
#line 2448
  cn_reply->seq = req->seq;
#line 2449
  cn_reply->ack = req->ack + 1U;
#line 2450
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2451
  cn_reply->flags = 0U;
#line 2453
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2454
  if (rr != 0 && rr != -3) {
#line 2455
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2457
  kfree((void const   *)cn_reply);
#line 2458
  module_put(& __this_module);
#line 2459
  return;
  fail: 
#line 2461
  drbd_nl_send_reply(req, retcode);
#line 2462
  module_put(& __this_module);
#line 2463
  return;
}
}
#line 2465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2471
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2472
  len = (int )len < (int )l ? len : l;
#line 2473
  tmp = tl;
#line 2473
  tl = tl + 1;
#line 2473
  __gu_p = (void *)tmp;
#line 2473
  switch (2UL) {
  case 1UL: 
#line 2473
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2473
  goto ldv_53068;
  case 2UL: 
#line 2473
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2473
  goto ldv_53068;
  case 4UL: 
#line 2473
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2473
  goto ldv_53068;
  case 8UL: 
#line 2473
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2473
  goto ldv_53068;
  default: 
#line 2473
  __bad_unaligned_access_size();
#line 2473
  goto ldv_53068;
  }
  ldv_53068: 
#line 2474
  tmp___0 = tl;
#line 2474
  tl = tl + 1;
#line 2474
  __gu_p___0 = (void *)tmp___0;
#line 2474
  switch (2UL) {
  case 1UL: 
#line 2474
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2474
  goto ldv_53075;
  case 2UL: 
#line 2474
  put_unaligned_le16((int )len, __gu_p___0);
#line 2474
  goto ldv_53075;
  case 4UL: 
#line 2474
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2474
  goto ldv_53075;
  case 8UL: 
#line 2474
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2474
  goto ldv_53075;
  default: 
#line 2474
  __bad_unaligned_access_size();
#line 2474
  goto ldv_53075;
  }
  ldv_53075: 
#line 2475
  __len = (size_t )len;
#line 2475
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2476
  tl = tl + (unsigned long )len;
#line 2477
  if (nul_terminated != 0) {
#line 2478
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2479
  return (tl);
}
}
#line 2483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2485
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2485
  return (tmp);
}
}
#line 2489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2491
  tmp = strlen(str);
#line 2491
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2491
  return (tmp___0);
}
}
#line 2495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2497
  tmp = tl;
#line 2497
  tl = tl + 1;
#line 2497
  __gu_p = (void *)tmp;
#line 2497
  switch (2UL) {
  case 1UL: 
#line 2497
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2497
  goto ldv_53101;
  case 2UL: 
#line 2497
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2497
  goto ldv_53101;
  case 4UL: 
#line 2497
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2497
  goto ldv_53101;
  case 8UL: 
#line 2497
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2497
  goto ldv_53101;
  default: 
#line 2497
  __bad_unaligned_access_size();
#line 2497
  goto ldv_53101;
  }
  ldv_53101: ;
#line 2498
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2500
  tmp___0 = tl;
#line 2500
  tl = tl + 1;
#line 2500
  __gu_p___0 = (void *)tmp___0;
#line 2500
  switch (2UL) {
  case 1UL: 
#line 2500
  *((u8 *)__gu_p___0) = 4U;
#line 2500
  goto ldv_53109;
  case 2UL: 
#line 2500
  put_unaligned_le16(4, __gu_p___0);
#line 2500
  goto ldv_53109;
  case 4UL: 
#line 2500
  put_unaligned_le32(4U, __gu_p___0);
#line 2500
  goto ldv_53109;
  case 8UL: 
#line 2500
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2500
  goto ldv_53109;
  default: 
#line 2500
  __bad_unaligned_access_size();
#line 2500
  goto ldv_53109;
  }
  ldv_53109: 
#line 2501
  __gu_p___1 = (void *)tl;
#line 2501
  switch (4UL) {
  case 1UL: 
#line 2501
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2501
  goto ldv_53116;
  case 2UL: 
#line 2501
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2501
  goto ldv_53116;
  case 4UL: 
#line 2501
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2501
  goto ldv_53116;
  case 8UL: 
#line 2501
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2501
  goto ldv_53116;
  default: 
#line 2501
  __bad_unaligned_access_size();
#line 2501
  goto ldv_53116;
  }
  ldv_53116: 
#line 2502
  tl = tl + 4U;
#line 2503
  goto ldv_53121;
  case 16384U: 
#line 2505
  tmp___1 = tl;
#line 2505
  tl = tl + 1;
#line 2505
  __gu_p___2 = (void *)tmp___1;
#line 2505
  switch (2UL) {
  case 1UL: 
#line 2505
  *((u8 *)__gu_p___2) = 8U;
#line 2505
  goto ldv_53125;
  case 2UL: 
#line 2505
  put_unaligned_le16(8, __gu_p___2);
#line 2505
  goto ldv_53125;
  case 4UL: 
#line 2505
  put_unaligned_le32(8U, __gu_p___2);
#line 2505
  goto ldv_53125;
  case 8UL: 
#line 2505
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2505
  goto ldv_53125;
  default: 
#line 2505
  __bad_unaligned_access_size();
#line 2505
  goto ldv_53125;
  }
  ldv_53125: 
#line 2506
  __gu_p___3 = (void *)tl;
#line 2506
  switch (8UL) {
  case 1UL: 
#line 2506
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2506
  goto ldv_53132;
  case 2UL: 
#line 2506
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2506
  goto ldv_53132;
  case 4UL: 
#line 2506
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2506
  goto ldv_53132;
  case 8UL: 
#line 2506
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2506
  goto ldv_53132;
  default: 
#line 2506
  __bad_unaligned_access_size();
#line 2506
  goto ldv_53132;
  }
  ldv_53132: 
#line 2507
  tl = tl + 8U;
#line 2508
  goto ldv_53121;
  default: ;
  }
  ldv_53121: ;
#line 2513
  return (tl);
}
}
#line 2516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2522
  cn_reply = (struct cn_msg *)(& buffer);
#line 2523
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2525
  tl = (unsigned short *)(& reply->tag_list);
#line 2529
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2531
  tmp = tl;
#line 2531
  tl = tl + 1;
#line 2531
  __gu_p = (void *)tmp;
#line 2531
  switch (2UL) {
  case 1UL: 
#line 2531
  *((u8 *)__gu_p) = 0U;
#line 2531
  goto ldv_53148;
  case 2UL: 
#line 2531
  put_unaligned_le16(0, __gu_p);
#line 2531
  goto ldv_53148;
  case 4UL: 
#line 2531
  put_unaligned_le32(0U, __gu_p);
#line 2531
  goto ldv_53148;
  case 8UL: 
#line 2531
  put_unaligned_le64(0ULL, __gu_p);
#line 2531
  goto ldv_53148;
  default: 
#line 2531
  __bad_unaligned_access_size();
#line 2531
  goto ldv_53148;
  }
  ldv_53148: 
#line 2533
  cn_reply->id.idx = 8U;
#line 2534
  cn_reply->id.val = 1U;
#line 2536
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2536
  cn_reply->seq = (__u32 )tmp___0;
#line 2537
  cn_reply->ack = 0U;
#line 2538
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2540
  cn_reply->flags = 0U;
#line 2542
  reply->packet_type = 17;
#line 2543
  reply->minor = mdev_to_minor(mdev);
#line 2544
  reply->ret_code = 101;
#line 2546
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2547
  return;
}
}
#line 2549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2555
  cn_reply = (struct cn_msg *)(& buffer);
#line 2556
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2558
  tl = (unsigned short *)(& reply->tag_list);
#line 2562
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2563
  tmp = tl;
#line 2563
  tl = tl + 1;
#line 2563
  __gu_p = (void *)tmp;
#line 2563
  switch (2UL) {
  case 1UL: 
#line 2563
  *((u8 *)__gu_p) = 0U;
#line 2563
  goto ldv_53163;
  case 2UL: 
#line 2563
  put_unaligned_le16(0, __gu_p);
#line 2563
  goto ldv_53163;
  case 4UL: 
#line 2563
  put_unaligned_le32(0U, __gu_p);
#line 2563
  goto ldv_53163;
  case 8UL: 
#line 2563
  put_unaligned_le64(0ULL, __gu_p);
#line 2563
  goto ldv_53163;
  default: 
#line 2563
  __bad_unaligned_access_size();
#line 2563
  goto ldv_53163;
  }
  ldv_53163: 
#line 2565
  cn_reply->id.idx = 8U;
#line 2566
  cn_reply->id.val = 1U;
#line 2568
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2568
  cn_reply->seq = (__u32 )tmp___0;
#line 2569
  cn_reply->ack = 0U;
#line 2570
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2572
  cn_reply->flags = 0U;
#line 2574
  reply->packet_type = 20;
#line 2575
  reply->minor = mdev_to_minor(mdev);
#line 2576
  reply->ret_code = 101;
#line 2578
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2579
  return;
}
}
#line 2581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2592
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2593
    return;
  } else {

  }
#line 2594
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2595
    return;
  } else {

  }
#line 2603
  tmp = kzalloc(33026UL, 16U);
#line 2603
  cn_reply = (struct cn_msg *)tmp;
#line 2610
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2613
    return;
  } else {

  }
#line 2616
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2617
  tl = (unsigned short *)(& reply->tag_list);
#line 2619
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2620
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2621
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2622
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2623
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_47580.block_id));
#line 2626
  __min1 = e->size;
#line 2626
  __min2 = 32768U;
#line 2626
  len = __min1 < __min2 ? __min1 : __min2;
#line 2627
  tmp___0 = tl;
#line 2627
  tl = tl + 1;
#line 2627
  __gu_p = (void *)tmp___0;
#line 2627
  switch (2UL) {
  case 1UL: 
#line 2627
  *((u8 *)__gu_p) = 50U;
#line 2627
  goto ldv_53186;
  case 2UL: 
#line 2627
  put_unaligned_le16(49202, __gu_p);
#line 2627
  goto ldv_53186;
  case 4UL: 
#line 2627
  put_unaligned_le32(49202U, __gu_p);
#line 2627
  goto ldv_53186;
  case 8UL: 
#line 2627
  put_unaligned_le64(49202ULL, __gu_p);
#line 2627
  goto ldv_53186;
  default: 
#line 2627
  __bad_unaligned_access_size();
#line 2627
  goto ldv_53186;
  }
  ldv_53186: 
#line 2628
  tmp___1 = tl;
#line 2628
  tl = tl + 1;
#line 2628
  __gu_p___0 = (void *)tmp___1;
#line 2628
  switch (2UL) {
  case 1UL: 
#line 2628
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2628
  goto ldv_53193;
  case 2UL: 
#line 2628
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2628
  goto ldv_53193;
  case 4UL: 
#line 2628
  put_unaligned_le32(len, __gu_p___0);
#line 2628
  goto ldv_53193;
  case 8UL: 
#line 2628
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2628
  goto ldv_53193;
  default: 
#line 2628
  __bad_unaligned_access_size();
#line 2628
  goto ldv_53193;
  }
  ldv_53193: 
#line 2630
  page = e->pages;
#line 2631
  goto ldv_53209;
  ldv_53208: 
#line 2632
  tmp___2 = kmap_atomic___0(page);
#line 2632
  d = tmp___2;
#line 2633
  __min1___0 = len;
#line 2633
  __min2___0 = 4096U;
#line 2633
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2634
  __len = (size_t )l;
#line 2634
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2635
  __kunmap_atomic___0(d);
#line 2636
  tl = tl + (unsigned long )l;
#line 2637
  len = len - l;
#line 2638
  if (len == 0U) {
#line 2639
    goto ldv_53207;
  } else {

  }
#line 2631
  page = page_chain_next(page);
  ldv_53209: ;
#line 2631
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2631
    tmp___3 = page_chain_next(page);
#line 2631
    __builtin_prefetch((void const   *)tmp___3);
#line 2631
    if (1 != 0) {
#line 2632
      goto ldv_53208;
    } else {
#line 2634
      goto ldv_53207;
    }
  } else {

  }
  ldv_53207: 
#line 2641
  tmp___4 = tl;
#line 2641
  tl = tl + 1;
#line 2641
  __gu_p___1 = (void *)tmp___4;
#line 2641
  switch (2UL) {
  case 1UL: 
#line 2641
  *((u8 *)__gu_p___1) = 0U;
#line 2641
  goto ldv_53212;
  case 2UL: 
#line 2641
  put_unaligned_le16(0, __gu_p___1);
#line 2641
  goto ldv_53212;
  case 4UL: 
#line 2641
  put_unaligned_le32(0U, __gu_p___1);
#line 2641
  goto ldv_53212;
  case 8UL: 
#line 2641
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2641
  goto ldv_53212;
  default: 
#line 2641
  __bad_unaligned_access_size();
#line 2641
  goto ldv_53212;
  }
  ldv_53212: 
#line 2643
  cn_reply->id.idx = 8U;
#line 2644
  cn_reply->id.val = 1U;
#line 2646
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2646
  cn_reply->seq = (__u32 )tmp___5;
#line 2647
  cn_reply->ack = 0U;
#line 2648
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2650
  cn_reply->flags = 0U;
#line 2652
  reply->packet_type = 24;
#line 2653
  reply->minor = mdev_to_minor(mdev);
#line 2654
  reply->ret_code = 101;
#line 2656
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2657
  kfree((void const   *)cn_reply);
#line 2658
  return;
}
}
#line 2660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2666
  cn_reply = (struct cn_msg *)(& buffer);
#line 2667
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2669
  tl = (unsigned short *)(& reply->tag_list);
#line 2674
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2674
  if (tmp == 0) {
#line 2675
    return;
  } else {

  }
#line 2676
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2677
  put_ldev(mdev);
#line 2679
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2680
  tmp___0 = tl;
#line 2680
  tl = tl + 1;
#line 2680
  __gu_p = (void *)tmp___0;
#line 2680
  switch (2UL) {
  case 1UL: 
#line 2680
  *((u8 *)__gu_p) = 0U;
#line 2680
  goto ldv_53228;
  case 2UL: 
#line 2680
  put_unaligned_le16(0, __gu_p);
#line 2680
  goto ldv_53228;
  case 4UL: 
#line 2680
  put_unaligned_le32(0U, __gu_p);
#line 2680
  goto ldv_53228;
  case 8UL: 
#line 2680
  put_unaligned_le64(0ULL, __gu_p);
#line 2680
  goto ldv_53228;
  default: 
#line 2680
  __bad_unaligned_access_size();
#line 2680
  goto ldv_53228;
  }
  ldv_53228: 
#line 2682
  cn_reply->id.idx = 8U;
#line 2683
  cn_reply->id.val = 1U;
#line 2685
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2685
  cn_reply->seq = (__u32 )tmp___1;
#line 2686
  cn_reply->ack = 0U;
#line 2687
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2689
  cn_reply->flags = 0U;
#line 2691
  reply->packet_type = 23;
#line 2692
  reply->minor = mdev_to_minor(mdev);
#line 2693
  reply->ret_code = 101;
#line 2695
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2696
  return;
}
}
#line 2698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2701
  try = 10;
#line 2703
  cn_id_drbd.val = 1U;
  ldv_53240: 
#line 2705
  cn_id_drbd.idx = cn_idx;
#line 2706
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2707
  if (err == 0) {
#line 2708
    goto ldv_53239;
  } else {

  }
#line 2709
  cn_idx = cn_idx + 6977U;
#line 2710
  tmp = try;
#line 2710
  try = try - 1;
#line 2710
  if (tmp != 0) {
#line 2711
    goto ldv_53240;
  } else {

  }
  ldv_53239: ;
#line 2712
  if (err != 0) {
#line 2713
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2714
    return (err);
  } else {

  }
#line 2717
  return (0);
}
}
#line 2720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2724
  cn_id_drbd.idx = cn_idx;
#line 2725
  cn_id_drbd.val = 1U;
#line 2727
  cn_del_callback(& cn_id_drbd);
#line 2728
  return;
}
}
#line 2730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2733
  cn_reply = (struct cn_msg *)(& buffer);
#line 2734
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2738
  memset((void *)(& buffer), 0, 32UL);
#line 2739
  cn_reply->id = req->id;
#line 2741
  cn_reply->seq = req->seq;
#line 2742
  cn_reply->ack = req->ack + 1U;
#line 2743
  cn_reply->len = 12U;
#line 2744
  cn_reply->flags = 0U;
#line 2746
  reply->packet_type = 27;
#line 2747
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2748
  reply->ret_code = ret_code;
#line 2750
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2751
  if (rr != 0 && rr != -3) {
#line 2752
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2753
  return;
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2760
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2762
  mutex_lock(ldv_func_arg1);
#line 2763
  return;
}
}
#line 2765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_192(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2770
  tmp = mutex_trylock(ldv_func_arg1);
#line 2770
  ldv_func_res = tmp;
#line 2772
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2772
  return (tmp___0);
#line 2774
  return (ldv_func_res);
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2782
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2784
  mutex_unlock(ldv_func_arg1);
#line 2785
  return;
}
}
#line 2787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2792
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2794
  mutex_lock(ldv_func_arg1);
#line 2795
  return;
}
}
#line 2797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2802
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2804
  mutex_unlock(ldv_func_arg1);
#line 2805
  return;
}
}
#line 2807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_196(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2812
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2814
  mutex_lock(ldv_func_arg1);
#line 2815
  return;
}
}
#line 2817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2822
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2824
  mutex_unlock(ldv_func_arg1);
#line 2825
  return;
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_198(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2832
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2834
  mutex_unlock(ldv_func_arg1);
#line 2835
  return;
}
}
#line 2837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_199(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2842
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2844
  mutex_lock(ldv_func_arg1);
#line 2845
  return;
}
}
#line 2847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_200(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2852
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2854
  mutex_unlock(ldv_func_arg1);
#line 2855
  return;
}
}
#line 2857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2862
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2864
  mutex_lock(ldv_func_arg1);
#line 2865
  return;
}
}
#line 2867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_202(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2872
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2874
  mutex_unlock(ldv_func_arg1);
#line 2875
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_drbd_main_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_drbd_main_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_drbd_main_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_drbd_main_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_drbd_main_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_drbd_main_mutex = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 929
  ldv_mutex_drbd_main_mutex = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
