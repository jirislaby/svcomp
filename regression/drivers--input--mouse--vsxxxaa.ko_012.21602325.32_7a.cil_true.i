/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 111 "include/linux/kernel.h"
struct pt_regs;
#line 210
struct pid;
#line 679
struct task_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct raw_spinlock;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct kmem_cache;
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 634 "include/linux/list.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_25 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_26 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_26 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_27 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_27 rwlock_t;
#line 48
struct thread_info;
#line 48 "include/linux/spinlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5563_29 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_30 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_31 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_32 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5586_28 {
   struct __anonstruct_ldv_5563_29 ldv_5563 ;
   struct __anonstruct_futex_30 futex ;
   struct __anonstruct_nanosleep_31 nanosleep ;
   struct __anonstruct_poll_32 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5586_28 ldv_5586 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 267 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 643 "include/linux/mmzone.h"
struct rw_semaphore;
#line 645 "include/linux/mmzone.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 165 "include/linux/ioport.h"
struct device;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 253 "include/linux/timer.h"
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 45 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 46 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 215
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 225
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 232
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 239 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 406
struct kobject;
#line 407 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10108_109 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10108_109 ldv_10108 ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 306 "include/linux/rcupdate.h"
struct tracepoint;
#line 307 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 79 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 57 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 67 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 100 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 70
struct exception_table_entry;
#line 179
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 185
struct module_sect_attrs;
#line 185
struct module_notes_attrs;
#line 185
struct ftrace_event_call;
#line 185 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 542
struct device_driver;
#line 715
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 32 "include/linux/input.h"
struct input_id {
   __u16 bustype ;
   __u16 vendor ;
   __u16 product ;
   __u16 version ;
};
#line 58 "include/linux/input.h"
struct ff_replay {
   __u16 length ;
   __u16 delay ;
};
#line 792 "include/linux/input.h"
struct ff_trigger {
   __u16 button ;
   __u16 interval ;
};
#line 802 "include/linux/input.h"
struct ff_envelope {
   __u16 attack_length ;
   __u16 attack_level ;
   __u16 fade_length ;
   __u16 fade_level ;
};
#line 821 "include/linux/input.h"
struct ff_constant_effect {
   __s16 level ;
   struct ff_envelope envelope ;
};
#line 831 "include/linux/input.h"
struct ff_ramp_effect {
   __s16 start_level ;
   __s16 end_level ;
   struct ff_envelope envelope ;
};
#line 843 "include/linux/input.h"
struct ff_condition_effect {
   __u16 right_saturation ;
   __u16 left_saturation ;
   __s16 right_coeff ;
   __s16 left_coeff ;
   __u16 deadband ;
   __s16 center ;
};
#line 864 "include/linux/input.h"
struct ff_periodic_effect {
   __u16 waveform ;
   __u16 period ;
   __s16 magnitude ;
   __s16 offset ;
   __u16 phase ;
   struct ff_envelope envelope ;
   __u32 custom_len ;
   __s16 *custom_data ;
};
#line 895 "include/linux/input.h"
struct ff_rumble_effect {
   __u16 strong_magnitude ;
   __u16 weak_magnitude ;
};
#line 908 "include/linux/input.h"
union __anonunion_u_112 {
   struct ff_constant_effect constant ;
   struct ff_ramp_effect ramp ;
   struct ff_periodic_effect periodic ;
   struct ff_condition_effect condition[2U] ;
   struct ff_rumble_effect rumble ;
};
#line 908 "include/linux/input.h"
struct ff_effect {
   __u16 type ;
   __s16 id ;
   __u16 direction ;
   struct ff_trigger trigger ;
   struct ff_replay replay ;
   union __anonunion_u_112 u ;
};
#line 947
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 151 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 181
struct class_attribute;
#line 181 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 208
struct device_type;
#line 247 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 279 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 306 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 367 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 376
struct dma_coherent_mem;
#line 376 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 394 "include/linux/rculist.h"
struct nameidata;
#line 395
struct path;
#line 396
struct vfsmount;
#line 397 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct inode;
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_113 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_113 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 193
struct prio_tree_node;
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 570 "include/linux/capability.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct iovec;
#line 41
struct kiocb;
#line 42
struct pipe_inode_info;
#line 43
struct poll_table_struct;
#line 44
struct kstatfs;
#line 45
struct cred;
#line 413 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 472 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 117 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 150 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 186 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 208
struct quota_format_type;
#line 209 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 251 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 279 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 293 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 319 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 334 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 401
struct address_space;
#line 402
struct writeback_control;
#line 562 "include/linux/fs.h"
union __anonunion_arg_116 {
   char *buf ;
   void *data ;
};
#line 562 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_115 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_116 arg ;
   int error ;
};
#line 562 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_115 read_descriptor_t;
#line 565 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 614
struct backing_dev_info;
#line 615 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 636
struct hd_struct;
#line 636
struct gendisk;
#line 636 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 704
struct posix_acl;
#line 705
struct inode_operations;
#line 705
struct file_operations;
#line 705
struct file_lock;
#line 705
struct cdev;
#line 705 "include/linux/fs.h"
union __anonunion_ldv_14428_117 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 705 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_14428_117 ldv_14428 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 873 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 881 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 904 "include/linux/fs.h"
union __anonunion_f_u_118 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 904 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_118 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1027
struct files_struct;
#line 1027 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1028 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1033 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_120 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_119 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_120 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_119 fl_u ;
};
#line 1136 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1313
struct file_system_type;
#line 1313
struct super_operations;
#line 1313
struct xattr_handler;
#line 1313
struct mtd_info;
#line 1313 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1431 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1470 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1510 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1553 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1737 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 205 "include/linux/mod_devicetable.h"
struct serio_device_id {
   __u8 type ;
   __u8 extra ;
   __u8 id ;
   __u8 proto ;
};
#line 269 "include/linux/mod_devicetable.h"
struct input_device_id {
   kernel_ulong_t flags ;
   __u16 bustype ;
   __u16 vendor ;
   __u16 product ;
   __u16 version ;
   kernel_ulong_t evbit[1U] ;
   kernel_ulong_t keybit[12U] ;
   kernel_ulong_t relbit[1U] ;
   kernel_ulong_t absbit[1U] ;
   kernel_ulong_t mscbit[1U] ;
   kernel_ulong_t ledbit[1U] ;
   kernel_ulong_t sndbit[1U] ;
   kernel_ulong_t ffbit[2U] ;
   kernel_ulong_t swbit[1U] ;
   kernel_ulong_t driver_info ;
};
#line 475
struct ff_device;
#line 475
struct input_handle;
#line 475 "include/linux/mod_devicetable.h"
struct input_dev {
   char const   *name ;
   char const   *phys ;
   char const   *uniq ;
   struct input_id id ;
   unsigned long evbit[1U] ;
   unsigned long keybit[12U] ;
   unsigned long relbit[1U] ;
   unsigned long absbit[1U] ;
   unsigned long mscbit[1U] ;
   unsigned long ledbit[1U] ;
   unsigned long sndbit[1U] ;
   unsigned long ffbit[2U] ;
   unsigned long swbit[1U] ;
   unsigned int keycodemax ;
   unsigned int keycodesize ;
   void *keycode ;
   int (*setkeycode)(struct input_dev * , int  , int  ) ;
   int (*getkeycode)(struct input_dev * , int  , int * ) ;
   struct ff_device *ff ;
   unsigned int repeat_key ;
   struct timer_list timer ;
   int sync ;
   int abs[64U] ;
   int rep[2U] ;
   unsigned long key[12U] ;
   unsigned long led[1U] ;
   unsigned long snd[1U] ;
   unsigned long sw[1U] ;
   int absmax[64U] ;
   int absmin[64U] ;
   int absfuzz[64U] ;
   int absflat[64U] ;
   int absres[64U] ;
   int (*open)(struct input_dev * ) ;
   void (*close)(struct input_dev * ) ;
   int (*flush)(struct input_dev * , struct file * ) ;
   int (*event)(struct input_dev * , unsigned int  , unsigned int  , int  ) ;
   struct input_handle *grab ;
   spinlock_t event_lock ;
   struct mutex mutex ;
   unsigned int users ;
   bool going_away ;
   struct device dev ;
   struct list_head h_list ;
   struct list_head node ;
};
#line 1133 "include/linux/input.h"
struct input_handler {
   void *private ;
   void (*event)(struct input_handle * , unsigned int  , unsigned int  , int  ) ;
   int (*connect)(struct input_handler * , struct input_dev * , struct input_device_id  const  * ) ;
   void (*disconnect)(struct input_handle * ) ;
   void (*start)(struct input_handle * ) ;
   struct file_operations  const  *fops ;
   int minor ;
   char const   *name ;
   struct input_device_id  const  *id_table ;
   struct input_device_id  const  *blacklist ;
   struct list_head h_list ;
   struct list_head node ;
};
#line 1235 "include/linux/input.h"
struct input_handle {
   void *private ;
   int open ;
   char const   *name ;
   struct input_dev *dev ;
   struct input_handler *handler ;
   struct list_head d_node ;
   struct list_head h_node ;
};
#line 1357 "include/linux/input.h"
struct ff_device {
   int (*upload)(struct input_dev * , struct ff_effect * , struct ff_effect * ) ;
   int (*erase)(struct input_dev * , int  ) ;
   int (*playback)(struct input_dev * , int  , int  ) ;
   void (*set_gain)(struct input_dev * , u16  ) ;
   void (*set_autocenter)(struct input_dev * , u16  ) ;
   void (*destroy)(struct ff_device * ) ;
   void *private ;
   unsigned long ffbit[2U] ;
   struct mutex mutex ;
   int max_effects ;
   struct ff_effect *effects ;
   struct file *effect_owners[] ;
};
#line 1412
struct serio_driver;
#line 1412 "include/linux/input.h"
struct serio {
   void *port_data ;
   char name[32U] ;
   char phys[32U] ;
   bool manual_bind ;
   bool registered ;
   struct serio_device_id id ;
   spinlock_t lock ;
   int (*write)(struct serio * , unsigned char  ) ;
   int (*open)(struct serio * ) ;
   void (*close)(struct serio * ) ;
   int (*start)(struct serio * ) ;
   void (*stop)(struct serio * ) ;
   struct serio *parent ;
   struct serio *child ;
   unsigned int depth ;
   struct serio_driver *drv ;
   struct mutex drv_mutex ;
   struct device dev ;
   struct list_head node ;
};
#line 55 "include/linux/serio.h"
struct serio_driver {
   void *private ;
   char *description ;
   struct serio_device_id *id_table ;
   bool manual_bind ;
   void (*write_wakeup)(struct serio * ) ;
   irqreturn_t (*interrupt)(struct serio * , unsigned char  , unsigned int  ) ;
   int (*connect)(struct serio * , struct serio_driver * ) ;
   int (*reconnect)(struct serio * ) ;
   void (*disconnect)(struct serio * ) ;
   void (*cleanup)(struct serio * ) ;
   struct device_driver driver ;
};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
struct vsxxxaa {
   struct input_dev *dev ;
   struct serio *serio ;
   unsigned char buf[15U] ;
   unsigned char count ;
   unsigned char version ;
   unsigned char country ;
   unsigned char type ;
   char name[64U] ;
   char phys[32U] ;
};
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
typedef int ldv_func_ret_type;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 185 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 241
extern int printk(char const   *  , ...) ;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memmove(void * , void const   * , size_t  ) ;
#line 30 "include/linux/string.h"
extern size_t strlcpy(char * , char const   * , size_t  ) ;
#line 39
extern size_t strlcat(char * , char const   * , __kernel_size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4240: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4240;
  } else {

  }

#line 19
  return (order);
}
}
#line 152 "include/linux/mutex.h"
extern void mutex_unlock(struct mutex * ) ;
#line 155
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_1(struct mutex *ldv_func_arg1 ) ;
#line 11
extern void mutex_lock(struct mutex * ) ;
#line 14
void ldv_mutex_lock_2(struct mutex *ldv_func_arg1 ) ;
#line 16
int ldv_mutex_lock_interruptible_drv_mutex_of_serio(struct mutex *lock ) ;
#line 19
void ldv_mutex_lock_drv_mutex_of_serio(struct mutex *lock ) ;
#line 23
void ldv_mutex_unlock_drv_mutex_of_serio(struct mutex *lock ) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 314 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 201 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 205
  return;
}
}
#line 138 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 79 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 79 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 47
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 47
  if (tmp != 0L) {
#line 47
    rcu_read_lock_sched_notrace();
#line 47
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 47
    it_func = _________p1;
#line 47
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10460: 
#line 47
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 47
      it_func = it_func + 1;
#line 47
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 48
        goto ldv_10460;
      } else {

      }

    } else {

    }
#line 47
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 49
  return;
}
}
#line 27 "include/linux/kmemleak.h"
extern void kmemleak_alloc(void const   * , size_t  , int  , gfp_t  ) ;
#line 142 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 148 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 150
  if (size == 0UL) {
#line 151
    return (0);
  } else {

  }
#line 153
  if (size <= 8UL) {
#line 154
    return (3);
  } else {

  }
#line 156
  if (size > 64UL && size <= 96UL) {
#line 157
    return (1);
  } else {

  }
#line 158
  if (size > 128UL && size <= 192UL) {
#line 159
    return (2);
  } else {

  }
#line 160
  if (size <= 8UL) {
#line 160
    return (3);
  } else {

  }
#line 161
  if (size <= 16UL) {
#line 161
    return (4);
  } else {

  }
#line 162
  if (size <= 32UL) {
#line 162
    return (5);
  } else {

  }
#line 163
  if (size <= 64UL) {
#line 163
    return (6);
  } else {

  }
#line 164
  if (size <= 128UL) {
#line 164
    return (7);
  } else {

  }
#line 165
  if (size <= 256UL) {
#line 165
    return (8);
  } else {

  }
#line 166
  if (size <= 512UL) {
#line 166
    return (9);
  } else {

  }
#line 167
  if (size <= 1024UL) {
#line 167
    return (10);
  } else {

  }
#line 168
  if (size <= 2048UL) {
#line 168
    return (11);
  } else {

  }
#line 169
  if (size <= 4096UL) {
#line 169
    return (12);
  } else {

  }
#line 174
  if (size <= 8192UL) {
#line 174
    return (13);
  } else {

  }
#line 175
  if (size <= 16384UL) {
#line 175
    return (14);
  } else {

  }
#line 176
  if (size <= 32768UL) {
#line 176
    return (15);
  } else {

  }
#line 177
  if (size <= 65536UL) {
#line 177
    return (16);
  } else {

  }
#line 178
  if (size <= 131072UL) {
#line 178
    return (17);
  } else {

  }
#line 179
  if (size <= 262144UL) {
#line 179
    return (18);
  } else {

  }
#line 180
  if (size <= 524288UL) {
#line 180
    return (19);
  } else {

  }
#line 181
  if (size <= 1048576UL) {
#line 181
    return (20);
  } else {

  }
#line 182
  if (size <= 2097152UL) {
#line 182
    return (21);
  } else {

  }
#line 183
  return (-1);
}
}
#line 200 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 202
  tmp = kmalloc_index(size);
#line 202
  index = tmp;
#line 204
  if (index == 0) {
#line 205
    return (0);
  } else {

  }
#line 207
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 217
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 218
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 224 "include/linux/slub_def.h"
__inline static void *kmem_cache_alloc_notrace(struct kmem_cache *s , gfp_t gfpflags ) 
{ 
  void *tmp ;

  {
#line 226
  tmp = kmem_cache_alloc(s, gfpflags);
#line 226
  return (tmp);
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 88 "include/linux/module.h"
extern struct module __this_module ;
#line 492 "include/linux/device.h"
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 493
extern void dev_set_drvdata(struct device * , void * ) ;
#line 1262 "include/linux/input.h"
extern struct input_dev *input_allocate_device(void) ;
#line 1263
extern void input_free_device(struct input_dev * ) ;
#line 1286
extern int input_register_device(struct input_dev * ) ;
#line 1287
extern void input_unregister_device(struct input_dev * ) ;
#line 1303
extern void input_event(struct input_dev * , unsigned int  , unsigned int  , int  ) ;
#line 1306 "include/linux/input.h"
__inline static void input_report_key(struct input_dev *dev , unsigned int code ,
                                      int value ) 
{ 


  {
#line 1308
  input_event(dev, 1U, code, value != 0);
#line 1309
  return;
}
}
#line 1311 "include/linux/input.h"
__inline static void input_report_rel(struct input_dev *dev , unsigned int code ,
                                      int value ) 
{ 


  {
#line 1313
  input_event(dev, 2U, code, value);
#line 1314
  return;
}
}
#line 1316 "include/linux/input.h"
__inline static void input_report_abs(struct input_dev *dev , unsigned int code ,
                                      int value ) 
{ 


  {
#line 1318
  input_event(dev, 3U, code, value);
#line 1319
  return;
}
}
#line 1331 "include/linux/input.h"
__inline static void input_sync(struct input_dev *dev ) 
{ 


  {
#line 1333
  input_event(dev, 0U, 0U, 0);
#line 1334
  return;
}
}
#line 1343 "include/linux/input.h"
__inline static void input_set_abs_params(struct input_dev *dev , int axis , int min ,
                                          int max , int fuzz , int flat ) 
{ 


  {
#line 1345
  dev->absmin[axis] = min;
#line 1346
  dev->absmax[axis] = max;
#line 1347
  dev->absfuzz[axis] = fuzz;
#line 1348
  dev->absflat[axis] = flat;
#line 1350
  dev->absbit[axis / 64] = dev->absbit[axis / 64] | (1UL << axis % 64);
#line 1351
  return;
}
}
#line 75 "include/linux/serio.h"
extern int serio_open(struct serio * , struct serio_driver * ) ;
#line 76
extern void serio_close(struct serio * ) ;
#line 90
extern int __serio_register_driver(struct serio_driver * , struct module * , char const   * ) ;
#line 91 "include/linux/serio.h"
__inline static int serio_register_driver(struct serio_driver *drv ) 
{ 
  int tmp ;

  {
#line 93
  tmp = __serio_register_driver(drv, & __this_module, "vsxxxaa");
#line 93
  return (tmp);
}
}
#line 95
extern void serio_unregister_driver(struct serio_driver * ) ;
#line 97 "include/linux/serio.h"
__inline static int serio_write(struct serio *serio , unsigned char data ) 
{ 
  int tmp ;

  {
#line 99
  if ((unsigned long )serio->write != (unsigned long )((int (*)(struct serio * , unsigned char  ))0)) {
#line 100
    tmp = (*(serio->write))(serio, (int )data);
#line 100
    return (tmp);
  } else {
#line 102
    return (-1);
  }
}
}
#line 115 "include/linux/serio.h"
__inline static void *serio_get_drvdata(struct serio *serio ) 
{ 
  void *tmp ;

  {
#line 117
  tmp = dev_get_drvdata((struct device  const  *)(& serio->dev));
#line 117
  return (tmp);
}
}
#line 120 "include/linux/serio.h"
__inline static void serio_set_drvdata(struct serio *serio , void *data ) 
{ 


  {
#line 122
  dev_set_drvdata(& serio->dev, data);
#line 123
  return;
}
}
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_drop_bytes(struct vsxxxaa *mouse , int num ) 
{ 


  {
#line 145
  if ((int )mouse->count <= num) {
#line 146
    mouse->count = 0U;
  } else {
#line 148
    memmove((void *)(& mouse->buf), (void const   *)(& mouse->buf) + ((unsigned long )num + 0xffffffffffffffffUL),
            (size_t )(15 - num));
#line 149
    mouse->count = (int )mouse->count - (int )((unsigned char )num);
  }
#line 151
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_queue_byte(struct vsxxxaa *mouse , unsigned char byte ) 
{ 
  unsigned char tmp ;

  {
#line 155
  if ((unsigned int )mouse->count == 15U) {
#line 156
    printk("<3>%s on %s: Dropping a byte of full buffer.\n", (char *)(& mouse->name),
           (char *)(& mouse->phys));
#line 158
    vsxxxaa_drop_bytes(mouse, 1);
  } else {

  }
#line 163
  tmp = mouse->count;
#line 163
  mouse->count = (unsigned char )((int )mouse->count + 1);
#line 163
  mouse->buf[(int )tmp] = byte;
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_detection_done(struct vsxxxaa *mouse ) 
{ 


  {
#line 168
  switch ((int )mouse->type) {
  case 2: 
#line 170
  strlcpy((char *)(& mouse->name), "DEC VSXXX-AA/-GA mouse", 64UL);
#line 172
  goto ldv_16924;
  case 4: 
#line 175
  strlcpy((char *)(& mouse->name), "DEC VSXXX-AB digitizer", 64UL);
#line 177
  goto ldv_16924;
  default: 
#line 180
  snprintf((char *)(& mouse->name), 64UL, "unknown DEC pointer device (type = 0x%02x)",
           (int )mouse->type);
#line 183
  goto ldv_16924;
  }
  ldv_16924: 
#line 186
  printk("<6>Found %s version 0x%02x from country 0x%02x on port %s\n", (char *)(& mouse->name),
         (int )mouse->version, (int )mouse->country, (char *)(& mouse->phys));
#line 189
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static int vsxxxaa_check_packet(struct vsxxxaa *mouse , int packet_len ) 
{ 
  int i ;

  {
#line 199
  if ((int )((signed char )mouse->buf[0]) >= 0) {
#line 201
    return (1);
  } else {

  }
#line 205
  i = 1;
#line 205
  goto ldv_16933;
  ldv_16932: ;
#line 206
  if ((int )((signed char )mouse->buf[i]) < 0) {
#line 207
    printk("<3>Need to drop %d bytes of a broken packet.\n", i + -1);
#line 212
    return (i + -1);
  } else {

  }
#line 205
  i = i + 1;
  ldv_16933: ;
#line 205
  if (i < packet_len) {
#line 206
    goto ldv_16932;
  } else {

  }

#line 216
  return (0);
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
__inline static int vsxxxaa_smells_like_packet(struct vsxxxaa *mouse , unsigned char type ,
                                               size_t len ) 
{ 


  {
#line 222
  return ((size_t )mouse->count >= len && ((int )mouse->buf[0] & 224) == (int )type);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_handle_REL_packet(struct vsxxxaa *mouse ) 
{ 
  struct input_dev *dev ;
  unsigned char *buf ;
  int left ;
  int middle ;
  int right ;
  int dx ;
  int dy ;

  {
#line 227
  dev = mouse->dev;
#line 228
  buf = (unsigned char *)(& mouse->buf);
#line 245
  dx = (int )*(buf + 1UL) & 127;
#line 246
  dx = (((int )*buf >> 4) & 1 ? 1 : -1) * dx;
#line 252
  dy = (int )*(buf + 2UL) & 127;
#line 253
  dy = (((int )*buf >> 3) & 1 ? -1 : 1) * dy;
#line 259
  left = (int )*buf & 4;
#line 260
  middle = (int )*buf & 2;
#line 261
  right = (int )*buf & 1;
#line 263
  vsxxxaa_drop_bytes(mouse, 3);
#line 272
  input_report_key(dev, 272U, left);
#line 273
  input_report_key(dev, 274U, middle);
#line 274
  input_report_key(dev, 273U, right);
#line 275
  input_report_key(dev, 330U, 0);
#line 276
  input_report_rel(dev, 0U, dx);
#line 277
  input_report_rel(dev, 1U, dy);
#line 278
  input_sync(dev);
#line 279
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_handle_ABS_packet(struct vsxxxaa *mouse ) 
{ 
  struct input_dev *dev ;
  unsigned char *buf ;
  int left ;
  int middle ;
  int right ;
  int touch ;
  int x ;
  int y ;

  {
#line 283
  dev = mouse->dev;
#line 284
  buf = (unsigned char *)(& mouse->buf);
#line 302
  x = (((int )*(buf + 2UL) & 63) << 6) | ((int )*(buf + 1UL) & 63);
#line 303
  y = (((int )*(buf + 4UL) & 63) << 6) | ((int )*(buf + 3UL) & 63);
#line 304
  y = 1023 - y;
#line 309
  left = (int )*buf & 2;
#line 310
  middle = (int )*buf & 4;
#line 311
  right = (int )*buf & 8;
#line 312
  touch = (int )*buf & 16;
#line 314
  vsxxxaa_drop_bytes(mouse, 5);
#line 324
  input_report_key(dev, 272U, left);
#line 325
  input_report_key(dev, 274U, middle);
#line 326
  input_report_key(dev, 273U, right);
#line 327
  input_report_key(dev, 330U, touch);
#line 328
  input_report_abs(dev, 0U, x);
#line 329
  input_report_abs(dev, 1U, y);
#line 330
  input_sync(dev);
#line 331
  return;
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_handle_POR_packet(struct vsxxxaa *mouse ) 
{ 
  struct input_dev *dev ;
  unsigned char *buf ;
  int left ;
  int middle ;
  int right ;
  unsigned char error ;
  unsigned long __ms ;
  unsigned long tmp ;
  unsigned long __ms___0 ;
  unsigned long tmp___0 ;

  {
#line 335
  dev = mouse->dev;
#line 336
  buf = (unsigned char *)(& mouse->buf);
#line 358
  mouse->version = (unsigned int )*buf & 15U;
#line 359
  mouse->country = (unsigned int )((int )*(buf + 1UL) >> 4) & 7U;
#line 360
  mouse->type = (unsigned int )*(buf + 1UL) & 15U;
#line 361
  error = (unsigned int )*(buf + 2UL) & 127U;
#line 368
  left = (int )*buf & 4;
#line 369
  middle = (int )*buf & 2;
#line 370
  right = (int )*buf & 1;
#line 372
  vsxxxaa_drop_bytes(mouse, 4);
#line 373
  vsxxxaa_detection_done(mouse);
#line 375
  if ((unsigned int )error <= 31U) {
#line 377
    input_report_key(dev, 272U, left);
#line 378
    input_report_key(dev, 274U, middle);
#line 379
    input_report_key(dev, 273U, right);
#line 380
    input_report_key(dev, 330U, 0);
#line 381
    input_sync(dev);
#line 383
    if ((unsigned int )error != 0U) {
#line 384
      printk("<6>Your %s on %s reports error=0x%02x\n", (char *)(& mouse->name), (char *)(& mouse->phys),
             (int )error);
    } else {

    }
  } else {

  }
#line 393
  printk("<5>%s on %s: Forcing standard packet format, incremental streaming mode and 72 samples/sec\n",
         (char *)(& mouse->name), (char *)(& mouse->phys));
#line 397
  serio_write(mouse->serio, 83);
#line 398
  __ms = 50UL;
#line 398
  goto ldv_16972;
  ldv_16971: 
#line 398
  __const_udelay(4295000UL);
  ldv_16972: 
#line 398
  tmp = __ms;
#line 398
  __ms = __ms - 1UL;
#line 398
  if (tmp != 0UL) {
#line 399
    goto ldv_16971;
  } else {

  }
#line 399
  serio_write(mouse->serio, 82);
#line 400
  __ms___0 = 50UL;
#line 400
  goto ldv_16976;
  ldv_16975: 
#line 400
  __const_udelay(4295000UL);
  ldv_16976: 
#line 400
  tmp___0 = __ms___0;
#line 400
  __ms___0 = __ms___0 - 1UL;
#line 400
  if (tmp___0 != 0UL) {
#line 401
    goto ldv_16975;
  } else {

  }
#line 401
  serio_write(mouse->serio, 76);
#line 402
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_parse_buffer(struct vsxxxaa *mouse ) 
{ 
  unsigned char *buf ;
  int stray_bytes ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 406
  buf = (unsigned char *)(& mouse->buf);
  ldv_16987: ;
#line 420
  goto ldv_16984;
  ldv_16983: 
#line 421
  printk("<3>%s on %s: Dropping a byte to regain sync with mouse data stream...\n",
         (char *)(& mouse->name), (char *)(& mouse->phys));
#line 424
  vsxxxaa_drop_bytes(mouse, 1);
  ldv_16984: ;
#line 420
  if ((unsigned int )mouse->count != 0U && (int )((signed char )*buf) >= 0) {
#line 421
    goto ldv_16983;
  } else {

  }
#line 431
  tmp___1 = vsxxxaa_smells_like_packet(mouse, 128, 3UL);
#line 431
  if (tmp___1 != 0) {
#line 433
    stray_bytes = vsxxxaa_check_packet(mouse, 3);
#line 434
    if (stray_bytes == 0) {
#line 435
      vsxxxaa_handle_REL_packet(mouse);
    } else {

    }
  } else {
#line 437
    tmp___0 = vsxxxaa_smells_like_packet(mouse, 192, 5UL);
#line 437
    if (tmp___0 != 0) {
#line 440
      stray_bytes = vsxxxaa_check_packet(mouse, 5);
#line 441
      if (stray_bytes == 0) {
#line 442
        vsxxxaa_handle_ABS_packet(mouse);
      } else {

      }
    } else {
#line 444
      tmp = vsxxxaa_smells_like_packet(mouse, 160, 4UL);
#line 444
      if (tmp != 0) {
#line 447
        stray_bytes = vsxxxaa_check_packet(mouse, 4);
#line 448
        if (stray_bytes == 0) {
#line 449
          vsxxxaa_handle_POR_packet(mouse);
        } else {

        }
      } else {
#line 452
        goto ldv_16986;
      }
    }
  }
#line 455
  if (stray_bytes > 0) {
#line 456
    printk("<3>Dropping %d bytes now...\n", stray_bytes);
#line 458
    vsxxxaa_drop_bytes(mouse, stray_bytes);
  } else {

  }
#line 461
  goto ldv_16987;
  ldv_16986: ;
#line 463
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static irqreturn_t vsxxxaa_interrupt(struct serio *serio , unsigned char data , unsigned int flags ) 
{ 
  struct vsxxxaa *mouse ;
  void *tmp ;

  {
#line 467
  tmp = serio_get_drvdata(serio);
#line 467
  mouse = (struct vsxxxaa *)tmp;
#line 469
  vsxxxaa_queue_byte(mouse, (int )data);
#line 470
  vsxxxaa_parse_buffer(mouse);
#line 472
  return (IRQ_HANDLED);
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_disconnect(struct serio *serio ) 
{ 
  struct vsxxxaa *mouse ;
  void *tmp ;

  {
#line 477
  tmp = serio_get_drvdata(serio);
#line 477
  mouse = (struct vsxxxaa *)tmp;
#line 479
  serio_close(serio);
#line 480
  serio_set_drvdata(serio, 0);
#line 481
  input_unregister_device(mouse->dev);
#line 482
  kfree((void const   *)mouse);
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static int vsxxxaa_connect(struct serio *serio , struct serio_driver *drv ) 
{ 
  struct vsxxxaa *mouse ;
  struct input_dev *input_dev ;
  int err ;
  void *tmp ;

  {
#line 489
  err = -12;
#line 491
  tmp = kzalloc(136UL, 208U);
#line 491
  mouse = (struct vsxxxaa *)tmp;
#line 492
  input_dev = input_allocate_device();
#line 493
  if ((unsigned long )mouse == (unsigned long )((struct vsxxxaa *)0) || (unsigned long )input_dev == (unsigned long )((struct input_dev *)0)) {
#line 494
    goto fail1;
  } else {

  }
#line 496
  mouse->dev = input_dev;
#line 497
  mouse->serio = serio;
#line 498
  strlcat((char *)(& mouse->name), "DEC VSXXX-AA/-GA mouse or VSXXX-AB digitizer",
          64UL);
#line 500
  snprintf((char *)(& mouse->phys), 32UL, "%s/input0", (char *)(& serio->phys));
#line 502
  input_dev->name = (char const   *)(& mouse->name);
#line 503
  input_dev->phys = (char const   *)(& mouse->phys);
#line 504
  input_dev->id.bustype = 19U;
#line 505
  input_dev->dev.parent = & serio->dev;
#line 507
  __set_bit(1, (unsigned long volatile   *)(& input_dev->evbit));
#line 508
  __set_bit(2, (unsigned long volatile   *)(& input_dev->evbit));
#line 509
  __set_bit(3, (unsigned long volatile   *)(& input_dev->evbit));
#line 510
  __set_bit(272, (unsigned long volatile   *)(& input_dev->keybit));
#line 511
  __set_bit(274, (unsigned long volatile   *)(& input_dev->keybit));
#line 512
  __set_bit(273, (unsigned long volatile   *)(& input_dev->keybit));
#line 513
  __set_bit(330, (unsigned long volatile   *)(& input_dev->keybit));
#line 514
  __set_bit(0, (unsigned long volatile   *)(& input_dev->relbit));
#line 515
  __set_bit(1, (unsigned long volatile   *)(& input_dev->relbit));
#line 516
  input_set_abs_params(input_dev, 0, 0, 1023, 0, 0);
#line 517
  input_set_abs_params(input_dev, 1, 0, 1023, 0, 0);
#line 519
  serio_set_drvdata(serio, (void *)mouse);
#line 521
  err = serio_open(serio, drv);
#line 522
  if (err != 0) {
#line 523
    goto fail2;
  } else {

  }
#line 529
  serio_write(serio, 84);
#line 531
  err = input_register_device(input_dev);
#line 532
  if (err != 0) {
#line 533
    goto fail3;
  } else {

  }
#line 535
  return (0);
  fail3: 
#line 537
  serio_close(serio);
  fail2: 
#line 538
  serio_set_drvdata(serio, 0);
  fail1: 
#line 539
  input_free_device(input_dev);
#line 540
  kfree((void const   *)mouse);
#line 541
  return (err);
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static struct serio_device_id vsxxaa_serio_ids[2U]  = {      {2U, 255U, 255U, 8U}, 
        {0U, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
struct serio_device_id  const  __mod_serio_device_table  ;
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static struct serio_driver vsxxxaa_drv  = 
#line 556
     {0, (char *)"Driver for DEC VSXXX-AA and -GA mice and VSXXX-AB tablet", (struct serio_device_id *)(& vsxxaa_serio_ids),
    (_Bool)0, 0, & vsxxxaa_interrupt, & vsxxxaa_connect, 0, & vsxxxaa_disconnect,
    0, {"vsxxxaa", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static int vsxxxaa_init(void) 
{ 
  int tmp ;

  {
#line 569
  tmp = serio_register_driver(& vsxxxaa_drv);
#line 569
  return (tmp);
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
static void vsxxxaa_exit(void) 
{ 


  {
#line 574
  serio_unregister_driver(& vsxxxaa_drv);
#line 575
  return;
}
}
#line 597
void ldv_check_final_state(void) ;
#line 600
extern void ldv_check_return_value(int  ) ;
#line 606
void ldv_initialize(void) ;
#line 609
extern void ldv_handler_precall(void) ;
#line 612
extern int nondet_int(void) ;
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
void main(void) 
{ 
  struct serio *var_group1 ;
  struct serio_driver *var_group2 ;
  int res_vsxxxaa_connect_11 ;
  unsigned char var_vsxxxaa_interrupt_9_p1 ;
  unsigned int var_vsxxxaa_interrupt_9_p2 ;
  int ldv_s_vsxxxaa_drv_serio_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 742
  ldv_s_vsxxxaa_drv_serio_driver = 0;
#line 705
  LDV_IN_INTERRUPT = 1;
#line 714
  ldv_initialize();
#line 739
  ldv_handler_precall();
#line 740
  tmp = vsxxxaa_init();
#line 740
  if (tmp != 0) {
#line 741
    goto ldv_final;
  } else {

  }
#line 746
  goto ldv_17057;
  ldv_17056: 
#line 750
  tmp___0 = nondet_int();
#line 750
  switch (tmp___0) {
  case 0: ;
#line 755
  if (ldv_s_vsxxxaa_drv_serio_driver == 0) {
#line 779
    ldv_handler_precall();
#line 780
    res_vsxxxaa_connect_11 = vsxxxaa_connect(var_group1, var_group2);
#line 781
    ldv_check_return_value(res_vsxxxaa_connect_11);
#line 782
    if (res_vsxxxaa_connect_11 != 0) {
#line 783
      goto ldv_module_exit;
    } else {

    }
#line 784
    ldv_s_vsxxxaa_drv_serio_driver = ldv_s_vsxxxaa_drv_serio_driver + 1;
  } else {

  }
#line 790
  goto ldv_17052;
  case 1: ;
#line 794
  if (ldv_s_vsxxxaa_drv_serio_driver == 1) {
#line 818
    ldv_handler_precall();
#line 819
    vsxxxaa_disconnect(var_group1);
#line 820
    ldv_s_vsxxxaa_drv_serio_driver = 0;
  } else {

  }
#line 826
  goto ldv_17052;
  case 2: 
#line 854
  ldv_handler_precall();
#line 855
  vsxxxaa_interrupt(var_group1, (int )var_vsxxxaa_interrupt_9_p1, var_vsxxxaa_interrupt_9_p2);
#line 862
  goto ldv_17052;
  default: ;
#line 863
  goto ldv_17052;
  }
  ldv_17052: ;
  ldv_17057: 
#line 746
  tmp___1 = nondet_int();
#line 746
  if (tmp___1 != 0 || ldv_s_vsxxxaa_drv_serio_driver != 0) {
#line 748
    goto ldv_17056;
  } else {

  }

  ldv_module_exit: 
#line 894
  ldv_handler_precall();
#line 895
  vsxxxaa_exit();
  ldv_final: 
#line 898
  ldv_check_final_state();
#line 901
  return;
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
int ldv_mutex_lock_interruptible_1(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 910
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 910
  ldv_func_res = tmp;
#line 912
  tmp___0 = ldv_mutex_lock_interruptible_drv_mutex_of_serio(ldv_func_arg1);
#line 912
  return (tmp___0);
#line 914
  return (ldv_func_res);
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
void ldv_mutex_lock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 922
  ldv_mutex_lock_drv_mutex_of_serio(ldv_func_arg1);
#line 924
  mutex_lock(ldv_func_arg1);
#line 925
  return;
}
}
#line 927 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/input/mouse/vsxxxaa.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 932
  ldv_mutex_unlock_drv_mutex_of_serio(ldv_func_arg1);
#line 934
  mutex_unlock(ldv_func_arg1);
#line 935
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drv_mutex_of_serio  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drv_mutex_of_serio(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_drv_mutex_of_serio = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drv_mutex_of_serio(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_drv_mutex_of_serio = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drv_mutex_of_serio(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_drv_mutex_of_serio = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drv_mutex_of_serio(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_drv_mutex_of_serio = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drv_mutex_of_serio(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_drv_mutex_of_serio = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drv_mutex_of_serio(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_drv_mutex_of_serio == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drv_mutex_of_serio(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_drv_mutex_of_serio == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_drv_mutex_of_serio = 1;
#line 158
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 165
  ldv_mutex_drv_mutex_of_serio = 1;
#line 166
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/input/mouse/vsxxxaa.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 172
  if (ldv_mutex_drv_mutex_of_serio == 1) {

  } else {
#line 172
    ldv_error();
  }
#line 173
  return;
}
}
