/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 207
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1202_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1202_8 ldv_1202 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 119 "include/linux/kernel.h"
struct completion;
#line 220
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2052_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2067_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2068_14 {
   struct __anonstruct_ldv_2052_15 ldv_2052 ;
   struct __anonstruct_ldv_2067_16 ldv_2067 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2068_14 ldv_2068 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_TYPE_NR = 19
} ;
#line 121
struct thread_struct;
#line 123
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4662_20 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4668_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4669_19 {
   struct __anonstruct_ldv_4662_20 ldv_4662 ;
   struct __anonstruct_ldv_4668_21 ldv_4668 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4678_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4669_19 ldv_4669 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4678_22 ldv_4678 ;
};
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426
struct ds_context;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5158_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5181_25 {
   struct __anonstruct_ldv_5158_26 ldv_5158 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5181_25 ldv_5181 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 46 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 131 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 174 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 543 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5734_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5735_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5734_32 ldv_5734 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5735_31 ldv_5735 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 268 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 632 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 741 "include/linux/mmzone.h"
struct ctl_table;
#line 172 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 34 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 442
struct kobject;
#line 443 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 101 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 119
struct sysfs_dirent;
#line 176 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10604_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10604_110 ldv_10604 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 455 "include/linux/rcupdate.h"
struct tracepoint;
#line 456 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 230 "include/linux/percpu.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 182
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 188 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 374
struct module_sect_attrs;
#line 374
struct module_notes_attrs;
#line 374
struct ftrace_event_call;
#line 374 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 540
struct device_driver;
#line 74 "include/linux/connector.h"
struct hlist_nulls_node;
#line 74 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 37 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 38 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 52 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 141 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 155 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 122 "include/linux/if_ether.h"
struct prio_tree_node;
#line 122 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 164
struct address_space;
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_11993_123 {
   u16 inuse ;
   u16 objects ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_11994_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_11993_123 ldv_11993 ;
};
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_11999_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12002_124 {
   struct __anonstruct_ldv_11999_125 ldv_11999 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12006_126 {
   unsigned long index ;
   void *freelist ;
};
#line 165 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_11994_122 ldv_11994 ;
   union __anonunion_ldv_12002_124 ldv_12002 ;
   union __anonunion_ldv_12006_126 ldv_12006 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12744 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12744 socket_state;
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct pipe_inode_info;
#line 165
struct inode;
#line 166
struct net;
#line 183
struct fasync_struct;
#line 183
struct sock;
#line 183
struct proto_ops;
#line 183 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 148 "include/linux/net.h"
struct kiocb;
#line 149 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 982 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1024 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1032 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1066 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 300 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 327 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 388 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 397
struct dma_coherent_mem;
#line 397 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 19
struct rlimit;
#line 158 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 175 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 633
struct hrtimer_clock_base;
#line 634
struct hrtimer_cpu_base;
#line 643
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 648 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 442
struct net_device;
#line 443 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 247 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 248
struct sec_path;
#line 248 "include/linux/skbuff.h"
struct __anonstruct_ldv_18414_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18415_131 {
   __wsum csum ;
   struct __anonstruct_ldv_18414_132 ldv_18414 ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18443_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 248 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_dst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_18415_131 ldv_18415 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_18443_133 ldv_18443 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 414
struct dst_entry;
#line 424
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 564
struct dentry;
#line 221 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 305 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 327 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 334 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 340 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 375 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 408 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 418 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 435 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 461 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
};
#line 583
struct prot_inuse;
#line 584 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[77U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 73 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 314 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 314 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 200
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 207
struct pid_namespace;
#line 207 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 418 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 477 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 292 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 306 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 321 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 367 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 567 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 567 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 567 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 570 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619
struct backing_dev_info;
#line 620 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 641
struct hd_struct;
#line 641
struct gendisk;
#line 641 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_22009_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22009_152 ldv_22009 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 879 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 887 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 910 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 910 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1033
struct files_struct;
#line 1033 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1034 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1039 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1138 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1317
struct file_system_type;
#line 1317
struct super_operations;
#line 1317
struct xattr_handler;
#line 1317
struct mtd_info;
#line 1317 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1435 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1473
struct block_device_operations;
#line 1474 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1514 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1557 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2187
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 110 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 129 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 209
struct neighbour;
#line 210
struct neigh_parms;
#line 229 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 261 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 266 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 304 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 510
struct Qdisc;
#line 510 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 532 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 707
struct iw_handler_def;
#line 707
struct iw_public_data;
#line 707
struct net_bridge_port;
#line 707
struct macvlan_port;
#line 707
struct garp_port;
#line 707
struct rtnl_link_ops;
#line 707 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   struct netdev_hw_addr_list uc ;
   int uc_promisc ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
};
#line 1141
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2133 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 135
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_158 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_158 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_160 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_161 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_162 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_164 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_165 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_159 {
   int _pad[28U] ;
   struct __anonstruct__kill_160 _kill ;
   struct __anonstruct__timer_161 _timer ;
   struct __anonstruct__rt_162 _rt ;
   struct __anonstruct__sigchld_163 _sigchld ;
   struct __anonstruct__sigfault_164 _sigfault ;
   struct __anonstruct__sigpoll_165 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_159 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_168 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_168 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 100 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_27692_169 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_170 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_171 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_27692_169 ldv_27692 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_170 type_data ;
   union __anonunion_payload_171 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct bts_context;
#line 268
struct perf_event_context;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 365
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_172 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_172 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 406 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct tty_struct;
#line 516
struct taskstats;
#line 516
struct tty_audit_buf;
#line 516 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 661 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 703
struct reclaim_state;
#line 704 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 722 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 993
struct io_context;
#line 1016
struct rq;
#line 1017 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  , bool  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1074 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1079 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1150
struct rt_rq;
#line 1150 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1167
struct mem_cgroup;
#line 1167 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1508
struct css_set;
#line 1508
struct compat_robust_list_head;
#line 1508
struct ftrace_ret_stack;
#line 1508 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 103
struct request_sock;
#line 3181 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 777 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 348
struct dn_route;
#line 348 "include/net/neighbour.h"
union __anonunion_ldv_32076_177 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 348 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_32076_177 ldv_32076 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_178 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_178 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_32206_179 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32212_180 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32220_181 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_32206_179 ldv_32206 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_32212_180 ldv_32212 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_32220_181 ldv_32220 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_182 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
   int limit ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_182 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 642
struct request_sock_ops;
#line 643
struct timewait_sock_ops;
#line 644
struct inet_hashinfo;
#line 645
struct raw_hashinfo;
#line 646
struct udp_table;
#line 646 "include/net/sock.h"
union __anonunion_h_183 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 646 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_183 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 171 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 184 "include/linux/drbd.h"
struct __anonstruct_ldv_33296_184 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 184 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_33296_184 ldv_33296 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 258 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 267 "include/linux/crypto.h"
union __anonunion_cra_u_185 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 267 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_185 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 319 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 339 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 354 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 363 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 371 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 383 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 390 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 398 "include/linux/crypto.h"
union __anonunion_crt_u_186 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 398 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_186 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 427 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 431 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 435 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 447 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 451 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
};
#line 69
struct bdi_writeback;
#line 37 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 44 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 60 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 30 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 513 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_36910_194 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_36910_194 ldv_36910 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 264 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 265 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 266 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 267 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 268 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 276 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 278 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 279 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 280 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 281 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 282
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 289 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 295 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 304 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 331 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1238 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1259 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1260 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1261 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1262 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1263 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1304 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   unsigned long long (*set_capacity)(struct gendisk * , unsigned long long  ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 126 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 480 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 49 "include/linux/route.h"
union __anonunion_u_200 {
   struct dst_entry dst ;
};
#line 49
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   union __anonunion_u_200 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 212 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1566 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 341 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 466 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u32 queue_order_type ;
};
#line 486 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 579 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 609
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 637
struct drbd_work;
#line 647 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 651
struct drbd_tl_epoch;
#line 682 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 690 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   struct drbd_epoch *epoch ;
   unsigned int flags ;
   u64 block_id ;
};
#line 787
struct drbd_bitmap;
#line 788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 132 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 875 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 882
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 889 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1069
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2261 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 138 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 145
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1179 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_MAX_CMD = 37,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 652 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 745 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 869 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 180 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 250
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 472 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 519
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 523 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 715
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1385
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3235
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_202 {
   u32 pos ;
   u32 extent ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_202 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 144 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 177 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29472 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 35 "include/linux/kmod.h"
struct subprocess_info;
#line 60
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    AFTER_LAST_ERR_CODE = 153
} ;
#line 299 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 335 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 846 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
};
#line 102 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 119 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 128 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 100 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 1978 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 9 "include/asm-generic/bitops/hweight.h"
extern unsigned long hweight64(__u64  ) ;
#line 42 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 44
  tmp = hweight64((__u64 )w);
#line 44
  return (tmp);
}
}
#line 202
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 212
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 137 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 251
extern int printk(char const   *  , ...) ;
#line 254
extern int __printk_ratelimit(char const   * ) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1905: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4329: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4329;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )v->counter);
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 218
  switch (8UL) {
  case 1UL: 
#line 218
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 2UL: 
#line 218
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 4UL: 
#line 218
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 8UL: 
#line 218
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  default: 
#line 218
  __bad_percpu_size();
  }
  ldv_5454: 
#line 218
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 220
  return (ti);
}
}
#line 10 "include/linux/debug_locks.h"
extern int debug_locks ;
#line 542 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5735.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5735.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5735.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5735.rlock, flags);
#line 340
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 445
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 126
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 151
extern int mutex_trylock(struct mutex * ) ;
#line 152
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 69 "include/linux/rcupdate.h"
extern int rcu_scheduler_active ;
#line 104 "include/linux/rcupdate.h"
__inline static int debug_lockdep_rcu_enabled(void) 
{ 
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
#line 106
  tmp = __builtin_expect(rcu_scheduler_active != 0, 1L);
#line 106
  if (tmp != 0L) {
#line 106
    tmp___0 = __builtin_expect(debug_locks != 0, 1L);
#line 106
    if (tmp___0 != 0L) {
#line 106
      tmp___1 = 1;
    } else {
#line 106
      tmp___1 = 0;
    }
  } else {
#line 106
    tmp___1 = 0;
  }
#line 106
  return (tmp___1);
}
}
#line 155 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 157
  return (1);
}
}
#line 323 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 327
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 28 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13388: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13388;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 146 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[22U] ;
#line 152 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 154
  if (size == 0UL) {
#line 155
    return (0);
  } else {

  }
#line 157
  if (size <= 8UL) {
#line 158
    return (3);
  } else {

  }
#line 160
  if (size > 64UL && size <= 96UL) {
#line 161
    return (1);
  } else {

  }
#line 162
  if (size > 128UL && size <= 192UL) {
#line 163
    return (2);
  } else {

  }
#line 164
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 165
  if (size <= 16UL) {
#line 165
    return (4);
  } else {

  }
#line 166
  if (size <= 32UL) {
#line 166
    return (5);
  } else {

  }
#line 167
  if (size <= 64UL) {
#line 167
    return (6);
  } else {

  }
#line 168
  if (size <= 128UL) {
#line 168
    return (7);
  } else {

  }
#line 169
  if (size <= 256UL) {
#line 169
    return (8);
  } else {

  }
#line 170
  if (size <= 512UL) {
#line 170
    return (9);
  } else {

  }
#line 171
  if (size <= 1024UL) {
#line 171
    return (10);
  } else {

  }
#line 172
  if (size <= 2048UL) {
#line 172
    return (11);
  } else {

  }
#line 173
  if (size <= 4096UL) {
#line 173
    return (12);
  } else {

  }
#line 178
  if (size <= 8192UL) {
#line 178
    return (13);
  } else {

  }
#line 179
  if (size <= 16384UL) {
#line 179
    return (14);
  } else {

  }
#line 180
  if (size <= 32768UL) {
#line 180
    return (15);
  } else {

  }
#line 181
  if (size <= 65536UL) {
#line 181
    return (16);
  } else {

  }
#line 182
  if (size <= 131072UL) {
#line 182
    return (17);
  } else {

  }
#line 183
  if (size <= 262144UL) {
#line 183
    return (18);
  } else {

  }
#line 184
  if (size <= 524288UL) {
#line 184
    return (19);
  } else {

  }
#line 185
  if (size <= 1048576UL) {
#line 185
    return (20);
  } else {

  }
#line 186
  if (size <= 2097152UL) {
#line 186
    return (21);
  } else {

  }
#line 187
  return (-1);
}
}
#line 204 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 206
  tmp = kmalloc_index(size);
#line 206
  index = tmp;
#line 208
  if (index == 0) {
#line 209
    return (0);
  } else {

  }
#line 211
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 215
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 218
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 452 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 454
  tmp = kobject_name(& dev->kobj);
#line 454
  return (tmp);
}
}
#line 626
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 593 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 595
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2189 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2349
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 68 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 70
  pagefault_disable();
#line 71
  tmp = lowmem_page_address(page);
#line 71
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 841 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 843
  return ((bdev->bd_disk)->queue);
}
}
#line 1007
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 141
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 144
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 144
    tmp = _drbd_insert_fault(mdev, type);
#line 144
    if (tmp != 0U) {
#line 144
      tmp___0 = 1;
    } else {
#line 144
      tmp___0 = 0;
    }
  } else {
#line 144
    tmp___0 = 0;
  }
#line 144
  return (tmp___0);
}
}
#line 164
struct ratelimit_state drbd_ratelimit_state ;
#line 1091
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1313
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1314
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) ;
#line 1315
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1316
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1317
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1318
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1320
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1323
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1325
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1326
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1327
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1328
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1329
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1330
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1332
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1333
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1334
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1335
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1337
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1338
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1339
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1342
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1345
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1348
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1349
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1351
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1366
rwlock_t global_state_lock ;
#line 1383
char *ppsize(char *buf , unsigned long long size ) ;
#line 1402
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1614
  _raw_read_lock(& global_state_lock);
#line 1615
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1616
  _raw_read_unlock(& global_state_lock);
#line 1618
  return (rv);
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_41510;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33296.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_41510;
  }
  ldv_41510: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1705 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1707
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1710
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1713
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 1975 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1978
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 1978
  if (tmp != 0) {
#line 1979
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1980
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1980
  if (tmp___2 < 0) {
#line 1980
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1980
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1980
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           1980);
  } else {

  }
#line 1981
  return;
}
}
#line 1984 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 1988
  atomic_inc(& mdev->local_cnt);
#line 1989
  io_allowed = (unsigned int )mdev->state.ldv_33296.disk >= (unsigned int )mins;
#line 1990
  if (io_allowed == 0) {
#line 1991
    put_ldev(mdev);
  } else {

  }
#line 1992
  return (io_allowed);
}
}
#line 2233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2235
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2236
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2237
  return;
}
}
#line 2247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2251
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2251
  if (tmp != 0) {
#line 2252
    return;
  } else {

  }
#line 2254
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2256
  if (r != 0) {
#line 2257
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2258
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2258
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2258
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2260
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 96
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 96
  return (tmp);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 102
  b = mdev->bitmap;
#line 103
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 103
  if (tmp == 0) {
#line 104
    return;
  } else {

  }
#line 105
  tmp___9 = get_current();
#line 105
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 105
    tmp___7 = get_current();
#line 105
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 105
      tmp___5 = get_current();
#line 105
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 105
        tmp___3 = get_current();
#line 105
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 105
        tmp___4 = (char *)"worker";
      }
#line 105
      tmp___6 = tmp___4;
    } else {
#line 105
      tmp___6 = (char *)"asender";
    }
#line 105
    tmp___8 = tmp___6;
  } else {
#line 105
    tmp___8 = (char *)"receiver";
  }
#line 105
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 106
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char *tmp___10 ;
  struct task_struct *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 117
  b = mdev->bitmap;
#line 120
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 121
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 121
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 121
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 122
    return;
  } else {

  }
#line 125
  tmp___1 = mutex_trylock(& b->bm_change);
#line 125
  trylock_failed = tmp___1 == 0;
#line 127
  if (trylock_failed != 0) {
#line 128
    tmp___11 = get_current();
#line 128
    if ((unsigned long )tmp___11 != (unsigned long )mdev->receiver.task) {
#line 128
      tmp___9 = get_current();
#line 128
      if ((unsigned long )tmp___9 != (unsigned long )mdev->asender.task) {
#line 128
        tmp___7 = get_current();
#line 128
        if ((unsigned long )tmp___7 != (unsigned long )mdev->worker.task) {
#line 128
          tmp___5 = get_current();
#line 128
          tmp___6 = (char *)(& tmp___5->comm);
        } else {
#line 128
          tmp___6 = (char *)"worker";
        }
#line 128
        tmp___8 = tmp___6;
      } else {
#line 128
        tmp___8 = (char *)"asender";
      }
#line 128
      tmp___10 = tmp___8;
    } else {
#line 128
      tmp___10 = (char *)"receiver";
    }
#line 128
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___13, tmp___12, tmp___10, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 136
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 138
  tmp___16 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 138
  if (tmp___16 != 0) {
#line 139
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___15, tmp___14);
  } else {

  }
#line 141
  b->bm_why = why;
#line 142
  b->bm_task = get_current();
#line 143
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 147
  b = mdev->bitmap;
#line 148
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 149
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 149
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 149
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 150
    return;
  } else {

  }
#line 153
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 153
  if (tmp___3 == 0) {
#line 154
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 154
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 154
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 156
  b->bm_why = 0;
#line 157
  b->bm_task = 0;
#line 158
  mutex_unlock(& b->bm_change);
#line 159
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 168
  page_nr = offset >> 9;
#line 169
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 169
  if (tmp != 0L) {
#line 169
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (169), "i" (12UL));
    ldv_41781: ;
#line 169
    goto ldv_41781;
  } else {

  }
#line 170
  page = *(b->bm_pages + page_nr);
#line 172
  tmp___0 = kmap_atomic(page, km);
#line 172
  return ((unsigned long *)tmp___0);
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 177
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 177
  return (tmp);
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 182
  pagefault_enable();
#line 183
  return;
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 187
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 212
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 213
    return;
  } else {

  }
#line 215
  i = 0UL;
#line 215
  goto ldv_41800;
  ldv_41799: ;
#line 216
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 217
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 220
    goto ldv_41798;
  } else {

  }
#line 222
  __free_pages(*(pages + i), 0U);
#line 223
  *(pages + i) = 0;
  ldv_41798: 
#line 215
  i = i + 1UL;
  ldv_41800: ;
#line 215
  if (i < number) {
#line 216
    goto ldv_41799;
  } else {

  }

#line 220
  return;
}
}
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 229
  if (v != 0) {
#line 230
    vfree((void const   *)ptr);
  } else {
#line 232
    kfree((void const   *)ptr);
  }
#line 233
  return;
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 240
  old_pages = b->bm_pages;
#line 242
  vmalloced = 0U;
#line 243
  have = b->bm_number_of_pages;
#line 245
  tmp = __builtin_expect(have == 0UL, 0L);
#line 245
  if (tmp != 0L) {
#line 245
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 245
    if (tmp___0 != 0L) {
#line 245
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (245), "i" (12UL));
      ldv_41817: ;
#line 245
      goto ldv_41817;
    } else {

    }
  } else {

  }
#line 246
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 246
  if (tmp___1 != 0L) {
#line 246
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 246
    if (tmp___2 != 0L) {
#line 246
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (246), "i" (12UL));
      ldv_41818: ;
#line 246
      goto ldv_41818;
    } else {

    }
  } else {

  }
#line 248
  if (have == want) {
#line 249
    return (old_pages);
  } else {

  }
#line 256
  bytes = (unsigned int )want * 8U;
#line 257
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 257
  new_pages = (struct page **)tmp___3;
#line 258
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 259
    tmp___4 = vmalloc((unsigned long )bytes);
#line 259
    new_pages = (struct page **)tmp___4;
#line 260
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 261
      return (0);
    } else {

    }
#line 262
    vmalloced = 1U;
  } else {

  }
#line 265
  memset((void *)new_pages, 0, (size_t )bytes);
#line 266
  if (want >= have) {
#line 267
    i = 0U;
#line 267
    goto ldv_41820;
    ldv_41819: 
#line 268
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 267
    i = i + 1U;
    ldv_41820: ;
#line 267
    if ((unsigned long )i < have) {
#line 268
      goto ldv_41819;
    } else {

    }

#line 269
    goto ldv_41823;
    ldv_41822: 
#line 270
    page = alloc_pages(131282U, 0U);
#line 271
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 272
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 273
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 274
      return (0);
    } else {

    }
#line 276
    *(new_pages + (unsigned long )i) = page;
#line 269
    i = i + 1U;
    ldv_41823: ;
#line 269
    if ((unsigned long )i < want) {
#line 270
      goto ldv_41822;
    } else {

    }

  } else {
#line 279
    i = 0U;
#line 279
    goto ldv_41826;
    ldv_41825: 
#line 280
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 279
    i = i + 1U;
    ldv_41826: ;
#line 279
    if ((unsigned long )i < want) {
#line 280
      goto ldv_41825;
    } else {

    }

  }
#line 286
  if (vmalloced != 0U) {
#line 287
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 289
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 291
  return (new_pages);
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 300
  b = mdev->bitmap;
#line 301
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 301
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 301
  if (tmp != 0L) {
#line 301
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       301);
  } else {

  }
#line 301
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 302
  tmp___0 = kzalloc(376UL, 208U);
#line 302
  b = (struct drbd_bitmap *)tmp___0;
#line 303
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 304
    return (-12);
  } else {

  }
#line 305
  spinlock_check(& b->bm_lock);
#line 305
  __raw_spin_lock_init(& b->bm_lock.ldv_5735.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 306
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 307
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 309
  mdev->bitmap = b;
#line 311
  return (0);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 316
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 316
  if (_b != 0) {
#line 316
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 316
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 316
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           316);
  } else {

  }
#line 316
  if (_b != 0) {
#line 316
    return (0UL);
  } else {

  }
#line 317
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 324
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 324
  if (_b != 0) {
#line 324
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           324);
  } else {

  }
#line 324
  if (_b != 0) {
#line 324
    return;
  } else {

  }
#line 325
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 326
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 326
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 327
  kfree((void const   *)mdev->bitmap);
#line 328
  mdev->bitmap = 0;
#line 329
  return;
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 338
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 339
  w = b->bm_bits >> 6;
#line 340
  cleared = 0;
#line 343
  p_addr = bm_map_paddr(b, w);
#line 344
  bm = p_addr + (w & 511UL);
#line 345
  if (b->bm_words > w) {
#line 346
    tmp = hweight_long(*bm & ~ mask);
#line 346
    cleared = (int )tmp;
#line 347
    *bm = *bm & mask;
#line 348
    w = w + (size_t )1;
#line 348
    bm = bm + 1;
  } else {

  }
#line 351
  if (b->bm_words > w) {
#line 352
    tmp___0 = hweight_long(*bm);
#line 352
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 353
    *bm = 0UL;
  } else {

  }
#line 355
  bm_unmap(p_addr);
#line 356
  return (cleared);
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 361
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 362
  w = b->bm_bits >> 6;
#line 365
  p_addr = bm_map_paddr(b, w);
#line 366
  bm = p_addr + (w & 511UL);
#line 367
  if (b->bm_words > w) {
#line 368
    *bm = *bm | ~ mask;
#line 369
    bm = bm + 1;
#line 369
    w = w + (size_t )1;
  } else {

  }
#line 372
  if (b->bm_words > w) {
#line 373
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 375
  bm_unmap(p_addr);
#line 376
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 380
  offset = 0UL;
#line 381
  bits = 0UL;
#line 384
  goto ldv_41882;
  ldv_41881: 
#line 385
  __min1 = b->bm_words - offset;
#line 385
  __min2 = 512UL;
#line 385
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 385
  i = do_now;
#line 386
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 387
  bm = p_addr + (offset & 511UL);
#line 388
  goto ldv_41878;
  ldv_41877: 
#line 393
  tmp = bm;
#line 393
  bm = bm + 1;
#line 393
  tmp___0 = hweight_long(*tmp);
#line 393
  bits = tmp___0 + bits;
  ldv_41878: 
#line 388
  tmp___1 = i;
#line 388
  i = i - 1UL;
#line 388
  if (tmp___1 != 0UL) {
#line 389
    goto ldv_41877;
  } else {

  }
#line 395
  __bm_unmap(p_addr, KM_USER0);
#line 396
  offset = offset + do_now;
#line 397
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                397, 0);
#line 397
  _cond_resched();
  ldv_41882: ;
#line 384
  if (b->bm_words > offset) {
#line 385
    goto ldv_41881;
  } else {

  }

#line 400
  return (bits);
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 405
  tmp = __bm_count_bits(b, 0);
#line 405
  return (tmp);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 410
  tmp = __bm_count_bits(b, 1);
#line 410
  return (tmp);
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 421
  end = offset + len;
#line 423
  if (b->bm_words < end) {
#line 424
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 425
    return;
  } else {

  }
#line 428
  goto ldv_41905;
  ldv_41904: 
#line 429
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 429
  __min2 = end;
#line 429
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 430
  p_addr = bm_map_paddr(b, offset);
#line 431
  bm = p_addr + (offset & 511UL);
#line 432
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 433
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 435
    goto ldv_41903;
  } else {

  }
#line 437
  memset((void *)bm, c, do_now * 8UL);
#line 438
  bm_unmap(p_addr);
#line 439
  offset = offset + do_now;
  ldv_41905: ;
#line 428
  if (offset < end) {
#line 429
    goto ldv_41904;
  } else {

  }
  ldv_41903: ;
#line 433
  return;
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 453
  b = mdev->bitmap;
#line 456
  opages = 0;
#line 457
  err = 0;
#line 460
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 460
  if (_b != 0) {
#line 460
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 460
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 460
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           460);
  } else {

  }
#line 460
  if (_b != 0) {
#line 460
    return (-12);
  } else {

  }
#line 462
  drbd_bm_lock(mdev, (char *)"resize");
#line 464
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 464
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 464
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 467
  if (b->bm_dev_capacity == capacity) {
#line 468
    goto out;
  } else {

  }
#line 470
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 472
  if (capacity == 0UL) {
#line 473
    spin_lock_irq(& b->bm_lock);
#line 474
    opages = b->bm_pages;
#line 475
    onpages = b->bm_number_of_pages;
#line 476
    owords = b->bm_words;
#line 477
    b->bm_pages = 0;
#line 478
    tmp___6 = 0UL;
#line 478
    b->bm_dev_capacity = tmp___6;
#line 478
    tmp___5 = tmp___6;
#line 478
    b->bm_words = tmp___5;
#line 478
    tmp___4 = tmp___5;
#line 478
    b->bm_bits = tmp___4;
#line 478
    tmp___3 = tmp___4;
#line 478
    b->bm_set = tmp___3;
#line 478
    b->bm_number_of_pages = tmp___3;
#line 483
    spin_unlock_irq(& b->bm_lock);
#line 484
    bm_free_pages(opages, onpages);
#line 485
    bm_vk_free((void *)opages, opages_vmalloced);
#line 486
    goto out;
  } else {

  }
#line 488
  bits = (capacity + 7UL) >> 3;
#line 495
  words = (bits + 63UL) >> 6;
#line 497
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 497
  if (tmp___9 != 0) {
#line 498
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 498
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 498
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 498
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             498);
    } else {

    }
#line 499
    put_ldev(mdev);
  } else {

  }
#line 503
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 504
  have = b->bm_number_of_pages;
#line 505
  if (want == have) {
#line 506
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 506
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 506
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 506
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             506);
    } else {

    }
#line 507
    npages = b->bm_pages;
  } else {
#line 509
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 509
    if (tmp___12 != 0) {
#line 510
      npages = 0;
    } else {
#line 512
      npages = bm_realloc_pages(b, want);
    }
  }
#line 515
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 516
    err = -12;
#line 517
    goto out;
  } else {

  }
#line 520
  spin_lock_irq(& b->bm_lock);
#line 521
  opages = b->bm_pages;
#line 522
  owords = b->bm_words;
#line 523
  obits = b->bm_bits;
#line 525
  growing = bits > obits;
#line 526
  if ((unsigned long )opages != (unsigned long )((struct page **)0)) {
#line 527
    bm_set_surplus(b);
  } else {

  }
#line 529
  b->bm_pages = npages;
#line 530
  b->bm_number_of_pages = want;
#line 531
  b->bm_bits = bits;
#line 532
  b->bm_words = words;
#line 533
  b->bm_dev_capacity = capacity;
#line 535
  if (growing != 0) {
#line 536
    bm_memset(b, owords, 255, words - owords);
#line 537
    b->bm_set = b->bm_set + (bits - obits);
  } else {

  }
#line 540
  if (want < have) {
#line 542
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 545
  p_addr = bm_map_paddr(b, words);
#line 546
  bm = p_addr + (words & 511UL);
#line 547
  *bm = 2205418087UL;
#line 548
  bm_unmap(p_addr);
#line 550
  bm_clear_surplus(b);
#line 552
  spin_unlock_irq(& b->bm_lock);
#line 553
  if ((unsigned long )opages != (unsigned long )npages) {
#line 554
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 555
  if (growing == 0) {
#line 556
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 557
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 557
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 557
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 560
  drbd_bm_unlock(mdev);
#line 561
  return (err);
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 574
  b = mdev->bitmap;
#line 578
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 578
  if (_b != 0) {
#line 578
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           578);
  } else {

  }
#line 578
  if (_b != 0) {
#line 578
    return (0UL);
  } else {

  }
#line 579
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 579
  if (_b___0 != 0) {
#line 579
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 579
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 579
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           579);
  } else {

  }
#line 579
  if (_b___0 != 0) {
#line 579
    return (0UL);
  } else {

  }
#line 581
  tmp___3 = spinlock_check(& b->bm_lock);
#line 581
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 582
  s = b->bm_set;
#line 583
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 585
  return (s);
}
}
#line 588 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 592
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 592
  if (tmp == 0) {
#line 593
    return (0UL);
  } else {

  }
#line 594
  s = _drbd_bm_total_weight(mdev);
#line 595
  put_ldev(mdev);
#line 596
  return (s);
}
}
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 601
  b = mdev->bitmap;
#line 602
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 602
  if (_b != 0) {
#line 602
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           602);
  } else {

  }
#line 602
  if (_b != 0) {
#line 602
    return (0UL);
  } else {

  }
#line 603
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 603
  if (_b___0 != 0) {
#line 603
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           603);
  } else {

  }
#line 603
  if (_b___0 != 0) {
#line 603
    return (0UL);
  } else {

  }
#line 605
  return (b->bm_words);
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 610
  b = mdev->bitmap;
#line 611
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 611
  if (_b != 0) {
#line 611
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           611);
  } else {

  }
#line 611
  if (_b != 0) {
#line 611
    return (0UL);
  } else {

  }
#line 613
  return (b->bm_bits);
}
}
#line 621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 624
  b = mdev->bitmap;
#line 629
  end = offset + number;
#line 631
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 631
  if (_b != 0) {
#line 631
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 631
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 631
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           631);
  } else {

  }
#line 631
  if (_b != 0) {
#line 631
    return;
  } else {

  }
#line 632
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 632
  if (_b___0 != 0) {
#line 632
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 632
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 632
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           632);
  } else {

  }
#line 632
  if (_b___0 != 0) {
#line 632
    return;
  } else {

  }
#line 633
  if (number == 0UL) {
#line 634
    return;
  } else {

  }
#line 635
  __ret_warn_on = b->bm_words <= offset;
#line 635
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 635
  if (tmp___3 != 0L) {
#line 635
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       635);
  } else {

  }
#line 635
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 636
  __ret_warn_on___0 = b->bm_words < end;
#line 636
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 636
  if (tmp___4 != 0L) {
#line 636
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       636);
  } else {

  }
#line 636
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 638
  spin_lock_irq(& b->bm_lock);
#line 639
  goto ldv_41992;
  ldv_41991: 
#line 640
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 640
  __min2 = end;
#line 640
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 641
  p_addr = bm_map_paddr(b, offset);
#line 642
  bm = p_addr + (offset & 511UL);
#line 643
  offset = offset + do_now;
#line 644
  goto ldv_41989;
  ldv_41988: 
#line 645
  bits = hweight_long(*bm);
#line 646
  tmp___5 = buffer;
#line 646
  buffer = buffer + 1;
#line 646
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 647
  tmp___6 = bm;
#line 647
  bm = bm + 1;
#line 647
  *tmp___6 = word;
#line 648
  tmp___7 = hweight_long(word);
#line 648
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_41989: 
#line 644
  tmp___8 = do_now;
#line 644
  do_now = do_now - (size_t )1;
#line 644
  if (tmp___8 != 0UL) {
#line 645
    goto ldv_41988;
  } else {

  }
#line 650
  bm_unmap(p_addr);
  ldv_41992: ;
#line 639
  if (offset < end) {
#line 640
    goto ldv_41991;
  } else {

  }

#line 657
  if (b->bm_words == end) {
#line 658
    tmp___9 = bm_clear_surplus(b);
#line 658
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 660
  spin_unlock_irq(& b->bm_lock);
#line 661
  return;
}
}
#line 666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 669
  b = mdev->bitmap;
#line 673
  end = offset + number;
#line 675
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 675
  if (_b != 0) {
#line 675
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           675);
  } else {

  }
#line 675
  if (_b != 0) {
#line 675
    return;
  } else {

  }
#line 676
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 676
  if (_b___0 != 0) {
#line 676
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 676
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 676
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           676);
  } else {

  }
#line 676
  if (_b___0 != 0) {
#line 676
    return;
  } else {

  }
#line 678
  spin_lock_irq(& b->bm_lock);
#line 679
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 682
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 682
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 682
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 687
    goto ldv_42017;
    ldv_42016: 
#line 688
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 688
    __min2 = end;
#line 688
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 689
    p_addr = bm_map_paddr(b, offset);
#line 690
    bm = p_addr + (offset & 511UL);
#line 691
    offset = offset + do_now;
#line 692
    goto ldv_42014;
    ldv_42013: 
#line 693
    tmp___5 = buffer;
#line 693
    buffer = buffer + 1;
#line 693
    tmp___6 = bm;
#line 693
    bm = bm + 1;
#line 693
    *tmp___5 = *tmp___6;
    ldv_42014: 
#line 692
    tmp___7 = do_now;
#line 692
    do_now = do_now - (size_t )1;
#line 692
    if (tmp___7 != 0UL) {
#line 693
      goto ldv_42013;
    } else {

    }
#line 694
    bm_unmap(p_addr);
    ldv_42017: ;
#line 687
    if (offset < end) {
#line 688
      goto ldv_42016;
    } else {

    }

  }
#line 697
  spin_unlock_irq(& b->bm_lock);
#line 698
  return;
}
}
#line 701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 703
  b = mdev->bitmap;
#line 704
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 704
  if (_b != 0) {
#line 704
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           704);
  } else {

  }
#line 704
  if (_b != 0) {
#line 704
    return;
  } else {

  }
#line 705
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 705
  if (_b___0 != 0) {
#line 705
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 705
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 705
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           705);
  } else {

  }
#line 705
  if (_b___0 != 0) {
#line 705
    return;
  } else {

  }
#line 707
  spin_lock_irq(& b->bm_lock);
#line 708
  bm_memset(b, 0UL, 255, b->bm_words);
#line 709
  bm_clear_surplus(b);
#line 710
  b->bm_set = b->bm_bits;
#line 711
  spin_unlock_irq(& b->bm_lock);
#line 712
  return;
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 717
  b = mdev->bitmap;
#line 718
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 718
  if (_b != 0) {
#line 718
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 718
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 718
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           718);
  } else {

  }
#line 718
  if (_b != 0) {
#line 718
    return;
  } else {

  }
#line 719
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 719
  if (_b___0 != 0) {
#line 719
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 719
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 719
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           719);
  } else {

  }
#line 719
  if (_b___0 != 0) {
#line 719
    return;
  } else {

  }
#line 721
  spin_lock_irq(& b->bm_lock);
#line 722
  bm_memset(b, 0UL, 0, b->bm_words);
#line 723
  b->bm_set = 0UL;
#line 724
  spin_unlock_irq(& b->bm_lock);
#line 725
  return;
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 729
  b = (struct drbd_bitmap *)bio->bi_private;
#line 730
  uptodate = (int )bio->bi_flags & 1;
#line 737
  if (error == 0 && uptodate == 0) {
#line 738
    error = -5;
  } else {

  }
#line 740
  if (error != 0) {
#line 743
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 745
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 745
  if (tmp != 0) {
#line 746
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 748
  bio_put(bio);
#line 749
  return;
}
}
#line 751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 754
  tmp = bio_alloc(208U, 1);
#line 754
  bio = tmp;
#line 756
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 758
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 762
  __min1 = 4096U;
#line 762
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 762
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 762
  len = __min1 < __min2 ? __min1 : __min2;
#line 765
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 766
  bio->bi_sector = on_disk_sector;
#line 767
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 768
  bio->bi_private = (void *)b;
#line 769
  bio->bi_end_io = & bm_async_io_complete;
#line 771
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 771
  if (tmp___1 != 0) {
#line 772
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 773
    bio_endio(bio, -5);
  } else {
#line 775
    submit_bio(rw, bio);
  }
#line 776
  return;
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 817
  b = mdev->bitmap;
#line 822
  err = 0;
#line 824
  tmp = bm_is_locked(b);
#line 824
  __ret_warn_on = tmp == 0;
#line 824
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 824
  if (tmp___0 != 0L) {
#line 824
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       824);
  } else {

  }
#line 824
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 828
  tmp___1 = drbd_bm_words(mdev);
#line 828
  bm_words = (int )tmp___1;
#line 829
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 835
  now = jiffies;
#line 836
  atomic_set(& b->bm_async_io, num_pages);
#line 837
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 840
  i = 0;
#line 840
  goto ldv_42069;
  ldv_42068: 
#line 841
  bm_page_io_async(mdev, b, i, rw);
#line 840
  i = i + 1;
  ldv_42069: ;
#line 840
  if (i < num_pages) {
#line 841
    goto ldv_42068;
  } else {

  }
#line 843
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 843
  drbd_blk_run_queue(tmp___2);
#line 844
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 844
  if (tmp___3 == 0) {
#line 844
    goto ldv_42071;
  } else {

  }
#line 844
  tmp___4 = get_current();
#line 844
  __wait.flags = 0U;
#line 844
  __wait.private = (void *)tmp___4;
#line 844
  __wait.func = & autoremove_wake_function;
#line 844
  __wait.task_list.next = & __wait.task_list;
#line 844
  __wait.task_list.prev = & __wait.task_list;
  ldv_42074: 
#line 844
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 844
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 844
  if (tmp___5 == 0) {
#line 844
    goto ldv_42073;
  } else {

  }
#line 844
  schedule();
#line 844
  goto ldv_42074;
  ldv_42073: 
#line 844
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_42071: 
#line 846
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 846
  if (tmp___8 != 0) {
#line 847
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 847
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 847
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 848
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 849
    err = -5;
  } else {

  }
#line 852
  now = jiffies;
#line 853
  if (rw == 1) {
#line 857
    drbd_md_flush(mdev);
  } else {
#line 860
    b->bm_set = bm_count_bits_swap_endian(b);
#line 861
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 861
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 861
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 864
  now = b->bm_set;
#line 866
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 866
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 866
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 866
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 869
  return (err);
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 878
  tmp = bm_rw(mdev, 0);
#line 878
  return (tmp);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 887
  tmp = bm_rw(mdev, 1);
#line 887
  return (tmp);
}
}
#line 899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 901
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 904
  err = 0;
#line 906
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 907
  tmp = drbd_bm_words(mdev);
#line 907
  bm_words = (int )tmp;
#line 908
  offset = (int )(enr << 6);
#line 909
  _min1 = 64;
#line 909
  _min2 = bm_words - offset;
#line 909
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 910
  if (num_words <= 63) {
#line 911
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 911
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 912
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 912
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 914
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 914
  if (tmp___4 == 0) {
#line 916
    err = -5;
#line 917
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 920
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 921
    i = 0;
#line 921
    goto ldv_42097;
    ldv_42096: 
#line 922
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 921
    i = i + 1;
    ldv_42097: ;
#line 921
    if (i <= 3) {
#line 922
      goto ldv_42096;
    } else {

    }

  } else {

  }
#line 924
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 925
  mutex_unlock(& mdev->md_io_mutex);
#line 926
  return (err);
}
}
#line 936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 939
  b = mdev->bitmap;
#line 940
  i = 0xffffffffffffffffUL;
#line 944
  if (b->bm_bits < bm_fo) {
#line 945
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 947
    goto ldv_42113;
    ldv_42112: 
#line 949
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 950
    offset = bit_offset >> 6;
#line 951
    p_addr = __bm_map_paddr(b, offset, km);
#line 953
    if ((int )find_zero_bit != 0) {
#line 954
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 956
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 958
    __bm_unmap(p_addr, km);
#line 959
    if (i <= 32767UL) {
#line 960
      i = bit_offset + i;
#line 961
      if (b->bm_bits <= i) {
#line 962
        goto ldv_42110;
      } else {

      }
#line 963
      goto found;
    } else {

    }
#line 965
    bm_fo = bit_offset + 32768UL;
    ldv_42113: ;
#line 947
    if (b->bm_bits > bm_fo) {
#line 948
      goto ldv_42112;
    } else {

    }
    ldv_42110: 
#line 967
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 970
  return (i);
}
}
#line 973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 976
  b = mdev->bitmap;
#line 977
  i = 0xffffffffffffffffUL;
#line 979
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 979
  if (_b != 0) {
#line 979
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 979
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 979
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           979);
  } else {

  }
#line 979
  if (_b != 0) {
#line 979
    return (i);
  } else {

  }
#line 980
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 980
  if (_b___0 != 0) {
#line 980
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           980);
  } else {

  }
#line 980
  if (_b___0 != 0) {
#line 980
    return (i);
  } else {

  }
#line 982
  spin_lock_irq(& b->bm_lock);
#line 983
  tmp___3 = bm_is_locked(b);
#line 983
  if (tmp___3 != 0) {
#line 984
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 986
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 988
  spin_unlock_irq(& b->bm_lock);
#line 989
  return (i);
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 994
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 994
  return (tmp);
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1010
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1010
  return (tmp);
}
}
#line 1013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1016
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1016
  return (tmp);
}
}
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long e ,
                        int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1028
  b = mdev->bitmap;
#line 1029
  p_addr = 0;
#line 1031
  last_page_nr = 0xffffffffffffffffUL;
#line 1032
  c = 0;
#line 1034
  if (b->bm_bits <= e) {
#line 1035
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1037
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1039
  bitnr = s;
#line 1039
  goto ldv_42153;
  ldv_42152: 
#line 1040
  offset = bitnr >> 6;
#line 1041
  page_nr = offset >> 9;
#line 1042
  if (page_nr != last_page_nr) {
#line 1043
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1044
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1045
    p_addr = __bm_map_paddr(b, offset, km);
#line 1046
    last_page_nr = page_nr;
  } else {

  }
#line 1048
  if (val != 0) {
#line 1049
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1049
    c = (tmp___1 == 0) + c;
  } else {
#line 1051
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1051
    c = c - (tmp___2 != 0);
  }
#line 1039
  bitnr = bitnr + 1UL;
  ldv_42153: ;
#line 1039
  if (bitnr <= e) {
#line 1040
    goto ldv_42152;
  } else {

  }

#line 1053
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1054
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1055
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1056
  return (c);
}
}
#line 1063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                      int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 1067
  b = mdev->bitmap;
#line 1068
  c = 0;
#line 1070
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1070
  if (_b != 0) {
#line 1070
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1070);
  } else {

  }
#line 1070
  if (_b != 0) {
#line 1070
    return (1);
  } else {

  }
#line 1071
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1071
  if (_b___0 != 0) {
#line 1071
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1071
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1071
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1071);
  } else {

  }
#line 1071
  if (_b___0 != 0) {
#line 1071
    return (0);
  } else {

  }
#line 1073
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1073
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1074
  tmp___4 = bm_is_locked(b);
#line 1074
  if (tmp___4 != 0) {
#line 1075
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1077
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1079
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1080
  return (c);
}
}
#line 1084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1086
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1086
  return (tmp);
}
}
#line 1090 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1092
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1092
  return (- tmp);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1102
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1102
  paddr = (unsigned long *)tmp;
#line 1103
  i = first_word;
#line 1103
  goto ldv_42192;
  ldv_42191: 
#line 1104
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1104
  bits = (int )tmp___0;
#line 1105
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1106
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1103
  i = i + 1;
  ldv_42192: ;
#line 1103
  if (i < last_word) {
#line 1104
    goto ldv_42191;
  } else {

  }
#line 1108
  pagefault_enable();
#line 1109
  return;
}
}
#line 1115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1125
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1126
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1133
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1135
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1136
    return;
  } else {

  }
#line 1142
  if (sl != 0UL) {
#line 1143
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1145
  first_page = (int )(sl >> 15);
#line 1146
  last_page = (int )(el >> 15);
#line 1150
  first_word = (int )(sl >> 6) & 511;
#line 1151
  last_word = 512;
#line 1154
  page_nr = first_page;
#line 1154
  goto ldv_42208;
  ldv_42207: 
#line 1155
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1156
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1156, 0);
#line 1156
  _cond_resched();
#line 1157
  first_word = 0;
#line 1154
  page_nr = page_nr + 1;
  ldv_42208: ;
#line 1154
  if (page_nr < last_page) {
#line 1155
    goto ldv_42207;
  } else {

  }
#line 1161
  last_word = (int )(el >> 6) & 511;
#line 1162
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1169
  if (el <= (unsigned long )e) {
#line 1170
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1171
  return;
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long offset ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1183
  b = mdev->bitmap;
#line 1187
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1187
  if (_b != 0) {
#line 1187
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1187
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1187
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1187);
  } else {

  }
#line 1187
  if (_b != 0) {
#line 1187
    return (0);
  } else {

  }
#line 1188
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1188
  if (_b___0 != 0) {
#line 1188
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1188
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1188
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1188);
  } else {

  }
#line 1188
  if (_b___0 != 0) {
#line 1188
    return (0);
  } else {

  }
#line 1190
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1190
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1191
  tmp___4 = bm_is_locked(b);
#line 1191
  if (tmp___4 != 0) {
#line 1192
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1193
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1194
    offset = bitnr >> 6;
#line 1195
    p_addr = bm_map_paddr(b, offset);
#line 1196
    tmp___5 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1196
    i = tmp___5 != 0;
#line 1197
    bm_unmap(p_addr);
  } else
#line 1198
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1199
    i = -1;
  } else {
#line 1201
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1201
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1201
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___7, tmp___6, bitnr, b->bm_bits);
#line 1202
    i = 0;
  }
#line 1205
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1206
  return (i);
}
}
#line 1210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int _b___1 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1213
  b = mdev->bitmap;
#line 1214
  p_addr = 0;
#line 1214
  page_nr = 0xffffffffffffffffUL;
#line 1216
  c = 0;
#line 1223
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1223
  if (_b != 0) {
#line 1223
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1223);
  } else {

  }
#line 1223
  if (_b != 0) {
#line 1223
    return (1);
  } else {

  }
#line 1224
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1224
  if (_b___0 != 0) {
#line 1224
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1224);
  } else {

  }
#line 1224
  if (_b___0 != 0) {
#line 1224
    return (1);
  } else {

  }
#line 1226
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1226
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1227
  tmp___4 = bm_is_locked(b);
#line 1227
  if (tmp___4 != 0) {
#line 1228
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1229
  bitnr = s;
#line 1229
  goto ldv_42250;
  ldv_42249: 
#line 1230
  w = bitnr >> 6;
#line 1231
  if (w >> 9 != page_nr) {
#line 1232
    page_nr = w >> 9;
#line 1233
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1234
      bm_unmap(p_addr);
    } else {

    }
#line 1235
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1237
  _b___1 = b->bm_bits <= bitnr;
#line 1237
  if (_b___1 != 0) {
#line 1237
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___9, tmp___8, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1237);
  } else {

  }
#line 1237
  if (_b___1 != 0) {
#line 1238
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1238
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1238
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
  } else {
#line 1240
    tmp___7 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1240
    c = (tmp___7 != 0) + c;
  }
#line 1229
  bitnr = bitnr + 1UL;
  ldv_42250: ;
#line 1229
  if (bitnr <= (unsigned long )e) {
#line 1230
    goto ldv_42249;
  } else {

  }

#line 1243
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1244
    bm_unmap(p_addr);
  } else {

  }
#line 1245
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1246
  return (c);
}
}
#line 1264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1266
  b = mdev->bitmap;
#line 1271
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1271
  if (_b != 0) {
#line 1271
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1271);
  } else {

  }
#line 1271
  if (_b != 0) {
#line 1271
    return (0);
  } else {

  }
#line 1272
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1272
  if (_b___0 != 0) {
#line 1272
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1272
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1272
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1272);
  } else {

  }
#line 1272
  if (_b___0 != 0) {
#line 1272
    return (0);
  } else {

  }
#line 1274
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1274
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1275
  tmp___4 = bm_is_locked(b);
#line 1275
  if (tmp___4 != 0) {
#line 1276
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1278
  s = (int )(enr << 6);
#line 1279
  _min1 = (enr + 1UL) << 6;
#line 1279
  _min2 = b->bm_words;
#line 1279
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1280
  count = 0;
#line 1281
  if ((size_t )s < b->bm_words) {
#line 1282
    n = e - s;
#line 1283
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1284
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1285
    goto ldv_42276;
    ldv_42275: 
#line 1286
    tmp___5 = bm;
#line 1286
    bm = bm + 1;
#line 1286
    tmp___6 = hweight_long(*tmp___5);
#line 1286
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
    ldv_42276: 
#line 1285
    tmp___7 = n;
#line 1285
    n = n - 1;
#line 1285
    if (tmp___7 != 0) {
#line 1286
      goto ldv_42275;
    } else {

    }
#line 1287
    bm_unmap(p_addr);
  } else {
#line 1289
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1289
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1289
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___9,
           tmp___8, s);
  }
#line 1291
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1292
  return (count);
}
}
#line 1296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1298
  b = mdev->bitmap;
#line 1302
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1302
  if (_b != 0) {
#line 1302
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1302);
  } else {

  }
#line 1302
  if (_b != 0) {
#line 1302
    return (0UL);
  } else {

  }
#line 1303
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1303
  if (_b___0 != 0) {
#line 1303
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1303
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1303
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1303);
  } else {

  }
#line 1303
  if (_b___0 != 0) {
#line 1303
    return (0UL);
  } else {

  }
#line 1305
  spin_lock_irq(& b->bm_lock);
#line 1306
  tmp___3 = bm_is_locked(b);
#line 1306
  if (tmp___3 != 0) {
#line 1307
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1308
  weight = b->bm_set;
#line 1310
  s = (int )((unsigned int )al_enr * 16U);
#line 1311
  __min1 = (size_t )(s + 16);
#line 1311
  __min2 = b->bm_words;
#line 1311
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1313
  if ((e + -1) >> 9 != s >> 9) {
#line 1313
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1313
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1313
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1314);
  } else {

  }
#line 1315
  count = 0;
#line 1316
  if ((size_t )s < b->bm_words) {
#line 1317
    do_now = e - s;
#line 1317
    i = do_now;
#line 1318
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1319
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1320
    goto ldv_42300;
    ldv_42299: 
#line 1321
    tmp___6 = hweight_long(*bm);
#line 1321
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1322
    *bm = 0xffffffffffffffffUL;
#line 1323
    bm = bm + 1;
    ldv_42300: 
#line 1320
    tmp___7 = i;
#line 1320
    i = i - 1;
#line 1320
    if (tmp___7 != 0) {
#line 1321
      goto ldv_42299;
    } else {

    }
#line 1325
    bm_unmap(p_addr);
#line 1326
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1327
    if ((size_t )e == b->bm_words) {
#line 1328
      tmp___8 = bm_clear_surplus(b);
#line 1328
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1330
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1332
  weight = b->bm_set - weight;
#line 1333
  spin_unlock_irq(& b->bm_lock);
#line 1334
  return (weight);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 279
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 280
char const   *drbd_role_str(enum drbd_role s ) ;
#line 281
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 163
struct drbd_conf **minor_table ;
#line 1031 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1035
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1037
  return (mdev);
}
}
#line 1371
int proc_details ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1502
struct file_operations  const  drbd_proc_fops ;
#line 1999 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2012
  tmp = drbd_bm_total_weight(mdev);
#line 2012
  *bits_left = tmp - mdev->rs_failed;
#line 2015
  if (*bits_left > mdev->rs_total) {
#line 2021
    __asm__  volatile   ("": : : "memory");
#line 2022
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 2022
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2025
    *per_mil_done = 0U;
  } else {
#line 2028
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2031
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2033
  return;
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 48
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 69
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 71
  x = (int )(res / 50U);
#line 72
  y = 20 - x;
#line 73
  seq_printf(seq, "\t[");
#line 74
  i = 1;
#line 74
  goto ldv_41795;
  ldv_41794: 
#line 75
  seq_printf(seq, "=");
#line 74
  i = i + 1;
  ldv_41795: ;
#line 74
  if (i < x) {
#line 75
    goto ldv_41794;
  } else {

  }
#line 76
  seq_printf(seq, ">");
#line 77
  i = 0;
#line 77
  goto ldv_41798;
  ldv_41797: 
#line 78
  seq_printf(seq, ".");
#line 77
  i = i + 1;
  ldv_41798: ;
#line 77
  if (i < y) {
#line 78
    goto ldv_41797;
  } else {

  }
#line 79
  seq_printf(seq, "] ");
#line 81
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 83
  if (mdev->rs_total > 1048576UL) {
#line 84
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 88
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 101
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 103
  if (dt > 20UL) {
#line 106
    seq_printf(seq, "stalled\n");
#line 107
    return;
  } else {

  }
#line 110
  if (dt == 0UL) {
#line 111
    dt = dt + 1UL;
  } else {

  }
#line 112
  db = mdev->rs_mark_left - rs_left;
#line 113
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 115
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 119
  dbdt = db / dt << 2;
#line 120
  if (dbdt > 1000UL) {
#line 121
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 124
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 128
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 129
  if (dt == 0UL) {
#line 130
    dt = 1UL;
  } else {

  }
#line 131
  db = mdev->rs_total - rs_left;
#line 132
  dbdt = db / dt << 2;
#line 133
  if (dbdt > 1000UL) {
#line 134
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 137
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 139
  seq_printf(seq, " K/sec\n");
#line 140
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 144
  __mptr = (struct lc_element  const  *)e;
#line 144
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 146
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 149
  return;
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 154
  hole = 0;
#line 158
  write_ordering_chars[0] = 110;
#line 158
  write_ordering_chars[1] = 100;
#line 158
  write_ordering_chars[2] = 102;
#line 158
  write_ordering_chars[3] = 98;
#line 165
  tmp = drbd_buildtag();
#line 165
  seq_printf(seq, "version: 8.3.7 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 92, tmp);
#line 188
  i = 0;
#line 188
  goto ldv_41818;
  ldv_41817: 
#line 189
  mdev = minor_to_mdev((unsigned int )i);
#line 190
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 191
    hole = 1;
#line 192
    goto ldv_41816;
  } else {

  }
#line 194
  if (hole != 0) {
#line 195
    hole = 0;
#line 196
    seq_printf(seq, "\n");
  } else {

  }
#line 199
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 201
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 204
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 206
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 206
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 206
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 206
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 206
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 206
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33296.pdsk);
#line 206
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33296.disk);
#line 206
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_33296.peer);
#line 206
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_33296.role);
#line 206
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 236
    tmp___9 = drbd_bm_total_weight(mdev);
#line 236
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 239
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) {
#line 241
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 243
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U) {
#line 244
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 250
  if (proc_details > 0) {
#line 250
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 250
    if (tmp___10 != 0) {
#line 251
      lc_seq_printf_stats(seq, mdev->resync);
#line 252
      lc_seq_printf_stats(seq, mdev->act_log);
#line 253
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 256
  if (proc_details > 1) {
#line 257
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 258
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_41816: 
#line 188
  i = i + 1;
  ldv_41818: ;
#line 188
  if ((unsigned int )i < minor_count) {
#line 189
    goto ldv_41817;
  } else {

  }

#line 264
  return (0);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 269
  tmp = PDE((struct inode  const  *)inode);
#line 269
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 269
  return (tmp___0);
}
}
#line 290
void ldv_check_final_state(void) ;
#line 293
extern void ldv_check_return_value(int  ) ;
#line 299
extern void ldv_initialize(void) ;
#line 302
extern void ldv_handler_precall(void) ;
#line 305
extern int nondet_int(void) ;
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 343
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 333
  LDV_IN_INTERRUPT = 1;
#line 342
  ldv_initialize();
#line 346
  goto ldv_41849;
  ldv_41848: 
#line 350
  tmp = nondet_int();
#line 350
  switch (tmp) {
  case 0: ;
#line 355
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 360
    ldv_handler_precall();
#line 361
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 362
    ldv_check_return_value(res_drbd_proc_open_3);
#line 363
    if (res_drbd_proc_open_3 != 0) {
#line 364
      goto ldv_module_exit;
    } else {

    }
#line 365
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 371
  goto ldv_41846;
  default: ;
#line 372
  goto ldv_41846;
  }
  ldv_41846: ;
  ldv_41849: 
#line 346
  tmp___0 = nondet_int();
#line 346
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 348
    goto ldv_41848;
  } else {

  }

  ldv_module_exit: ;
#line 381
  ldv_check_final_state();
#line 384
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 191 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 348
extern void dump_stack(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 271 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 275
  first = list->next;
#line 276
  last = list->prev;
#line 278
  first->prev = prev;
#line 279
  prev->next = first;
#line 281
  last->next = next;
#line 282
  next->prev = last;
#line 283
  return;
}
}
#line 316 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 319
  tmp = list_empty((struct list_head  const  *)list);
#line 319
  if (tmp == 0) {
#line 320
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 321
    INIT_LIST_HEAD(list);
  } else {

  }
#line 323
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 248 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 164 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13262: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13262;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___0(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5735.ldv_5734.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 43
extern int down_interruptible(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 300 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 302
  tmp = PageTail(page);
#line 302
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 302
  if (tmp___0 != 0L) {
#line 303
    return (page->ldv_12002.first_page);
  } else {

  }
#line 304
  return (page);
}
}
#line 307 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 309
  tmp = compound_head(page);
#line 309
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 309
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17189: ;
#line 63
    goto ldv_17189;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17190: ;
#line 65
    goto ldv_17190;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17191: ;
#line 66
    goto ldv_17191;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 359 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2006
extern void flush_signals(struct task_struct * ) ;
#line 2039
extern void force_sig(int  , struct task_struct * ) ;
#line 994 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 775 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1058 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1060
  return (q->limits.max_segment_size);
}
}
#line 628 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 634
  __asm__  volatile   ("": : : "memory");
#line 635
  return (thi->t_state);
}
}
#line 1040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1042
  return (mdev->minor);
}
}
#line 1053 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1055
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1058
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1058
  if (tmp != 0L) {
#line 1059
    mutex_unlock(& mdev->data.mutex);
#line 1060
    return (0);
  } else {

  }
#line 1062
  return (1);
}
}
#line 1065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1067
  mutex_unlock(& mdev->data.mutex);
#line 1068
  return;
}
}
#line 1087
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1096
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1098
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1115
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1119
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1124
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1132
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1138
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1140
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1142
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1145
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1147
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1151
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1157
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1160
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1163
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1164
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1167
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1172
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1358
mempool_t *drbd_request_mempool ;
#line 1366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1392
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1395
int drbd_worker(struct drbd_thread *thi ) ;
#line 1396
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1397
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1398
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1399
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1400
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1404
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1408
  if (mdev->ov_last_oos_size != 0UL) {
#line 1409
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1413
  mdev->ov_last_oos_size = 0UL;
#line 1414
  return;
}
}
#line 1417
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) ;
#line 1420
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1421
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1422
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1423
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1424
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1425
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1426
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1427
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1429
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1430
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1431
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1432
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1433
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1434
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1435
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1436
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1438
void resync_timer_fn(unsigned long data ) ;
#line 1442
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1447
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1462
  if (level == 1) {
#line 1463
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1465
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1467
  return (err);
}
}
#line 1470 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1472
  val = 1;
#line 1473
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1475
  return;
}
}
#line 1477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1479
  val = 0;
#line 1480
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1482
  return;
}
}
#line 1498
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1508
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1509
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1511
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1512
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1513
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1514
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1517
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1521
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1598
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp == 0) {
#line 1598
    goto ldv_42155;
  } else {

  }
#line 1598
  tmp___0 = get_current();
#line 1598
  __wait.flags = 0U;
#line 1598
  __wait.private = (void *)tmp___0;
#line 1598
  __wait.func = & autoremove_wake_function;
#line 1598
  __wait.task_list.next = & __wait.task_list;
#line 1598
  __wait.task_list.prev = & __wait.task_list;
  ldv_42158: 
#line 1598
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1598
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp___1 == 0) {
#line 1598
    goto ldv_42157;
  } else {

  }
#line 1598
  schedule();
#line 1598
  goto ldv_42158;
  ldv_42157: 
#line 1598
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42155: ;
#line 1601
  return;
}
}
#line 1602 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1604
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1605
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1606
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_42181;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33296.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_42181;
  }
  ldv_42181: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error____0(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1721
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1807 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1810
  tmp = spinlock_check(& q->q_lock);
#line 1810
  flags = _raw_spin_lock_irqsave(tmp);
#line 1811
  list_add_tail(& w->list, & q->q);
#line 1812
  up(& q->s);
#line 1814
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1815
  return;
}
}
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1819
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1819
  if (tmp != 0) {
#line 1820
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1821
  return;
}
}
#line 1823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1825
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1826
  wake_asender(mdev);
#line 1827
  return;
}
}
#line 1829 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1833
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1833
  return (tmp);
}
}
#line 1848 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1850
  _drbd_thread_stop(thi, 0, 1);
#line 1851
  return;
}
}
#line 1908 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1910
  atomic_inc(& mdev->rs_pending_cnt);
#line 1911
  return;
}
}
#line 2239 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2241
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2241
  if (tmp___0 != 0) {
#line 2242
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2242
    drbd_blk_run_queue(tmp);
#line 2243
    put_ldev(mdev);
  } else {

  }
#line 2245
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_42431;
  ldv_42430: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_42431: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_42430;
  } else {

  }

#line 31
  return (0);
}
}
#line 35
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 36
void drbd_endio_read_sec(struct bio *bio , int error ) ;
#line 37
void drbd_endio_write_sec(struct bio *bio , int error ) ;
#line 38
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 47
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 48
    tmp = mdev_to_minor(mdev);
#line 48
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 51
    dump_stack();
#line 52
    bio_endio(bio, -19);
#line 53
    return;
  } else {

  }
#line 56
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 56
  if (tmp___0 != 0) {
#line 57
    bio_endio(bio, -5);
  } else {
#line 59
    generic_make_request(bio);
  }
#line 60
  return;
}
}
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 86
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 87
  md_io->error = error;
#line 89
  complete(& md_io->event);
#line 90
  return;
}
}
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  raw_spinlock_t *tmp___5 ;
  int tmp___6 ;

  {
#line 97
  flags = 0UL;
#line 98
  e = 0;
#line 100
  uptodate = (int )bio->bi_flags & 1;
#line 102
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 103
  mdev = e->mdev;
#line 105
  if (error != 0) {
#line 106
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 106
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 106
    printk("<4>%s %s: read: error=%d s=%llus\n", tmp___0, tmp, error, (unsigned long long )e->sector);
  } else {

  }
#line 108
  if (error == 0 && uptodate == 0) {
#line 109
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 109
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 109
    printk("<4>%s %s: read: setting error to -EIO s=%llus\n", tmp___2, tmp___1, (unsigned long long )e->sector);
#line 114
    error = -5;
  } else {

  }
#line 117
  if (e->block_id == 0ULL) {
#line 117
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 117
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 117
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           117);
  } else {

  }
#line 119
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 119
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 120
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 121
  list_del(& e->w.list);
#line 122
  tmp___6 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 122
  if (tmp___6 != 0) {
#line 123
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 124
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 126
  drbd_chk_io_error____0(mdev, error, 0, "drbd_endio_read_sec");
#line 127
  drbd_queue_work(& mdev->data.work, & e->w);
#line 128
  put_ldev(mdev);
#line 129
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_write_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  int uptodate ;
  int is_barrier ;
  bool tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 136
  flags = 0UL;
#line 137
  e = 0;
#line 143
  uptodate = (int )bio->bi_flags & 1;
#line 144
  tmp = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 144
  is_barrier = (int )tmp;
#line 146
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 147
  mdev = e->mdev;
#line 149
  if (error != 0) {
#line 150
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 150
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 150
    printk("<4>%s %s: write: error=%d s=%llus\n", tmp___1, tmp___0, error, (unsigned long long )e->sector);
  } else {

  }
#line 152
  if (error == 0 && uptodate == 0) {
#line 153
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    printk("<4>%s %s: write: setting error to -EIO s=%llus\n", tmp___3, tmp___2, (unsigned long long )e->sector);
#line 158
    error = -5;
  } else {

  }
#line 163
  if ((error != 0 && is_barrier != 0) && (e->flags & 8U) != 0U) {
#line 164
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 165
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 165
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 166
    list_del(& e->w.list);
#line 167
    e->w.cb = & w_e_reissue;
#line 170
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 171
    drbd_queue_work(& mdev->data.work, & e->w);
#line 172
    return;
  } else {

  }
#line 175
  if (e->block_id == 0ULL) {
#line 175
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 175
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 175
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___6, tmp___5,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           175);
  } else {

  }
#line 177
  tmp___7 = spinlock_check(& mdev->req_lock);
#line 177
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 178
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 179
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 185
  e_sector = e->sector;
#line 186
  do_al_complete_io = (int )e->flags & 1;
#line 188
  list_del(& e->w.list);
#line 189
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 196
  if (is_syncer_req != 0) {
#line 196
    tmp___8 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 196
    do_wake = tmp___8;
  } else {
#line 196
    tmp___9 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 196
    do_wake = tmp___9;
  }
#line 200
  if (error != 0) {
#line 201
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec");
  } else {

  }
#line 202
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 204
  if (is_syncer_req != 0) {
#line 205
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 207
  if (do_wake != 0) {
#line 208
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 210
  if (do_al_complete_io != 0) {
#line 211
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 213
  wake_asender(mdev);
#line 214
  put_ldev(mdev);
#line 215
  return;
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  raw_spinlock_t *tmp___5 ;

  {
#line 223
  req = (struct drbd_request *)bio->bi_private;
#line 224
  mdev = req->mdev;
#line 227
  uptodate = (int )bio->bi_flags & 1;
#line 229
  if (error != 0) {
#line 230
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 232
  if (error == 0 && uptodate == 0) {
#line 233
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 233
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 233
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 238
    error = -5;
  } else {

  }
#line 242
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 242
  if (tmp___3 != 0L) {
#line 243
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 2UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 249
    what = completed_ok;
  }
#line 251
  bio_put(req->private_bio);
#line 252
  tmp___4 = ERR_PTR((long )error);
#line 252
  req->private_bio = (struct bio *)tmp___4;
#line 254
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 254
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 255
  __req_mod(req, what, & m);
#line 256
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 258
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 259
    complete_master_bio(mdev, & m);
  } else {

  }
#line 260
  return;
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 264
  __mptr = (struct drbd_work  const  *)w;
#line 264
  req = (struct drbd_request *)__mptr;
#line 271
  drbd_req_free(req);
#line 273
  return (1);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 278
  __mptr = (struct drbd_work  const  *)w;
#line 278
  req = (struct drbd_request *)__mptr;
#line 284
  spin_lock_irq(& mdev->req_lock);
#line 285
  if ((cancel != 0 || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.pdsk <= 4) {
#line 288
    _req_mod(req, send_canceled);
#line 289
    spin_unlock_irq(& mdev->req_lock);
#line 290
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 291
    return (1);
  } else {

  }
#line 293
  spin_unlock_irq(& mdev->req_lock);
#line 295
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 295
  return (tmp___1);
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 300
  _b = cancel != 0;
#line 300
  if (_b != 0) {
#line 300
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           300);
  } else {

  }
#line 300
  if (_b != 0) {
#line 300
    return (1);
  } else {

  }
#line 301
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 301
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 301
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 302
  return (1);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 312
  desc.tfm = tfm;
#line 313
  desc.flags = 0U;
#line 315
  sg_init_table(& sg, 1U);
#line 316
  crypto_hash_init(& desc);
#line 318
  bvec = bio->bi_io_vec;
#line 318
  i = 0;
#line 318
  goto ldv_42649;
  ldv_42648: 
#line 319
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 320
  crypto_hash_update(& desc, & sg, sg.length);
#line 318
  bvec = bvec + 1;
#line 318
  i = i + 1;
  ldv_42649: ;
#line 318
  if ((int )bio->bi_vcnt > i) {
#line 319
    goto ldv_42648;
  } else {

  }
#line 322
  crypto_hash_final(& desc, (u8 *)digest);
#line 323
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 327
  __mptr = (struct drbd_work  const  *)w;
#line 327
  e = (struct drbd_epoch_entry *)__mptr;
#line 332
  if (e->block_id != 2205466966ULL) {
#line 332
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           332);
  } else {

  }
#line 334
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 334
  if (tmp___1 != 0L) {
#line 335
    drbd_free_ee(mdev, e);
#line 336
    return (1);
  } else {

  }
#line 339
  tmp___5 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 339
  if (tmp___5 != 0L) {
#line 340
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 340
    digest_size = (int )tmp___2;
#line 341
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 342
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 343
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 345
      inc_rs_pending(mdev);
#line 346
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 352
      kfree((void const   *)digest);
    } else {
#line 354
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 355
      ok = 0;
    }
  } else {
#line 358
    ok = 1;
  }
#line 360
  drbd_free_ee(mdev, e);
#line 362
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 362
  if (tmp___8 != 0L) {
#line 363
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 363
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 363
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 364
  return (ok);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;

  {
#line 373
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 373
  if (tmp == 0) {
#line 374
    return (0);
  } else {

  }
#line 378
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 379
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 380
    put_ldev(mdev);
#line 381
    return (2);
  } else {

  }
#line 384
  spin_lock_irq(& mdev->req_lock);
#line 385
  list_add(& e->w.list, & mdev->read_ee);
#line 386
  spin_unlock_irq(& mdev->req_lock);
#line 388
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 389
  (e->private_bio)->bi_rw = 0UL;
#line 390
  e->w.cb = & w_e_send_csum;
#line 392
  mdev->read_cnt = mdev->read_cnt + (unsigned int )(size >> 9);
#line 393
  drbd_generic_make_request(mdev, 3, e->private_bio);
#line 395
  return (1);
}
}
#line 398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 401
  mdev = (struct drbd_conf *)data;
#line 404
  tmp = spinlock_check(& mdev->req_lock);
#line 404
  flags = _raw_spin_lock_irqsave(tmp);
#line 406
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 406
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 406
  if (tmp___1 != 0L) {
#line 407
    queue = 1;
#line 408
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U) {
#line 409
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 411
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 413
    queue = 0;
#line 414
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 417
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 420
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 420
  if (tmp___2 != 0 && queue != 0) {
#line 421
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 422
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  unsigned int tmp___0 ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 429
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 429
  capacity = tmp;
#line 430
  tmp___0 = queue_max_segment_size(mdev->rq_queue);
#line 430
  max_segment_size = (int )tmp___0;
#line 434
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 434
  if (tmp___1 != 0L) {
#line 435
    return (1);
  } else {

  }
#line 437
  tmp___4 = __builtin_expect((int )mdev->state.ldv_33296.conn <= 9, 0L);
#line 437
  if (tmp___4 != 0L) {
#line 438
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 438
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 438
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___3,
           tmp___2);
#line 439
    return (0);
  } else {

  }
#line 442
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 272U) {
#line 443
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 443
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 443
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 443
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___7, tmp___6, tmp___5);
  } else {

  }
#line 446
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 446
  if (tmp___10 == 0) {
#line 451
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 451
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 451
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___9, tmp___8);
#line 452
    mdev->resync_work.cb = & w_resync_inactive;
#line 453
    return (1);
  } else {

  }
#line 456
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 457
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 459
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 460
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 461
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 463
    mx = 1;
  }
#line 464
  mutex_unlock(& mdev->data.mutex);
#line 467
  if (number > mx) {
#line 468
    mx = number;
  } else {

  }
#line 471
  if (pe + number > mx) {
#line 472
    number = mx - pe;
  } else {

  }
#line 475
  i = 0;
#line 475
  goto ldv_42705;
  ldv_42704: 
#line 477
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 478
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 479
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 480
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 482
    queued = 1;
#line 483
    sndbuf = 0;
  }
#line 485
  mutex_unlock(& mdev->data.mutex);
#line 486
  if (sndbuf / 2 < queued) {
#line 487
    goto requeue;
  } else {

  }
  next_sector: 
#line 490
  size = 4096;
#line 491
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 493
  if (bit == 0xffffffffffffffffUL) {
#line 494
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 495
    mdev->resync_work.cb = & w_resync_inactive;
#line 496
    put_ldev(mdev);
#line 497
    return (1);
  } else {

  }
#line 500
  sector = bit << 3;
#line 502
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 502
  if (tmp___11 != 0) {
#line 503
    mdev->bm_resync_fo = bit;
#line 504
    goto requeue;
  } else {

  }
#line 506
  mdev->bm_resync_fo = bit + 1UL;
#line 508
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 508
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 508
  if (tmp___13 != 0L) {
#line 509
    drbd_rs_complete_io(mdev, sector);
#line 510
    goto next_sector;
  } else {

  }
#line 526
  align = 1;
  ldv_42697: ;
#line 528
  if (size + 4096 > max_segment_size) {
#line 529
    goto ldv_42696;
  } else {

  }
#line 532
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 533
    goto ldv_42696;
  } else {

  }
#line 536
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 537
    goto ldv_42696;
  } else {

  }
#line 543
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 543
  if (tmp___14 != 1) {
#line 544
    goto ldv_42696;
  } else {

  }
#line 545
  bit = bit + 1UL;
#line 546
  size = size + 4096;
#line 547
  if (4096 << align <= size) {
#line 548
    align = align + 1;
  } else {

  }
#line 549
  i = i + 1;
#line 550
  goto ldv_42697;
  ldv_42696: ;
#line 553
  if (size > 4096) {
#line 554
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 558
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 559
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 560
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 561
    tmp___15 = read_for_csum(mdev, sector, size);
#line 561
    switch (tmp___15) {
    case 0: 
#line 563
    put_ldev(mdev);
#line 564
    return (0);
    case 2: 
#line 566
    drbd_rs_complete_io(mdev, sector);
#line 567
    mdev->bm_resync_fo = sector >> 3;
#line 568
    goto requeue;
    }
  } else {
#line 572
    inc_rs_pending(mdev);
#line 573
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 573
    if (tmp___22 == 0) {
#line 575
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 576
      atomic_dec(& mdev->rs_pending_cnt);
#line 576
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 576
      if (tmp___21 < 0) {
#line 576
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 576
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 576, tmp___18);
      } else {

      }
#line 577
      put_ldev(mdev);
#line 578
      return (0);
    } else {

    }
  }
#line 475
  i = i + 1;
  ldv_42705: ;
#line 475
  if (i < number) {
#line 476
    goto ldv_42704;
  } else {

  }
#line 583
  tmp___23 = drbd_bm_bits(mdev);
#line 583
  if (mdev->bm_resync_fo >= tmp___23) {
#line 590
    mdev->resync_work.cb = & w_resync_inactive;
#line 591
    put_ldev(mdev);
#line 592
    return (1);
  } else {

  }
  requeue: 
#line 596
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 597
  put_ldev(mdev);
#line 598
  return (1);
}
}
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 605
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 605
  capacity = tmp;
#line 607
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 607
  if (tmp___0 != 0L) {
#line 608
    return (1);
  } else {

  }
#line 610
  tmp___3 = __builtin_expect((int )mdev->state.ldv_33296.conn <= 9, 0L);
#line 610
  if (tmp___3 != 0L) {
#line 611
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 612
    return (0);
  } else {

  }
#line 615
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 616
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 616
  if (tmp___4 > number) {
#line 617
    goto requeue;
  } else {

  }
#line 619
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 619
  number = number - tmp___5;
#line 621
  sector = mdev->ov_position;
#line 622
  i = 0;
#line 622
  goto ldv_42723;
  ldv_42722: ;
#line 623
  if (sector >= capacity) {
#line 624
    mdev->resync_work.cb = & w_resync_inactive;
#line 625
    return (1);
  } else {

  }
#line 628
  size = 4096;
#line 630
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 630
  if (tmp___6 != 0) {
#line 631
    mdev->ov_position = sector;
#line 632
    goto requeue;
  } else {

  }
#line 635
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 636
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 638
  inc_rs_pending(mdev);
#line 639
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 639
  if (tmp___11 == 0) {
#line 640
    atomic_dec(& mdev->rs_pending_cnt);
#line 640
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 640
    if (tmp___10 < 0) {
#line 640
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 640
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 640
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 640
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 640, tmp___7);
    } else {

    }
#line 641
    return (0);
  } else {

  }
#line 643
  sector = sector + 8UL;
#line 622
  i = i + 1;
  ldv_42723: ;
#line 622
  if (i < number) {
#line 623
    goto ldv_42722;
  } else {

  }
#line 645
  mdev->ov_position = sector;
  requeue: 
#line 648
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 649
  return (1);
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 655
  kfree((void const   *)w);
#line 656
  ov_oos_print(mdev);
#line 657
  drbd_resync_finished(mdev);
#line 659
  return (1);
}
}
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 664
  kfree((void const   *)w);
#line 666
  drbd_resync_finished(mdev);
#line 668
  return (1);
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 677
  khelper_cmd = 0;
#line 682
  tmp___3 = drbd_rs_del_all(mdev);
#line 682
  if (tmp___3 != 0) {
#line 688
    drbd_kick_lo(mdev);
#line 689
    tmp = get_current();
#line 689
    tmp->state = 1L;
#line 690
    schedule_timeout(25L);
#line 691
    tmp___0 = kmalloc___0(24UL, 32U);
#line 691
    w = (struct drbd_work *)tmp___0;
#line 692
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 693
      w->cb = & w_resync_finished;
#line 694
      drbd_queue_work(& mdev->data.work, w);
#line 695
      return (1);
    } else {

    }
#line 697
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 700
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 701
  if (dt == 0UL) {
#line 702
    dt = 1UL;
  } else {

  }
#line 703
  db = mdev->rs_total;
#line 704
  dbdt = db / dt << 2;
#line 705
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 707
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 707
  if (tmp___4 == 0) {
#line 708
    goto out;
  } else {

  }
#line 710
  spin_lock_irq(& mdev->req_lock);
#line 711
  os = mdev->state;
#line 715
  if ((int )os.ldv_33296.conn <= 10) {
#line 716
    goto out_unlock;
  } else {

  }
#line 718
  ns = os;
#line 719
  ns.ldv_33296.conn = 10U;
#line 721
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 721
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 721
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 726
  n_oos = drbd_bm_total_weight(mdev);
#line 728
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 729
    if (n_oos != 0UL) {
#line 730
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 730
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 730
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 732
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 735
      if (mdev->rs_failed != n_oos) {
#line 735
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 735
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 735
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               735);
      } else {

      }
#line 737
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 738
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 740
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 741
        s = mdev->rs_same_csum;
#line 742
        t = mdev->rs_total;
#line 743
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 746
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 746
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 746
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 755
  if (mdev->rs_failed != 0UL) {
#line 756
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 756
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 756
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 758
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 759
      ns.ldv_33296.disk = 4U;
#line 760
      ns.ldv_33296.pdsk = 8U;
    } else {
#line 762
      ns.ldv_33296.disk = 8U;
#line 763
      ns.ldv_33296.pdsk = 4U;
    }
  } else {
#line 766
    ns.ldv_33296.disk = 8U;
#line 767
    ns.ldv_33296.pdsk = 8U;
#line 769
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 770
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 772
        i = 1;
#line 772
        goto ldv_42753;
        ldv_42752: 
#line 773
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 772
        i = i + 1;
        ldv_42753: ;
#line 772
        if (i <= 3) {
#line 773
          goto ldv_42752;
        } else {

        }
#line 774
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 775
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 777
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 777
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 777
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 781
    drbd_uuid_set_bm(mdev, 0ULL);
#line 783
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 787
      i___0 = 0;
#line 787
      goto ldv_42757;
      ldv_42756: 
#line 788
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 787
      i___0 = i___0 + 1;
      ldv_42757: ;
#line 787
      if (i___0 <= 3) {
#line 788
        goto ldv_42756;
      } else {

      }

    } else {

    }
  }
#line 792
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 794
  spin_unlock_irq(& mdev->req_lock);
#line 795
  put_ldev(mdev);
  out: 
#line 797
  mdev->rs_total = 0UL;
#line 798
  mdev->rs_failed = 0UL;
#line 799
  mdev->rs_paused = 0UL;
#line 800
  mdev->ov_start_sector = 0UL;
#line 802
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 802
  if (tmp___19 != 0) {
#line 803
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 804
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 807
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 808
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 810
  return (1);
}
}
#line 814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 816
  tmp = drbd_bio_has_active_page(e->private_bio);
#line 816
  if (tmp != 0) {
#line 818
    spin_lock_irq(& mdev->req_lock);
#line 819
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 820
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 822
    drbd_free_ee(mdev, e);
  }
#line 823
  return;
}
}
#line 831 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 833
  __mptr = (struct drbd_work  const  *)w;
#line 833
  e = (struct drbd_epoch_entry *)__mptr;
#line 836
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 836
  if (tmp___3 != 0L) {
#line 837
    drbd_free_ee(mdev, e);
#line 838
    atomic_dec(& mdev->unacked_cnt);
#line 838
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 838
    if (tmp___2 < 0) {
#line 838
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 838
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             838, tmp);
    } else {

    }
#line 839
    return (1);
  } else {

  }
#line 842
  tmp___7 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 842
  if (tmp___7 != 0L) {
#line 843
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 845
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 845
    if (tmp___6 != 0) {
#line 846
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 849
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 852
  atomic_dec(& mdev->unacked_cnt);
#line 852
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 852
  if (tmp___11 < 0) {
#line 852
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 852
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           852, tmp___8);
  } else {

  }
#line 854
  move_to_net_ee_or_free(mdev, e);
#line 856
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 856
  if (tmp___14 != 0L) {
#line 857
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 858
  return (ok);
}
}
#line 867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 869
  __mptr = (struct drbd_work  const  *)w;
#line 869
  e = (struct drbd_epoch_entry *)__mptr;
#line 872
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 872
  if (tmp___3 != 0L) {
#line 873
    drbd_free_ee(mdev, e);
#line 874
    atomic_dec(& mdev->unacked_cnt);
#line 874
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 874
    if (tmp___2 < 0) {
#line 874
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 874
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 874
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 874
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             874, tmp);
    } else {

    }
#line 875
    return (1);
  } else {

  }
#line 878
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 878
  if (tmp___4 != 0) {
#line 879
    drbd_rs_complete_io(mdev, e->sector);
#line 880
    put_ldev(mdev);
  } else {

  }
#line 883
  tmp___12 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 883
  if (tmp___12 != 0L) {
#line 884
    tmp___8 = __builtin_expect((int )mdev->state.ldv_33296.pdsk > 3, 1L);
#line 884
    if (tmp___8 != 0L) {
#line 885
      inc_rs_pending(mdev);
#line 886
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 888
      tmp___7 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 888
      if (tmp___7 != 0) {
#line 889
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 891
      ok = 1;
    }
  } else {
#line 894
    tmp___11 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 894
    if (tmp___11 != 0) {
#line 895
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 898
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 901
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 904
  atomic_dec(& mdev->unacked_cnt);
#line 904
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 904
  if (tmp___16 < 0) {
#line 904
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 904
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 904
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 904
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           904, tmp___13);
  } else {

  }
#line 906
  move_to_net_ee_or_free(mdev, e);
#line 908
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 908
  if (tmp___19 != 0L) {
#line 909
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 910
  return (ok);
}
}
#line 913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 915
  __mptr = (struct drbd_work  const  *)w;
#line 915
  e = (struct drbd_epoch_entry *)__mptr;
#line 918
  digest = 0;
#line 919
  eq = 0;
#line 921
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 921
  if (tmp___3 != 0L) {
#line 922
    drbd_free_ee(mdev, e);
#line 923
    atomic_dec(& mdev->unacked_cnt);
#line 923
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 923
    if (tmp___2 < 0) {
#line 923
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 923
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             923, tmp);
    } else {

    }
#line 924
    return (1);
  } else {

  }
#line 927
  drbd_rs_complete_io(mdev, e->sector);
#line 929
  di = (struct digest_info *)e->block_id;
#line 931
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 931
  if (tmp___11 != 0L) {
#line 935
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 936
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 936
      digest_size = (int )tmp___4;
#line 937
      if (di->digest_size != digest_size) {
#line 937
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 937
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 937
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               937);
      } else {

      }
#line 938
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 940
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 941
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 942
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 942
      eq = tmp___7 == 0;
#line 943
      kfree((void const   *)digest);
    } else {

    }
#line 946
    if (eq != 0) {
#line 947
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         947U);
#line 949
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 950
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 952
      inc_rs_pending(mdev);
#line 953
      e->block_id = 0xffffffffffffffffULL;
#line 954
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 957
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 958
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 958
    if (tmp___10 != 0) {
#line 959
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 962
  atomic_dec(& mdev->unacked_cnt);
#line 962
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 962
  if (tmp___15 < 0) {
#line 962
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 962
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           962, tmp___12);
  } else {

  }
#line 964
  kfree((void const   *)di);
#line 966
  move_to_net_ee_or_free(mdev, e);
#line 968
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 968
  if (tmp___18 != 0L) {
#line 969
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 969
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 969
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 970
  return (ok);
}
}
#line 973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 975
  __mptr = (struct drbd_work  const  *)w;
#line 975
  e = (struct drbd_epoch_entry *)__mptr;
#line 978
  ok = 1;
#line 980
  tmp = __builtin_expect(cancel != 0, 0L);
#line 980
  if (tmp != 0L) {
#line 981
    goto out;
  } else {

  }
#line 983
  tmp___0 = __builtin_expect(((e->private_bio)->bi_flags & 1UL) == 0UL, 0L);
#line 983
  if (tmp___0 != 0L) {
#line 984
    goto out;
  } else {

  }
#line 986
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 986
  digest_size = (int )tmp___1;
#line 988
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 989
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 990
    drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 991
    inc_rs_pending(mdev);
#line 992
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 994
    if (ok == 0) {
#line 995
      atomic_dec(& mdev->rs_pending_cnt);
#line 995
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 995
      if (tmp___5 < 0) {
#line 995
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 995
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 995, tmp___2);
      } else {

      }
    } else {

    }
#line 996
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1000
  drbd_free_ee(mdev, e);
#line 1002
  atomic_dec(& mdev->unacked_cnt);
#line 1002
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1002
  if (tmp___9 < 0) {
#line 1002
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1002
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1002, tmp___6);
  } else {

  }
#line 1004
  return (ok);
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1009
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1010
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1012
    mdev->ov_last_oos_start = sector;
#line 1013
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1015
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1015U);
#line 1016
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1017
  return;
}
}
#line 1019 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1021
  __mptr = (struct drbd_work  const  *)w;
#line 1021
  e = (struct drbd_epoch_entry *)__mptr;
#line 1025
  eq = 0;
#line 1027
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1027
  if (tmp___3 != 0L) {
#line 1028
    drbd_free_ee(mdev, e);
#line 1029
    atomic_dec(& mdev->unacked_cnt);
#line 1029
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1029
    if (tmp___2 < 0) {
#line 1029
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1029
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1029, tmp);
    } else {

    }
#line 1030
    return (1);
  } else {

  }
#line 1035
  drbd_rs_complete_io(mdev, e->sector);
#line 1037
  di = (struct digest_info *)e->block_id;
#line 1039
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1039
  if (tmp___11 != 0L) {
#line 1040
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1040
    digest_size = (int )tmp___4;
#line 1041
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1042
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1043
      drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1045
      if (di->digest_size != digest_size) {
#line 1045
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               1045);
      } else {

      }
#line 1046
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1046
      eq = tmp___7 == 0;
#line 1047
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1050
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1051
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1051
    if (tmp___10 != 0) {
#line 1052
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1055
  atomic_dec(& mdev->unacked_cnt);
#line 1055
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1055
  if (tmp___15 < 0) {
#line 1055
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1055
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1055, tmp___12);
  } else {

  }
#line 1057
  kfree((void const   *)di);
#line 1059
  if (eq == 0) {
#line 1060
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1062
    ov_oos_print(mdev);
  }
#line 1064
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1067
  drbd_free_ee(mdev, e);
#line 1069
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1069
  if (mdev->ov_left == 0UL) {
#line 1070
    ov_oos_print(mdev);
#line 1071
    drbd_resync_finished(mdev);
  } else {

  }
#line 1074
  return (ok);
}
}
#line 1077 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1079
  __mptr = (struct drbd_work  const  *)w;
#line 1079
  b = (struct drbd_wq_barrier *)__mptr;
#line 1080
  complete(& b->done);
#line 1081
  return (1);
}
}
#line 1084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1086
  __mptr = (struct drbd_work  const  *)w;
#line 1086
  b = (struct drbd_tl_epoch *)__mptr;
#line 1087
  p = & mdev->data.sbuf.barrier;
#line 1088
  ok = 1;
#line 1095
  spin_lock_irq(& mdev->req_lock);
#line 1096
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1097
    cancel = 1;
  } else {

  }
#line 1098
  spin_unlock_irq(& mdev->req_lock);
#line 1099
  if (cancel != 0) {
#line 1100
    return (1);
  } else {

  }
#line 1102
  tmp = drbd_get_data_sock(mdev);
#line 1102
  if (tmp == 0) {
#line 1103
    return (0);
  } else {

  }
#line 1104
  p->barrier = b->br_number;
#line 1108
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1110
  drbd_put_data_sock(mdev);
#line 1112
  return (ok);
}
}
#line 1115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1117
  if (cancel != 0) {
#line 1118
    return (1);
  } else {

  }
#line 1119
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1119
  return (tmp);
}
}
#line 1128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1130
  __mptr = (struct drbd_work  const  *)w;
#line 1130
  req = (struct drbd_request *)__mptr;
#line 1133
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1133
  if (tmp != 0L) {
#line 1134
    req_mod(req, send_canceled);
#line 1135
    return (1);
  } else {

  }
#line 1138
  ok = drbd_send_dblock(mdev, req);
#line 1139
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1141
  return (ok);
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1152
  __mptr = (struct drbd_work  const  *)w;
#line 1152
  req = (struct drbd_request *)__mptr;
#line 1155
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1155
  if (tmp != 0L) {
#line 1156
    req_mod(req, send_canceled);
#line 1157
    return (1);
  } else {

  }
#line 1160
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1163
  if (ok == 0) {
#line 1166
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1167
      val.i = 0U;
#line 1167
      val.ldv_33296.conn = 5U;
#line 1167
      mask.i = 0U;
#line 1167
      mask.ldv_33296.conn = 31U;
#line 1167
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1169
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1171
  return (ok);
}
}
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1176
  odev = mdev;
  ldv_42911: ;
#line 1179
  if (odev->sync_conf.after == -1) {
#line 1180
    return (1);
  } else {

  }
#line 1181
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1182
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1182
  if (_b != 0) {
#line 1182
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1182
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1182
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1182);
  } else {

  }
#line 1182
  if (_b != 0) {
#line 1182
    return (1);
  } else {

  }
#line 1183
  if (((((int )odev->state.ldv_33296.conn > 15 && (int )odev->state.ldv_33296.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1187
    return (0);
  } else {

  }
#line 1188
  goto ldv_42911;
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1200
  rv = 0;
#line 1202
  i = 0;
#line 1202
  goto ldv_42922;
  ldv_42921: 
#line 1203
  odev = minor_to_mdev((unsigned int )i);
#line 1204
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1205
    goto ldv_42918;
  } else {

  }
#line 1206
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1207
    goto ldv_42918;
  } else {

  }
#line 1208
  tmp___0 = _drbd_may_sync_now(odev);
#line 1208
  if (tmp___0 == 0) {
#line 1209
    __ns.i = odev->state.i;
#line 1209
    __ns.ldv_33296.aftr_isp = 1U;
#line 1209
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1209
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_42918: 
#line 1202
  i = i + 1;
  ldv_42922: ;
#line 1202
  if ((unsigned int )i < minor_count) {
#line 1203
    goto ldv_42921;
  } else {

  }

#line 1213
  return (rv);
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1225
  rv = 0;
#line 1227
  i = 0;
#line 1227
  goto ldv_42934;
  ldv_42933: 
#line 1228
  odev = minor_to_mdev((unsigned int )i);
#line 1229
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1230
    goto ldv_42930;
  } else {

  }
#line 1231
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1232
    goto ldv_42930;
  } else {

  }
#line 1233
  if ((unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1234
    tmp___0 = _drbd_may_sync_now(odev);
#line 1234
    if (tmp___0 != 0) {
#line 1235
      __ns.i = odev->state.i;
#line 1235
      __ns.ldv_33296.aftr_isp = 0U;
#line 1235
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1235
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_42930: 
#line 1227
  i = i + 1;
  ldv_42934: ;
#line 1227
  if ((unsigned int )i < minor_count) {
#line 1228
    goto ldv_42933;
  } else {

  }

#line 1240
  return (rv);
}
}
#line 1243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1245
  _raw_write_lock_irq(& global_state_lock);
#line 1246
  _drbd_resume_next(mdev);
#line 1247
  _raw_write_unlock_irq(& global_state_lock);
#line 1248
  return;
}
}
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1252
  _raw_write_lock_irq(& global_state_lock);
#line 1253
  _drbd_pause_after(mdev);
#line 1254
  _raw_write_unlock_irq(& global_state_lock);
#line 1255
  return;
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1261
  if (o_minor == -1) {
#line 1262
    return (101);
  } else {

  }
#line 1263
  if (o_minor < -1) {
#line 1264
    return (132);
  } else {
#line 1263
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1263
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1264
      return (132);
    } else {

    }
  }
#line 1267
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_42947: ;
#line 1269
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1270
    return (133);
  } else {

  }
#line 1273
  if (odev->sync_conf.after == -1) {
#line 1274
    return (101);
  } else {

  }
#line 1277
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1278
  goto ldv_42947;
}
}
#line 1281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1286
  _raw_write_lock_irq(& global_state_lock);
#line 1287
  retcode = sync_after_error(mdev, na);
#line 1288
  if (retcode == 101) {
#line 1289
    mdev->sync_conf.after = na;
    ldv_42954: 
#line 1291
    changes = _drbd_pause_after(mdev);
#line 1292
    tmp = _drbd_resume_next(mdev);
#line 1292
    changes = tmp | changes;
#line 1293
    if (changes != 0) {
#line 1294
      goto ldv_42954;
    } else {

    }

  } else {

  }
#line 1295
  _raw_write_unlock_irq(& global_state_lock);
#line 1296
  return (retcode);
}
}
#line 1299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1301
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1302
  request_ping(mdev);
#line 1303
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1303
  if (tmp != 0 || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1303
    goto ldv_42959;
  } else {

  }
#line 1303
  tmp___0 = get_current();
#line 1303
  __wait.flags = 0U;
#line 1303
  __wait.private = (void *)tmp___0;
#line 1303
  __wait.func = & autoremove_wake_function;
#line 1303
  __wait.task_list.next = & __wait.task_list;
#line 1303
  __wait.task_list.prev = & __wait.task_list;
  ldv_42962: 
#line 1303
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1303
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1303
  if (tmp___1 != 0 || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1303
    goto ldv_42961;
  } else {

  }
#line 1303
  schedule();
#line 1303
  goto ldv_42962;
  ldv_42961: 
#line 1303
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42959: ;
#line 1306
  return;
}
}
#line 1315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1320
  if ((int )mdev->state.ldv_33296.conn > 15) {
#line 1321
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1322
    return;
  } else {

  }
#line 1326
  drbd_rs_cancel_all(mdev);
#line 1328
  if ((unsigned int )side == 17U) {
#line 1332
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1333
    r = (r >> 8) & 255;
#line 1334
    if (r > 0) {
#line 1335
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1335
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1335
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1337
      val.i = 0U;
#line 1337
      val.ldv_33296.conn = 1U;
#line 1337
      mask.i = 0U;
#line 1337
      mask.ldv_33296.conn = 31U;
#line 1337
      drbd_force_state(mdev, mask, val);
#line 1338
      return;
    } else {

    }
  } else {

  }
#line 1342
  drbd_state_lock(mdev);
#line 1344
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1344
  if (tmp___3 == 0) {
#line 1345
    drbd_state_unlock(mdev);
#line 1346
    return;
  } else {

  }
#line 1349
  if ((unsigned int )side == 17U) {
#line 1350
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1354
    get_random_bytes((void *)(& uuid), 8);
#line 1355
    drbd_uuid_set(mdev, 1, uuid);
#line 1356
    drbd_send_sync_uuid(mdev, uuid);
#line 1358
    if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 16U) {
#line 1358
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1358
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1358
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1358);
    } else {

    }
  }
#line 1361
  _raw_write_lock_irq(& global_state_lock);
#line 1362
  ns = mdev->state;
#line 1364
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1364
  ns.ldv_33296.aftr_isp = tmp___6 == 0;
#line 1366
  ns.ldv_33296.conn = (unsigned char )side;
#line 1368
  if ((unsigned int )side == 17U) {
#line 1369
    ns.ldv_33296.disk = 4U;
  } else {
#line 1371
    ns.ldv_33296.pdsk = 4U;
  }
#line 1373
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1374
  ns = mdev->state;
#line 1376
  if ((int )ns.ldv_33296.conn <= 9) {
#line 1377
    r = 0;
  } else {

  }
#line 1379
  if (r == 1) {
#line 1380
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1380
    mdev->rs_mark_left = tmp___7;
#line 1380
    mdev->rs_total = tmp___7;
#line 1382
    mdev->rs_failed = 0UL;
#line 1383
    mdev->rs_paused = 0UL;
#line 1384
    tmp___8 = jiffies;
#line 1384
    mdev->rs_mark_time = tmp___8;
#line 1384
    mdev->rs_start = tmp___8;
#line 1386
    mdev->rs_same_csum = 0UL;
#line 1387
    _drbd_pause_after(mdev);
  } else {

  }
#line 1389
  _raw_write_unlock_irq(& global_state_lock);
#line 1390
  put_ldev(mdev);
#line 1392
  if (r == 1) {
#line 1393
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 1393
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1398
    if (mdev->rs_total == 0UL) {
#line 1400
      ping_peer(mdev);
#line 1401
      drbd_resync_finished(mdev);
    } else {

    }
#line 1408
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1409
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1411
    drbd_md_sync(mdev);
  } else {

  }
#line 1413
  drbd_state_unlock(mdev);
#line 1414
  return;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1418
  mdev = thi->mdev;
#line 1419
  w = 0;
#line 1420
  work_list.next = & work_list;
#line 1420
  work_list.prev = & work_list;
#line 1421
  intr = 0;
#line 1423
  tmp = mdev_to_minor(mdev);
#line 1423
  tmp___0 = get_current();
#line 1423
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1425
  goto ldv_42985;
  ldv_42995: 
#line 1426
  drbd_thread_current_set_cpu(mdev);
#line 1428
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1428
  if (tmp___1 != 0) {
#line 1429
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1430
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1431
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1432
    mutex_unlock(& mdev->data.mutex);
#line 1434
    intr = down_interruptible(& mdev->data.work.s);
#line 1436
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1437
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1438
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1439
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1442
  if (intr != 0) {
#line 1443
    if (intr != -4) {
#line 1443
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1443);
    } else {

    }
#line 1444
    tmp___4 = get_current();
#line 1444
    flush_signals(tmp___4);
#line 1445
    tmp___5 = get_t_state(thi);
#line 1445
    _b = (unsigned int )tmp___5 == 1U;
#line 1445
    if (_b != 0) {
#line 1445
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1445);
    } else {

    }
#line 1445
    if (_b != 0) {
#line 1446
      goto ldv_42985;
    } else {

    }
#line 1447
    goto ldv_42986;
  } else {

  }
#line 1450
  tmp___8 = get_t_state(thi);
#line 1450
  if ((unsigned int )tmp___8 != 1U) {
#line 1451
    goto ldv_42986;
  } else {

  }
#line 1456
  w = 0;
#line 1457
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1458
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1458
  _b___0 = tmp___9 != 0;
#line 1458
  if (_b___0 != 0) {
#line 1458
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1458);
  } else {

  }
#line 1458
  if (_b___0 != 0) {
#line 1470
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1471
    goto ldv_42985;
  } else {

  }
#line 1473
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1473
  w = (struct drbd_work *)__mptr;
#line 1474
  list_del_init(& w->list);
#line 1475
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1477
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_33296.conn <= 9);
#line 1477
  if (tmp___12 == 0) {
#line 1479
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1481
      val.i = 0U;
#line 1481
      val.ldv_33296.conn = 5U;
#line 1481
      mask.i = 0U;
#line 1481
      mask.ldv_33296.conn = 31U;
#line 1481
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_42985: 
#line 1425
  tmp___13 = get_t_state(thi);
#line 1425
  if ((unsigned int )tmp___13 == 1U) {
#line 1426
    goto ldv_42995;
  } else {

  }
  ldv_42986: 
#line 1484
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1484
  if (tmp___16 == 0) {
#line 1484
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1484
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1484
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1484);
  } else {

  }
#line 1485
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1485
  if (tmp___19 == 0) {
#line 1485
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1485
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1485
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1485);
  } else {

  }
#line 1487
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1488
  i = 0;
#line 1489
  goto ldv_43002;
  ldv_43001: 
#line 1490
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1491
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1493
  goto ldv_42999;
  ldv_42998: 
#line 1494
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1494
  w = (struct drbd_work *)__mptr___0;
#line 1495
  list_del_init(& w->list);
#line 1496
  (*(w->cb))(mdev, w, 1);
#line 1497
  i = i + 1;
  ldv_42999: 
#line 1493
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1493
  if (tmp___20 == 0) {
#line 1494
    goto ldv_42998;
  } else {

  }
#line 1500
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_43002: 
#line 1489
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1489
  if (tmp___21 == 0) {
#line 1490
    goto ldv_43001;
  } else {

  }
#line 1502
  sema_init(& mdev->data.work.s, 0);
#line 1508
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1510
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 0U || (unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1510
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1510
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1510
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1510);
  } else {

  }
#line 1513
  drbd_thread_stop(& mdev->receiver);
#line 1514
  drbd_mdev_cleanup(mdev);
#line 1516
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1518
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1519
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1520
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1522
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
void __builtin_prefetch(void const   *  , ...) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 565 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 567
  h->next = 0;
#line 568
  h->pprev = 0;
#line 569
  return;
}
}
#line 571 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 573
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 581 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 583
  next = n->next;
#line 584
  pprev = n->pprev;
#line 585
  *pprev = next;
#line 586
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 587
    next->pprev = pprev;
  } else {

  }
#line 588
  return;
}
}
#line 597 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 599
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 599
  if (tmp == 0) {
#line 600
    __hlist_del(n);
#line 601
    INIT_HLIST_NODE(n);
  } else {

  }
#line 603
  return;
}
}
#line 605 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 607
  first = h->first;
#line 608
  n->next = first;
#line 609
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 610
    first->pprev = & n->next;
  } else {

  }
#line 611
  h->first = n;
#line 612
  n->pprev = & h->first;
#line 613
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5735.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5735.rlock);
#line 325
  return;
}
}
#line 127 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 230 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 231 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 233
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 235
extern void sock_release(struct socket * ) ;
#line 238
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13410: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13410;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___1(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 334 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17179: ;
#line 63
    goto ldv_17179;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17180: ;
#line 65
    goto ldv_17180;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17181: ;
#line 66
    goto ldv_17181;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2286 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2288
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2288
  return (tmp);
}
}
#line 2312 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2314
  tmp = test_tsk_thread_flag(p, 2);
#line 2314
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2314
  return ((int )tmp___0);
}
}
#line 282 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 486 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 489 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 491
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  __might_sleep("include/linux/highmem.h", 60, 0);
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 64 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 66
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[38U] ;

  {
#line 229
  cmdnames[0] = "Data";
#line 229
  cmdnames[1] = "DataReply";
#line 229
  cmdnames[2] = "RSDataReply";
#line 229
  cmdnames[3] = "Barrier";
#line 229
  cmdnames[4] = "ReportBitMap";
#line 229
  cmdnames[5] = "BecomeSyncTarget";
#line 229
  cmdnames[6] = "BecomeSyncSource";
#line 229
  cmdnames[7] = "UnplugRemote";
#line 229
  cmdnames[8] = "DataRequest";
#line 229
  cmdnames[9] = "RSDataRequest";
#line 229
  cmdnames[10] = "SyncParam";
#line 229
  cmdnames[11] = "ReportProtocol";
#line 229
  cmdnames[12] = "ReportUUIDs";
#line 229
  cmdnames[13] = "ReportSizes";
#line 229
  cmdnames[14] = "ReportState";
#line 229
  cmdnames[15] = "ReportSyncUUID";
#line 229
  cmdnames[16] = "AuthChallenge";
#line 229
  cmdnames[17] = "AuthResponse";
#line 229
  cmdnames[18] = "StateChgRequest";
#line 229
  cmdnames[19] = "Ping";
#line 229
  cmdnames[20] = "PingAck";
#line 229
  cmdnames[21] = "RecvAck";
#line 229
  cmdnames[22] = "WriteAck";
#line 229
  cmdnames[23] = "RSWriteAck";
#line 229
  cmdnames[24] = "DiscardAck";
#line 229
  cmdnames[25] = "NegAck";
#line 229
  cmdnames[26] = "NegDReply";
#line 229
  cmdnames[27] = "NegRSDReply";
#line 229
  cmdnames[28] = "BarrierAck";
#line 229
  cmdnames[29] = "StateChgReply";
#line 229
  cmdnames[30] = "OVRequest";
#line 229
  cmdnames[31] = "OVReply";
#line 229
  cmdnames[32] = "OVResult";
#line 229
  cmdnames[33] = "CsumRSRequest";
#line 229
  cmdnames[34] = "CsumRSIsInSync";
#line 229
  cmdnames[35] = "SyncParam89";
#line 229
  cmdnames[36] = "CBitmap";
#line 229
  cmdnames[37] = 0;
#line 270
  if ((unsigned int )cmd == 65521U) {
#line 271
    return ("HandShakeM");
  } else {

  }
#line 272
  if ((unsigned int )cmd == 65522U) {
#line 273
    return ("HandShakeS");
  } else {

  }
#line 274
  if ((unsigned int )cmd == 65534U) {
#line 275
    return ("HandShake");
  } else {

  }
#line 276
  if ((unsigned int )cmd > 36U) {
#line 277
    return ("Unknown");
  } else {

  }
#line 278
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 299
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 312
  c->word_offset = c->bit_offset >> 6;
#line 313
  return;
}
}
#line 543 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 545
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 558
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 570
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1085
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1089
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1095
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1105
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1107
void tl_clear(struct drbd_conf *mdev ) ;
#line 1109
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1112
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1113
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1116
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) ;
#line 1118
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1127
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1129
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1130
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1134
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1136
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1153
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1155
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1176
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1177
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1178
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1359
mempool_t *drbd_ee_mempool ;
#line 1361
struct page *drbd_pp_pool ;
#line 1362
spinlock_t drbd_pp_lock ;
#line 1363
int drbd_pp_vacant ;
#line 1364
wait_queue_head_t drbd_pp_wait ;
#line 1384
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1386
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , int force ) ;
#line 1387
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1388
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1389
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1391
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1441
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1448
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1450
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1454
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1484 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1486
  val = 1;
#line 1487
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1489
  return;
}
}
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1493
  val = 1;
#line 1494
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1496
  return;
}
}
#line 1507
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1510
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1536
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1631 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1635
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1635
  return (tmp);
}
}
#line 1689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1691
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1694
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1697
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_42499;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_42499;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42499: ;
#line 1755
  return (s);
}
}
#line 1796 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1799
  tmp = spinlock_check(& q->q_lock);
#line 1799
  flags = _raw_spin_lock_irqsave(tmp);
#line 1800
  list_add(& w->list, & q->q);
#line 1801
  up(& q->s);
#line 1803
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1804
  return;
}
}
#line 1836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1839
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1839
  return (tmp);
}
}
#line 1842 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1845
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1845
  return (tmp);
}
}
#line 1927 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1929
  atomic_inc(& mdev->unacked_cnt);
#line 1930
  return;
}
}
#line 1943 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1945
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 1945
  if (tmp != 0) {
#line 1946
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1947
  return;
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 1959
  atomic_inc(& mdev->net_cnt);
#line 1960
  have_net_conf = (int )mdev->state.ldv_33296.conn > 1;
#line 1961
  if (have_net_conf == 0) {
#line 1962
    put_net_conf(mdev);
  } else {

  }
#line 1963
  return (have_net_conf);
}
}
#line 2184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2186
  mdev->ed_uuid = val;
#line 2187
  return;
}
}
#line 2189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2196
  return ((int )a - (int )b);
}
}
#line 2205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2208
  spin_lock(& mdev->peer_seq_lock);
#line 2209
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2209
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2210
  mdev->peer_seq = m;
#line 2211
  spin_unlock(& mdev->peer_seq_lock);
#line 2212
  if (m == new_seq) {
#line 2213
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2214
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page___0(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_42708;
  ldv_42707: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_42708: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_42707;
  } else {

  }

#line 31
  return (0);
}
}
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 82
  tmp = crypto_tfm_alg_type(tfm);
#line 82
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_42771: ;
#line 207
    goto ldv_42771;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_42776: ;
#line 216
    goto ldv_42776;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_42794;
  ldv_42793: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_42794: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_42793;
      } else {
#line 240
        goto ldv_42795;
      }
    } else {
#line 240
      goto ldv_42795;
    }
  } else {

  }
  ldv_42795: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_42841: ;
#line 162
  goto ldv_42841;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 73
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 75
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 76
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 81
  spin_lock(& mdev->epoch_lock);
#line 82
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 82
  prev = (struct drbd_epoch *)__mptr;
#line 83
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 84
    prev = 0;
  } else {

  }
#line 85
  spin_unlock(& mdev->epoch_lock);
#line 86
  return (prev);
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_page_or_try_alloc(struct drbd_conf *mdev ) 
{ 
  struct page *page ;

  {
#line 93
  page = 0;
#line 97
  if (drbd_pp_vacant > 0) {
#line 98
    spin_lock(& drbd_pp_lock);
#line 99
    page = drbd_pp_pool;
#line 100
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 101
      drbd_pp_pool = (struct page *)page->ldv_12002.ldv_11999.private;
#line 102
      page->ldv_12002.ldv_11999.private = 0UL;
#line 103
      drbd_pp_vacant = drbd_pp_vacant - 1;
    } else {

    }
#line 105
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 110
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 111
    page = alloc_pages(514U, 0U);
  } else {

  }
#line 112
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 113
    atomic_inc(& mdev->pp_in_use);
  } else {

  }
#line 114
  return (page);
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 122
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 122
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 123
    drbd_kick_lo(mdev);
  } else {

  }
#line 124
  return;
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 136
  le = mdev->net_ee.next;
#line 136
  tle = le->next;
#line 136
  goto ldv_42943;
  ldv_42942: 
#line 137
  __mptr = (struct list_head  const  *)le;
#line 137
  e = (struct drbd_epoch_entry *)__mptr;
#line 138
  tmp = drbd_bio_has_active_page___0(e->private_bio);
#line 138
  if (tmp != 0) {
#line 139
    goto ldv_42941;
  } else {

  }
#line 140
  list_move(le, to_be_freed);
#line 136
  le = tle;
#line 136
  tle = le->next;
  ldv_42943: ;
#line 136
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 137
    goto ldv_42942;
  } else {

  }
  ldv_42941: ;
#line 141
  return;
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 146
  reclaimed.next = & reclaimed;
#line 146
  reclaimed.prev = & reclaimed;
#line 149
  maybe_kick_lo(mdev);
#line 150
  spin_lock_irq(& mdev->req_lock);
#line 151
  reclaim_net_ee(mdev, & reclaimed);
#line 152
  spin_unlock_irq(& mdev->req_lock);
#line 154
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 154
  e = (struct drbd_epoch_entry *)__mptr;
#line 154
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 154
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 154
  goto ldv_42957;
  ldv_42956: 
#line 155
  drbd_free_ee(mdev, e);
#line 154
  e = t;
#line 154
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 154
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_42957: ;
#line 154
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 155
    goto ldv_42956;
  } else {

  }

#line 159
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , int retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 169
  page = 0;
#line 170
  tmp = get_current();
#line 170
  wait.flags = 0U;
#line 170
  wait.private = (void *)tmp;
#line 170
  wait.func = & autoremove_wake_function;
#line 170
  wait.task_list.next = & wait.task_list;
#line 170
  wait.task_list.prev = & wait.task_list;
#line 172
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 172
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 173
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 174
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 175
      return (page);
    } else {

    }
  } else {

  }
  ldv_42966: 
#line 179
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 181
  drbd_kick_lo_and_reclaim_net(mdev);
#line 183
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 183
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 184
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 185
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 186
      goto ldv_42965;
    } else {

    }
  } else {

  }
#line 189
  if (retry == 0) {
#line 190
    goto ldv_42965;
  } else {

  }
#line 192
  tmp___4 = get_current();
#line 192
  tmp___5 = signal_pending(tmp___4);
#line 192
  if (tmp___5 != 0) {
#line 193
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 193
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 193
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 194
    goto ldv_42965;
  } else {

  }
#line 197
  schedule();
#line 198
  goto ldv_42966;
  ldv_42965: 
#line 199
  finish_wait(& drbd_pp_wait, & wait);
#line 201
  return (page);
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int free_it ;

  {
#line 210
  spin_lock(& drbd_pp_lock);
#line 211
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 212
    free_it = 1;
  } else {
#line 214
    page->ldv_12002.ldv_11999.private = (unsigned long )drbd_pp_pool;
#line 215
    drbd_pp_pool = page;
#line 216
    drbd_pp_vacant = drbd_pp_vacant + 1;
#line 217
    free_it = 0;
  }
#line 219
  spin_unlock(& drbd_pp_lock);
#line 221
  atomic_dec(& mdev->pp_in_use);
#line 223
  if (free_it != 0) {
#line 224
    __free_pages(page, 0U);
  } else {

  }
#line 226
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 227
  return;
}
}
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free_bio_pages(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct page *p_to_be_freed ;
  struct page *page ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 231
  p_to_be_freed = 0;
#line 236
  spin_lock(& drbd_pp_lock);
#line 237
  bvec = bio->bi_io_vec;
#line 237
  i = 0;
#line 237
  goto ldv_42981;
  ldv_42980: ;
#line 238
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 239
    (bvec->bv_page)->ldv_12002.ldv_11999.private = (unsigned long )p_to_be_freed;
#line 240
    p_to_be_freed = bvec->bv_page;
  } else {
#line 242
    (bvec->bv_page)->ldv_12002.ldv_11999.private = (unsigned long )drbd_pp_pool;
#line 243
    drbd_pp_pool = bvec->bv_page;
#line 244
    drbd_pp_vacant = drbd_pp_vacant + 1;
  }
#line 237
  bvec = bvec + 1;
#line 237
  i = i + 1;
  ldv_42981: ;
#line 237
  if ((int )bio->bi_vcnt > i) {
#line 238
    goto ldv_42980;
  } else {

  }
#line 247
  spin_unlock(& drbd_pp_lock);
#line 248
  atomic_sub((int )bio->bi_vcnt, & mdev->pp_in_use);
#line 250
  goto ldv_42984;
  ldv_42983: 
#line 251
  page = p_to_be_freed;
#line 252
  p_to_be_freed = (struct page *)page->ldv_12002.ldv_11999.private;
#line 253
  page->ldv_12002.ldv_11999.private = 0UL;
#line 254
  put_page(page);
  ldv_42984: ;
#line 250
  if ((unsigned long )p_to_be_freed != (unsigned long )((struct page *)0)) {
#line 251
    goto ldv_42983;
  } else {

  }
#line 257
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 258
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct request_queue *q ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  struct bio *bio ;
  unsigned int ds ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct bvec_merge_data bvm ;
  int l ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int __min1 ;
  int __min2 ;
  int tmp___20 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;

  {
#line 287
  tmp = drbd_insert_fault(mdev, 8U);
#line 287
  if (tmp != 0) {
#line 288
    return (0);
  } else {

  }
#line 290
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 290
  e = (struct drbd_epoch_entry *)tmp___0;
#line 291
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 292
    if ((gfp_mask & 512U) == 0U) {
#line 293
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 293
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 293
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 294
    return (0);
  } else {

  }
#line 297
  bio = bio_alloc(gfp_mask & 4294967293U, (int )(data_size / 4096U + ((data_size & 4095U) != 0U ? 1U : 0U)));
#line 298
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 299
    if ((gfp_mask & 512U) == 0U) {
#line 300
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
      printk("<3>%s %s: alloc_ee: Allocation of a bio failed\n", tmp___4, tmp___3);
    } else {

    }
#line 301
    goto fail1;
  } else {

  }
#line 304
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 305
  bio->bi_sector = sector;
#line 307
  ds = data_size;
#line 308
  goto ldv_43009;
  ldv_43008: 
#line 309
  page = drbd_pp_alloc(mdev, (int )gfp_mask & 16);
#line 310
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 311
    if ((gfp_mask & 512U) == 0U) {
#line 312
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 312
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 312
      printk("<3>%s %s: alloc_ee: Allocation of a page failed\n", tmp___6, tmp___5);
    } else {

    }
#line 313
    goto fail2;
  } else {

  }
#line 315
  __min1 = (int )ds;
#line 315
  __min2 = 4096;
#line 315
  tmp___20 = bio_add_page(bio, page, (unsigned int )(__min1 < __min2 ? __min1 : __min2),
                          0U);
#line 315
  if (tmp___20 == 0) {
#line 316
    drbd_pp_free(mdev, page);
#line 317
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 317
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 317
    printk("<3>%s %s: alloc_ee: bio_add_page(s=%llu,data_size=%u,ds=%u) failed\n",
           tmp___8, tmp___7, (unsigned long long )sector, data_size, ds);
#line 321
    q = bdev_get_queue(bio->bi_bdev);
#line 322
    if ((unsigned long )q->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 323
      bvm.bi_bdev = bio->bi_bdev;
#line 323
      bvm.bi_sector = bio->bi_sector;
#line 323
      bvm.bi_size = bio->bi_size;
#line 323
      bvm.bi_rw = bio->bi_rw;
#line 329
      tmp___9 = (*(q->merge_bvec_fn))(q, & bvm, bio->bi_io_vec + (unsigned long )bio->bi_vcnt);
#line 329
      l = tmp___9;
#line 331
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 331
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 331
      printk("<3>%s %s: merge_bvec_fn() = %d\n", tmp___11, tmp___10, l);
    } else {

    }
#line 335
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    printk("<3>%s %s: bio->bi_max_vecs = %d\n", tmp___13, tmp___12, bio->bi_max_vecs);
#line 336
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    printk("<3>%s %s: bio->bi_vcnt = %d\n", tmp___15, tmp___14, (int )bio->bi_vcnt);
#line 337
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
    printk("<3>%s %s: bio->bi_size = %d\n", tmp___17, tmp___16, bio->bi_size);
#line 338
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 338
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 338
    printk("<3>%s %s: bio->bi_phys_segments = %d\n", tmp___19, tmp___18, bio->bi_phys_segments);
#line 340
    goto fail2;
  } else {

  }
#line 343
  __min1___0 = (int )ds;
#line 343
  __min2___0 = 4096;
#line 343
  ds = ds - (unsigned int )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
  ldv_43009: ;
#line 308
  if (ds != 0U) {
#line 309
    goto ldv_43008;
  } else {

  }

#line 346
  if (bio->bi_size != data_size) {
#line 346
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 346
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 346
    printk("<3>%s %s: ASSERT( data_size == bio->bi_size ) in %s:%d\n", tmp___22, tmp___21,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           346);
  } else {

  }
#line 348
  bio->bi_private = (void *)e;
#line 349
  e->mdev = mdev;
#line 350
  e->sector = sector;
#line 351
  e->size = bio->bi_size;
#line 353
  e->private_bio = bio;
#line 354
  e->block_id = id;
#line 355
  INIT_HLIST_NODE(& e->colision);
#line 356
  e->epoch = 0;
#line 357
  e->flags = 0U;
#line 359
  return (e);
  fail2: 
#line 362
  drbd_pp_free_bio_pages(mdev, bio);
#line 363
  bio_put(bio);
  fail1: 
#line 365
  mempool_free((void *)e, drbd_ee_mempool);
#line 367
  return (0);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 372
  bio = e->private_bio;
#line 373
  drbd_pp_free_bio_pages(mdev, bio);
#line 374
  bio_put(bio);
#line 375
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 375
  if (tmp___1 == 0) {
#line 375
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 375
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 375
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           375);
  } else {

  }
#line 376
  mempool_free((void *)e, drbd_ee_mempool);
#line 377
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 381
  work_list.next = & work_list;
#line 381
  work_list.prev = & work_list;
#line 383
  count = 0;
#line 385
  spin_lock_irq(& mdev->req_lock);
#line 386
  list_splice_init(list, & work_list);
#line 387
  spin_unlock_irq(& mdev->req_lock);
#line 389
  __mptr = (struct list_head  const  *)work_list.next;
#line 389
  e = (struct drbd_epoch_entry *)__mptr;
#line 389
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 389
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 389
  goto ldv_43031;
  ldv_43030: 
#line 390
  drbd_free_ee(mdev, e);
#line 391
  count = count + 1;
#line 389
  e = t;
#line 389
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 389
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43031: ;
#line 389
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 390
    goto ldv_43030;
  } else {

  }

#line 393
  return (count);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 408
  work_list.next = & work_list;
#line 408
  work_list.prev = & work_list;
#line 409
  reclaimed.next = & reclaimed;
#line 409
  reclaimed.prev = & reclaimed;
#line 411
  ok = (int )mdev->state.ldv_33296.conn > 8;
#line 413
  spin_lock_irq(& mdev->req_lock);
#line 414
  reclaim_net_ee(mdev, & reclaimed);
#line 415
  list_splice_init(& mdev->done_ee, & work_list);
#line 416
  spin_unlock_irq(& mdev->req_lock);
#line 418
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 418
  e = (struct drbd_epoch_entry *)__mptr;
#line 418
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 418
  goto ldv_43048;
  ldv_43047: 
#line 419
  drbd_free_ee(mdev, e);
#line 418
  e = t;
#line 418
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43048: ;
#line 418
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 419
    goto ldv_43047;
  } else {

  }
#line 425
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 425
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 425
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 425
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 425
  goto ldv_43057;
  ldv_43056: 
#line 427
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 427
  ok = tmp != 0 && ok != 0;
#line 428
  drbd_free_ee(mdev, e);
#line 425
  e = t;
#line 425
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 425
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_43057: ;
#line 425
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 426
    goto ldv_43056;
  } else {

  }
#line 430
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 432
  return (ok);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 437
  tmp = get_current();
#line 437
  wait.flags = 0U;
#line 437
  wait.private = (void *)tmp;
#line 437
  wait.func = & autoremove_wake_function;
#line 437
  wait.task_list.next = & wait.task_list;
#line 437
  wait.task_list.prev = & wait.task_list;
#line 441
  goto ldv_43065;
  ldv_43064: 
#line 442
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 443
  spin_unlock_irq(& mdev->req_lock);
#line 444
  drbd_kick_lo(mdev);
#line 445
  schedule();
#line 446
  finish_wait(& mdev->ee_wait, & wait);
#line 447
  spin_lock_irq(& mdev->req_lock);
  ldv_43065: 
#line 441
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 441
  if (tmp___0 == 0) {
#line 442
    goto ldv_43064;
  } else {

  }

#line 446
  return;
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 453
  spin_lock_irq(& mdev->req_lock);
#line 454
  _drbd_wait_ee_list_empty(mdev, head);
#line 455
  spin_unlock_irq(& mdev->req_lock);
#line 456
  return;
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 463
  sk = sock->sk;
#line 464
  err = 0;
#line 466
  *what = "listen";
#line 467
  err = (*((sock->ops)->listen))(sock, 5);
#line 468
  if (err < 0) {
#line 469
    goto out;
  } else {

  }
#line 471
  *what = "sock_create_lite";
#line 472
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 474
  if (err < 0) {
#line 475
    goto out;
  } else {

  }
#line 477
  *what = "accept";
#line 478
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 479
  if (err < 0) {
#line 480
    sock_release(*newsock);
#line 481
    *newsock = 0;
#line 482
    goto out;
  } else {

  }
#line 484
  (*newsock)->ops = sock->ops;
  out: ;
#line 487
  return (err);
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 494
  iov.iov_base = buf;
#line 494
  iov.iov_len = size;
#line 498
  msg.msg_name = 0;
#line 498
  msg.msg_namelen = 0;
#line 498
  msg.msg_iov = (struct iovec *)(& iov);
#line 498
  msg.msg_iovlen = 1UL;
#line 498
  msg.msg_control = 0;
#line 498
  msg.msg_controllen = 0UL;
#line 498
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 505
  tmp = current_thread_info();
#line 505
  oldfs = tmp->addr_limit;
#line 506
  tmp___0 = current_thread_info();
#line 506
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 506
  tmp___0->addr_limit = __constr_expr_0;
#line 507
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 508
  tmp___1 = current_thread_info();
#line 508
  tmp___1->addr_limit = oldfs;
#line 510
  return (rv);
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 516
  iov.iov_base = buf;
#line 516
  iov.iov_len = size;
#line 520
  msg.msg_name = 0;
#line 520
  msg.msg_namelen = 0;
#line 520
  msg.msg_iov = (struct iovec *)(& iov);
#line 520
  msg.msg_iovlen = 1UL;
#line 520
  msg.msg_control = 0;
#line 520
  msg.msg_controllen = 0UL;
#line 520
  msg.msg_flags = 16640U;
#line 527
  tmp = current_thread_info();
#line 527
  oldfs = tmp->addr_limit;
#line 528
  tmp___0 = current_thread_info();
#line 528
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 528
  tmp___0->addr_limit = __constr_expr_0;
  ldv_43103: 
#line 531
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 532
  if ((size_t )rv == size) {
#line 533
    goto ldv_43102;
  } else {

  }
#line 540
  if (rv < 0) {
#line 541
    if (rv == -104) {
#line 542
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 542
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 542
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 543
    if (rv != -512) {
#line 544
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 544
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 544
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 545
    goto ldv_43102;
  } else
#line 546
  if (rv == 0) {
#line 547
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 547
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 547
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 548
    goto ldv_43102;
  } else {
#line 554
    goto ldv_43102;
  }
#line 556
  goto ldv_43103;
  ldv_43102: 
#line 558
  tmp___7 = current_thread_info();
#line 558
  tmp___7->addr_limit = oldfs;
#line 560
  if ((size_t )rv != size) {
#line 561
    val.i = 0U;
#line 561
    val.ldv_33296.conn = 4U;
#line 561
    mask.i = 0U;
#line 561
    mask.ldv_33296.conn = 31U;
#line 561
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 563
  return (rv);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 572
  disconnect_on_error = 1;
#line 574
  tmp = get_net_conf(mdev);
#line 574
  if (tmp == 0) {
#line 575
    return (0);
  } else {

  }
#line 577
  what = "sock_create_kern";
#line 578
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 580
  if (err < 0) {
#line 581
    sock = 0;
#line 582
    goto out;
  } else {

  }
#line 585
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 585
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 585
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 595
  __min1 = (mdev->net_conf)->my_addr_len;
#line 595
  __min2 = 28;
#line 595
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 595
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 597
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 598
    src_in6.sin6_port = 0U;
  } else {
#line 600
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 602
  what = "bind before connect";
#line 603
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 606
  if (err < 0) {
#line 607
    goto out;
  } else {

  }
#line 611
  disconnect_on_error = 0;
#line 612
  what = "connect";
#line 613
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 618
  if (err < 0) {
#line 619
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 620
      sock_release(sock);
#line 621
      sock = 0;
    } else {

    }
#line 623
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 630
    disconnect_on_error = 0;
#line 631
    goto ldv_43135;
    default: 
#line 633
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 633
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 633
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_43135: ;
#line 635
    if (disconnect_on_error != 0) {
#line 636
      val.i = 0U;
#line 636
      val.ldv_33296.conn = 1U;
#line 636
      mask.i = 0U;
#line 636
      mask.ldv_33296.conn = 31U;
#line 636
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 638
  put_net_conf(mdev);
#line 639
  return (sock);
}
}
#line 642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 645
  s_estab = 0;
#line 648
  tmp = get_net_conf(mdev);
#line 648
  if (tmp == 0) {
#line 649
    return (0);
  } else {

  }
#line 651
  what = "sock_create_kern";
#line 652
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 654
  if (err != 0) {
#line 655
    s_listen = 0;
#line 656
    goto out;
  } else {

  }
#line 659
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 660
  tmp___0 = random32();
#line 660
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 662
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 663
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 664
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 666
  what = "bind before listen";
#line 667
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 670
  if (err < 0) {
#line 671
    goto out;
  } else {

  }
#line 673
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 676
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 677
    sock_release(s_listen);
  } else {

  }
#line 678
  if (err < 0) {
#line 679
    if ((err != -11 && err != -4) && err != -512) {
#line 680
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 681
      val.i = 0U;
#line 681
      val.ldv_33296.conn = 1U;
#line 681
      mask.i = 0U;
#line 681
      mask.ldv_33296.conn = 31U;
#line 681
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 684
  put_net_conf(mdev);
#line 686
  return (s_estab);
}
}
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 692
  h = & mdev->data.sbuf.header;
#line 694
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 694
  return (tmp);
}
}
#line 697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 699
  h = & mdev->data.sbuf.header;
#line 702
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 704
  if (rr == 8 && h->magic == 1728214147U) {
#line 705
    tmp = __fswab16((int )h->command);
#line 705
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 707
  return (65535);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 720
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 721
    return (0);
  } else {

  }
#line 723
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 725
  if (rr > 0 || rr == -11) {
#line 726
    return (1);
  } else {
#line 728
    sock_release(*sock);
#line 729
    *sock = 0;
#line 730
    return (0);
  }
}
}
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___31 ;

  {
#line 747
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 747
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           747);
  } else {

  }
#line 749
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 749
  if (tmp___3 != 0) {
#line 750
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 750
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 750
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 752
  val.i = 0U;
#line 752
  val.ldv_33296.conn = 8U;
#line 752
  mask.i = 0U;
#line 752
  mask.ldv_33296.conn = 31U;
#line 752
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 752
  if (tmp___4 <= 0) {
#line 753
    return (-2);
  } else {

  }
#line 755
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 757
  sock = 0;
#line 758
  msock = 0;
  ldv_43194: 
#line 761
  try = 0;
  ldv_43186: 
#line 763
  s = drbd_try_connect(mdev);
#line 764
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 765
    goto ldv_43185;
  } else {
#line 764
    try = try + 1;
#line 764
    if (try > 2) {
#line 765
      goto ldv_43185;
    } else {

    }
  }
#line 767
  tmp___5 = get_current();
#line 767
  tmp___5->state = 1L;
#line 768
  schedule_timeout(25L);
#line 769
  goto ldv_43186;
  ldv_43185: ;
#line 771
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 772
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 773
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 774
      sock = s;
#line 775
      s = 0;
    } else
#line 776
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 777
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 778
      msock = s;
#line 779
      s = 0;
    } else {
#line 781
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 781
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 781
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 782
      goto out_release_sockets;
    }
  } else {

  }
#line 786
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 787
    tmp___8 = get_current();
#line 787
    tmp___8->state = 1L;
#line 788
    schedule_timeout(25L);
#line 789
    ok = drbd_socket_okay(mdev, & sock);
#line 790
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 790
    ok = tmp___9 != 0 && ok != 0;
#line 791
    if (ok != 0) {
#line 792
      goto ldv_43188;
    } else {

    }
  } else {

  }
  retry: 
#line 796
  s = drbd_wait_for_connect(mdev);
#line 797
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 798
    tmp___10 = drbd_recv_fp(mdev, s);
#line 798
    try = (int )tmp___10;
#line 799
    drbd_socket_okay(mdev, & sock);
#line 800
    drbd_socket_okay(mdev, & msock);
#line 801
    switch (try) {
    case 65522: ;
#line 803
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 804
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 804
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 804
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 805
      sock_release(sock);
    } else {

    }
#line 807
    sock = s;
#line 808
    goto ldv_43191;
    case 65521: ;
#line 810
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 811
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 812
      sock_release(msock);
    } else {

    }
#line 814
    msock = s;
#line 815
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 816
    goto ldv_43191;
    default: 
#line 818
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 819
    sock_release(s);
#line 820
    tmp___17 = random32();
#line 820
    if ((int )tmp___17 & 1) {
#line 821
      goto retry;
    } else {

    }
    }
    ldv_43191: ;
  } else {

  }
#line 825
  if ((int )mdev->state.ldv_33296.conn <= 1) {
#line 826
    goto out_release_sockets;
  } else {

  }
#line 827
  tmp___20 = get_current();
#line 827
  tmp___21 = signal_pending(tmp___20);
#line 827
  if (tmp___21 != 0) {
#line 828
    tmp___18 = get_current();
#line 828
    flush_signals(tmp___18);
#line 829
    __asm__  volatile   ("": : : "memory");
#line 830
    tmp___19 = get_t_state(& mdev->receiver);
#line 830
    if ((unsigned int )tmp___19 == 2U) {
#line 831
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 834
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 835
    ok = drbd_socket_okay(mdev, & sock);
#line 836
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 836
    ok = tmp___22 != 0 && ok != 0;
#line 837
    if (ok != 0) {
#line 838
      goto ldv_43188;
    } else {

    }
  } else {

  }
#line 840
  goto ldv_43194;
  ldv_43188: 
#line 842
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 843
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 845
  (sock->sk)->sk_allocation = 16U;
#line 846
  (msock->sk)->sk_allocation = 16U;
#line 848
  (sock->sk)->sk_priority = 4U;
#line 849
  (msock->sk)->sk_priority = 6U;
#line 851
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 852
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 853
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 856
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 857
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 858
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 866
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 866
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 866
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 869
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 870
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 874
  drbd_tcp_nodelay(sock);
#line 875
  drbd_tcp_nodelay(msock);
#line 877
  mdev->data.socket = sock;
#line 878
  mdev->meta.socket = msock;
#line 879
  mdev->last_received = jiffies;
#line 881
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 881
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           881);
  } else {

  }
#line 883
  h = drbd_do_handshake(mdev);
#line 884
  if (h <= 0) {
#line 885
    return (h);
  } else {

  }
#line 887
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 889
    tmp___26 = drbd_do_auth(mdev);
#line 889
    switch (tmp___26) {
    case -1: 
#line 891
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
    printk("<3>%s %s: Authentication of peer failed\n", tmp___28, tmp___27);
#line 892
    return (-1);
    case 0: 
#line 894
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
    printk("<3>%s %s: Authentication of peer failed, trying again.\n", tmp___30, tmp___29);
#line 895
    return (0);
    }
  } else {

  }
#line 899
  val___0.i = 0U;
#line 899
  val___0.ldv_33296.conn = 9U;
#line 899
  mask___0.i = 0U;
#line 899
  mask___0.ldv_33296.conn = 31U;
#line 899
  tmp___31 = drbd_request_state(mdev, mask___0, val___0);
#line 899
  if (tmp___31 <= 0) {
#line 900
    return (0);
  } else {

  }
#line 902
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 903
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 905
  atomic_set(& mdev->packet_seq, 0);
#line 906
  mdev->peer_seq = 0U;
#line 908
  drbd_thread_start(& mdev->asender);
#line 910
  drbd_send_protocol(mdev);
#line 911
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 912
  drbd_send_sizes(mdev, 0);
#line 913
  drbd_send_uuids(mdev);
#line 914
  drbd_send_state(mdev);
#line 915
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 916
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 918
  return (1);
  out_release_sockets: ;
#line 921
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 922
    sock_release(sock);
  } else {

  }
#line 923
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 924
    sock_release(msock);
  } else {

  }
#line 925
  return (-1);
}
}
#line 928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 932
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 934
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 934
  if (tmp___1 != 0L) {
#line 935
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 935
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 935
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 936
    return (0);
  } else {

  }
#line 938
  tmp___2 = __fswab16((int )h->command);
#line 938
  h->command = tmp___2;
#line 939
  tmp___3 = __fswab16((int )h->length);
#line 939
  h->length = tmp___3;
#line 940
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 940
  if (tmp___7 != 0L) {
#line 941
    tmp___4 = __fswab32(h->magic);
#line 941
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 941
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 941
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 944
    return (0);
  } else {

  }
#line 946
  mdev->last_received = jiffies;
#line 948
  return (1);
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 955
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 955
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 955
    if (tmp___1 != 0) {
#line 956
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 958
      if (rv != 0) {
#line 959
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 963
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 965
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 968
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 968
  return (tmp___2);
}
}
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 973
  fw = (struct flush_work *)w;
#line 974
  epoch = fw->epoch;
#line 976
  kfree((void const   *)w);
#line 978
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 978
  if (tmp == 0) {
#line 979
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 981
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_33296.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 984
  return (1);
}
}
#line 993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 999
  schedule_flush = 0;
#line 1000
  rv = FE_STILL_LIVE;
#line 1002
  spin_lock(& mdev->epoch_lock);
  ldv_43240: 
#line 1004
  next_epoch = 0;
#line 1005
  finish = 0;
#line 1007
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1009
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1011
  atomic_dec(& epoch->active);
#line 1012
  goto ldv_43229;
  case 1U: 
#line 1014
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1018
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1018
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1021
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1022
  goto ldv_43229;
  case 2U: 
#line 1024
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1025
  goto ldv_43229;
  case 3U: ;
#line 1028
  goto ldv_43229;
  }
  ldv_43229: ;
#line 1031
  if (epoch_size != 0) {
#line 1031
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1031
    if (tmp___3 == 0) {
#line 1031
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1031
      if (tmp___4 != 0) {
#line 1031
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1031
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1031
          if (tmp___5 == 0) {
#line 1037
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1037
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1041
              finish = 1;
#line 1042
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1037
            if (epoch_size == 1) {
#line 1037
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1037
              if (tmp___2 != 0) {
#line 1041
                finish = 1;
#line 1042
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1037
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1037
            if (((unsigned int )ev & 32U) != 0U) {
#line 1041
              finish = 1;
#line 1042
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1043
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1043
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1045
                atomic_inc(& epoch->active);
#line 1046
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1049
  if (finish != 0) {
#line 1050
    if (((unsigned int )ev & 32U) == 0U) {
#line 1051
      spin_unlock(& mdev->epoch_lock);
#line 1052
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1053
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1055
    atomic_dec(& mdev->unacked_cnt);
#line 1055
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1055
    if (tmp___9 < 0) {
#line 1055
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1055
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1055, tmp___6);
    } else {

    }
#line 1057
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1058
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1058
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1059
      list_del(& epoch->list);
#line 1060
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1061
      mdev->epochs = mdev->epochs - 1U;
#line 1062
      kfree((void const   *)epoch);
#line 1064
      if ((unsigned int )rv == 0U) {
#line 1065
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1067
      epoch->flags = 0UL;
#line 1068
      atomic_set(& epoch->epoch_size, 0);
#line 1070
      if ((unsigned int )rv == 0U) {
#line 1071
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1075
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1076
    goto ldv_43239;
  } else {

  }
#line 1078
  epoch = next_epoch;
#line 1079
  goto ldv_43240;
  ldv_43239: 
#line 1081
  spin_unlock(& mdev->epoch_lock);
#line 1083
  if (schedule_flush != 0) {
#line 1085
    tmp___10 = kmalloc___1(32UL, 32U);
#line 1085
    fw = (struct flush_work *)tmp___10;
#line 1086
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1087
      fw->w.cb = & w_flush;
#line 1088
      fw->epoch = epoch;
#line 1089
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1091
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1091
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1091
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1092
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1094
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1095
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1099
  return (rv);
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1110
  write_ordering_str[0] = (char *)"none";
#line 1110
  write_ordering_str[1] = (char *)"drain";
#line 1110
  write_ordering_str[2] = (char *)"flush";
#line 1110
  write_ordering_str[3] = (char *)"barrier";
#line 1117
  pwo = mdev->write_ordering;
#line 1118
  _min1 = pwo;
#line 1118
  _min2 = wo;
#line 1118
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1119
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1120
    wo = WO_bdev_flush;
  } else {

  }
#line 1121
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1122
    wo = WO_drain_io;
  } else {

  }
#line 1123
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1124
    wo = WO_none;
  } else {

  }
#line 1125
  mdev->write_ordering = wo;
#line 1126
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1127
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1127
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1127
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1128
  return;
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;

  {
#line 1138
  e = (struct drbd_epoch_entry *)w;
#line 1139
  bio = e->private_bio;
#line 1151
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1151
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1152
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1152
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1152
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1158
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1159
  bio->bi_sector = e->sector;
#line 1160
  bio->bi_size = e->size;
#line 1161
  bio->bi_idx = 0U;
#line 1163
  bio->bi_flags = bio->bi_flags & 0xf000000000000000UL;
#line 1164
  bio->bi_flags = bio->bi_flags | 1UL;
#line 1167
  bio->bi_phys_segments = 0U;
#line 1168
  bio->bi_next = 0;
#line 1174
  e->w.cb = & e_end_block;
#line 1177
  bio->bi_rw = bio->bi_rw & 0xffffffffffffffdfUL;
#line 1179
  drbd_generic_make_request(mdev, 4, bio);
#line 1181
  return (1);
}
}
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  enum finish_epoch tmp___4 ;
  void *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  enum finish_epoch tmp___9 ;
  int tmp___10 ;

  {
#line 1187
  p = (struct p_barrier *)h;
#line 1190
  _b = (unsigned int )h->length != 8U;
#line 1190
  if (_b != 0) {
#line 1190
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1190
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1190
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1190);
  } else {

  }
#line 1190
  if (_b != 0) {
#line 1190
    return (0);
  } else {

  }
#line 1192
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1193
  _b___0 = (int )h->length != rv;
#line 1193
  if (_b___0 != 0) {
#line 1193
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1193
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1193
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1193);
  } else {

  }
#line 1193
  if (_b___0 != 0) {
#line 1193
    return (0);
  } else {

  }
#line 1195
  inc_unacked(mdev);
#line 1197
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1198
    drbd_kick_lo(mdev);
  } else {

  }
#line 1200
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1201
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1201
  rv = (int )tmp___3;
#line 1208
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1211
  if (rv == 2) {
#line 1212
    return (1);
  } else {

  }
#line 1213
  goto ldv_43273;
  case 2U: ;
  case 1U: ;
#line 1217
  if (rv == 0) {
#line 1218
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1219
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1220
    tmp___4 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1220
    rv = (int )tmp___4;
  } else {

  }
#line 1222
  if (rv == 2) {
#line 1223
    return (1);
  } else {

  }
#line 1228
  goto ldv_43273;
  }
  ldv_43273: 
#line 1233
  tmp___5 = kmalloc___1(40UL, 16U);
#line 1233
  epoch = (struct drbd_epoch *)tmp___5;
#line 1234
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1235
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1235
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1235
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___7, tmp___6);
#line 1236
    tmp___8 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1236
    issue_flush = tmp___8 == 0;
#line 1237
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1238
    if (issue_flush != 0) {
#line 1239
      tmp___9 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1239
      rv = (int )tmp___9;
#line 1240
      if (rv == 2) {
#line 1241
        return (1);
      } else {

      }
    } else {

    }
#line 1244
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1246
    return (1);
  } else {

  }
#line 1249
  epoch->flags = 0UL;
#line 1250
  atomic_set(& epoch->epoch_size, 0);
#line 1251
  atomic_set(& epoch->active, 0);
#line 1253
  spin_lock(& mdev->epoch_lock);
#line 1254
  tmp___10 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1254
  if (tmp___10 != 0) {
#line 1255
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1256
    mdev->current_epoch = epoch;
#line 1257
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1260
    kfree((void const   *)epoch);
  }
#line 1262
  spin_unlock(& mdev->epoch_lock);
#line 1264
  return (1);
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio_vec *bvec ;
  struct page *page ;
  struct bio *bio ;
  int dgs ;
  int ds ;
  int i ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __min1 ;
  int __min2 ;
  void *tmp___6 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int __min1___1 ;
  int __min2___1 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;

  {
#line 1277
  dig_in = mdev->int_dig_in;
#line 1278
  dig_vv = mdev->int_dig_vv;
#line 1280
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1280
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1280
    dgs = (int )tmp;
  } else {
#line 1280
    dgs = 0;
  }
#line 1283
  if (dgs != 0) {
#line 1284
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1285
    if (rr != dgs) {
#line 1286
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1286
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1286
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1288
      return (0);
    } else {

    }
  } else {

  }
#line 1292
  data_size = data_size - dgs;
#line 1294
  _b = (data_size & 511) != 0;
#line 1294
  if (_b != 0) {
#line 1294
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1294
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1294
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1294);
  } else {

  }
#line 1294
  if (_b != 0) {
#line 1294
    return (0);
  } else {

  }
#line 1295
  _b___0 = (unsigned int )data_size > 32768U;
#line 1295
  if (_b___0 != 0) {
#line 1295
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1295
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1295
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1295);
  } else {

  }
#line 1295
  if (_b___0 != 0) {
#line 1295
    return (0);
  } else {

  }
#line 1300
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1301
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1302
    return (0);
  } else {

  }
#line 1303
  bio = e->private_bio;
#line 1304
  ds = data_size;
#line 1305
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1305
  i = (int )bio->bi_idx;
#line 1305
  goto ldv_43307;
  ldv_43306: 
#line 1306
  page = bvec->bv_page;
#line 1307
  __min1 = ds;
#line 1307
  __min2 = 4096;
#line 1307
  tmp___6 = kmap(page);
#line 1307
  rr = drbd_recv(mdev, tmp___6, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1308
  kunmap(page);
#line 1309
  __min1___1 = ds;
#line 1309
  __min2___1 = 4096;
#line 1309
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1310
    drbd_free_ee(mdev, e);
#line 1311
    __min1___0 = ds;
#line 1311
    __min2___0 = 4096;
#line 1311
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1311
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1311
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___8,
           tmp___7, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1313
    return (0);
  } else {

  }
#line 1315
  ds = ds - rr;
#line 1305
  bvec = bvec + 1;
#line 1305
  i = i + 1;
  ldv_43307: ;
#line 1305
  if ((int )bio->bi_vcnt > i) {
#line 1306
    goto ldv_43306;
  } else {

  }

#line 1318
  if (dgs != 0) {
#line 1319
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1320
    tmp___11 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1320
    if (tmp___11 != 0) {
#line 1321
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___10, tmp___9);
#line 1322
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1324
      drbd_free_ee(mdev, e);
#line 1325
      return (0);
    } else {

    }
  } else {

  }
#line 1328
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1329
  return (e);
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1338
  rv = 1;
#line 1341
  page = drbd_pp_alloc(mdev, 1);
#line 1343
  data = kmap(page);
#line 1344
  goto ldv_43328;
  ldv_43327: 
#line 1345
  __min1 = data_size;
#line 1345
  __min2 = 4096;
#line 1345
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1346
  __min1___1 = data_size;
#line 1346
  __min2___1 = 4096;
#line 1346
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1347
    rv = 0;
#line 1348
    __min1___0 = data_size;
#line 1348
    __min2___0 = 4096;
#line 1348
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1348
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1348
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1350
    goto ldv_43326;
  } else {

  }
#line 1352
  data_size = data_size - rr;
  ldv_43328: ;
#line 1344
  if (data_size != 0) {
#line 1345
    goto ldv_43327;
  } else {

  }
  ldv_43326: 
#line 1354
  kunmap(page);
#line 1355
  drbd_pp_free(mdev, page);
#line 1356
  return (rv);
}
}
#line 1359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1365
  dig_in = mdev->int_dig_in;
#line 1366
  dig_vv = mdev->int_dig_vv;
#line 1368
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1368
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1368
    dgs = (int )tmp;
  } else {
#line 1368
    dgs = 0;
  }
#line 1371
  if (dgs != 0) {
#line 1372
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1373
    if (rr != dgs) {
#line 1374
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1374
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1374
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1376
      return (0);
    } else {

    }
  } else {

  }
#line 1380
  data_size = data_size - dgs;
#line 1384
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1386
  bio = req->master_bio;
#line 1387
  if (bio->bi_sector != sector) {
#line 1387
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1387
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1387
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1387);
  } else {

  }
#line 1389
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1389
  i = (int )bio->bi_idx;
#line 1389
  goto ldv_43347;
  ldv_43346: 
#line 1390
  __min1 = data_size;
#line 1390
  __min2 = (int )bvec->bv_len;
#line 1390
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1391
  tmp___4 = kmap(bvec->bv_page);
#line 1391
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1394
  kunmap(bvec->bv_page);
#line 1395
  if (rr != expect) {
#line 1396
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1396
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1396
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1399
    return (0);
  } else {

  }
#line 1401
  data_size = data_size - rr;
#line 1389
  bvec = bvec + 1;
#line 1389
  i = i + 1;
  ldv_43347: ;
#line 1389
  if ((int )bio->bi_vcnt > i) {
#line 1390
    goto ldv_43346;
  } else {

  }

#line 1404
  if (dgs != 0) {
#line 1405
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1406
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1406
    if (tmp___9 != 0) {
#line 1407
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1408
      return (0);
    } else {

    }
  } else {

  }
#line 1412
  if (data_size != 0) {
#line 1412
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1412
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1412
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1412);
  } else {

  }
#line 1413
  return (1);
}
}
#line 1418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1420
  e = (struct drbd_epoch_entry *)w;
#line 1421
  sector = e->sector;
#line 1424
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1424
  if (tmp___1 == 0) {
#line 1424
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1424
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1424
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1424);
  } else {

  }
#line 1426
  tmp___2 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1426
  if (tmp___2 != 0L) {
#line 1427
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1427U);
#line 1428
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1431
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1433
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1435
  atomic_dec(& mdev->unacked_cnt);
#line 1435
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
  if (tmp___6 < 0) {
#line 1435
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1435
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1435
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1435, tmp___3);
  } else {

  }
#line 1437
  return (ok);
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1444
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1445
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1446
    put_ldev(mdev);
#line 1447
    return (0);
  } else {

  }
#line 1450
  atomic_dec(& mdev->rs_pending_cnt);
#line 1450
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1450
  if (tmp___2 < 0) {
#line 1450
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1450
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1450
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1450
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1450, tmp);
  } else {

  }
#line 1452
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1453
  (e->private_bio)->bi_rw = 1UL;
#line 1454
  e->w.cb = & e_end_resync_block;
#line 1456
  inc_unacked(mdev);
#line 1460
  spin_lock_irq(& mdev->req_lock);
#line 1461
  list_add(& e->w.list, & mdev->sync_ee);
#line 1462
  spin_unlock_irq(& mdev->req_lock);
#line 1464
  drbd_generic_make_request(mdev, 2, e->private_bio);
#line 1467
  maybe_kick_lo(mdev);
#line 1468
  return (1);
}
}
#line 1471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1477
  p = (struct p_data *)h;
#line 1479
  header_size = 24U;
#line 1480
  data_size = (unsigned int )h->length - header_size;
#line 1482
  _b = data_size == 0U;
#line 1482
  if (_b != 0) {
#line 1482
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1482
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1482
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1482);
  } else {

  }
#line 1482
  if (_b != 0) {
#line 1482
    return (0);
  } else {

  }
#line 1484
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1484
  if ((unsigned int )tmp___1 != header_size) {
#line 1485
    return (0);
  } else {

  }
#line 1487
  tmp___2 = __fswab64(p->sector);
#line 1487
  sector = (sector_t )tmp___2;
#line 1489
  spin_lock_irq(& mdev->req_lock);
#line 1490
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1491
  spin_unlock_irq(& mdev->req_lock);
#line 1492
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1492
  if (tmp___5 != 0L) {
#line 1493
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1493
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1493
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1494
    return (0);
  } else {

  }
#line 1500
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1502
  if (ok != 0) {
#line 1503
    req_mod(req, data_received);
  } else {

  }
#line 1508
  return (ok);
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1516
  p = (struct p_data *)h;
#line 1518
  header_size = 24U;
#line 1519
  data_size = (unsigned int )h->length - header_size;
#line 1521
  _b = data_size == 0U;
#line 1521
  if (_b != 0) {
#line 1521
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1521
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1521
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1521);
  } else {

  }
#line 1521
  if (_b != 0) {
#line 1521
    return (0);
  } else {

  }
#line 1523
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1523
  if ((unsigned int )tmp___1 != header_size) {
#line 1524
    return (0);
  } else {

  }
#line 1526
  tmp___2 = __fswab64(p->sector);
#line 1526
  sector = (sector_t )tmp___2;
#line 1527
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1527
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1527);
  } else {

  }
#line 1529
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1529
  if (tmp___8 != 0) {
#line 1533
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1535
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1535
    if (tmp___7 != 0) {
#line 1536
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1536
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1536
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1538
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1540
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1543
  return (ok);
}
}
#line 1549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1551
  e = (struct drbd_epoch_entry *)w;
#line 1552
  sector = e->sector;
#line 1554
  ok = 1;
#line 1556
  if ((e->flags & 8U) != 0U) {
#line 1557
    epoch = previous_epoch(mdev, e->epoch);
#line 1558
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1559
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1562
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1563
    tmp___0 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1563
    if (tmp___0 != 0L) {
#line 1564
      pcmd = ((int )mdev->state.ldv_33296.conn > 15 && (int )mdev->state.ldv_33296.conn <= 21) && (e->flags & 4U) != 0U ? 23 : 22;
#line 1568
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1568
      ok = tmp & ok;
#line 1569
      if (pcmd == 23) {
#line 1570
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1570U);
      } else {

      }
    } else {
#line 1572
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1576
    atomic_dec(& mdev->unacked_cnt);
#line 1576
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1576
    if (tmp___4 < 0) {
#line 1576
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1576
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1576
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1576
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1576, tmp___1);
    } else {

    }
  } else {

  }
#line 1580
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1581
    spin_lock_irq(& mdev->req_lock);
#line 1582
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1582
    if (tmp___7 != 0) {
#line 1582
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1582
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1582
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1582);
    } else {

    }
#line 1583
    hlist_del_init(& e->colision);
#line 1584
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1586
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1586
    if (tmp___10 == 0) {
#line 1586
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1586
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1586
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1586);
    } else {

    }
  }
#line 1589
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1591
  return (ok);
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1596
  e = (struct drbd_epoch_entry *)w;
#line 1597
  ok = 1;
#line 1599
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1599
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1599
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1599
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1599);
  } else {

  }
#line 1600
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1602
  spin_lock_irq(& mdev->req_lock);
#line 1603
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1603
  if (tmp___3 != 0) {
#line 1603
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1603
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1603
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1603);
  } else {

  }
#line 1604
  hlist_del_init(& e->colision);
#line 1605
  spin_unlock_irq(& mdev->req_lock);
#line 1607
  atomic_dec(& mdev->unacked_cnt);
#line 1607
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1607
  if (tmp___7 < 0) {
#line 1607
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1607
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1607
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1607
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1607, tmp___4);
  } else {

  }
#line 1609
  return (ok);
}
}
#line 1633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1635
  tmp = get_current();
#line 1635
  wait.flags = 0U;
#line 1635
  wait.private = (void *)tmp;
#line 1635
  wait.func = & autoremove_wake_function;
#line 1635
  wait.task_list.next = & wait.task_list;
#line 1635
  wait.task_list.prev = & wait.task_list;
#line 1638
  ret = 0;
#line 1639
  spin_lock(& mdev->peer_seq_lock);
  ldv_43430: 
#line 1641
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1642
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1642
  if (tmp___0 <= 0) {
#line 1643
    goto ldv_43429;
  } else {

  }
#line 1644
  tmp___1 = get_current();
#line 1644
  tmp___2 = signal_pending(tmp___1);
#line 1644
  if (tmp___2 != 0) {
#line 1645
    ret = -512;
#line 1646
    goto ldv_43429;
  } else {

  }
#line 1648
  p_seq = mdev->peer_seq;
#line 1649
  spin_unlock(& mdev->peer_seq_lock);
#line 1650
  timeout = schedule_timeout(7500L);
#line 1651
  spin_lock(& mdev->peer_seq_lock);
#line 1652
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1653
    ret = -110;
#line 1654
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1655
    goto ldv_43429;
  } else {

  }
#line 1657
  goto ldv_43430;
  ldv_43429: 
#line 1658
  finish_wait(& mdev->seq_wait, & wait);
#line 1659
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1660
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1661
  spin_unlock(& mdev->peer_seq_lock);
#line 1662
  return (ret);
}
}
#line 1666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;

  {
#line 1670
  p = (struct p_data *)h;
#line 1672
  rw = 1;
#line 1675
  header_size = 24;
#line 1676
  data_size = (int )h->length - header_size;
#line 1678
  _b = data_size == 0;
#line 1678
  if (_b != 0) {
#line 1678
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1678
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1678
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1678);
  } else {

  }
#line 1678
  if (_b != 0) {
#line 1678
    return (0);
  } else {

  }
#line 1680
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1680
  if (tmp___1 != header_size) {
#line 1681
    return (0);
  } else {

  }
#line 1683
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1683
  if (tmp___7 == 0) {
#line 1684
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1684
    if (tmp___4 != 0) {
#line 1685
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1685
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1685
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1687
    spin_lock(& mdev->peer_seq_lock);
#line 1688
    tmp___5 = __fswab32(p->seq_num);
#line 1688
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1689
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1690
    spin_unlock(& mdev->peer_seq_lock);
#line 1692
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1693
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1694
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1694
    return (tmp___6);
  } else {

  }
#line 1702
  tmp___8 = __fswab64(p->sector);
#line 1702
  sector = (sector_t )tmp___8;
#line 1703
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1704
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1705
    put_ldev(mdev);
#line 1706
    return (0);
  } else {

  }
#line 1709
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1710
  e->w.cb = & e_end_block;
#line 1712
  spin_lock(& mdev->epoch_lock);
#line 1713
  e->epoch = mdev->current_epoch;
#line 1714
  atomic_inc(& (e->epoch)->epoch_size);
#line 1715
  atomic_inc(& (e->epoch)->active);
#line 1717
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1717
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1717
    if (tmp___11 == 1) {
#line 1722
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1722
      epoch = (struct drbd_epoch *)__mptr;
#line 1723
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1724
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1725
        rw = rw | 32;
#line 1726
        e->flags = e->flags | 8U;
      } else {
#line 1728
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1728
        if (tmp___9 > 1) {
#line 1730
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1731
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1732
          rw = rw | 32;
#line 1733
          e->flags = e->flags | 8U;
        } else {
#line 1728
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1728
          if (tmp___10 == 0) {
#line 1730
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1731
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1732
            rw = rw | 32;
#line 1733
            e->flags = e->flags | 8U;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1737
  spin_unlock(& mdev->epoch_lock);
#line 1739
  tmp___12 = __fswab32(p->dp_flags);
#line 1739
  dp_flags = tmp___12;
#line 1740
  if ((int )dp_flags & 1) {
#line 1741
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1744
  if ((dp_flags & 2U) != 0U) {
#line 1745
    rw = rw | 192;
  } else {

  }
#line 1746
  if ((dp_flags & 4U) != 0U) {
#line 1747
    e->flags = e->flags | 4U;
  } else {

  }
#line 1750
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1751
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1755
    size = (int const   )e->size;
#line 1756
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1756
    discard = tmp___15;
#line 1757
    tmp___16 = get_current();
#line 1757
    wait.flags = 0U;
#line 1757
    wait.private = (void *)tmp___16;
#line 1757
    wait.func = & autoremove_wake_function;
#line 1757
    wait.task_list.next = & wait.task_list;
#line 1757
    wait.task_list.prev = & wait.task_list;
#line 1763
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1763
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1763
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1763
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1763);
    } else {

    }
#line 1764
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1764
    if (tmp___19 != 0L) {
#line 1764
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1764), "i" (12UL));
      ldv_43455: ;
#line 1764
      goto ldv_43455;
    } else {

    }
#line 1765
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1765
    if (tmp___20 != 0L) {
#line 1765
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1765), "i" (12UL));
      ldv_43456: ;
#line 1765
      goto ldv_43456;
    } else {

    }
#line 1801
    tmp___21 = __fswab32(p->seq_num);
#line 1801
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1801
    if (tmp___22 != 0) {
#line 1802
      goto out_interrupted;
    } else {

    }
#line 1804
    spin_lock_irq(& mdev->req_lock);
#line 1806
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1806
    hlist_add_head(& e->colision, tmp___23);
#line 1809
    slot = tl_hash_slot(mdev, sector);
#line 1810
    first = 1;
    ldv_43468: 
#line 1812
    have_unacked = 0;
#line 1813
    have_conflict = 0;
#line 1814
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1816
    n = slot->first;
#line 1816
    goto ldv_43465;
    ldv_43464: 
#line 1817
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1817
    if (tmp___28 != 0) {
#line 1820
      if (first != 0) {
#line 1821
        tmp___24 = get_current();
#line 1821
        tmp___25 = get_current();
#line 1821
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1821
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1821
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1826
      if ((i->rq_state & 8UL) != 0UL) {
#line 1827
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1828
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1816
    n = n->next;
    ldv_43465: ;
#line 1816
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1816
      __builtin_prefetch((void const   *)n->next);
#line 1816
      if (1 != 0) {
#line 1816
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1816
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1816
        if (1 != 0) {
#line 1817
          goto ldv_43464;
        } else {
#line 1819
          goto ldv_43466;
        }
      } else {
#line 1819
        goto ldv_43466;
      }
    } else {

    }
    ldv_43466: ;
#line 1832
    if (have_conflict == 0) {
#line 1833
      goto ldv_43467;
    } else {

    }
#line 1836
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1837
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1837
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1837
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1839
      inc_unacked(mdev);
#line 1840
      e->w.cb = & e_send_discard_ack;
#line 1841
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1843
      spin_unlock_irq(& mdev->req_lock);
#line 1848
      put_ldev(mdev);
#line 1849
      wake_asender(mdev);
#line 1850
      finish_wait(& mdev->misc_wait, & wait);
#line 1851
      return (1);
    } else {

    }
#line 1854
    tmp___31 = get_current();
#line 1854
    tmp___32 = signal_pending(tmp___31);
#line 1854
    if (tmp___32 != 0) {
#line 1855
      hlist_del_init(& e->colision);
#line 1857
      spin_unlock_irq(& mdev->req_lock);
#line 1859
      finish_wait(& mdev->misc_wait, & wait);
#line 1860
      goto out_interrupted;
    } else {

    }
#line 1863
    spin_unlock_irq(& mdev->req_lock);
#line 1864
    if (first != 0) {
#line 1865
      first = 0;
#line 1866
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1866
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1866
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 1868
    if (discard != 0) {
#line 1871
      if (have_unacked != 0) {
#line 1871
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1871
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1871
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               1871);
      } else {

      }
    } else {

    }
#line 1873
    schedule();
#line 1874
    spin_lock_irq(& mdev->req_lock);
#line 1875
    goto ldv_43468;
    ldv_43467: 
#line 1876
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1879
  list_add(& e->w.list, & mdev->active_ee);
#line 1880
  spin_unlock_irq(& mdev->req_lock);
#line 1882
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1884
  inc_unacked(mdev);
#line 1887
  goto ldv_43470;
  case 2: 
#line 1891
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1892
  goto ldv_43470;
  case 1: ;
#line 1895
  goto ldv_43470;
  }
  ldv_43470: ;
#line 1898
  if (*((unsigned int *)mdev + 451UL) == 0U) {
#line 1900
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1900U);
#line 1901
    e->flags = e->flags | 1U;
#line 1902
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1905
  (e->private_bio)->bi_rw = (unsigned long )rw;
#line 1906
  drbd_generic_make_request(mdev, 4, e->private_bio);
#line 1909
  maybe_kick_lo(mdev);
#line 1910
  return (1);
  out_interrupted: 
#line 1916
  put_ldev(mdev);
#line 1917
  drbd_free_ee(mdev, e);
#line 1918
  return (0);
}
}
#line 1921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  void *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  struct task_struct *tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  struct task_struct *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 1924
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1924
  capacity = tmp;
#line 1926
  di = 0;
#line 1929
  p = (struct p_block_req *)h;
#line 1931
  brps = 24;
#line 1933
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 1933
  if (tmp___0 != brps) {
#line 1934
    return (0);
  } else {

  }
#line 1936
  tmp___1 = __fswab64(p->sector);
#line 1936
  sector = (sector_t )tmp___1;
#line 1937
  tmp___2 = __fswab32(p->blksize);
#line 1937
  size = (int )tmp___2;
#line 1939
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1940
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1940
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1940
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1941, (unsigned long long )sector, size);
#line 1942
    return (0);
  } else {

  }
#line 1944
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1945
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1945
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1945
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1946, (unsigned long long )sector, size);
#line 1947
    return (0);
  } else {

  }
#line 1950
  tmp___10 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1950
  if (tmp___10 == 0) {
#line 1951
    tmp___9 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1951
    if (tmp___9 != 0) {
#line 1952
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1952
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1952
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 1954
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 1956
    return (1);
  } else {

  }
#line 1962
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 1963
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1964
    put_ldev(mdev);
#line 1965
    return (0);
  } else {

  }
#line 1968
  (e->private_bio)->bi_rw = 0UL;
#line 1969
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 1971
  switch ((int )h->command) {
  case 8: 
#line 1973
  e->w.cb = & w_e_end_data_req;
#line 1974
  fault_type = 5U;
#line 1975
  goto ldv_43488;
  case 9: 
#line 1977
  e->w.cb = & w_e_end_rsdata_req;
#line 1978
  fault_type = 3U;
#line 1984
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 1984
  if (tmp___15 == 0) {
#line 1987
    tmp___13 = get_current();
#line 1987
    tmp___14 = signal_pending(tmp___13);
#line 1987
    if (tmp___14 == 0) {
#line 1987
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1987
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1987
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___12, tmp___11,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1987);
    } else {

    }
#line 1988
    goto out_free_e;
  } else {

  }
#line 1990
  goto ldv_43488;
  case 31: ;
  case 33: 
#line 1994
  fault_type = 3U;
#line 1995
  digest_size = (int )h->length - brps;
#line 1996
  tmp___16 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 1996
  di = (struct digest_info *)tmp___16;
#line 1997
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 1998
    goto out_free_e;
  } else {

  }
#line 2000
  di->digest_size = digest_size;
#line 2001
  di->digest = (void *)di + 16U;
#line 2003
  tmp___17 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2003
  if (tmp___17 != digest_size) {
#line 2004
    goto out_free_e;
  } else {

  }
#line 2006
  e->block_id = (unsigned long long )di;
#line 2007
  if ((unsigned int )h->command == 33U) {
#line 2008
    if (mdev->agreed_pro_version <= 88) {
#line 2008
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2008
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2008
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___19,
             tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2008);
    } else {

    }
#line 2009
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2010
  if ((unsigned int )h->command == 31U) {
#line 2011
    e->w.cb = & w_e_end_ov_reply;
#line 2012
    atomic_dec(& mdev->rs_pending_cnt);
#line 2012
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2012
    if (tmp___23 < 0) {
#line 2012
      tmp___20 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2012
      tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2012
      tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2012
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___22, tmp___21,
             "receive_DataRequest", 2012, tmp___20);
    } else {

    }
#line 2013
    goto ldv_43488;
  } else {

  }
#line 2016
  tmp___28 = drbd_rs_begin_io(mdev, sector);
#line 2016
  if (tmp___28 == 0) {
#line 2018
    tmp___26 = get_current();
#line 2018
    tmp___27 = signal_pending(tmp___26);
#line 2018
    if (tmp___27 == 0) {
#line 2018
      tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2018
      tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2018
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___25, tmp___24,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2018);
    } else {

    }
#line 2019
    goto out_free_e;
  } else {

  }
#line 2021
  goto ldv_43488;
  case 30: ;
#line 2024
  if ((int )mdev->state.ldv_33296.conn > 9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 304U) {
#line 2026
    tmp___29 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 2026
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2026
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2026
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___31,
           tmp___30, tmp___29);
  } else {

  }
#line 2028
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2030
    mdev->ov_start_sector = sector;
#line 2031
    mdev->ov_position = sector;
#line 2032
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2033
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2033
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2033
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___33, tmp___32, (unsigned long long )sector);
  } else {

  }
#line 2036
  e->w.cb = & w_e_end_ov_req;
#line 2037
  fault_type = 3U;
#line 2043
  tmp___38 = drbd_rs_begin_io(mdev, sector);
#line 2043
  if (tmp___38 == 0) {
#line 2046
    tmp___36 = get_current();
#line 2046
    tmp___37 = signal_pending(tmp___36);
#line 2046
    if (tmp___37 == 0) {
#line 2046
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2046
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2046
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___35, tmp___34,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2046);
    } else {

    }
#line 2047
    goto out_free_e;
  } else {

  }
#line 2049
  goto ldv_43488;
  default: 
#line 2053
  tmp___39 = cmdname((enum drbd_packets )h->command);
#line 2053
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2053
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2053
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___41, tmp___40,
         tmp___39);
#line 2055
  fault_type = 9U;
  }
  ldv_43488: 
#line 2058
  spin_lock_irq(& mdev->req_lock);
#line 2059
  list_add(& e->w.list, & mdev->read_ee);
#line 2060
  spin_unlock_irq(& mdev->req_lock);
#line 2062
  inc_unacked(mdev);
#line 2064
  drbd_generic_make_request(mdev, (int )fault_type, e->private_bio);
#line 2065
  maybe_kick_lo(mdev);
#line 2067
  return (1);
  out_free_e: 
#line 2070
  kfree((void const   *)di);
#line 2071
  put_ldev(mdev);
#line 2072
  drbd_free_ee(mdev, e);
#line 2073
  return (0);
}
}
#line 2076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2078
  rv = -100;
#line 2081
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2082
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2084
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2085
  ch_self = mdev->comm_bm_set;
#line 2087
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2091
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2091
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2091
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2092
  goto ldv_43509;
  case 0: ;
#line 2094
  goto ldv_43509;
  case 1: ;
#line 2096
  if (self == 0 && peer == 1) {
#line 2097
    rv = -1;
#line 2098
    goto ldv_43509;
  } else {

  }
#line 2100
  if (self == 1 && peer == 0) {
#line 2101
    rv = 1;
#line 2102
    goto ldv_43509;
  } else {

  }
  case 2: ;
#line 2106
  if (self == 0 && peer == 1) {
#line 2107
    rv = 1;
#line 2108
    goto ldv_43509;
  } else {

  }
#line 2110
  if (self == 1 && peer == 0) {
#line 2111
    rv = -1;
#line 2112
    goto ldv_43509;
  } else {

  }
#line 2115
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2115
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2115
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2118
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2119
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2119
    rv = tmp___3 != 0 ? -1 : 1;
#line 2121
    goto ldv_43509;
  } else {
#line 2123
    if (ch_peer == 0UL) {
#line 2123
      rv = 1;
#line 2123
      goto ldv_43509;
    } else {

    }
#line 2124
    if (ch_self == 0UL) {
#line 2124
      rv = -1;
#line 2124
      goto ldv_43509;
    } else {

    }
  }
#line 2126
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2127
    goto ldv_43509;
  } else {

  }
  case 4: ;
#line 2129
  if (ch_self < ch_peer) {
#line 2130
    rv = -1;
  } else
#line 2131
  if (ch_self > ch_peer) {
#line 2132
    rv = 1;
  } else {
#line 2135
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2135
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2137
  goto ldv_43509;
  case 5: 
#line 2139
  rv = -1;
#line 2140
  goto ldv_43509;
  case 6: 
#line 2142
  rv = 1;
  }
  ldv_43509: ;
#line 2145
  return (rv);
}
}
#line 2148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2150
  rv = -100;
#line 2152
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2153
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2155
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2161
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2161
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2161
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2162
  goto ldv_43529;
  case 0: ;
#line 2164
  goto ldv_43529;
  case 7: 
#line 2166
  hg = drbd_asb_recover_0p(mdev);
#line 2167
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 2168
    rv = hg;
  } else {

  }
#line 2169
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2170
    rv = hg;
  } else {

  }
#line 2171
  goto ldv_43529;
  case 10: 
#line 2173
  rv = drbd_asb_recover_0p(mdev);
#line 2174
  goto ldv_43529;
  case 8: ;
#line 2176
  return ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U ? 1 : -1);
  case 9: 
#line 2178
  hg = drbd_asb_recover_0p(mdev);
#line 2179
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2180
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2184
    val.i = 0U;
#line 2184
    val.ldv_33296.role = 2U;
#line 2184
    mask.i = 0U;
#line 2184
    mask.ldv_33296.role = 3U;
#line 2184
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2185
    if (self != 1) {
#line 2186
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2188
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2188
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2188
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2189
      rv = hg;
    }
  } else {
#line 2192
    rv = hg;
  }
  }
  ldv_43529: ;
#line 2195
  return (rv);
}
}
#line 2198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2200
  rv = -100;
#line 2202
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2203
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2205
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2213
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2213
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2213
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2214
  goto ldv_43553;
  case 10: 
#line 2216
  rv = drbd_asb_recover_0p(mdev);
#line 2217
  goto ldv_43553;
  case 0: ;
#line 2219
  goto ldv_43553;
  case 9: 
#line 2221
  hg = drbd_asb_recover_0p(mdev);
#line 2222
  if (hg == -1) {
#line 2226
    val.i = 0U;
#line 2226
    val.ldv_33296.role = 2U;
#line 2226
    mask.i = 0U;
#line 2226
    mask.ldv_33296.role = 3U;
#line 2226
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2227
    if (self != 1) {
#line 2228
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2230
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2230
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2230
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2231
      rv = hg;
    }
  } else {
#line 2234
    rv = hg;
  }
  }
  ldv_43553: ;
#line 2237
  return (rv);
}
}
#line 2240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2243
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2244
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2244
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2244
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2245
    return;
  } else {

  }
#line 2247
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2247
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2247
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2248
  return;
}
}
#line 2267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2272
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2273
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2275
  *rule_nr = 10;
#line 2276
  if (self == 4ULL && peer == 4ULL) {
#line 2277
    return (0);
  } else {

  }
#line 2279
  *rule_nr = 20;
#line 2280
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2282
    return (-2);
  } else {

  }
#line 2284
  *rule_nr = 30;
#line 2285
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2287
    return (2);
  } else {

  }
#line 2289
  if (self == peer) {
#line 2292
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2294
      if (mdev->agreed_pro_version <= 90) {
#line 2295
        return (-1001);
      } else {

      }
#line 2297
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2299
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2299
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2299
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2300
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2302
        if ((int )mdev->state.ldv_33296.disk > 2) {
#line 2302
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2302
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2302
          tmp___2 = 0ULL;
        }
#line 2302
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2304
        *rule_nr = 34;
      } else {
#line 2306
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2306
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2306
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2307
        *rule_nr = 36;
      }
#line 2310
      return (1);
    } else {

    }
#line 2313
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2315
      if (mdev->agreed_pro_version <= 90) {
#line 2316
        return (-1001);
      } else {

      }
#line 2318
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2320
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2320
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2320
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2322
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2323
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2324
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2326
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2327
        *rule_nr = 35;
      } else {
#line 2329
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2329
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2329
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2330
        *rule_nr = 37;
      }
#line 2333
      return (-1);
    } else {

    }
#line 2337
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2337
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2341
    *rule_nr = 40;
#line 2343
    switch (rct) {
    case 0: ;
#line 2344
    return (0);
    case 1: ;
#line 2345
    return (1);
    case 2: ;
#line 2346
    return (-1);
    case 3: 
#line 2348
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2349
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2353
  *rule_nr = 50;
#line 2354
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2355
  if (self == peer) {
#line 2356
    return (-1);
  } else {

  }
#line 2358
  *rule_nr = 51;
#line 2359
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2360
  if (self == peer) {
#line 2361
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2362
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2363
    if (self == peer) {
#line 2367
      if (mdev->agreed_pro_version <= 90) {
#line 2368
        return (-1001);
      } else {

      }
#line 2370
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2371
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2372
      return (-1);
    } else {

    }
  } else {

  }
#line 2376
  *rule_nr = 60;
#line 2377
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2378
  i = 2;
#line 2378
  goto ldv_43583;
  ldv_43582: 
#line 2379
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2380
  if (self == peer) {
#line 2381
    return (-2);
  } else {

  }
#line 2378
  i = i + 1;
  ldv_43583: ;
#line 2378
  if (i <= 3) {
#line 2379
    goto ldv_43582;
  } else {

  }
#line 2384
  *rule_nr = 70;
#line 2385
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2386
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2387
  if (self == peer) {
#line 2388
    return (1);
  } else {

  }
#line 2390
  *rule_nr = 71;
#line 2391
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2392
  if (self == peer) {
#line 2393
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2394
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2395
    if (self == peer) {
#line 2399
      if (mdev->agreed_pro_version <= 90) {
#line 2400
        return (-1001);
      } else {

      }
#line 2402
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2403
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2405
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2405
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2405
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2407
      if ((int )mdev->state.ldv_33296.disk > 2) {
#line 2407
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2407
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2407
        tmp___13 = 0ULL;
      }
#line 2407
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2410
      return (1);
    } else {

    }
  } else {

  }
#line 2415
  *rule_nr = 80;
#line 2416
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2417
  i = 2;
#line 2417
  goto ldv_43586;
  ldv_43585: 
#line 2418
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2419
  if (self == peer) {
#line 2420
    return (2);
  } else {

  }
#line 2417
  i = i + 1;
  ldv_43586: ;
#line 2417
  if (i <= 3) {
#line 2418
    goto ldv_43585;
  } else {

  }
#line 2423
  *rule_nr = 90;
#line 2424
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2425
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2426
  if (self == peer && self != 0ULL) {
#line 2427
    return (100);
  } else {

  }
#line 2429
  *rule_nr = 100;
#line 2430
  i = 2;
#line 2430
  goto ldv_43592;
  ldv_43591: 
#line 2431
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2432
  j = 2;
#line 2432
  goto ldv_43589;
  ldv_43588: 
#line 2433
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2434
  if (self == peer) {
#line 2435
    return (-100);
  } else {

  }
#line 2432
  j = j + 1;
  ldv_43589: ;
#line 2432
  if (j <= 3) {
#line 2433
    goto ldv_43588;
  } else {

  }
#line 2430
  i = i + 1;
  ldv_43592: ;
#line 2430
  if (i <= 3) {
#line 2431
    goto ldv_43591;
  } else {

  }

#line 2439
  return (-1000);
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___1 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  long __x___2 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  long __x___3 ;
  unsigned long tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  unsigned long tmp___36 ;

  {
#line 2449
  rv = C_MASK;
#line 2452
  mydisk = (enum drbd_disk_state )mdev->state.ldv_33296.disk;
#line 2453
  if ((unsigned int )mydisk == 3U) {
#line 2454
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_33296.disk;
  } else {

  }
#line 2456
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2456
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2456
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2457
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2458
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2461
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2463
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2463
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2463
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2465
  if (hg == -1000) {
#line 2466
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2466
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2466
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2467
    return (C_MASK);
  } else {

  }
#line 2469
  if (hg == -1001) {
#line 2470
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2470
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2470
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2471
    return (C_MASK);
  } else {

  }
#line 2474
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2476
    if (hg == -100) {
#line 2476
      tmp___7 = 1;
    } else {
#line 2476
      __x = (long )hg;
#line 2476
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2476
        tmp___7 = 1;
      } else {
#line 2476
        tmp___7 = 0;
      }
    }
#line 2476
    f = tmp___7;
#line 2477
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2478
    if (f != 0) {
#line 2479
      hg = hg * 2;
    } else {

    }
#line 2480
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2480
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2480
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2484
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2485
    pcount = ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2487
    forced = hg == -100;
#line 2489
    switch (pcount) {
    case 0: 
#line 2491
    hg = drbd_asb_recover_0p(mdev);
#line 2492
    goto ldv_43609;
    case 1: 
#line 2494
    hg = drbd_asb_recover_1p(mdev);
#line 2495
    goto ldv_43609;
    case 2: 
#line 2497
    hg = drbd_asb_recover_2p(mdev);
#line 2498
    goto ldv_43609;
    }
    ldv_43609: 
#line 2500
    __x___0 = (long )hg;
#line 2500
    if ((__x___0 < 0L ? - __x___0 : __x___0) <= 99L) {
#line 2501
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2501
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2501
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2504
      if (forced != 0) {
#line 2505
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2505
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2505
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2507
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2512
  if (hg == -100) {
#line 2513
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2514
      hg = -1;
    } else {

    }
#line 2515
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2516
      hg = 1;
    } else {

    }
#line 2518
    __x___1 = (long )hg;
#line 2518
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2519
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2519
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2519
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2524
  if (hg == -100) {
#line 2529
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2529
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2529
    printk("<1>%s %s: Split-Brain detected, dropping connection!\n", tmp___17, tmp___16);
#line 2530
    drbd_khelper(mdev, (char *)"split-brain");
#line 2531
    return (C_MASK);
  } else {

  }
#line 2534
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2535
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2535
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2535
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2536
    return (C_MASK);
  } else {

  }
#line 2539
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && (int )mdev->state.ldv_33296.disk > 6) {
#line 2541
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2543
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2546
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2546
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2546
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2547
    return (C_MASK);
    case 10: 
#line 2549
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2549
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2549
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2554
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2554
    goto _L;
  } else {
#line 2554
    tmp___29 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2554
    if (tmp___29 != 0) {
      _L: /* CIL Label */ 
#line 2555
      if (hg == 0) {
#line 2556
        tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2556
        tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2556
        printk("<6>%s %s: dry-run connect: No resync, would become Connected immediately.\n",
               tmp___25, tmp___24);
      } else {
#line 2558
        __x___2 = (long )hg;
#line 2558
        tmp___26 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2558
        tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2558
        tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2558
        printk("<6>%s %s: dry-run connect: Would become %s, doing a %s resync.", tmp___28,
               tmp___27, tmp___26, (__x___2 < 0L ? - __x___2 : __x___2) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2561
      return (C_MASK);
    } else {

    }
  }
#line 2564
  __x___3 = (long )hg;
#line 2564
  if ((__x___3 < 0L ? - __x___3 : __x___3) > 1L) {
#line 2565
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___31, tmp___30);
#line 2566
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2566
    if (tmp___32 != 0) {
#line 2567
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2570
  if (hg > 0) {
#line 2571
    rv = C_WF_BITMAP_S;
  } else
#line 2572
  if (hg < 0) {
#line 2573
    rv = C_WF_BITMAP_T;
  } else {
#line 2575
    rv = C_CONNECTED;
#line 2576
    tmp___36 = drbd_bm_total_weight(mdev);
#line 2576
    if (tmp___36 != 0UL) {
#line 2577
      tmp___33 = drbd_bm_total_weight(mdev);
#line 2577
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2577
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2577
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___35, tmp___34,
             tmp___33);
    } else {

    }
  }
#line 2582
  return (rv);
}
}
#line 2586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2589
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2591
    return (0);
  } else {

  }
#line 2594
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2596
    return (1);
  } else {

  }
#line 2599
  if ((unsigned int )peer == (unsigned int )self) {
#line 2600
    return (0);
  } else {

  }
#line 2603
  return (1);
}
}
#line 2606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2608
  p = (struct p_protocol *)h;
#line 2612
  p_integrity_alg[0] = '\000';
#line 2612
  tmp = 1U;
#line 2612
  while (1) {
#line 2612
    if (tmp >= 64U) {
#line 2612
      break;
    } else {

    }
#line 2612
    p_integrity_alg[tmp] = (char)0;
#line 2612
    tmp = tmp + 1U;
  }
#line 2614
  header_size = 24;
#line 2615
  data_size = (int )h->length - header_size;
#line 2617
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2617
  if (tmp___0 != header_size) {
#line 2618
    return (0);
  } else {

  }
#line 2620
  tmp___1 = __fswab32(p->protocol);
#line 2620
  p_proto = (int )tmp___1;
#line 2621
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2621
  p_after_sb_0p = (int )tmp___2;
#line 2622
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2622
  p_after_sb_1p = (int )tmp___3;
#line 2623
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2623
  p_after_sb_2p = (int )tmp___4;
#line 2624
  tmp___5 = __fswab32(p->two_primaries);
#line 2624
  p_two_primaries = (int )tmp___5;
#line 2625
  tmp___6 = __fswab32(p->conn_flags);
#line 2625
  cf = (int )tmp___6;
#line 2626
  p_want_lose = cf & 1;
#line 2628
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2630
  if ((cf & 2) != 0) {
#line 2631
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2633
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2634
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2634
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2634
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2635
    goto disconnect;
  } else {

  }
#line 2638
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2638
  if (tmp___11 != 0) {
#line 2639
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2639
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2639
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2640
    goto disconnect;
  } else {

  }
#line 2643
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2643
  if (tmp___14 != 0) {
#line 2644
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2645
    goto disconnect;
  } else {

  }
#line 2648
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2648
  if (tmp___17 != 0) {
#line 2649
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2649
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2649
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2650
    goto disconnect;
  } else {

  }
#line 2653
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2654
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2654
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2654
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2655
    goto disconnect;
  } else {

  }
#line 2658
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2659
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2659
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2659
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2660
    goto disconnect;
  } else {

  }
#line 2663
  if (mdev->agreed_pro_version > 86) {
#line 2664
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2666
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2666
    if (tmp___22 != data_size) {
#line 2667
      return (0);
    } else {

    }
#line 2669
    p_integrity_alg[63] = 0;
#line 2670
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2670
    if (tmp___25 != 0) {
#line 2671
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2671
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2671
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2672
      goto disconnect;
    } else {

    }
#line 2674
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2678
  return (1);
  disconnect: 
#line 2681
  val.i = 0U;
#line 2681
  val.ldv_33296.conn = 1U;
#line 2681
  mask.i = 0U;
#line 2681
  mask.ldv_33296.conn = 31U;
#line 2681
  drbd_force_state(mdev, mask, val);
#line 2682
  return (0);
}
}
#line 2690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2695
  if ((int )((signed char )*alg) == 0) {
#line 2696
    return (0);
  } else {

  }
#line 2698
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2699
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2699
  if (tmp___2 != 0L) {
#line 2700
    tmp = PTR_ERR((void const   *)tfm);
#line 2700
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2700
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2700
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2702
    return (tfm);
  } else {

  }
#line 2704
  tmp___6 = crypto_hash_tfm(tfm);
#line 2704
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2704
  if (tmp___7 == 0) {
#line 2705
    crypto_free_hash(tfm);
#line 2706
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2706
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2706
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2707
    tmp___5 = ERR_PTR(-22L);
#line 2707
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2709
  return (tfm);
}
}
#line 2712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2714
  ok = 1;
#line 2715
  p = (struct p_rs_param_89 *)h;
#line 2717
  verify_tfm = 0;
#line 2718
  csums_tfm = 0;
#line 2719
  apv = mdev->agreed_pro_version;
#line 2721
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2726
  if ((unsigned int )h->length > exp_max_sz) {
#line 2727
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2727
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2727
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2729
    return (0);
  } else {

  }
#line 2732
  if (apv <= 88) {
#line 2733
    header_size = 4U;
#line 2734
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2736
    header_size = 132U;
#line 2737
    data_size = (unsigned int )h->length - header_size;
#line 2738
    if (data_size != 0U) {
#line 2738
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2738
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2738
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2738);
    } else {

    }
  }
#line 2742
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2744
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2744
  if ((unsigned int )tmp___3 != header_size) {
#line 2745
    return (0);
  } else {

  }
#line 2747
  tmp___4 = __fswab32(p->rate);
#line 2747
  mdev->sync_conf.rate = (int )tmp___4;
#line 2749
  if (apv > 87) {
#line 2750
    if (apv == 88) {
#line 2751
      if (data_size > 64U) {
#line 2752
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2752
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2752
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2755
        return (0);
      } else {

      }
#line 2758
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2758
      if ((unsigned int )tmp___7 != data_size) {
#line 2759
        return (0);
      } else {

      }
#line 2763
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2763
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2763
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2763
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2763);
      } else {

      }
#line 2764
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2769
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2769
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2769
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2769
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2769);
      } else {

      }
#line 2770
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2770
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2770
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2770
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2770);
      } else {

      }
#line 2771
      p->verify_alg[63] = 0;
#line 2772
      p->csums_alg[63] = 0;
    }
#line 2775
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2775
    if (tmp___17 != 0) {
#line 2776
      if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2777
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2777
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2777
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2779
        goto disconnect;
      } else {

      }
#line 2781
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2783
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2783
      if (tmp___16 != 0L) {
#line 2784
        verify_tfm = 0;
#line 2785
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2789
    if (apv > 88) {
#line 2789
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2789
      if (tmp___21 != 0) {
#line 2790
        if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2791
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2791
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2791
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2793
          goto disconnect;
        } else {

        }
#line 2795
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2797
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2797
        if (tmp___20 != 0L) {
#line 2798
          csums_tfm = 0;
#line 2799
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2804
    spin_lock(& mdev->peer_seq_lock);
#line 2806
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2807
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2808
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2808
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2809
      crypto_free_hash(mdev->verify_tfm);
#line 2810
      mdev->verify_tfm = verify_tfm;
#line 2811
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2811
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2811
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2813
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2814
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2815
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2815
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2816
      crypto_free_hash(mdev->csums_tfm);
#line 2817
      mdev->csums_tfm = csums_tfm;
#line 2818
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2818
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2818
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2820
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2823
  return (ok);
  disconnect: 
#line 2827
  crypto_free_hash(csums_tfm);
#line 2829
  crypto_free_hash(verify_tfm);
#line 2830
  val.i = 0U;
#line 2830
  val.ldv_33296.conn = 1U;
#line 2830
  mask.i = 0U;
#line 2830
  mask.ldv_33296.conn = 31U;
#line 2830
  drbd_force_state(mdev, mask, val);
#line 2831
  return (0);
}
}
#line 2834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2836
  return;
}
}
#line 2841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2845
  if (a == 0UL || b == 0UL) {
#line 2846
    return;
  } else {

  }
#line 2847
  d = a > b ? a - b : b - a;
#line 2848
  if (a >> 3 < d || b >> 3 < d) {
#line 2849
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2849
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2849
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2850
  return;
}
}
#line 2853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum drbd_conns nconn ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  union drbd_state val___3 ;
  union drbd_state mask___3 ;
  int tmp___16 ;
  int tmp___17 ;
  sector_t tmp___18 ;
  __u32 tmp___19 ;
  unsigned int tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  __u64 tmp___23 ;
  sector_t tmp___24 ;
  int tmp___25 ;

  {
#line 2855
  p = (struct p_sizes *)h;
#line 2856
  dd = 0;
#line 2859
  ldsc = 0;
#line 2862
  _b = (unsigned int )h->length != 32U;
#line 2862
  if (_b != 0) {
#line 2862
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2862
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2862
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2862);
  } else {

  }
#line 2862
  if (_b != 0) {
#line 2862
    return (0);
  } else {

  }
#line 2863
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2863
  if (tmp___1 != (int )h->length) {
#line 2864
    return (0);
  } else {

  }
#line 2866
  tmp___2 = __fswab64(p->d_size);
#line 2866
  p_size = (sector_t )tmp___2;
#line 2867
  tmp___3 = __fswab64(p->u_size);
#line 2867
  p_usize = (sector_t )tmp___3;
#line 2869
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 2870
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 2871
    val.i = 0U;
#line 2871
    val.ldv_33296.conn = 1U;
#line 2871
    mask.i = 0U;
#line 2871
    mask.ldv_33296.conn = 31U;
#line 2871
    drbd_force_state(mdev, mask, val);
#line 2872
    return (0);
  } else {

  }
#line 2877
  mdev->p_size = p_size;
#line 2880
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2880
  if (tmp___14 != 0) {
#line 2881
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 2881
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 2883
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2888
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2889
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2889
        if (p_usize == 0UL) {
#line 2889
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2889
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2889
          _min2 = p_usize;
#line 2889
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2889
        p_usize = tmp___7;
      } else {
#line 2889
        p_usize = p_usize;
      }
    } else {

    }
#line 2892
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2894
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2895
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2896
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2896
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2896
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2902
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2902
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 2902
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_33296.disk > 4) && (int )mdev->state.ldv_33296.conn <= 9) {
#line 2906
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 2907
      val___0.i = 0U;
#line 2907
      val___0.ldv_33296.conn = 1U;
#line 2907
      mask___0.i = 0U;
#line 2907
      mask___0.ldv_33296.conn = 31U;
#line 2907
      drbd_force_state(mdev, mask___0, val___0);
#line 2908
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2909
      put_ldev(mdev);
#line 2910
      return (0);
    } else {

    }
#line 2912
    put_ldev(mdev);
  } else {

  }
#line 2916
  tmp___15 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2916
  if (tmp___15 != 0) {
#line 2917
    dd = drbd_determin_dev_size(mdev, 0);
#line 2918
    put_ldev(mdev);
#line 2919
    if ((int )dd == -1) {
#line 2920
      return (0);
    } else {

    }
#line 2921
    drbd_md_sync(mdev);
  } else {
#line 2924
    drbd_set_my_capacity(mdev, p_size);
  }
#line 2927
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )mdev->state.ldv_33296.conn <= 10) {
#line 2927
    tmp___17 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2927
    if (tmp___17 != 0) {
#line 2928
      nconn = drbd_sync_handshake(mdev, (enum drbd_role )mdev->state.ldv_33296.peer,
                                  (enum drbd_disk_state )mdev->state.ldv_33296.pdsk);
#line 2930
      put_ldev(mdev);
#line 2932
      if ((unsigned int )nconn == 31U) {
#line 2933
        val___1.i = 0U;
#line 2933
        val___1.ldv_33296.conn = 1U;
#line 2933
        mask___1.i = 0U;
#line 2933
        mask___1.ldv_33296.conn = 31U;
#line 2933
        drbd_force_state(mdev, mask___1, val___1);
#line 2934
        return (0);
      } else {

      }
#line 2937
      val___3.i = 0U;
#line 2937
      val___3.ldv_33296.conn = (unsigned char )nconn;
#line 2937
      mask___3.i = 0U;
#line 2937
      mask___3.ldv_33296.conn = 31U;
#line 2937
      tmp___16 = drbd_request_state(mdev, mask___3, val___3);
#line 2937
      if (tmp___16 <= 0) {
#line 2938
        val___2.i = 0U;
#line 2938
        val___2.ldv_33296.conn = 1U;
#line 2938
        mask___2.i = 0U;
#line 2938
        mask___2.ldv_33296.conn = 31U;
#line 2938
        drbd_force_state(mdev, mask___2, val___2);
#line 2939
        return (0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2943
  tmp___22 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2943
  if (tmp___22 != 0) {
#line 2944
    tmp___18 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2944
    if ((mdev->ldev)->known_size != tmp___18) {
#line 2945
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2946
      ldsc = 1;
    } else {

    }
#line 2949
    tmp___19 = __fswab32(p->max_segment_size);
#line 2949
    max_seg_s = tmp___19;
#line 2950
    tmp___20 = queue_max_segment_size(mdev->rq_queue);
#line 2950
    if (tmp___20 != max_seg_s) {
#line 2951
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 2953
    tmp___21 = __fswab32(p->queue_order_type);
#line 2953
    drbd_setup_order_type(mdev, (int )tmp___21);
#line 2954
    put_ldev(mdev);
  } else {

  }
#line 2957
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 2958
    tmp___23 = __fswab64(p->c_size);
#line 2958
    tmp___24 = drbd_get_capacity(mdev->this_bdev);
#line 2958
    if (tmp___23 != (unsigned long long )tmp___24 || ldsc != 0) {
#line 2962
      drbd_send_sizes(mdev, 0);
    } else {

    }
#line 2964
    tmp___25 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2964
    if (tmp___25 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 902UL) == 160U)) {
#line 2966
      if ((int )mdev->state.ldv_33296.pdsk > 3 && (int )mdev->state.ldv_33296.disk > 3) {
#line 2968
        resync_after_online_grow(mdev);
      } else {
#line 2970
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 2974
  return (1);
}
}
#line 2977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 2979
  p = (struct p_uuids *)h;
#line 2983
  _b = (unsigned int )h->length != 48U;
#line 2983
  if (_b != 0) {
#line 2983
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2983
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2983
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2983);
  } else {

  }
#line 2983
  if (_b != 0) {
#line 2983
    return (0);
  } else {

  }
#line 2984
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2984
  if (tmp___1 != (int )h->length) {
#line 2985
    return (0);
  } else {

  }
#line 2987
  tmp___2 = kmalloc___1(48UL, 16U);
#line 2987
  p_uuid = (u64 *)tmp___2;
#line 2989
  i = 0;
#line 2989
  goto ldv_43731;
  ldv_43730: 
#line 2990
  tmp___3 = __fswab64(p->uuid[i]);
#line 2990
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 2989
  i = i + 1;
  ldv_43731: ;
#line 2989
  if (i <= 5) {
#line 2990
    goto ldv_43730;
  } else {

  }
#line 2992
  kfree((void const   *)mdev->p_uuid);
#line 2993
  mdev->p_uuid = p_uuid;
#line 2995
  if ((((int )mdev->state.ldv_33296.conn <= 9 && (int )mdev->state.ldv_33296.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 2999
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2999
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2999
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 3001
    val.i = 0U;
#line 3001
    val.ldv_33296.conn = 1U;
#line 3001
    mask.i = 0U;
#line 3001
    mask.ldv_33296.conn = 31U;
#line 3001
    drbd_force_state(mdev, mask, val);
#line 3002
    return (0);
  } else {

  }
#line 3005
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3005
  if (tmp___8 != 0) {
#line 3006
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3011
    if (skip_initial_sync != 0) {
#line 3012
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3012
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3012
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 3013
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3015
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3016
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3017
      __ns.i = mdev->state.i;
#line 3017
      __ns.ldv_33296.disk = 8U;
#line 3017
      __ns.ldv_33296.pdsk = 8U;
#line 3017
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3019
      drbd_md_sync(mdev);
    } else {

    }
#line 3021
    put_ldev(mdev);
  } else {

  }
#line 3028
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3028
  if (tmp___9 == 0) {
#line 3028
    goto ldv_43740;
  } else {

  }
#line 3028
  tmp___10 = get_current();
#line 3028
  __wait.flags = 0U;
#line 3028
  __wait.private = (void *)tmp___10;
#line 3028
  __wait.func = & autoremove_wake_function;
#line 3028
  __wait.task_list.next = & __wait.task_list;
#line 3028
  __wait.task_list.prev = & __wait.task_list;
  ldv_43743: 
#line 3028
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3028
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3028
  if (tmp___11 == 0) {
#line 3028
    goto ldv_43742;
  } else {

  }
#line 3028
  schedule();
#line 3028
  goto ldv_43743;
  ldv_43742: 
#line 3028
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43740: ;
#line 3029
  if ((int )mdev->state.ldv_33296.conn > 9 && (int )mdev->state.ldv_33296.disk <= 3) {
#line 3030
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3032
  return (1);
}
}
#line 3039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3043
  c_tab[0] = 0;
#line 3043
  c_tab[1] = C_TEAR_DOWN;
#line 3043
  c_tab[2] = 0;
#line 3043
  c_tab[3] = 0;
#line 3043
  c_tab[4] = 0;
#line 3043
  c_tab[5] = 0;
#line 3043
  c_tab[6] = 0;
#line 3043
  c_tab[7] = 0;
#line 3043
  c_tab[8] = 0;
#line 3043
  c_tab[9] = 0;
#line 3043
  c_tab[10] = C_CONNECTED;
#line 3043
  c_tab[11] = C_STARTING_SYNC_T;
#line 3043
  c_tab[12] = C_STARTING_SYNC_S;
#line 3043
  c_tab[13] = 0;
#line 3043
  c_tab[14] = 0;
#line 3043
  c_tab[15] = 0;
#line 3043
  c_tab[16] = 0;
#line 3043
  c_tab[17] = 0;
#line 3043
  c_tab[18] = C_VERIFY_T;
#line 3043
  c_tab[19] = 0;
#line 3043
  c_tab[20] = 0;
#line 3043
  c_tab[21] = 0;
#line 3043
  c_tab[22] = 0;
#line 3043
  c_tab[23] = 0;
#line 3043
  c_tab[24] = 0;
#line 3043
  c_tab[25] = 0;
#line 3043
  c_tab[26] = 0;
#line 3043
  c_tab[27] = 0;
#line 3043
  c_tab[28] = 0;
#line 3043
  c_tab[29] = 0;
#line 3043
  c_tab[30] = 0;
#line 3043
  c_tab[31] = C_MASK;
#line 3053
  ms.i = ps.i;
#line 3055
  ms.ldv_33296.conn = (unsigned char )c_tab[(int )ps.ldv_33296.conn];
#line 3056
  ms.ldv_33296.peer = ps.ldv_33296.role;
#line 3057
  ms.ldv_33296.role = ps.ldv_33296.peer;
#line 3058
  ms.ldv_33296.pdsk = ps.ldv_33296.disk;
#line 3059
  ms.ldv_33296.disk = ps.ldv_33296.pdsk;
#line 3060
  ms.ldv_33296.peer_isp = (unsigned char )((int )ps.ldv_33296.aftr_isp | (int )ps.ldv_33296.user_isp);
#line 3062
  return (ms);
}
}
#line 3065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3067
  p = (struct p_req_state *)h;
#line 3071
  _b = (unsigned int )h->length != 8U;
#line 3071
  if (_b != 0) {
#line 3071
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3071
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3071
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3071);
  } else {

  }
#line 3071
  if (_b != 0) {
#line 3071
    return (0);
  } else {

  }
#line 3072
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3072
  if (tmp___1 != (int )h->length) {
#line 3073
    return (0);
  } else {

  }
#line 3075
  tmp___2 = __fswab32(p->mask);
#line 3075
  mask.i = tmp___2;
#line 3076
  tmp___3 = __fswab32(p->val);
#line 3076
  val.i = tmp___3;
#line 3078
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3078
  if (tmp___4 != 0) {
#line 3078
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3078
    if (tmp___5 != 0) {
#line 3080
      drbd_send_sr_reply(mdev, -19);
#line 3081
      return (1);
    } else {

    }
  } else {

  }
#line 3084
  mask = convert_state(mask);
#line 3085
  val = convert_state(val);
#line 3087
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3089
  drbd_send_sr_reply(mdev, rv);
#line 3090
  drbd_md_sync(mdev);
#line 3092
  return (1);
}
}
#line 3095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3097
  p = (struct p_state *)h;
#line 3103
  _b = (unsigned int )h->length != 4U;
#line 3103
  if (_b != 0) {
#line 3103
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3103
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3103
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3103);
  } else {

  }
#line 3103
  if (_b != 0) {
#line 3104
    return (0);
  } else {

  }
#line 3106
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3106
  if (tmp___1 != (int )h->length) {
#line 3107
    return (0);
  } else {

  }
#line 3109
  tmp___2 = __fswab32(p->state);
#line 3109
  peer_state.i = tmp___2;
#line 3111
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_33296.disk;
#line 3112
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3113
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3114
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3114
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3114
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3114
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3117
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3119
  nconn = (enum drbd_conns )mdev->state.ldv_33296.conn;
#line 3119
  oconn = nconn;
#line 3120
  spin_unlock_irq(& mdev->req_lock);
#line 3122
  if ((unsigned int )nconn == 9U) {
#line 3123
    nconn = C_CONNECTED;
  } else {

  }
#line 3125
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_33296.disk > 2) {
#line 3125
    tmp___12 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3125
    if (tmp___12 != 0) {
#line 3130
      cr = (unsigned int )oconn <= 9U;
#line 3133
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 6U)) | cr;
#line 3138
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3138
      cr = tmp___6 | cr;
#line 3141
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_33296.conn > 10 && (int )peer_state.ldv_33296.conn <= 14)) | cr;
#line 3145
      if (cr != 0) {
#line 3146
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_33296.role,
                                    real_peer_disk);
      } else {

      }
#line 3148
      put_ldev(mdev);
#line 3149
      if ((unsigned int )nconn == 31U) {
#line 3150
        nconn = C_CONNECTED;
#line 3151
        if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 6U) {
#line 3152
          val.i = 0U;
#line 3152
          val.ldv_33296.disk = 0U;
#line 3152
          mask.i = 0U;
#line 3152
          mask.ldv_33296.disk = 15U;
#line 3152
          drbd_force_state(mdev, mask, val);
        } else
#line 3153
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3154
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3154
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3154
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3155
          peer_state.ldv_33296.disk = 0U;
#line 3156
          real_peer_disk = D_DISKLESS;
        } else {
#line 3158
          tmp___9 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3158
          if (tmp___9 != 0) {
#line 3159
            return (0);
          } else {

          }
#line 3160
          if ((unsigned int )oconn != 9U) {
#line 3160
            tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3160
            tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3160
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___11,
                   tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3160);
          } else {

          }
#line 3161
          val___0.i = 0U;
#line 3161
          val___0.ldv_33296.conn = 1U;
#line 3161
          mask___0.i = 0U;
#line 3161
          mask___0.ldv_33296.conn = 31U;
#line 3161
          drbd_force_state(mdev, mask___0, val___0);
#line 3162
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3167
  spin_lock_irq(& mdev->req_lock);
#line 3168
  if ((unsigned int )mdev->state.ldv_33296.conn != (unsigned int )oconn) {
#line 3169
    goto retry;
  } else {

  }
#line 3170
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3171
  ns.i = mdev->state.i;
#line 3172
  ns.ldv_33296.conn = (unsigned char )nconn;
#line 3173
  ns.ldv_33296.peer = peer_state.ldv_33296.role;
#line 3174
  ns.ldv_33296.pdsk = (unsigned char )real_peer_disk;
#line 3175
  ns.ldv_33296.peer_isp = (unsigned char )((int )peer_state.ldv_33296.aftr_isp | (int )peer_state.ldv_33296.user_isp);
#line 3176
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3177
    ns.ldv_33296.disk = mdev->new_state_tmp.ldv_33296.disk;
  } else {

  }
#line 3179
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3180
  ns = mdev->state;
#line 3181
  spin_unlock_irq(& mdev->req_lock);
#line 3183
  if (rv <= 0) {
#line 3184
    val___1.i = 0U;
#line 3184
    val___1.ldv_33296.conn = 1U;
#line 3184
    mask___1.i = 0U;
#line 3184
    mask___1.ldv_33296.conn = 31U;
#line 3184
    drbd_force_state(mdev, mask___1, val___1);
#line 3185
    return (0);
  } else {

  }
#line 3188
  if ((unsigned int )oconn > 9U) {
#line 3189
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_33296.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3194
      drbd_send_uuids(mdev);
#line 3195
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3199
  (mdev->net_conf)->want_lose = 0U;
#line 3201
  drbd_md_sync(mdev);
#line 3203
  return (1);
}
}
#line 3206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3208
  p = (struct p_rs_uuid *)h;
#line 3210
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.disk <= 2) {
#line 3210
    goto ldv_43793;
  } else {

  }
#line 3210
  tmp = get_current();
#line 3210
  __wait.flags = 0U;
#line 3210
  __wait.private = (void *)tmp;
#line 3210
  __wait.func = & autoremove_wake_function;
#line 3210
  __wait.task_list.next = & __wait.task_list;
#line 3210
  __wait.task_list.prev = & __wait.task_list;
  ldv_43796: 
#line 3210
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3210
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.disk <= 2) {
#line 3210
    goto ldv_43795;
  } else {

  }
#line 3210
  schedule();
#line 3210
  goto ldv_43796;
  ldv_43795: 
#line 3210
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43793: 
#line 3217
  _b = (unsigned int )h->length != 8U;
#line 3217
  if (_b != 0) {
#line 3217
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3217
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3217
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3217);
  } else {

  }
#line 3217
  if (_b != 0) {
#line 3217
    return (0);
  } else {

  }
#line 3218
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3218
  if (tmp___2 != (int )h->length) {
#line 3219
    return (0);
  } else {

  }
#line 3223
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3223
  if (tmp___6 != 0) {
#line 3224
    tmp___3 = __fswab64(p->uuid);
#line 3224
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3225
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3227
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3229
    put_ldev(mdev);
  } else {
#line 3231
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3231
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3231
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3233
  return (1);
}
}
#line 3239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3242
  __min1 = 511UL;
#line 3242
  __min2 = c->bm_words - c->word_offset;
#line 3242
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3243
  want = num_words * 8U;
#line 3245
  if ((unsigned int )h->length != want) {
#line 3246
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3246
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3246
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3247
    return (FAILED);
  } else {

  }
#line 3249
  if (want == 0U) {
#line 3250
    return (DONE);
  } else {

  }
#line 3251
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3251
  if ((unsigned int )tmp___1 != want) {
#line 3252
    return (FAILED);
  } else {

  }
#line 3254
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3256
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3257
  c->bit_offset = c->word_offset * 64UL;
#line 3258
  if (c->bit_offset > c->bm_bits) {
#line 3259
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3261
  return (OK);
}
}
#line 3265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3273
  s = c->bit_offset;
#line 3275
  len = (int )((unsigned int )p->head.length - 1U);
#line 3276
  tmp___0 = DCBP_get_start(p);
#line 3276
  toggle = tmp___0;
#line 3280
  tmp___1 = DCBP_get_pad_bits(p);
#line 3280
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3282
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3283
  if (bits < 0) {
#line 3284
    return (FAILED);
  } else {

  }
#line 3286
  have = bits;
#line 3286
  goto ldv_43832;
  ldv_43831: 
#line 3287
  bits = vli_decode_bits(& rl, look_ahead);
#line 3288
  if (bits <= 0) {
#line 3289
    return (FAILED);
  } else {

  }
#line 3291
  if (toggle != 0) {
#line 3292
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3293
    if (c->bm_bits <= e) {
#line 3294
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3294
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3294
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3295
      return (FAILED);
    } else {

    }
#line 3297
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3300
  if (have < bits) {
#line 3301
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3301
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3301
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3305
    return (FAILED);
  } else {

  }
#line 3307
  look_ahead = look_ahead >> bits;
#line 3308
  have = have - bits;
#line 3310
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3311
  if (bits < 0) {
#line 3312
    return (FAILED);
  } else {

  }
#line 3313
  look_ahead = (tmp << have) | look_ahead;
#line 3314
  have = have + bits;
#line 3286
  s = (unsigned long )((unsigned long long )s + rl);
#line 3286
  toggle = toggle == 0;
  ldv_43832: ;
#line 3286
  if (have > 0) {
#line 3287
    goto ldv_43831;
  } else {

  }
#line 3317
  c->bit_offset = s;
#line 3318
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3320
  return (c->bm_bits == s);
}
}
#line 3324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3328
  tmp___0 = DCBP_get_code(p);
#line 3328
  if ((unsigned int )tmp___0 == 2U) {
#line 3329
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3329
    return (tmp);
  } else {

  }
#line 3335
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3335
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3335
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3336
  val.i = 0U;
#line 3336
  val.ldv_33296.conn = 6U;
#line 3336
  mask.i = 0U;
#line 3336
  mask.ldv_33296.conn = 31U;
#line 3336
  drbd_force_state(mdev, mask, val);
#line 3337
  return (FAILED);
}
}
#line 3340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3344
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3347
  total = c->bytes[0] + c->bytes[1];
#line 3351
  if (total == 0U) {
#line 3352
    return;
  } else {

  }
#line 3355
  if (total >= plain) {
#line 3356
    return;
  } else {

  }
#line 3359
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3362
  if (r > 1000U) {
#line 3363
    r = 1000U;
  } else {

  }
#line 3365
  r = 1000U - r;
#line 3366
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3366
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3366
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3367
  return;
}
}
#line 3382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3387
  ok = 0;
#line 3389
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3389
  if (tmp == 0) {
#line 3389
    goto ldv_43859;
  } else {

  }
#line 3389
  tmp___0 = get_current();
#line 3389
  __wait.flags = 0U;
#line 3389
  __wait.private = (void *)tmp___0;
#line 3389
  __wait.func = & autoremove_wake_function;
#line 3389
  __wait.task_list.next = & __wait.task_list;
#line 3389
  __wait.task_list.prev = & __wait.task_list;
  ldv_43862: 
#line 3389
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3389
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3389
  if (tmp___1 == 0) {
#line 3389
    goto ldv_43861;
  } else {

  }
#line 3389
  schedule();
#line 3389
  goto ldv_43862;
  ldv_43861: 
#line 3389
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43859: 
#line 3391
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3395
  tmp___2 = __get_free_pages(16U, 0U);
#line 3395
  buffer = (void *)tmp___2;
#line 3396
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3397
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3397
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3397
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3398
    goto out;
  } else {

  }
#line 3401
  tmp___5 = drbd_bm_bits(mdev);
#line 3401
  tmp___6 = drbd_bm_words(mdev);
#line 3401
  __constr_expr_0.bm_bits = tmp___5;
#line 3401
  __constr_expr_0.bm_words = tmp___6;
#line 3401
  __constr_expr_0.bit_offset = 0UL;
#line 3401
  __constr_expr_0.word_offset = 0UL;
#line 3401
  __constr_expr_0.packets[0] = 0U;
#line 3401
  __constr_expr_0.packets[1] = 0U;
#line 3401
  __constr_expr_0.bytes[0] = 0U;
#line 3401
  __constr_expr_0.bytes[1] = 0U;
#line 3401
  c = __constr_expr_0;
  ldv_43871: ;
#line 3407
  if ((unsigned int )h->command == 4U) {
#line 3408
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3409
  if ((unsigned int )h->command == 36U) {
#line 3414
    if ((unsigned int )h->length > 4088U) {
#line 3415
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3415
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3415
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3416
      goto out;
    } else {

    }
#line 3419
    p = (struct p_compressed_bm *)buffer;
#line 3420
    __len = 8UL;
#line 3420
    if (__len > 63UL) {
#line 3420
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3420
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3421
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3421
    if (tmp___9 != (int )h->length) {
#line 3422
      goto out;
    } else {

    }
#line 3423
    if ((unsigned int )p->head.length <= 1U) {
#line 3424
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3425
      return (2);
    } else {

    }
#line 3427
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3429
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3430
    goto out;
  }
#line 3433
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3434
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3436
  if ((unsigned int )ret != 0U) {
#line 3437
    goto ldv_43870;
  } else {

  }
#line 3439
  tmp___14 = drbd_recv_header(mdev, h);
#line 3439
  if (tmp___14 == 0) {
#line 3440
    goto out;
  } else {

  }
#line 3441
  if ((unsigned int )ret == 0U) {
#line 3442
    goto ldv_43871;
  } else {

  }
  ldv_43870: ;
#line 3442
  if ((unsigned int )ret == 2U) {
#line 3443
    goto out;
  } else {

  }
#line 3445
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3447
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 224U) {
#line 3448
    tmp___15 = drbd_send_bitmap(mdev);
#line 3448
    ok = tmp___15 == 0;
#line 3449
    if (ok == 0) {
#line 3450
      goto out;
    } else {

    }
#line 3452
    val.i = 0U;
#line 3452
    val.ldv_33296.conn = 15U;
#line 3452
    mask.i = 0U;
#line 3452
    mask.ldv_33296.conn = 31U;
#line 3452
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3453
    if (ok != 1) {
#line 3453
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3453
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3453
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             3453);
    } else {

    }
  } else
#line 3454
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 208U) {
#line 3457
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 3457
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3457
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3457
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3461
  ok = 1;
  out: 
#line 3463
  drbd_bm_unlock(mdev);
#line 3464
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 902UL) == 208U) {
#line 3465
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3466
  free_pages((unsigned long )buffer, 0U);
#line 3467
  return (ok);
}
}
#line 3470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3476
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3476
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3476
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3479
  size = (int )h->length;
#line 3480
  goto ldv_43892;
  ldv_43891: 
#line 3481
  __min1 = size;
#line 3481
  __min2 = 128;
#line 3481
  want = __min1 < __min2 ? __min1 : __min2;
#line 3482
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3483
  _b = r <= 0;
#line 3483
  if (_b != 0) {
#line 3483
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3483
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3483
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3483);
  } else {

  }
#line 3483
  if (_b != 0) {
#line 3483
    goto ldv_43890;
  } else {

  }
#line 3484
  size = size - r;
  ldv_43892: ;
#line 3480
  if (size > 0) {
#line 3481
    goto ldv_43891;
  } else {

  }
  ldv_43890: ;
#line 3486
  return (size == 0);
}
}
#line 3489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3491
  if ((int )mdev->state.ldv_33296.disk > 3) {
#line 3492
    drbd_kick_lo(mdev);
  } else {

  }
#line 3496
  drbd_tcp_quickack(mdev->data.socket);
#line 3498
  return (1);
}
}
#line 3503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[38U]  = 
#line 3503
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0};
#line 3529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3535
  header = & mdev->data.rbuf.header;
#line 3537
  goto ldv_43922;
  ldv_43921: 
#line 3538
  drbd_thread_current_set_cpu(mdev);
#line 3539
  tmp = drbd_recv_header(mdev, header);
#line 3539
  if (tmp == 0) {
#line 3540
    val.i = 0U;
#line 3540
    val.ldv_33296.conn = 6U;
#line 3540
    mask.i = 0U;
#line 3540
    mask.ldv_33296.conn = 31U;
#line 3540
    drbd_force_state(mdev, mask, val);
#line 3541
    goto ldv_43912;
  } else {

  }
#line 3544
  if ((unsigned int )header->command <= 36U) {
#line 3545
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3546
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3548
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3549
  if ((unsigned int )header->command > 257U) {
#line 3550
    handler = & receive_skip;
  } else {
#line 3552
    handler = 0;
  }
#line 3554
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3554
  if (tmp___2 != 0L) {
#line 3555
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3555
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3555
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3557
    val___0.i = 0U;
#line 3557
    val___0.ldv_33296.conn = 6U;
#line 3557
    mask___0.i = 0U;
#line 3557
    mask___0.ldv_33296.conn = 31U;
#line 3557
    drbd_force_state(mdev, mask___0, val___0);
#line 3558
    goto ldv_43912;
  } else {

  }
#line 3560
  tmp___6 = (*handler)(mdev, header);
#line 3560
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3560
  if (tmp___7 != 0L) {
#line 3561
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3561
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3561
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3561
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3563
    val___1.i = 0U;
#line 3563
    val___1.ldv_33296.conn = 6U;
#line 3563
    mask___1.i = 0U;
#line 3563
    mask___1.ldv_33296.conn = 31U;
#line 3563
    drbd_force_state(mdev, mask___1, val___1);
#line 3564
    goto ldv_43912;
  } else {

  }
  ldv_43922: 
#line 3537
  tmp___8 = get_t_state(& mdev->receiver);
#line 3537
  if ((unsigned int )tmp___8 == 1U) {
#line 3538
    goto ldv_43921;
  } else {

  }
  ldv_43912: ;
#line 3542
  return;
}
}
#line 3569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3580
  spin_lock_irq(& mdev->req_lock);
#line 3581
  i = 0;
#line 3581
  goto ldv_43939;
  ldv_43938: 
#line 3582
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3583
  pos = slot->first;
#line 3583
  goto ldv_43936;
  ldv_43935: 
#line 3589
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3589
  if (tmp___2 == 0) {
#line 3589
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3589);
  } else {

  }
#line 3592
  _req_mod(req, connection_lost_while_pending);
#line 3583
  pos = tmp;
  ldv_43936: ;
#line 3583
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3583
    tmp = pos->next;
#line 3583
    if (1 != 0) {
#line 3583
      __mptr = (struct hlist_node  const  *)pos;
#line 3583
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3583
      if (1 != 0) {
#line 3584
        goto ldv_43935;
      } else {
#line 3586
        goto ldv_43937;
      }
    } else {
#line 3586
      goto ldv_43937;
    }
  } else {

  }
  ldv_43937: 
#line 3581
  i = i + 1;
  ldv_43939: ;
#line 3581
  if (i <= 14) {
#line 3582
    goto ldv_43938;
  } else {

  }
#line 3595
  i = 0;
#line 3595
  goto ldv_43942;
  ldv_43941: 
#line 3596
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3596
  if (tmp___5 == 0) {
#line 3597
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3597
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3597
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3595
  i = i + 1;
  ldv_43942: ;
#line 3595
  if (i <= 14) {
#line 3596
    goto ldv_43941;
  } else {

  }
#line 3600
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3601
  spin_unlock_irq(& mdev->req_lock);
#line 3602
  return;
}
}
#line 3604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3608
  barr.w.cb = & w_prev_work_done;
#line 3609
  init_completion(& barr.done);
#line 3610
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3611
  wait_for_completion(& barr.done);
#line 3612
  return;
}
}
#line 3614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___6 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;

  {
#line 3618
  rv = 0;
#line 3621
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 0U) {
#line 3622
    return;
  } else {

  }
#line 3623
  if ((int )mdev->state.ldv_33296.conn > 7) {
#line 3624
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 3624
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3624
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3624
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3628
  drbd_thread_stop(& mdev->asender);
#line 3629
  drbd_free_sock(mdev);
#line 3631
  spin_lock_irq(& mdev->req_lock);
#line 3632
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3633
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3634
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3635
  spin_unlock_irq(& mdev->req_lock);
#line 3647
  drbd_rs_cancel_all(mdev);
#line 3648
  mdev->rs_total = 0UL;
#line 3649
  mdev->rs_failed = 0UL;
#line 3650
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3651
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3654
  del_timer_sync(& mdev->resync_timer);
#line 3655
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3656
  resync_timer_fn((unsigned long )mdev);
#line 3661
  drbd_flush_workqueue(mdev);
#line 3665
  drbd_process_done_ee(mdev);
#line 3667
  kfree((void const   *)mdev->p_uuid);
#line 3668
  mdev->p_uuid = 0;
#line 3670
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) == 0U) {
#line 3671
    tl_clear(mdev);
  } else {

  }
#line 3673
  drbd_fail_pending_reads(mdev);
#line 3675
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3675
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3675
  printk("<6>%s %s: Connection closed\n", tmp___3, tmp___2);
#line 3677
  drbd_md_sync(mdev);
#line 3679
  fp = FP_DONT_CARE;
#line 3680
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3680
  if (tmp___4 != 0) {
#line 3681
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3682
    put_ldev(mdev);
  } else {

  }
#line 3685
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3686
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_33296.pdsk > 5) {
#line 3687
      tmp___5 = drbd_try_outdate_peer(mdev);
#line 3687
      nps = tmp___5;
#line 3688
      val.i = 0U;
#line 3688
      val.ldv_33296.pdsk = (unsigned char )nps;
#line 3688
      mask.i = 0U;
#line 3688
      mask.ldv_33296.pdsk = 15U;
#line 3688
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3692
  spin_lock_irq(& mdev->req_lock);
#line 3693
  os = mdev->state;
#line 3694
  if ((int )os.ldv_33296.conn > 1) {
#line 3696
    ns = os;
#line 3697
    ns.ldv_33296.conn = 2U;
#line 3698
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3700
  spin_unlock_irq(& mdev->req_lock);
#line 3702
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3704
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3704
    if (tmp___6 == 0) {
#line 3704
      goto ldv_43962;
    } else {

    }
#line 3704
    tmp___7 = get_current();
#line 3704
    __wait.flags = 0U;
#line 3704
    __wait.private = (void *)tmp___7;
#line 3704
    __wait.func = & autoremove_wake_function;
#line 3704
    __wait.task_list.next = & __wait.task_list;
#line 3704
    __wait.task_list.prev = & __wait.task_list;
    ldv_43965: 
#line 3704
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3704
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3704
    if (tmp___8 == 0) {
#line 3704
      goto ldv_43964;
    } else {

    }
#line 3704
    schedule();
#line 3704
    goto ldv_43965;
    ldv_43964: 
#line 3704
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43962: 
#line 3708
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3708
    if (tmp___9 == 0) {
#line 3708
      goto ldv_43966;
    } else {

    }
#line 3708
    tmp___10 = get_current();
#line 3708
    __wait___0.flags = 0U;
#line 3708
    __wait___0.private = (void *)tmp___10;
#line 3708
    __wait___0.func = & autoremove_wake_function;
#line 3708
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3708
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43969: 
#line 3708
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3708
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3708
    if (tmp___11 == 0) {
#line 3708
      goto ldv_43968;
    } else {

    }
#line 3708
    schedule();
#line 3708
    goto ldv_43969;
    ldv_43968: 
#line 3708
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43966: 
#line 3710
    spin_lock_irq(& mdev->req_lock);
#line 3712
    h = mdev->ee_hash;
#line 3712
    goto ldv_43971;
    ldv_43970: ;
#line 3713
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3714
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3714
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3714
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___13,
             tmp___12, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3712
    h = h + 1;
    ldv_43971: ;
#line 3712
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3713
      goto ldv_43970;
    } else {

    }
#line 3716
    kfree((void const   *)mdev->ee_hash);
#line 3717
    mdev->ee_hash = 0;
#line 3718
    mdev->ee_hash_s = 0U;
#line 3721
    h = mdev->tl_hash;
#line 3721
    goto ldv_43974;
    ldv_43973: ;
#line 3722
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3723
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___15,
             tmp___14, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3721
    h = h + 1;
    ldv_43974: ;
#line 3721
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3722
      goto ldv_43973;
    } else {

    }
#line 3725
    kfree((void const   *)mdev->tl_hash);
#line 3726
    mdev->tl_hash = 0;
#line 3727
    mdev->tl_hash_s = 0U;
#line 3728
    spin_unlock_irq(& mdev->req_lock);
#line 3730
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3731
    mdev->cram_hmac_tfm = 0;
#line 3733
    kfree((void const   *)mdev->net_conf);
#line 3734
    mdev->net_conf = 0;
#line 3735
    val___0.i = 0U;
#line 3735
    val___0.ldv_33296.conn = 0U;
#line 3735
    mask___0.i = 0U;
#line 3735
    mask___0.ldv_33296.conn = 31U;
#line 3735
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3745
  tmp___16 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3745
  i = (unsigned int )tmp___16;
#line 3746
  if (i != 0U) {
#line 3747
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3747
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3747
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___18, tmp___17,
           i);
  } else {

  }
#line 3748
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3748
  i = (unsigned int )tmp___19;
#line 3749
  if (i != 0U) {
#line 3750
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3750
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3750
    printk("<6>%s %s: pp_in_use = %u, expected 0\n", tmp___21, tmp___20, i);
  } else {

  }
#line 3752
  tmp___24 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3752
  if (tmp___24 == 0) {
#line 3752
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___23,
           tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3752);
  } else {

  }
#line 3753
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3753
  if (tmp___27 == 0) {
#line 3753
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3753
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3753
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3753);
  } else {

  }
#line 3754
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3754
  if (tmp___30 == 0) {
#line 3754
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3754);
  } else {

  }
#line 3755
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3755
  if (tmp___33 == 0) {
#line 3755
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3755
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3755
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3755);
  } else {

  }
#line 3758
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3759
  tmp___36 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3759
  if (tmp___36 == 0) {
#line 3759
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3759
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3759
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3759);
  } else {

  }
#line 3760
  return;
}
}
#line 3771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3774
  p = & mdev->data.sbuf.handshake;
#line 3777
  tmp___1 = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3777
  if (tmp___1 != 0) {
#line 3778
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3778
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3778
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 3779
    return (0);
  } else {

  }
#line 3782
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3783
    mutex_unlock(& mdev->data.mutex);
#line 3784
    return (0);
  } else {

  }
#line 3787
  memset((void *)p, 0, 80UL);
#line 3788
  p->protocol_min = 1442840576U;
#line 3789
  p->protocol_max = 1543503872U;
#line 3790
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3792
  mutex_unlock(& mdev->data.mutex);
#line 3793
  return (ok);
}
}
#line 3803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 3806
  p = & mdev->data.rbuf.handshake;
#line 3807
  expect = 72;
#line 3811
  rv = drbd_send_handshake(mdev);
#line 3812
  if (rv == 0) {
#line 3813
    return (0);
  } else {

  }
#line 3815
  rv = drbd_recv_header(mdev, & p->head);
#line 3816
  if (rv == 0) {
#line 3817
    return (0);
  } else {

  }
#line 3819
  if ((unsigned int )p->head.command != 65534U) {
#line 3820
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3820
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3820
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3820
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 3822
    return (-1);
  } else {

  }
#line 3825
  if ((int )p->head.length != expect) {
#line 3826
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3826
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3826
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 3828
    return (-1);
  } else {

  }
#line 3831
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3833
  if (rv != expect) {
#line 3834
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3834
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3834
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 3835
    return (0);
  } else {

  }
#line 3838
  tmp___6 = __fswab32(p->protocol_min);
#line 3838
  p->protocol_min = tmp___6;
#line 3839
  tmp___7 = __fswab32(p->protocol_max);
#line 3839
  p->protocol_max = tmp___7;
#line 3840
  if (p->protocol_max == 0U) {
#line 3841
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3843
  if (p->protocol_min > 92U || p->protocol_max <= 85U) {
#line 3845
    goto incompat;
  } else {

  }
#line 3847
  __min1 = 92;
#line 3847
  __min2 = (int )p->protocol_max;
#line 3847
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3849
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3849
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3849
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 3852
  return (1);
  incompat: 
#line 3855
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3855
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3855
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 92, p->protocol_min, p->protocol_max);
#line 3859
  return (-1);
}
}
#line 3878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 3882
  response = 0;
#line 3883
  right_response = 0;
#line 3884
  peers_ch = 0;
#line 3886
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3886
  key_len = (unsigned int )tmp;
#line 3891
  desc.tfm = mdev->cram_hmac_tfm;
#line 3892
  desc.flags = 0U;
#line 3894
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3896
  if (rv != 0) {
#line 3897
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3897
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3897
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 3898
    rv = -1;
#line 3899
    goto fail;
  } else {

  }
#line 3902
  get_random_bytes((void *)(& my_challenge), 64);
#line 3904
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 3905
  if (rv == 0) {
#line 3906
    goto fail;
  } else {

  }
#line 3908
  rv = drbd_recv_header(mdev, & p);
#line 3909
  if (rv == 0) {
#line 3910
    goto fail;
  } else {

  }
#line 3912
  if ((unsigned int )p.command != 16U) {
#line 3913
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 3913
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3913
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3913
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 3915
    rv = 0;
#line 3916
    goto fail;
  } else {

  }
#line 3919
  if ((unsigned int )p.length > 128U) {
#line 3920
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3920
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3920
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 3921
    rv = -1;
#line 3922
    goto fail;
  } else {

  }
#line 3925
  tmp___7 = kmalloc___1((size_t )p.length, 16U);
#line 3925
  peers_ch = (char *)tmp___7;
#line 3926
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 3927
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3927
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3927
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 3928
    rv = -1;
#line 3929
    goto fail;
  } else {

  }
#line 3932
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 3934
  if ((int )p.length != rv) {
#line 3935
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3935
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3935
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 3936
    rv = 0;
#line 3937
    goto fail;
  } else {

  }
#line 3940
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 3941
  tmp___12 = kmalloc___1((size_t )resp_size, 16U);
#line 3941
  response = (char *)tmp___12;
#line 3942
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3943
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3943
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3943
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 3944
    rv = -1;
#line 3945
    goto fail;
  } else {

  }
#line 3948
  sg_init_table(& sg, 1U);
#line 3949
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 3951
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 3952
  if (rv != 0) {
#line 3953
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3953
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3953
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 3954
    rv = -1;
#line 3955
    goto fail;
  } else {

  }
#line 3958
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 3959
  if (rv == 0) {
#line 3960
    goto fail;
  } else {

  }
#line 3962
  rv = drbd_recv_header(mdev, & p);
#line 3963
  if (rv == 0) {
#line 3964
    goto fail;
  } else {

  }
#line 3966
  if ((unsigned int )p.command != 17U) {
#line 3967
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 3967
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3967
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3967
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 3969
    rv = 0;
#line 3970
    goto fail;
  } else {

  }
#line 3973
  if ((unsigned int )p.length != resp_size) {
#line 3974
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 3975
    rv = 0;
#line 3976
    goto fail;
  } else {

  }
#line 3979
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 3981
  if ((unsigned int )rv != resp_size) {
#line 3982
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3982
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3982
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 3983
    rv = 0;
#line 3984
    goto fail;
  } else {

  }
#line 3987
  tmp___24 = kmalloc___1((size_t )resp_size, 16U);
#line 3987
  right_response = (char *)tmp___24;
#line 3988
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 3989
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 3990
    rv = -1;
#line 3991
    goto fail;
  } else {

  }
#line 3994
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 3996
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 3997
  if (rv != 0) {
#line 3998
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3998
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3998
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 3999
    rv = -1;
#line 4000
    goto fail;
  } else {

  }
#line 4003
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4003
  rv = tmp___29 == 0;
#line 4005
  if (rv != 0) {
#line 4006
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4006
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4006
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4009
    rv = -1;
  }
  fail: 
#line 4012
  kfree((void const   *)peers_ch);
#line 4013
  kfree((void const   *)response);
#line 4014
  kfree((void const   *)right_response);
#line 4016
  return (rv);
}
}
#line 4020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 4022
  mdev = thi->mdev;
#line 4023
  tmp = mdev_to_minor(mdev);
#line 4023
  minor = tmp;
#line 4026
  tmp___0 = get_current();
#line 4026
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4028
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4028
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4028
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_44019: 
#line 4031
  h = drbd_connect(mdev);
#line 4032
  if (h == 0) {
#line 4033
    drbd_disconnect(mdev);
#line 4034
    tmp___3 = get_current();
#line 4034
    tmp___3->state = 1L;
#line 4035
    schedule_timeout(250L);
  } else {

  }
#line 4037
  if (h == -1) {
#line 4038
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4038
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4038
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4039
    val.i = 0U;
#line 4039
    val.ldv_33296.conn = 1U;
#line 4039
    mask.i = 0U;
#line 4039
    mask.ldv_33296.conn = 31U;
#line 4039
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4041
  if (h == 0) {
#line 4042
    goto ldv_44019;
  } else {

  }

#line 4043
  if (h > 0) {
#line 4044
    tmp___6 = get_net_conf(mdev);
#line 4044
    if (tmp___6 != 0) {
#line 4045
      drbdd(mdev);
#line 4046
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4050
  drbd_disconnect(mdev);
#line 4052
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4052
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4052
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4053
  return (0);
}
}
#line 4058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4060
  p = (struct p_req_state_reply *)h;
#line 4062
  tmp = __fswab32(p->retcode);
#line 4062
  retcode = (int )tmp;
#line 4064
  if (retcode > 0) {
#line 4065
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4067
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4068
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4068
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4068
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4068
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4071
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4073
  return (1);
}
}
#line 4076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4078
  tmp = drbd_send_ping_ack(mdev);
#line 4078
  return (tmp);
}
}
#line 4082 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4085
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4086
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4086
  if (tmp == 0) {
#line 4087
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4089
  return (1);
}
}
#line 4092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4094
  p = (struct p_block_ack *)h;
#line 4095
  tmp = __fswab64(p->sector);
#line 4095
  sector = (sector_t )tmp;
#line 4096
  tmp___0 = __fswab32(p->blksize);
#line 4096
  blksize = (int )tmp___0;
#line 4098
  if (mdev->agreed_pro_version <= 88) {
#line 4098
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4098
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4098
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4098);
  } else {

  }
#line 4100
  tmp___3 = __fswab32(p->seq_num);
#line 4100
  update_peer_seq(mdev, tmp___3);
#line 4102
  drbd_rs_complete_io(mdev, sector);
#line 4103
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4103U);
#line 4105
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4106
  atomic_dec(& mdev->rs_pending_cnt);
#line 4106
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4106
  if (tmp___7 < 0) {
#line 4106
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4106
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4106
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4106
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4106, tmp___4);
  } else {

  }
#line 4108
  return (1);
}
}
#line 4113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4116
  tmp = tl_hash_slot(mdev, sector);
#line 4116
  slot = tmp;
#line 4120
  n = slot->first;
#line 4120
  goto ldv_44060;
  ldv_44059: ;
#line 4121
  if ((unsigned long )req == (unsigned long )id) {
#line 4122
    if (req->sector != sector) {
#line 4123
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4123
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4123
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4127
      goto ldv_44058;
    } else {

    }
#line 4129
    return (req);
  } else {

  }
#line 4120
  n = n->next;
  ldv_44060: ;
#line 4120
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4120
    __builtin_prefetch((void const   *)n->next);
#line 4120
    if (1 != 0) {
#line 4120
      __mptr = (struct hlist_node  const  *)n;
#line 4120
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4120
      if (1 != 0) {
#line 4121
        goto ldv_44059;
      } else {
#line 4123
        goto ldv_44058;
      }
    } else {
#line 4123
      goto ldv_44058;
    }
  } else {

  }
  ldv_44058: 
#line 4132
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4132
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4132
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4134
  return (0);
}
}
#line 4140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4147
  spin_lock_irq(& mdev->req_lock);
#line 4148
  req = (*validator)(mdev, id, sector);
#line 4149
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4149
  if (tmp___1 != 0L) {
#line 4150
    spin_unlock_irq(& mdev->req_lock);
#line 4151
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4151
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4151
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4152
    return (0);
  } else {

  }
#line 4154
  __req_mod(req, what, & m);
#line 4155
  spin_unlock_irq(& mdev->req_lock);
#line 4157
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4158
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4159
  return (1);
}
}
#line 4162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4164
  p = (struct p_block_ack *)h;
#line 4165
  tmp = __fswab64(p->sector);
#line 4165
  sector = (sector_t )tmp;
#line 4166
  tmp___0 = __fswab32(p->blksize);
#line 4166
  blksize = (int )tmp___0;
#line 4169
  tmp___1 = __fswab32(p->seq_num);
#line 4169
  update_peer_seq(mdev, tmp___1);
#line 4171
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4172
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4172U);
#line 4173
    atomic_dec(& mdev->rs_pending_cnt);
#line 4173
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4173
    if (tmp___5 < 0) {
#line 4173
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4173
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4173
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4173
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4173, tmp___2);
    } else {

    }
#line 4174
    return (1);
  } else {

  }
#line 4176
  tmp___6 = __fswab16((int )h->command);
#line 4176
  switch ((int )tmp___6) {
  case 23: ;
#line 4178
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4178
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4178
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4178
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4178);
  } else {

  }
#line 4179
  what = write_acked_by_peer_and_sis;
#line 4180
  goto ldv_44088;
  case 22: ;
#line 4182
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4182
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4182
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4182
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4182);
  } else {

  }
#line 4183
  what = write_acked_by_peer;
#line 4184
  goto ldv_44088;
  case 21: ;
#line 4186
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4186
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4186
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4186
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4186);
  } else {

  }
#line 4187
  what = recv_acked_by_peer;
#line 4188
  goto ldv_44088;
  case 24: ;
#line 4190
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4190
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4190
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4190
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4190);
  } else {

  }
#line 4191
  what = conflict_discarded_by_peer;
#line 4192
  goto ldv_44088;
  default: 
#line 4194
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4194
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4194
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
         4194);
#line 4195
  return (0);
  }
  ldv_44088: 
#line 4198
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4198
  return (tmp___17);
}
}
#line 4202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4204
  p = (struct p_block_ack *)h;
#line 4205
  tmp = __fswab64(p->sector);
#line 4205
  sector = (sector_t )tmp;
#line 4207
  tmp___2 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4207
  if (tmp___2 != 0) {
#line 4208
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4208
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4208
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4210
  tmp___3 = __fswab32(p->seq_num);
#line 4210
  update_peer_seq(mdev, tmp___3);
#line 4212
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4213
    tmp___4 = __fswab32(p->blksize);
#line 4213
    size = (int )tmp___4;
#line 4214
    atomic_dec(& mdev->rs_pending_cnt);
#line 4214
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4214
    if (tmp___8 < 0) {
#line 4214
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4214
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4214
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4214
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4214, tmp___5);
    } else {

    }
#line 4215
    drbd_rs_failed_io(mdev, sector, size);
#line 4216
    return (1);
  } else {

  }
#line 4218
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4218
  return (tmp___9);
}
}
#line 4222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4224
  p = (struct p_block_ack *)h;
#line 4225
  tmp = __fswab64(p->sector);
#line 4225
  sector = (sector_t )tmp;
#line 4227
  tmp___0 = __fswab32(p->seq_num);
#line 4227
  update_peer_seq(mdev, tmp___0);
#line 4228
  tmp___1 = __fswab32(p->blksize);
#line 4228
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4228
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4228
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4231
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4231
  return (tmp___4);
}
}
#line 4235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 4239
  p = (struct p_block_ack *)h;
#line 4241
  tmp = __fswab64(p->sector);
#line 4241
  sector = (sector_t )tmp;
#line 4242
  tmp___0 = __fswab32(p->blksize);
#line 4242
  size = (int )tmp___0;
#line 4243
  if (p->block_id != 0xffffffffffffffffULL) {
#line 4243
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4243
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4243
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4243);
  } else {

  }
#line 4245
  tmp___3 = __fswab32(p->seq_num);
#line 4245
  update_peer_seq(mdev, tmp___3);
#line 4247
  atomic_dec(& mdev->rs_pending_cnt);
#line 4247
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4247
  if (tmp___7 < 0) {
#line 4247
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4247
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4247
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4247
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_NegRSDReply",
           4247, tmp___4);
  } else {

  }
#line 4249
  tmp___8 = _get_ldev_if_state(mdev, D_FAILED);
#line 4249
  if (tmp___8 != 0) {
#line 4250
    drbd_rs_complete_io(mdev, sector);
#line 4251
    drbd_rs_failed_io(mdev, sector, size);
#line 4252
    put_ldev(mdev);
  } else {

  }
#line 4255
  return (1);
}
}
#line 4258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4260
  p = (struct p_barrier_ack *)h;
#line 4262
  tmp = __fswab32(p->set_size);
#line 4262
  tl_release(mdev, p->barrier, tmp);
#line 4264
  return (1);
}
}
#line 4267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4269
  p = (struct p_block_ack *)h;
#line 4274
  tmp = __fswab64(p->sector);
#line 4274
  sector = (sector_t )tmp;
#line 4275
  tmp___0 = __fswab32(p->blksize);
#line 4275
  size = (int )tmp___0;
#line 4277
  tmp___1 = __fswab32(p->seq_num);
#line 4277
  update_peer_seq(mdev, tmp___1);
#line 4279
  tmp___2 = __fswab64(p->block_id);
#line 4279
  if (tmp___2 == 4712ULL) {
#line 4280
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4282
    ov_oos_print(mdev);
  }
#line 4284
  drbd_rs_complete_io(mdev, sector);
#line 4285
  atomic_dec(& mdev->rs_pending_cnt);
#line 4285
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4285
  if (tmp___6 < 0) {
#line 4285
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4285
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4285
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4285
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4285, tmp___3);
  } else {

  }
#line 4287
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4287
  if (mdev->ov_left == 0UL) {
#line 4288
    tmp___7 = kmalloc___1(24UL, 16U);
#line 4288
    w = (struct drbd_work *)tmp___7;
#line 4289
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4290
      w->cb = & w_ov_finished;
#line 4291
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4293
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4293
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4293
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4294
      ov_oos_print(mdev);
#line 4295
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4298
  return (1);
}
}
#line 4306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[38U] ;

  {
#line 4308
  asender_tbl[0].pkt_size = 0UL;
#line 4308
  asender_tbl[0].process = 0;
#line 4308
  asender_tbl[1].pkt_size = 0UL;
#line 4308
  asender_tbl[1].process = 0;
#line 4308
  asender_tbl[2].pkt_size = 0UL;
#line 4308
  asender_tbl[2].process = 0;
#line 4308
  asender_tbl[3].pkt_size = 0UL;
#line 4308
  asender_tbl[3].process = 0;
#line 4308
  asender_tbl[4].pkt_size = 0UL;
#line 4308
  asender_tbl[4].process = 0;
#line 4308
  asender_tbl[5].pkt_size = 0UL;
#line 4308
  asender_tbl[5].process = 0;
#line 4308
  asender_tbl[6].pkt_size = 0UL;
#line 4308
  asender_tbl[6].process = 0;
#line 4308
  asender_tbl[7].pkt_size = 0UL;
#line 4308
  asender_tbl[7].process = 0;
#line 4308
  asender_tbl[8].pkt_size = 0UL;
#line 4308
  asender_tbl[8].process = 0;
#line 4308
  asender_tbl[9].pkt_size = 0UL;
#line 4308
  asender_tbl[9].process = 0;
#line 4308
  asender_tbl[10].pkt_size = 0UL;
#line 4308
  asender_tbl[10].process = 0;
#line 4308
  asender_tbl[11].pkt_size = 0UL;
#line 4308
  asender_tbl[11].process = 0;
#line 4308
  asender_tbl[12].pkt_size = 0UL;
#line 4308
  asender_tbl[12].process = 0;
#line 4308
  asender_tbl[13].pkt_size = 0UL;
#line 4308
  asender_tbl[13].process = 0;
#line 4308
  asender_tbl[14].pkt_size = 0UL;
#line 4308
  asender_tbl[14].process = 0;
#line 4308
  asender_tbl[15].pkt_size = 0UL;
#line 4308
  asender_tbl[15].process = 0;
#line 4308
  asender_tbl[16].pkt_size = 0UL;
#line 4308
  asender_tbl[16].process = 0;
#line 4308
  asender_tbl[17].pkt_size = 0UL;
#line 4308
  asender_tbl[17].process = 0;
#line 4308
  asender_tbl[18].pkt_size = 0UL;
#line 4308
  asender_tbl[18].process = 0;
#line 4308
  asender_tbl[19].pkt_size = 8UL;
#line 4308
  asender_tbl[19].process = & got_Ping;
#line 4308
  asender_tbl[20].pkt_size = 8UL;
#line 4308
  asender_tbl[20].process = & got_PingAck;
#line 4308
  asender_tbl[21].pkt_size = 32UL;
#line 4308
  asender_tbl[21].process = & got_BlockAck;
#line 4308
  asender_tbl[22].pkt_size = 32UL;
#line 4308
  asender_tbl[22].process = & got_BlockAck;
#line 4308
  asender_tbl[23].pkt_size = 32UL;
#line 4308
  asender_tbl[23].process = & got_BlockAck;
#line 4308
  asender_tbl[24].pkt_size = 32UL;
#line 4308
  asender_tbl[24].process = & got_BlockAck;
#line 4308
  asender_tbl[25].pkt_size = 32UL;
#line 4308
  asender_tbl[25].process = & got_NegAck;
#line 4308
  asender_tbl[26].pkt_size = 32UL;
#line 4308
  asender_tbl[26].process = & got_NegDReply;
#line 4308
  asender_tbl[27].pkt_size = 32UL;
#line 4308
  asender_tbl[27].process = & got_NegRSDReply;
#line 4308
  asender_tbl[28].pkt_size = 16UL;
#line 4308
  asender_tbl[28].process = & got_BarrierAck;
#line 4308
  asender_tbl[29].pkt_size = 12UL;
#line 4308
  asender_tbl[29].process = & got_RqSReply;
#line 4308
  asender_tbl[30].pkt_size = 0UL;
#line 4308
  asender_tbl[30].process = 0;
#line 4308
  asender_tbl[31].pkt_size = 0UL;
#line 4308
  asender_tbl[31].process = 0;
#line 4308
  asender_tbl[32].pkt_size = 32UL;
#line 4308
  asender_tbl[32].process = & got_OVResult;
#line 4308
  asender_tbl[33].pkt_size = 0UL;
#line 4308
  asender_tbl[33].process = 0;
#line 4308
  asender_tbl[34].pkt_size = 32UL;
#line 4308
  asender_tbl[34].process = & got_IsInSync;
#line 4308
  asender_tbl[35].pkt_size = 0UL;
#line 4308
  asender_tbl[35].process = 0;
#line 4308
  asender_tbl[36].pkt_size = 0UL;
#line 4308
  asender_tbl[36].process = 0;
#line 4308
  asender_tbl[37].pkt_size = 0UL;
#line 4308
  asender_tbl[37].process = 0;
#line 4327
  if (cmd > 37 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4328
    return (0);
  } else {

  }
#line 4329
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4334
  mdev = thi->mdev;
#line 4335
  h = & mdev->meta.rbuf.header;
#line 4336
  cmd = 0;
#line 4339
  buf = (void *)h;
#line 4340
  received = 0;
#line 4341
  expect = 8;
#line 4344
  tmp = mdev_to_minor(mdev);
#line 4344
  tmp___0 = get_current();
#line 4344
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4346
  tmp___1 = get_current();
#line 4346
  tmp___1->policy = 2U;
#line 4347
  tmp___2 = get_current();
#line 4347
  tmp___2->rt_priority = 2U;
#line 4349
  goto ldv_44166;
  ldv_44170: 
#line 4350
  drbd_thread_current_set_cpu(mdev);
#line 4351
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4351
  if (tmp___6 != 0) {
#line 4352
    tmp___3 = drbd_send_ping(mdev);
#line 4352
    _b = tmp___3 == 0;
#line 4352
    if (_b != 0) {
#line 4352
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4352
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4352
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4352);
    } else {

    }
#line 4352
    if (_b != 0) {
#line 4352
      goto reconnect;
    } else {

    }
#line 4353
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4359
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4359
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4359
    if (tmp___7 > 3) {
#line 4361
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_44165: 
#line 4363
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4364
  tmp___8 = get_current();
#line 4364
  flush_signals(tmp___8);
#line 4365
  tmp___11 = drbd_process_done_ee(mdev);
#line 4365
  if (tmp___11 == 0) {
#line 4366
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4366
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4366
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4367
    goto reconnect;
  } else {

  }
#line 4370
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4371
  spin_lock_irq(& mdev->req_lock);
#line 4372
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4373
  spin_unlock_irq(& mdev->req_lock);
#line 4377
  if (empty != 0) {
#line 4378
    goto ldv_44164;
  } else {

  }
#line 4379
  goto ldv_44165;
  ldv_44164: ;
#line 4381
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4382
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4385
  tmp___12 = get_current();
#line 4385
  tmp___13 = signal_pending(tmp___12);
#line 4385
  if (tmp___13 != 0) {
#line 4386
    goto ldv_44166;
  } else {

  }
#line 4388
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4390
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4392
  tmp___14 = get_current();
#line 4392
  flush_signals(tmp___14);
#line 4404
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4404
  if (tmp___21 != 0L) {
#line 4405
    received = received + rv;
#line 4406
    buf = buf + (unsigned long )rv;
  } else
#line 4407
  if (rv == 0) {
#line 4408
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4408
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4408
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4409
    goto reconnect;
  } else
#line 4410
  if (rv == -11) {
#line 4411
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4413
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4413
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4413
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4414
      goto reconnect;
    } else {

    }
#line 4416
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4417
    goto ldv_44166;
  } else
#line 4418
  if (rv == -4) {
#line 4419
    goto ldv_44166;
  } else {
#line 4421
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4421
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4421
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4422
    goto reconnect;
  }
#line 4425
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4426
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4426
    if (tmp___25 != 0L) {
#line 4427
      tmp___22 = __fswab32(h->magic);
#line 4427
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4427
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4427
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4430
      goto reconnect;
    } else {

    }
#line 4432
    tmp___26 = __fswab16((int )h->command);
#line 4432
    cmd = get_asender_cmd((int )tmp___26);
#line 4433
    tmp___27 = __fswab16((int )h->length);
#line 4433
    len = (int )tmp___27;
#line 4434
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4434
    if (tmp___31 != 0L) {
#line 4435
      tmp___28 = __fswab32(h->magic);
#line 4435
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4435
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4435
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4438
      goto disconnect;
    } else {

    }
#line 4440
    expect = (int )cmd->pkt_size;
#line 4441
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4441
    if (_b___0 != 0) {
#line 4441
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4441
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4441
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4441);
    } else {

    }
#line 4441
    if (_b___0 != 0) {
#line 4442
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4444
  if (received == expect) {
#line 4445
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4445
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4445
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4445
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4445);
    } else {

    }
#line 4446
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4446
    if (tmp___36 == 0) {
#line 4447
      goto reconnect;
    } else {

    }
#line 4449
    buf = (void *)h;
#line 4450
    received = 0;
#line 4451
    expect = 8;
#line 4452
    cmd = 0;
  } else {

  }
  ldv_44166: 
#line 4349
  tmp___37 = get_t_state(thi);
#line 4349
  if ((unsigned int )tmp___37 == 1U) {
#line 4350
    goto ldv_44170;
  } else {

  }

#line 4456
  if (0) {
    reconnect: 
#line 4458
    val.i = 0U;
#line 4458
    val.ldv_33296.conn = 5U;
#line 4458
    mask.i = 0U;
#line 4458
    mask.ldv_33296.conn = 31U;
#line 4458
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4460
  if (0) {
    disconnect: 
#line 4462
    val___0.i = 0U;
#line 4462
    val___0.ldv_33296.conn = 1U;
#line 4462
    mask___0.i = 0U;
#line 4462
    mask___0.ldv_33296.conn = 31U;
#line 4462
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4464
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4466
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 4466
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4466
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4466
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4466);
  } else {

  }
#line 4467
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4467
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4467
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4469
  return (0);
}
}
#line 4509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4521
  LDV_IN_INTERRUPT = 1;
#line 4530
  ldv_initialize();
#line 4532
  goto ldv_44199;
  ldv_44198: 
#line 4535
  tmp = nondet_int();
#line 4535
  switch (tmp) {
  default: ;
#line 4537
  goto ldv_44197;
  }
  ldv_44197: ;
  ldv_44199: 
#line 4532
  tmp___0 = nondet_int();
#line 4532
  if (tmp___0 != 0) {
#line 4533
    goto ldv_44198;
  } else {

  }


#line 4546
  ldv_check_final_state();
#line 4549
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 590 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 592
  __hlist_del(n);
#line 593
  n->next = 0xdead000000100100UL;
#line 594
  n->pprev = 0xdead000000200200UL;
#line 595
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 299 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 303
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 163 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 88 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 247 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 249
  rcu_read_lock_sched_notrace();
#line 251
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 253
  return;
}
}
#line 269 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 271
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 273
  rcu_read_lock_sched_notrace();
#line 274
  return;
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11583: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_11583;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___2(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 354 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 793 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1108
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1374
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1376
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1885 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1887
  atomic_inc(& mdev->ap_pending_cnt);
#line 1888
  return;
}
}
#line 2039 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2041
  mxb = 1000000;
#line 2042
  tmp = get_net_conf(mdev);
#line 2042
  if (tmp != 0) {
#line 2043
    mxb = (mdev->net_conf)->max_buffers;
#line 2044
    put_net_conf(mdev);
  } else {

  }
#line 2046
  return (mxb);
}
}
#line 2049 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2055
  switch ((unsigned int )s.ldv_33296.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2068
  goto ldv_41669;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2087
  return (0);
  }
  ldv_41669: ;
#line 2090
  switch ((unsigned int )s.ldv_33296.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2097
  goto ldv_41689;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2106
  return (0);
  }
  ldv_41689: ;
#line 2109
  return (1);
}
}
#line 2112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2114
  tmp = drbd_get_max_buffers(mdev);
#line 2114
  mxb = tmp;
#line 2116
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2117
    return (0);
  } else {

  }
#line 2118
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2118
  if (tmp___0 != 0) {
#line 2119
    return (0);
  } else {

  }
#line 2126
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2126
  if (tmp___1 == 0) {
#line 2127
    return (0);
  } else {

  }
#line 2131
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2131
  if (tmp___2 > mxb) {
#line 2132
    return (0);
  } else {

  }
#line 2133
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2133
  if (tmp___3 != 0) {
#line 2134
    return (0);
  } else {

  }
#line 2135
  return (1);
}
}
#line 2141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int one_or_two ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2145
  tmp = get_current();
#line 2145
  wait.flags = 0U;
#line 2145
  wait.private = (void *)tmp;
#line 2145
  wait.func = & autoremove_wake_function;
#line 2145
  wait.task_list.next = & wait.task_list;
#line 2145
  wait.task_list.prev = & wait.task_list;
#line 2155
  spin_lock_irq(& mdev->req_lock);
#line 2156
  goto ldv_41705;
  ldv_41704: 
#line 2157
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2158
  spin_unlock_irq(& mdev->req_lock);
#line 2159
  schedule();
#line 2160
  finish_wait(& mdev->misc_wait, & wait);
#line 2161
  spin_lock_irq(& mdev->req_lock);
  ldv_41705: 
#line 2156
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2156
  if (tmp___0 == 0) {
#line 2157
    goto ldv_41704;
  } else {

  }
#line 2163
  atomic_add(one_or_two, & mdev->ap_bio_cnt);
#line 2164
  spin_unlock_irq(& mdev->req_lock);
#line 2165
  return;
}
}
#line 2167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2169
  tmp = drbd_get_max_buffers(mdev);
#line 2169
  mxb = tmp;
#line 2170
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2170
  ap_bio = tmp___0;
#line 2172
  if (ap_bio < 0) {
#line 2172
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2172
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2172
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2172);
  } else {

  }
#line 2176
  if (ap_bio < mxb) {
#line 2177
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2178
  if (ap_bio == 0) {
#line 2178
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2178
    if (tmp___4 != 0) {
#line 2179
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2179
      if (tmp___3 == 0) {
#line 2180
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2181
  return;
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 65
  q = bdev_get_queue(mdev->this_bdev);
#line 67
  spin_lock_irq(q->queue_lock);
#line 72
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 72
  if (tmp == 0) {
#line 73
    blk_plug_device(q);
#line 74
    del_timer(& q->unplug_timer);
  } else {

  }
#line 77
  spin_unlock_irq(q->queue_lock);
#line 78
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_41823: ;
#line 207
    goto ldv_41823;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_41828: ;
#line 216
    goto ldv_41828;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41897;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41897;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41897;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41897;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_41897: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_41930;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_41930;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_41930;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_41930;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_41930: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 68
  s = req->rq_state;
#line 72
  if ((int )rw == 1) {
#line 79
    list_del(& req->tl_requests);
#line 84
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 85
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             85U);
    } else {

    }
#line 87
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 88
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         88U);
    } else {

    }
#line 100
    if ((s & 7UL) != 0UL) {
#line 101
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 101
      if (tmp___2 != 0) {
#line 102
        drbd_al_complete_io(mdev, req->sector);
#line 103
        put_ldev(mdev);
      } else {
#line 104
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 104
        if (tmp___1 != 0) {
#line 105
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 123
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 125
    if ((unsigned long )((void *)req->w.list.next) != 0xdead000000100100UL) {
#line 125
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 125
      if (tmp___7 == 0) {
#line 129
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 130
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 132
    req->w.cb = & w_io_error;
#line 133
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 136
    drbd_req_free(req);
  }
#line 137
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 149
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 149
  if (tmp != 0) {
#line 150
    return;
  } else {

  }
#line 152
  b = mdev->newest_tle;
#line 153
  b->w.cb = & w_send_barrier;
#line 158
  inc_ap_pending(mdev);
#line 159
  drbd_queue_work(& mdev->data.work, & b->w);
#line 160
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 161
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 166
  s = req->rq_state;
#line 174
  if ((int )mdev->state.ldv_33296.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 176
    queue_barrier(mdev);
  } else {

  }
#line 181
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 182
    sector = req->sector;
#line 183
    size = (int const   )req->size;
#line 189
    slot = tl_hash_slot___0(mdev, sector);
#line 190
    n = slot->first;
#line 190
    goto ldv_41973;
    ldv_41972: 
#line 191
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 191
    if (tmp___1 != 0) {
#line 192
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 190
    n = n->next;
    ldv_41973: ;
#line 190
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 190
      __builtin_prefetch((void const   *)n->next);
#line 190
      if (1 != 0) {
#line 190
        __mptr = (struct hlist_node  const  *)n;
#line 190
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 190
        if (1 != 0) {
#line 191
          goto ldv_41972;
        } else {
#line 193
          goto ldv_41974;
        }
      } else {
#line 193
        goto ldv_41974;
      }
    } else {

    }
    ldv_41974: 
#line 213
    slot = ee_hash_slot___0(mdev, req->sector);
#line 214
    n = slot->first;
#line 214
    goto ldv_41981;
    ldv_41980: 
#line 215
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 215
    if (tmp___2 != 0) {
#line 216
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 217
      goto ldv_41979;
    } else {

    }
#line 214
    n = n->next;
    ldv_41981: ;
#line 214
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 214
      __builtin_prefetch((void const   *)n->next);
#line 214
      if (1 != 0) {
#line 214
        __mptr___0 = (struct hlist_node  const  *)n;
#line 214
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 214
        if (1 != 0) {
#line 215
          goto ldv_41980;
        } else {
#line 217
          goto ldv_41979;
        }
      } else {
#line 217
        goto ldv_41979;
      }
    } else {

    }
    ldv_41979: ;
  } else {

  }
#line 220
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 227
  bio_endio(m->bio, m->error);
#line 228
  dec_ap_bio(mdev);
#line 229
  return;
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 239
  s = req->rq_state;
#line 240
  mdev = req->mdev;
#line 242
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 253
  if ((s & 16UL) != 0UL) {
#line 254
    return;
  } else {

  }
#line 255
  if ((s & 8UL) != 0UL) {
#line 256
    return;
  } else {

  }
#line 257
  if ((int )s & 1) {
#line 258
    return;
  } else {

  }
#line 260
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 282
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 283
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 283
    error = (int )tmp;
#line 287
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 287
    if (tmp___2 == 0) {
#line 288
      hlist_del(& req->colision);
    } else
#line 290
    if ((s & 504UL) != 0UL) {
#line 290
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             290);
    } else {

    }
#line 293
    if (rw == 1) {
#line 294
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 297
    _drbd_end_io_acct(mdev, req);
#line 299
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 300
    m->bio = req->master_bio;
#line 301
    req->master_bio = 0;
  } else {

  }
#line 304
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 309
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 310
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 340
  mdev = req->mdev;
#line 341
  sector = req->sector;
#line 342
  size = (int const   )req->size;
#line 348
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 348
  if (tmp___1 == 0) {
#line 348
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           348);
  } else {

  }
#line 350
  tmp___2 = get_net_conf(mdev);
#line 350
  if (tmp___2 == 0) {
#line 351
    return (0);
  } else {

  }
#line 354
  _b = mdev->tl_hash_s == 0U;
#line 354
  if (_b != 0) {
#line 354
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           354);
  } else {

  }
#line 354
  if (_b != 0) {
#line 355
    goto out_no_conflict;
  } else {

  }
#line 356
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 356
  if (tmp___5 != 0L) {
#line 356
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (356), "i" (12UL));
    ldv_42009: ;
#line 356
    goto ldv_42009;
  } else {

  }
#line 359
  slot = tl_hash_slot___0(mdev, sector);
#line 360
  n = slot->first;
#line 360
  goto ldv_42016;
  ldv_42015: 
#line 361
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 361
  if (tmp___10 != 0) {
#line 362
    tmp___6 = get_current();
#line 362
    tmp___7 = get_current();
#line 362
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 368
    goto out_conflict;
  } else {

  }
#line 360
  n = n->next;
  ldv_42016: ;
#line 360
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 360
    __builtin_prefetch((void const   *)n->next);
#line 360
    if (1 != 0) {
#line 360
      __mptr = (struct hlist_node  const  *)n;
#line 360
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 360
      if (1 != 0) {
#line 361
        goto ldv_42015;
      } else {
#line 363
        goto ldv_42017;
      }
    } else {
#line 363
      goto ldv_42017;
    }
  } else {

  }
  ldv_42017: ;
#line 372
  if (mdev->ee_hash_s != 0U) {
#line 374
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 374
    if (tmp___11 != 0L) {
#line 374
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (374), "i" (12UL));
      ldv_42018: ;
#line 374
      goto ldv_42018;
    } else {

    }
#line 377
    slot = ee_hash_slot___0(mdev, sector);
#line 378
    n = slot->first;
#line 378
    goto ldv_42024;
    ldv_42023: 
#line 379
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 379
    if (tmp___16 != 0) {
#line 380
      tmp___12 = get_current();
#line 380
      tmp___13 = get_current();
#line 380
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 386
      goto out_conflict;
    } else {

    }
#line 378
    n = n->next;
    ldv_42024: ;
#line 378
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 378
      __builtin_prefetch((void const   *)n->next);
#line 378
      if (1 != 0) {
#line 378
        __mptr___0 = (struct hlist_node  const  *)n;
#line 378
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 378
        if (1 != 0) {
#line 379
          goto ldv_42023;
        } else {
#line 381
          goto ldv_42025;
        }
      } else {
#line 381
        goto ldv_42025;
      }
    } else {

    }
    ldv_42025: ;
  } else {

  }
  out_no_conflict: 
#line 395
  put_net_conf(mdev);
#line 396
  return (0);
  out_conflict: 
#line 399
  put_net_conf(mdev);
#line 400
  return (1);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 418
  mdev = req->mdev;
#line 419
  m->bio = 0;
#line 421
  switch ((unsigned int )what) {
  default: 
#line 423
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
         423);
#line 424
  goto ldv_42033;
  case 1U: ;
#line 435
  if ((req->rq_state & 504UL) != 0UL) {
#line 435
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           435);
  } else {

  }
#line 436
  req->rq_state = req->rq_state | 8UL;
#line 437
  inc_ap_pending(mdev);
#line 438
  goto ldv_42033;
  case 2U: ;
#line 442
  if ((req->rq_state & 7UL) != 0UL) {
#line 442
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           442);
  } else {

  }
#line 443
  req->rq_state = req->rq_state | 1UL;
#line 444
  goto ldv_42033;
  case 19U: ;
#line 447
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 448
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 450
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 452
  req->rq_state = req->rq_state | 6UL;
#line 453
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 455
  _req_may_be_done(req, m);
#line 456
  put_ldev(mdev);
#line 457
  goto ldv_42033;
  case 18U: 
#line 460
  req->rq_state = req->rq_state | 2UL;
#line 461
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 463
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 466
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 467
  _req_may_be_done(req, m);
#line 468
  put_ldev(mdev);
#line 469
  goto ldv_42033;
  case 17U: 
#line 473
  req->rq_state = req->rq_state | 2UL;
#line 474
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 475
  _req_may_be_done(req, m);
#line 476
  put_ldev(mdev);
#line 477
  goto ldv_42033;
  case 16U: 
#line 480
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         480U);
#line 482
  req->rq_state = req->rq_state | 2UL;
#line 483
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 485
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 488
  if ((req->rq_state & 504UL) != 0UL) {
#line 488
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           488);
  } else {

  }
#line 489
  req->rq_state = req->rq_state | 8UL;
#line 490
  inc_ap_pending(mdev);
#line 492
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 493
  put_ldev(mdev);
  case 4U: 
#line 513
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 513
  hlist_add_head(& req->colision, tmp___11);
#line 515
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 517
  if ((req->rq_state & 8UL) == 0UL) {
#line 517
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           517);
  } else {

  }
#line 518
  req->rq_state = req->rq_state | 16UL;
#line 519
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 522
  drbd_queue_work(& mdev->data.work, & req->w);
#line 523
  goto ldv_42033;
  case 3U: 
#line 529
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 529
  hlist_add_head(& req->colision, tmp___14);
#line 549
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 553
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 553
  if (tmp___17 != 0) {
#line 553
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           553);
  } else {

  }
#line 555
  req->epoch = (mdev->newest_tle)->br_number;
#line 556
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 560
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 563
  if ((req->rq_state & 8UL) == 0UL) {
#line 563
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 563
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 563
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           563);
  } else {

  }
#line 564
  req->rq_state = req->rq_state | 16UL;
#line 565
  req->w.cb = & w_send_dblock;
#line 566
  drbd_queue_work(& mdev->data.work, & req->w);
#line 569
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 570
    queue_barrier(mdev);
  } else {

  }
#line 572
  goto ldv_42033;
  case 5U: ;
  case 6U: 
#line 579
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 582
  _req_may_be_done(req, m);
#line 583
  goto ldv_42033;
  case 7U: ;
#line 587
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 591
    if ((req->rq_state & 8UL) != 0UL) {
#line 592
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 592
      if (tmp___20 != 0) {
#line 592
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 592
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 592
      if (tmp___24 < 0) {
#line 592
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 592
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 592
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 592
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 592, tmp___21);
      } else {

      }
#line 593
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 594
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 600
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 601
  req->rq_state = req->rq_state | 32UL;
#line 607
  _req_may_be_done(req, m);
#line 608
  goto ldv_42033;
  case 8U: ;
#line 613
  if ((req->rq_state & 8UL) != 0UL) {
#line 614
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 614
    if (tmp___25 != 0) {
#line 614
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 614
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
    if (tmp___29 < 0) {
#line 614
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 614
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 614
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 614, tmp___26);
    } else {

    }
  } else {

  }
#line 615
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 616
  req->rq_state = req->rq_state | 64UL;
#line 619
  if ((req->rq_state & 16UL) == 0UL) {
#line 620
    _req_may_be_done(req, m);
  } else {

  }
#line 621
  goto ldv_42033;
  case 11U: 
#line 624
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 629
  if ((unsigned int )what == 12U) {
#line 630
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 633
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 651
  req->rq_state = req->rq_state | 128UL;
#line 652
  if ((req->rq_state & 8UL) == 0UL) {
#line 652
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           652);
  } else {

  }
#line 653
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 653
  if (tmp___34 != 0) {
#line 653
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 653
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 653
  if (tmp___38 < 0) {
#line 653
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 653
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 653, tmp___35);
  } else {

  }
#line 654
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 655
  _req_may_be_done(req, m);
#line 656
  goto ldv_42033;
  case 13U: ;
#line 660
  if ((req->rq_state & 8UL) != 0UL) {
#line 661
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 661
    if (tmp___39 != 0) {
#line 661
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 661
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 661
    if (tmp___43 < 0) {
#line 661
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 661
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 661
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 661
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 661, tmp___40);
    } else {

    }
  } else {

  }
#line 662
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 664
  req->rq_state = req->rq_state | 64UL;
#line 665
  _req_may_be_done(req, m);
#line 667
  goto ldv_42033;
  case 14U: ;
#line 670
  if ((req->rq_state & 8UL) != 0UL) {
#line 674
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 675
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 677
  if ((req->rq_state & 32UL) == 0UL) {
#line 677
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           677);
  } else {

  }
#line 678
  req->rq_state = req->rq_state | 64UL;
#line 679
  _req_may_be_done(req, m);
#line 680
  goto ldv_42033;
  case 15U: ;
#line 683
  if ((req->rq_state & 8UL) == 0UL) {
#line 683
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           683);
  } else {

  }
#line 684
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 684
  if (tmp___50 != 0) {
#line 684
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 684
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 684
  if (tmp___54 < 0) {
#line 684
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 684
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 684, tmp___51);
  } else {

  }
#line 685
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 686
  req->rq_state = req->rq_state | 192UL;
#line 687
  _req_may_be_done(req, m);
#line 688
  goto ldv_42033;
  }
  ldv_42033: ;
#line 690
  return;
}
}
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 704
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 705
    return (1);
  } else {

  }
#line 706
  if ((int )mdev->state.ldv_33296.disk > 4) {
#line 707
    return (0);
  } else {

  }
#line 708
  if ((int )mdev->state.ldv_33296.disk <= 3) {
#line 709
    return (0);
  } else {

  }
#line 711
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 712
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 714
  if (sector >= nr_sectors) {
#line 714
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           714);
  } else {

  }
#line 715
  if (esector >= nr_sectors) {
#line 715
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           715);
  } else {

  }
#line 717
  sbnr = sector >> 3;
#line 718
  ebnr = esector >> 3;
#line 720
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 720
  return (tmp___3 == 0);
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 725
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 726
  size = (int const   )bio->bi_size;
#line 727
  sector = bio->bi_sector;
#line 728
  b = 0;
#line 731
  err = -5;
#line 734
  req = drbd_req_new(mdev, bio);
#line 735
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 736
    dec_ap_bio(mdev);
#line 739
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 740
    bio_endio(bio, -12);
#line 741
    return (0);
  } else {

  }
#line 744
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 745
  if (local == 0) {
#line 746
    bio_put(req->private_bio);
#line 747
    req->private_bio = 0;
  } else {

  }
#line 749
  if (rw == 1) {
#line 750
    remote = 1;
  } else {
#line 753
    if (local != 0) {
#line 754
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 754
      if (tmp___1 == 0) {
#line 760
        local = 0;
#line 761
        bio_put(req->private_bio);
#line 762
        req->private_bio = 0;
#line 763
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 766
    remote = local == 0 && (int )mdev->state.ldv_33296.pdsk > 7;
  }
#line 777
  if ((rw == 2 && (int )mdev->state.ldv_33296.disk > 3) && local == 0) {
#line 778
    err = -11;
#line 779
    goto fail_and_free_req;
  } else {

  }
#line 787
  if (rw == 1 && local != 0) {
#line 788
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 790
  remote = remote != 0 && (*((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_33296.conn > 9));
#line 794
  if (local == 0 && remote == 0) {
#line 795
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 796
    goto fail_free_complete;
  } else {

  }
#line 805
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 805
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 805
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 809
      tmp___4 = kmalloc___2(56UL, 16U);
#line 809
      b = (struct drbd_tl_epoch *)tmp___4;
#line 810
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 811
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 812
        err = -12;
#line 813
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 818
  spin_lock_irq(& mdev->req_lock);
#line 820
  if (remote != 0) {
#line 821
    remote = *((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_33296.conn > 9);
#line 824
    if (remote == 0) {
#line 825
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 825
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 825
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 826
    if (local == 0 && remote == 0) {
#line 827
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 828
      spin_unlock_irq(& mdev->req_lock);
#line 829
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 833
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 834
    mdev->unused_spare_tle = b;
#line 835
    b = 0;
  } else {

  }
#line 837
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 837
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 837
    if (tmp___12 != 0) {
#line 842
      spin_unlock_irq(& mdev->req_lock);
#line 843
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 848
  _drbd_start_io_acct(mdev, req, bio);
#line 860
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 860
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 860
    if (tmp___16 != 0) {
#line 862
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 863
      mdev->unused_spare_tle = 0;
    } else {
#line 860
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 865
  if (remote != 0 && rw == 1) {
#line 865
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 865
    if (tmp___15 != 0) {
#line 865
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             866);
    } else {

    }
  } else {

  }
#line 884
  if (remote != 0) {
#line 885
    _req_mod(req, to_be_send);
  } else {

  }
#line 886
  if (local != 0) {
#line 887
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 892
  if (rw == 1) {
#line 892
    tmp___22 = _req_conflicts(req);
#line 892
    if (tmp___22 != 0) {
#line 899
      if (local != 0) {
#line 900
        bio_put(req->private_bio);
#line 901
        req->private_bio = 0;
#line 902
        drbd_al_complete_io(mdev, req->sector);
#line 903
        put_ldev(mdev);
#line 904
        local = 0;
      } else {

      }
#line 906
      if (remote != 0) {
#line 907
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 907
        if (tmp___17 != 0) {
#line 907
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 907
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 907
        if (tmp___21 < 0) {
#line 907
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 907
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 907, tmp___18);
        } else {

        }
      } else {

      }
#line 908
      _drbd_end_io_acct(mdev, req);
#line 910
      bio_endio(req->master_bio, 0);
#line 911
      req->master_bio = 0;
#line 912
      dec_ap_bio(mdev);
#line 913
      drbd_req_free(req);
#line 914
      remote = 0;
    } else {

    }
  } else {

  }
#line 919
  if (remote != 0) {
#line 924
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 928
  spin_unlock_irq(& mdev->req_lock);
#line 929
  kfree((void const   *)b);
#line 931
  if (local != 0) {
#line 932
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 934
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 934
    if (tmp___23 != 0) {
#line 937
      bio_endio(req->private_bio, -5);
    } else {
#line 939
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 944
  drbd_plug_device(mdev);
#line 946
  return (0);
  fail_free_complete: ;
#line 949
  if (rw == 1 && local != 0) {
#line 950
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 952
  if (local != 0) {
#line 953
    bio_put(req->private_bio);
#line 954
    req->private_bio = 0;
#line 955
    put_ldev(mdev);
  } else {

  }
#line 957
  bio_endio(bio, err);
#line 958
  drbd_req_free(req);
#line 959
  dec_ap_bio(mdev);
#line 960
  kfree((void const   *)b);
#line 962
  return (0);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 973
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 975
    return (1);
  } else {

  }
#line 977
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 979
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 979
    if (tmp___3 != 0) {
#line 980
      tmp = get_current();
#line 980
      tmp___0 = get_current();
#line 980
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 986
    return (1);
  } else {

  }
#line 998
  if ((int )mdev->state.ldv_33296.disk <= 7 && (int )mdev->state.ldv_33296.pdsk <= 7) {
#line 999
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 999
    if (tmp___6 != 0) {
#line 1000
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1000
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1000
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 1001
    return (1);
  } else {

  }
#line 1004
  return (0);
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;

  {
#line 1010
  mdev = (struct drbd_conf *)q->queuedata;
#line 1012
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1012
  if (tmp != 0) {
#line 1013
    bio_endio(bio, -1);
#line 1014
    return (0);
  } else {

  }
#line 1025
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1025
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1025
  if (tmp___1 != 0L) {
#line 1025
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1025
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1025
    if (tmp___3 != 0L) {
#line 1027
      bio_endio(bio, -95);
#line 1028
      return (0);
    } else {

    }
  } else {

  }
#line 1034
  if (bio->bi_size == 0U) {
#line 1034
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1034);
  } else {

  }
#line 1035
  if ((bio->bi_size & 511U) != 0U) {
#line 1035
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1035);
  } else {

  }
#line 1036
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1036
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1036
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1036
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1036);
  } else {

  }
#line 1040
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1041
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1043
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1043
  if (tmp___11 != 0L) {
#line 1044
    inc_ap_bio(mdev, 1);
#line 1045
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1045
    return (tmp___10);
  } else {

  }
#line 1050
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1052
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1056
    bio_endio(bio, -22);
  } else {
#line 1068
    sect = bio->bi_sector;
#line 1069
    sps = 64;
#line 1070
    mask = sps + -1;
#line 1071
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1072
    bp = bio_split(bio, (int )first_sectors);
#line 1083
    inc_ap_bio(mdev, 2);
#line 1085
    if (s_enr + 1U != e_enr) {
#line 1085
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1085
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1085
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             1085);
    } else {

    }
#line 1087
    drbd_make_request_common(mdev, & bp->bio1);
#line 1088
    drbd_make_request_common(mdev, & bp->bio2);
#line 1089
    bio_pair_release(bp);
  }
#line 1091
  return (0);
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1109
  mdev = (struct drbd_conf *)q->queuedata;
#line 1110
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1112
  bio_size = bvm->bi_size;
#line 1115
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1117
  if (limit < 0) {
#line 1118
    limit = 0;
  } else {

  }
#line 1119
  if (bio_size == 0U) {
#line 1120
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1121
      limit = (int )bvec->bv_len;
    } else
#line 1122
    if (limit != 0) {
#line 1122
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1122
      if (tmp != 0) {
#line 1123
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1125
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1126
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1127
          _min1 = limit;
#line 1127
          _min2 = backing_limit;
#line 1127
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1129
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1131
  return (limit);
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___2(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 312 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 314
  page = compound_head(page);
#line 315
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 315
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 315
  if (tmp___0 != 0L) {
#line 315
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (315), "i" (12UL));
    ldv_15636: ;
#line 315
    goto ldv_15636;
  } else {

  }
#line 316
  atomic_inc(& page->_count);
#line 317
  return;
}
}
#line 1063 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1065
  retval = 512;
#line 1067
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1068
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1070
  return ((unsigned short )retval);
}
}
#line 1073 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1075
  tmp = bdev_get_queue(bdev);
#line 1075
  tmp___0 = queue_logical_block_size(tmp);
#line 1075
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1516 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1525
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1526
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1527
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1535
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 192;
  retry: 
#line 93
  bio = bio_alloc(16U, 1);
#line 94
  bio->bi_bdev = bdev->md_bdev;
#line 95
  bio->bi_sector = sector;
#line 96
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 96
  ok = tmp___0 == size;
#line 97
  if (ok == 0) {
#line 98
    goto out;
  } else {

  }
#line 99
  bio->bi_private = (void *)(& md_io);
#line 100
  bio->bi_end_io = & drbd_md_io_complete;
#line 101
  bio->bi_rw = (unsigned long )rw;
#line 103
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 103
  if (tmp___1 != 0) {
#line 104
    bio_endio(bio, -5);
  } else {
#line 106
    submit_bio(rw, bio);
  }
#line 107
  wait_for_completion(& md_io.event);
#line 108
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 113
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 113
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 113
  if (tmp___5 != 0L) {
#line 113
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 113
    if (tmp___6 != 0L) {
#line 115
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 116
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 117
      rw = rw & -33;
#line 118
      bio_put(bio);
#line 119
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 122
  bio_put(bio);
#line 123
  return (ok);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 130
  offset = 0;
#line 131
  iop = mdev->md_io_page;
#line 133
  tmp___1 = mutex_is_locked(& mdev->md_io_mutex);
#line 133
  if (tmp___1 == 0) {
#line 133
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           133);
  } else {

  }
#line 135
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 135
  if (tmp___2 != 0L) {
#line 135
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (135), "i" (12UL));
    ldv_41836: ;
#line 135
    goto ldv_41836;
  } else {

  }
#line 137
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 137
  logical_block_size = (int )tmp___3;
#line 138
  if (logical_block_size == 0) {
#line 139
    logical_block_size = 512;
  } else {

  }
#line 142
  if (logical_block_size != 512) {
#line 143
    mask = logical_block_size / 512 + -1;
#line 144
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 144
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             144);
    } else {

    }
#line 145
    if ((mask + 1) * 512 != logical_block_size) {
#line 145
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             145);
    } else {

    }
#line 146
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 147
    sector = (sector_t )(~ mask) & sector;
#line 148
    iop = mdev->md_io_tmpp;
#line 150
    if (rw & 1) {
#line 153
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 153
      p = tmp___8;
#line 154
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 154
      hp = tmp___9;
#line 156
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 159
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 159
      if (tmp___12 != 0L) {
#line 160
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 163
        return (0);
      } else {

      }
#line 166
      __len = 512UL;
#line 166
      if (__len > 63UL) {
#line 166
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 166
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 170
  tmp___17 = drbd_md_first_sector(bdev);
#line 170
  if (tmp___17 > sector) {
#line 172
    tmp___13 = get_current();
#line 172
    tmp___14 = get_current();
#line 172
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 170
    tmp___18 = drbd_md_last_sector(bdev);
#line 170
    if (tmp___18 < sector) {
#line 172
      tmp___13 = get_current();
#line 172
      tmp___14 = get_current();
#line 172
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 176
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 177
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 177
  if (tmp___21 != 0L) {
#line 178
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 180
    return (0);
  } else {

  }
#line 183
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 184
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 184
    p___0 = tmp___22;
#line 185
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 185
    hp___0 = tmp___23;
#line 187
    __len___0 = 512UL;
#line 187
    if (__len___0 > 63UL) {
#line 187
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 187
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 190
  return (ok);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 197
  al_flags = 0UL;
#line 199
  spin_lock_irq(& mdev->al_lock);
#line 200
  tmp = lc_find(mdev->resync, enr / 4U);
#line 201
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 201
  if (tmp___1 != 0L) {
#line 202
    __mptr = (struct lc_element  const  *)tmp;
#line 202
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 203
    if (tmp___0 != 0) {
#line 204
      spin_unlock_irq(& mdev->al_lock);
#line 205
      return (0);
    } else {

    }
  } else {

  }
#line 208
  al_ext = lc_get(mdev->act_log, enr);
#line 209
  al_flags = (mdev->act_log)->flags;
#line 210
  spin_unlock_irq(& mdev->al_lock);
#line 221
  return (al_ext);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 226
  enr = (unsigned int )(sector >> 13);
#line 230
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 230
  if (tmp___1 <= 0) {
#line 230
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           230);
  } else {

  }
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_41865;
  } else {

  }
#line 232
  tmp___2 = get_current();
#line 232
  __wait.flags = 0U;
#line 232
  __wait.private = (void *)tmp___2;
#line 232
  __wait.func = & autoremove_wake_function;
#line 232
  __wait.task_list.next = & __wait.task_list;
#line 232
  __wait.task_list.prev = & __wait.task_list;
  ldv_41868: 
#line 232
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_41867;
  } else {

  }
#line 232
  schedule();
#line 232
  goto ldv_41868;
  ldv_41867: 
#line 232
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41865: ;
#line 234
  if (al_ext->lc_number != enr) {
#line 241
    init_completion(& al_work.event);
#line 242
    al_work.al_ext = al_ext;
#line 243
    al_work.enr = enr;
#line 244
    al_work.old_enr = al_ext->lc_number;
#line 245
    al_work.w.cb = & w_al_write_transaction;
#line 246
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 247
    wait_for_completion(& al_work.event);
#line 249
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 251
    spin_lock_irq(& mdev->al_lock);
#line 252
    lc_changed(mdev->act_log, al_ext);
#line 253
    spin_unlock_irq(& mdev->al_lock);
#line 254
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 256
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 260
  enr = (unsigned int )(sector >> 13);
#line 264
  tmp = spinlock_check(& mdev->al_lock);
#line 264
  flags = _raw_spin_lock_irqsave(tmp);
#line 266
  extent = lc_find(mdev->act_log, enr);
#line 268
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 269
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___1, tmp___0,
           enr);
#line 271
    return;
  } else {

  }
#line 274
  tmp___2 = lc_put(mdev->act_log, extent);
#line 274
  if (tmp___2 == 0U) {
#line 275
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 277
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  aw = (struct update_al_work *)__mptr;
#line 284
  updated = aw->al_ext;
#line 285
  new_enr = aw->enr;
#line 286
  evicted = aw->old_enr;
#line 291
  xor_sum = 0U;
#line 293
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 293
  if (tmp___1 == 0) {
#line 294
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 295
    complete(& ((struct update_al_work *)w)->event);
#line 296
    return (1);
  } else {

  }
#line 302
  if ((int )mdev->state.ldv_33296.conn <= 9 && evicted != 4294967295U) {
#line 303
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 305
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 306
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 306
  buffer = (struct al_transaction *)tmp___2;
#line 308
  buffer->magic = 1728214147U;
#line 309
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 309
  buffer->tr_number = tmp___3;
#line 311
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 311
  n = (int )tmp___4;
#line 313
  tmp___5 = __fswab32((__u32 )n);
#line 313
  buffer->updates[0].pos = tmp___5;
#line 314
  tmp___6 = __fswab32(new_enr);
#line 314
  buffer->updates[0].extent = tmp___6;
#line 316
  xor_sum = xor_sum ^ new_enr;
#line 318
  __min1 = 61;
#line 318
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 318
  mx = __min1 < __min2 ? __min1 : __min2;
#line 320
  i = 0;
#line 320
  goto ldv_41902;
  ldv_41901: 
#line 321
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 322
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 322
  extent_nr = tmp___7->lc_number;
#line 323
  tmp___8 = __fswab32(idx);
#line 323
  buffer->updates[i + 1].pos = tmp___8;
#line 324
  tmp___9 = __fswab32(extent_nr);
#line 324
  buffer->updates[i + 1].extent = tmp___9;
#line 325
  xor_sum = xor_sum ^ extent_nr;
#line 320
  i = i + 1;
  ldv_41902: ;
#line 320
  if (i < mx) {
#line 321
    goto ldv_41901;
  } else {

  }

#line 327
  goto ldv_41905;
  ldv_41904: 
#line 328
  buffer->updates[i + 1].pos = 4294967295U;
#line 329
  buffer->updates[i + 1].extent = 4294967295U;
#line 330
  xor_sum = ~ xor_sum;
#line 327
  i = i + 1;
  ldv_41905: ;
#line 327
  if (i <= 60) {
#line 328
    goto ldv_41904;
  } else {

  }
#line 332
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 333
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 334
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 336
  tmp___10 = __fswab32(xor_sum);
#line 336
  buffer->xor_sum = tmp___10;
#line 338
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 341
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 341
  if (tmp___11 == 0) {
#line 342
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 344
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 344
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 346
    mdev->al_tr_pos = 0;
  } else {

  }
#line 348
  if (mdev->al_tr_pos > 63) {
#line 348
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           348);
  } else {

  }
#line 349
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 351
  mutex_unlock(& mdev->md_io_mutex);
#line 353
  complete(& ((struct update_al_work *)w)->event);
#line 354
  put_ldev(mdev);
#line 356
  return (1);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 375
  xor_sum = 0U;
#line 377
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 381
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 381
  if (tmp == 0) {
#line 382
    return (-1);
  } else {

  }
#line 384
  tmp___0 = __fswab32(b->magic);
#line 384
  rv = tmp___0 == 2205418087U;
#line 386
  i = 0;
#line 386
  goto ldv_41919;
  ldv_41918: 
#line 387
  tmp___1 = __fswab32(b->updates[i].extent);
#line 387
  xor_sum = tmp___1 ^ xor_sum;
#line 386
  i = i + 1;
  ldv_41919: ;
#line 386
  if (i <= 61) {
#line 387
    goto ldv_41918;
  } else {

  }
#line 388
  tmp___2 = __fswab32(b->xor_sum);
#line 388
  rv = (tmp___2 == xor_sum) & rv;
#line 390
  return (rv);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 406
  active_extents = 0;
#line 407
  transactions = 0;
#line 408
  found_valid = 0;
#line 409
  from = 0;
#line 410
  to = 0;
#line 411
  from_tnr = 0U;
#line 412
  to_tnr = 0U;
#line 415
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 420
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 421
  tmp = lowmem_page_address(mdev->md_io_page);
#line 421
  buffer = (struct al_transaction *)tmp;
#line 424
  i = 0;
#line 424
  goto ldv_41939;
  ldv_41938: 
#line 425
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 426
  if (rv == 0) {
#line 427
    goto ldv_41937;
  } else {

  }
#line 428
  if (rv == -1) {
#line 429
    mutex_unlock(& mdev->md_io_mutex);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___0 = __fswab32(buffer->tr_number);
#line 432
  cnr = tmp___0;
#line 434
  found_valid = found_valid + 1;
#line 434
  if (found_valid == 1) {
#line 435
    from = i;
#line 436
    to = i;
#line 437
    from_tnr = cnr;
#line 438
    to_tnr = cnr;
#line 439
    goto ldv_41937;
  } else {

  }
#line 441
  if ((int )cnr - (int )from_tnr < 0) {
#line 442
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 442
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             442);
    } else {

    }
#line 443
    from = i;
#line 444
    from_tnr = cnr;
  } else {

  }
#line 446
  if ((int )cnr - (int )to_tnr > 0) {
#line 447
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 447
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             447);
    } else {

    }
#line 448
    to = i;
#line 449
    to_tnr = cnr;
  } else {

  }
  ldv_41937: 
#line 424
  i = i + 1;
  ldv_41939: ;
#line 424
  if (i <= mx) {
#line 425
    goto ldv_41938;
  } else {

  }

#line 453
  if (found_valid == 0) {
#line 454
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 455
    mutex_unlock(& mdev->md_io_mutex);
#line 456
    return (1);
  } else {

  }
#line 461
  i = from;
  ldv_41954: 
#line 467
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 468
  _b = rv == 0;
#line 468
  if (_b != 0) {
#line 468
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           468);
  } else {

  }
#line 468
  if (_b != 0) {
#line 468
    goto cancel;
  } else {

  }
#line 469
  if (rv == -1) {
#line 470
    mutex_unlock(& mdev->md_io_mutex);
#line 471
    return (0);
  } else {

  }
#line 474
  tmp___9 = __fswab32(buffer->tr_number);
#line 474
  trn = tmp___9;
#line 476
  spin_lock_irq(& mdev->al_lock);
#line 482
  j = 61;
#line 482
  goto ldv_41951;
  ldv_41950: 
#line 483
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 483
  pos = (int )tmp___10;
#line 484
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 484
  extent_nr = tmp___11;
#line 486
  if (extent_nr == 4294967295U) {
#line 487
    goto ldv_41949;
  } else {

  }
#line 489
  lc_set(mdev->act_log, extent_nr, pos);
#line 490
  active_extents = active_extents + 1;
  ldv_41949: 
#line 482
  j = j - 1;
  ldv_41951: ;
#line 482
  if (j >= 0) {
#line 483
    goto ldv_41950;
  } else {

  }
#line 492
  spin_unlock_irq(& mdev->al_lock);
#line 494
  transactions = transactions + 1;
  cancel: ;
#line 497
  if (i == to) {
#line 498
    goto ldv_41953;
  } else {

  }
#line 499
  i = i + 1;
#line 500
  if (i > mx) {
#line 501
    i = 0;
  } else {

  }
#line 502
  goto ldv_41954;
  ldv_41953: 
#line 504
  mdev->al_tr_number = to_tnr + 1U;
#line 505
  mdev->al_tr_pos = to;
#line 506
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 506
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 508
    mdev->al_tr_pos = 0;
  } else {

  }
#line 511
  mutex_unlock(& mdev->md_io_mutex);
#line 513
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 516
  return (1);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 521
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 522
  mdev = wc->mdev;
#line 524
  uptodate = (int )bio->bi_flags & 1;
#line 529
  if (error == 0 && uptodate == 0) {
#line 530
    error = -5;
  } else {

  }
#line 532
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 533
  if (error != 0 && wc->error == 0) {
#line 534
    wc->error = error;
  } else {

  }
#line 536
  tmp = atomic_dec_and_test(& wc->count);
#line 536
  if (tmp != 0) {
#line 537
    complete(& wc->io_done);
  } else {

  }
#line 539
  page = (bio->bi_io_vec)->bv_page;
#line 540
  put_page(page);
#line 541
  bio_put(bio);
#line 542
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 543
  put_ldev(mdev);
#line 544
  return;
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct bio_vec  const  *prev_bv ;
  void *tmp___1 ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
#line 559
  page_offset___0 = 4096U;
#line 561
  i = 0;
#line 562
  err = -12;
#line 566
  enr = enr & 4294967288U;
#line 567
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 570
  if ((on_disk_sector & 7UL) != 0UL) {
#line 570
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 570
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 570
    printk("<3>%s %s: ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           570);
  } else {

  }
#line 579
  goto ldv_41978;
  ldv_41977: ;
#line 580
  if (bio->bi_sector == on_disk_sector) {
#line 581
    return (0);
  } else {

  }
#line 582
  i = i + 1;
  ldv_41978: 
#line 579
  bio = *(bios + (unsigned long )i);
#line 579
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 580
    goto ldv_41977;
  } else {

  }
#line 587
  bio = bio_alloc(208U, 1);
#line 588
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 589
    return (-12);
  } else {

  }
#line 591
  if (i > 0) {
#line 592
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 593
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 594
    page = prev_bv->bv_page;
  } else {

  }
#line 596
  if (page_offset___0 == 4096U) {
#line 597
    page = alloc_pages(2U, 0U);
#line 598
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 599
      goto out_bio_put;
    } else {

    }
#line 600
    page_offset___0 = 0U;
  } else {
#line 602
    get_page(page);
  }
#line 605
  offset = (int )(enr << 6);
#line 606
  tmp___1 = kmap(page);
#line 607
  __min1 = 512UL;
#line 607
  tmp___2 = drbd_bm_words(mdev);
#line 607
  __min2 = tmp___2 - (size_t )offset;
#line 607
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp___1 + (unsigned long )page_offset___0);
#line 609
  kunmap(page);
#line 611
  bio->bi_private = (void *)wc;
#line 612
  bio->bi_end_io = & atodb_endio;
#line 613
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 614
  bio->bi_sector = on_disk_sector;
#line 616
  tmp___3 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 616
  if (tmp___3 != 4096) {
#line 617
    goto out_put_page;
  } else {

  }
#line 619
  atomic_inc(& wc->count);
#line 625
  atomic_inc(& mdev->local_cnt);
#line 627
  *(bios + (unsigned long )i) = bio;
#line 629
  return (0);
  out_put_page: 
#line 632
  err = -22;
#line 633
  put_page(page);
  out_bio_put: 
#line 635
  bio_put(bio);
#line 636
  return (err);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 653
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 653
  _b = tmp == 0;
#line 653
  if (_b != 0) {
#line 653
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           653);
  } else {

  }
#line 653
  if (_b != 0) {
#line 654
    return;
  } else {

  }
#line 656
  tmp___2 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___2 != 0) {
#line 656
    goto ldv_41997;
  } else {

  }
#line 656
  tmp___3 = get_current();
#line 656
  __wait.flags = 0U;
#line 656
  __wait.private = (void *)tmp___3;
#line 656
  __wait.func = & autoremove_wake_function;
#line 656
  __wait.task_list.next = & __wait.task_list;
#line 656
  __wait.task_list.prev = & __wait.task_list;
  ldv_42000: 
#line 656
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 656
  tmp___4 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___4 != 0) {
#line 656
    goto ldv_41999;
  } else {

  }
#line 656
  schedule();
#line 656
  goto ldv_42000;
  ldv_41999: 
#line 656
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41997: 
#line 658
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 661
  tmp___5 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 661
  bios = (struct bio **)tmp___5;
#line 662
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 663
    goto submit_one_by_one;
  } else {

  }
#line 665
  atomic_set(& wc.count, 0);
#line 666
  init_completion(& wc.io_done);
#line 667
  wc.mdev = mdev;
#line 668
  wc.error = 0;
#line 670
  i = 0;
#line 670
  goto ldv_42005;
  ldv_42004: 
#line 671
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 671
  enr = tmp___6->lc_number;
#line 672
  if (enr == 4294967295U) {
#line 673
    goto ldv_42002;
  } else {

  }
#line 675
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 675
  if (tmp___7 != 0) {
#line 678
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_42002: 
#line 670
  i = i + 1;
  ldv_42005: ;
#line 670
  if (i < nr_elements) {
#line 671
    goto ldv_42004;
  } else {

  }
#line 682
  lc_unlock(mdev->act_log);
#line 683
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 686
  i = 0;
#line 686
  goto ldv_42009;
  ldv_42008: ;
#line 687
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 688
    goto ldv_42007;
  } else {

  }
#line 689
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 689
  if (tmp___8 != 0) {
#line 690
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 691
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 693
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 686
  i = i + 1;
  ldv_42009: ;
#line 686
  if (i < nr_elements) {
#line 687
    goto ldv_42008;
  } else {

  }
  ldv_42007: 
#line 697
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 697
  drbd_blk_run_queue(tmp___9);
#line 700
  drbd_md_flush(mdev);
#line 708
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 708
  if (tmp___10 != 0) {
#line 709
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 711
  put_ldev(mdev);
#line 713
  kfree((void const   *)bios);
#line 714
  return;
  free_bios_submit_one_by_one: 
#line 718
  i = 0;
#line 718
  goto ldv_42011;
  ldv_42010: 
#line 719
  bio_endio(*(bios + (unsigned long )i), 0);
#line 718
  i = i + 1;
  ldv_42011: ;
#line 718
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 719
    goto ldv_42010;
  } else {

  }
#line 721
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 724
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 726
  i = 0;
#line 726
  goto ldv_42015;
  ldv_42014: 
#line 727
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 727
  enr = tmp___13->lc_number;
#line 728
  if (enr == 4294967295U) {
#line 729
    goto ldv_42013;
  } else {

  }
#line 732
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_42013: 
#line 726
  i = i + 1;
  ldv_42015: ;
#line 726
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 727
    goto ldv_42014;
  } else {

  }
#line 735
  lc_unlock(mdev->act_log);
#line 736
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 737
  put_ldev(mdev);
#line 738
  return;
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 747
  add = 0UL;
#line 751
  tmp = lc_try_lock(mdev->act_log);
#line 751
  if (tmp != 0) {
#line 751
    goto ldv_42024;
  } else {

  }
#line 751
  tmp___0 = get_current();
#line 751
  __wait.flags = 0U;
#line 751
  __wait.private = (void *)tmp___0;
#line 751
  __wait.func = & autoremove_wake_function;
#line 751
  __wait.task_list.next = & __wait.task_list;
#line 751
  __wait.task_list.prev = & __wait.task_list;
  ldv_42027: 
#line 751
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 751
  tmp___1 = lc_try_lock(mdev->act_log);
#line 751
  if (tmp___1 != 0) {
#line 751
    goto ldv_42026;
  } else {

  }
#line 751
  schedule();
#line 751
  goto ldv_42027;
  ldv_42026: 
#line 751
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42024: 
#line 753
  i = 0;
#line 753
  goto ldv_42030;
  ldv_42029: 
#line 754
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 754
  enr = tmp___2->lc_number;
#line 755
  if (enr == 4294967295U) {
#line 756
    goto ldv_42028;
  } else {

  }
#line 757
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 757
  add = tmp___3 + add;
  ldv_42028: 
#line 753
  i = i + 1;
  ldv_42030: ;
#line 753
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 754
    goto ldv_42029;
  } else {

  }
#line 760
  lc_unlock(mdev->act_log);
#line 761
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 763
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 763
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 764
  return;
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 771
  spin_lock_irq(& mdev->al_lock);
#line 772
  rv = al_ext->refcnt == 0U;
#line 773
  tmp = __builtin_expect(rv != 0, 1L);
#line 773
  if (tmp != 0L) {
#line 774
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 775
  spin_unlock_irq(& mdev->al_lock);
#line 777
  return (rv);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 794
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 794
  if (tmp___1 == 0) {
#line 794
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 794
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 794
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           794);
  } else {

  }
#line 796
  i = 0;
#line 796
  goto ldv_42048;
  ldv_42047: 
#line 797
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 798
  if (al_ext->lc_number == 4294967295U) {
#line 799
    goto ldv_42042;
  } else {

  }
#line 800
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___2 != 0) {
#line 800
    goto ldv_42043;
  } else {

  }
#line 800
  tmp___3 = get_current();
#line 800
  __wait.flags = 0U;
#line 800
  __wait.private = (void *)tmp___3;
#line 800
  __wait.func = & autoremove_wake_function;
#line 800
  __wait.task_list.next = & __wait.task_list;
#line 800
  __wait.task_list.prev = & __wait.task_list;
  ldv_42046: 
#line 800
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 800
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___4 != 0) {
#line 800
    goto ldv_42045;
  } else {

  }
#line 800
  schedule();
#line 800
  goto ldv_42046;
  ldv_42045: 
#line 800
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42043: ;
  ldv_42042: 
#line 796
  i = i + 1;
  ldv_42048: ;
#line 796
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 797
    goto ldv_42047;
  } else {

  }
#line 803
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 808
  __mptr = (struct drbd_work  const  *)w;
#line 808
  udw = (struct update_odbm_work *)__mptr;
#line 810
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 810
  if (tmp___2 == 0) {
#line 811
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 811
    if (tmp___1 != 0) {
#line 812
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 813
    kfree((void const   *)udw);
#line 814
    return (1);
  } else {

  }
#line 817
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 818
  put_ldev(mdev);
#line 820
  kfree((void const   *)udw);
#line 822
  tmp___3 = drbd_bm_total_weight(mdev);
#line 822
  if (tmp___3 <= mdev->rs_failed) {
#line 823
    switch ((int )mdev->state.ldv_33296.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 826
    drbd_resync_finished(mdev);
    default: ;
#line 829
    goto ldv_42064;
    }
    ldv_42064: ;
  } else {

  }
#line 832
  drbd_bcast_sync_progress(mdev);
#line 834
  return (1);
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 852
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 852
  if (tmp___1 == 0) {
#line 852
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           852);
  } else {

  }
#line 856
  enr = (unsigned int )(sector >> 15);
#line 858
  e = lc_get(mdev->resync, enr);
#line 859
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 860
    __mptr = (struct lc_element  const  *)e;
#line 860
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 861
    if (ext->lce.lc_number == enr) {
#line 862
      if (success != 0) {
#line 863
        ext->rs_left = ext->rs_left - count;
      } else {
#line 865
        ext->rs_failed = ext->rs_failed + count;
      }
#line 866
      if (ext->rs_left < ext->rs_failed) {
#line 867
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 872
        dump_stack();
#line 874
        lc_put(mdev->resync, & ext->lce);
#line 875
        val.i = 0U;
#line 875
        val.ldv_33296.conn = 1U;
#line 875
        mask.i = 0U;
#line 875
        mask.ldv_33296.conn = 31U;
#line 875
        drbd_force_state(mdev, mask, val);
#line 876
        return;
      } else {

      }
    } else {
#line 885
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 885
      rs_left = tmp___4;
#line 886
      if (ext->flags != 0UL) {
#line 887
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 887
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 887
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 891
        ext->flags = 0UL;
      } else {

      }
#line 893
      if (ext->rs_failed != 0) {
#line 894
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 897
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 899
      ext->rs_left = rs_left;
#line 900
      ext->rs_failed = success == 0 ? count : 0;
#line 901
      lc_changed(mdev->resync, & ext->lce);
    }
#line 903
    lc_put(mdev->resync, & ext->lce);
#line 906
    if (ext->rs_left == ext->rs_failed) {
#line 907
      ext->rs_failed = 0;
#line 909
      tmp___9 = kmalloc___2(32UL, 32U);
#line 909
      udw = (struct update_odbm_work *)tmp___9;
#line 910
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 911
        udw->enr = ext->lce.lc_number;
#line 912
        udw->w.cb = & w_update_odbm;
#line 913
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 915
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 915
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 915
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 916
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 920
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 921
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 939
  count = 0UL;
#line 941
  wake_up = 0;
#line 944
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 945
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 947
    return;
  } else {

  }
#line 949
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 950
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 952
  _b = sector >= nr_sectors;
#line 952
  if (_b != 0) {
#line 952
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           952);
  } else {

  }
#line 952
  if (_b != 0) {
#line 952
    return;
  } else {

  }
#line 953
  _b___0 = esector >= nr_sectors;
#line 953
  if (_b___0 != 0) {
#line 953
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 953
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 953
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           953);
  } else {

  }
#line 953
  if (_b___0 != 0) {
#line 953
    esector = nr_sectors - 1UL;
  } else {

  }
#line 955
  lbnr = (nr_sectors - 1UL) >> 3;
#line 960
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 960
  if (tmp___5 != 0L) {
#line 961
    return;
  } else {

  }
#line 962
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 962
  if (tmp___6 != 0L) {
#line 963
    ebnr = lbnr;
  } else {
#line 965
    ebnr = (esector - 7UL) >> 3;
  }
#line 966
  sbnr = (sector + 7UL) >> 3;
#line 968
  if (sbnr > ebnr) {
#line 969
    return;
  } else {

  }
#line 975
  tmp___7 = spinlock_check(& mdev->al_lock);
#line 975
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 976
  tmp___8 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 976
  count = (unsigned long )tmp___8;
#line 977
  if (count != 0UL) {
#line 979
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 982
      tmp___9 = drbd_bm_total_weight(mdev);
#line 982
      if ((mdev->rs_mark_left != tmp___9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 902UL) != 320U) {
#line 985
        mdev->rs_mark_time = jiffies;
#line 986
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 989
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 989
    if (tmp___10 != 0) {
#line 990
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 991
      put_ldev(mdev);
    } else {

    }
#line 995
    wake_up = 1;
  } else {

  }
#line 997
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 998
  if (wake_up != 0) {
#line 999
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1000
  return;
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  int tmp___7 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1018
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1019
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1021
    return;
  } else {

  }
#line 1024
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1024
  if (tmp___1 == 0) {
#line 1025
    return;
  } else {

  }
#line 1027
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1028
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1030
  _b = sector >= nr_sectors;
#line 1030
  if (_b != 0) {
#line 1030
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1030);
  } else {

  }
#line 1030
  if (_b != 0) {
#line 1031
    goto out;
  } else {

  }
#line 1032
  _b___0 = esector >= nr_sectors;
#line 1032
  if (_b___0 != 0) {
#line 1032
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1032);
  } else {

  }
#line 1032
  if (_b___0 != 0) {
#line 1033
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1035
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1039
  sbnr = sector >> 3;
#line 1040
  ebnr = esector >> 3;
#line 1044
  tmp___6 = spinlock_check(& mdev->al_lock);
#line 1044
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1045
  tmp___7 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1045
  count = (unsigned int )tmp___7;
#line 1047
  enr = (unsigned int )(sector >> 15);
#line 1048
  e = lc_find(mdev->resync, enr);
#line 1049
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1050
    __mptr = (struct lc_element  const  *)e;
#line 1050
    __mptr___0 = (struct lc_element  const  *)e;
#line 1050
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1051
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1054
  put_ldev(mdev);
#line 1055
  return;
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1062
  wakeup = 0;
#line 1065
  spin_lock_irq(& mdev->al_lock);
#line 1066
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1067
    spin_unlock_irq(& mdev->al_lock);
#line 1068
    return (0);
  } else {

  }
#line 1070
  e = lc_get(mdev->resync, enr);
#line 1071
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1071
    __mptr = (struct lc_element  const  *)e;
#line 1071
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1071
    bm_ext = 0;
  }
#line 1072
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1073
    if (bm_ext->lce.lc_number != enr) {
#line 1074
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1075
      bm_ext->rs_failed = 0;
#line 1076
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1077
      wakeup = 1;
    } else {

    }
#line 1079
    if (bm_ext->lce.refcnt == 1U) {
#line 1080
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1081
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1083
  rs_flags = (mdev->resync)->flags;
#line 1084
  spin_unlock_irq(& mdev->al_lock);
#line 1085
  if (wakeup != 0) {
#line 1086
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1088
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1089
    if ((rs_flags & 4UL) != 0UL) {
#line 1090
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1090
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1090
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1092
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1092
    if (tmp___1 != 0L) {
#line 1092
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1092), "i" (12UL));
      ldv_42142: ;
#line 1092
      goto ldv_42142;
    } else {

    }
  } else {

  }
#line 1095
  return (bm_ext);
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1101
  rv = 0;
#line 1103
  spin_lock_irq(& mdev->al_lock);
#line 1104
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1104
  if (tmp != 0L) {
#line 1105
    rv = 1;
  } else {
#line 1107
    al_ext = lc_find(mdev->act_log, enr);
#line 1108
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1109
      if (al_ext->refcnt != 0U) {
#line 1110
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1113
  spin_unlock_irq(& mdev->al_lock);
#line 1120
  return (rv);
}
}
#line 1130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1132
  enr = (unsigned int )(sector >> 15);
#line 1136
  __ret = 0;
#line 1136
  bm_ext = _bme_get(mdev, enr);
#line 1136
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1136
    tmp = get_current();
#line 1136
    __wait.flags = 0U;
#line 1136
    __wait.private = (void *)tmp;
#line 1136
    __wait.func = & autoremove_wake_function;
#line 1136
    __wait.task_list.next = & __wait.task_list;
#line 1136
    __wait.task_list.prev = & __wait.task_list;
    ldv_42161: 
#line 1136
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1136
    bm_ext = _bme_get(mdev, enr);
#line 1136
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1136
      goto ldv_42159;
    } else {

    }
#line 1136
    tmp___0 = get_current();
#line 1136
    tmp___1 = signal_pending(tmp___0);
#line 1136
    if (tmp___1 == 0) {
#line 1136
      schedule();
#line 1136
      goto ldv_42160;
    } else {

    }
#line 1136
    __ret = -512;
#line 1136
    goto ldv_42159;
    ldv_42160: ;
#line 1136
    goto ldv_42161;
    ldv_42159: 
#line 1136
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1136
  sig = __ret;
#line 1138
  if (sig != 0) {
#line 1139
    return (0);
  } else {

  }
#line 1141
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1141
  if (tmp___2 != 0) {
#line 1142
    return (1);
  } else {

  }
#line 1144
  i = 0;
#line 1144
  goto ldv_42170;
  ldv_42169: 
#line 1145
  __ret___0 = 0;
#line 1145
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
  if (tmp___7 != 0) {
#line 1145
    tmp___3 = get_current();
#line 1145
    __wait___0.flags = 0U;
#line 1145
    __wait___0.private = (void *)tmp___3;
#line 1145
    __wait___0.func = & autoremove_wake_function;
#line 1145
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1145
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42167: 
#line 1145
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1145
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
    if (tmp___4 == 0) {
#line 1145
      goto ldv_42165;
    } else {

    }
#line 1145
    tmp___5 = get_current();
#line 1145
    tmp___6 = signal_pending(tmp___5);
#line 1145
    if (tmp___6 == 0) {
#line 1145
      schedule();
#line 1145
      goto ldv_42166;
    } else {

    }
#line 1145
    __ret___0 = -512;
#line 1145
    goto ldv_42165;
    ldv_42166: ;
#line 1145
    goto ldv_42167;
    ldv_42165: 
#line 1145
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1145
  sig = __ret___0;
#line 1147
  if (sig != 0) {
#line 1148
    spin_lock_irq(& mdev->al_lock);
#line 1149
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1149
    if (tmp___8 == 0U) {
#line 1150
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1151
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1152
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1154
    spin_unlock_irq(& mdev->al_lock);
#line 1155
    return (0);
  } else {

  }
#line 1144
  i = i + 1;
  ldv_42170: ;
#line 1144
  if (i <= 3) {
#line 1145
    goto ldv_42169;
  } else {

  }
#line 1159
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1161
  return (1);
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1175
  enr = (unsigned int )(sector >> 15);
#line 1176
  al_enr = enr * 4U;
#line 1181
  spin_lock_irq(& mdev->al_lock);
#line 1182
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1196
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1197
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1197
      __mptr = (struct lc_element  const  *)e;
#line 1197
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1197
      bm_ext = 0;
    }
#line 1198
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1199
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1199
      if (tmp___1 != 0) {
#line 1199
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1199
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1199
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1199);
      } else {

      }
#line 1200
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1200
      if (tmp___4 == 0) {
#line 1200
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1200);
      } else {

      }
#line 1201
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1202
      mdev->resync_wenr = 4294967295U;
#line 1203
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1203
      if (tmp___5 == 0U) {
#line 1204
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1205
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1207
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1207
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1207
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1211
  e = lc_try_get(mdev->resync, enr);
#line 1212
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1212
    __mptr___0 = (struct lc_element  const  *)e;
#line 1212
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1212
    bm_ext = 0;
  }
#line 1213
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1214
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1214
    if (tmp___8 != 0) {
#line 1215
      goto proceed;
    } else {

    }
#line 1216
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1216
    if (tmp___11 == 0) {
#line 1217
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1223
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1224
      if (bm_ext->lce.refcnt == 0U) {
#line 1224
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1224);
      } else {

      }
    }
#line 1226
    goto check_al;
  } else {
#line 1229
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1230
      goto try_again;
    } else {

    }
#line 1232
    e = lc_get(mdev->resync, enr);
#line 1233
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1233
      __mptr___1 = (struct lc_element  const  *)e;
#line 1233
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1233
      bm_ext = 0;
    }
#line 1234
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1235
      rs_flags = (mdev->resync)->flags;
#line 1236
      if ((rs_flags & 4UL) != 0UL) {
#line 1237
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1239
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1239
      if (tmp___14 != 0L) {
#line 1239
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1239), "i" (12UL));
        ldv_42191: ;
#line 1239
        goto ldv_42191;
      } else {

      }
#line 1240
      goto try_again;
    } else {

    }
#line 1242
    if (bm_ext->lce.lc_number != enr) {
#line 1243
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1244
      bm_ext->rs_failed = 0;
#line 1245
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1246
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1247
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1247
      if (tmp___17 != 0) {
#line 1247
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1247);
      } else {

      }
    } else {

    }
#line 1249
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1250
    if (bm_ext->lce.refcnt != 1U) {
#line 1250
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1250);
    } else {

    }
#line 1251
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1252
    goto check_al;
  }
  check_al: 
#line 1255
  i = 0;
#line 1255
  goto ldv_42193;
  ldv_42192: 
#line 1256
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1256
  if (tmp___20 != 0L) {
#line 1257
    goto try_again;
  } else {

  }
#line 1258
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1258
  if (tmp___21 != 0) {
#line 1259
    goto try_again;
  } else {

  }
#line 1255
  i = i + 1;
  ldv_42193: ;
#line 1255
  if (i <= 3) {
#line 1256
    goto ldv_42192;
  } else {

  }
#line 1261
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1263
  mdev->resync_wenr = 4294967295U;
#line 1264
  spin_unlock_irq(& mdev->al_lock);
#line 1265
  return (0);
  try_again: ;
#line 1268
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1269
    mdev->resync_wenr = enr;
  } else {

  }
#line 1270
  spin_unlock_irq(& mdev->al_lock);
#line 1271
  return (-11);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;

  {
#line 1276
  enr = (unsigned int )(sector >> 15);
#line 1281
  tmp = spinlock_check(& mdev->al_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  e = lc_find(mdev->resync, enr);
#line 1283
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1283
    __mptr = (struct lc_element  const  *)e;
#line 1283
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1283
    bm_ext = 0;
  }
#line 1284
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1285
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1286
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1286
    if (tmp___2 != 0) {
#line 1287
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___1,
             tmp___0);
    } else {

    }
#line 1288
    return;
  } else {

  }
#line 1291
  if (bm_ext->lce.refcnt == 0U) {
#line 1292
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1293
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1293
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1293
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___4, tmp___3, (unsigned long long )sector, enr);
#line 1296
    return;
  } else {

  }
#line 1299
  tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1299
  if (tmp___5 == 0U) {
#line 1300
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1301
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1302
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1303
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1306
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1307
  return;
}
}
#line 1313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1315
  spin_lock_irq(& mdev->al_lock);
#line 1317
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1317
  if (tmp != 0) {
#line 1318
    lc_reset(mdev->resync);
#line 1319
    put_ldev(mdev);
  } else {

  }
#line 1321
  mdev->resync_locked = 0U;
#line 1322
  mdev->resync_wenr = 4294967295U;
#line 1323
  spin_unlock_irq(& mdev->al_lock);
#line 1324
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1325
  return;
}
}
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1340
  spin_lock_irq(& mdev->al_lock);
#line 1342
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1342
  if (tmp___17 != 0) {
#line 1344
    i = 0;
#line 1344
    goto ldv_42222;
    ldv_42221: 
#line 1345
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1346
    __mptr = (struct lc_element  const  *)e;
#line 1346
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1347
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1348
      goto ldv_42220;
    } else {

    }
#line 1349
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1350
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1353
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1353
      if (tmp___3 != 0) {
#line 1353
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1353);
      } else {

      }
#line 1354
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1354
      if (tmp___6 == 0) {
#line 1354
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1354);
      } else {

      }
#line 1355
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1356
      mdev->resync_wenr = 4294967295U;
#line 1357
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1359
    if (bm_ext->lce.refcnt != 0U) {
#line 1360
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1362
      put_ldev(mdev);
#line 1363
      spin_unlock_irq(& mdev->al_lock);
#line 1364
      return (-11);
    } else {

    }
#line 1366
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1366
    if (tmp___11 != 0) {
#line 1366
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1366
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1366
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1366);
    } else {

    }
#line 1367
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1367
    if (tmp___14 != 0) {
#line 1367
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1367);
    } else {

    }
#line 1368
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_42220: 
#line 1344
    i = i + 1;
    ldv_42222: ;
#line 1344
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1345
      goto ldv_42221;
    } else {

    }

#line 1370
    if ((mdev->resync)->used != 0U) {
#line 1370
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1370
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1370
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1370);
    } else {

    }
#line 1371
    put_ldev(mdev);
  } else {

  }
#line 1373
  spin_unlock_irq(& mdev->al_lock);
#line 1375
  return (0);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1390
  wake_up = 0;
#line 1392
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1393
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1395
    return;
  } else {

  }
#line 1397
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1398
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1400
  _b = sector >= nr_sectors;
#line 1400
  if (_b != 0) {
#line 1400
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1400);
  } else {

  }
#line 1400
  if (_b != 0) {
#line 1400
    return;
  } else {

  }
#line 1401
  _b___0 = esector >= nr_sectors;
#line 1401
  if (_b___0 != 0) {
#line 1401
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1401);
  } else {

  }
#line 1401
  if (_b___0 != 0) {
#line 1401
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1403
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1408
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1408
  if (tmp___5 != 0L) {
#line 1409
    return;
  } else {

  }
#line 1410
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1410
  if (tmp___6 != 0L) {
#line 1411
    ebnr = lbnr;
  } else {
#line 1413
    ebnr = (esector - 7UL) >> 3;
  }
#line 1414
  sbnr = (sector + 7UL) >> 3;
#line 1416
  if (sbnr > ebnr) {
#line 1417
    return;
  } else {

  }
#line 1423
  spin_lock_irq(& mdev->al_lock);
#line 1424
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1424
  count = (unsigned long )tmp___7;
#line 1425
  if (count != 0UL) {
#line 1426
    mdev->rs_failed = mdev->rs_failed + count;
#line 1428
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1428
    if (tmp___8 != 0) {
#line 1429
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1430
      put_ldev(mdev);
    } else {

    }
#line 1435
    wake_up = 1;
  } else {

  }
#line 1437
  spin_unlock_irq(& mdev->al_lock);
#line 1438
  if (wake_up != 0) {
#line 1439
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1440
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 494 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 500
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 504
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 248 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 272
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13275: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13275;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___4(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___4(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1943 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1944
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1945
extern struct block_device *bdget(dev_t  ) ;
#line 1949
extern void bdput(struct block_device * ) ;
#line 1984
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 152 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *proc_create(char const   *name , mode_t mode ,
                                                   struct proc_dir_entry *parent ,
                                                   struct file_operations  const  *proc_fops ) 
{ 
  struct proc_dir_entry *tmp ;

  {
#line 155
  tmp = proc_create_data(name, mode, parent, proc_fops, 0);
#line 155
  return (tmp);
}
}
#line 1776 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1994
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 256 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 258
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 259
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 259
    return (tmp);
  } else {

  }
#line 260
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 795 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 925
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 926
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 927
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 930
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 957
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 976
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 163 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 549 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 551
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 551
  if (tmp != 0L) {
#line 551
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (551), "i" (12UL));
    ldv_41277: ;
#line 551
    goto ldv_41277;
  } else {

  }
#line 552
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 553
  return;
}
}
#line 562 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 564
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 565
  return;
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 576
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 576
  if (tmp != 0L) {
#line 576
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (576), "i" (12UL));
    ldv_41292: ;
#line 576
    goto ldv_41292;
  } else {

  }
#line 577
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 578
  return;
}
}
#line 1084
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1093
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1099
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1104
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1110
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1114
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1154
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1156
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1161
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1165
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1168
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1169
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1170
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1171
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1368
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1369
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1381
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1382
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1532
void drbd_nl_cleanup(void) ;
#line 1533
int drbd_nl_init(void) ;
#line 1534
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1598
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp == 0) {
#line 1598
    goto ldv_42264;
  } else {

  }
#line 1598
  tmp___0 = get_current();
#line 1598
  __wait.flags = 0U;
#line 1598
  __wait.private = (void *)tmp___0;
#line 1598
  __wait.func = & autoremove_wake_function;
#line 1598
  __wait.task_list.next = & __wait.task_list;
#line 1598
  __wait.task_list.prev = & __wait.task_list;
  ldv_42267: 
#line 1598
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1598
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp___1 == 0) {
#line 1598
    goto ldv_42266;
  } else {

  }
#line 1598
  schedule();
#line 1598
  goto ldv_42267;
  ldv_42266: 
#line 1598
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42264: ;
#line 1601
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_42290;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33296.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_42290;
  }
  ldv_42290: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____2(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_42331;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_42331;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42331: ;
#line 1755
  return (s);
}
}
#line 1763 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1766
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1768
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1774
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1775
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1775
    if (tmp___1 != 0) {
#line 1776
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1776
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1776
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1777
      dump_stack();
    } else {

    }
#line 1779
    return (0UL);
  } else {

  }
#line 1781
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1781
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1784
  return (0UL);
  }
}
}
#line 1853 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1855
  _drbd_thread_stop(thi, 0, 0);
#line 1856
  return;
}
}
#line 1858 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1860
  _drbd_thread_stop(thi, 1, 0);
#line 1861
  return;
}
}
#line 2049 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2055
  switch ((unsigned int )s.ldv_33296.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2068
  goto ldv_42449;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2087
  return (0);
  }
  ldv_42449: ;
#line 2090
  switch ((unsigned int )s.ldv_33296.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2097
  goto ldv_42469;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2106
  return (0);
  }
  ldv_42469: ;
#line 2109
  return (1);
}
}
#line 2112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2114
  tmp = drbd_get_max_buffers(mdev);
#line 2114
  mxb = tmp;
#line 2116
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2117
    return (0);
  } else {

  }
#line 2118
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2118
  if (tmp___0 != 0) {
#line 2119
    return (0);
  } else {

  }
#line 2126
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2126
  if (tmp___1 == 0) {
#line 2127
    return (0);
  } else {

  }
#line 2131
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2131
  if (tmp___2 > mxb) {
#line 2132
    return (0);
  } else {

  }
#line 2133
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2133
  if (tmp___3 != 0) {
#line 2134
    return (0);
  } else {

  }
#line 2135
  return (1);
}
}
#line 2216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2218
  sk = (mdev->data.socket)->sk;
#line 2219
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2220
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2221
  return;
}
}
#line 2223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2230
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_42706;
  ldv_42705: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_42706: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_42705;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 80
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 81
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 82
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 83
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 85
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 86
static void md_sync_timer_fn(unsigned long data ) ;
#line 87
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 132
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 161
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 203
  tmp = kmalloc___4(56UL, 208U);
#line 203
  b = (struct drbd_tl_epoch *)tmp;
#line 204
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 205
    return (0);
  } else {

  }
#line 206
  INIT_LIST_HEAD(& b->requests);
#line 207
  INIT_LIST_HEAD(& b->w.list);
#line 208
  b->next = 0;
#line 209
  b->br_number = 4711U;
#line 210
  b->n_req = 0;
#line 211
  b->w.cb = 0;
#line 213
  mdev->oldest_tle = b;
#line 214
  mdev->newest_tle = b;
#line 215
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 217
  mdev->tl_hash = 0;
#line 218
  mdev->tl_hash_s = 0U;
#line 220
  return (1);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 225
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 225
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           225);
  } else {

  }
#line 226
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 226
  if (tmp___3 == 0) {
#line 226
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           226);
  } else {

  }
#line 227
  kfree((void const   *)mdev->oldest_tle);
#line 228
  mdev->oldest_tle = 0;
#line 229
  kfree((void const   *)mdev->unused_spare_tle);
#line 230
  mdev->unused_spare_tle = 0;
#line 231
  kfree((void const   *)mdev->tl_hash);
#line 232
  mdev->tl_hash = 0;
#line 233
  mdev->tl_hash_s = 0U;
#line 234
  return;
}
}
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 247
  INIT_LIST_HEAD(& new->requests);
#line 248
  INIT_LIST_HEAD(& new->w.list);
#line 249
  new->w.cb = 0;
#line 250
  new->next = 0;
#line 251
  new->n_req = 0;
#line 253
  newest_before = mdev->newest_tle;
#line 256
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 257
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 258
    (mdev->newest_tle)->next = new;
#line 259
    mdev->newest_tle = new;
  } else {

  }
#line 261
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 280
  spin_lock_irq(& mdev->req_lock);
#line 282
  b = mdev->oldest_tle;
#line 285
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 286
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 286
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 286
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 288
    goto bail;
  } else {

  }
#line 290
  if (b->br_number != barrier_nr) {
#line 291
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 291
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 291
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 293
    goto bail;
  } else {

  }
#line 295
  if ((unsigned int )b->n_req != set_size) {
#line 296
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 298
    goto bail;
  } else {

  }
#line 302
  le = b->requests.next;
#line 302
  tle = le->next;
#line 302
  goto ldv_42928;
  ldv_42927: 
#line 303
  __mptr = (struct list_head  const  *)le;
#line 303
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 304
  _req_mod(r, barrier_acked);
#line 302
  le = tle;
#line 302
  tle = le->next;
  ldv_42928: ;
#line 302
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 303
    goto ldv_42927;
  } else {

  }
#line 319
  list_del_init(& b->requests);
#line 321
  nob = b->next;
#line 322
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 322
  if (tmp___7 != 0) {
#line 323
    _tl_add_barrier(mdev, b);
#line 324
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 325
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 329
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 329
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             329);
    } else {

    }
#line 330
    mdev->oldest_tle = nob;
#line 331
    kfree((void const   *)b);
  }
#line 334
  spin_unlock_irq(& mdev->req_lock);
#line 335
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 335
  if (tmp___8 != 0) {
#line 335
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 335
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 335
  if (tmp___12 < 0) {
#line 335
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 335
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 335, tmp___9);
  } else {

  }
#line 337
  return;
  bail: 
#line 340
  spin_unlock_irq(& mdev->req_lock);
#line 341
  val.i = 0U;
#line 341
  val.ldv_33296.conn = 6U;
#line 341
  mask.i = 0U;
#line 341
  mask.ldv_33296.conn = 31U;
#line 341
  drbd_force_state(mdev, mask, val);
#line 343
  return;
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 358
  tmp___0 = random32();
#line 358
  new_initial_bnr = (int )tmp___0;
#line 360
  spin_lock_irq(& mdev->req_lock);
#line 362
  b = mdev->oldest_tle;
#line 363
  goto ldv_42958;
  ldv_42957: 
#line 364
  le = b->requests.next;
#line 364
  tle = le->next;
#line 364
  goto ldv_42950;
  ldv_42949: 
#line 365
  __mptr = (struct list_head  const  *)le;
#line 365
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 368
  _req_mod(r, connection_lost_while_pending);
#line 364
  le = tle;
#line 364
  tle = le->next;
  ldv_42950: ;
#line 364
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 365
    goto ldv_42949;
  } else {

  }
#line 370
  tmp = b->next;
#line 374
  list_del(& b->requests);
#line 379
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 380
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 380
    if (tmp___1 != 0) {
#line 380
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 380
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 380
    if (tmp___5 < 0) {
#line 380
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 380
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 380, tmp___2);
    } else {

    }
  } else {

  }
#line 382
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 384
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 384
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 384
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 384
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             384);
    } else {

    }
#line 385
    INIT_LIST_HEAD(& b->requests);
#line 386
    INIT_LIST_HEAD(& b->w.list);
#line 387
    b->w.cb = 0;
#line 388
    b->br_number = (unsigned int )new_initial_bnr;
#line 389
    b->n_req = 0;
#line 391
    mdev->oldest_tle = b;
#line 392
    goto ldv_42956;
  } else {

  }
#line 394
  kfree((void const   *)b);
#line 395
  b = tmp;
  ldv_42958: ;
#line 363
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 364
    goto ldv_42957;
  } else {

  }
  ldv_42956: 
#line 399
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 399
  if (tmp___10 == 0) {
#line 399
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           399);
  } else {

  }
#line 402
  le = mdev->out_of_sequence_requests.next;
#line 402
  tle = le->next;
#line 402
  goto ldv_42962;
  ldv_42961: 
#line 403
  __mptr___0 = (struct list_head  const  *)le;
#line 403
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 406
  _req_mod(r, connection_lost_while_pending);
#line 402
  le = tle;
#line 402
  tle = le->next;
  ldv_42962: ;
#line 402
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 403
    goto ldv_42961;
  } else {

  }
#line 410
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 412
  spin_unlock_irq(& mdev->req_lock);
#line 413
  return;
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 424
  return (((((int )os.ldv_33296.conn > 9 && (int )ns.ldv_33296.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_33296.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 440
  tmp = spinlock_check(& mdev->req_lock);
#line 440
  flags = _raw_spin_lock_irqsave(tmp);
#line 441
  os = mdev->state;
#line 442
  ns.i = (os.i & ~ mask.i) | val.i;
#line 443
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 444
  ns = mdev->state;
#line 445
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 447
  return (rv);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 459
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 460
  return;
}
}
#line 462
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 463
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 465
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 467
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 477
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 477
  if (tmp != 0) {
#line 478
    return (SS_CW_SUCCESS);
  } else {

  }
#line 480
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 480
  if (tmp___0 != 0) {
#line 481
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 483
  rv = 0;
#line 484
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 484
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 485
  os = mdev->state;
#line 486
  ns.i = (os.i & ~ mask.i) | val.i;
#line 487
  ns = sanitize_state(mdev, os, ns, 0);
#line 489
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 489
  if (tmp___2 == 0) {
#line 490
    rv = 4;
  } else {

  }
#line 491
  if (rv == 0) {
#line 492
    rv = is_valid_state(mdev, ns);
#line 493
    if (rv == 1) {
#line 494
      rv = is_valid_state_transition(mdev, ns, os);
#line 495
      if (rv == 1) {
#line 496
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 499
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 501
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 523
  init_completion(& done);
#line 525
  if (((unsigned int )f & 8U) != 0U) {
#line 526
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 528
  tmp = spinlock_check(& mdev->req_lock);
#line 528
  flags = _raw_spin_lock_irqsave(tmp);
#line 529
  os = mdev->state;
#line 530
  ns.i = (os.i & ~ mask.i) | val.i;
#line 531
  ns = sanitize_state(mdev, os, ns, 0);
#line 533
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 533
  if (tmp___5 != 0) {
#line 534
    rv = is_valid_state(mdev, ns);
#line 535
    if (rv == 1) {
#line 536
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 537
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 539
    if (rv <= 0) {
#line 540
      if (((unsigned int )f & 2U) != 0U) {
#line 541
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 542
      goto abort;
    } else {

    }
#line 545
    drbd_state_lock___0(mdev);
#line 546
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 546
    if (tmp___0 == 0) {
#line 547
      drbd_state_unlock(mdev);
#line 548
      rv = -10;
#line 549
      if (((unsigned int )f & 2U) != 0U) {
#line 550
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 551
      goto abort;
    } else {

    }
#line 554
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 554
    rv = (int )tmp___1;
#line 554
    if (rv != 0) {
#line 554
      goto ldv_43030;
    } else {

    }
#line 554
    tmp___2 = get_current();
#line 554
    __wait.flags = 0U;
#line 554
    __wait.private = (void *)tmp___2;
#line 554
    __wait.func = & autoremove_wake_function;
#line 554
    __wait.task_list.next = & __wait.task_list;
#line 554
    __wait.task_list.prev = & __wait.task_list;
    ldv_43033: 
#line 554
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 554
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 554
    rv = (int )tmp___3;
#line 554
    if (rv != 0) {
#line 554
      goto ldv_43032;
    } else {

    }
#line 554
    schedule();
#line 554
    goto ldv_43033;
    ldv_43032: 
#line 554
    finish_wait(& mdev->state_wait, & __wait);
    ldv_43030: ;
#line 557
    if (rv <= 0) {
#line 558
      drbd_state_unlock(mdev);
#line 559
      if (((unsigned int )f & 2U) != 0U) {
#line 560
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 561
      goto abort;
    } else {

    }
#line 563
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 563
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 564
    os = mdev->state;
#line 565
    ns.i = (os.i & ~ mask.i) | val.i;
#line 566
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 567
    drbd_state_unlock(mdev);
  } else {
#line 569
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 572
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 574
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 575
    tmp___8 = get_current();
#line 575
    if ((unsigned long )tmp___8 == (unsigned long )mdev->worker.task) {
#line 575
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___7,
             tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             575);
    } else {

    }
#line 576
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 580
  if (((unsigned int )f & 8U) != 0U) {
#line 581
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 583
  return (rv);
}
}
#line 596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 601
  rv = drbd_req_state(mdev, mask, val, f);
#line 601
  if (rv != -18) {
#line 601
    goto ldv_43044;
  } else {

  }
#line 601
  tmp = get_current();
#line 601
  __wait.flags = 0U;
#line 601
  __wait.private = (void *)tmp;
#line 601
  __wait.func = & autoremove_wake_function;
#line 601
  __wait.task_list.next = & __wait.task_list;
#line 601
  __wait.task_list.prev = & __wait.task_list;
  ldv_43047: 
#line 601
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 601
  rv = drbd_req_state(mdev, mask, val, f);
#line 601
  if (rv != -18) {
#line 601
    goto ldv_43046;
  } else {

  }
#line 601
  schedule();
#line 601
  goto ldv_43047;
  ldv_43046: 
#line 601
  finish_wait(& mdev->state_wait, & __wait);
  ldv_43044: ;
#line 604
  return (rv);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 609
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.pdsk);
#line 609
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.disk);
#line 609
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_33296.peer);
#line 609
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_33296.role);
#line 609
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 609
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 610
  return;
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 626
  if (err == -18) {
#line 627
    return;
  } else {

  }
#line 628
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 628
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 628
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 628
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 629
  print_st(mdev, (char *)" state", os);
#line 630
  print_st(mdev, (char *)"wanted", ns);
#line 631
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 659
  rv = 1;
#line 661
  fp = FP_DONT_CARE;
#line 662
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 662
  if (tmp != 0) {
#line 663
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 664
    put_ldev(mdev);
  } else {

  }
#line 667
  tmp___0 = get_net_conf(mdev);
#line 667
  if (tmp___0 != 0) {
#line 668
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 670
      rv = -1;
    } else {

    }
#line 671
    put_net_conf(mdev);
  } else {

  }
#line 674
  if (rv <= 0) {

  } else
#line 676
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 677
    rv = -12;
  } else
#line 679
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.disk <= 7) {
#line 680
    rv = -2;
  } else
#line 682
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.pdsk > 5) {
#line 684
    rv = -7;
  } else
#line 686
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.disk <= 4) && (int )ns.ldv_33296.pdsk <= 4) {
#line 687
    rv = -2;
  } else
#line 689
  if ((int )ns.ldv_33296.conn > 10 && (int )ns.ldv_33296.disk <= 3) {
#line 690
    rv = -4;
  } else
#line 692
  if ((int )ns.ldv_33296.conn > 10 && (int )ns.ldv_33296.pdsk <= 3) {
#line 693
    rv = -5;
  } else
#line 695
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 700
    rv = -6;
  } else
#line 702
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 704
    rv = -14;
  } else
#line 706
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 708
    rv = -17;
  } else {

  }
#line 710
  return (rv);
}
}
#line 719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 722
  rv = 1;
#line 724
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_33296.conn > 10) {
#line 726
    rv = -8;
  } else {

  }
#line 728
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 729
    rv = -9;
  } else {

  }
#line 731
  if ((int )ns.ldv_33296.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 732
    rv = -11;
  } else {

  }
#line 734
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_33296.conn <= 1) {
#line 735
    rv = -13;
  } else {

  }
#line 737
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_33296.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 738
    rv = -16;
  } else {

  }
#line 740
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 741
    rv = -18;
  } else {

  }
#line 743
  if ((int )ns.ldv_33296.conn == (int )os.ldv_33296.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 744
    rv = -18;
  } else {

  }
#line 746
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_33296.conn <= 9) {
#line 747
    rv = -15;
  } else {

  }
#line 749
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_33296.conn != (int )os.ldv_33296.conn) && (int )os.ldv_33296.conn > 10) {
#line 751
    rv = -8;
  } else {

  }
#line 753
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_33296.conn <= 9) {
#line 755
    rv = -15;
  } else {

  }
#line 757
  return (rv);
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 775
  fp = FP_DONT_CARE;
#line 776
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 776
  if (tmp != 0) {
#line 777
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 778
    put_ldev(mdev);
  } else {

  }
#line 782
  if (((int )ns.ldv_33296.conn > 2 && (int )ns.ldv_33296.conn <= 7) && (int )os.ldv_33296.conn <= 1) {
#line 784
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 787
  if ((((int )os.ldv_33296.conn > 2 && (int )os.ldv_33296.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 789
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 792
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 793
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 795
  if ((int )ns.ldv_33296.conn <= 9) {
#line 796
    ns.ldv_33296.peer_isp = 0U;
#line 797
    ns.ldv_33296.peer = 0U;
#line 798
    if ((int )ns.ldv_33296.pdsk > 6 || (int )ns.ldv_33296.pdsk <= 3) {
#line 799
      ns.ldv_33296.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 803
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 804
    ns.ldv_33296.aftr_isp = 0U;
  } else {

  }
#line 806
  if ((int )ns.ldv_33296.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 807
    ns.ldv_33296.pdsk = 6U;
  } else {

  }
#line 810
  if (((int )os.ldv_33296.conn > 10 && (int )ns.ldv_33296.conn > 10) && ((int )ns.ldv_33296.disk <= 2 || (int )ns.ldv_33296.pdsk <= 2)) {
#line 812
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 813
      *warn_sync_abort = 1;
    } else {

    }
#line 814
    ns.ldv_33296.conn = 10U;
  } else {

  }
#line 817
  if ((int )ns.ldv_33296.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 820
    switch ((int )ns.ldv_33296.conn) {
    case 14: ;
    case 21: 
#line 823
    ns.ldv_33296.disk = 5U;
#line 824
    goto ldv_43080;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 829
    ns.ldv_33296.disk = 8U;
#line 830
    goto ldv_43080;
    case 17: 
#line 832
    ns.ldv_33296.disk = 4U;
#line 833
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 833
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 833
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 834
    goto ldv_43080;
    }
    ldv_43080: ;
#line 836
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 837
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 837
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 837
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 840
  if ((int )ns.ldv_33296.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 842
    switch ((int )ns.ldv_33296.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 847
    ns.ldv_33296.pdsk = 8U;
#line 848
    goto ldv_43090;
    case 13: ;
    case 20: 
#line 851
    ns.ldv_33296.pdsk = 5U;
#line 852
    goto ldv_43090;
    case 16: 
#line 854
    ns.ldv_33296.pdsk = 4U;
#line 855
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 855
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 855
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 856
    goto ldv_43090;
    }
    ldv_43090: ;
#line 858
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 859
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 863
  if ((int )ns.ldv_33296.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 863
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 863
    if (tmp___10 != 0) {
#line 865
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 866
        ns.ldv_33296.disk = mdev->new_state_tmp.ldv_33296.disk;
#line 867
        ns.ldv_33296.pdsk = mdev->new_state_tmp.ldv_33296.pdsk;
      } else {
#line 869
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 869
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 869
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 870
        ns.ldv_33296.disk = 0U;
#line 871
        ns.ldv_33296.pdsk = 6U;
      }
#line 873
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 876
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33296.conn > 9) || (int )os.ldv_33296.pdsk <= 5)) {
#line 879
    ns.ldv_33296.susp = 1U;
  } else {

  }
#line 881
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 882
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 883
      ns.ldv_33296.conn = 20U;
    } else {

    }
#line 884
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 885
      ns.ldv_33296.conn = 21U;
    } else {

    }
  } else {
#line 887
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 888
      ns.ldv_33296.conn = 16U;
    } else {

    }
#line 889
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 890
      ns.ldv_33296.conn = 17U;
    } else {

    }
  }
#line 893
  return (ns);
}
}
#line 897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 899
  if ((unsigned int )cs == 19U) {
#line 905
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 907
    bit = mdev->ov_start_sector >> 3;
#line 908
    if (mdev->rs_total <= bit) {
#line 909
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 911
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 913
  return;
}
}
#line 924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 929
  rv = 1;
#line 930
  warn_sync_abort = 0;
#line 933
  os = mdev->state;
#line 935
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 937
  if (ns.i == os.i) {
#line 938
    return (2);
  } else {

  }
#line 940
  if (((unsigned int )flags & 1U) == 0U) {
#line 944
    rv = is_valid_state(mdev, ns);
#line 945
    if (rv <= 0) {
#line 949
      tmp___2 = is_valid_state(mdev, os);
#line 949
      if (tmp___2 == rv) {
#line 950
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 950
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 950
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 950
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 953
        print_st(mdev, (char *)"old", os);
#line 954
        print_st(mdev, (char *)"new", ns);
#line 955
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 958
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 961
  if (rv <= 0) {
#line 962
    if (((unsigned int )flags & 2U) != 0U) {
#line 963
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 964
    return (rv);
  } else {

  }
#line 967
  if (warn_sync_abort != 0) {
#line 968
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 972
  pbp = (char *)(& pb);
#line 973
  *pbp = 0;
#line 974
  if ((int )ns.ldv_33296.role != (int )os.ldv_33296.role) {
#line 974
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_33296.role);
#line 974
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_33296.role);
#line 974
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 974
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 975
  if ((int )ns.ldv_33296.peer != (int )os.ldv_33296.peer) {
#line 975
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_33296.peer);
#line 975
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_33296.peer);
#line 975
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 975
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 976
  if ((int )ns.ldv_33296.conn != (int )os.ldv_33296.conn) {
#line 976
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 976
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_33296.conn);
#line 976
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 976
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 977
  if ((int )ns.ldv_33296.disk != (int )os.ldv_33296.disk) {
#line 977
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.disk);
#line 977
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_33296.disk);
#line 977
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 977
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 978
  if ((int )ns.ldv_33296.pdsk != (int )os.ldv_33296.pdsk) {
#line 978
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.pdsk);
#line 978
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_33296.pdsk);
#line 978
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 978
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 979
  if ((int )ns.ldv_33296.susp != (int )os.ldv_33296.susp) {
#line 979
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 979
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 980
  if ((int )ns.ldv_33296.aftr_isp != (int )os.ldv_33296.aftr_isp) {
#line 980
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 980
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 981
  if ((int )ns.ldv_33296.peer_isp != (int )os.ldv_33296.peer_isp) {
#line 981
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 981
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 982
  if ((int )ns.ldv_33296.user_isp != (int )os.ldv_33296.user_isp) {
#line 982
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 982
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 983
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 983
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 983
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 994
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 994
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 994
    if (tmp___26 == 0) {
#line 998
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1000
  mdev->state.i = ns.i;
#line 1001
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1002
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1005
  if ((int )os.ldv_33296.conn > 15 && (int )ns.ldv_33296.conn <= 10) {
#line 1006
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1007
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1011
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_33296.conn <= 9) {
#line 1013
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1015
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1015
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1015
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1019
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1021
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1022
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1023
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1024
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1024
      if (tmp___31 == 0) {
#line 1025
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1033
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1035
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1035
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1036
    mdev->rs_mark_time = jiffies;
#line 1037
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1038
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1041
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1043
    mdev->ov_position = 0UL;
#line 1044
    tmp___34 = drbd_bm_bits(mdev);
#line 1044
    mdev->rs_mark_left = tmp___34;
#line 1044
    mdev->rs_total = tmp___34;
#line 1046
    if (mdev->agreed_pro_version > 89) {
#line 1047
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_33296.conn);
    } else {
#line 1049
      mdev->ov_start_sector = 0UL;
    }
#line 1050
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1052
    tmp___35 = jiffies;
#line 1052
    mdev->rs_mark_time = tmp___35;
#line 1052
    mdev->rs_start = tmp___35;
#line 1054
    mdev->ov_last_oos_size = 0UL;
#line 1055
    mdev->ov_last_oos_start = 0UL;
#line 1057
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1058
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1060
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1064
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1064
  if (tmp___39 != 0) {
#line 1065
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1069
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1069
    if (tmp___38 != 0) {
#line 1070
      mdf = mdf | 64U;
    } else {

    }
#line 1071
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U || ((int )mdev->state.ldv_33296.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 4U)) {
#line 1073
      mdf = mdf | 2U;
    } else {

    }
#line 1074
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1075
      mdf = mdf | 4U;
    } else {

    }
#line 1076
    if ((int )mdev->state.ldv_33296.disk > 4) {
#line 1077
      mdf = mdf | 1U;
    } else {

    }
#line 1078
    if ((int )mdev->state.ldv_33296.disk > 5) {
#line 1079
      mdf = mdf | 16U;
    } else {

    }
#line 1080
    if ((int )mdev->state.ldv_33296.pdsk <= 5 && (int )mdev->state.ldv_33296.pdsk > 3) {
#line 1081
      mdf = mdf | 32U;
    } else {

    }
#line 1082
    if ((mdev->ldev)->md.flags != mdf) {
#line 1083
      (mdev->ldev)->md.flags = mdf;
#line 1084
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1086
    if ((int )os.ldv_33296.disk <= 6 && (int )ns.ldv_33296.disk > 6) {
#line 1087
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1088
    put_ldev(mdev);
  } else {

  }
#line 1092
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1094
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1097
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1098
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1101
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1102
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1105
  if (((int )os.ldv_33296.conn > 7 && (int )ns.ldv_33296.conn <= 7) && (int )ns.ldv_33296.conn > 2) {
#line 1107
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1109
  tmp___40 = kmalloc___4(48UL, 32U);
#line 1109
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1110
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1111
    ascw->os = os;
#line 1112
    ascw->ns = ns;
#line 1113
    ascw->flags = flags;
#line 1114
    ascw->w.cb = & w_after_state_ch;
#line 1115
    ascw->done = done;
#line 1116
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1118
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1118
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1118
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1121
  return (rv);
}
}
#line 1124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1127
  __mptr = (struct drbd_work  const  *)w;
#line 1127
  ascw = (struct after_state_chg_work *)__mptr;
#line 1128
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1129
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1130
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1130
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1130
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1130
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1130);
    } else {

    }
#line 1131
    complete(ascw->done);
  } else {

  }
#line 1133
  kfree((void const   *)ascw);
#line 1135
  return (1);
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1140
  if (rv != 0) {
#line 1141
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1141
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1141
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1142
    val.i = 0U;
#line 1142
    val.ldv_33296.conn = 10U;
#line 1142
    mask.i = 0U;
#line 1142
    mask.ldv_33296.conn = 31U;
#line 1142
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1143
    return;
  } else {

  }
#line 1146
  switch ((int )mdev->state.ldv_33296.conn) {
  case 12: 
#line 1148
  val___0.i = 0U;
#line 1148
  val___0.ldv_33296.conn = 15U;
#line 1148
  mask___0.i = 0U;
#line 1148
  mask___0.ldv_33296.conn = 31U;
#line 1148
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1149
  goto ldv_43133;
  case 11: 
#line 1151
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1152
  goto ldv_43133;
  }
  ldv_43133: ;
#line 1155
  return;
}
}
#line 1163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1168
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1169
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1170
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1171
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1174
  fp = FP_DONT_CARE;
#line 1175
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1175
  if (tmp != 0) {
#line 1176
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1177
    put_ldev(mdev);
  } else {

  }
#line 1181
  drbd_bcast_state(mdev, ns);
#line 1183
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33296.disk > 7) || (int )os.ldv_33296.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.disk <= 7) && (int )ns.ldv_33296.pdsk <= 7)) {
#line 1185
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1190
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1193
    if (((int )os.ldv_33296.pdsk > 5 && (int )ns.ldv_33296.pdsk <= 5) || ((int )os.ldv_33296.conn <= 9 && (int )ns.ldv_33296.conn > 9)) {
#line 1195
      tl_clear(mdev);
#line 1196
      spin_lock_irq(& mdev->req_lock);
#line 1197
      __ns.i = mdev->state.i;
#line 1197
      __ns.ldv_33296.susp = 0U;
#line 1197
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1198
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1202
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_33296.pdsk > 0) {
#line 1203
    drbd_send_uuids(mdev);
#line 1204
    drbd_send_state(mdev);
  } else {

  }
#line 1206
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1207
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1210
  if ((((int )os.ldv_33296.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_33296.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1216
    kfree((void const   *)mdev->p_uuid);
#line 1217
    mdev->p_uuid = 0;
#line 1218
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1218
    if (tmp___0 != 0) {
#line 1219
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_33296.disk > 7) {
#line 1221
        drbd_uuid_new_current(mdev);
#line 1222
        drbd_send_uuids(mdev);
      } else {

      }
#line 1224
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1228
  if ((int )ns.ldv_33296.pdsk <= 3) {
#line 1228
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1228
    if (tmp___1 != 0) {
#line 1229
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1230
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1233
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1234
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1235
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1239
  if (((int )ns.ldv_33296.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1241
    kfree((void const   *)mdev->p_uuid);
#line 1242
    mdev->p_uuid = 0;
#line 1243
    drbd_send_sizes(mdev, 0);
#line 1244
    drbd_send_uuids(mdev);
#line 1245
    drbd_send_state(mdev);
  } else {

  }
#line 1249
  if ((int )ns.ldv_33296.conn > 9 && ((int )os.ldv_33296.aftr_isp != (int )ns.ldv_33296.aftr_isp || (int )os.ldv_33296.user_isp != (int )ns.ldv_33296.user_isp)) {
#line 1252
    drbd_send_state(mdev);
  } else {

  }
#line 1255
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1257
    suspend_other_sg(mdev);
  } else {

  }
#line 1261
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_33296.conn > 9) {
#line 1262
    drbd_send_state(mdev);
  } else {

  }
#line 1265
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1267
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1270
  if ((((int )os.ldv_33296.conn <= 9 && (int )ns.ldv_33296.conn <= 9) && (int )os.ldv_33296.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1272
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1274
  if ((int )os.ldv_33296.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1277
    eh = EP_PASS_ON;
#line 1278
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1278
    if (tmp___2 != 0) {
#line 1279
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1280
      put_ldev(mdev);
    } else {

    }
#line 1283
    drbd_rs_cancel_all(mdev);
#line 1287
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1287
    if (tmp___3 == 0) {
#line 1287
      goto ldv_43145;
    } else {

    }
#line 1287
    tmp___4 = get_current();
#line 1287
    __wait.flags = 0U;
#line 1287
    __wait.private = (void *)tmp___4;
#line 1287
    __wait.func = & autoremove_wake_function;
#line 1287
    __wait.task_list.next = & __wait.task_list;
#line 1287
    __wait.task_list.prev = & __wait.task_list;
    ldv_43148: 
#line 1287
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1287
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1287
    if (tmp___5 == 0) {
#line 1287
      goto ldv_43147;
    } else {

    }
#line 1287
    schedule();
#line 1287
    goto ldv_43148;
    ldv_43147: 
#line 1287
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43145: 
#line 1288
    mdev->rs_total = 0UL;
#line 1289
    mdev->rs_failed = 0UL;
#line 1290
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1292
    spin_lock_irq(& mdev->req_lock);
#line 1293
    __ns___0.i = mdev->state.i;
#line 1293
    __ns___0.ldv_33296.disk = 0U;
#line 1293
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1294
    spin_unlock_irq(& mdev->req_lock);
#line 1296
    if ((unsigned int )eh == 1U) {
#line 1297
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1300
  if ((int )os.ldv_33296.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1302
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1303
      tmp___10 = drbd_send_state(mdev);
#line 1303
      if (tmp___10 != 0) {
#line 1304
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1304
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1304
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___7, tmp___6);
      } else {
#line 1306
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___9, tmp___8);
      }
    } else {

    }
#line 1309
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1309
    if (tmp___11 == 0) {
#line 1309
      goto ldv_43151;
    } else {

    }
#line 1309
    tmp___12 = get_current();
#line 1309
    __wait___0.flags = 0U;
#line 1309
    __wait___0.private = (void *)tmp___12;
#line 1309
    __wait___0.func = & autoremove_wake_function;
#line 1309
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1309
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43154: 
#line 1309
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1309
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1309
    if (tmp___13 == 0) {
#line 1309
      goto ldv_43153;
    } else {

    }
#line 1309
    schedule();
#line 1309
    goto ldv_43154;
    ldv_43153: 
#line 1309
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43151: 
#line 1310
    lc_destroy(mdev->resync);
#line 1311
    mdev->resync = 0;
#line 1312
    lc_destroy(mdev->act_log);
#line 1313
    mdev->act_log = 0;
#line 1314
    drbd_free_bc(mdev->ldev);
#line 1314
    mdev->ldev = 0;
#line 1318
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1319
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1323
  if ((int )ns.ldv_33296.disk > 3 && (int )ns.ldv_33296.pdsk > 3) {
#line 1323
    tmp___14 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1323
    if (tmp___14 != 0) {
#line 1325
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1326
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1330
  if ((((int )os.ldv_33296.conn > 10 && (int )ns.ldv_33296.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1333
    resume_next_sg(mdev);
  } else {

  }
#line 1336
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1337
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1341
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1344
    if ((int )os.ldv_33296.aftr_isp != (int )ns.ldv_33296.aftr_isp) {
#line 1345
      resume_next_sg(mdev);
    } else {

    }
#line 1347
    tmp___15 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1347
    if (tmp___15 != 0) {
#line 1348
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1351
  drbd_md_sync(mdev);
#line 1352
  return;
}
}
#line 1355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1357
  thi = (struct drbd_thread *)arg;
#line 1358
  mdev = thi->mdev;
  restart: 
#line 1363
  retval = (*(thi->function))(thi);
#line 1365
  tmp = spinlock_check(& thi->t_lock);
#line 1365
  flags = _raw_spin_lock_irqsave(tmp);
#line 1377
  if ((unsigned int )thi->t_state == 3U) {
#line 1378
    tmp___0 = get_current();
#line 1378
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1378
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1378
    printk("<6>%s %s: Restarting %s\n", tmp___2, tmp___1, (char *)(& tmp___0->comm));
#line 1379
    thi->t_state = Running;
#line 1380
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1381
    goto restart;
  } else {

  }
#line 1384
  thi->task = 0;
#line 1385
  thi->t_state = None;
#line 1386
  __asm__  volatile   ("mfence": : : "memory");
#line 1387
  complete(& thi->stop);
#line 1388
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1390
  tmp___3 = get_current();
#line 1390
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
  printk("<6>%s %s: Terminating %s\n", tmp___5, tmp___4, (char *)(& tmp___3->comm));
#line 1393
  ldv_module_put_1(& __this_module);
#line 1394
  return (retval);
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1400
  spinlock_check(& thi->t_lock);
#line 1400
  __raw_spin_lock_init(& thi->t_lock.ldv_5735.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1401
  thi->task = 0;
#line 1402
  thi->t_state = None;
#line 1403
  thi->function = func;
#line 1404
  thi->mdev = mdev;
#line 1405
  return;
}
}
#line 1407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct task_struct *tmp___9 ;
  unsigned int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  long tmp___13 ;
  raw_spinlock_t *tmp___14 ;
  struct task_struct *tmp___15 ;
  struct task_struct *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;

  {
#line 1409
  mdev = thi->mdev;
#line 1413
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1420
  tmp = spinlock_check(& thi->t_lock);
#line 1420
  flags = _raw_spin_lock_irqsave(tmp);
#line 1422
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1424
  tmp___0 = get_current();
#line 1424
  tmp___1 = get_current();
#line 1424
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1424
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1424
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___3, tmp___2, me, (char *)(& tmp___1->comm),
         tmp___0->pid);
#line 1428
  tmp___6 = ldv_try_module_get_2(& __this_module);
#line 1428
  if (tmp___6 == 0) {
#line 1429
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1429
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1429
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___5,
           tmp___4);
#line 1430
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1431
    return (0);
  } else {

  }
#line 1434
  init_completion(& thi->stop);
#line 1435
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1435
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1435
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1435
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1435);
  } else {

  }
#line 1436
  thi->reset_cpu_mask = 1;
#line 1437
  thi->t_state = Running;
#line 1438
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1439
  tmp___9 = get_current();
#line 1439
  flush_signals(tmp___9);
#line 1441
  tmp___10 = mdev_to_minor(mdev);
#line 1441
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___10, me);
#line 1444
  tmp___13 = IS_ERR((void const   *)nt);
#line 1444
  if (tmp___13 != 0L) {
#line 1445
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___12, tmp___11);
#line 1447
    ldv_module_put_3(& __this_module);
#line 1448
    return (0);
  } else {

  }
#line 1450
  tmp___14 = spinlock_check(& thi->t_lock);
#line 1450
  flags = _raw_spin_lock_irqsave(tmp___14);
#line 1451
  thi->task = nt;
#line 1452
  thi->t_state = Running;
#line 1453
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1454
  wake_up_process(nt);
#line 1455
  goto ldv_43187;
  case 2U: 
#line 1457
  thi->t_state = Restarting;
#line 1458
  tmp___15 = get_current();
#line 1458
  tmp___16 = get_current();
#line 1458
  tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
  tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___18, tmp___17, me,
         (char *)(& tmp___16->comm), tmp___15->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1464
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1465
  goto ldv_43187;
  }
  ldv_43187: ;
#line 1468
  return (1);
}
}
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1476
  ns = restart != 0 ? Restarting : Exiting;
#line 1479
  tmp = spinlock_check(& thi->t_lock);
#line 1479
  flags = _raw_spin_lock_irqsave(tmp);
#line 1481
  if ((unsigned int )thi->t_state == 0U) {
#line 1482
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1483
    if (restart != 0) {
#line 1484
      drbd_thread_start(thi);
    } else {

    }
#line 1485
    return;
  } else {

  }
#line 1488
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1489
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1490
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1491
      return;
    } else {

    }
#line 1494
    thi->t_state = ns;
#line 1495
    __asm__  volatile   ("mfence": : : "memory");
#line 1496
    init_completion(& thi->stop);
#line 1497
    tmp___0 = get_current();
#line 1497
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1498
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1502
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1504
  if (wait != 0) {
#line 1505
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1506
  return;
}
}
#line 1516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1521
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1521
  if (tmp != 0U) {
#line 1522
    return;
  } else {

  }
#line 1524
  tmp___0 = mdev_to_minor(mdev);
#line 1524
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1524
  ord = (int )(tmp___0 % tmp___1);
#line 1525
  cpu = -1;
#line 1525
  goto ldv_43208;
  ldv_43207: 
#line 1526
  tmp___2 = ord;
#line 1526
  ord = ord - 1;
#line 1526
  if (tmp___2 == 0) {
#line 1527
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1528
    return;
  } else {

  }
  ldv_43208: 
#line 1525
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1525
  cpu = (int )tmp___3;
#line 1525
  if (cpu < nr_cpu_ids) {
#line 1526
    goto ldv_43207;
  } else {

  }
#line 1532
  cpumask_setall(mdev->cpu_mask);
#line 1533
  return;
}
}
#line 1542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1544
  tmp = get_current();
#line 1544
  p = tmp;
#line 1545
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1550
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1550
  if (_b != 0) {
#line 1550
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1550
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1550
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1550);
  } else {

  }
#line 1550
  if (_b != 0) {
#line 1551
    return;
  } else {

  }
#line 1552
  if (thi->reset_cpu_mask == 0) {
#line 1553
    return;
  } else {

  }
#line 1554
  thi->reset_cpu_mask = 0;
#line 1555
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1556
  return;
}
}
#line 1560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1566
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1566
  if (_b != 0) {
#line 1566
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1566
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1566
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1566);
  } else {

  }
#line 1566
  if (_b != 0) {
#line 1566
    return (0);
  } else {

  }
#line 1567
  _b___0 = size == 0UL;
#line 1567
  if (_b___0 != 0) {
#line 1567
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1567);
  } else {

  }
#line 1567
  if (_b___0 != 0) {
#line 1567
    return (0);
  } else {

  }
#line 1569
  h->magic = 1728214147U;
#line 1570
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1570
  h->command = tmp___3;
#line 1571
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1571
  h->length = tmp___4;
#line 1573
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1575
  ok = (size_t )sent == size;
#line 1576
  if (ok == 0) {
#line 1577
    tmp___5 = cmdname(cmd);
#line 1577
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1579
  return (ok);
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1588
  ok = 0;
#line 1591
  if (use_data_socket != 0) {
#line 1592
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1593
    sock = mdev->data.socket;
  } else {
#line 1595
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1596
    sock = mdev->meta.socket;
  }
#line 1601
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1601
  if (tmp != 0L) {
#line 1602
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1604
  if (use_data_socket != 0) {
#line 1605
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1607
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1608
  return (ok);
}
}
#line 1611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1617
  h.magic = 1728214147U;
#line 1618
  tmp = __fswab16((int )((__u16 )cmd));
#line 1618
  h.command = tmp;
#line 1619
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1619
  h.length = tmp___0;
#line 1621
  tmp___1 = drbd_get_data_sock(mdev);
#line 1621
  if (tmp___1 == 0) {
#line 1622
    return (0);
  } else {

  }
#line 1624
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1624
  ok = tmp___2 == 8;
#line 1626
  if (ok != 0) {
#line 1626
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1626
    if ((size_t )tmp___3 == size) {
#line 1626
      tmp___4 = 1;
    } else {
#line 1626
      tmp___4 = 0;
    }
  } else {
#line 1626
    tmp___4 = 0;
  }
#line 1626
  ok = tmp___4;
#line 1629
  drbd_put_data_sock(mdev);
#line 1631
  return (ok);
}
}
#line 1634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1639
  apv = mdev->agreed_pro_version;
#line 1641
  if (apv > 87) {
#line 1641
    if (apv == 88) {
#line 1641
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1641
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1641
      tmp___0 = 140;
    }
#line 1641
    size = tmp___0;
  } else {
#line 1641
    size = 12;
  }
#line 1649
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1650
  sock = mdev->data.socket;
#line 1652
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1652
  if (tmp___2 != 0L) {
#line 1653
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1655
    p = & mdev->data.sbuf.rs_param_89;
#line 1658
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1660
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1660
    p->rate = tmp___1;
#line 1662
    if (apv > 87) {
#line 1663
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1664
    if (apv > 88) {
#line 1665
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1667
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1669
    rv = 0;
  }
#line 1671
  mutex_unlock(& mdev->data.mutex);
#line 1673
  return (rv);
}
}
#line 1676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  __u32 tmp___8 ;

  {
#line 1681
  size = 32;
#line 1683
  if (mdev->agreed_pro_version > 86) {
#line 1684
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1684
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1688
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1688
  p = (struct p_protocol *)tmp___0;
#line 1689
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1690
    return (0);
  } else {

  }
#line 1692
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1692
  p->protocol = tmp___1;
#line 1693
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1693
  p->after_sb_0p = tmp___2;
#line 1694
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1694
  p->after_sb_1p = tmp___3;
#line 1695
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1695
  p->after_sb_2p = tmp___4;
#line 1696
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1696
  p->two_primaries = tmp___5;
#line 1698
  cf = 0;
#line 1699
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1700
    cf = cf | 1;
  } else {

  }
#line 1701
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1702
    if (mdev->agreed_pro_version > 91) {
#line 1703
      cf = cf | 2;
    } else {
#line 1705
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1705
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1705
      printk("<3>%s %s: --dry-run is not supported by peer", tmp___7, tmp___6);
#line 1706
      return (0);
    }
  } else {

  }
#line 1709
  tmp___8 = __fswab32((__u32 )cf);
#line 1709
  p->conn_flags = tmp___8;
#line 1711
  if (mdev->agreed_pro_version > 86) {
#line 1712
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1714
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1716
  kfree((void const   *)p);
#line 1717
  return (rv);
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1725
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1725
  if (tmp == 0) {
#line 1726
    return (1);
  } else {

  }
#line 1728
  i = 0;
#line 1728
  goto ldv_43274;
  ldv_43273: ;
#line 1729
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1729
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1729
    p.uuid[i] = tmp___0;
  } else {
#line 1729
    p.uuid[i] = 0ULL;
  }
#line 1728
  i = i + 1;
  ldv_43274: ;
#line 1728
  if (i <= 3) {
#line 1729
    goto ldv_43273;
  } else {

  }
#line 1731
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1732
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1732
  p.uuid[4] = tmp___1;
#line 1733
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1734
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1734
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1735
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1801UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1736
  tmp___3 = __fswab64(uuid_flags);
#line 1736
  p.uuid[5] = tmp___3;
#line 1738
  put_ldev(mdev);
#line 1740
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1740
  return (tmp___4);
}
}
#line 1744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1746
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1746
  return (tmp);
}
}
#line 1749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1751
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1751
  return (tmp);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1759
  tmp = __fswab64(val);
#line 1759
  p.uuid = tmp;
#line 1761
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1761
  return (tmp___0);
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  sector_t tmp___6 ;
  __u64 tmp___7 ;
  __u64 tmp___8 ;
  unsigned int tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;

  {
#line 1772
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1772
  if (tmp___3 != 0) {
#line 1773
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1773
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1773
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1773
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1773);
    } else {

    }
#line 1774
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1775
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1776
    q_order_type = drbd_queue_order_type(mdev);
#line 1777
    tmp___1 = drbd_queue_order_type(mdev);
#line 1777
    tmp___2 = __fswab32((__u32 )tmp___1);
#line 1777
    p.queue_order_type = tmp___2;
#line 1778
    put_ldev(mdev);
  } else {
#line 1780
    d_size = 0UL;
#line 1781
    u_size = 0UL;
#line 1782
    q_order_type = 0;
  }
#line 1785
  tmp___4 = __fswab64((__u64 )d_size);
#line 1785
  p.d_size = tmp___4;
#line 1786
  tmp___5 = __fswab64((__u64 )u_size);
#line 1786
  p.u_size = tmp___5;
#line 1787
  if (trigger_reply == 0) {
#line 1787
    tmp___6 = drbd_get_capacity(mdev->this_bdev);
#line 1787
    tmp___7 = (__u64 )tmp___6;
  } else {
#line 1787
    tmp___7 = 0ULL;
  }
#line 1787
  tmp___8 = __fswab64(tmp___7);
#line 1787
  p.c_size = tmp___8;
#line 1788
  tmp___9 = queue_max_segment_size(mdev->rq_queue);
#line 1788
  tmp___10 = __fswab32(tmp___9);
#line 1788
  p.max_segment_size = tmp___10;
#line 1789
  tmp___11 = __fswab32((__u32 )q_order_type);
#line 1789
  p.queue_order_type = tmp___11;
#line 1791
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1793
  return (ok);
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1804
  ok = 0;
#line 1808
  drbd_state_lock___0(mdev);
#line 1810
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1812
  tmp = __fswab32(mdev->state.i);
#line 1812
  p.state = tmp;
#line 1813
  sock = mdev->data.socket;
#line 1815
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1815
  if (tmp___0 != 0L) {
#line 1816
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1820
  mutex_unlock(& mdev->data.mutex);
#line 1822
  drbd_state_unlock(mdev);
#line 1823
  return (ok);
}
}
#line 1826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1831
  tmp = __fswab32(mask.i);
#line 1831
  p.mask = tmp;
#line 1832
  tmp___0 = __fswab32(val.i);
#line 1832
  p.val = tmp___0;
#line 1834
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1834
  return (tmp___1);
}
}
#line 1838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1842
  tmp = __fswab32((__u32 )retcode);
#line 1842
  p.retcode = tmp;
#line 1844
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1844
  return (tmp___0);
}
}
#line 1848 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1861
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1863
    return (0);
  } else {

  }
#line 1865
  if (c->bit_offset >= c->bm_bits) {
#line 1866
    return (0);
  } else {

  }
#line 1869
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1870
  memset((void *)(& p->code), 0, 4087UL);
#line 1872
  plain_bits = 0UL;
#line 1877
  toggle = 2U;
  ldv_43327: ;
#line 1882
  if (toggle == 0U) {
#line 1882
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1882
    tmp = tmp___0;
  } else {
#line 1882
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1882
    tmp = tmp___1;
  }
#line 1884
  if (tmp == 0xffffffffffffffffUL) {
#line 1885
    tmp = c->bm_bits;
  } else {

  }
#line 1886
  rl = tmp - c->bit_offset;
#line 1888
  if (toggle == 2U) {
#line 1889
    if (rl == 0UL) {
#line 1892
      DCBP_set_start(p, 1);
#line 1894
      toggle = toggle == 0U;
#line 1895
      goto ldv_43325;
    } else {

    }
#line 1897
    DCBP_set_start(p, 0);
  } else {

  }
#line 1902
  if (rl == 0UL) {
#line 1903
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1903
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1903
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1905
    return (-1);
  } else {

  }
#line 1908
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1909
  if (bits == -105) {
#line 1910
    goto ldv_43326;
  } else {

  }
#line 1911
  if (bits <= 0) {
#line 1912
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1913
    return (0);
  } else {

  }
#line 1916
  toggle = toggle == 0U;
#line 1917
  plain_bits = plain_bits + rl;
#line 1918
  c->bit_offset = tmp;
  ldv_43325: ;
#line 1919
  if (c->bit_offset < c->bm_bits) {
#line 1920
    goto ldv_43327;
  } else {

  }
  ldv_43326: 
#line 1921
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1923
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1926
    c->bit_offset = c->bit_offset - plain_bits;
#line 1927
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1928
    c->bit_offset = c->word_offset * 64UL;
#line 1929
    return (0);
  } else {

  }
#line 1934
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1937
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1939
  return ((int )len);
}
}
#line 1943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29472 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1946
  p = (struct p_compressed_bm *)h;
#line 1951
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1953
  if (len < 0) {
#line 1954
    return (FAILED);
  } else {

  }
#line 1956
  if (len != 0) {
#line 1957
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1958
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 1961
    c->packets[0] = c->packets[0] + 1U;
#line 1962
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 1964
    if (c->bit_offset >= c->bm_bits) {
#line 1965
      len = 0;
    } else {

    }
  } else {
#line 1969
    __min1 = 511UL;
#line 1969
    __min2 = c->bm_words - c->word_offset;
#line 1969
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1970
    len = (int )((unsigned int )num_words * 8U);
#line 1971
    if (len != 0) {
#line 1972
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 1973
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 1975
    c->word_offset = c->word_offset + num_words;
#line 1976
    c->bit_offset = c->word_offset * 64UL;
#line 1978
    c->packets[1] = c->packets[1] + 1U;
#line 1979
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 1981
    if (c->bit_offset > c->bm_bits) {
#line 1982
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1984
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 1986
  if (ok == 2) {
#line 1987
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 1988
  return ((enum ldv_29472 )ok);
}
}
#line 1992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_29472 tmp___13 ;

  {
#line 1998
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 1998
  if (_b != 0) {
#line 1998
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1998
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1998
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1998);
  } else {

  }
#line 1998
  if (_b != 0) {
#line 1998
    return (0);
  } else {

  }
#line 2002
  tmp___1 = __get_free_pages(16U, 0U);
#line 2002
  p = (struct p_header *)tmp___1;
#line 2003
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2004
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2004
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2004
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 2005
    return (0);
  } else {

  }
#line 2008
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2008
  if (tmp___10 != 0) {
#line 2009
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 2009
    if (tmp___9 != 0) {
#line 2010
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2010
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2010
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2011
      drbd_bm_set_all(mdev);
#line 2012
      tmp___8 = drbd_bm_write(mdev);
#line 2012
      if (tmp___8 != 0) {
#line 2016
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2016
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2016
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2018
        drbd_md_clear_flag(mdev, 8);
#line 2019
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2022
    put_ldev(mdev);
  } else {

  }
#line 2025
  tmp___11 = drbd_bm_bits(mdev);
#line 2025
  tmp___12 = drbd_bm_words(mdev);
#line 2025
  __constr_expr_0.bm_bits = tmp___11;
#line 2025
  __constr_expr_0.bm_words = tmp___12;
#line 2025
  __constr_expr_0.bit_offset = 0UL;
#line 2025
  __constr_expr_0.word_offset = 0UL;
#line 2025
  __constr_expr_0.packets[0] = 0U;
#line 2025
  __constr_expr_0.packets[1] = 0U;
#line 2025
  __constr_expr_0.bytes[0] = 0U;
#line 2025
  __constr_expr_0.bytes[1] = 0U;
#line 2025
  c = __constr_expr_0;
  ldv_43354: 
#line 2031
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2031
  ret = (int )tmp___13;
#line 2032
  if (ret == 0) {
#line 2033
    goto ldv_43354;
  } else {

  }
#line 2034
  free_pages((unsigned long )p, 0U);
#line 2035
  return (ret == 2);
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2042
  tmp = drbd_get_data_sock(mdev);
#line 2042
  if (tmp == 0) {
#line 2043
    return (-1);
  } else {

  }
#line 2044
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2044
  err = tmp___0 == 0;
#line 2045
  drbd_put_data_sock(mdev);
#line 2046
  return (err);
}
}
#line 2049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2054
  p.barrier = barrier_nr;
#line 2055
  tmp = __fswab32(set_size);
#line 2055
  p.set_size = tmp;
#line 2057
  if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 2058
    return (0);
  } else {

  }
#line 2059
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2061
  return (ok);
}
}
#line 2072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2080
  p.sector = sector;
#line 2081
  p.block_id = block_id;
#line 2082
  p.blksize = blksize;
#line 2083
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2083
  tmp___0 = __fswab32((__u32 )tmp);
#line 2083
  p.seq_num = tmp___0;
#line 2085
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_33296.conn <= 9) {
#line 2086
    return (0);
  } else {

  }
#line 2087
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2089
  return (ok);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2095
  header_size = 24;
#line 2097
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2099
  tmp = __fswab32((__u32 )data_size);
#line 2099
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2099
  return (tmp___0);
}
}
#line 2103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2106
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2106
  return (tmp);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2118
  tmp = __fswab32(e->size);
#line 2118
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2118
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2118
  return (tmp___1);
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2129
  tmp = __fswab64(block_id);
#line 2129
  tmp___0 = __fswab32((__u32 )blksize);
#line 2129
  tmp___1 = __fswab64((__u64 )sector);
#line 2129
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2129
  return (tmp___2);
}
}
#line 2135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2141
  tmp = __fswab64((__u64 )sector);
#line 2141
  p.sector = tmp;
#line 2142
  p.block_id = block_id;
#line 2143
  tmp___0 = __fswab32((__u32 )size);
#line 2143
  p.blksize = tmp___0;
#line 2145
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2147
  return (ok);
}
}
#line 2150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2158
  tmp = __fswab64((__u64 )sector);
#line 2158
  p.sector = tmp;
#line 2159
  p.block_id = 1728263026ULL;
#line 2160
  tmp___0 = __fswab32((__u32 )size);
#line 2160
  p.blksize = tmp___0;
#line 2162
  p.head.magic = 1728214147U;
#line 2163
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2163
  p.head.command = tmp___1;
#line 2164
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2164
  p.head.length = tmp___2;
#line 2166
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2168
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2168
  ok = tmp___3 == 32;
#line 2169
  if (ok != 0) {
#line 2169
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2169
    if (tmp___4 == digest_size) {
#line 2169
      tmp___5 = 1;
    } else {
#line 2169
      tmp___5 = 0;
    }
  } else {
#line 2169
    tmp___5 = 0;
  }
#line 2169
  ok = tmp___5;
#line 2171
  mutex_unlock(& mdev->data.mutex);
#line 2173
  return (ok);
}
}
#line 2176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2181
  tmp = __fswab64((__u64 )sector);
#line 2181
  p.sector = tmp;
#line 2182
  p.block_id = 1728261953ULL;
#line 2183
  tmp___0 = __fswab32((__u32 )size);
#line 2183
  p.blksize = tmp___0;
#line 2185
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2187
  return (ok);
}
}
#line 2194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2199
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2199
    tmp___0 = 1;
  } else {
#line 2199
    tmp = get_t_state(& mdev->asender);
#line 2199
    if ((unsigned int )tmp != 1U) {
#line 2199
      tmp___0 = 1;
    } else
#line 2199
    if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 2199
      tmp___0 = 1;
    } else {
#line 2199
      tmp___0 = 0;
    }
  }
#line 2199
  drop_it = tmp___0;
#line 2204
  if (drop_it != 0) {
#line 2205
    return (1);
  } else {

  }
#line 2207
  mdev->ko_count = mdev->ko_count - 1U;
#line 2207
  drop_it = mdev->ko_count == 0U;
#line 2208
  if (drop_it == 0) {
#line 2209
    tmp___1 = get_current();
#line 2209
    tmp___2 = get_current();
#line 2209
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2209
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2209
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2211
    request_ping(mdev);
  } else {

  }
#line 2214
  return (drop_it);
}
}
#line 2238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2241
  tmp = kmap(page);
#line 2241
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2241
  sent = tmp___0;
#line 2242
  kunmap(page);
#line 2243
  if ((size_t )sent == size) {
#line 2244
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2245
  return ((size_t )sent == size);
}
}
#line 2248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2251
  tmp = current_thread_info();
#line 2251
  oldfs = tmp->addr_limit;
#line 2253
  len = (int )size;
#line 2261
  if (disable_sendpage != 0) {
#line 2262
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2262
    return (tmp___0);
  } else {
#line 2261
    tmp___1 = page_count(page);
#line 2261
    if (tmp___1 <= 0) {
#line 2262
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2262
      return (tmp___0);
    } else {
#line 2261
      tmp___2 = PageSlab(page);
#line 2261
      if (tmp___2 != 0) {
#line 2262
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2262
        return (tmp___0);
      } else {

      }
    }
  }
#line 2264
  drbd_update_congested(mdev);
#line 2265
  tmp___3 = current_thread_info();
#line 2265
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2265
  tmp___3->addr_limit = __constr_expr_0;
  ldv_43452: 
#line 2267
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2267
  sent = (int )tmp___4;
#line 2270
  if (sent == -11) {
#line 2271
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2271
    if (tmp___5 != 0) {
#line 2273
      goto ldv_43449;
    } else {
#line 2275
      goto ldv_43450;
    }
  } else {

  }
#line 2277
  if (sent <= 0) {
#line 2278
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2278
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2278
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2280
    goto ldv_43449;
  } else {

  }
#line 2282
  len = len - sent;
#line 2283
  offset = offset + sent;
  ldv_43450: ;
#line 2284
  if (len > 0) {
#line 2285
    goto ldv_43452;
  } else {

  }
  ldv_43449: 
#line 2285
  tmp___8 = current_thread_info();
#line 2285
  tmp___8->addr_limit = oldfs;
#line 2286
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2288
  ok = len == 0;
#line 2289
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2289
  if (tmp___9 != 0L) {
#line 2290
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2291
  return (ok);
}
}
#line 2294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2298
  bvec = bio->bi_io_vec;
#line 2298
  i = 0;
#line 2298
  goto ldv_43460;
  ldv_43459: 
#line 2299
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2299
  if (tmp == 0) {
#line 2301
    return (0);
  } else {

  }
#line 2298
  bvec = bvec + 1;
#line 2298
  i = i + 1;
  ldv_43460: ;
#line 2298
  if ((int )bio->bi_vcnt > i) {
#line 2299
    goto ldv_43459;
  } else {

  }

#line 2303
  return (1);
}
}
#line 2306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2310
  bvec = bio->bi_io_vec;
#line 2310
  i = 0;
#line 2310
  goto ldv_43469;
  ldv_43468: 
#line 2311
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2311
  if (tmp == 0) {
#line 2313
    return (0);
  } else {

  }
#line 2310
  bvec = bvec + 1;
#line 2310
  i = i + 1;
  ldv_43469: ;
#line 2310
  if ((int )bio->bi_vcnt > i) {
#line 2311
    goto ldv_43468;
  } else {

  }

#line 2316
  return (1);
}
}
#line 2322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2324
  ok = 1;
#line 2326
  dp_flags = 0U;
#line 2330
  tmp = drbd_get_data_sock(mdev);
#line 2330
  if (tmp == 0) {
#line 2331
    return (0);
  } else {

  }
#line 2333
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2333
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2333
    dgs = (int )tmp___0;
  } else {
#line 2333
    dgs = 0;
  }
#line 2336
  p.head.magic = 1728214147U;
#line 2337
  p.head.command = 0U;
#line 2338
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2338
  p.head.length = tmp___1;
#line 2341
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2341
  p.sector = tmp___2;
#line 2342
  p.block_id = (u64 )req;
#line 2343
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2343
  req->seq_num = tmp___3;
#line 2343
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2343
  p.seq_num = tmp___4;
#line 2345
  dp_flags = 0U;
#line 2350
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2350
  if ((int )tmp___7) {
#line 2351
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2351
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2351
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2354
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2354
  if ((int )tmp___8) {
#line 2355
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2358
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2358
  if ((int )tmp___9) {
#line 2359
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2360
  if ((int )mdev->state.ldv_33296.conn > 15 && (int )mdev->state.ldv_33296.conn <= 21) {
#line 2362
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2364
  tmp___10 = __fswab32(dp_flags);
#line 2364
  p.dp_flags = tmp___10;
#line 2365
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2366
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2366
  ok = tmp___11 == 32;
#line 2368
  if (ok != 0 && dgs != 0) {
#line 2369
    dgb = mdev->int_dig_out;
#line 2370
    drbd_csum(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2371
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2373
  if (ok != 0) {
#line 2374
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2375
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2377
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2380
  drbd_put_data_sock(mdev);
#line 2381
  return (ok);
}
}
#line 2388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2396
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2396
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2396
    dgs = (int )tmp;
  } else {
#line 2396
    dgs = 0;
  }
#line 2399
  p.head.magic = 1728214147U;
#line 2400
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2400
  p.head.command = tmp___0;
#line 2401
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2401
  p.head.length = tmp___1;
#line 2404
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2404
  p.sector = tmp___2;
#line 2405
  p.block_id = e->block_id;
#line 2412
  tmp___3 = drbd_get_data_sock(mdev);
#line 2412
  if (tmp___3 == 0) {
#line 2413
    return (0);
  } else {

  }
#line 2415
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2415
  ok = tmp___4 == 32;
#line 2417
  if (ok != 0 && dgs != 0) {
#line 2418
    dgb = mdev->int_dig_out;
#line 2419
    drbd_csum(mdev, mdev->integrity_w_tfm, e->private_bio, dgb);
#line 2420
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2422
  if (ok != 0) {
#line 2423
    ok = _drbd_send_zc_bio(mdev, e->private_bio);
  } else {

  }
#line 2425
  drbd_put_data_sock(mdev);
#line 2426
  return (ok);
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2450
  sent = 0;
#line 2452
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2453
    return (-1000);
  } else {

  }
#line 2457
  iov.iov_base = buf;
#line 2458
  iov.iov_len = size;
#line 2460
  msg.msg_name = 0;
#line 2461
  msg.msg_namelen = 0;
#line 2462
  msg.msg_control = 0;
#line 2463
  msg.msg_controllen = 0UL;
#line 2464
  msg.msg_flags = msg_flags | 16384U;
#line 2466
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2467
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2468
    drbd_update_congested(mdev);
  } else {

  }
  ldv_43502: 
#line 2480
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2481
  if (rv == -11) {
#line 2482
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2482
    if (tmp != 0) {
#line 2483
      goto ldv_43500;
    } else {
#line 2485
      goto ldv_43501;
    }
  } else {

  }
#line 2487
  if (rv == 0) {
#line 2487
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2487
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2487
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2487);
  } else {

  }
#line 2488
  if (rv == -4) {
#line 2489
    tmp___2 = get_current();
#line 2489
    flush_signals(tmp___2);
#line 2490
    rv = 0;
  } else {

  }
#line 2492
  if (rv < 0) {
#line 2493
    goto ldv_43500;
  } else {

  }
#line 2494
  sent = sent + rv;
#line 2495
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2496
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_43501: ;
#line 2497
  if ((size_t )sent < size) {
#line 2498
    goto ldv_43502;
  } else {

  }
  ldv_43500: ;
#line 2499
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2500
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2502
  if (rv <= 0) {
#line 2503
    if (rv != -11) {
#line 2504
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2504
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2504
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2507
      val.i = 0U;
#line 2507
      val.ldv_33296.conn = 4U;
#line 2507
      mask.i = 0U;
#line 2507
      mask.ldv_33296.conn = 31U;
#line 2507
      drbd_force_state(mdev, mask, val);
    } else {
#line 2509
      val___0.i = 0U;
#line 2509
      val___0.ldv_33296.conn = 3U;
#line 2509
      mask___0.i = 0U;
#line 2509
      mask___0.ldv_33296.conn = 31U;
#line 2509
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2512
  return (sent);
}
}
#line 2515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2517
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2519
  rv = 0;
#line 2521
  tmp = spinlock_check(& mdev->req_lock);
#line 2521
  flags = _raw_spin_lock_irqsave(tmp);
#line 2525
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2526
    if ((mode & 2U) != 0U) {
#line 2527
      rv = -30;
    } else
#line 2528
    if (allow_oos == 0) {
#line 2529
      rv = -124;
    } else {

    }
  } else {

  }
#line 2532
  if (rv == 0) {
#line 2533
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2534
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2536
  return (rv);
}
}
#line 2539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2541
  mdev = (struct drbd_conf *)gd->private_data;
#line 2542
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2543
  return (0);
}
}
#line 2546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2548
  mdev = (struct drbd_conf *)q->queuedata;
#line 2551
  spin_lock_irq(q->queue_lock);
#line 2552
  blk_remove_plug(q);
#line 2553
  spin_unlock_irq(q->queue_lock);
#line 2556
  spin_lock_irq(& mdev->req_lock);
#line 2557
  if ((int )mdev->state.ldv_33296.pdsk > 3 && (int )mdev->state.ldv_33296.conn > 9) {
#line 2558
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2558
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2558
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2558
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             2558);
    } else {

    }
#line 2559
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2559
    if (tmp___2 != 0) {
#line 2564
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2564
      if (tmp___1 != 0) {
#line 2565
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2569
  spin_unlock_irq(& mdev->req_lock);
#line 2571
  if ((int )mdev->state.ldv_33296.disk > 3) {
#line 2572
    drbd_kick_lo(mdev);
  } else {

  }
#line 2573
  return;
}
}
#line 2575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2577
  mdev->sync_conf.after = -1;
#line 2578
  mdev->sync_conf.rate = 250;
#line 2579
  mdev->sync_conf.al_extents = 127;
#line 2580
  __constr_expr_0.ldv_33296.role = 2U;
#line 2580
  __constr_expr_0.ldv_33296.peer = 0U;
#line 2580
  __constr_expr_0.ldv_33296.conn = 0U;
#line 2580
  __constr_expr_0.ldv_33296.disk = 0U;
#line 2580
  __constr_expr_0.ldv_33296.pdsk = 6U;
#line 2580
  __constr_expr_0.ldv_33296.susp = 0U;
#line 2580
  __constr_expr_0.ldv_33296.aftr_isp = (unsigned char)0;
#line 2580
  __constr_expr_0.ldv_33296.peer_isp = (unsigned char)0;
#line 2580
  __constr_expr_0.ldv_33296.user_isp = (unsigned char)0;
#line 2580
  __constr_expr_0.ldv_33296._pad = (unsigned short)0;
#line 2580
  mdev->state = __constr_expr_0;
#line 2581
  return;
}
}
#line 2590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2595
  drbd_set_defaults(mdev);
#line 2600
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2602
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2603
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2604
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2605
  atomic_set(& mdev->unacked_cnt, 0);
#line 2606
  atomic_set(& mdev->local_cnt, 0);
#line 2607
  atomic_set(& mdev->net_cnt, 0);
#line 2608
  atomic_set(& mdev->packet_seq, 0);
#line 2609
  atomic_set(& mdev->pp_in_use, 0);
#line 2611
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2612
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2613
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2614
  sema_init(& mdev->data.work.s, 0);
#line 2615
  sema_init(& mdev->meta.work.s, 0);
#line 2616
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2618
  spinlock_check(& mdev->data.work.q_lock);
#line 2618
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5735.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2619
  spinlock_check(& mdev->meta.work.q_lock);
#line 2619
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5735.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2621
  spinlock_check(& mdev->al_lock);
#line 2621
  __raw_spin_lock_init(& mdev->al_lock.ldv_5735.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2622
  spinlock_check(& mdev->req_lock);
#line 2622
  __raw_spin_lock_init(& mdev->req_lock.ldv_5735.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2623
  spinlock_check(& mdev->peer_seq_lock);
#line 2623
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5735.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2624
  spinlock_check(& mdev->epoch_lock);
#line 2624
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5735.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2626
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2627
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2628
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2629
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2630
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2631
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2632
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2633
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2634
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2635
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2636
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2637
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2638
  mdev->resync_work.cb = & w_resync_inactive;
#line 2639
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2640
  mdev->md_sync_work.cb = & w_md_sync;
#line 2641
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2642
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2643
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2644
  mdev->resync_timer.function = & resync_timer_fn;
#line 2645
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2646
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2647
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2649
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2650
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2651
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2652
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2653
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2655
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2656
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2657
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2659
  mdev->agreed_pro_version = 92;
#line 2660
  mdev->write_ordering = WO_bio_barrier;
#line 2661
  mdev->resync_wenr = 4294967295U;
#line 2662
  return;
}
}
#line 2664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2666
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2667
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2667
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2667
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2671
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2671
  if (tmp___4 != 0) {
#line 2672
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2672
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2672
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2672
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2673
  tmp___15 = 0UL;
#line 2673
  mdev->rs_mark_time = tmp___15;
#line 2673
  tmp___14 = tmp___15;
#line 2673
  mdev->rs_mark_left = tmp___14;
#line 2673
  tmp___13 = tmp___14;
#line 2673
  mdev->rs_failed = tmp___13;
#line 2673
  tmp___12 = tmp___13;
#line 2673
  mdev->rs_total = tmp___12;
#line 2673
  tmp___11 = tmp___12;
#line 2673
  mdev->rs_start = tmp___11;
#line 2673
  tmp___10 = tmp___11;
#line 2673
  mdev->p_size = tmp___10;
#line 2673
  tmp___9 = (unsigned int )tmp___10;
#line 2673
  mdev->writ_cnt = tmp___9;
#line 2673
  tmp___8 = tmp___9;
#line 2673
  mdev->send_cnt = tmp___8;
#line 2673
  tmp___7 = tmp___8;
#line 2673
  mdev->recv_cnt = tmp___7;
#line 2673
  tmp___6 = tmp___7;
#line 2673
  mdev->read_cnt = tmp___6;
#line 2673
  tmp___5 = tmp___6;
#line 2673
  mdev->bm_writ_cnt = tmp___5;
#line 2673
  mdev->al_writ_cnt = tmp___5;
#line 2685
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2685
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2685
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2685
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2685);
  } else {

  }
#line 2687
  drbd_set_my_capacity(mdev, 0UL);
#line 2688
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2690
    drbd_bm_resize(mdev, 0UL);
#line 2691
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2694
  drbd_free_resources(mdev);
#line 2700
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2700
  if (tmp___20 == 0) {
#line 2700
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2700
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2700
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2700);
  } else {

  }
#line 2701
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2701
  if (tmp___23 == 0) {
#line 2701
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2701);
  } else {

  }
#line 2702
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2702
  if (tmp___26 == 0) {
#line 2702
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2702
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2702
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2702);
  } else {

  }
#line 2703
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2703
  if (tmp___29 == 0) {
#line 2703
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2703
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2703
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2703);
  } else {

  }
#line 2704
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2704
  if (tmp___32 == 0) {
#line 2704
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2704
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2704
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2704);
  } else {

  }
#line 2705
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2705
  if (tmp___35 == 0) {
#line 2705
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2705
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2705
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2705);
  } else {

  }
#line 2706
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2706
  if (tmp___38 == 0) {
#line 2706
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2706
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2706
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2706);
  } else {

  }
#line 2707
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2707
  if (tmp___41 == 0) {
#line 2707
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2707);
  } else {

  }
#line 2708
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2708
  if (tmp___44 == 0) {
#line 2708
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2708);
  } else {

  }
#line 2709
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2709
  if (tmp___47 == 0) {
#line 2709
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2709
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2709
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2709);
  } else {

  }
#line 2710
  return;
}
}
#line 2714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2718
  goto ldv_43562;
  ldv_43561: 
#line 2719
  page = drbd_pp_pool;
#line 2720
  drbd_pp_pool = (struct page *)page->ldv_12002.ldv_11999.private;
#line 2721
  __free_pages(page, 0U);
#line 2722
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_43562: ;
#line 2718
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2719
    goto ldv_43561;
  } else {

  }

#line 2727
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2728
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2729
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2730
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2731
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2732
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2733
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2734
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2735
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2736
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2737
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2738
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2740
  drbd_ee_mempool = 0;
#line 2741
  drbd_request_mempool = 0;
#line 2742
  drbd_ee_cache = 0;
#line 2743
  drbd_request_cache = 0;
#line 2744
  drbd_bm_ext_cache = 0;
#line 2745
  drbd_al_ext_cache = 0;
#line 2747
  return;
}
}
#line 2750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2753
  number = (int const   )(minor_count * 8U);
#line 2757
  drbd_request_mempool = 0;
#line 2758
  drbd_ee_cache = 0;
#line 2759
  drbd_request_cache = 0;
#line 2760
  drbd_bm_ext_cache = 0;
#line 2761
  drbd_al_ext_cache = 0;
#line 2762
  drbd_pp_pool = 0;
#line 2765
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2767
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2768
    goto Enomem;
  } else {

  }
#line 2770
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2772
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2773
    goto Enomem;
  } else {

  }
#line 2775
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2777
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2778
    goto Enomem;
  } else {

  }
#line 2780
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2782
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2783
    goto Enomem;
  } else {

  }
#line 2786
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2788
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2789
    goto Enomem;
  } else {

  }
#line 2791
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2793
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2794
    goto Enomem;
  } else {

  }
#line 2797
  spinlock_check(& drbd_pp_lock);
#line 2797
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5735.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2799
  i = 0;
#line 2799
  goto ldv_43573;
  ldv_43572: 
#line 2800
  page = alloc_pages(131282U, 0U);
#line 2801
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2802
    goto Enomem;
  } else {

  }
#line 2803
  page->ldv_12002.ldv_11999.private = (unsigned long )drbd_pp_pool;
#line 2804
  drbd_pp_pool = page;
#line 2799
  i = i + 1;
  ldv_43573: ;
#line 2799
  if (i < number) {
#line 2800
    goto ldv_43572;
  } else {

  }
#line 2806
  drbd_pp_vacant = number;
#line 2808
  return (0);
  Enomem: 
#line 2811
  drbd_destroy_mempools();
#line 2812
  return (-12);
}
}
#line 2815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2822
  return (0);
}
}
#line 2825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2833
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2834
  if (rr != 0) {
#line 2835
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2835
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2835
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2837
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2838
  if (rr != 0) {
#line 2839
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2839
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2839
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 2841
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2842
  if (rr != 0) {
#line 2843
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2843
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2843
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 2845
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2846
  if (rr != 0) {
#line 2847
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 2849
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2850
  if (rr != 0) {
#line 2851
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 2852
  return;
}
}
#line 2856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 2858
  tmp = minor_to_mdev(minor);
#line 2858
  mdev = tmp;
#line 2860
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2861
    return;
  } else {

  }
#line 2864
  if (mdev->open_cnt != 0) {
#line 2865
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2866);
  } else {

  }
#line 2868
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2868
  _b = tmp___4 == 0;
#line 2868
  if (_b != 0) {
#line 2868
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2868
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2868
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2868);
  } else {

  }
#line 2868
  if (_b != 0) {
#line 2870
    lp = mdev->data.work.q.next;
#line 2870
    goto ldv_43594;
    ldv_43593: 
#line 2871
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2871
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2871
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 2870
    lp = lp->next;
    ldv_43594: 
#line 2870
    __builtin_prefetch((void const   *)lp->next);
#line 2870
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2871
      goto ldv_43593;
    } else {

    }

  } else {

  }
#line 2876
  del_gendisk(mdev->vdisk);
#line 2881
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2882
    bdput(mdev->this_bdev);
  } else {

  }
#line 2884
  drbd_free_resources(mdev);
#line 2886
  drbd_release_ee_lists(mdev);
#line 2889
  kfree((void const   *)mdev->ee_hash);
#line 2895
  lc_destroy(mdev->act_log);
#line 2896
  lc_destroy(mdev->resync);
#line 2898
  kfree((void const   *)mdev->p_uuid);
#line 2901
  kfree((void const   *)mdev->int_dig_out);
#line 2902
  kfree((void const   *)mdev->int_dig_in);
#line 2903
  kfree((void const   *)mdev->int_dig_vv);
#line 2908
  drbd_free_mdev(mdev);
#line 2909
  return;
}
}
#line 2911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2915
  unregister_reboot_notifier(& drbd_notifier);
#line 2917
  drbd_nl_cleanup();
#line 2919
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 2920
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2921
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 2922
    i = minor_count;
#line 2923
    goto ldv_43601;
    ldv_43600: 
#line 2924
    drbd_delete_device(i);
    ldv_43601: 
#line 2923
    tmp = i;
#line 2923
    i = i - 1U;
#line 2923
    if (tmp != 0U) {
#line 2924
      goto ldv_43600;
    } else {

    }
#line 2925
    drbd_destroy_mempools();
  } else {

  }
#line 2928
  kfree((void const   *)minor_table);
#line 2930
  unregister_blkdev(147U, "drbd");
#line 2932
  printk("<6>drbd: module cleanup done.\n");
#line 2933
  return;
}
}
#line 2942 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2944
  mdev = (struct drbd_conf *)congested_data;
#line 2946
  reason = 45;
#line 2947
  r = 0;
#line 2949
  tmp = __inc_ap_bio_cond___0(mdev);
#line 2949
  if (tmp == 0) {
#line 2951
    r = bdi_bits;
#line 2952
    reason = 100;
#line 2953
    goto out;
  } else {

  }
#line 2956
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2956
  if (tmp___0 != 0) {
#line 2957
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2958
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 2959
    put_ldev(mdev);
#line 2960
    if (r != 0) {
#line 2961
      reason = 98;
    } else {

    }
  } else {

  }
#line 2964
  if ((bdi_bits & 4) != 0) {
#line 2964
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 2964
    if (tmp___1 != 0) {
#line 2965
      r = r | 4;
#line 2966
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 2970
  mdev->congestion_reason = reason;
#line 2971
  return (r);
}
}
#line 2974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 2981
  tmp = kzalloc___1(3952UL, 208U);
#line 2981
  mdev = (struct drbd_conf *)tmp;
#line 2982
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2983
    return (0);
  } else {

  }
#line 2984
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 2984
  if (tmp___0) {
#line 2984
    tmp___1 = 0;
  } else {
#line 2984
    tmp___1 = 1;
  }
#line 2984
  if (tmp___1) {
#line 2985
    goto out_no_cpumask;
  } else {

  }
#line 2987
  mdev->minor = minor;
#line 2989
  drbd_init_set_defaults(mdev);
#line 2991
  q = blk_alloc_queue(208U);
#line 2992
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 2993
    goto out_no_q;
  } else {

  }
#line 2994
  mdev->rq_queue = q;
#line 2995
  q->queuedata = (void *)mdev;
#line 2997
  disk = alloc_disk(1);
#line 2998
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 2999
    goto out_no_disk;
  } else {

  }
#line 3000
  mdev->vdisk = disk;
#line 3002
  set_disk_ro(disk, 1);
#line 3004
  disk->queue = q;
#line 3005
  disk->major = 147;
#line 3006
  disk->first_minor = (int )minor;
#line 3007
  disk->fops = & drbd_ops;
#line 3008
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3009
  disk->private_data = (void *)mdev;
#line 3011
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3013
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3015
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3016
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3018
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3019
  blk_queue_max_segment_size(q, 32768U);
#line 3020
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3021
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3022
  q->queue_lock = & mdev->req_lock;
#line 3024
  q->unplug_fn = & drbd_unplug_fn;
#line 3026
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3027
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3028
    goto out_no_io_page;
  } else {

  }
#line 3030
  tmp___2 = drbd_bm_init(mdev);
#line 3030
  if (tmp___2 != 0) {
#line 3031
    goto out_no_bitmap;
  } else {

  }
#line 3033
  tmp___3 = tl_init(mdev);
#line 3033
  if (tmp___3 == 0) {
#line 3034
    goto out_no_tl;
  } else {

  }
#line 3036
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3036
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3037
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3038
    goto out_no_app_reads;
  } else {

  }
#line 3040
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3040
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3041
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3042
    goto out_no_epoch;
  } else {

  }
#line 3044
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3045
  mdev->epochs = 1U;
#line 3047
  return (mdev);
  out_no_epoch: 
#line 3052
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3054
  tl_cleanup(mdev);
  out_no_tl: 
#line 3056
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3058
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3060
  put_disk(disk);
  out_no_disk: 
#line 3062
  blk_cleanup_queue(q);
  out_no_q: 
#line 3064
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3066
  kfree((void const   *)mdev);
#line 3067
  return (0);
}
}
#line 3072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3074
  kfree((void const   *)mdev->current_epoch);
#line 3075
  kfree((void const   *)mdev->app_reads_hash);
#line 3076
  tl_cleanup(mdev);
#line 3077
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3078
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3079
  __free_pages(mdev->md_io_page, 0U);
#line 3080
  put_disk(mdev->vdisk);
#line 3081
  blk_cleanup_queue(mdev->rq_queue);
#line 3082
  free_cpumask_var(mdev->cpu_mask);
#line 3083
  kfree((void const   *)mdev);
#line 3084
  return;
}
}
#line 3087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3098
  if (minor_count == 0U || minor_count > 255U) {
#line 3099
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3102
    return (-22);
  } else {

  }
#line 3108
  err = drbd_nl_init();
#line 3109
  if (err != 0) {
#line 3110
    return (err);
  } else {

  }
#line 3112
  err = register_blkdev(147U, "drbd");
#line 3113
  if (err != 0) {
#line 3114
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3117
    return (err);
  } else {

  }
#line 3120
  register_reboot_notifier(& drbd_notifier);
#line 3125
  err = -12;
#line 3127
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3129
  drbd_proc = 0;
#line 3130
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3130
  minor_table = (struct drbd_conf **)tmp;
#line 3132
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3133
    goto Enomem;
  } else {

  }
#line 3135
  err = drbd_create_mempools();
#line 3136
  if (err != 0) {
#line 3137
    goto Enomem;
  } else {

  }
#line 3139
  drbd_proc = proc_create("drbd", 33060U, 0, & drbd_proc_fops);
#line 3140
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3141
    printk("<3>drbd: unable to register proc file\n");
#line 3142
    goto Enomem;
  } else {

  }
#line 3145
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3147
  printk("<6>drbd: initialized. Version: 8.3.7 (api:%d/proto:%d-%d)\n", 88, 86, 92);
#line 3150
  tmp___0 = drbd_buildtag();
#line 3150
  printk("<6>drbd: %s\n", tmp___0);
#line 3151
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3153
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3155
  return (0);
  Enomem: 
#line 3158
  drbd_cleanup();
#line 3159
  if (err == -12) {
#line 3161
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3163
    printk("<3>drbd: initialization failure\n");
  }
#line 3164
  return (err);
}
}
#line 3167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3169
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3170
    return;
  } else {

  }
#line 3172
  bd_release(ldev->backing_bdev);
#line 3173
  bd_release(ldev->md_bdev);
#line 3175
  fput(ldev->lo_file);
#line 3176
  fput(ldev->md_file);
#line 3178
  kfree((void const   *)ldev);
#line 3179
  return;
}
}
#line 3181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3183
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3184
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3185
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3186
    sock_release(mdev->data.socket);
#line 3187
    mdev->data.socket = 0;
#line 3188
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3190
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3191
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3192
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3193
    sock_release(mdev->meta.socket);
#line 3194
    mdev->meta.socket = 0;
#line 3195
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3197
  return;
}
}
#line 3200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3202
  crypto_free_hash(mdev->csums_tfm);
#line 3203
  mdev->csums_tfm = 0;
#line 3204
  crypto_free_hash(mdev->verify_tfm);
#line 3205
  mdev->verify_tfm = 0;
#line 3206
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3207
  mdev->cram_hmac_tfm = 0;
#line 3208
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3209
  mdev->integrity_w_tfm = 0;
#line 3210
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3211
  mdev->integrity_r_tfm = 0;
#line 3213
  drbd_free_sock(mdev);
#line 3215
  drbd_free_bc(mdev->ldev);
#line 3215
  mdev->ldev = 0;
#line 3216
  return;
}
}
#line 3243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3249
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3249
  if (tmp == 0) {
#line 3250
    return;
  } else {

  }
#line 3251
  del_timer(& mdev->md_sync_timer);
#line 3255
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3255
  if (tmp___0 == 0) {
#line 3256
    return;
  } else {

  }
#line 3258
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3259
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3259
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3260
  memset((void *)buffer, 0, 512UL);
#line 3262
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3262
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3262
  buffer->la_size = tmp___3;
#line 3263
  i = 0;
#line 3263
  goto ldv_43665;
  ldv_43664: 
#line 3264
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3264
  buffer->uuid[i] = tmp___4;
#line 3263
  i = i + 1;
  ldv_43665: ;
#line 3263
  if (i <= 3) {
#line 3264
    goto ldv_43664;
  } else {

  }
#line 3265
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3265
  buffer->flags = tmp___5;
#line 3266
  buffer->magic = 1795323011U;
#line 3268
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3268
  buffer->md_size_sect = tmp___6;
#line 3269
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3269
  buffer->al_offset = tmp___7;
#line 3270
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3270
  buffer->al_nr_extents = tmp___8;
#line 3271
  buffer->bm_bytes_per_bit = 1048576U;
#line 3272
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3272
  buffer->device_uuid = tmp___9;
#line 3274
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3274
  buffer->bm_offset = tmp___10;
#line 3276
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3276
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3276
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3276
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3276
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3276);
  } else {

  }
#line 3277
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3279
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3279
  if (tmp___16 != 0) {
#line 3280
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3283
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3283
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3283
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3285
    drbd_chk_io_error____2(mdev, 1, 1, "drbd_md_sync");
  }
#line 3290
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3290
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3292
  mutex_unlock(& mdev->md_io_mutex);
#line 3293
  put_ldev(mdev);
#line 3294
  return;
}
}
#line 3304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3307
  rv = 101;
#line 3309
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3309
  if (tmp == 0) {
#line 3310
    return (118);
  } else {

  }
#line 3312
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3313
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3313
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3315
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3315
  if (tmp___3 == 0) {
#line 3318
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3318
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3318
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3319
    rv = 118;
#line 3320
    goto err;
  } else {

  }
#line 3323
  tmp___6 = __fswab32(buffer->magic);
#line 3323
  if (tmp___6 != 2205418091U) {
#line 3324
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3324
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3324
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3325
    rv = 119;
#line 3326
    goto err;
  } else {

  }
#line 3328
  tmp___10 = __fswab32(buffer->al_offset);
#line 3328
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3329
    tmp___7 = __fswab32(buffer->al_offset);
#line 3329
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3329
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3329
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3331
    rv = 119;
#line 3332
    goto err;
  } else {

  }
#line 3334
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3334
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3335
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3335
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3335
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3335
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3337
    rv = 119;
#line 3338
    goto err;
  } else {

  }
#line 3340
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3340
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3341
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3341
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3341
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3341
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3343
    rv = 119;
#line 3344
    goto err;
  } else {

  }
#line 3347
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3347
  if (tmp___22 != 4096U) {
#line 3348
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3348
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3348
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3348
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3350
    rv = 119;
#line 3351
    goto err;
  } else {

  }
#line 3354
  tmp___23 = __fswab64(buffer->la_size);
#line 3354
  bdev->md.la_size_sect = tmp___23;
#line 3355
  i = 0;
#line 3355
  goto ldv_43677;
  ldv_43676: 
#line 3356
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3356
  bdev->md.uuid[i] = tmp___24;
#line 3355
  i = i + 1;
  ldv_43677: ;
#line 3355
  if (i <= 3) {
#line 3356
    goto ldv_43676;
  } else {

  }
#line 3357
  tmp___25 = __fswab32(buffer->flags);
#line 3357
  bdev->md.flags = tmp___25;
#line 3358
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3358
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3359
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3359
  bdev->md.device_uuid = tmp___27;
#line 3361
  if (mdev->sync_conf.al_extents <= 6) {
#line 3362
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3365
  mutex_unlock(& mdev->md_io_mutex);
#line 3366
  put_ldev(mdev);
#line 3368
  return (rv);
}
}
#line 3379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3381
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3382
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3383
  return;
}
}
#line 3386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3390
  i = 2;
#line 3390
  goto ldv_43687;
  ldv_43686: 
#line 3391
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3390
  i = i + 1;
  ldv_43687: ;
#line 3390
  if (i <= 2) {
#line 3391
    goto ldv_43686;
  } else {

  }

#line 3395
  return;
}
}
#line 3394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3396
  if (idx == 0) {
#line 3397
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3398
      val = val | 1ULL;
    } else {
#line 3400
      val = val & 0xfffffffffffffffeULL;
    }
#line 3402
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3405
  (mdev->ldev)->md.uuid[idx] = val;
#line 3406
  drbd_md_mark_dirty(mdev);
#line 3407
  return;
}
}
#line 3410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3412
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3413
    drbd_uuid_move_history(mdev);
#line 3414
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3416
  _drbd_uuid_set(mdev, idx, val);
#line 3417
  return;
}
}
#line 3426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3430
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3430
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3430
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3431
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3431
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3431
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3431
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3431);
  } else {

  }
#line 3432
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3434
  get_random_bytes((void *)(& val), 8);
#line 3435
  _drbd_uuid_set(mdev, 0, val);
#line 3436
  return;
}
}
#line 3438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3440
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3441
    return;
  } else {

  }
#line 3443
  if (val == 0ULL) {
#line 3444
    drbd_uuid_move_history(mdev);
#line 3445
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3446
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3448
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3449
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3449
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3449
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3451
    (mdev->ldev)->md.uuid[1] = val;
#line 3452
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3455
  drbd_md_mark_dirty(mdev);
#line 3456
  return;
}
}
#line 3464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3466
  rv = -5;
#line 3468
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3468
  if (tmp != 0) {
#line 3469
    drbd_md_set_flag(mdev, 8);
#line 3470
    drbd_md_sync(mdev);
#line 3471
    drbd_bm_set_all(mdev);
#line 3473
    rv = drbd_bm_write(mdev);
#line 3475
    if (rv == 0) {
#line 3476
      drbd_md_clear_flag(mdev, 8);
#line 3477
      drbd_md_sync(mdev);
    } else {

    }
#line 3480
    put_ldev(mdev);
  } else {

  }
#line 3483
  return (rv);
}
}
#line 3492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3494
  rv = -5;
#line 3496
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3496
  if (tmp != 0) {
#line 3497
    drbd_bm_clear_all(mdev);
#line 3498
    rv = drbd_bm_write(mdev);
#line 3499
    put_ldev(mdev);
  } else {

  }
#line 3502
  return (rv);
}
}
#line 3505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3507
  __mptr = (struct drbd_work  const  *)w;
#line 3507
  work = (struct bm_io_work *)__mptr;
#line 3510
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3510
  if (tmp___1 != 0) {
#line 3510
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3510
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3510
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3510);
  } else {

  }
#line 3512
  drbd_bm_lock(mdev, work->why);
#line 3513
  rv = (*(work->io_fn))(mdev);
#line 3514
  drbd_bm_unlock(mdev);
#line 3516
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3517
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3519
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3520
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3522
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3523
  work->why = 0;
#line 3525
  return (1);
}
}
#line 3540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3545
  tmp___1 = get_current();
#line 3545
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3545
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3545
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3545
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3545);
  } else {

  }
#line 3547
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3547
  if (tmp___4 != 0) {
#line 3547
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3547
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3547
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3547);
  } else {

  }
#line 3548
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3548
  if (tmp___7 != 0) {
#line 3548
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3548
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3548
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3548);
  } else {

  }
#line 3549
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3549
  if (tmp___10 == 0) {
#line 3549
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3549);
  } else {

  }
#line 3550
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3551
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3554
  mdev->bm_io_work.io_fn = io_fn;
#line 3555
  mdev->bm_io_work.done = done;
#line 3556
  mdev->bm_io_work.why = why;
#line 3558
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3559
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3559
  if (tmp___16 == 0) {
#line 3560
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3560
    if (tmp___15 != 0) {
#line 3561
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3562
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3564
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3564
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3564
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3565
  return;
}
}
#line 3577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3581
  tmp___1 = get_current();
#line 3581
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3581
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3581
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3581
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3581);
  } else {

  }
#line 3583
  drbd_suspend_io(mdev);
#line 3585
  drbd_bm_lock(mdev, why);
#line 3586
  rv = (*io_fn)(mdev);
#line 3587
  drbd_bm_unlock(mdev);
#line 3589
  drbd_resume_io(mdev);
#line 3591
  return (rv);
}
}
#line 3594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3596
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3597
    drbd_md_mark_dirty(mdev);
#line 3598
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3600
  return;
}
}
#line 3602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3604
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3605
    drbd_md_mark_dirty(mdev);
#line 3606
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3608
  return;
}
}
#line 3609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3611
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3616
  mdev = (struct drbd_conf *)data;
#line 3618
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3619
  return;
}
}
#line 3621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3623
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3623
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3623
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3624
  drbd_md_sync(mdev);
#line 3626
  return (1);
}
}
#line 3646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3650
  tmp = rsp->count;
#line 3650
  rsp->count = rsp->count - 1UL;
#line 3650
  if (tmp == 0UL) {
#line 3651
    get_random_bytes((void *)(& refresh), 8);
#line 3652
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3653
    rsp->count = 10000UL;
  } else {

  }
#line 3655
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3656
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3656
  return ((unsigned long )tmp___0);
}
}
#line 3660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[9U] ;

  {
#line 3661
  _faults[0] = (char *)"Meta-data write";
#line 3661
  _faults[1] = (char *)"Meta-data read";
#line 3661
  _faults[2] = (char *)"Resync write";
#line 3661
  _faults[3] = (char *)"Resync read";
#line 3661
  _faults[4] = (char *)"Data write";
#line 3661
  _faults[5] = (char *)"Data read";
#line 3661
  _faults[6] = (char *)"Data read ahead";
#line 3661
  _faults[7] = (char *)"BM allocation";
#line 3661
  _faults[8] = (char *)"EE allocation";
#line 3673
  return (type <= 8U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3679
  rrs.state = 0UL;
#line 3679
  rrs.count = 0UL;
#line 3681
  if (fault_devs == 0) {
#line 3681
    goto _L;
  } else {
#line 3681
    tmp = mdev_to_minor(mdev);
#line 3681
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3681
      tmp___0 = _drbd_fault_random(& rrs);
#line 3681
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3681
        tmp___1 = 1;
      } else {
#line 3681
        tmp___1 = 0;
      }
    } else {
#line 3681
      tmp___1 = 0;
    }
  }
#line 3681
  ret = (unsigned int )tmp___1;
#line 3686
  if (ret != 0U) {
#line 3687
    fault_count = fault_count + 1;
#line 3689
    tmp___5 = __printk_ratelimit("_drbd_insert_fault");
#line 3689
    if (tmp___5 != 0) {
#line 3690
      tmp___2 = _drbd_fault_str(type);
#line 3690
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3690
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3690
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3694
  return (ret);
}
}
#line 3698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3703
  buildtag[0] = '\000';
#line 3703
  tmp = 1U;
#line 3703
  while (1) {
#line 3703
    if (tmp >= 38U) {
#line 3703
      break;
    } else {

    }
#line 3703
    buildtag[tmp] = (char)0;
#line 3703
    tmp = tmp + 1U;
  }
#line 3705
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3707
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3708
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3711
      buildtag[0] = 98;
    }
  } else {

  }
#line 3714
  return ((char const   *)(& buildtag));
}
}
#line 3762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_60_p1 ;
  int res_drbd_open_60 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_61_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_68_p1 ;
  void *var_drbd_notify_sys_68_p2 ;
  unsigned long var_md_sync_timer_fn_93_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3986
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3938
  LDV_IN_INTERRUPT = 1;
#line 3947
  ldv_initialize();
#line 3974
  ldv_handler_precall();
#line 3975
  tmp = drbd_init();
#line 3975
  if (tmp != 0) {
#line 3976
    goto ldv_final;
  } else {

  }
#line 3993
  goto ldv_43848;
  ldv_43847: 
#line 3997
  tmp___0 = nondet_int();
#line 3997
  switch (tmp___0) {
  case 0: ;
#line 4002
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4028
    ldv_handler_precall();
#line 4029
    res_drbd_open_60 = drbd_open(var_group1, var_drbd_open_60_p1);
#line 4030
    ldv_check_return_value(res_drbd_open_60);
#line 4031
    if (res_drbd_open_60 != 0) {
#line 4032
      goto ldv_module_exit;
    } else {

    }
#line 4045
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4051
  goto ldv_43842;
  case 1: ;
#line 4055
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4081
    ldv_handler_precall();
#line 4082
    drbd_release(var_group2, var_drbd_release_61_p1);
#line 4095
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4101
  goto ldv_43842;
  case 2: 
#line 4131
  ldv_handler_precall();
#line 4132
  drbd_notify_sys(var_group3, var_drbd_notify_sys_68_p1, var_drbd_notify_sys_68_p2);
#line 4151
  goto ldv_43842;
  case 3: 
#line 4184
  ldv_handler_precall();
#line 4185
  md_sync_timer_fn(var_md_sync_timer_fn_93_p0);
#line 4201
  goto ldv_43842;
  default: ;
#line 4202
  goto ldv_43842;
  }
  ldv_43842: ;
  ldv_43848: 
#line 3993
  tmp___1 = nondet_int();
#line 3993
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 3995
    goto ldv_43847;
  } else {

  }

  ldv_module_exit: 
#line 4235
  ldv_handler_precall();
#line 4236
  drbd_cleanup();
  ldv_final: 
#line 4251
  ldv_check_final_state();
#line 4254
  return;
}
}
#line 4258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4263
  ldv_module_put(ldv_func_arg1);
#line 4264
  return;
}
}
#line 4266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4271
  tmp = ldv_try_module_get(module);
#line 4271
  return (tmp);
}
}
#line 4274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4279
  ldv_module_put(ldv_func_arg1);
#line 4280
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Refusing to be Primary without at least one UpToDate disk",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 195 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 51 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 69
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 76 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 79
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 81
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 82
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 83
    return (-12);
  } else {

  }
#line 84
  tmp = call_usermodehelper_exec(info, wait);
#line 84
  return (tmp);
}
}
#line 202 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 494 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 500
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 504
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1917 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1983
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 928 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 929
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 933
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 942
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 955
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1043 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1045
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_41609;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_41609;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41609: ;
#line 1755
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[71U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {0, 0, 0}, 
        {"dry_run", 40960, 4}};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 49
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 50
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_42179;
  ldv_42178: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_42176;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_42176: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_42179: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_42178;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_42240;
  ldv_42239: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_42208;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_42208;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_42208;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_42208;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_42208;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_42208;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42208;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42208;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42208;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_42208;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42208;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42208;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_42208: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_42240: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_42239;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_42343;
  ldv_42342: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_42278;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_42278;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_42278;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_42278;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_42278;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_42278;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_42278;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_42278;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_42278;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_42278;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_42278;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_42278;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_42278;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_42278;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_42278;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_42278;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_42278;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_42278;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_42278;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_42278;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42278;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_42278: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_42343: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_42342;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 71
  goto ldv_42376;
  ldv_42375: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_42372;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42372;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_42372: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_42376: 
#line 71
  tmp___3 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 71
  tag = (int )tmp___4;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_42375;
  } else {

  }

#line 71
  return (1);
}
}
#line 84
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 84 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned short *tmp___12 ;
  u16 tmp___13 ;

  {
#line 76
  goto ldv_42426;
  ldv_42425: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 30: 
#line 76
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->rate = (int )tmp___1;
#line 76
  goto ldv_42390;
  case 31: 
#line 76
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->after = (int )tmp___2;
#line 76
  goto ldv_42390;
  case 32: 
#line 76
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->al_extents = (int )tmp___3;
#line 76
  goto ldv_42390;
  case 52: ;
#line 76
  if (dlen > 64) {
#line 76
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___5,
           tmp___4, (char *)"verify_alg", dlen, 64U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->verify_alg_len = dlen;
#line 76
  __min1 = (size_t )dlen;
#line 76
  __min2 = 64UL;
#line 76
  __len = __min1 < __min2 ? __min1 : __min2;
#line 76
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 76
  goto ldv_42390;
  case 51: ;
#line 76
  if (dlen > 32) {
#line 76
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___7,
           tmp___6, (char *)"cpu_mask", dlen, 32U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->cpu_mask_len = dlen;
#line 76
  __min1___0 = (size_t )dlen;
#line 76
  __min2___0 = 32UL;
#line 76
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 76
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 76
  goto ldv_42390;
  case 64: ;
#line 76
  if (dlen > 64) {
#line 76
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"csums_alg", dlen, 64U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->csums_alg_len = dlen;
#line 76
  __min1___1 = (size_t )dlen;
#line 76
  __min2___1 = 64UL;
#line 76
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 76
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 76
  goto ldv_42390;
  case 65: 
#line 76
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_42390;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: Unknown tag: %d\n", tmp___11, tmp___10, tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_42390: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_42426: 
#line 76
  tmp___12 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___13 = get_unaligned_le16((void const   *)tmp___12);
#line 76
  tag = (int )tmp___13;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_42425;
  } else {

  }

#line 76
  return (1);
}
}
#line 128
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 128 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 126
  goto ldv_42725;
  ldv_42724: 
#line 126
  tmp = tags;
#line 126
  tags = tags + 1;
#line 126
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 126
  dlen = (int )tmp___0;
#line 126
  switch (tag & 8191) {
  case 66: 
#line 126
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 126
  goto ldv_42722;
  default: ;
#line 126
  if ((tag & 8192) != 0) {
#line 126
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 126
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 126
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 126
    return (0);
  } else {

  }
  }
  ldv_42722: 
#line 126
  tags = tags + (unsigned long )dlen;
  ldv_42725: 
#line 126
  tmp___3 = tags;
#line 126
  tags = tags + 1;
#line 126
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 126
  tag = (int )tmp___4;
#line 126
  if (tag != 0) {
#line 127
    goto ldv_42724;
  } else {

  }

#line 126
  return (1);
}
}
#line 132
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 132 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 130
  goto ldv_42742;
  ldv_42741: 
#line 130
  tmp = tags;
#line 130
  tags = tags + 1;
#line 130
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 130
  dlen = (int )tmp___0;
#line 130
  switch (tag & 8191) {
  case 63: 
#line 130
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 130
  goto ldv_42739;
  default: ;
#line 130
  if ((tag & 8192) != 0) {
#line 130
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 130
    return (0);
  } else {

  }
  }
  ldv_42739: 
#line 130
  tags = tags + (unsigned long )dlen;
  ldv_42742: 
#line 130
  tmp___3 = tags;
#line 130
  tags = tags + 1;
#line 130
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 130
  tag = (int )tmp___4;
#line 130
  if (tag != 0) {
#line 131
    goto ldv_42741;
  } else {

  }

#line 130
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_42787;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_42787;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_42787;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_42787;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42787;
  }
  ldv_42787: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_42794;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_42794;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_42794;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_42794;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42794;
  }
  ldv_42794: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_42801;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_42801;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42801;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42801;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42801;
  }
  ldv_42801: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_42808;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_42808;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_42808;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_42808;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42808;
  }
  ldv_42808: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_42815;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_42815;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42815;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42815;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42815;
  }
  ldv_42815: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_42825;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_42825;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_42825;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_42825;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42825;
  }
  ldv_42825: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_42832;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_42832;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42832;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42832;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42832;
  }
  ldv_42832: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_42842;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_42842;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_42842;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_42842;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42842;
  }
  ldv_42842: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_42849;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_42849;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_42849;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_42849;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42849;
  }
  ldv_42849: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_42856;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_42856;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42856;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42856;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42856;
  }
  ldv_42856: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_42863;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_42863;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_42863;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_42863;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42863;
  }
  ldv_42863: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_42870;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_42870;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_42870;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_42870;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42870;
  }
  ldv_42870: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_42877;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_42877;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42877;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42877;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42877;
  }
  ldv_42877: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_42884;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_42884;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_42884;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_42884;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42884;
  }
  ldv_42884: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_42891;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_42891;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_42891;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_42891;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42891;
  }
  ldv_42891: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_42898;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_42898;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42898;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42898;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42898;
  }
  ldv_42898: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_42905;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_42905;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_42905;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_42905;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42905;
  }
  ldv_42905: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_42912;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_42912;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_42912;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_42912;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42912;
  }
  ldv_42912: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_42919;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_42919;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_42919;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_42919;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42919;
  }
  ldv_42919: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_42926;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_42926;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_42926;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_42926;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42926;
  }
  ldv_42926: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_42933;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_42933;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_42933;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_42933;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42933;
  }
  ldv_42933: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_42940;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_42940;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_42940;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_42940;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42940;
  }
  ldv_42940: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_42947;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_42947;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_42947;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_42947;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42947;
  }
  ldv_42947: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_42954;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_42954;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_42954;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_42954;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42954;
  }
  ldv_42954: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_42961;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_42961;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_42961;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_42961;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42961;
  }
  ldv_42961: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_42968;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_42968;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_42968;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_42968;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42968;
  }
  ldv_42968: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_42975;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_42975;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_42975;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_42975;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42975;
  }
  ldv_42975: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_42982;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_42982;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_42982;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_42982;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42982;
  }
  ldv_42982: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_42989;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_42989;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_42989;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_42989;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42989;
  }
  ldv_42989: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_43014;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_43014;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_43014;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_43014;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43014;
  }
  ldv_43014: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_43021;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_43021;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43021;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43021;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43021;
  }
  ldv_43021: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_43031;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_43031;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_43031;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_43031;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43031;
  }
  ldv_43031: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_43038;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_43038;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43038;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43038;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43038;
  }
  ldv_43038: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_43048;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_43048;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_43048;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_43048;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43048;
  }
  ldv_43048: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_43055;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_43055;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43055;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43055;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43055;
  }
  ldv_43055: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_43065;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_43065;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_43065;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_43065;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43065;
  }
  ldv_43065: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_43072;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_43072;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43072;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43072;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43072;
  }
  ldv_43072: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_43082;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_43082;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_43082;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_43082;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43082;
  }
  ldv_43082: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_43089;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_43089;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43089;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43089;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43089;
  }
  ldv_43089: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_43099;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_43099;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_43099;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_43099;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43099;
  }
  ldv_43099: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_43106;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_43106;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_43106;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_43106;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43106;
  }
  ldv_43106: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_43113;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_43113;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43113;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43113;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43113;
  }
  ldv_43113: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_43120;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_43120;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_43120;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_43120;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43120;
  }
  ldv_43120: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_43127;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_43127;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_43127;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_43127;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43127;
  }
  ldv_43127: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_43134;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_43134;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43134;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43134;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43134;
  }
  ldv_43134: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_43141;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_43141;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_43141;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_43141;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43141;
  }
  ldv_43141: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_43148;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_43148;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_43148;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_43148;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43148;
  }
  ldv_43148: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_43155;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_43155;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43155;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43155;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43155;
  }
  ldv_43155: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_43162;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_43162;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_43162;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_43162;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43162;
  }
  ldv_43162: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_43169;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_43169;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_43169;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_43169;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43169;
  }
  ldv_43169: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_43176;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_43176;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43176;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43176;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43176;
  }
  ldv_43176: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_43183;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_43183;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_43183;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_43183;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43183;
  }
  ldv_43183: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_43190;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_43190;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_43190;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_43190;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43190;
  }
  ldv_43190: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_43197;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_43197;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43197;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43197;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43197;
  }
  ldv_43197: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_43204;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_43204;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_43204;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_43204;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43204;
  }
  ldv_43204: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_43211;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_43211;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_43211;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_43211;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43211;
  }
  ldv_43211: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_43218;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_43218;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43218;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43218;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43218;
  }
  ldv_43218: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_43225;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_43225;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_43225;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_43225;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43225;
  }
  ldv_43225: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_43232;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_43232;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_43232;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_43232;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43232;
  }
  ldv_43232: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_43239;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_43239;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43239;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43239;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43239;
  }
  ldv_43239: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_43246;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_43246;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_43246;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_43246;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43246;
  }
  ldv_43246: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_43253;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_43253;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_43253;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_43253;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43253;
  }
  ldv_43253: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_43260;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_43260;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43260;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43260;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43260;
  }
  ldv_43260: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_43267;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_43267;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_43267;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_43267;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43267;
  }
  ldv_43267: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_43274;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_43274;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_43274;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_43274;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43274;
  }
  ldv_43274: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_43281;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_43281;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43281;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43281;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43281;
  }
  ldv_43281: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_43288;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_43288;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_43288;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_43288;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43288;
  }
  ldv_43288: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_43295;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_43295;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_43295;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_43295;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43295;
  }
  ldv_43295: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_43302;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_43302;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43302;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43302;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43302;
  }
  ldv_43302: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_43309;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_43309;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_43309;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_43309;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43309;
  }
  ldv_43309: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_43316;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_43316;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_43316;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_43316;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43316;
  }
  ldv_43316: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_43323;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_43323;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43323;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43323;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43323;
  }
  ldv_43323: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_43330;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_43330;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_43330;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_43330;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43330;
  }
  ldv_43330: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_43337;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_43337;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_43337;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_43337;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43337;
  }
  ldv_43337: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_43344;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_43344;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43344;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43344;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43344;
  }
  ldv_43344: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_43351;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_43351;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_43351;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_43351;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43351;
  }
  ldv_43351: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_43358;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_43358;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_43358;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_43358;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43358;
  }
  ldv_43358: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_43365;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_43365;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43365;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43365;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43365;
  }
  ldv_43365: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_43372;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_43372;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_43372;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_43372;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43372;
  }
  ldv_43372: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_43379;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_43379;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_43379;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_43379;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43379;
  }
  ldv_43379: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_43386;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_43386;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43386;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43386;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43386;
  }
  ldv_43386: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_43393;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_43393;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_43393;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_43393;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43393;
  }
  ldv_43393: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_43400;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_43400;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_43400;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_43400;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43400;
  }
  ldv_43400: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_43407;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_43407;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43407;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43407;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43407;
  }
  ldv_43407: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_43414;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_43414;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_43414;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_43414;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43414;
  }
  ldv_43414: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_43421;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_43421;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_43421;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_43421;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43421;
  }
  ldv_43421: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_43428;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_43428;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_43428;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_43428;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43428;
  }
  ldv_43428: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_43435;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_43435;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_43435;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_43435;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43435;
  }
  ldv_43435: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_43442;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_43442;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_43442;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_43442;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43442;
  }
  ldv_43442: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_43449;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_43449;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_43449;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_43449;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43449;
  }
  ldv_43449: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_43456;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_43456;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_43456;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_43456;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43456;
  }
  ldv_43456: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_43463;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_43463;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_43463;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_43463;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43463;
  }
  ldv_43463: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_43470;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_43470;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_43470;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_43470;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43470;
  }
  ldv_43470: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_43477;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_43477;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_43477;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_43477;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43477;
  }
  ldv_43477: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_43484;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_43484;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_43484;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_43484;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43484;
  }
  ldv_43484: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_43491;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_43491;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_43491;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_43491;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43491;
  }
  ldv_43491: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_43498;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_43498;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_43498;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_43498;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43498;
  }
  ldv_43498: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_43505;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_43505;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_43505;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_43505;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43505;
  }
  ldv_43505: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 84
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 84 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p = (void *)tmp;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p) = 30U;
#line 76
  goto ldv_43574;
  case 2UL: 
#line 76
  put_unaligned_le16(30, __gu_p);
#line 76
  goto ldv_43574;
  case 4UL: 
#line 76
  put_unaligned_le32(30U, __gu_p);
#line 76
  goto ldv_43574;
  case 8UL: 
#line 76
  put_unaligned_le64(30ULL, __gu_p);
#line 76
  goto ldv_43574;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43574;
  }
  ldv_43574: 
#line 76
  tmp___0 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___0 = (void *)tmp___0;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___0) = 4U;
#line 76
  goto ldv_43581;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___0);
#line 76
  goto ldv_43581;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___0);
#line 76
  goto ldv_43581;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___0);
#line 76
  goto ldv_43581;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43581;
  }
  ldv_43581: 
#line 76
  __gu_p___1 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 76
  goto ldv_43588;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 76
  goto ldv_43588;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 76
  goto ldv_43588;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 76
  goto ldv_43588;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43588;
  }
  ldv_43588: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___2 = (void *)tmp___1;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___2) = 31U;
#line 76
  goto ldv_43595;
  case 2UL: 
#line 76
  put_unaligned_le16(31, __gu_p___2);
#line 76
  goto ldv_43595;
  case 4UL: 
#line 76
  put_unaligned_le32(31U, __gu_p___2);
#line 76
  goto ldv_43595;
  case 8UL: 
#line 76
  put_unaligned_le64(31ULL, __gu_p___2);
#line 76
  goto ldv_43595;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43595;
  }
  ldv_43595: 
#line 76
  tmp___2 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___3 = (void *)tmp___2;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___3) = 4U;
#line 76
  goto ldv_43602;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___3);
#line 76
  goto ldv_43602;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___3);
#line 76
  goto ldv_43602;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___3);
#line 76
  goto ldv_43602;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43602;
  }
  ldv_43602: 
#line 76
  __gu_p___4 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 76
  goto ldv_43609;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 76
  goto ldv_43609;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 76
  goto ldv_43609;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 76
  goto ldv_43609;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43609;
  }
  ldv_43609: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___3 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___5 = (void *)tmp___3;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___5) = 32U;
#line 76
  goto ldv_43616;
  case 2UL: 
#line 76
  put_unaligned_le16(32, __gu_p___5);
#line 76
  goto ldv_43616;
  case 4UL: 
#line 76
  put_unaligned_le32(32U, __gu_p___5);
#line 76
  goto ldv_43616;
  case 8UL: 
#line 76
  put_unaligned_le64(32ULL, __gu_p___5);
#line 76
  goto ldv_43616;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43616;
  }
  ldv_43616: 
#line 76
  tmp___4 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___6 = (void *)tmp___4;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___6) = 4U;
#line 76
  goto ldv_43623;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___6);
#line 76
  goto ldv_43623;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___6);
#line 76
  goto ldv_43623;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___6);
#line 76
  goto ldv_43623;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43623;
  }
  ldv_43623: 
#line 76
  __gu_p___7 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 76
  goto ldv_43630;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 76
  goto ldv_43630;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 76
  goto ldv_43630;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 76
  goto ldv_43630;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43630;
  }
  ldv_43630: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___5 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___8 = (void *)tmp___5;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___8) = 52U;
#line 76
  goto ldv_43637;
  case 2UL: 
#line 76
  put_unaligned_le16(49204, __gu_p___8);
#line 76
  goto ldv_43637;
  case 4UL: 
#line 76
  put_unaligned_le32(49204U, __gu_p___8);
#line 76
  goto ldv_43637;
  case 8UL: 
#line 76
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 76
  goto ldv_43637;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43637;
  }
  ldv_43637: 
#line 76
  tmp___6 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___9 = (void *)tmp___6;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 76
  goto ldv_43644;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 76
  goto ldv_43644;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 76
  goto ldv_43644;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 76
  goto ldv_43644;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43644;
  }
  ldv_43644: 
#line 76
  __len = (size_t )arg->verify_alg_len;
#line 76
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 76
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 76
  tmp___7 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___10 = (void *)tmp___7;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___10) = 51U;
#line 76
  goto ldv_43654;
  case 2UL: 
#line 76
  put_unaligned_le16(49203, __gu_p___10);
#line 76
  goto ldv_43654;
  case 4UL: 
#line 76
  put_unaligned_le32(49203U, __gu_p___10);
#line 76
  goto ldv_43654;
  case 8UL: 
#line 76
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 76
  goto ldv_43654;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43654;
  }
  ldv_43654: 
#line 76
  tmp___8 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___11 = (void *)tmp___8;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 76
  goto ldv_43661;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 76
  goto ldv_43661;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 76
  goto ldv_43661;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 76
  goto ldv_43661;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43661;
  }
  ldv_43661: 
#line 76
  __len___0 = (size_t )arg->cpu_mask_len;
#line 76
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 76
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 76
  tmp___9 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___12 = (void *)tmp___9;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___12) = 64U;
#line 76
  goto ldv_43671;
  case 2UL: 
#line 76
  put_unaligned_le16(49216, __gu_p___12);
#line 76
  goto ldv_43671;
  case 4UL: 
#line 76
  put_unaligned_le32(49216U, __gu_p___12);
#line 76
  goto ldv_43671;
  case 8UL: 
#line 76
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 76
  goto ldv_43671;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43671;
  }
  ldv_43671: 
#line 76
  tmp___10 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___13 = (void *)tmp___10;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 76
  goto ldv_43678;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 76
  goto ldv_43678;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 76
  goto ldv_43678;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 76
  goto ldv_43678;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43678;
  }
  ldv_43678: 
#line 76
  __len___1 = (size_t )arg->csums_alg_len;
#line 76
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 76
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 76
  tmp___11 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___14 = (void *)tmp___11;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___14) = 65U;
#line 76
  goto ldv_43688;
  case 2UL: 
#line 76
  put_unaligned_le16(32833, __gu_p___14);
#line 76
  goto ldv_43688;
  case 4UL: 
#line 76
  put_unaligned_le32(32833U, __gu_p___14);
#line 76
  goto ldv_43688;
  case 8UL: 
#line 76
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 76
  goto ldv_43688;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43688;
  }
  ldv_43688: 
#line 76
  tmp___12 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___15 = (void *)tmp___12;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___15) = 1U;
#line 76
  goto ldv_43695;
  case 2UL: 
#line 76
  put_unaligned_le16(1, __gu_p___15);
#line 76
  goto ldv_43695;
  case 4UL: 
#line 76
  put_unaligned_le32(1U, __gu_p___15);
#line 76
  goto ldv_43695;
  case 8UL: 
#line 76
  put_unaligned_le64(1ULL, __gu_p___15);
#line 76
  goto ldv_43695;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43695;
  }
  ldv_43695: 
#line 76
  *((char *)tags) = (char )arg->use_rle;
#line 76
  tags = tags + 1U;
#line 76
  return (tags);
}
}
#line 96
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 94
  tmp = tags;
#line 94
  tags = tags + 1;
#line 94
  __gu_p = (void *)tmp;
#line 94
  switch (2UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p) = 33U;
#line 94
  goto ldv_43783;
  case 2UL: 
#line 94
  put_unaligned_le16(33, __gu_p);
#line 94
  goto ldv_43783;
  case 4UL: 
#line 94
  put_unaligned_le32(33U, __gu_p);
#line 94
  goto ldv_43783;
  case 8UL: 
#line 94
  put_unaligned_le64(33ULL, __gu_p);
#line 94
  goto ldv_43783;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43783;
  }
  ldv_43783: 
#line 94
  tmp___0 = tags;
#line 94
  tags = tags + 1;
#line 94
  __gu_p___0 = (void *)tmp___0;
#line 94
  switch (2UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p___0) = 4U;
#line 94
  goto ldv_43790;
  case 2UL: 
#line 94
  put_unaligned_le16(4, __gu_p___0);
#line 94
  goto ldv_43790;
  case 4UL: 
#line 94
  put_unaligned_le32(4U, __gu_p___0);
#line 94
  goto ldv_43790;
  case 8UL: 
#line 94
  put_unaligned_le64(4ULL, __gu_p___0);
#line 94
  goto ldv_43790;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43790;
  }
  ldv_43790: 
#line 94
  __gu_p___1 = (void *)tags;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 94
  goto ldv_43797;
  case 2UL: 
#line 94
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 94
  goto ldv_43797;
  case 4UL: 
#line 94
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 94
  goto ldv_43797;
  case 8UL: 
#line 94
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 94
  goto ldv_43797;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43797;
  }
  ldv_43797: 
#line 94
  tags = tags + 4U;
#line 94
  return (tags);
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 139
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 143
  envp[0] = (char *)"HOME=/";
#line 143
  envp[1] = (char *)"TERM=linux";
#line 143
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 143
  envp[3] = 0;
#line 143
  envp[4] = 0;
#line 143
  envp[5] = 0;
#line 151
  argv[0] = (char *)(& usermode_helper);
#line 151
  argv[1] = cmd;
#line 151
  argv[2] = (char *)(& mb);
#line 151
  argv[3] = 0;
#line 154
  tmp = mdev_to_minor(mdev);
#line 154
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 156
  tmp___0 = get_net_conf(mdev);
#line 156
  if (tmp___0 != 0) {
#line 157
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 159
    afs = (char *)"ipv6";
#line 160
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 162
    goto ldv_44118;
    case 2: 
#line 164
    afs = (char *)"ipv4";
#line 165
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 167
    goto ldv_44118;
    default: 
#line 169
    afs = (char *)"ssocks";
#line 170
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_44118: 
#line 173
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 174
    envp[3] = (char *)(& af);
#line 175
    envp[4] = (char *)(& ad);
#line 176
    put_net_conf(mdev);
  } else {

  }
#line 179
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 181
  drbd_bcast_ev_helper(mdev, cmd);
#line 182
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 183
  if (ret != 0) {
#line 184
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 188
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 192
  if (ret < 0) {
#line 193
    ret = 0;
  } else {

  }
#line 195
  return (ret);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 205
  if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 205
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           205);
  } else {

  }
#line 207
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 207
  if (tmp___3 != 0) {
#line 208
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 209
    put_ldev(mdev);
  } else {
#line 211
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 212
    return ((enum drbd_disk_state )mdev->state.ldv_33296.pdsk);
  }
#line 215
  if ((unsigned int )fp == 2U) {
#line 216
    val.i = 0U;
#line 216
    val.ldv_33296.susp = 1U;
#line 216
    mask.i = 0U;
#line 216
    mask.ldv_33296.susp = 1U;
#line 216
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 218
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 220
  switch ((r >> 8) & 255) {
  case 3: 
#line 222
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 223
  nps = D_INCONSISTENT;
#line 224
  goto ldv_44133;
  case 4: 
#line 226
  ex_to_string = (char *)"peer was fenced";
#line 227
  nps = D_OUTDATED;
#line 228
  goto ldv_44133;
  case 5: ;
#line 230
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 232
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 233
    nps = D_OUTDATED;
  } else {
#line 235
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 236
    nps = (enum drbd_disk_state )mdev->state.ldv_33296.pdsk;
  }
#line 238
  goto ldv_44133;
  case 6: 
#line 242
  ex_to_string = (char *)"peer is active";
#line 243
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 244
  nps = D_UNKNOWN;
#line 245
  val___0.i = 0U;
#line 245
  val___0.ldv_33296.disk = 5U;
#line 245
  mask___0.i = 0U;
#line 245
  mask___0.ldv_33296.disk = 15U;
#line 245
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 246
  goto ldv_44133;
  case 7: ;
#line 248
  if ((unsigned int )fp != 2U) {
#line 249
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 250
  ex_to_string = (char *)"peer was stonithed";
#line 251
  nps = D_OUTDATED;
#line 252
  goto ldv_44133;
  default: 
#line 255
  nps = D_UNKNOWN;
#line 256
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 257
  return (nps);
  }
  ldv_44133: 
#line 260
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 262
  return (nps);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 268
  max_tries = 4;
#line 269
  r = 0;
#line 270
  try = 0;
#line 271
  forced = 0;
#line 275
  if ((unsigned int )new_role == 1U) {
#line 276
    request_ping(mdev);
  } else {

  }
#line 278
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 280
  mask.i = 0U;
#line 280
  mask.ldv_33296.role = 3U;
#line 281
  val.i = 0U;
#line 281
  val.ldv_33296.role = (unsigned char )new_role;
#line 283
  goto ldv_44155;
  ldv_44158: 
#line 284
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 288
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 289
    val.ldv_33296.pdsk = 0U;
#line 290
    mask.ldv_33296.pdsk = 0U;
#line 291
    goto ldv_44155;
  } else {

  }
#line 294
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_33296.disk <= 7 && (int )mdev->state.ldv_33296.disk > 3)) {
#line 297
    mask.ldv_33296.disk = 15U;
#line 298
    val.ldv_33296.disk = 8U;
#line 299
    forced = 1;
#line 300
    goto ldv_44155;
  } else {

  }
#line 303
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1805UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 305
    if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 305
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
             305);
    } else {

    }
#line 306
    nps = drbd_try_outdate_peer(mdev);
#line 308
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 309
      val.ldv_33296.disk = 8U;
#line 310
      mask.ldv_33296.disk = 15U;
    } else {

    }
#line 313
    val.ldv_33296.pdsk = (unsigned char )nps;
#line 314
    mask.ldv_33296.pdsk = 15U;
#line 316
    goto ldv_44155;
  } else {

  }
#line 319
  if (r == 2) {
#line 320
    goto fail;
  } else {

  }
#line 321
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 322
    nps = drbd_try_outdate_peer(mdev);
#line 324
    if (force != 0 && (unsigned int )nps > 5U) {
#line 325
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 326
      nps = D_OUTDATED;
    } else {

    }
#line 329
    mask.ldv_33296.pdsk = 15U;
#line 330
    val.ldv_33296.pdsk = (unsigned char )nps;
#line 332
    goto ldv_44155;
  } else {

  }
#line 334
  if (r == -1) {
#line 337
    tmp___3 = get_current();
#line 337
    tmp___3->state = 1L;
#line 338
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 339
    if (try < max_tries) {
#line 340
      try = max_tries + -1;
    } else {

    }
#line 341
    goto ldv_44155;
  } else {

  }
#line 343
  if (r <= 0) {
#line 344
    r = _drbd_request_state(mdev, mask, val, 6);
#line 346
    if (r <= 0) {
#line 347
      goto fail;
    } else {

    }
  } else {

  }
#line 349
  goto ldv_44157;
  ldv_44155: 
#line 283
  tmp___4 = try;
#line 283
  try = try + 1;
#line 283
  if (tmp___4 < max_tries) {
#line 284
    goto ldv_44158;
  } else {

  }
  ldv_44157: ;
#line 352
  if (r <= 0) {
#line 353
    goto fail;
  } else {

  }
#line 355
  if (forced != 0) {
#line 356
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 359
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___7 == 0) {
#line 359
    goto ldv_44159;
  } else {

  }
#line 359
  tmp___8 = get_current();
#line 359
  __wait.flags = 0U;
#line 359
  __wait.private = (void *)tmp___8;
#line 359
  __wait.func = & autoremove_wake_function;
#line 359
  __wait.task_list.next = & __wait.task_list;
#line 359
  __wait.task_list.prev = & __wait.task_list;
  ldv_44162: 
#line 359
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 359
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___9 == 0) {
#line 359
    goto ldv_44161;
  } else {

  }
#line 359
  schedule();
#line 359
  goto ldv_44162;
  ldv_44161: 
#line 359
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44159: ;
#line 361
  if ((unsigned int )new_role == 2U) {
#line 362
    set_disk_ro(mdev->vdisk, 1);
#line 363
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 363
    if (tmp___10 != 0) {
#line 364
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 365
      put_ldev(mdev);
    } else {

    }
  } else {
#line 368
    tmp___11 = get_net_conf(mdev);
#line 368
    if (tmp___11 != 0) {
#line 369
      (mdev->net_conf)->want_lose = 0U;
#line 370
      put_net_conf(mdev);
    } else {

    }
#line 372
    set_disk_ro(mdev->vdisk, 0);
#line 373
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 373
    if (tmp___12 != 0) {
#line 374
      if ((((int )mdev->state.ldv_33296.conn <= 9 || (int )mdev->state.ldv_33296.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 377
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 379
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 380
      put_ldev(mdev);
    } else {

    }
  }
#line 384
  if ((unsigned int )new_role == 2U) {
#line 384
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 384
    if (tmp___13 != 0) {
#line 385
      drbd_al_to_on_disk_bm(mdev);
#line 386
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 389
  if ((int )mdev->state.ldv_33296.conn > 8) {
#line 391
    if (forced != 0) {
#line 392
      drbd_send_uuids(mdev);
    } else {

    }
#line 393
    drbd_send_state(mdev);
  } else {

  }
#line 396
  drbd_md_sync(mdev);
#line 398
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 400
  mutex_unlock(& mdev->state_mutex);
#line 401
  return (r);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 410
  memset((void *)(& primary_args), 0, 4UL);
#line 411
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 411
  if (tmp == 0) {
#line 412
    reply->ret_code = 126;
#line 413
    return (0);
  } else {

  }
#line 416
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 419
  return (0);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 425
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 427
  return (0);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 435
  md_size_sect = 0UL;
#line 436
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 439
  bdev->md.md_size_sect = 262144U;
#line 440
  tmp = drbd_md_ss__(mdev, bdev);
#line 440
  bdev->md.md_offset = (u64 )tmp;
#line 441
  bdev->md.al_offset = 8;
#line 442
  bdev->md.bm_offset = 72;
#line 443
  goto ldv_44180;
  case -2: 
#line 446
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 446
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 447
  bdev->md.md_offset = 0ULL;
#line 448
  bdev->md.al_offset = 8;
#line 449
  bdev->md.bm_offset = 72;
#line 450
  goto ldv_44180;
  case -1: ;
  case -3: 
#line 453
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 453
  bdev->md.md_offset = (u64 )tmp___1;
#line 455
  bdev->md.al_offset = -64;
#line 457
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 458
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 459
  md_size_sect = md_size_sect >> 15;
#line 460
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 464
  md_size_sect = md_size_sect + 72UL;
#line 466
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 468
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 469
  goto ldv_44180;
  }
  ldv_44180: ;
#line 472
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 476
  units[0] = 75;
#line 476
  units[1] = 77;
#line 476
  units[2] = 71;
#line 476
  units[3] = 84;
#line 476
  units[4] = 80;
#line 476
  units[5] = 69;
#line 477
  base = 0;
#line 478
  goto ldv_44191;
  ldv_44190: 
#line 480
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 481
  base = base + 1;
  ldv_44191: ;
#line 478
  if (size > 9999ULL) {
#line 479
    goto ldv_44190;
  } else {

  }
#line 483
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 485
  return (buf);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 503
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 504
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp == 0) {
#line 504
    goto ldv_44196;
  } else {

  }
#line 504
  tmp___0 = get_current();
#line 504
  __wait.flags = 0U;
#line 504
  __wait.private = (void *)tmp___0;
#line 504
  __wait.func = & autoremove_wake_function;
#line 504
  __wait.task_list.next = & __wait.task_list;
#line 504
  __wait.task_list.prev = & __wait.task_list;
  ldv_44199: 
#line 504
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 504
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp___1 == 0) {
#line 504
    goto ldv_44198;
  } else {

  }
#line 504
  schedule();
#line 504
  goto ldv_44199;
  ldv_44198: 
#line 504
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44196: ;
#line 507
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 509
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 510
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 511
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , int force ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 528
  rv = 0;
#line 539
  drbd_suspend_io(mdev);
#line 542
  tmp = lc_try_lock(mdev->act_log);
#line 542
  if (tmp != 0) {
#line 542
    goto ldv_44215;
  } else {

  }
#line 542
  tmp___0 = get_current();
#line 542
  __wait.flags = 0U;
#line 542
  __wait.private = (void *)tmp___0;
#line 542
  __wait.func = & autoremove_wake_function;
#line 542
  __wait.task_list.next = & __wait.task_list;
#line 542
  __wait.task_list.prev = & __wait.task_list;
  ldv_44218: 
#line 542
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 542
  tmp___1 = lc_try_lock(mdev->act_log);
#line 542
  if (tmp___1 != 0) {
#line 542
    goto ldv_44217;
  } else {

  }
#line 542
  schedule();
#line 542
  goto ldv_44218;
  ldv_44217: 
#line 542
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44215: 
#line 544
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 545
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 546
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 549
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 551
  size = drbd_new_dev_size(mdev, mdev->ldev, force);
#line 553
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 553
  if (tmp___11 != size) {
#line 553
    goto _L;
  } else {
#line 553
    tmp___12 = drbd_bm_capacity(mdev);
#line 553
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 556
      err = drbd_bm_resize(mdev, size);
#line 557
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 557
      if (tmp___7 != 0L) {
#line 559
        tmp___2 = drbd_bm_capacity(mdev);
#line 559
        size = tmp___2 >> 1;
#line 560
        if (size == 0UL) {
#line 561
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 564
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 568
        rv = dev_size_error;
      } else {

      }
#line 571
      drbd_set_my_capacity(mdev, size);
#line 572
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 573
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 573
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 576
  if ((int )rv == -1) {
#line 577
    goto out;
  } else {

  }
#line 579
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 581
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 581
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 584
  if (la_size_changed != 0 || md_moved != 0) {
#line 585
    drbd_al_shrink(mdev);
#line 586
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 589
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 589
    rv = (enum determine_dev_size )tmp___16;
#line 590
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 593
  if (size > la_size) {
#line 594
    rv = grew;
  } else {

  }
#line 595
  if (size < la_size) {
#line 596
    rv = shrunk;
  } else {

  }
  out: 
#line 598
  lc_unlock(mdev->act_log);
#line 599
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 600
  drbd_resume_io(mdev);
#line 602
  return (rv);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 608
  p_size = mdev->p_size;
#line 609
  la_size = (sector_t )bdev->md.la_size_sect;
#line 611
  u_size = (sector_t )bdev->dc.disk_size;
#line 612
  size = 0UL;
#line 614
  m_size = drbd_get_max_capacity___1(bdev);
#line 616
  if ((int )mdev->state.ldv_33296.conn <= 9 && assume_peer_has_space != 0) {
#line 617
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 617
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 617
    printk("<4>%s %s: Resize while not connected was forced by the user!\n", tmp___0,
           tmp);
#line 618
    p_size = m_size;
  } else {

  }
#line 621
  if (p_size != 0UL && m_size != 0UL) {
#line 622
    __min1 = p_size;
#line 622
    __min2 = m_size;
#line 622
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 624
  if (la_size != 0UL) {
#line 625
    size = la_size;
#line 626
    if (m_size != 0UL && m_size < size) {
#line 627
      size = m_size;
    } else {

    }
#line 628
    if (p_size != 0UL && p_size < size) {
#line 629
      size = p_size;
    } else {

    }
  } else {
#line 631
    if (m_size != 0UL) {
#line 632
      size = m_size;
    } else {

    }
#line 633
    if (p_size != 0UL) {
#line 634
      size = p_size;
    } else {

    }
  }
#line 638
  if (size == 0UL) {
#line 639
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    printk("<3>%s %s: Both nodes diskless!\n", tmp___2, tmp___1);
  } else {

  }
#line 641
  if (u_size != 0UL) {
#line 642
    if (u_size > size) {
#line 643
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___4, tmp___3,
             u_size >> 1, size >> 1);
    } else {
#line 646
      size = u_size;
    }
  } else {

  }
#line 649
  return (size);
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 667
  _b = mdev->sync_conf.al_extents <= 6;
#line 667
  if (_b != 0) {
#line 667
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 667
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 667
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           667);
  } else {

  }
#line 667
  if (_b != 0) {
#line 668
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 670
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 672
    return (0);
  } else {

  }
#line 674
  in_use = 0U;
#line 675
  t = mdev->act_log;
#line 676
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 679
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 680
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 681
    return (-12);
  } else {

  }
#line 683
  spin_lock_irq(& mdev->al_lock);
#line 684
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 685
    i = 0;
#line 685
    goto ldv_44246;
    ldv_44245: 
#line 686
    e = lc_element_by_index(t, (unsigned int )i);
#line 687
    if (e->refcnt != 0U) {
#line 688
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 688
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 688
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 690
    in_use = e->refcnt + in_use;
#line 685
    i = i + 1;
    ldv_44246: ;
#line 685
    if ((unsigned int )i < t->nr_elements) {
#line 686
      goto ldv_44245;
    } else {

    }

  } else {

  }
#line 693
  if (in_use == 0U) {
#line 694
    mdev->act_log = n;
  } else {

  }
#line 695
  spin_unlock_irq(& mdev->al_lock);
#line 696
  if (in_use != 0U) {
#line 697
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 698
    lc_destroy(n);
#line 699
    return (-16);
  } else
#line 701
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 702
    lc_destroy(t);
  } else {

  }
#line 704
  drbd_md_mark_dirty(mdev);
#line 705
  return (0);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 710
  q = mdev->rq_queue;
#line 711
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 712
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 714
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) == 0U) {
#line 715
    max_seg_s = 4096U;
  } else {

  }
#line 717
  tmp = queue_max_sectors(b);
#line 717
  tmp___0 = queue_logical_block_size(b);
#line 717
  _min1 = tmp * (unsigned int )tmp___0;
#line 717
  _min2 = max_seg_s;
#line 717
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 719
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 720
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 721
  blk_queue_max_segment_size(q, max_seg_s);
#line 722
  blk_queue_logical_block_size(q, 512);
#line 723
  blk_queue_segment_boundary(q, 4095UL);
#line 724
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 726
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 727
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 729
  tmp___3 = queue_max_segment_size(q);
#line 729
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 731
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 732
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 735
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 737
  return;
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 747
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 747
  if (tmp == 0) {
#line 747
    goto ldv_44261;
  } else {

  }
#line 747
  tmp___0 = get_current();
#line 747
  __wait.flags = 0U;
#line 747
  __wait.private = (void *)tmp___0;
#line 747
  __wait.func = & autoremove_wake_function;
#line 747
  __wait.task_list.next = & __wait.task_list;
#line 747
  __wait.task_list.prev = & __wait.task_list;
  ldv_44264: 
#line 747
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 747
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 747
  if (tmp___1 == 0) {
#line 747
    goto ldv_44263;
  } else {

  }
#line 747
  schedule();
#line 747
  goto ldv_44264;
  ldv_44263: 
#line 747
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44261: 
#line 748
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 748
  if (tmp___2 == 0) {
#line 748
    goto ldv_44265;
  } else {

  }
#line 748
  tmp___3 = get_current();
#line 748
  __wait___0.flags = 0U;
#line 748
  __wait___0.private = (void *)tmp___3;
#line 748
  __wait___0.func = & autoremove_wake_function;
#line 748
  __wait___0.task_list.next = & __wait___0.task_list;
#line 748
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_44268: 
#line 748
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 748
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 748
  if (tmp___4 == 0) {
#line 748
    goto ldv_44267;
  } else {

  }
#line 748
  schedule();
#line 748
  goto ldv_44268;
  ldv_44267: 
#line 748
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_44265: 
#line 749
  drbd_thread_start(& mdev->worker);
#line 750
  return;
}
}
#line 755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 757
  spin_lock_irq(& mdev->req_lock);
#line 758
  if (((unsigned int )*((unsigned char *)mdev + 1805UL) == 0U && (unsigned int )*((unsigned short *)mdev + 902UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 761
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 762
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 764
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 765
  spin_unlock_irq(& mdev->req_lock);
#line 766
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 767
  return;
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned short tmp___29 ;
  struct page *page ;
  struct page *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  char const   *tmp___37 ;
  char const   *tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  int tmp___42 ;
  sector_t tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 778
  nbc = 0;
#line 780
  resync_lru = 0;
#line 783
  cp_discovered = 0;
#line 786
  drbd_reconfig_start(mdev);
#line 789
  if ((int )mdev->state.ldv_33296.disk > 0) {
#line 790
    retcode = ERR_DISK_CONFIGURED;
#line 791
    goto fail;
  } else {

  }
#line 795
  tmp = kzalloc___1(408UL, 208U);
#line 795
  nbc = (struct drbd_backing_dev *)tmp;
#line 796
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 797
    retcode = ERR_NOMEM;
#line 798
    goto fail;
  } else {

  }
#line 801
  nbc->dc.disk_size = 0ULL;
#line 802
  nbc->dc.on_io_error = 0;
#line 803
  nbc->dc.fencing = 0;
#line 804
  nbc->dc.max_bio_bvecs = 0;
#line 806
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 806
  if (tmp___0 == 0) {
#line 807
    retcode = ERR_MANDATORY_TAG;
#line 808
    goto fail;
  } else {

  }
#line 811
  if (nbc->dc.meta_dev_idx < -3) {
#line 812
    retcode = ERR_MD_IDX_INVALID;
#line 813
    goto fail;
  } else {

  }
#line 816
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 817
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 817
  if (tmp___4 != 0L) {
#line 818
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 818
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 820
    nbc->lo_file = 0;
#line 821
    retcode = ERR_OPEN_DISK;
#line 822
    goto fail;
  } else {

  }
#line 825
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 827
  if (((int )inode->i_mode & 61440) != 24576) {
#line 828
    retcode = ERR_DISK_NOT_BDEV;
#line 829
    goto fail;
  } else {

  }
#line 832
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 833
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 833
  if (tmp___8 != 0L) {
#line 834
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 834
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 836
    nbc->md_file = 0;
#line 837
    retcode = ERR_OPEN_MD_DISK;
#line 838
    goto fail;
  } else {

  }
#line 841
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 843
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 844
    retcode = ERR_MD_NOT_BDEV;
#line 845
    goto fail;
  } else {

  }
#line 848
  nbc->backing_bdev = inode->ldv_22009.i_bdev;
#line 849
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 849
  if (tmp___9 != 0) {
#line 850
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 855
    retcode = ERR_BDCLAIM_DISK;
#line 856
    goto fail;
  } else {

  }
#line 859
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 862
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 863
    retcode = ERR_NOMEM;
#line 864
    goto release_bdev_fail;
  } else {

  }
#line 874
  nbc->md_bdev = inode2->ldv_22009.i_bdev;
#line 875
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 875
  if (tmp___10 != 0) {
#line 877
    retcode = ERR_BDCLAIM_MD_DISK;
#line 878
    goto release_bdev_fail;
  } else {

  }
#line 881
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 884
    retcode = ERR_MD_IDX_INVALID;
#line 885
    goto release_bdev2_fail;
  } else {

  }
#line 889
  drbd_md_set_sector_offsets(mdev, nbc);
#line 891
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 891
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 892
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 892
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 895
    retcode = ERR_DISK_TO_SMALL;
#line 896
    goto release_bdev2_fail;
  } else {

  }
#line 899
  if (nbc->dc.meta_dev_idx < 0) {
#line 900
    max_possible_sectors = 34359738368UL;
#line 902
    min_md_device_sectors = 2048UL;
  } else {
#line 904
    max_possible_sectors = 8587575296UL;
#line 905
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 908
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 908
  if (tmp___17 < min_md_device_sectors) {
#line 909
    retcode = ERR_MD_DISK_TO_SMALL;
#line 910
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 910
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 910
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 913
    goto release_bdev2_fail;
  } else {

  }
#line 918
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 918
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 918
  if (tmp___18 < tmp___19) {
#line 920
    retcode = ERR_DISK_TO_SMALL;
#line 921
    goto release_bdev2_fail;
  } else {

  }
#line 924
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 926
  if (nbc->known_size > max_possible_sectors) {
#line 927
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 930
    if (nbc->dc.meta_dev_idx >= 0) {
#line 931
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 935
  drbd_suspend_io(mdev);
#line 937
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 937
  if (tmp___24 == 0) {
#line 937
    goto ldv_44293;
  } else {

  }
#line 937
  tmp___25 = get_current();
#line 937
  __wait.flags = 0U;
#line 937
  __wait.private = (void *)tmp___25;
#line 937
  __wait.func = & autoremove_wake_function;
#line 937
  __wait.task_list.next = & __wait.task_list;
#line 937
  __wait.task_list.prev = & __wait.task_list;
  ldv_44296: 
#line 937
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 937
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 937
  if (tmp___26 == 0) {
#line 937
    goto ldv_44295;
  } else {

  }
#line 937
  schedule();
#line 937
  goto ldv_44296;
  ldv_44295: 
#line 937
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44293: 
#line 939
  drbd_flush_workqueue(mdev);
#line 941
  val.i = 0U;
#line 941
  val.ldv_33296.disk = 1U;
#line 941
  mask.i = 0U;
#line 941
  mask.ldv_33296.disk = 15U;
#line 941
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 941
  retcode = (enum drbd_ret_codes )tmp___27;
#line 942
  drbd_resume_io(mdev);
#line 943
  if ((unsigned int )retcode == 0U) {
#line 944
    goto release_bdev2_fail;
  } else {

  }
#line 946
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 946
  if (tmp___28 == 0) {
#line 947
    goto force_diskless;
  } else {

  }
#line 949
  drbd_md_set_sector_offsets(mdev, nbc);
#line 952
  tmp___29 = bdev_logical_block_size(nbc->md_bdev);
#line 952
  logical_block_size = (int )tmp___29;
#line 953
  if (logical_block_size == 0) {
#line 954
    logical_block_size = 512;
  } else {

  }
#line 956
  if (logical_block_size != 512) {
#line 957
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 958
      tmp___30 = alloc_pages(16U, 0U);
#line 958
      page = tmp___30;
#line 959
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 960
        goto force_diskless_dec;
      } else {

      }
#line 962
      tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
      tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___32,
             tmp___31, logical_block_size, 512);
#line 964
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___34,
             tmp___33);
#line 966
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 970
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 971
    tmp___35 = drbd_bm_init(mdev);
#line 971
    if (tmp___35 != 0) {
#line 972
      retcode = ERR_NOMEM;
#line 973
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 977
  tmp___36 = drbd_md_read(mdev, nbc);
#line 977
  retcode = (enum drbd_ret_codes )tmp___36;
#line 978
  if ((unsigned int )retcode != 101U) {
#line 979
    goto force_diskless_dec;
  } else {

  }
#line 981
  if (((int )mdev->state.ldv_33296.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 984
    tmp___37 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    tmp___38 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___38,
           tmp___37, mdev->ed_uuid);
#line 986
    retcode = ERR_DATA_NOT_CURRENT;
#line 987
    goto force_diskless_dec;
  } else {

  }
#line 991
  tmp___39 = drbd_check_al_size(mdev);
#line 991
  if (tmp___39 != 0) {
#line 992
    retcode = ERR_NOMEM;
#line 993
    goto force_diskless_dec;
  } else {

  }
#line 997
  tmp___42 = drbd_md_test_flag(nbc, 1);
#line 997
  if (tmp___42 != 0) {
#line 997
    tmp___43 = drbd_new_dev_size(mdev, nbc, 0);
#line 997
    if ((unsigned long long )tmp___43 < nbc->md.la_size_sect) {
#line 999
      tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___41, tmp___40);
#line 1000
      retcode = ERR_DISK_TO_SMALL;
#line 1001
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1004
  tmp___44 = drbd_al_read_log(mdev, nbc);
#line 1004
  if (tmp___44 == 0) {
#line 1005
    retcode = ERR_IO_MD_DISK;
#line 1006
    goto force_diskless_dec;
  } else {

  }
#line 1011
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1012
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1014
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1020
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1020
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1020
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1020
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1020);
  } else {

  }
#line 1021
  mdev->ldev = nbc;
#line 1022
  mdev->resync = resync_lru;
#line 1023
  nbc = 0;
#line 1024
  resync_lru = 0;
#line 1026
  mdev->write_ordering = WO_bio_barrier;
#line 1027
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1029
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1029
  if (tmp___47 != 0) {
#line 1030
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1032
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1034
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1034
  if (tmp___48 != 0) {
#line 1035
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1036
    cp_discovered = 1;
  } else {

  }
#line 1039
  mdev->send_cnt = 0U;
#line 1040
  mdev->recv_cnt = 0U;
#line 1041
  mdev->read_cnt = 0U;
#line 1042
  mdev->writ_cnt = 0U;
#line 1044
  drbd_setup_queue_param(mdev, 32768U);
#line 1060
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1061
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 1061
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1061
    if (tmp___49 != 0) {
#line 1061
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1061
      if (tmp___50 == 0) {
#line 1064
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1066
  dd = drbd_determin_dev_size(mdev, 0);
#line 1067
  if ((int )dd == -1) {
#line 1068
    retcode = ERR_NOMEM_BITMAP;
#line 1069
    goto force_diskless_dec;
  } else
#line 1070
  if ((int )dd == 2) {
#line 1071
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1073
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1073
  if (tmp___55 != 0) {
#line 1074
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1076
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1076
    if (tmp___53 != 0) {
#line 1077
      retcode = ERR_IO_MD_DISK;
#line 1078
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1081
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1081
    if (tmp___54 < 0) {
#line 1082
      retcode = ERR_IO_MD_DISK;
#line 1083
      goto force_diskless_dec;
    } else {

    }
  }
#line 1087
  if (cp_discovered != 0) {
#line 1088
    drbd_al_apply_to_bm(mdev);
#line 1089
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1092
  spin_lock_irq(& mdev->req_lock);
#line 1093
  os = mdev->state;
#line 1094
  ns.i = os.i;
#line 1100
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1100
  if (tmp___57 != 0) {
#line 1101
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1101
    if (tmp___56 != 0) {
#line 1102
      ns.ldv_33296.disk = 7U;
    } else {
#line 1104
      ns.ldv_33296.disk = 5U;
    }
  } else {
#line 1106
    ns.ldv_33296.disk = 4U;
  }
#line 1109
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1109
  if (tmp___58 != 0) {
#line 1110
    ns.ldv_33296.pdsk = 5U;
  } else {

  }
#line 1112
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1114
    ns.ldv_33296.disk = 8U;
  } else {

  }
#line 1123
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U) {
#line 1124
    mdev->new_state_tmp.i = ns.i;
#line 1125
    ns.i = os.i;
#line 1126
    ns.ldv_33296.disk = 3U;
  } else {

  }
#line 1129
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1130
  ns = mdev->state;
#line 1131
  spin_unlock_irq(& mdev->req_lock);
#line 1133
  if (rv <= 0) {
#line 1134
    goto force_diskless_dec;
  } else {

  }
#line 1136
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 1137
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1139
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1141
  drbd_md_mark_dirty(mdev);
#line 1142
  drbd_md_sync(mdev);
#line 1144
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1145
  put_ldev(mdev);
#line 1146
  reply->ret_code = (int )retcode;
#line 1147
  drbd_reconfig_done(mdev);
#line 1148
  return (0);
  force_diskless_dec: 
#line 1151
  put_ldev(mdev);
  force_diskless: 
#line 1153
  val___0.i = 0U;
#line 1153
  val___0.ldv_33296.disk = 0U;
#line 1153
  mask___0.i = 0U;
#line 1153
  mask___0.ldv_33296.disk = 15U;
#line 1153
  drbd_force_state(mdev, mask___0, val___0);
#line 1154
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1156
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1157
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1159
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1160
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1162
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1163
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1164
      fput(nbc->lo_file);
    } else {

    }
#line 1165
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1166
      fput(nbc->md_file);
    } else {

    }
#line 1167
    kfree((void const   *)nbc);
  } else {

  }
#line 1169
  lc_destroy(resync_lru);
#line 1171
  reply->ret_code = (int )retcode;
#line 1172
  drbd_reconfig_done(mdev);
#line 1173
  return (0);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1179
  val.i = 0U;
#line 1179
  val.ldv_33296.disk = 0U;
#line 1179
  mask.i = 0U;
#line 1179
  mask.ldv_33296.disk = 15U;
#line 1179
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1180
  return (0);
}
}
#line 1183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1188
  new_conf = 0;
#line 1189
  tfm = 0;
#line 1190
  integrity_w_tfm = 0;
#line 1191
  integrity_r_tfm = 0;
#line 1192
  new_tl_hash = 0;
#line 1193
  new_ee_hash = 0;
#line 1196
  int_dig_out = 0;
#line 1197
  int_dig_in = 0;
#line 1198
  int_dig_vv = 0;
#line 1201
  drbd_reconfig_start(mdev);
#line 1203
  if ((int )mdev->state.ldv_33296.conn > 0) {
#line 1204
    retcode = ERR_NET_CONFIGURED;
#line 1205
    goto fail;
  } else {

  }
#line 1209
  tmp = kmalloc___4(532UL, 208U);
#line 1209
  new_conf = (struct net_conf *)tmp;
#line 1210
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1211
    retcode = ERR_NOMEM;
#line 1212
    goto fail;
  } else {

  }
#line 1215
  memset((void *)new_conf, 0, 532UL);
#line 1216
  new_conf->timeout = 60;
#line 1217
  new_conf->try_connect_int = 10;
#line 1218
  new_conf->ping_int = 10;
#line 1219
  new_conf->max_epoch_size = 2048;
#line 1220
  new_conf->max_buffers = 2048;
#line 1221
  new_conf->unplug_watermark = 128;
#line 1222
  new_conf->sndbuf_size = 0;
#line 1223
  new_conf->rcvbuf_size = 0;
#line 1224
  new_conf->ko_count = 0;
#line 1225
  new_conf->after_sb_0p = 0;
#line 1226
  new_conf->after_sb_1p = 0;
#line 1227
  new_conf->after_sb_2p = 0;
#line 1228
  new_conf->want_lose = 0U;
#line 1229
  new_conf->two_primaries = 0U;
#line 1230
  new_conf->wire_protocol = 3;
#line 1231
  new_conf->ping_timeo = 5;
#line 1232
  new_conf->rr_conflict = 0;
#line 1234
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1234
  if (tmp___0 == 0) {
#line 1235
    retcode = ERR_MANDATORY_TAG;
#line 1236
    goto fail;
  } else {

  }
#line 1239
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1241
    retcode = ERR_NOT_PROTO_C;
#line 1242
    goto fail;
  } else {

  }
#line 1245
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1246
    retcode = ERR_DISCARD;
#line 1247
    goto fail;
  } else {

  }
#line 1250
  retcode = NO_ERROR;
#line 1252
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1253
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1254
  i = 0;
#line 1254
  goto ldv_44342;
  ldv_44341: 
#line 1255
  odev = minor_to_mdev((unsigned int )i);
#line 1256
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1257
    goto ldv_44340;
  } else {

  }
#line 1258
  tmp___3 = get_net_conf(odev);
#line 1258
  if (tmp___3 != 0) {
#line 1259
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1260
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1260
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1260
      if (tmp___1 == 0) {
#line 1262
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1264
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1265
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1265
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1265
      if (tmp___2 == 0) {
#line 1267
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1269
    put_net_conf(odev);
#line 1270
    if ((unsigned int )retcode != 101U) {
#line 1271
      goto fail;
    } else {

    }
  } else {

  }
  ldv_44340: 
#line 1254
  i = i + 1;
  ldv_44342: ;
#line 1254
  if ((unsigned int )i < minor_count) {
#line 1255
    goto ldv_44341;
  } else {

  }

#line 1275
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1276
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1278
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1279
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1279
    if (tmp___4 != 0L) {
#line 1280
      tfm = 0;
#line 1281
      retcode = ERR_AUTH_ALG;
#line 1282
      goto fail;
    } else {

    }
#line 1285
    tmp___5 = crypto_hash_tfm(tfm);
#line 1285
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1285
    if (tmp___6 == 0) {
#line 1286
      retcode = ERR_AUTH_ALG_ND;
#line 1287
      goto fail;
    } else {

    }
  } else {

  }
#line 1291
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1292
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1293
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1293
    if (tmp___7 != 0L) {
#line 1294
      integrity_w_tfm = 0;
#line 1295
      retcode = ERR_INTEGRITY_ALG;
#line 1296
      goto fail;
    } else {

    }
#line 1299
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1299
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1299
    if (tmp___9 == 0) {
#line 1300
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1301
      goto fail;
    } else {

    }
#line 1304
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1305
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1305
    if (tmp___10 != 0L) {
#line 1306
      integrity_r_tfm = 0;
#line 1307
      retcode = ERR_INTEGRITY_ALG;
#line 1308
      goto fail;
    } else {

    }
  } else {

  }
#line 1312
  ns = new_conf->max_epoch_size / 8;
#line 1313
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1314
    tmp___11 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1314
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1315
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1316
      retcode = ERR_NOMEM;
#line 1317
      goto fail;
    } else {

    }
  } else {

  }
#line 1321
  ns = new_conf->max_buffers / 8;
#line 1322
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1323
    tmp___12 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1323
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1324
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1325
      retcode = ERR_NOMEM;
#line 1326
      goto fail;
    } else {

    }
  } else {

  }
#line 1330
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1332
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1333
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1333
    i = (int )tmp___13;
#line 1334
    int_dig_out = kmalloc___4((size_t )i, 208U);
#line 1335
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1336
      retcode = ERR_NOMEM;
#line 1337
      goto fail;
    } else {

    }
#line 1339
    int_dig_in = kmalloc___4((size_t )i, 208U);
#line 1340
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1341
      retcode = ERR_NOMEM;
#line 1342
      goto fail;
    } else {

    }
#line 1344
    int_dig_vv = kmalloc___4((size_t )i, 208U);
#line 1345
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1346
      retcode = ERR_NOMEM;
#line 1347
      goto fail;
    } else {

    }
  } else {

  }
#line 1351
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1352
    tmp___14 = drbd_bm_init(mdev);
#line 1352
    if (tmp___14 != 0) {
#line 1353
      retcode = ERR_NOMEM;
#line 1354
      goto fail;
    } else {

    }
  } else {

  }
#line 1358
  spin_lock_irq(& mdev->req_lock);
#line 1359
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1360
    retcode = ERR_NET_CONFIGURED;
#line 1361
    spin_unlock_irq(& mdev->req_lock);
#line 1362
    goto fail;
  } else {

  }
#line 1364
  mdev->net_conf = new_conf;
#line 1366
  mdev->send_cnt = 0U;
#line 1367
  mdev->recv_cnt = 0U;
#line 1369
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1370
    kfree((void const   *)mdev->tl_hash);
#line 1371
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1372
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1375
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1376
    kfree((void const   *)mdev->ee_hash);
#line 1377
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1378
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1381
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1382
  mdev->cram_hmac_tfm = tfm;
#line 1384
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1385
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1387
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1388
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1390
  kfree((void const   *)mdev->int_dig_out);
#line 1391
  kfree((void const   *)mdev->int_dig_in);
#line 1392
  kfree((void const   *)mdev->int_dig_vv);
#line 1393
  mdev->int_dig_out = int_dig_out;
#line 1394
  mdev->int_dig_in = int_dig_in;
#line 1395
  mdev->int_dig_vv = int_dig_vv;
#line 1396
  spin_unlock_irq(& mdev->req_lock);
#line 1398
  val.i = 0U;
#line 1398
  val.ldv_33296.conn = 2U;
#line 1398
  mask.i = 0U;
#line 1398
  mask.ldv_33296.conn = 31U;
#line 1398
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1398
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1400
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1401
  reply->ret_code = (int )retcode;
#line 1402
  drbd_reconfig_done(mdev);
#line 1403
  return (0);
  fail: 
#line 1406
  kfree((void const   *)int_dig_out);
#line 1407
  kfree((void const   *)int_dig_in);
#line 1408
  kfree((void const   *)int_dig_vv);
#line 1409
  crypto_free_hash(tfm);
#line 1410
  crypto_free_hash(integrity_w_tfm);
#line 1411
  crypto_free_hash(integrity_r_tfm);
#line 1412
  kfree((void const   *)new_tl_hash);
#line 1413
  kfree((void const   *)new_ee_hash);
#line 1414
  kfree((void const   *)new_conf);
#line 1416
  reply->ret_code = (int )retcode;
#line 1417
  drbd_reconfig_done(mdev);
#line 1418
  return (0);
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1426
  val.i = 0U;
#line 1426
  val.ldv_33296.conn = 1U;
#line 1426
  mask.i = 0U;
#line 1426
  mask.ldv_33296.conn = 31U;
#line 1426
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1428
  if (retcode == 2) {
#line 1429
    goto done;
  } else
#line 1430
  if (retcode == -9) {
#line 1431
    goto done;
  } else
#line 1432
  if (retcode == -7) {
#line 1435
    val___0.i = 0U;
#line 1435
    val___0.ldv_33296.conn = 1U;
#line 1435
    val___0.ldv_33296.pdsk = 5U;
#line 1434
    mask___0.i = 0U;
#line 1434
    mask___0.ldv_33296.conn = 31U;
#line 1435
    mask___0.ldv_33296.pdsk = 15U;
#line 1435
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1436
  if (retcode == -10) {
#line 1439
    val___1.i = 0U;
#line 1439
    val___1.ldv_33296.conn = 1U;
#line 1439
    val___1.ldv_33296.disk = 5U;
#line 1438
    mask___1.i = 0U;
#line 1438
    mask___1.ldv_33296.conn = 31U;
#line 1439
    mask___1.ldv_33296.disk = 15U;
#line 1439
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1441
    if (retcode == -11 || retcode == -16) {
#line 1442
      val___2.i = 0U;
#line 1442
      val___2.ldv_33296.conn = 1U;
#line 1442
      mask___2.i = 0U;
#line 1442
      mask___2.ldv_33296.conn = 31U;
#line 1442
      drbd_force_state(mdev, mask___2, val___2);
#line 1443
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1447
  if (retcode <= 0) {
#line 1448
    goto fail;
  } else {

  }
#line 1450
  __ret = 0;
#line 1450
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U) {
#line 1450
    tmp = get_current();
#line 1450
    __wait.flags = 0U;
#line 1450
    __wait.private = (void *)tmp;
#line 1450
    __wait.func = & autoremove_wake_function;
#line 1450
    __wait.task_list.next = & __wait.task_list;
#line 1450
    __wait.task_list.prev = & __wait.task_list;
    ldv_44376: 
#line 1450
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1450
    if ((unsigned int )*((unsigned short *)mdev + 902UL) != 16U) {
#line 1450
      goto ldv_44374;
    } else {

    }
#line 1450
    tmp___0 = get_current();
#line 1450
    tmp___1 = signal_pending(tmp___0);
#line 1450
    if (tmp___1 == 0) {
#line 1450
      schedule();
#line 1450
      goto ldv_44375;
    } else {

    }
#line 1450
    __ret = -512;
#line 1450
    goto ldv_44374;
    ldv_44375: ;
#line 1450
    goto ldv_44376;
    ldv_44374: 
#line 1450
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1450
  if (__ret != 0) {
#line 1454
    retcode = 129;
#line 1455
    goto fail;
  } else {

  }
  done: 
#line 1459
  retcode = 101;
  fail: 
#line 1461
  drbd_md_sync(mdev);
#line 1462
  reply->ret_code = retcode;
#line 1463
  return (0);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1470
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1471
  if ((int )mdev->state.ldv_33296.role != (int )mdev->state.ldv_33296.peer) {
#line 1472
    iass = (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U;
  } else {
#line 1474
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1476
  if (iass != 0) {
#line 1477
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1479
    val.i = 0U;
#line 1479
    val.ldv_33296.conn = 15U;
#line 1479
    mask.i = 0U;
#line 1479
    mask.ldv_33296.conn = 31U;
#line 1479
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1481
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  int ldsc ;
  enum determine_dev_size dd ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1486
  retcode = 101;
#line 1487
  ldsc = 0;
#line 1490
  memset((void *)(& rs), 0, 16UL);
#line 1491
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1491
  if (tmp == 0) {
#line 1492
    retcode = 126;
#line 1493
    goto fail;
  } else {

  }
#line 1496
  if ((int )mdev->state.ldv_33296.conn > 10) {
#line 1497
    retcode = 130;
#line 1498
    goto fail;
  } else {

  }
#line 1501
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1804UL) == 8U) {
#line 1503
    retcode = 131;
#line 1504
    goto fail;
  } else {

  }
#line 1507
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1507
  if (tmp___0 == 0) {
#line 1508
    retcode = 138;
#line 1509
    goto fail;
  } else {

  }
#line 1512
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1512
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1513
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1514
    ldsc = 1;
  } else {

  }
#line 1517
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1518
  dd = drbd_determin_dev_size(mdev, (int )rs.resize_force);
#line 1519
  drbd_md_sync(mdev);
#line 1520
  put_ldev(mdev);
#line 1521
  if ((int )dd == -1) {
#line 1522
    retcode = 140;
#line 1523
    goto fail;
  } else {

  }
#line 1526
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && ((int )dd != 0 || ldsc != 0)) {
#line 1527
    if ((int )dd == 2) {
#line 1528
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1530
    drbd_send_uuids(mdev);
#line 1531
    drbd_send_sizes(mdev, 1);
  } else {

  }
  fail: 
#line 1535
  reply->ret_code = retcode;
#line 1536
  return (0);
}
}
#line 1539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1542
  retcode = 101;
#line 1546
  verify_tfm = 0;
#line 1547
  csums_tfm = 0;
#line 1551
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1551
  if (tmp) {
#line 1551
    tmp___0 = 0;
  } else {
#line 1551
    tmp___0 = 1;
  }
#line 1551
  if (tmp___0) {
#line 1552
    retcode = 122;
#line 1553
    goto fail;
  } else {

  }
#line 1556
  if ((nlp->flags & 2) != 0) {
#line 1557
    memset((void *)(& sc), 0, 188UL);
#line 1558
    sc.rate = 250;
#line 1559
    sc.after = -1;
#line 1560
    sc.al_extents = 127;
  } else {
#line 1562
    __len = 188UL;
#line 1562
    if (__len > 63UL) {
#line 1562
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1562
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1564
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1564
  if (tmp___1 == 0) {
#line 1565
    retcode = 126;
#line 1566
    goto fail;
  } else {

  }
#line 1570
  rsr = (((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 336U;
#line 1575
  if (rsr != 0) {
#line 1575
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1575
    if (tmp___2 != 0) {
#line 1576
      retcode = 148;
#line 1577
      goto fail;
    } else {

    }
  } else {

  }
#line 1580
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1581
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1582
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1582
    if (tmp___3 != 0L) {
#line 1583
      csums_tfm = 0;
#line 1584
      retcode = 144;
#line 1585
      goto fail;
    } else {

    }
#line 1588
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1588
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1588
    if (tmp___5 == 0) {
#line 1589
      retcode = 145;
#line 1590
      goto fail;
    } else {

    }
  } else {

  }
#line 1595
  ovr = (unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U;
#line 1597
  if (ovr != 0) {
#line 1598
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1598
    if (tmp___6 != 0) {
#line 1599
      retcode = 149;
#line 1600
      goto fail;
    } else {

    }
  } else {

  }
#line 1604
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1605
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1606
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1606
    if (tmp___7 != 0L) {
#line 1607
      verify_tfm = 0;
#line 1608
      retcode = 146;
#line 1609
      goto fail;
    } else {

    }
#line 1612
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1612
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1612
    if (tmp___9 == 0) {
#line 1613
      retcode = 147;
#line 1614
      goto fail;
    } else {

    }
  } else {

  }
#line 1619
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1620
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1622
    if (err != 0) {
#line 1623
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1623
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1623
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1624
      retcode = 143;
#line 1625
      goto fail;
    } else {

    }
  } else {

  }
#line 1629
  _b = sc.rate <= 0;
#line 1629
  if (_b != 0) {
#line 1629
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1629
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1629
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1629);
  } else {

  }
#line 1629
  if (_b != 0) {
#line 1629
    sc.rate = 1;
  } else {

  }
#line 1630
  _b___0 = sc.al_extents <= 6;
#line 1630
  if (_b___0 != 0) {
#line 1630
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1630
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1630
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1630);
  } else {

  }
#line 1630
  if (_b___0 != 0) {
#line 1630
    sc.al_extents = 127;
  } else {

  }
#line 1632
  if (sc.al_extents > 3843) {
#line 1633
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1633
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1633
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1634
    sc.al_extents = 3843;
  } else {

  }
#line 1641
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1642
  if (retcode != 101) {
#line 1643
    goto fail;
  } else {

  }
#line 1647
  spin_lock(& mdev->peer_seq_lock);
#line 1648
  mdev->sync_conf = sc;
#line 1650
  if (rsr == 0) {
#line 1651
    crypto_free_hash(mdev->csums_tfm);
#line 1652
    mdev->csums_tfm = csums_tfm;
#line 1653
    csums_tfm = 0;
  } else {

  }
#line 1656
  if (ovr == 0) {
#line 1657
    crypto_free_hash(mdev->verify_tfm);
#line 1658
    mdev->verify_tfm = verify_tfm;
#line 1659
    verify_tfm = 0;
  } else {

  }
#line 1661
  spin_unlock(& mdev->peer_seq_lock);
#line 1663
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1663
  if (tmp___21 != 0) {
#line 1664
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1664
    if (tmp___18 != 0) {
#line 1664
      goto ldv_44418;
    } else {

    }
#line 1664
    tmp___19 = get_current();
#line 1664
    __wait.flags = 0U;
#line 1664
    __wait.private = (void *)tmp___19;
#line 1664
    __wait.func = & autoremove_wake_function;
#line 1664
    __wait.task_list.next = & __wait.task_list;
#line 1664
    __wait.task_list.prev = & __wait.task_list;
    ldv_44421: 
#line 1664
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1664
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1664
    if (tmp___20 != 0) {
#line 1664
      goto ldv_44420;
    } else {

    }
#line 1664
    schedule();
#line 1664
    goto ldv_44421;
    ldv_44420: 
#line 1664
    finish_wait(& mdev->al_wait, & __wait);
    ldv_44418: 
#line 1665
    drbd_al_shrink(mdev);
#line 1666
    err = drbd_check_al_size(mdev);
#line 1667
    lc_unlock(mdev->act_log);
#line 1668
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1670
    put_ldev(mdev);
#line 1671
    drbd_md_sync(mdev);
#line 1673
    if (err != 0) {
#line 1674
      retcode = 122;
#line 1675
      goto fail;
    } else {

    }
  } else {

  }
#line 1679
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1680
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1682
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1682
  if (tmp___22) {
#line 1682
    tmp___23 = 0;
  } else {
#line 1682
    tmp___23 = 1;
  }
#line 1682
  if (tmp___23) {
#line 1683
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1684
    drbd_calc_cpu_mask(mdev);
#line 1685
    mdev->receiver.reset_cpu_mask = 1;
#line 1686
    mdev->asender.reset_cpu_mask = 1;
#line 1687
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1690
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1692
  free_cpumask_var(new_cpu_mask);
#line 1693
  crypto_free_hash(csums_tfm);
#line 1694
  crypto_free_hash(verify_tfm);
#line 1695
  reply->ret_code = retcode;
#line 1696
  return (0);
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1704
  val.i = 0U;
#line 1704
  val.ldv_33296.conn = 12U;
#line 1704
  mask.i = 0U;
#line 1704
  mask.ldv_33296.conn = 31U;
#line 1704
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1706
  if (retcode <= 0 && retcode != -15) {
#line 1707
    val___0.i = 0U;
#line 1707
    val___0.ldv_33296.conn = 12U;
#line 1707
    mask___0.i = 0U;
#line 1707
    mask___0.ldv_33296.conn = 31U;
#line 1707
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1709
  goto ldv_44444;
  ldv_44443: 
#line 1710
  spin_lock_irq(& mdev->req_lock);
#line 1711
  if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 1712
    __ns.i = mdev->state.i;
#line 1712
    __ns.ldv_33296.disk = 4U;
#line 1712
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1713
  spin_unlock_irq(& mdev->req_lock);
#line 1715
  if (retcode != -15) {
#line 1716
    goto ldv_44438;
  } else {

  }
#line 1718
  val___1.i = 0U;
#line 1718
  val___1.ldv_33296.conn = 12U;
#line 1718
  mask___1.i = 0U;
#line 1718
  mask___1.ldv_33296.conn = 31U;
#line 1718
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_44444: ;
#line 1709
  if (retcode == -15) {
#line 1710
    goto ldv_44443;
  } else {

  }
  ldv_44438: 
#line 1721
  reply->ret_code = retcode;
#line 1722
  return (0);
}
}
#line 1725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1729
  val.i = 0U;
#line 1729
  val.ldv_33296.conn = 11U;
#line 1729
  mask.i = 0U;
#line 1729
  mask.ldv_33296.conn = 31U;
#line 1729
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1731
  return (0);
}
}
#line 1734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1737
  retcode = 101;
#line 1739
  val.i = 0U;
#line 1739
  val.ldv_33296.user_isp = 1U;
#line 1739
  mask.i = 0U;
#line 1739
  mask.ldv_33296.user_isp = 1U;
#line 1739
  tmp = drbd_request_state(mdev, mask, val);
#line 1739
  if (tmp == 2) {
#line 1740
    retcode = 134;
  } else {

  }
#line 1742
  reply->ret_code = retcode;
#line 1743
  return (0);
}
}
#line 1746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1749
  retcode = 101;
#line 1751
  val.i = 0U;
#line 1751
  val.ldv_33296.user_isp = 0U;
#line 1751
  mask.i = 0U;
#line 1751
  mask.ldv_33296.user_isp = 1U;
#line 1751
  tmp = drbd_request_state(mdev, mask, val);
#line 1751
  if (tmp == 2) {
#line 1752
    retcode = 135;
  } else {

  }
#line 1754
  reply->ret_code = retcode;
#line 1755
  return (0);
}
}
#line 1758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1761
  val.i = 0U;
#line 1761
  val.ldv_33296.susp = 1U;
#line 1761
  mask.i = 0U;
#line 1761
  mask.ldv_33296.susp = 1U;
#line 1761
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1763
  return (0);
}
}
#line 1766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1769
  val.i = 0U;
#line 1769
  val.ldv_33296.susp = 0U;
#line 1769
  mask.i = 0U;
#line 1769
  mask.ldv_33296.susp = 1U;
#line 1769
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1770
  return (0);
}
}
#line 1773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1776
  val.i = 0U;
#line 1776
  val.ldv_33296.disk = 5U;
#line 1776
  mask.i = 0U;
#line 1776
  mask.ldv_33296.disk = 15U;
#line 1776
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1777
  return (0);
}
}
#line 1780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1785
  tl = (unsigned short *)(& reply->tag_list);
#line 1787
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1787
  if (tmp != 0) {
#line 1788
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1789
    put_ldev(mdev);
  } else {

  }
#line 1792
  tmp___0 = get_net_conf(mdev);
#line 1792
  if (tmp___0 != 0) {
#line 1793
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1794
    put_net_conf(mdev);
  } else {

  }
#line 1796
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1798
  tmp___1 = tl;
#line 1798
  tl = tl + 1;
#line 1798
  __gu_p = (void *)tmp___1;
#line 1798
  switch (2UL) {
  case 1UL: 
#line 1798
  *((u8 *)__gu_p) = 0U;
#line 1798
  goto ldv_44509;
  case 2UL: 
#line 1798
  put_unaligned_le16(0, __gu_p);
#line 1798
  goto ldv_44509;
  case 4UL: 
#line 1798
  put_unaligned_le32(0U, __gu_p);
#line 1798
  goto ldv_44509;
  case 8UL: 
#line 1798
  put_unaligned_le64(0ULL, __gu_p);
#line 1798
  goto ldv_44509;
  default: 
#line 1798
  __bad_unaligned_access_size();
#line 1798
  goto ldv_44509;
  }
  ldv_44509: ;
#line 1800
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1806
  tl = (unsigned short *)(& reply->tag_list);
#line 1807
  s = mdev->state;
#line 1811
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1814
  if ((int )s.ldv_33296.conn > 15 && (int )s.ldv_33296.conn <= 21) {
#line 1815
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1815
    if (tmp != 0) {
#line 1816
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1817
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1818
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1821
  tmp___0 = tl;
#line 1821
  tl = tl + 1;
#line 1821
  __gu_p = (void *)tmp___0;
#line 1821
  switch (2UL) {
  case 1UL: 
#line 1821
  *((u8 *)__gu_p) = 0U;
#line 1821
  goto ldv_44525;
  case 2UL: 
#line 1821
  put_unaligned_le16(0, __gu_p);
#line 1821
  goto ldv_44525;
  case 4UL: 
#line 1821
  put_unaligned_le32(0U, __gu_p);
#line 1821
  goto ldv_44525;
  case 8UL: 
#line 1821
  put_unaligned_le64(0ULL, __gu_p);
#line 1821
  goto ldv_44525;
  default: 
#line 1821
  __bad_unaligned_access_size();
#line 1821
  goto ldv_44525;
  }
  ldv_44525: ;
#line 1823
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1831
  tl = (unsigned short *)(& reply->tag_list);
#line 1833
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1833
  if (tmp != 0) {
#line 1834
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1835
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1836
    put_ldev(mdev);
  } else {

  }
#line 1838
  tmp___0 = tl;
#line 1838
  tl = tl + 1;
#line 1838
  __gu_p = (void *)tmp___0;
#line 1838
  switch (2UL) {
  case 1UL: 
#line 1838
  *((u8 *)__gu_p) = 0U;
#line 1838
  goto ldv_44538;
  case 2UL: 
#line 1838
  put_unaligned_le16(0, __gu_p);
#line 1838
  goto ldv_44538;
  case 4UL: 
#line 1838
  put_unaligned_le32(0U, __gu_p);
#line 1838
  goto ldv_44538;
  case 8UL: 
#line 1838
  put_unaligned_le64(0ULL, __gu_p);
#line 1838
  goto ldv_44538;
  default: 
#line 1838
  __bad_unaligned_access_size();
#line 1838
  goto ldv_44538;
  }
  ldv_44538: ;
#line 1840
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1849 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1855
  tl = (unsigned short *)(& reply->tag_list);
#line 1857
  if (*((unsigned int *)mdev + 451UL) != 40960U) {
#line 1857
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1857
    rv = tmp != 0;
  } else {
#line 1857
    rv = 2;
  }
#line 1860
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1861
  tmp___0 = tl;
#line 1861
  tl = tl + 1;
#line 1861
  __gu_p = (void *)tmp___0;
#line 1861
  switch (2UL) {
  case 1UL: 
#line 1861
  *((u8 *)__gu_p) = 0U;
#line 1861
  goto ldv_44552;
  case 2UL: 
#line 1861
  put_unaligned_le16(0, __gu_p);
#line 1861
  goto ldv_44552;
  case 4UL: 
#line 1861
  put_unaligned_le32(0U, __gu_p);
#line 1861
  goto ldv_44552;
  case 8UL: 
#line 1861
  put_unaligned_le64(0ULL, __gu_p);
#line 1861
  goto ldv_44552;
  default: 
#line 1861
  __bad_unaligned_access_size();
#line 1861
  goto ldv_44552;
  }
  ldv_44552: ;
#line 1863
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1870
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1873
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1873
  if (tmp == 0) {
#line 1874
    reply->ret_code = 126;
#line 1875
    return (0);
  } else {

  }
#line 1878
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1879
  val.i = 0U;
#line 1879
  val.ldv_33296.conn = 18U;
#line 1879
  mask.i = 0U;
#line 1879
  mask.ldv_33296.conn = 31U;
#line 1879
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1880
  return (0);
}
}
#line 1884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1887
  retcode = 101;
#line 1888
  skip_initial_sync = 0;
#line 1893
  memset((void *)(& args), 0, 4UL);
#line 1894
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1894
  if (tmp == 0) {
#line 1895
    reply->ret_code = 126;
#line 1896
    return (0);
  } else {

  }
#line 1899
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 1901
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1901
  if (tmp___0 == 0) {
#line 1902
    retcode = 138;
#line 1903
    goto out;
  } else {

  }
#line 1907
  if ((((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1909
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1909
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1909
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1910
    skip_initial_sync = 1;
  } else
#line 1911
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1912
    retcode = 151;
#line 1913
    goto out_dec;
  } else {

  }
#line 1916
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1917
  drbd_uuid_new_current(mdev);
#line 1919
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1920
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1921
    if (err != 0) {
#line 1922
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1922
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1922
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1923
      retcode = 118;
    } else {

    }
#line 1925
    if (skip_initial_sync != 0) {
#line 1926
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1927
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1928
      spin_lock_irq(& mdev->req_lock);
#line 1929
      __ns.i = mdev->state.i;
#line 1929
      __ns.ldv_33296.disk = 8U;
#line 1929
      __ns.ldv_33296.pdsk = 8U;
#line 1929
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1931
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1935
  drbd_md_sync(mdev);
  out_dec: 
#line 1937
  put_ldev(mdev);
  out: 
#line 1939
  mutex_unlock(& mdev->state_mutex);
#line 1941
  reply->ret_code = retcode;
#line 1942
  return (0);
}
}
#line 1945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1949
  if (nlp->drbd_minor >= minor_count) {
#line 1950
    return (0);
  } else {

  }
#line 1952
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1954
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1955
    disk = 0;
#line 1956
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1958
    spin_lock_irq(& drbd_pp_lock);
#line 1959
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1960
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1961
      disk = mdev->vdisk;
#line 1962
      mdev = 0;
    } else {

    }
#line 1964
    spin_unlock_irq(& drbd_pp_lock);
#line 1966
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 1969
      add_disk(disk);
    } else {
#line 1971
      drbd_free_mdev(mdev);
    }
#line 1973
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 1976
  return (mdev);
}
}
#line 1986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 1986
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1240}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2019
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2025
  reply_size = 34;
#line 2029
  tmp = ldv_try_module_get_2(& __this_module);
#line 2029
  if (tmp == 0) {
#line 2030
    printk("<3>drbd: try_module_get() failed!\n");
#line 2031
    return;
  } else {

  }
#line 2034
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2035
    retcode = 152;
#line 2036
    goto fail;
  } else {

  }
#line 2039
  mdev = ensure_mdev(nlp);
#line 2040
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2041
    retcode = 127;
#line 2042
    goto fail;
  } else {

  }
#line 2045
  if (nlp->packet_type > 26) {
#line 2046
    retcode = 137;
#line 2047
    goto fail;
  } else {

  }
#line 2050
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2053
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2054
    retcode = 137;
#line 2055
    goto fail;
  } else {

  }
#line 2058
  reply_size = cm->reply_body_size + reply_size;
#line 2061
  tmp___0 = kmalloc___4((size_t )reply_size, 208U);
#line 2061
  cn_reply = (struct cn_msg *)tmp___0;
#line 2062
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2063
    retcode = 122;
#line 2064
    goto fail;
  } else {

  }
#line 2066
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2068
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2070
  reply->minor = nlp->drbd_minor;
#line 2071
  reply->ret_code = 101;
#line 2074
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2076
  cn_reply->id = req->id;
#line 2077
  cn_reply->seq = req->seq;
#line 2078
  cn_reply->ack = req->ack + 1U;
#line 2079
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2080
  cn_reply->flags = 0U;
#line 2082
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2083
  if (rr != 0 && rr != -3) {
#line 2084
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2086
  kfree((void const   *)cn_reply);
#line 2087
  ldv_module_put_5(& __this_module);
#line 2088
  return;
  fail: 
#line 2090
  drbd_nl_send_reply(req, retcode);
#line 2091
  ldv_module_put_6(& __this_module);
#line 2092
  return;
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2100
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2101
  len = (int )len < (int )l ? len : l;
#line 2102
  tmp = tl;
#line 2102
  tl = tl + 1;
#line 2102
  __gu_p = (void *)tmp;
#line 2102
  switch (2UL) {
  case 1UL: 
#line 2102
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2102
  goto ldv_44616;
  case 2UL: 
#line 2102
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2102
  goto ldv_44616;
  case 4UL: 
#line 2102
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2102
  goto ldv_44616;
  case 8UL: 
#line 2102
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2102
  goto ldv_44616;
  default: 
#line 2102
  __bad_unaligned_access_size();
#line 2102
  goto ldv_44616;
  }
  ldv_44616: 
#line 2103
  tmp___0 = tl;
#line 2103
  tl = tl + 1;
#line 2103
  __gu_p___0 = (void *)tmp___0;
#line 2103
  switch (2UL) {
  case 1UL: 
#line 2103
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2103
  goto ldv_44623;
  case 2UL: 
#line 2103
  put_unaligned_le16((int )len, __gu_p___0);
#line 2103
  goto ldv_44623;
  case 4UL: 
#line 2103
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2103
  goto ldv_44623;
  case 8UL: 
#line 2103
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2103
  goto ldv_44623;
  default: 
#line 2103
  __bad_unaligned_access_size();
#line 2103
  goto ldv_44623;
  }
  ldv_44623: 
#line 2104
  __len = (size_t )len;
#line 2104
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2105
  tl = tl + (unsigned long )len;
#line 2106
  if (nul_terminated != 0) {
#line 2107
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2108
  return (tl);
}
}
#line 2112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2114
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2114
  return (tmp);
}
}
#line 2118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2120
  tmp = strlen(str);
#line 2120
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2120
  return (tmp___0);
}
}
#line 2124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2126
  tmp = tl;
#line 2126
  tl = tl + 1;
#line 2126
  __gu_p = (void *)tmp;
#line 2126
  switch (2UL) {
  case 1UL: 
#line 2126
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2126
  goto ldv_44649;
  case 2UL: 
#line 2126
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2126
  goto ldv_44649;
  case 4UL: 
#line 2126
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2126
  goto ldv_44649;
  case 8UL: 
#line 2126
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2126
  goto ldv_44649;
  default: 
#line 2126
  __bad_unaligned_access_size();
#line 2126
  goto ldv_44649;
  }
  ldv_44649: ;
#line 2127
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2129
  tmp___0 = tl;
#line 2129
  tl = tl + 1;
#line 2129
  __gu_p___0 = (void *)tmp___0;
#line 2129
  switch (2UL) {
  case 1UL: 
#line 2129
  *((u8 *)__gu_p___0) = 4U;
#line 2129
  goto ldv_44657;
  case 2UL: 
#line 2129
  put_unaligned_le16(4, __gu_p___0);
#line 2129
  goto ldv_44657;
  case 4UL: 
#line 2129
  put_unaligned_le32(4U, __gu_p___0);
#line 2129
  goto ldv_44657;
  case 8UL: 
#line 2129
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2129
  goto ldv_44657;
  default: 
#line 2129
  __bad_unaligned_access_size();
#line 2129
  goto ldv_44657;
  }
  ldv_44657: 
#line 2130
  __gu_p___1 = (void *)tl;
#line 2130
  switch (4UL) {
  case 1UL: 
#line 2130
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2130
  goto ldv_44664;
  case 2UL: 
#line 2130
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2130
  goto ldv_44664;
  case 4UL: 
#line 2130
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2130
  goto ldv_44664;
  case 8UL: 
#line 2130
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2130
  goto ldv_44664;
  default: 
#line 2130
  __bad_unaligned_access_size();
#line 2130
  goto ldv_44664;
  }
  ldv_44664: 
#line 2131
  tl = tl + 4U;
#line 2132
  goto ldv_44669;
  case 16384U: 
#line 2134
  tmp___1 = tl;
#line 2134
  tl = tl + 1;
#line 2134
  __gu_p___2 = (void *)tmp___1;
#line 2134
  switch (2UL) {
  case 1UL: 
#line 2134
  *((u8 *)__gu_p___2) = 8U;
#line 2134
  goto ldv_44673;
  case 2UL: 
#line 2134
  put_unaligned_le16(8, __gu_p___2);
#line 2134
  goto ldv_44673;
  case 4UL: 
#line 2134
  put_unaligned_le32(8U, __gu_p___2);
#line 2134
  goto ldv_44673;
  case 8UL: 
#line 2134
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2134
  goto ldv_44673;
  default: 
#line 2134
  __bad_unaligned_access_size();
#line 2134
  goto ldv_44673;
  }
  ldv_44673: 
#line 2135
  __gu_p___3 = (void *)tl;
#line 2135
  switch (8UL) {
  case 1UL: 
#line 2135
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2135
  goto ldv_44680;
  case 2UL: 
#line 2135
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2135
  goto ldv_44680;
  case 4UL: 
#line 2135
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2135
  goto ldv_44680;
  case 8UL: 
#line 2135
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2135
  goto ldv_44680;
  default: 
#line 2135
  __bad_unaligned_access_size();
#line 2135
  goto ldv_44680;
  }
  ldv_44680: 
#line 2136
  tl = tl + 8U;
#line 2137
  goto ldv_44669;
  default: ;
  }
  ldv_44669: ;
#line 2142
  return (tl);
}
}
#line 2145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2151
  cn_reply = (struct cn_msg *)(& buffer);
#line 2152
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2154
  tl = (unsigned short *)(& reply->tag_list);
#line 2158
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2160
  tmp = tl;
#line 2160
  tl = tl + 1;
#line 2160
  __gu_p = (void *)tmp;
#line 2160
  switch (2UL) {
  case 1UL: 
#line 2160
  *((u8 *)__gu_p) = 0U;
#line 2160
  goto ldv_44696;
  case 2UL: 
#line 2160
  put_unaligned_le16(0, __gu_p);
#line 2160
  goto ldv_44696;
  case 4UL: 
#line 2160
  put_unaligned_le32(0U, __gu_p);
#line 2160
  goto ldv_44696;
  case 8UL: 
#line 2160
  put_unaligned_le64(0ULL, __gu_p);
#line 2160
  goto ldv_44696;
  default: 
#line 2160
  __bad_unaligned_access_size();
#line 2160
  goto ldv_44696;
  }
  ldv_44696: 
#line 2162
  cn_reply->id.idx = 8U;
#line 2163
  cn_reply->id.val = 1U;
#line 2165
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2165
  cn_reply->seq = (__u32 )tmp___0;
#line 2166
  cn_reply->ack = 0U;
#line 2167
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2169
  cn_reply->flags = 0U;
#line 2171
  reply->packet_type = 17;
#line 2172
  reply->minor = mdev_to_minor(mdev);
#line 2173
  reply->ret_code = 101;
#line 2175
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2176
  return;
}
}
#line 2178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2184
  cn_reply = (struct cn_msg *)(& buffer);
#line 2185
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2187
  tl = (unsigned short *)(& reply->tag_list);
#line 2191
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2192
  tmp = tl;
#line 2192
  tl = tl + 1;
#line 2192
  __gu_p = (void *)tmp;
#line 2192
  switch (2UL) {
  case 1UL: 
#line 2192
  *((u8 *)__gu_p) = 0U;
#line 2192
  goto ldv_44711;
  case 2UL: 
#line 2192
  put_unaligned_le16(0, __gu_p);
#line 2192
  goto ldv_44711;
  case 4UL: 
#line 2192
  put_unaligned_le32(0U, __gu_p);
#line 2192
  goto ldv_44711;
  case 8UL: 
#line 2192
  put_unaligned_le64(0ULL, __gu_p);
#line 2192
  goto ldv_44711;
  default: 
#line 2192
  __bad_unaligned_access_size();
#line 2192
  goto ldv_44711;
  }
  ldv_44711: 
#line 2194
  cn_reply->id.idx = 8U;
#line 2195
  cn_reply->id.val = 1U;
#line 2197
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2197
  cn_reply->seq = (__u32 )tmp___0;
#line 2198
  cn_reply->ack = 0U;
#line 2199
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2201
  cn_reply->flags = 0U;
#line 2203
  reply->packet_type = 20;
#line 2204
  reply->minor = mdev_to_minor(mdev);
#line 2205
  reply->ret_code = 101;
#line 2207
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2208
  return;
}
}
#line 2210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct bio_vec *bvec ;
  unsigned short *tl ;
  int i ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___5 ;
  int tmp___6 ;

  {
#line 2221
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2222
    return;
  } else {

  }
#line 2223
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2224
    return;
  } else {

  }
#line 2232
  tmp = kmalloc___4(33026UL, 16U);
#line 2232
  cn_reply = (struct cn_msg *)tmp;
#line 2239
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2240
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2240
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2240
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2242
    return;
  } else {

  }
#line 2245
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2246
  tl = (unsigned short *)(& reply->tag_list);
#line 2248
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2249
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2250
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2251
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2252
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2254
  tmp___2 = tl;
#line 2254
  tl = tl + 1;
#line 2254
  __gu_p = (void *)tmp___2;
#line 2254
  switch (2UL) {
  case 1UL: 
#line 2254
  *((u8 *)__gu_p) = 50U;
#line 2254
  goto ldv_44731;
  case 2UL: 
#line 2254
  put_unaligned_le16(49202, __gu_p);
#line 2254
  goto ldv_44731;
  case 4UL: 
#line 2254
  put_unaligned_le32(49202U, __gu_p);
#line 2254
  goto ldv_44731;
  case 8UL: 
#line 2254
  put_unaligned_le64(49202ULL, __gu_p);
#line 2254
  goto ldv_44731;
  default: 
#line 2254
  __bad_unaligned_access_size();
#line 2254
  goto ldv_44731;
  }
  ldv_44731: 
#line 2255
  tmp___3 = tl;
#line 2255
  tl = tl + 1;
#line 2255
  __gu_p___0 = (void *)tmp___3;
#line 2255
  switch (2UL) {
  case 1UL: 
#line 2255
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2255
  goto ldv_44738;
  case 2UL: 
#line 2255
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2255
  goto ldv_44738;
  case 4UL: 
#line 2255
  put_unaligned_le32(e->size, __gu_p___0);
#line 2255
  goto ldv_44738;
  case 8UL: 
#line 2255
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2255
  goto ldv_44738;
  default: 
#line 2255
  __bad_unaligned_access_size();
#line 2255
  goto ldv_44738;
  }
  ldv_44738: 
#line 2257
  bvec = (e->private_bio)->bi_io_vec;
#line 2257
  i = 0;
#line 2257
  goto ldv_44748;
  ldv_44747: 
#line 2258
  tmp___4 = kmap(bvec->bv_page);
#line 2258
  d = tmp___4;
#line 2259
  __len = (size_t )bvec->bv_len;
#line 2259
  __ret = __builtin_memcpy((void *)tl, (void const   *)d + (unsigned long )bvec->bv_offset,
                           __len);
#line 2260
  kunmap(bvec->bv_page);
#line 2261
  tl = tl + (unsigned long )bvec->bv_len;
#line 2257
  bvec = bvec + 1;
#line 2257
  i = i + 1;
  ldv_44748: ;
#line 2257
  if ((int )(e->private_bio)->bi_vcnt > i) {
#line 2258
    goto ldv_44747;
  } else {

  }
#line 2263
  tmp___5 = tl;
#line 2263
  tl = tl + 1;
#line 2263
  __gu_p___1 = (void *)tmp___5;
#line 2263
  switch (2UL) {
  case 1UL: 
#line 2263
  *((u8 *)__gu_p___1) = 0U;
#line 2263
  goto ldv_44752;
  case 2UL: 
#line 2263
  put_unaligned_le16(0, __gu_p___1);
#line 2263
  goto ldv_44752;
  case 4UL: 
#line 2263
  put_unaligned_le32(0U, __gu_p___1);
#line 2263
  goto ldv_44752;
  case 8UL: 
#line 2263
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2263
  goto ldv_44752;
  default: 
#line 2263
  __bad_unaligned_access_size();
#line 2263
  goto ldv_44752;
  }
  ldv_44752: 
#line 2265
  cn_reply->id.idx = 8U;
#line 2266
  cn_reply->id.val = 1U;
#line 2268
  tmp___6 = atomic_add_return(1, & drbd_nl_seq);
#line 2268
  cn_reply->seq = (__u32 )tmp___6;
#line 2269
  cn_reply->ack = 0U;
#line 2270
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2272
  cn_reply->flags = 0U;
#line 2274
  reply->packet_type = 24;
#line 2275
  reply->minor = mdev_to_minor(mdev);
#line 2276
  reply->ret_code = 101;
#line 2278
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2279
  kfree((void const   *)cn_reply);
#line 2280
  return;
}
}
#line 2282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2288
  cn_reply = (struct cn_msg *)(& buffer);
#line 2289
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2291
  tl = (unsigned short *)(& reply->tag_list);
#line 2296
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2296
  if (tmp == 0) {
#line 2297
    return;
  } else {

  }
#line 2298
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2299
  put_ldev(mdev);
#line 2301
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2302
  tmp___0 = tl;
#line 2302
  tl = tl + 1;
#line 2302
  __gu_p = (void *)tmp___0;
#line 2302
  switch (2UL) {
  case 1UL: 
#line 2302
  *((u8 *)__gu_p) = 0U;
#line 2302
  goto ldv_44768;
  case 2UL: 
#line 2302
  put_unaligned_le16(0, __gu_p);
#line 2302
  goto ldv_44768;
  case 4UL: 
#line 2302
  put_unaligned_le32(0U, __gu_p);
#line 2302
  goto ldv_44768;
  case 8UL: 
#line 2302
  put_unaligned_le64(0ULL, __gu_p);
#line 2302
  goto ldv_44768;
  default: 
#line 2302
  __bad_unaligned_access_size();
#line 2302
  goto ldv_44768;
  }
  ldv_44768: 
#line 2304
  cn_reply->id.idx = 8U;
#line 2305
  cn_reply->id.val = 1U;
#line 2307
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2307
  cn_reply->seq = (__u32 )tmp___1;
#line 2308
  cn_reply->ack = 0U;
#line 2309
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2311
  cn_reply->flags = 0U;
#line 2313
  reply->packet_type = 23;
#line 2314
  reply->minor = mdev_to_minor(mdev);
#line 2315
  reply->ret_code = 101;
#line 2317
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2318
  return;
}
}
#line 2320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2323
  try = 10;
#line 2325
  cn_id_drbd.val = 1U;
  ldv_44780: 
#line 2327
  cn_id_drbd.idx = cn_idx;
#line 2328
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2329
  if (err == 0) {
#line 2330
    goto ldv_44779;
  } else {

  }
#line 2331
  cn_idx = cn_idx + 6977U;
#line 2332
  tmp = try;
#line 2332
  try = try - 1;
#line 2332
  if (tmp != 0) {
#line 2333
    goto ldv_44780;
  } else {

  }
  ldv_44779: ;
#line 2334
  if (err != 0) {
#line 2335
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2336
    return (err);
  } else {

  }
#line 2339
  return (0);
}
}
#line 2342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2346
  cn_id_drbd.idx = cn_idx;
#line 2347
  cn_id_drbd.val = 1U;
#line 2349
  cn_del_callback(& cn_id_drbd);
#line 2350
  return;
}
}
#line 2352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2355
  cn_reply = (struct cn_msg *)(& buffer);
#line 2356
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2360
  cn_reply->id = req->id;
#line 2362
  cn_reply->seq = req->seq;
#line 2363
  cn_reply->ack = req->ack + 1U;
#line 2364
  cn_reply->len = 12U;
#line 2365
  cn_reply->flags = 0U;
#line 2367
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2368
  reply->ret_code = ret_code;
#line 2370
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2371
  if (rr != 0 && rr != -3) {
#line 2372
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2373
  return;
}
}
#line 2383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2388
  ldv_module_put(ldv_func_arg1);
#line 2389
  return;
}
}
#line 2391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2396
  ldv_module_put(ldv_func_arg1);
#line 2397
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
