/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 20 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 159 "include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 162 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 167 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 177 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 177 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 182 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 182 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 183 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 188
struct hlist_node;
#line 188 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 192 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 203 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 153 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 386 "include/linux/kernel.h"
struct pid;
#line 735 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 97 "include/linux/bug.h"
struct timespec;
#line 98
struct compat_timespec;
#line 99 "include/linux/bug.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 99 "include/linux/bug.h"
struct __anonstruct_nanosleep_10 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 99
struct pollfd;
#line 99 "include/linux/bug.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 99 "include/linux/bug.h"
union __anonunion_ldv_2107_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 99 "include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_2107_8 ldv_2107 ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 27
struct exec_domain;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2189_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2204_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2205_12 {
   struct __anonstruct_ldv_2189_13 ldv_2189 ;
   struct __anonstruct_ldv_2204_14 ldv_2204 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2205_12 ldv_2205 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 310
struct file;
#line 325
struct seq_file;
#line 355
struct thread_struct;
#line 357
struct cpumask;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2860_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2860_19 ldv_2860 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 26 "include/linux/personality.h"
struct map_segment;
#line 26 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5171_24 {
   u64 rip ;
   u64 rdp ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5177_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5178_23 {
   struct __anonstruct_ldv_5171_24 ldv_5171 ;
   struct __anonstruct_ldv_5177_25 ldv_5177 ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5187_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5178_23 ldv_5178 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5187_26 ldv_5187 ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 382 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 443
struct kmem_cache;
#line 444
struct perf_event;
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5915_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5915_29 ldv_5915 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5922_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5922_31 ldv_5922 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6138_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6139_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6138_33 ldv_6138 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6139_32 ldv_6139 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 752 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 314 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 353
struct tvec_base;
#line 354 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 113 "include/linux/workqueue.h"
struct execute_work {
   struct work_struct work ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 557 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 398 "include/linux/gfp.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 37 "include/linux/kmod.h"
struct cred;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct sock;
#line 45
struct kobject;
#line 46
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 52 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 214
struct kernel_param;
#line 215 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 47 "include/linux/moduleparam.h"
struct kparam_string;
#line 47
struct kparam_array;
#line 47 "include/linux/moduleparam.h"
union __anonunion_ldv_13747_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 47 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13747_134 ldv_13747 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 457 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 72
struct exception_table_entry;
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 191 "include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[16U] ;
   kernel_ulong_t driver_data ;
};
#line 225 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 610
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct device_node;
#line 21
struct iommu_ops;
#line 22
struct iommu_group;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 249 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 303
struct class_attribute;
#line 303 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 398 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 451 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 478 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 577 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 587 "include/linux/device.h"
struct acpi_dev_node {
   void *handle ;
};
#line 592
struct dma_coherent_mem;
#line 592 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 720 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 69 "include/linux/io.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 17
struct hotplug_slot;
#line 17 "include/linux/irqreturn.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 95 "include/linux/pci.h"
typedef int pci_power_t;
#line 122 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 123
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 148 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 165 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 208
struct pcie_link_state;
#line 209
struct pci_vpd;
#line 210
struct pci_sriov;
#line 211
struct pci_ats;
#line 212
struct proc_dir_entry;
#line 212
struct pci_driver;
#line 212 "include/linux/pci.h"
union __anonunion_ldv_15468_136 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 212 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   unsigned char pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char pme_interrupt : 1 ;
   unsigned char pme_poll : 1 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char no_d3cold : 1 ;
   unsigned char d3cold_allowed : 1 ;
   unsigned char mmio_always_on : 1 ;
   unsigned char wakeup_prepared : 1 ;
   unsigned char runtime_d3cold : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_cfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char needs_freset : 1 ;
   unsigned char state_saved : 1 ;
   unsigned char is_physfn : 1 ;
   unsigned char is_virtfn : 1 ;
   unsigned char reset_fn : 1 ;
   unsigned char is_hotplug_bridge : 1 ;
   unsigned char __aer_firmware_first_valid : 1 ;
   unsigned char __aer_firmware_first : 1 ;
   unsigned char broken_intx_masking : 1 ;
   unsigned char io_window_1k : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct kset *msi_kset ;
   struct pci_vpd *vpd ;
   union __anonunion_ldv_15468_136 ldv_15468 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
};
#line 401
struct pci_ops;
#line 401 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 492 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 513 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 526 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 536 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 566 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const   *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   int (*sriov_configure)(struct pci_dev * , int  ) ;
   struct pci_error_handlers  const  *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1070 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 1223
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112
struct address_space;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16499_138 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16509_142 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16511_141 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16509_142 ldv_16509 ;
   int units ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16513_140 {
   union __anonunion_ldv_16511_141 ldv_16511 ;
   atomic_t _count ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16514_139 {
   unsigned long counters ;
   struct __anonstruct_ldv_16513_140 ldv_16513 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16515_137 {
   union __anonunion_ldv_16499_138 ldv_16499 ;
   union __anonunion_ldv_16514_139 ldv_16514 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16522_144 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 113
struct slab;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16526_143 {
   struct list_head lru ;
   struct __anonstruct_ldv_16522_144 ldv_16522 ;
   struct list_head list ;
   struct slab *slab_page ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16531_145 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 113 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_16515_137 ldv_16515 ;
   union __anonunion_ldv_16526_143 ldv_16526 ;
   union __anonunion_ldv_16531_145 ldv_16531 ;
   unsigned long debug_flags ;
   int _last_nid ;
};
#line 179 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 219 "include/linux/mm_types.h"
struct __anonstruct_linear_147 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 219 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_linear_147 linear ;
   struct list_head nonlinear ;
};
#line 219
struct anon_vma;
#line 219
struct vm_operations_struct;
#line 219
struct mempolicy;
#line 219 "include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 291 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 297 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 310 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 323
struct linux_binfmt;
#line 323
struct mmu_notifier_mm;
#line 323 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   struct uprobes_state uprobes_state ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1751
struct mem_cgroup;
#line 137 "include/linux/slab.h"
struct __anonstruct_ldv_19290_149 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 137 "include/linux/slab.h"
union __anonunion_ldv_19291_148 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct_ldv_19290_149 ldv_19290 ;
};
#line 137 "include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion_ldv_19291_148 ldv_19291 ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "include/linux/dma-attrs.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 180 "include/linux/hardirq.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 698 "include/linux/interrupt.h"
struct scsi_cmnd;
#line 576 "include/scsi/scsi.h"
struct request_queue;
#line 577
struct block_device;
#line 578
struct scsi_device;
#line 579
struct scsi_target;
#line 580
struct Scsi_Host;
#line 581
struct scsi_host_cmd_pool;
#line 582
struct scsi_transport_template;
#line 590
enum blk_eh_timer_return;
#line 590 "include/scsi/scsi.h"
struct scsi_host_template {
   struct module *module ;
   char const   *name ;
   int (*detect)(struct scsi_host_template * ) ;
   int (*release)(struct Scsi_Host * ) ;
   char const   *(*info)(struct Scsi_Host * ) ;
   int (*ioctl)(struct scsi_device * , int  , void * ) ;
   int (*compat_ioctl)(struct scsi_device * , int  , void * ) ;
   int (*queuecommand)(struct Scsi_Host * , struct scsi_cmnd * ) ;
   int (*transfer_response)(struct scsi_cmnd * , void (*)(struct scsi_cmnd * ) ) ;
   int (*eh_abort_handler)(struct scsi_cmnd * ) ;
   int (*eh_device_reset_handler)(struct scsi_cmnd * ) ;
   int (*eh_target_reset_handler)(struct scsi_cmnd * ) ;
   int (*eh_bus_reset_handler)(struct scsi_cmnd * ) ;
   int (*eh_host_reset_handler)(struct scsi_cmnd * ) ;
   int (*slave_alloc)(struct scsi_device * ) ;
   int (*slave_configure)(struct scsi_device * ) ;
   void (*slave_destroy)(struct scsi_device * ) ;
   int (*target_alloc)(struct scsi_target * ) ;
   void (*target_destroy)(struct scsi_target * ) ;
   int (*scan_finished)(struct Scsi_Host * , unsigned long  ) ;
   void (*scan_start)(struct Scsi_Host * ) ;
   int (*change_queue_depth)(struct scsi_device * , int  , int  ) ;
   int (*change_queue_type)(struct scsi_device * , int  ) ;
   int (*bios_param)(struct scsi_device * , struct block_device * , sector_t  , int * ) ;
   void (*unlock_native_capacity)(struct scsi_device * ) ;
   int (*proc_info)(struct Scsi_Host * , char * , char ** , off_t  , int  , int  ) ;
   enum blk_eh_timer_return (*eh_timed_out)(struct scsi_cmnd * ) ;
   int (*host_reset)(struct Scsi_Host * , int  ) ;
   char const   *proc_name ;
   struct proc_dir_entry *proc_dir ;
   int can_queue ;
   int this_id ;
   unsigned short sg_tablesize ;
   unsigned short sg_prot_tablesize ;
   unsigned short max_sectors ;
   unsigned long dma_boundary ;
   short cmd_per_lun ;
   unsigned char present ;
   unsigned char supported_mode : 2 ;
   unsigned char unchecked_isa_dma : 1 ;
   unsigned char use_clustering : 1 ;
   unsigned char emulated : 1 ;
   unsigned char skip_settle_delay : 1 ;
   unsigned char ordered_tag : 1 ;
   unsigned int max_host_blocked ;
   struct device_attribute **shost_attrs ;
   struct device_attribute **sdev_attrs ;
   struct list_head legacy_hosts ;
   u64 vendor_id ;
};
#line 518 "include/scsi/scsi_host.h"
enum scsi_host_state {
    SHOST_CREATED = 1,
    SHOST_RUNNING = 2,
    SHOST_CANCEL = 3,
    SHOST_DEL = 4,
    SHOST_RECOVERY = 5,
    SHOST_CANCEL_RECOVERY = 6,
    SHOST_DEL_RECOVERY = 7
} ;
#line 528
struct blk_queue_tag;
#line 528 "include/scsi/scsi_host.h"
struct Scsi_Host {
   struct list_head __devices ;
   struct list_head __targets ;
   struct scsi_host_cmd_pool *cmd_pool ;
   spinlock_t free_list_lock ;
   struct list_head free_list ;
   struct list_head starved_list ;
   spinlock_t default_lock ;
   spinlock_t *host_lock ;
   struct mutex scan_mutex ;
   struct list_head eh_cmd_q ;
   struct task_struct *ehandler ;
   struct completion *eh_action ;
   wait_queue_head_t host_wait ;
   struct scsi_host_template *hostt ;
   struct scsi_transport_template *transportt ;
   struct blk_queue_tag *bqt ;
   unsigned int host_busy ;
   unsigned int host_failed ;
   unsigned int host_eh_scheduled ;
   unsigned int host_no ;
   int resetting ;
   unsigned long last_reset ;
   unsigned int max_id ;
   unsigned int max_lun ;
   unsigned int max_channel ;
   unsigned int unique_id ;
   unsigned short max_cmd_len ;
   int this_id ;
   int can_queue ;
   short cmd_per_lun ;
   unsigned short sg_tablesize ;
   unsigned short sg_prot_tablesize ;
   unsigned short max_sectors ;
   unsigned long dma_boundary ;
   unsigned long cmd_serial_number ;
   unsigned char active_mode : 2 ;
   unsigned char unchecked_isa_dma : 1 ;
   unsigned char use_clustering : 1 ;
   unsigned char use_blk_tcq : 1 ;
   unsigned char host_self_blocked : 1 ;
   unsigned char reverse_ordering : 1 ;
   unsigned char ordered_tag : 1 ;
   unsigned char tmf_in_progress : 1 ;
   unsigned char async_scan : 1 ;
   unsigned char eh_noresume : 1 ;
   char work_q_name[20U] ;
   struct workqueue_struct *work_q ;
   unsigned int host_blocked ;
   unsigned int max_host_blocked ;
   unsigned int prot_capabilities ;
   unsigned char prot_guard_type ;
   struct request_queue *uspace_req_q ;
   unsigned long base ;
   unsigned long io_port ;
   unsigned char n_io_port ;
   unsigned char dma_channel ;
   unsigned int irq ;
   enum scsi_host_state shost_state ;
   struct device shost_gendev ;
   struct device shost_dev ;
   struct list_head sht_legacy_list ;
   void *shost_data ;
   struct device *dma_dev ;
   unsigned long hostdata[0U] ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 33
struct dentry;
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_152 {
   unsigned long sig[1U] ;
};
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_152 sigset_t;
#line 25
struct siginfo;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/uapi/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_154 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_155 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_156 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_157 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_158 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_159 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_160 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_153 {
   int _pad[28U] ;
   struct __anonstruct__kill_154 _kill ;
   struct __anonstruct__timer_155 _timer ;
   struct __anonstruct__rt_156 _rt ;
   struct __anonstruct__sigchld_157 _sigchld ;
   struct __anonstruct__sigfault_158 _sigfault ;
   struct __anonstruct__sigpoll_159 _sigpoll ;
   struct __anonstruct__sigsys_160 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_153 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 390
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 397
struct pid_namespace;
#line 397 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 176 "include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 440 "include/linux/rculist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23825_163 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23834_164 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_165 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_166 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_23825_163 ldv_23825 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_23834_164 ldv_23834 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_165 type_data ;
   union __anonunion_payload_166 payload ;
};
#line 323
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred;
#line 78 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 345
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 121 "include/linux/sched.h"
struct cfs_rq;
#line 122
struct task_group;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 38 "include/linux/uio.h"
struct kioctx;
#line 39 "include/linux/uio.h"
union __anonunion_ki_obj_167 {
   void *user ;
   struct task_struct *tsk ;
};
#line 39
struct eventfd_ctx;
#line 39 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_167 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 378 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 430 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 438 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 445 "include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 457 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 477 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 513
struct autogroup;
#line 514
struct tty_struct;
#line 514
struct taskstats;
#line 514
struct tty_audit_buf;
#line 514 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 690 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 734
struct backing_dev_info;
#line 735
struct reclaim_state;
#line 736 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 750 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1022
struct io_context;
#line 1050
struct pipe_inode_info;
#line 1052
struct rq;
#line 1053 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*migrate_task_rq)(struct task_struct * , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1119 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1124 "include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 1136 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1171 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 1206
struct rt_rq;
#line 1206 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1229 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1600
struct files_struct;
#line 1600
struct css_set;
#line 1600
struct compat_robust_list_head;
#line 1600
struct ftrace_ret_stack;
#line 1600 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 50 "include/linux/genhd.h"
struct hlist_bl_node;
#line 50 "include/linux/genhd.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_25877_170 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_25879_169 {
   struct __anonstruct_ldv_25877_170 ldv_25877 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_25879_169 ldv_25879 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_171 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_171 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 411 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 27 "include/linux/percpu-rwsem.h"
struct bio_set;
#line 28
struct bio;
#line 29
struct bio_integrity_payload;
#line 30
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 57
struct hd_geometry;
#line 58
struct poll_table_struct;
#line 59
struct kstatfs;
#line 60
struct swap_info_struct;
#line 65 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 241 "include/linux/fs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_26612_172 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_26612_172 ldv_26612 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 340 "include/linux/fs.h"
union __anonunion_arg_174 {
   char *buf ;
   void *data ;
};
#line 340 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_173 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_174 arg ;
   int error ;
};
#line 340 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_173 read_descriptor_t;
#line 343 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 497
struct posix_acl;
#line 498
struct inode_operations;
#line 498 "include/linux/fs.h"
union __anonunion_ldv_27044_175 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 498 "include/linux/fs.h"
union __anonunion_ldv_27064_176 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 498
struct file_lock;
#line 498
struct cdev;
#line 498 "include/linux/fs.h"
union __anonunion_ldv_27080_177 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 498 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_27044_175 ldv_27044 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_27064_176 ldv_27064 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_27080_177 ldv_27080 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 726 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 734 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 757 "include/linux/fs.h"
union __anonunion_f_u_178 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 757 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_178 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 900 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 901 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 906 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 923
struct nlm_lockowner;
#line 924 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_180 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_179 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_180 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_179 fl_u ;
};
#line 1010 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1216 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1232
struct file_system_type;
#line 1232
struct super_operations;
#line 1232
struct xattr_handler;
#line 1232
struct mtd_info;
#line 1232 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1469 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1507
struct block_device_operations;
#line 1508 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1545 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1588 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1801 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 101 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};
#line 155 "include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 162
struct disk_events;
#line 163
struct timer_rand_state;
#line 163
struct blk_integrity;
#line 163 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 71 "include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 39 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 65 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_30568_181 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_30572_182 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 77 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_30568_181 ldv_30568 ;
   union __anonunion_ldv_30572_182 ldv_30572 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 296 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 415 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 22 "include/linux/bsg.h"
struct elevator_queue;
#line 24
struct blk_trace;
#line 25
struct request;
#line 27
struct bsg_job;
#line 28
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};
#line 67
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_31019_183 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_elv_185 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_flush_186 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_31030_184 {
   struct __anonstruct_elv_185 elv ;
   struct __anonstruct_flush_186 flush ;
};
#line 79 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_31019_183 ldv_31019 ;
   union __anonunion_ldv_31030_184 ldv_31030 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 217 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 219 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 220 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 221 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 229 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 231 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 232 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 233 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 234 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 235
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 242 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 248 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 257 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 286
struct throtl_data;
#line 286 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int request_fn_active ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 960 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1319 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1351 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1352 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1353 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1354 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1355 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1414 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 1505 "include/linux/blkdev.h"
struct scsi_data_buffer {
   struct sg_table table ;
   unsigned int length ;
   int resid ;
};
#line 37 "include/scsi/scsi_cmnd.h"
struct scsi_pointer {
   char *ptr ;
   int this_residual ;
   struct scatterlist *buffer ;
   int buffers_residual ;
   dma_addr_t dma_handle ;
   int volatile   Status ;
   int volatile   Message ;
   int volatile   have_data_in ;
   int volatile   sent_command ;
   int volatile   phase ;
};
#line 53 "include/scsi/scsi_cmnd.h"
struct scsi_cmnd {
   struct scsi_device *device ;
   struct list_head list ;
   struct list_head eh_entry ;
   int eh_eflags ;
   unsigned long serial_number ;
   unsigned long jiffies_at_alloc ;
   int retries ;
   int allowed ;
   unsigned char prot_op ;
   unsigned char prot_type ;
   unsigned short cmd_len ;
   enum dma_data_direction sc_data_direction ;
   unsigned char *cmnd ;
   struct scsi_data_buffer sdb ;
   struct scsi_data_buffer *prot_sdb ;
   unsigned int underflow ;
   unsigned int transfersize ;
   struct request *request ;
   unsigned char *sense_buffer ;
   void (*scsi_done)(struct scsi_cmnd * ) ;
   struct scsi_pointer SCp ;
   unsigned char *host_scribble ;
   int result ;
   unsigned char tag ;
};
#line 311
struct scsi_sense_hdr;
#line 25 "include/scsi/scsi_device.h"
enum scsi_device_state {
    SDEV_CREATED = 1,
    SDEV_RUNNING = 2,
    SDEV_CANCEL = 3,
    SDEV_DEL = 4,
    SDEV_QUIESCE = 5,
    SDEV_OFFLINE = 6,
    SDEV_TRANSPORT_OFFLINE = 7,
    SDEV_BLOCK = 8,
    SDEV_CREATED_BLOCK = 9
} ;
#line 64
struct scsi_dh_data;
#line 64 "include/scsi/scsi_device.h"
struct scsi_device {
   struct Scsi_Host *host ;
   struct request_queue *request_queue ;
   struct list_head siblings ;
   struct list_head same_target_siblings ;
   unsigned int device_busy ;
   spinlock_t list_lock ;
   struct list_head cmd_list ;
   struct list_head starved_entry ;
   struct scsi_cmnd *current_cmnd ;
   unsigned short queue_depth ;
   unsigned short max_queue_depth ;
   unsigned short last_queue_full_depth ;
   unsigned short last_queue_full_count ;
   unsigned long last_queue_full_time ;
   unsigned long queue_ramp_up_period ;
   unsigned long last_queue_ramp_up ;
   unsigned int id ;
   unsigned int lun ;
   unsigned int channel ;
   unsigned int manufacturer ;
   unsigned int sector_size ;
   void *hostdata ;
   char type ;
   char scsi_level ;
   char inq_periph_qual ;
   unsigned char inquiry_len ;
   unsigned char *inquiry ;
   char const   *vendor ;
   char const   *model ;
   char const   *rev ;
   unsigned char current_tag ;
   struct scsi_target *sdev_target ;
   unsigned int sdev_bflags ;
   unsigned char writeable : 1 ;
   unsigned char removable : 1 ;
   unsigned char changed : 1 ;
   unsigned char busy : 1 ;
   unsigned char lockable : 1 ;
   unsigned char locked : 1 ;
   unsigned char borken : 1 ;
   unsigned char disconnect : 1 ;
   unsigned char soft_reset : 1 ;
   unsigned char sdtr : 1 ;
   unsigned char wdtr : 1 ;
   unsigned char ppr : 1 ;
   unsigned char tagged_supported : 1 ;
   unsigned char simple_tags : 1 ;
   unsigned char ordered_tags : 1 ;
   unsigned char was_reset : 1 ;
   unsigned char expecting_cc_ua : 1 ;
   unsigned char use_10_for_rw : 1 ;
   unsigned char use_10_for_ms : 1 ;
   unsigned char no_report_opcodes : 1 ;
   unsigned char no_write_same : 1 ;
   unsigned char use_16_for_rw : 1 ;
   unsigned char skip_ms_page_8 : 1 ;
   unsigned char skip_ms_page_3f : 1 ;
   unsigned char skip_vpd_pages : 1 ;
   unsigned char use_192_bytes_for_3f : 1 ;
   unsigned char no_start_on_add : 1 ;
   unsigned char allow_restart : 1 ;
   unsigned char manage_start_stop : 1 ;
   unsigned char start_stop_pwr_cond : 1 ;
   unsigned char no_uld_attach : 1 ;
   unsigned char select_no_atn : 1 ;
   unsigned char fix_capacity : 1 ;
   unsigned char guess_capacity : 1 ;
   unsigned char retry_hwerror : 1 ;
   unsigned char last_sector_bug : 1 ;
   unsigned char no_read_disc_info : 1 ;
   unsigned char no_read_capacity_16 : 1 ;
   unsigned char try_rc_10_first : 1 ;
   unsigned char is_visible : 1 ;
   unsigned char can_power_off : 1 ;
   unsigned char wce_default_on : 1 ;
   unsigned char no_dif : 1 ;
   unsigned long supported_events[1U] ;
   struct list_head event_list ;
   struct work_struct event_work ;
   unsigned int device_blocked ;
   unsigned int max_device_blocked ;
   atomic_t iorequest_cnt ;
   atomic_t iodone_cnt ;
   atomic_t ioerr_cnt ;
   struct device sdev_gendev ;
   struct device sdev_dev ;
   struct execute_work ew ;
   struct work_struct requeue_work ;
   struct scsi_dh_data *scsi_dh_data ;
   enum scsi_device_state sdev_state ;
   unsigned long sdev_data[0U] ;
};
#line 187 "include/scsi/scsi_device.h"
struct scsi_dh_devlist {
   char *vendor ;
   char *model ;
};
#line 194 "include/scsi/scsi_device.h"
struct scsi_device_handler {
   struct list_head list ;
   struct module *module ;
   char const   *name ;
   struct scsi_dh_devlist  const  *devlist ;
   int (*check_sense)(struct scsi_device * , struct scsi_sense_hdr * ) ;
   int (*attach)(struct scsi_device * ) ;
   void (*detach)(struct scsi_device * ) ;
   int (*activate)(struct scsi_device * , void (*)(void * , int  ) , void * ) ;
   int (*prep_fn)(struct scsi_device * , struct request * ) ;
   int (*set_params)(struct scsi_device * , char const   * ) ;
   bool (*match)(struct scsi_device * ) ;
};
#line 210 "include/scsi/scsi_device.h"
struct scsi_dh_data {
   struct scsi_device_handler *scsi_dh ;
   struct scsi_device *sdev ;
   struct kref kref ;
   char buf[0U] ;
};
#line 217
enum scsi_target_state {
    STARGET_CREATED = 1,
    STARGET_RUNNING = 2,
    STARGET_DEL = 3
} ;
#line 223 "include/scsi/scsi_device.h"
struct scsi_target {
   struct scsi_device *starget_sdev_user ;
   struct list_head siblings ;
   struct list_head devices ;
   struct device dev ;
   unsigned int reap_ref ;
   unsigned int channel ;
   unsigned int id ;
   unsigned char create : 1 ;
   unsigned char single_lun : 1 ;
   unsigned char pdt_1f_for_no_lun : 1 ;
   unsigned char no_report_luns : 1 ;
   unsigned int target_busy ;
   unsigned int can_queue ;
   unsigned int target_blocked ;
   unsigned int max_target_blocked ;
   char scsi_level ;
   struct execute_work ew ;
   enum scsi_target_state state ;
   void *hostdata ;
   unsigned long starget_data[0U] ;
};
#line 495 "include/scsi/scsi_device.h"
struct scsi_sense_hdr {
   u8 response_code ;
   u8 sense_key ;
   u8 asc ;
   u8 ascq ;
   u8 byte4 ;
   u8 byte5 ;
   u8 byte6 ;
   u8 additional_length ;
};
#line 72 "include/scsi/scsi_eh.h"
struct scsi_eh_save {
   int result ;
   enum dma_data_direction data_direction ;
   unsigned int underflow ;
   unsigned char cmd_len ;
   unsigned char prot_op ;
   unsigned char *cmnd ;
   struct scsi_data_buffer sdb ;
   struct request *next_rq ;
   unsigned char eh_cmnd[16U] ;
   struct scatterlist sense_sgl ;
};
#line 2 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/scsi_typedefs.h"
typedef struct scsi_cmnd Scsi_Cmnd;
#line 3 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/scsi_typedefs.h"
struct NCR5380_hostdata {
   unsigned int port ;
   struct Scsi_Host *host ;
   unsigned char id_mask ;
   unsigned char id_higher_mask ;
   unsigned char targets_present ;
   unsigned char volatile   busy[8U] ;
   unsigned char volatile   last_message ;
   Scsi_Cmnd volatile   *connected ;
   Scsi_Cmnd volatile   *issue_queue ;
   Scsi_Cmnd volatile   *disconnected_queue ;
   int volatile   restart_select ;
   unsigned char aborted : 1 ;
   int flags ;
   unsigned long time_expires ;
   int select_time ;
   Scsi_Cmnd volatile   *selecting ;
   struct delayed_work coroutine ;
   struct scsi_eh_save ses ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 152 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
__inline static void rep_nop(void) 
{ 


  {
#line 660
  __asm__  volatile   ("rep; nop": : : "memory");
#line 661
  return;
}
}
#line 663 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
__inline static void cpu_relax(void) 
{ 


  {
#line 665
  rep_nop();
#line 666
  return;
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5826;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5826;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5826;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5826;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_5826: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6139.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_6139.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_6139.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6139.rlock, flags);
#line 341
  return;
}
}
#line 77 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 94 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 19 "include/linux/workqueue.h"
extern void delayed_work_timer_fn(unsigned long  ) ;
#line 164
extern void __init_work(struct work_struct * , int  ) ;
#line 412
extern bool schedule_delayed_work(struct delayed_work * , unsigned long  ) ;
#line 424
extern bool cancel_delayed_work_sync(struct delayed_work * ) ;
#line 138 "include/linux/ioport.h"
extern struct resource ioport_resource ;
#line 182
extern struct resource *__request_region(struct resource * , resource_size_t  , resource_size_t  ,
                                         char const   * , int  ) ;
#line 193
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outb(unsigned char value , int port ) 
{ 


  {
#line 308
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
#line 309
  return;
}
}
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
#line 308
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
#line 308
  return (value);
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 845 "include/linux/device.h"
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 846
extern int dev_set_drvdata(struct device * , void * ) ;
#line 937
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 858 "include/linux/pci.h"
extern int pci_enable_device(struct pci_dev * ) ;
#line 875
extern void pci_disable_device(struct pci_dev * ) ;
#line 1023
extern int __pci_register_driver(struct pci_driver * , struct module * , char const   * ) ;
#line 1032
extern void pci_unregister_driver(struct pci_driver * ) ;
#line 771 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 773
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 80L) << 12) + 0xffff880000000000UL));
}
}
#line 95 "include/linux/scatterlist.h"
__inline static struct page *sg_page(struct scatterlist *sg ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 98
  tmp = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 98
  if (tmp != 0L) {
#line 98
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (98), "i" (12UL));
    ldv_19682: ;
#line 98
    goto ldv_19682;
  } else {

  }
#line 99
  tmp___0 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 99
  if (tmp___0 != 0L) {
#line 99
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (99), "i" (12UL));
    ldv_19683: ;
#line 99
    goto ldv_19683;
  } else {

  }
#line 101
  return ((struct page *)(sg->page_link & 0xfffffffffffffffcUL));
}
}
#line 199 "include/linux/scatterlist.h"
__inline static void *sg_virt(struct scatterlist *sg ) 
{ 
  struct page *tmp ;
  void *tmp___0 ;

  {
#line 201
  tmp = sg_page(sg);
#line 201
  tmp___0 = lowmem_page_address((struct page  const  *)tmp);
#line 201
  return (tmp___0 + (unsigned long )sg->offset);
}
}
#line 1445 "include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
#line 1447
  tmp = dev_get_drvdata((struct device  const  *)(& pdev->dev));
#line 1447
  return (tmp);
}
}
#line 1450 "include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
#line 1452
  dev_set_drvdata(& pdev->dev, data);
#line 1453
  return;
}
}
#line 125 "include/linux/interrupt.h"
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
#line 130 "include/linux/interrupt.h"
__inline static int request_irq(unsigned int irq , irqreturn_t (*handler)(int  , void * ) ,
                                unsigned long flags , char const   *name , void *dev ) 
{ 
  int tmp ;

  {
#line 133
  tmp = request_threaded_irq(irq, handler, 0, flags, name, dev);
#line 133
  return (tmp);
}
}
#line 178
extern void free_irq(unsigned int  , void * ) ;
#line 778 "include/scsi/scsi_host.h"
extern struct Scsi_Host *scsi_host_alloc(struct scsi_host_template * , int  ) ;
#line 779
extern int scsi_add_host_with_dma(struct Scsi_Host * , struct device * , struct device * ) ;
#line 782
extern void scsi_scan_host(struct Scsi_Host * ) ;
#line 784
extern void scsi_remove_host(struct Scsi_Host * ) ;
#line 786
extern void scsi_host_put(struct Scsi_Host * ) ;
#line 789
extern void scsi_cmd_get_serial(struct Scsi_Host * , struct scsi_cmnd * ) ;
#line 793 "include/scsi/scsi_host.h"
__inline static int scsi_add_host(struct Scsi_Host *host , struct device *dev ) 
{ 
  int tmp ;

  {
#line 796
  tmp = scsi_add_host_with_dma(host, dev, dev);
#line 796
  return (tmp);
}
}
#line 10 "include/asm-generic/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 2655 "include/linux/sched.h"
extern int _cond_resched(void) ;
#line 161 "include/scsi/scsi_cmnd.h"
__inline static unsigned int scsi_sg_count(struct scsi_cmnd *cmd ) 
{ 


  {
#line 163
  return (cmd->sdb.table.nents);
}
}
#line 166 "include/scsi/scsi_cmnd.h"
__inline static struct scatterlist *scsi_sglist(struct scsi_cmnd *cmd ) 
{ 


  {
#line 168
  return (cmd->sdb.table.sgl);
}
}
#line 171 "include/scsi/scsi_cmnd.h"
__inline static unsigned int scsi_bufflen(struct scsi_cmnd *cmd ) 
{ 


  {
#line 173
  return (cmd->sdb.length);
}
}
#line 419 "include/scsi/scsi_device.h"
__inline static unsigned int sdev_id(struct scsi_device *sdev ) 
{ 


  {
#line 421
  return (sdev->id);
}
}
#line 88 "include/scsi/scsi_eh.h"
extern void scsi_eh_prep_cmnd(struct scsi_cmnd * , struct scsi_eh_save * , unsigned char * ,
                              int  , unsigned int  ) ;
#line 92
extern void scsi_eh_restore_cmnd(struct scsi_cmnd * , struct scsi_eh_save * ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.h"
static int NCR5380_init(struct Scsi_Host *instance , int flags ) ;
#line 303
static void NCR5380_exit(struct Scsi_Host *instance ) ;
#line 304
static void NCR5380_information_transfer(struct Scsi_Host *instance ) ;
#line 306
static irqreturn_t NCR5380_intr(int dummy , void *dev_id ) ;
#line 308
static void NCR5380_main(struct work_struct *work ) ;
#line 314
static int NCR5380_abort(Scsi_Cmnd *cmd ) ;
#line 315
static int NCR5380_bus_reset(Scsi_Cmnd *cmd ) ;
#line 316
static int NCR5380_queue_command(struct Scsi_Host *shost , struct scsi_cmnd *cmd ) ;
#line 320
static void NCR5380_reselect(struct Scsi_Host *instance ) ;
#line 321
static int NCR5380_select(struct Scsi_Host *instance , Scsi_Cmnd *cmd , int tag ) ;
#line 325
static int NCR5380_transfer_pio(struct Scsi_Host *instance , unsigned char *phase ,
                                int *count , unsigned char **data ) ;
#line 7 "include/scsi/scsi_dbg.h"
extern void scsi_print_command(struct scsi_cmnd * ) ;
#line 155 "include/scsi/scsi_transport_spi.h"
extern int spi_print_msg(unsigned char const   * ) ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int do_abort(struct Scsi_Host *host ) ;
#line 282
static void do_reset(struct Scsi_Host *host ) ;
#line 291 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
__inline static void initialize_SCp(Scsi_Cmnd *cmd ) 
{ 
  unsigned int tmp ;
  void *tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 298
  tmp___1 = scsi_bufflen(cmd);
#line 298
  if (tmp___1 != 0U) {
#line 299
    cmd->SCp.buffer = scsi_sglist(cmd);
#line 300
    tmp = scsi_sg_count(cmd);
#line 300
    cmd->SCp.buffers_residual = (int )(tmp - 1U);
#line 301
    tmp___0 = sg_virt(cmd->SCp.buffer);
#line 301
    cmd->SCp.ptr = (char *)tmp___0;
#line 302
    cmd->SCp.this_residual = (int )(cmd->SCp.buffer)->length;
  } else {
#line 304
    cmd->SCp.buffer = 0;
#line 305
    cmd->SCp.buffers_residual = 0;
#line 306
    cmd->SCp.ptr = 0;
#line 307
    cmd->SCp.this_residual = 0;
  }
#line 309
  return;
}
}
#line 325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_poll_politely(struct Scsi_Host *instance , int reg , int bit ,
                                 int val , int t ) 
{ 
  unsigned int port ;
  int n ;
  unsigned long end ;
  int r ;
  unsigned char tmp ;
  int tmp___0 ;
  unsigned char tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 328
  n = 500;
#line 329
  end = (unsigned long )t + (unsigned long )jiffies;
#line 332
  port = (unsigned int )instance->io_port;
#line 334
  goto ldv_33222;
  ldv_33221: 
#line 336
  tmp = inb((int )(port + (unsigned int )reg));
#line 336
  r = (int )tmp;
#line 337
  if ((r & bit) == val) {
#line 338
    return (0);
  } else {

  }
#line 339
  cpu_relax();
  ldv_33222: 
#line 334
  tmp___0 = n;
#line 334
  n = n - 1;
#line 334
  if (tmp___0 > 0) {
#line 335
    goto ldv_33221;
  } else {

  }

#line 343
  goto ldv_33232;
  ldv_33231: 
#line 345
  tmp___1 = inb((int )(port + (unsigned int )reg));
#line 345
  r = (int )tmp___1;
#line 346
  if ((r & bit) == val) {
#line 347
    return (0);
  } else {

  }
#line 348
  tmp___2 = current_thread_info();
#line 348
  if (((unsigned long )tmp___2->preempt_count & 134217472UL) == 0UL) {
#line 349
    __might_sleep("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c",
                  349, 0);
#line 349
    _cond_resched();
  } else {
#line 351
    cpu_relax();
  }
  ldv_33232: ;
#line 343
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )end < 0L) {
#line 344
    goto ldv_33231;
  } else {

  }

#line 353
  return (-110);
}
}
#line 521 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int should_disconnect(unsigned char cmd ) 
{ 


  {
#line 523
  switch ((int )cmd) {
  case 8: ;
  case 10: ;
  case 11: ;
  case 40: ;
  case 42: ;
  case 43: ;
#line 530
  return (1);
  case 4: ;
  case 48: ;
  case 50: ;
  case 49: ;
#line 535
  return (2);
  default: ;
#line 537
  return (0);
  }
}
}
#line 541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_set_timer(struct NCR5380_hostdata *hostdata , unsigned long timeout ) 
{ 


  {
#line 543
  hostdata->time_expires = (unsigned long )jiffies + timeout;
#line 544
  schedule_delayed_work(& hostdata->coroutine, timeout);
#line 545
  return;
}
}
#line 678 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_print_status(struct Scsi_Host *instance ) 
{ 


  {
#line 680
  return;
}
}
#line 817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_init(struct Scsi_Host *instance , int flags ) 
{ 
  unsigned int port ;
  int i ;
  int pass ;
  unsigned long timeout ;
  struct NCR5380_hostdata *hostdata ;
  struct thread_info *tmp ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  unsigned char tmp___0 ;

  {
#line 822
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 824
  tmp = current_thread_info();
#line 824
  if (((unsigned long )tmp->preempt_count & 134217472UL) != 0UL) {
#line 825
    printk("\vNCR5380_init called with interrupts off!\n");
  } else {

  }
#line 836
  port = (unsigned int )instance->io_port;
#line 838
  hostdata->aborted = 0U;
#line 839
  hostdata->id_mask = (unsigned char )(1 << instance->this_id);
#line 840
  i = (int )hostdata->id_mask;
#line 840
  goto ldv_33357;
  ldv_33356: ;
#line 841
  if ((int )hostdata->id_mask < i) {
#line 842
    hostdata->id_higher_mask = (unsigned char )((int )((signed char )hostdata->id_higher_mask) | (int )((signed char )i));
  } else {

  }
#line 840
  i = i << 1;
  ldv_33357: ;
#line 840
  if (i <= 128) {
#line 841
    goto ldv_33356;
  } else {

  }
#line 843
  i = 0;
#line 843
  goto ldv_33360;
  ldv_33359: 
#line 844
  hostdata->busy[i] = 0U;
#line 843
  i = i + 1;
  ldv_33360: ;
#line 843
  if (i <= 7) {
#line 844
    goto ldv_33359;
  } else {

  }
#line 848
  hostdata->targets_present = 0U;
#line 849
  hostdata->connected = 0;
#line 850
  hostdata->issue_queue = 0;
#line 851
  hostdata->disconnected_queue = 0;
#line 853
  __init_work(& hostdata->coroutine.work, 0);
#line 853
  __constr_expr_0.counter = 4195328L;
#line 853
  hostdata->coroutine.work.data = __constr_expr_0;
#line 853
  lockdep_init_map(& hostdata->coroutine.work.lockdep_map, "(&(&hostdata->coroutine)->work)",
                   & __key, 0);
#line 853
  INIT_LIST_HEAD(& hostdata->coroutine.work.entry);
#line 853
  hostdata->coroutine.work.func = & NCR5380_main;
#line 853
  init_timer_key(& hostdata->coroutine.timer, 2U, "(&(&hostdata->coroutine)->timer)",
                 & __key___0);
#line 853
  hostdata->coroutine.timer.function = & delayed_work_timer_fn;
#line 853
  hostdata->coroutine.timer.data = (unsigned long )(& hostdata->coroutine);
#line 868
  if ((flags & 4) != 0) {
#line 869
    hostdata->flags = flags | 1;
  } else {
#line 871
    hostdata->flags = flags | 2;
  }
#line 873
  hostdata->host = instance;
#line 874
  hostdata->time_expires = 0UL;
#line 882
  outb(0, (int )(port + 1U));
#line 883
  outb(0, (int )(port + 2U));
#line 884
  outb(0, (int )(port + 3U));
#line 885
  outb(0, (int )(port + 4U));
#line 905
  pass = 1;
#line 905
  goto ldv_33373;
  ldv_33372: ;
#line 906
  switch (pass) {
  case 1: ;
  case 3: ;
  case 5: 
#line 910
  printk("\016scsi%d: SCSI bus busy, waiting up to five seconds\n", instance->host_no);
#line 911
  timeout = (unsigned long )jiffies + 1250UL;
#line 912
  NCR5380_poll_politely(instance, 4, 64, 0, 1250);
#line 913
  goto ldv_33368;
  case 2: 
#line 915
  printk("\fscsi%d: bus busy, attempting abort\n", instance->host_no);
#line 916
  do_abort(instance);
#line 917
  goto ldv_33368;
  case 4: 
#line 919
  printk("\fscsi%d: bus busy, attempting reset\n", instance->host_no);
#line 920
  do_reset(instance);
#line 921
  goto ldv_33368;
  case 6: 
#line 923
  printk("\vscsi%d: bus locked solid or invalid override\n", instance->host_no);
#line 924
  return (-6);
  }
  ldv_33368: 
#line 905
  pass = pass + 1;
  ldv_33373: 
#line 905
  tmp___0 = inb((int )(port + 4U));
#line 905
  if (((int )tmp___0 & 64) != 0 && pass <= 6) {
#line 906
    goto ldv_33372;
  } else {

  }

#line 927
  return (0);
}
}
#line 935 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_exit(struct Scsi_Host *instance ) 
{ 
  struct NCR5380_hostdata *hostdata ;

  {
#line 937
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 939
  cancel_delayed_work_sync(& hostdata->coroutine);
#line 940
  return;
}
}
#line 954 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_queue_command_lck(Scsi_Cmnd *cmd , void (*done)(Scsi_Cmnd * ) ) 
{ 
  struct Scsi_Host *instance ;
  struct NCR5380_hostdata *hostdata ;
  Scsi_Cmnd *tmp ;

  {
#line 956
  instance = (cmd->device)->host;
#line 957
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 995
  cmd->host_scribble = 0;
#line 996
  cmd->scsi_done = done;
#line 997
  cmd->result = 0;
#line 1006
  if ((unsigned long )hostdata->issue_queue == (unsigned long )((Scsi_Cmnd volatile   *)0) || (unsigned int )*(cmd->cmnd) == 3U) {
#line 1008
    cmd->host_scribble = (unsigned char *)hostdata->issue_queue;
#line 1009
    hostdata->issue_queue = (Scsi_Cmnd volatile   *)cmd;
  } else {
#line 1011
    tmp = (Scsi_Cmnd *)hostdata->issue_queue;
#line 1011
    goto ldv_33388;
    ldv_33387: 
#line 1011
    tmp = (Scsi_Cmnd *)tmp->host_scribble;
    ldv_33388: ;
#line 1011
    if ((unsigned long )tmp->host_scribble != (unsigned long )((unsigned char *)0)) {
#line 1012
      goto ldv_33387;
    } else {

    }
#line 1013
    tmp->host_scribble = (unsigned char *)cmd;
  }
#line 1019
  schedule_delayed_work(& hostdata->coroutine, 0UL);
#line 1020
  return (0);
}
}
#line 1023 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_queue_command(struct Scsi_Host *shost , struct scsi_cmnd *cmd ) 
{ 
  unsigned long irq_flags ;
  int rc ;
  raw_spinlock_t *tmp ;

  {
#line 1023
  tmp = spinlock_check(shost->host_lock);
#line 1023
  irq_flags = _raw_spin_lock_irqsave(tmp);
#line 1023
  scsi_cmd_get_serial(shost, cmd);
#line 1023
  rc = NCR5380_queue_command_lck(cmd, cmd->scsi_done);
#line 1023
  spin_unlock_irqrestore(shost->host_lock, irq_flags);
#line 1023
  return (rc);
}
}
#line 1037 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_main(struct work_struct *work ) 
{ 
  struct NCR5380_hostdata *hostdata ;
  struct work_struct  const  *__mptr ;
  struct Scsi_Host *instance ;
  Scsi_Cmnd *tmp ;
  Scsi_Cmnd *prev ;
  int done ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1040
  __mptr = (struct work_struct  const  *)work;
#line 1040
  hostdata = (struct NCR5380_hostdata *)__mptr + 0xffffffffffffffa0UL;
#line 1041
  instance = hostdata->host;
#line 1045
  spin_lock_irq(instance->host_lock);
  ldv_33419: 
#line 1048
  done = 1;
#line 1049
  if ((unsigned long )hostdata->connected == (unsigned long )((Scsi_Cmnd volatile   *)0) && (unsigned long )hostdata->selecting == (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 1055
    tmp = (Scsi_Cmnd *)hostdata->issue_queue;
#line 1055
    prev = 0;
#line 1055
    goto ldv_33411;
    ldv_33410: ;
#line 1060
    if ((((int )hostdata->busy[(tmp->device)->id] >> (int )(tmp->device)->lun) & 1) == 0) {
#line 1061
      if ((unsigned long )prev != (unsigned long )((Scsi_Cmnd *)0)) {
#line 1063
        prev->host_scribble = tmp->host_scribble;
      } else {
#line 1066
        hostdata->issue_queue = (Scsi_Cmnd volatile   *)tmp->host_scribble;
      }
#line 1068
      tmp->host_scribble = 0;
#line 1088
      hostdata->selecting = 0;
#line 1091
      tmp___0 = NCR5380_select(instance, tmp, (unsigned int )*(tmp->cmnd) == 3U ? -2 : -1);
#line 1091
      if (tmp___0 == 0) {
#line 1099
        goto ldv_33409;
      } else {
#line 1102
        tmp->host_scribble = (unsigned char *)hostdata->issue_queue;
#line 1103
        hostdata->issue_queue = (Scsi_Cmnd volatile   *)tmp;
#line 1104
        done = 0;
      }
    } else {

    }
#line 1055
    prev = tmp;
#line 1055
    tmp = (Scsi_Cmnd *)tmp->host_scribble;
    ldv_33411: ;
#line 1055
    if ((unsigned long )tmp != (unsigned long )((Scsi_Cmnd *)0)) {
#line 1056
      goto ldv_33410;
    } else {

    }
    ldv_33409: ;
  } else {

  }
#line 1112
  if ((unsigned long )hostdata->selecting != (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 1113
    tmp = (Scsi_Cmnd *)hostdata->selecting;
#line 1115
    tmp___1 = NCR5380_select(instance, tmp, (unsigned int )*(tmp->cmnd) == 3U ? -2 : -1);
#line 1115
    if (tmp___1 == 0) {

    } else {
#line 1122
      printk("\017scsi%d: device %d did not respond in time\n", instance->host_no,
             (tmp->device)->id);
#line 1124
      tmp->host_scribble = (unsigned char *)hostdata->issue_queue;
#line 1125
      hostdata->issue_queue = (Scsi_Cmnd volatile   *)tmp;
#line 1126
      NCR5380_set_timer(hostdata, 5UL);
    }
  } else {

  }
#line 1133
  if ((unsigned long )hostdata->connected != (unsigned long )((Scsi_Cmnd volatile   *)0) && (hostdata->time_expires == 0UL || ((1 != 0 && 1 != 0) && (long )jiffies - (long )hostdata->time_expires >= 0L))) {
#line 1136
    NCR5380_information_transfer(instance);
#line 1138
    done = 0;
  } else {
#line 1140
    goto ldv_33418;
  }
#line 1141
  if (done == 0) {
#line 1142
    goto ldv_33419;
  } else {

  }
  ldv_33418: 
#line 1143
  spin_unlock_irq(instance->host_lock);
#line 1144
  return;
}
}
#line 1160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static irqreturn_t NCR5380_intr(int dummy , void *dev_id ) 
{ 
  unsigned int port ;
  struct Scsi_Host *instance ;
  struct NCR5380_hostdata *hostdata ;
  int done ;
  unsigned char basr ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
#line 1163
  instance = (struct Scsi_Host *)dev_id;
#line 1164
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
  ldv_33433: 
#line 1173
  done = 1;
#line 1174
  tmp = spinlock_check(instance->host_lock);
#line 1174
  flags = _raw_spin_lock_irqsave(tmp);
#line 1176
  port = (unsigned int )instance->io_port;
#line 1177
  basr = inb((int )(port + 5U));
#line 1179
  if (((int )basr & 16) != 0) {
#line 1181
    tmp___1 = inb((int )(port + 4U));
#line 1181
    if (((int )tmp___1 & 6) == 6) {
#line 1182
      done = 0;
#line 1184
      NCR5380_reselect(instance);
#line 1185
      inb((int )(port + 7U));
    } else
#line 1186
    if (((int )basr & 32) != 0) {
#line 1188
      inb((int )(port + 7U));
    } else {
#line 1189
      tmp___0 = inb((int )(port + 4U));
#line 1189
      if ((int )((signed char )tmp___0) < 0) {
#line 1191
        inb((int )(port + 7U));
      } else {
#line 1221
        inb((int )(port + 7U));
      }
    }
  } else {

  }
#line 1225
  spin_unlock_irqrestore(instance->host_lock, flags);
#line 1226
  if (done == 0) {
#line 1227
    schedule_delayed_work(& hostdata->coroutine, 0UL);
  } else {

  }
#line 1228
  if (done == 0) {
#line 1229
    goto ldv_33433;
  } else {

  }

#line 1229
  return (IRQ_HANDLED);
}
}
#line 1242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void collect_stats(struct NCR5380_hostdata *hostdata , Scsi_Cmnd *cmd ) 
{ 


  {
#line 1244
  return;
}
}
#line 1296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_select(struct Scsi_Host *instance , Scsi_Cmnd *cmd , int tag ) 
{ 
  unsigned int port ;
  struct NCR5380_hostdata *hostdata ;
  unsigned char tmp[3U] ;
  unsigned char phase ;
  unsigned char *data ;
  int len ;
  unsigned long timeout ;
  unsigned char value ;
  int err ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  unsigned char tmp___2 ;
  unsigned char tmp___3 ;
  unsigned int tmp___4 ;
  unsigned char tmp___5 ;
  unsigned char tmp___6 ;
  unsigned int tmp___7 ;
  unsigned char tmp___8 ;
  unsigned int tmp___9 ;

  {
#line 1299
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 1306
  port = (unsigned int )instance->io_port;
#line 1308
  if ((unsigned long )hostdata->selecting != (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 1309
    goto part2;
  } else {

  }
#line 1311
  hostdata->restart_select = 0;
#line 1321
  outb(0, (int )(port + 3U));
#line 1327
  outb((int )hostdata->id_mask, (int )port);
#line 1328
  outb(1, (int )(port + 2U));
#line 1333
  spin_unlock_irq(instance->host_lock);
#line 1334
  err = NCR5380_poll_politely(instance, 1, 64, 64, 1250);
#line 1335
  spin_lock_irq(instance->host_lock);
#line 1336
  if (err < 0) {
#line 1337
    printk("\017scsi: arbitration timeout at %d\n", 1337);
#line 1338
    outb(0, (int )(port + 2U));
#line 1339
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1340
    goto failed;
  } else {

  }
#line 1352
  __const_udelay(12885UL);
#line 1355
  tmp___0 = inb((int )(port + 1U));
#line 1355
  if (((int )tmp___0 & 32) != 0) {
#line 1356
    outb(0, (int )(port + 2U));
#line 1358
    goto failed;
  } else {
#line 1355
    tmp___1 = inb((int )port);
#line 1355
    if ((unsigned int )((int )tmp___1 & (int )hostdata->id_higher_mask) != 0U) {
#line 1356
      outb(0, (int )(port + 2U));
#line 1358
      goto failed;
    } else {
#line 1355
      tmp___2 = inb((int )(port + 1U));
#line 1355
      if (((int )tmp___2 & 32) != 0) {
#line 1356
        outb(0, (int )(port + 2U));
#line 1358
        goto failed;
      } else {

      }
    }
  }
#line 1360
  outb(4, (int )(port + 1U));
#line 1362
  if ((hostdata->flags & 16) == 0) {
#line 1362
    tmp___3 = inb((int )(port + 1U));
#line 1362
    if (((int )tmp___3 & 32) != 0) {
#line 1368
      outb(0, (int )(port + 2U));
#line 1369
      outb(0, (int )(port + 1U));
#line 1371
      goto failed;
    } else {

    }
  } else {

  }
#line 1378
  __const_udelay(8590UL);
#line 1387
  tmp___4 = sdev_id(cmd->device);
#line 1387
  outb((int )((unsigned char )((int )((signed char )hostdata->id_mask) | (int )((signed char )(1 << (int )tmp___4)))),
       (int )port);
#line 1395
  outb(15, (int )(port + 1U));
#line 1396
  outb(0, (int )(port + 2U));
#line 1402
  outb(0, (int )(port + 4U));
#line 1408
  __const_udelay(4295UL);
#line 1411
  outb(7, (int )(port + 1U));
#line 1430
  __const_udelay(4295UL);
#line 1439
  timeout = (unsigned long )jiffies + 62UL;
#line 1447
  hostdata->select_time = 0;
#line 1448
  hostdata->selecting = (Scsi_Cmnd volatile   *)cmd;
  part2: 
#line 1454
  tmp___5 = inb((int )(port + 4U));
#line 1454
  value = (unsigned int )tmp___5 & 68U;
#line 1456
  if ((unsigned int )value == 0U && hostdata->select_time <= 61) {
#line 1458
    hostdata->select_time = hostdata->select_time + 1;
#line 1459
    NCR5380_set_timer(hostdata, 1UL);
#line 1460
    return (0);
  } else {

  }
#line 1464
  hostdata->selecting = 0;
#line 1466
  tmp___6 = inb((int )(port + 4U));
#line 1466
  if (((int )tmp___6 & 6) == 6) {
#line 1467
    outb(0, (int )(port + 1U));
#line 1468
    NCR5380_reselect(instance);
#line 1469
    printk("scsi%d : reselection after won arbitration?\n", instance->host_no);
#line 1470
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1471
    return (-1);
  } else {

  }
#line 1479
  __const_udelay(4295UL);
#line 1481
  outb(2, (int )(port + 1U));
#line 1483
  tmp___8 = inb((int )(port + 4U));
#line 1483
  if (((int )tmp___8 & 64) == 0) {
#line 1484
    outb(0, (int )(port + 1U));
#line 1485
    tmp___7 = sdev_id(cmd->device);
#line 1485
    if (((int )hostdata->targets_present >> (int )tmp___7) & 1) {
#line 1486
      printk("\017scsi%d : weirdness\n", instance->host_no);
#line 1487
      if ((int )hostdata->restart_select != 0) {
#line 1488
        printk("\017\trestart select\n");
      } else {

      }
#line 1490
      outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1491
      return (-1);
    } else {

    }
#line 1493
    cmd->result = 262144;
#line 1494
    collect_stats(hostdata, cmd);
#line 1495
    (*(cmd->scsi_done))(cmd);
#line 1496
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1498
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1499
    return (0);
  } else {

  }
#line 1501
  tmp___9 = sdev_id(cmd->device);
#line 1501
  hostdata->targets_present = (unsigned char )((int )((signed char )hostdata->targets_present) | (int )((signed char )(1 << (int )tmp___9)));
#line 1520
  spin_unlock_irq(instance->host_lock);
#line 1521
  err = NCR5380_poll_politely(instance, 4, 32, 32, 250);
#line 1522
  spin_lock_irq(instance->host_lock);
#line 1524
  if (err != 0) {
#line 1525
    printk("\vscsi%d: timeout at NCR5380.c:%d\n", instance->host_no, 1525);
#line 1526
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 1527
    goto failed;
  } else {

  }
#line 1531
  tmp[0] = (instance->irq != 255U ? 192U : 128U) | ((unsigned int )((unsigned char )(cmd->device)->lun) & 7U);
#line 1533
  len = 1;
#line 1534
  cmd->tag = 0U;
#line 1537
  data = (unsigned char *)(& tmp);
#line 1538
  phase = 24U;
#line 1539
  NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 1542
  hostdata->connected = (Scsi_Cmnd volatile   *)cmd;
#line 1543
  hostdata->busy[(cmd->device)->id] = (unsigned char volatile   )((int )((signed char )hostdata->busy[(cmd->device)->id]) | (int )((signed char )(1 << (int )(cmd->device)->lun)));
#line 1545
  initialize_SCp(cmd);
#line 1547
  return (0);
  failed: ;
#line 1551
  return (-1);
}
}
#line 1580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_transfer_pio(struct Scsi_Host *instance , unsigned char *phase ,
                                int *count , unsigned char **data ) 
{ 
  unsigned int port ;
  unsigned char p ;
  unsigned char tmp ;
  int c ;
  unsigned char *d ;
  int break_allowed ;
  struct NCR5380_hostdata *hostdata ;

  {
#line 1582
  p = *phase;
#line 1583
  c = *count;
#line 1584
  d = *data;
#line 1588
  break_allowed = 0;
#line 1589
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 1590
  port = (unsigned int )instance->io_port;
#line 1603
  outb((int )p >> 2, (int )(port + 3U));
#line 1608
  if ((unsigned int )p == 4U || (unsigned int )p == 0U) {
#line 1609
    break_allowed = 1;
  } else {

  }
  ldv_33472: ;
#line 1623
  goto ldv_33469;
  ldv_33468: ;
  ldv_33469: 
#line 1623
  tmp = inb((int )(port + 4U));
#line 1623
  if (((int )tmp & 32) == 0 && break_allowed == 0) {
#line 1624
    goto ldv_33468;
  } else {

  }

#line 1624
  if (((int )tmp & 32) == 0) {
#line 1626
    NCR5380_set_timer(hostdata, 5UL);
#line 1627
    goto ldv_33471;
  } else {

  }
#line 1633
  if (((int )tmp & 28) != (int )p) {
#line 1636
    goto ldv_33471;
  } else {

  }
#line 1639
  if (((int )p & 4) == 0) {
#line 1640
    outb((int )*d, (int )port);
  } else {
#line 1642
    *d = inb((int )port);
  }
#line 1644
  d = d + 1;
#line 1653
  if (((int )p & 4) == 0) {
#line 1654
    if (((int )p & 16) == 0 || c <= 1) {
#line 1655
      outb(1, (int )(port + 1U));
#line 1657
      outb(17, (int )(port + 1U));
    } else {
#line 1659
      outb(3, (int )(port + 1U));
#line 1661
      outb(19, (int )(port + 1U));
    }
  } else {
#line 1665
    outb(16, (int )(port + 1U));
  }
#line 1669
  NCR5380_poll_politely(instance, 4, 32, 0, 1250);
#line 1683
  if ((unsigned int )p != 28U || c != 1) {
#line 1684
    if ((unsigned int )p == 24U && c > 1) {
#line 1685
      outb(2, (int )(port + 1U));
    } else {
#line 1687
      outb(0, (int )(port + 1U));
    }
  } else {

  }
#line 1689
  c = c - 1;
#line 1689
  if (c != 0) {
#line 1690
    goto ldv_33472;
  } else {

  }
  ldv_33471: 
#line 1693
  *count = c;
#line 1694
  *data = d;
#line 1695
  tmp = inb((int )(port + 4U));
#line 1696
  if (((int )tmp & 32) != 0) {
#line 1697
    *phase = (unsigned int )tmp & 28U;
  } else {
#line 1699
    *phase = 255U;
  }
#line 1701
  if (c == 0 || (int )*phase == (int )p) {
#line 1702
    return (0);
  } else {
#line 1704
    return (-1);
  }
}
}
#line 1717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void do_reset(struct Scsi_Host *host ) 
{ 
  unsigned int port ;
  unsigned char tmp ;

  {
#line 1719
  port = (unsigned int )host->io_port;
#line 1721
  tmp = inb((int )(port + 4U));
#line 1721
  outb((int )((unsigned char )(((int )tmp & 28) >> 2)), (int )(port + 3U));
#line 1722
  outb(128, (int )(port + 1U));
#line 1723
  __const_udelay(107375UL);
#line 1724
  outb(0, (int )(port + 1U));
#line 1725
  return;
}
}
#line 1739 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int do_abort(struct Scsi_Host *host ) 
{ 
  unsigned int port ;
  unsigned char *msgptr ;
  unsigned char phase ;
  unsigned char tmp ;
  int len ;
  int rc ;

  {
#line 1744
  port = (unsigned int )host->io_port;
#line 1748
  outb(2, (int )(port + 1U));
#line 1760
  rc = NCR5380_poll_politely(host, 4, 32, 32, 15000);
#line 1762
  if (rc < 0) {
#line 1763
    return (-1);
  } else {

  }
#line 1765
  tmp = (unsigned char )rc;
#line 1767
  outb((int )tmp >> 2, (int )(port + 3U));
#line 1769
  if (((int )tmp & 28) != 24) {
#line 1770
    outb(18, (int )(port + 1U));
#line 1771
    rc = NCR5380_poll_politely(host, 4, 32, 0, 750);
#line 1772
    outb(2, (int )(port + 1U));
#line 1773
    if (rc == -1) {
#line 1774
      return (-1);
    } else {

    }
  } else {

  }
#line 1776
  tmp = 6U;
#line 1777
  msgptr = & tmp;
#line 1778
  len = 1;
#line 1779
  phase = 24U;
#line 1780
  NCR5380_transfer_pio(host, & phase, & len, & msgptr);
#line 1787
  return (len != 0 ? -1 : 0);
}
}
#line 2093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_information_transfer(struct Scsi_Host *instance ) 
{ 
  unsigned int port ;
  struct NCR5380_hostdata *hostdata ;
  unsigned char msgout ;
  int sink ;
  int len ;
  unsigned char *data ;
  unsigned char phase ;
  unsigned char tmp ;
  unsigned char extended_msg[10U] ;
  unsigned char old_phase ;
  Scsi_Cmnd *cmd ;
  unsigned long poll_time ;
  unsigned char tmp___0 ;
  void *tmp___1 ;
  unsigned char tmp___2 ;
  unsigned char tmp___3 ;
  int tmp___4 ;

  {
#line 2095
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 2096
  msgout = 8U;
#line 2097
  sink = 0;
#line 2103
  old_phase = 255U;
#line 2104
  cmd = (Scsi_Cmnd *)hostdata->connected;
#line 2106
  poll_time = (unsigned long )jiffies + 50UL;
#line 2108
  port = (unsigned int )instance->io_port;
  ldv_33543: 
#line 2111
  tmp = inb((int )(port + 4U));
#line 2113
  if (((int )tmp & 32) != 0) {
#line 2114
    phase = (unsigned int )tmp & 28U;
#line 2115
    if ((int )phase != (int )old_phase) {
#line 2116
      old_phase = phase;
    } else {

    }
#line 2119
    if (sink != 0 && (unsigned int )phase != 24U) {
#line 2120
      outb((int )tmp >> 2, (int )(port + 3U));
#line 2122
      outb(18, (int )(port + 1U));
#line 2123
      goto ldv_33502;
      ldv_33501: ;
      ldv_33502: 
#line 2123
      tmp___0 = inb((int )(port + 4U));
#line 2123
      if (((int )tmp___0 & 32) != 0) {
#line 2124
        goto ldv_33501;
      } else {

      }
#line 2124
      outb(2, (int )(port + 1U));
#line 2125
      sink = 0;
#line 2126
      goto ldv_33504;
    } else {

    }
#line 2128
    switch ((int )phase) {
    case 4: ;
    case 0: ;
#line 2144
    if (cmd->SCp.this_residual == 0 && cmd->SCp.buffers_residual != 0) {
#line 2145
      cmd->SCp.buffer = cmd->SCp.buffer + 1;
#line 2146
      cmd->SCp.buffers_residual = cmd->SCp.buffers_residual - 1;
#line 2147
      cmd->SCp.this_residual = (int )(cmd->SCp.buffer)->length;
#line 2148
      tmp___1 = sg_virt(cmd->SCp.buffer);
#line 2148
      cmd->SCp.ptr = (char *)tmp___1;
    } else {

    }
#line 2204
    NCR5380_transfer_pio(instance, & phase, & cmd->SCp.this_residual, (unsigned char **)(& cmd->SCp.ptr));
#line 2206
    goto ldv_33507;
    case 28: 
#line 2208
    len = 1;
#line 2209
    data = & tmp;
#line 2210
    NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2211
    cmd->SCp.Message = (int volatile   )tmp;
#line 2213
    switch ((int )tmp) {
    case 6: ;
    case 0: 
#line 2254
    sink = 1;
#line 2255
    outb(0, (int )(port + 1U));
#line 2256
    hostdata->connected = 0;
#line 2258
    hostdata->busy[(cmd->device)->id] = (unsigned char volatile   )((int )((signed char )hostdata->busy[(cmd->device)->id]) & ~ ((int )((signed char )(1 << (int )(cmd->device)->lun))));
#line 2276
    if ((unsigned int )*(cmd->cmnd) != 3U) {
#line 2277
      cmd->result = (int )cmd->SCp.Status | (int )(cmd->SCp.Message << 8);
    } else
#line 2278
    if (((int )(cmd->SCp.Status >> 1) & 127) != 0) {
#line 2279
      cmd->result = (cmd->result & 65535) | 458752;
    } else {

    }
#line 2282
    if ((unsigned int )*(cmd->cmnd) == 3U && (unsigned int )hostdata->ses.cmd_len != 0U) {
#line 2284
      scsi_eh_restore_cmnd(cmd, & hostdata->ses);
#line 2285
      hostdata->ses.cmd_len = 0U;
    } else {

    }
#line 2288
    if ((unsigned int )*(cmd->cmnd) != 3U && ((int )(cmd->SCp.Status >> 1) & 127) == 1) {
#line 2289
      scsi_eh_prep_cmnd(cmd, & hostdata->ses, 0, 0, 4294967295U);
#line 2294
      cmd->host_scribble = (unsigned char *)hostdata->issue_queue;
#line 2296
      hostdata->issue_queue = (Scsi_Cmnd volatile   *)cmd;
    } else {
#line 2301
      collect_stats(hostdata, cmd);
#line 2302
      (*(cmd->scsi_done))(cmd);
    }
#line 2305
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 2310
    outb(0, (int )(port + 3U));
#line 2312
    goto ldv_33512;
    ldv_33511: 
#line 2313
    __asm__  volatile   ("": : : "memory");
    ldv_33512: 
#line 2312
    tmp___2 = inb((int )(port + 4U));
#line 2312
    if (((int )tmp___2 & 64) != 0 && (unsigned long )hostdata->connected == (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 2313
      goto ldv_33511;
    } else {

    }

#line 2314
    return;
    case 7: 
#line 2317
    outb(0, (int )(port + 1U));
#line 2318
    switch ((int )hostdata->last_message) {
    case 33: ;
    case 34: ;
    case 32: 
#line 2322
    (cmd->device)->simple_tags = 0U;
#line 2323
    hostdata->busy[(cmd->device)->id] = (unsigned char volatile   )((int )((signed char )hostdata->busy[(cmd->device)->id]) | (int )((signed char )(1 << (int )(cmd->device)->lun)));
#line 2324
    goto ldv_33518;
    default: ;
#line 2326
    goto ldv_33518;
    }
    ldv_33518: ;
    case 4: 
#line 2330
    outb(0, (int )(port + 1U));
#line 2331
    (cmd->device)->disconnect = 1U;
#line 2333
    cmd->host_scribble = (unsigned char *)hostdata->disconnected_queue;
#line 2335
    hostdata->connected = 0;
#line 2336
    hostdata->disconnected_queue = (Scsi_Cmnd volatile   *)cmd;
#line 2342
    outb(0, (int )(port + 3U));
#line 2345
    outb((int )hostdata->id_mask, (int )(port + 4U));
#line 2348
    goto ldv_33522;
    ldv_33521: 
#line 2349
    __asm__  volatile   ("": : : "memory");
    ldv_33522: 
#line 2348
    tmp___3 = inb((int )(port + 4U));
#line 2348
    if (((int )tmp___3 & 64) != 0 && (unsigned long )hostdata->connected == (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 2349
      goto ldv_33521;
    } else {

    }

#line 2350
    return;
    case 2: ;
    case 3: 
#line 2365
    outb(0, (int )(port + 1U));
#line 2366
    goto ldv_33526;
    case 1: 
#line 2380
    extended_msg[0] = 1U;
#line 2382
    outb(0, (int )(port + 1U));
#line 2385
    len = 2;
#line 2386
    data = (unsigned char *)(& extended_msg) + 1UL;
#line 2387
    phase = 28U;
#line 2388
    NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2392
    if (len == 0 && (unsigned int )extended_msg[1] <= 9U) {
#line 2394
      outb(0, (int )(port + 1U));
#line 2395
      len = (int )extended_msg[1] + -1;
#line 2396
      data = (unsigned char *)(& extended_msg) + 3UL;
#line 2397
      phase = 28U;
#line 2399
      NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2402
      switch ((int )extended_msg[2]) {
      case 1: ;
      case 3: ;
      case 0: ;
      case 2: 
#line 2407
      tmp = 0U;
      }
    } else
#line 2409
    if (len != 0) {
#line 2410
      printk("scsi%d: error receiving extended message\n", instance->host_no);
#line 2411
      tmp = 0U;
    } else {
#line 2413
      printk("scsi%d: extended message code %02x length %d is too long\n", instance->host_no,
             (int )extended_msg[2], (int )extended_msg[1]);
#line 2414
      tmp = 0U;
    }
    default: ;
#line 2423
    if ((unsigned int )tmp == 0U) {
#line 2424
      printk("scsi%d: rejecting message ", instance->host_no);
#line 2425
      spi_print_msg((unsigned char const   *)(& extended_msg));
#line 2426
      printk("\n");
    } else
#line 2427
    if ((unsigned int )tmp != 1U) {
#line 2428
      if ((unsigned long )(cmd->request)->rq_disk != (unsigned long )((struct gendisk *)0)) {
#line 2428
        dev_printk("\016", (struct device  const  *)(& (cmd->device)->sdev_gendev),
                   "[%s] rejecting unknown message %02x\n", (char *)(& ((cmd->request)->rq_disk)->disk_name),
                   (int )tmp);
      } else {
#line 2428
        dev_printk("\016", (struct device  const  *)(& (cmd->device)->sdev_gendev),
                   "rejecting unknown message %02x\n", (int )tmp);
      }
    } else
#line 2431
    if ((unsigned long )(cmd->request)->rq_disk != (unsigned long )((struct gendisk *)0)) {
#line 2431
      dev_printk("\016", (struct device  const  *)(& (cmd->device)->sdev_gendev),
                 "[%s] rejecting unknown extended message code %02x, length %d\n",
                 (char *)(& ((cmd->request)->rq_disk)->disk_name), (int )extended_msg[1],
                 (int )extended_msg[0]);
    } else {
#line 2431
      dev_printk("\016", (struct device  const  *)(& (cmd->device)->sdev_gendev),
                 "rejecting unknown extended message code %02x, length %d\n", (int )extended_msg[1],
                 (int )extended_msg[0]);
    }
#line 2434
    msgout = 7U;
#line 2435
    outb(2, (int )(port + 1U));
#line 2436
    goto ldv_33526;
    }
    ldv_33526: ;
#line 2438
    goto ldv_33507;
    case 24: 
#line 2440
    len = 1;
#line 2441
    data = & msgout;
#line 2442
    hostdata->last_message = msgout;
#line 2443
    NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2444
    if ((unsigned int )msgout == 6U) {
#line 2445
      hostdata->busy[(cmd->device)->id] = (unsigned char volatile   )((int )((signed char )hostdata->busy[(cmd->device)->id]) & ~ ((int )((signed char )(1 << (int )(cmd->device)->lun))));
#line 2446
      hostdata->connected = 0;
#line 2447
      cmd->result = 458752;
#line 2448
      collect_stats(hostdata, cmd);
#line 2449
      (*(cmd->scsi_done))(cmd);
#line 2450
      outb((int )hostdata->id_mask, (int )(port + 4U));
#line 2451
      return;
    } else {

    }
#line 2453
    msgout = 8U;
#line 2454
    goto ldv_33507;
    case 8: 
#line 2456
    len = (int )cmd->cmd_len;
#line 2457
    data = cmd->cmnd;
#line 2463
    NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2464
    if ((unsigned int )*((unsigned char *)cmd->device + 292UL) == 0U) {
#line 2464
      tmp___4 = should_disconnect((int )*(cmd->cmnd));
#line 2464
      if (tmp___4 != 0) {
#line 2465
        NCR5380_set_timer(hostdata, 5UL);
#line 2467
        return;
      } else {

      }
    } else {

    }
#line 2469
    goto ldv_33507;
    case 12: 
#line 2471
    len = 1;
#line 2472
    data = & tmp;
#line 2473
    NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2474
    cmd->SCp.Status = (int volatile   )tmp;
#line 2475
    goto ldv_33507;
    default: 
#line 2477
    printk("scsi%d : unknown phase\n", instance->host_no);
    }
    ldv_33507: ;
  } else
#line 2484
  if ((unsigned int )*((unsigned char *)cmd->device + 292UL) == 0U && ((1 != 0 && 1 != 0) && (long )jiffies - (long )poll_time >= 0L)) {
#line 2485
    NCR5380_set_timer(hostdata, 5UL);
#line 2487
    return;
  } else {

  }
  ldv_33504: ;
#line 2490
  goto ldv_33543;
}
}
#line 2505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static void NCR5380_reselect(struct Scsi_Host *instance ) 
{ 
  unsigned int port ;
  struct NCR5380_hostdata *hostdata ;
  unsigned char target_mask ;
  unsigned char lun ;
  unsigned char phase ;
  int len ;
  unsigned char msg[3U] ;
  unsigned char *data ;
  Scsi_Cmnd *tmp ;
  Scsi_Cmnd *prev ;
  int abort ;
  unsigned char tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2507
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 2514
  tmp = 0;
#line 2515
  abort = 0;
#line 2516
  port = (unsigned int )instance->io_port;
#line 2523
  outb(0, (int )(port + 2U));
#line 2524
  hostdata->restart_select = 1;
#line 2526
  tmp___0 = inb((int )port);
#line 2526
  target_mask = (unsigned char )((int )((signed char )tmp___0) & (int )((signed char )(~ ((int )hostdata->id_mask))));
#line 2538
  outb(8, (int )(port + 1U));
#line 2541
  tmp___1 = NCR5380_poll_politely(instance, 4, 2, 0, 500);
#line 2541
  if (tmp___1 < 0) {
#line 2542
    abort = 1;
  } else {

  }
#line 2544
  outb(0, (int )(port + 1U));
#line 2551
  tmp___2 = NCR5380_poll_politely(instance, 4, 32, 32, 500);
#line 2551
  if (tmp___2 != 0) {
#line 2552
    abort = 1;
  } else {

  }
#line 2554
  len = 1;
#line 2555
  data = (unsigned char *)(& msg);
#line 2556
  phase = 28U;
#line 2557
  NCR5380_transfer_pio(instance, & phase, & len, & data);
#line 2559
  if ((int )((signed char )msg[0]) >= 0) {
#line 2560
    printk("\vscsi%d : expecting IDENTIFY message, got ", instance->host_no);
#line 2561
    spi_print_msg((unsigned char const   *)(& msg));
#line 2562
    abort = 1;
  } else {
#line 2565
    outb(0, (int )(port + 1U));
#line 2566
    lun = (unsigned int )msg[0] & 7U;
#line 2580
    tmp = (Scsi_Cmnd *)hostdata->disconnected_queue;
#line 2580
    prev = 0;
#line 2580
    goto ldv_33560;
    ldv_33559: ;
#line 2581
    if ((int )target_mask == 1 << (int )(tmp->device)->id && (unsigned int )lun == (tmp->device)->lun) {
#line 2583
      if ((unsigned long )prev != (unsigned long )((Scsi_Cmnd *)0)) {
#line 2585
        prev->host_scribble = tmp->host_scribble;
      } else {
#line 2588
        hostdata->disconnected_queue = (Scsi_Cmnd volatile   *)tmp->host_scribble;
      }
#line 2590
      tmp->host_scribble = 0;
#line 2591
      goto ldv_33558;
    } else {

    }
#line 2580
    prev = tmp;
#line 2580
    tmp = (Scsi_Cmnd *)tmp->host_scribble;
    ldv_33560: ;
#line 2580
    if ((unsigned long )tmp != (unsigned long )((Scsi_Cmnd *)0)) {
#line 2581
      goto ldv_33559;
    } else {

    }
    ldv_33558: ;
#line 2593
    if ((unsigned long )tmp == (unsigned long )((Scsi_Cmnd *)0)) {
#line 2594
      printk("\vscsi%d : warning : target bitmask %02x lun %d not in disconnect_queue.\n",
             instance->host_no, (int )target_mask, (int )lun);
#line 2599
      abort = 1;
    } else {

    }
  }
#line 2603
  if (abort != 0) {
#line 2604
    do_abort(instance);
  } else {
#line 2606
    hostdata->connected = (Scsi_Cmnd volatile   *)tmp;
  }
#line 2607
  return;
}
}
#line 2679 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_abort(Scsi_Cmnd *cmd ) 
{ 
  unsigned int port ;
  struct Scsi_Host *instance ;
  struct NCR5380_hostdata *hostdata ;
  Scsi_Cmnd *tmp ;
  Scsi_Cmnd **prev ;
  int tmp___0 ;

  {
#line 2681
  instance = (cmd->device)->host;
#line 2682
  hostdata = (struct NCR5380_hostdata *)(& instance->hostdata);
#line 2685
  printk("\fscsi%d : aborting command\n", instance->host_no);
#line 2686
  scsi_print_command(cmd);
#line 2688
  NCR5380_print_status(instance);
#line 2690
  port = (unsigned int )instance->io_port;
#line 2732
  prev = (Scsi_Cmnd **)(& hostdata->issue_queue);
#line 2732
  tmp = (Scsi_Cmnd *)hostdata->issue_queue;
#line 2732
  goto ldv_33570;
  ldv_33569: ;
#line 2733
  if ((unsigned long )cmd == (unsigned long )tmp) {
#line 2735
    *prev = (Scsi_Cmnd *)tmp->host_scribble;
#line 2736
    tmp->host_scribble = 0;
#line 2737
    tmp->result = 327680;
#line 2739
    (*(tmp->scsi_done))(tmp);
#line 2740
    return (8194);
  } else {

  }
#line 2732
  prev = (Scsi_Cmnd **)(& tmp->host_scribble);
#line 2732
  tmp = (Scsi_Cmnd *)tmp->host_scribble;
  ldv_33570: ;
#line 2732
  if ((unsigned long )tmp != (unsigned long )((Scsi_Cmnd *)0)) {
#line 2733
    goto ldv_33569;
  } else {

  }

#line 2759
  if ((unsigned long )hostdata->connected != (unsigned long )((Scsi_Cmnd volatile   *)0)) {
#line 2761
    return (8195);
  } else {

  }
#line 2788
  tmp = (Scsi_Cmnd *)hostdata->disconnected_queue;
#line 2788
  goto ldv_33576;
  ldv_33575: ;
#line 2789
  if ((unsigned long )cmd == (unsigned long )tmp) {
#line 2792
    tmp___0 = NCR5380_select(instance, cmd, (int )cmd->tag);
#line 2792
    if (tmp___0 != 0) {
#line 2793
      return (8195);
    } else {

    }
#line 2796
    do_abort(instance);
#line 2798
    prev = (Scsi_Cmnd **)(& hostdata->disconnected_queue);
#line 2798
    tmp = (Scsi_Cmnd *)hostdata->disconnected_queue;
#line 2798
    goto ldv_33573;
    ldv_33572: ;
#line 2799
    if ((unsigned long )cmd == (unsigned long )tmp) {
#line 2801
      *prev = (Scsi_Cmnd *)tmp->host_scribble;
#line 2802
      tmp->host_scribble = 0;
#line 2803
      tmp->result = 327680;
#line 2804
      (*(tmp->scsi_done))(tmp);
#line 2805
      return (8194);
    } else {

    }
#line 2798
    prev = (Scsi_Cmnd **)(& tmp->host_scribble);
#line 2798
    tmp = (Scsi_Cmnd *)tmp->host_scribble;
    ldv_33573: ;
#line 2798
    if ((unsigned long )tmp != (unsigned long )((Scsi_Cmnd *)0)) {
#line 2799
      goto ldv_33572;
    } else {

    }

  } else {

  }
#line 2788
  tmp = (Scsi_Cmnd *)tmp->host_scribble;
  ldv_33576: ;
#line 2788
  if ((unsigned long )tmp != (unsigned long )((Scsi_Cmnd *)0)) {
#line 2789
    goto ldv_33575;
  } else {

  }
#line 2817
  printk("\fscsi%d : warning : SCSI command probably completed successfully\n         before abortion\n",
         instance->host_no);
#line 2819
  return (8195);
}
}
#line 2833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/scsi/NCR5380.c"
static int NCR5380_bus_reset(Scsi_Cmnd *cmd ) 
{ 
  struct Scsi_Host *instance ;
  unsigned int port ;

  {
#line 2835
  instance = (cmd->device)->host;
#line 2838
  port = (unsigned int )instance->io_port;
#line 2839
  NCR5380_print_status(instance);
#line 2841
  spin_lock_irq(instance->host_lock);
#line 2842
  do_reset(instance);
#line 2843
  spin_unlock_irq(instance->host_lock);
#line 2845
  return (8194);
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static struct scsi_host_template dmx3191d_driver_template  = 
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
     {0, "Domex DMX3191D", 0, 0, 0, 0, 0, & NCR5380_queue_command, 0, & NCR5380_abort,
    0, 0, & NCR5380_bus_reset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "dmx3191d",
    0, 32, 7, 128U, (unsigned short)0, (unsigned short)0, 0UL, 2, (unsigned char)0,
    (unsigned char)0, (unsigned char)0, 0U, (unsigned char)0, (unsigned char)0, (unsigned char)0,
    0U, 0, 0, {0, 0}, 0ULL};
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static int dmx3191d_probe_one(struct pci_dev *pdev , struct pci_device_id  const  *id ) 
{ 
  struct Scsi_Host *shost ;
  unsigned long io ;
  int error ;
  int tmp ;
  struct resource *tmp___0 ;
  int tmp___1 ;

  {
#line 84
  error = -19;
#line 86
  tmp = pci_enable_device(pdev);
#line 86
  if (tmp != 0) {
#line 87
    goto out;
  } else {

  }
#line 89
  io = (unsigned long )pdev->resource[0].start;
#line 90
  tmp___0 = __request_region(& ioport_resource, (resource_size_t )io, 8ULL, "dmx3191d",
                             0);
#line 90
  if ((unsigned long )tmp___0 == (unsigned long )((struct resource *)0)) {
#line 91
    printk("\vdmx3191: region 0x%lx-0x%lx already reserved\n", io, io + 8UL);
#line 93
    goto out_disable_device;
  } else {

  }
#line 96
  shost = scsi_host_alloc(& dmx3191d_driver_template, 424);
#line 98
  if ((unsigned long )shost == (unsigned long )((struct Scsi_Host *)0)) {
#line 99
    goto out_release_region;
  } else {

  }
#line 100
  shost->io_port = io;
#line 101
  shost->irq = pdev->irq;
#line 103
  NCR5380_init(shost, 24);
#line 105
  tmp___1 = request_irq(pdev->irq, & NCR5380_intr, 128UL, "dmx3191d", (void *)shost);
#line 105
  if (tmp___1 != 0) {
#line 110
    printk("\fdmx3191: IRQ %d not available - switching to polled mode.\n", pdev->irq);
#line 112
    shost->irq = 255U;
  } else {

  }
#line 115
  pci_set_drvdata(pdev, (void *)shost);
#line 117
  error = scsi_add_host(shost, & pdev->dev);
#line 118
  if (error != 0) {
#line 119
    goto out_free_irq;
  } else {

  }
#line 121
  scsi_scan_host(shost);
#line 122
  return (0);
  out_free_irq: 
#line 125
  free_irq(shost->irq, (void *)shost);
  out_release_region: 
#line 127
  __release_region(& ioport_resource, (resource_size_t )io, 8ULL);
  out_disable_device: 
#line 129
  pci_disable_device(pdev);
  out: ;
#line 131
  return (error);
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static void dmx3191d_remove_one(struct pci_dev *pdev ) 
{ 
  struct Scsi_Host *shost ;
  void *tmp ;

  {
#line 136
  tmp = pci_get_drvdata(pdev);
#line 136
  shost = (struct Scsi_Host *)tmp;
#line 138
  scsi_remove_host(shost);
#line 140
  NCR5380_exit(shost);
#line 142
  if (shost->irq != 255U) {
#line 143
    free_irq(shost->irq, (void *)shost);
  } else {

  }
#line 144
  __release_region(& ioport_resource, (resource_size_t )shost->io_port, 8ULL);
#line 145
  pci_disable_device(pdev);
#line 147
  scsi_host_put(shost);
#line 148
  return;
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static struct pci_device_id dmx3191d_pci_tbl[2U]  = {      {4938U, 1U, 4294967295U, 4294967295U, 0U, 0U, 4UL}};
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
struct pci_device_id  const  __mod_pci_device_table  ;
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static struct pci_driver dmx3191d_pci_driver  = 
#line 157
     {{0, 0}, "dmx3191d", (struct pci_device_id  const  *)(& dmx3191d_pci_tbl), & dmx3191d_probe_one,
    & dmx3191d_remove_one, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, (_Bool)0, 0, 0, 0, 0,
                                                 0, 0, 0, 0, 0, 0}, {{{{{{0U}}, 0U,
                                                                        0U, 0, {0,
                                                                                {0,
                                                                                 0},
                                                                                0,
                                                                                0,
                                                                                0UL}}}},
                                                                     {0, 0}}};
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static int dmx3191d_init(void) 
{ 
  int tmp ;

  {
#line 166
  tmp = __pci_register_driver(& dmx3191d_pci_driver, & __this_module, "dmx3191d");
#line 166
  return (tmp);
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
static void dmx3191d_exit(void) 
{ 


  {
#line 171
  pci_unregister_driver(& dmx3191d_pci_driver);
#line 172
  return;
}
}
#line 197
void ldv_check_final_state(void) ;
#line 200
extern void ldv_check_return_value(int  ) ;
#line 203
extern void ldv_check_return_value_probe(int  ) ;
#line 206
extern void ldv_initialize(void) ;
#line 209
extern void ldv_handler_precall(void) ;
#line 212
extern int nondet_int(void) ;
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/scsi/dmx3191d.c.prepared"
void main(void) 
{ 
  struct pci_dev *var_group1 ;
  struct pci_device_id  const  *var_dmx3191d_probe_one_0_p1 ;
  int res_dmx3191d_probe_one_0 ;
  int ldv_s_dmx3191d_pci_driver_pci_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 287
  ldv_s_dmx3191d_pci_driver_pci_driver = 0;
#line 260
  LDV_IN_INTERRUPT = 1;
#line 269
  ldv_initialize();
#line 284
  ldv_handler_precall();
#line 285
  tmp = dmx3191d_init();
#line 285
  if (tmp != 0) {
#line 286
    goto ldv_final;
  } else {

  }
#line 290
  goto ldv_33648;
  ldv_33647: 
#line 294
  tmp___0 = nondet_int();
#line 294
  switch (tmp___0) {
  case 0: ;
#line 299
  if (ldv_s_dmx3191d_pci_driver_pci_driver == 0) {
#line 313
    res_dmx3191d_probe_one_0 = dmx3191d_probe_one(var_group1, var_dmx3191d_probe_one_0_p1);
#line 314
    ldv_check_return_value(res_dmx3191d_probe_one_0);
#line 315
    ldv_check_return_value_probe(res_dmx3191d_probe_one_0);
#line 316
    if (res_dmx3191d_probe_one_0 != 0) {
#line 317
      goto ldv_module_exit;
    } else {

    }
#line 318
    ldv_s_dmx3191d_pci_driver_pci_driver = ldv_s_dmx3191d_pci_driver_pci_driver + 1;
  } else {

  }
#line 324
  goto ldv_33644;
  case 1: ;
#line 328
  if (ldv_s_dmx3191d_pci_driver_pci_driver == 1) {
#line 342
    ldv_handler_precall();
#line 343
    dmx3191d_remove_one(var_group1);
#line 344
    ldv_s_dmx3191d_pci_driver_pci_driver = 0;
  } else {

  }
#line 350
  goto ldv_33644;
  default: ;
#line 351
  goto ldv_33644;
  }
  ldv_33644: ;
  ldv_33648: 
#line 290
  tmp___1 = nondet_int();
#line 290
  if (tmp___1 != 0 || ldv_s_dmx3191d_pci_driver_pci_driver != 0) {
#line 292
    goto ldv_33647;
  } else {

  }

  ldv_module_exit: 
#line 372
  ldv_handler_precall();
#line 373
  dmx3191d_exit();
  ldv_final: 
#line 376
  ldv_check_final_state();
#line 379
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/scsi/dmx3191d.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
