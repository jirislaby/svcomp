/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 28 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 29 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 115 "include/linux/types.h"
typedef __u8 uint8_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 120 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 143 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 155 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 179 "include/linux/types.h"
typedef __u16 __be16;
#line 181 "include/linux/types.h"
typedef __u32 __be32;
#line 186 "include/linux/types.h"
typedef __u32 __wsum;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 203 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 215 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 215 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 220 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 220 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 221 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 226
struct hlist_node;
#line 226 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 230 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 241 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 295 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 42 "include/linux/dynamic_debug.h"
struct device;
#line 47
struct net_device;
#line 71 "include/asm-generic/bug.h"
struct completion;
#line 72
struct pt_regs;
#line 332 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2029_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2029_8 ldv_2029 ;
};
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2036_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2036_10 ldv_2036 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2151_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2166_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2167_11 {
   struct __anonstruct_ldv_2151_12 ldv_2151 ;
   struct __anonstruct_ldv_2166_13 ldv_2166 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2167_11 ldv_2167 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2799_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2799_18 ldv_2799 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 636 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5188_23 {
   u64 rip ;
   u64 rdp ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5194_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5195_22 {
   struct __anonstruct_ldv_5188_23 ldv_5188 ;
   struct __anonstruct_ldv_5194_24 ldv_5194 ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5204_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5195_22 ldv_5195 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5204_25 ldv_5204 ;
};
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 423
struct kmem_cache;
#line 424
struct perf_event;
#line 425 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 624 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 624 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 556 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6019_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6020_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6019_29 ldv_6019 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6020_28 ldv_6020 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 81
struct compat_timespec;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 82
struct pollfd;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6273_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6273_31 ldv_6273 ;
};
#line 51 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 397 "include/linux/spinlock.h"
struct vm_area_struct;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 233 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 105 "include/linux/debugobjects.h"
struct tvec_base;
#line 106 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 665 "include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 262
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 269
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 277
struct wakeup_source;
#line 458 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 463
struct pm_qos_constraints;
#line 463 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   ktime_t suspend_time ;
   s64 max_time_suspended_ns ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 521 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 669 "include/linux/mmzone.h"
struct rw_semaphore;
#line 670 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 187 "include/linux/rcupdate.h"
struct notifier_block;
#line 232 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 792 "include/linux/mmzone.h"
struct ctl_table;
#line 387 "include/linux/gfp.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 336 "include/linux/irq.h"
struct proc_dir_entry;
#line 337
struct timer_rand_state;
#line 338
struct irqaction;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_129 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_129 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_130 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_130 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_131 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_131 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_132 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_132 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_133 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_133 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_134 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_134 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_135 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_135 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 146 "include/linux/if.h"
union __anonunion_ifs_ifsu_136 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 146 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_136 ifs_ifsu ;
};
#line 164 "include/linux/if.h"
union __anonunion_ifr_ifrn_137 {
   char ifrn_name[16U] ;
};
#line 164 "include/linux/if.h"
union __anonunion_ifr_ifru_138 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 164 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_137 ifr_ifrn ;
   union __anonunion_ifr_ifru_138 ifr_ifru ;
};
#line 228 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 132 "include/linux/if_ether.h"
struct prio_tree_node;
#line 132 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 181
struct address_space;
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_13173_141 {
   unsigned long index ;
   void *freelist ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_13183_145 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_13184_144 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13183_145 ldv_13183 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_13186_143 {
   union __anonunion_ldv_13184_144 ldv_13184 ;
   atomic_t _count ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_13187_142 {
   unsigned long counters ;
   struct __anonstruct_ldv_13186_143 ldv_13186 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_13188_140 {
   union __anonunion_ldv_13173_141 ldv_13173 ;
   union __anonunion_ldv_13187_142 ldv_13187 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_13195_147 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_13196_146 {
   struct list_head lru ;
   struct __anonstruct_ldv_13195_147 ldv_13195 ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_13201_148 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 182 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_13188_140 ldv_13188 ;
   union __anonunion_ldv_13196_146 ldv_13196 ;
   union __anonunion_ldv_13201_148 ldv_13201 ;
   unsigned long debug_flags ;
};
#line 192 "include/linux/mm_types.h"
struct __anonstruct_vm_set_150 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 192 "include/linux/mm_types.h"
union __anonunion_shared_149 {
   struct __anonstruct_vm_set_150 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 192
struct anon_vma;
#line 192
struct vm_operations_struct;
#line 192
struct mempolicy;
#line 192 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_149 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 255 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 261 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 274 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 287
struct linux_binfmt;
#line 287
struct mmu_notifier_mm;
#line 287 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_14019 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_14019 socket_state;
#line 174 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 175
struct pipe_inode_info;
#line 176
struct inode;
#line 177
struct net;
#line 194
struct fasync_struct;
#line 194 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 127 "include/linux/net.h"
struct sock;
#line 127
struct proto_ops;
#line 127 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 153
struct kiocb;
#line 154 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 164 "include/linux/slab.h"
struct kobject;
#line 165
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 171 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 117
struct sysfs_dirent;
#line 28 "include/linux/bug.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 86 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[24U] ;
};
#line 52 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 73 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 125
struct device_type;
#line 182
struct of_device_id;
#line 182 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 305
struct class_attribute;
#line 305 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 400 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 453 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 480 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 563 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 573
struct dma_coherent_mem;
#line 573 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 687 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 997 "include/linux/device.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 177 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 194 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 35 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 972 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 458 "include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 72 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 54 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 108 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 118 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 309 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 310
struct sec_path;
#line 310 "include/linux/skbuff.h"
struct __anonstruct_ldv_19129_154 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 310 "include/linux/skbuff.h"
union __anonunion_ldv_19130_153 {
   __wsum csum ;
   struct __anonstruct_ldv_19129_154 ldv_19129 ;
};
#line 310 "include/linux/skbuff.h"
union __anonunion_ldv_19163_155 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 310 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19130_153 ldv_19130 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19163_155 ldv_19163 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 508
struct dst_entry;
#line 543
struct rtable;
#line 117 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 309 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 393 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 254
struct file_operations;
#line 63 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
};
#line 34 "include/linux/pm_qos.h"
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 40 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 427 "include/linux/rculist.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 108
struct bio;
#line 109
struct bio_integrity_payload;
#line 110
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 72 "include/linux/dcache.h"
struct dentry_operations;
#line 72
struct super_block;
#line 72 "include/linux/dcache.h"
union __anonunion_d_u_159 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 72 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_159 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 123 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 403 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 56 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 56 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 258
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 265
struct pid_namespace;
#line 265 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44
struct export_operations;
#line 45
struct hd_geometry;
#line 46
struct kstatfs;
#line 430 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 275 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 303 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 314 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 328 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 344 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 390 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 580 "include/linux/fs.h"
union __anonunion_arg_161 {
   char *buf ;
   void *data ;
};
#line 580 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_160 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_161 arg ;
   int error ;
};
#line 580 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_160 read_descriptor_t;
#line 583 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 637
struct backing_dev_info;
#line 638 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 659
struct request_queue;
#line 660
struct hd_struct;
#line 660
struct gendisk;
#line 660 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 732
struct posix_acl;
#line 733
struct inode_operations;
#line 733 "include/linux/fs.h"
union __anonunion_ldv_22363_162 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 733 "include/linux/fs.h"
union __anonunion_ldv_22382_163 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 733
struct file_lock;
#line 733
struct cdev;
#line 733 "include/linux/fs.h"
union __anonunion_ldv_22399_164 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 733 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   uid_t i_uid ;
   gid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_22363_162 ldv_22363 ;
   dev_t i_rdev ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   blkcnt_t i_blocks ;
   loff_t i_size ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_22382_163 ldv_22382 ;
   atomic_t i_count ;
   unsigned int i_blkbits ;
   u64 i_version ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22399_164 ldv_22399 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 936 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 944 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 967 "include/linux/fs.h"
union __anonunion_f_u_165 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 967 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_165 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1106
struct files_struct;
#line 1106 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1107 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1112 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_release_private)(struct file_lock * ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 165 "include/linux/nfs.h"
struct nlm_lockowner;
#line 166 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_167 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_166 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_167 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_166 fl_u ;
};
#line 1215 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1407
struct file_system_type;
#line 1407
struct super_operations;
#line 1407
struct xattr_handler;
#line 1407
struct mtd_info;
#line 1407 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1552 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1590
struct block_device_operations;
#line 1591 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1626 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1671 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1823 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_168 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_168 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_170 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_171 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_172 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_173 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_174 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_175 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_169 {
   int _pad[28U] ;
   struct __anonstruct__kill_170 _kill ;
   struct __anonstruct__timer_171 _timer ;
   struct __anonstruct__rt_172 _rt ;
   struct __anonstruct__sigchld_173 _sigchld ;
   struct __anonstruct__sigfault_174 _sigfault ;
   struct __anonstruct__sigpoll_175 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_169 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   raw_spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_178 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_178 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 948
struct ctl_table_header;
#line 966 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 986 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 1049 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1057 "include/linux/sysctl.h"
struct __anonstruct_ldv_25792_180 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1057 "include/linux/sysctl.h"
union __anonunion_ldv_25794_179 {
   struct __anonstruct_ldv_25792_180 ldv_25792 ;
   struct rcu_head rcu ;
};
#line 1057 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_25794_179 ldv_25794 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_25852_181 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_182 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_183 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_25852_181 ldv_25852 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_182 type_data ;
   union __anonunion_payload_183 payload ;
};
#line 313
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 264
struct llist_node;
#line 65 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 186
struct futex_pi_state;
#line 187
struct robust_list_head;
#line 188
struct bio_list;
#line 189
struct fs_struct;
#line 190
struct perf_event_context;
#line 191
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 385
struct kioctx;
#line 386 "include/linux/sched.h"
union __anonunion_ki_obj_184 {
   void *user ;
   struct task_struct *tsk ;
};
#line 386
struct eventfd_ctx;
#line 386 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_184 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 406 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 449 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 457 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 464 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 481 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 517
struct autogroup;
#line 518
struct tty_struct;
#line 518
struct taskstats;
#line 518
struct tty_audit_buf;
#line 518 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 687 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 732
struct reclaim_state;
#line 733 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 748 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1054
struct io_context;
#line 1077
struct rq;
#line 1078 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1144 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1149 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1184 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1210
struct rt_rq;
#line 1210 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1234
struct mem_cgroup;
#line 1234 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1589
struct css_set;
#line 1589
struct compat_robust_list_head;
#line 1589 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 205 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 209 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 560 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 61 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 87 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 102 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 110 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 119 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 217 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 239 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 267 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 318 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 340 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 361 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 394 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 410 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 430 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 441 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 472 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 630 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 638 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 750
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 784 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
};
#line 953
struct prot_inuse;
#line 954 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[81U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   unsigned int sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 71 "include/net/netns/ipv4.h"
struct neighbour;
#line 71 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 67 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 334 "include/linux/in.h"
union __anonunion_in6_u_193 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 334 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_193 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 392 "include/linux/netfilter.h"
struct ebt_table;
#line 393 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18
struct nf_ct_event_notifier;
#line 18
struct nf_exp_event_notifier;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 105 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 29 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 291 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 101 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154
struct cgroupfs_root;
#line 155
struct cgroup_subsys;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 458
struct cgroup_taskset;
#line 468 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup_subsys * , struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup_subsys * , struct cgroup * ) ;
   void (*destroy)(struct cgroup_subsys * , struct cgroup * ) ;
   int (*can_attach)(struct cgroup_subsys * , struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys * , struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys * , struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct cgroup_subsys * , struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys * , struct cgroup * , struct cgroup * , struct task_struct * ) ;
   int (*populate)(struct cgroup_subsys * , struct cgroup * ) ;
   void (*post_clone)(struct cgroup_subsys * , struct cgroup * ) ;
   void (*bind)(struct cgroup_subsys * , struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   char const   *name ;
   struct mutex hierarchy_mutex ;
   struct lock_class_key subsys_key ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   rwlock_t id_lock ;
   struct module *module ;
};
#line 648 "include/linux/cgroup.h"
struct netprio_map {
   struct rcu_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 74 "include/net/netprio_cgroup.h"
struct netpoll_info;
#line 75
struct phy_device;
#line 76
struct wireless_dev;
#line 77
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 114 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 133 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 219
struct neigh_parms;
#line 239 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 244 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 273 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 367
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 415 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 416 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 524
struct Qdisc;
#line 524 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 588 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 600 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 612 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 664 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 674 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 687 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 698 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 709 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 725 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
};
#line 1019
struct iw_handler_def;
#line 1019
struct iw_public_data;
#line 1019
struct vlan_info;
#line 1019
struct in_device;
#line 1019
struct dn_dev;
#line 1019
struct inet6_dev;
#line 1019
struct cpu_rmap;
#line 1019
struct pcpu_lstats;
#line 1019
struct pcpu_tstats;
#line 1019
struct pcpu_dstats;
#line 1019 "include/linux/netdevice.h"
union __anonunion_ldv_32337_201 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1019
struct garp_port;
#line 1019
struct rtnl_link_ops;
#line 1019 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_32337_201 ldv_32337 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   int group ;
};
#line 411 "include/linux/audit.h"
struct linux_binprm;
#line 327 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   unsigned long vma_pages ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
   char tcomm[16U] ;
};
#line 63 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 81 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
};
#line 108 "include/linux/msg.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 84 "include/linux/security.h"
struct xfrm_policy;
#line 85
struct xfrm_state;
#line 105
struct request_sock;
#line 419 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 225 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 819 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 130
struct neigh_table;
#line 130 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct rcu_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 411
struct dn_route;
#line 411 "include/net/neighbour.h"
union __anonunion_ldv_37438_209 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 411 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *_neighbour ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int flags ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37438_209 ldv_37438 ;
};
#line 120 "include/net/sock.h"
struct __anonstruct_socket_lock_t_210 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 120 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_210 socket_lock_t;
#line 120
struct proto;
#line 121 "include/net/sock.h"
union __anonunion_ldv_37666_211 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 121 "include/net/sock.h"
union __anonunion_ldv_37674_212 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 121 "include/net/sock.h"
union __anonunion_ldv_37681_213 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 121 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37666_211 ldv_37666 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37674_212 ldv_37674 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37681_213 ldv_37681 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 187
struct cg_proto;
#line 188 "include/net/sock.h"
struct __anonstruct_sk_backlog_214 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 188 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_214 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 755
struct request_sock_ops;
#line 756
struct timewait_sock_ops;
#line 757
struct inet_hashinfo;
#line 758
struct raw_hashinfo;
#line 759
struct udp_table;
#line 759 "include/net/sock.h"
union __anonunion_h_215 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 759 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_215 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct cgroup * , struct cgroup_subsys * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 878 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_38985_216 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_38985_216 ldv_38985 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 123 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 132 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 145 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 171 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 185 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 190 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 209 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 224 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 241 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 250 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 256 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 265 "include/linux/crypto.h"
union __anonunion_cra_u_217 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 265 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_217 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 317 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 337 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 352 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 361 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 369 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 381 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 388 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 396 "include/linux/crypto.h"
union __anonunion_crt_u_218 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 396 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_218 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 425 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 433 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 449 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 1276 "include/linux/crypto.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 250 "include/net/inet_sock.h"
struct inet_peer;
#line 367 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 146 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 153
struct disk_events;
#line 154
struct blk_integrity;
#line 154 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 80
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 47 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 64 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 79 "include/linux/mempool.h"
union __anonunion_ldv_42248_225 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 79 "include/linux/mempool.h"
union __anonunion_ldv_42252_226 {
   struct hlist_node ioc_node ;
   struct rcu_head __rcu_head ;
};
#line 79 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_42248_225 ldv_42248 ;
   union __anonunion_ldv_42252_226 ldv_42252 ;
   unsigned int flags ;
};
#line 96 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 90 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 365 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 86
struct bsg_job;
#line 39 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 40 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 52
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 64 "include/linux/blkdev.h"
union __anonunion_ldv_42675_227 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 64 "include/linux/blkdev.h"
struct __anonstruct_elv_229 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 64 "include/linux/blkdev.h"
struct __anonstruct_flush_230 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 64 "include/linux/blkdev.h"
union __anonunion_ldv_42686_228 {
   struct __anonstruct_elv_229 elv ;
   struct __anonstruct_flush_230 flush ;
};
#line 64 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_42675_227 ldv_42675 ;
   union __anonunion_ldv_42686_228 ldv_42686 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 32 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 33 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 36 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 37 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 38 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 68 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 76 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 97 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 201 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 202 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 203 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 204 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 205 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 213 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 215 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 216 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 217 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 219
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 226 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 232 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 241 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 269 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
};
#line 879 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1211 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1232 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1233 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1234 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1235 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1236 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1295 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 94 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   int irq ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char const   *name ;
   struct proc_dir_entry *dir ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 666 "include/net/ipv6.h"
union __anonunion_ldv_45431_236 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 666 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_45431_236 ldv_45431 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_45453_238 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45456_237 {
   struct __anonstruct_ldv_45453_238 ldv_45453 ;
   struct rcu_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
   struct list_head gc_list ;
   union __anonunion_ldv_45456_237 ldv_45456 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_key_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 323 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1583 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_47927_241 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_47927_241 ldv_47927 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 7,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_LOCKED_TEST_ALLOWED = 3,
    BM_LOCKED_SET_ALLOWED = 1
} ;
#line 834 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 895 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 78 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 149 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 953
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 965 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   int peer_max_bio_size ;
   int local_max_bio_size ;
};
#line 1173
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2463 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   struct completion done ;
   unsigned int flags ;
   int error ;
};
#line 1747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___7;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 53 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct jump_label_key;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 215 "include/linux/kobject.h"
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13409_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_13409_134 ldv_13409 ;
};
#line 64 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 70 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 430 "include/linux/moduleparam.h"
struct jump_label_key {
   atomic_t enabled ;
};
#line 128 "include/linux/jump_label.h"
struct tracepoint;
#line 129 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct jump_label_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 36 "include/linux/module.h"
struct module_param_attrs;
#line 36 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 71
struct exception_table_entry;
#line 200
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 206 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 221
struct module_sect_attrs;
#line 221
struct module_notes_attrs;
#line 221
struct ftrace_event_call;
#line 221 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 473 "include/linux/module.h"
typedef unsigned long pao_T_____3;
#line 473 "include/linux/module.h"
typedef unsigned long pao_T_____4;
#line 473 "include/linux/module.h"
typedef unsigned long pao_T_____5;
#line 473 "include/linux/module.h"
typedef unsigned long pao_T_____6;
#line 664 "include/linux/module.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    completed_ok = 22,
    resend = 23,
    fail_frozen_disk_io = 24,
    restart_frozen_disk_io = 25,
    nothing = 26
} ;
#line 310 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 747
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1181
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1520
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 186 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_242 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_242 updates[62U] ;
   u32 xor_sum ;
};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 188 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 3690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 178 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u32 __le32;
#line 182 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 44 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 664 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 64 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 40 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 74 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 108 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 136 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 145 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 112 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n\t .long 661b - .\n\t .long 663f - .\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 77 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 79
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 79
  return (tmp);
}
}
#line 82 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 84
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 84
  return (tmp);
}
}
#line 53 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 55
  tmp = __arch_hweight64((__u64 )w);
#line 55
  return (tmp);
}
}
#line 101 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 46 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 70 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 133 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2893;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2893;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2893;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2893;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2893: ;
#line 14
  return (pfo_ret__);
}
}
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddb %b0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5541;
  case 2UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5541;
  case 4UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5541;
  case 8UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5541;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5541: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 175
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) ;
#line 177
extern void mutex_unlock(struct mutex * ) ;
#line 180
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 60
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 67
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 71
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6296;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6296;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6296;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6296;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_6296: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6020.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_6020.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_6020.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6020.rlock, flags);
#line 341
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 91
extern void complete(struct completion * ) ;
#line 324 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 327 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 329
  tmp = alloc_pages_current(gfp_mask, order);
#line 329
  return (tmp);
}
}
#line 360
extern void __free_pages(struct page * , unsigned int  ) ;
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 218 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 265 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 280
  tmp___2 = __kmalloc(size, flags);
#line 280
  return (tmp___2);
}
}
#line 338 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 340
  tmp = kmalloc(size, flags | 32768U);
#line 340
  return (tmp);
}
}
#line 894 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 898
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 900
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 904
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 449 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 736 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 738
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2354 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2589
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable();
#line 61
  tmp = lowmem_page_address((struct page  const  *)page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 67
  pagefault_enable();
#line 68
  return;
}
}
#line 124 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 126
  tmp = __kmap_atomic(page);
#line 126
  return (tmp);
}
}
#line 214 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , unsigned int  ) ;
#line 217
extern void bio_put(struct bio * ) ;
#line 220
extern void bio_endio(struct bio * , int  ) ;
#line 229
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 956 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1204
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1299
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1300
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1443
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1444
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1445
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1446
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1447
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1449
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1451
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1453
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1457
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1460
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1461
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1462
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1463
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1464
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1466
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1467
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1468
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1471
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1473
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1474
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1475
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1476
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1479
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1482
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1485
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1486
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1501
rwlock_t global_state_lock ;
#line 1518
char *ppsize(char *buf , unsigned long long size ) ;
#line 1794 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1799
  _raw_read_lock(& global_state_lock);
#line 1800
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1801
  _raw_read_unlock(& global_state_lock);
#line 1803
  return (rv);
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38985.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_48940;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38985.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38985.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_48940;
  }
  ldv_48940: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1892 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1894
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1897
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1900
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2157
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2157
  i = tmp;
#line 2163
  if (i < 0) {
#line 2163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2163);
  } else {

  }
#line 2164
  if (i == 0) {
#line 2165
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2167
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2168
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2170
      drbd_go_diskless(mdev);
    } else {

    }
#line 2171
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2173
  return;
}
}
#line 2176 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2181
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2182
    return (0);
  } else {

  }
#line 2184
  atomic_inc(& mdev->local_cnt);
#line 2185
  io_allowed = (unsigned int )mdev->state.ldv_38985.disk >= (unsigned int )mins;
#line 2186
  if (io_allowed == 0) {
#line 2187
    put_ldev(mdev);
  } else {

  }
#line 2188
  return (io_allowed);
}
}
#line 2450 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2454
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2454
  if (tmp != 0) {
#line 2455
    return;
  } else {

  }
#line 2457
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2458
  if (r != 0) {
#line 2459
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2462
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 182
  b = mdev->bitmap;
#line 183
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 183
  if (tmp == 0) {
#line 184
    return;
  } else {

  }
#line 185
  tmp___9 = get_current();
#line 185
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 185
    tmp___7 = get_current();
#line 185
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 185
      tmp___5 = get_current();
#line 185
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 185
        tmp___3 = get_current();
#line 185
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 185
        tmp___4 = (char *)"worker";
      }
#line 185
      tmp___6 = tmp___4;
    } else {
#line 185
      tmp___6 = (char *)"asender";
    }
#line 185
    tmp___8 = tmp___6;
  } else {
#line 185
    tmp___8 = (char *)"receiver";
  }
#line 185
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 191
  return;
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 197
  b = mdev->bitmap;
#line 200
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 201
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 202
    return;
  } else {

  }
#line 205
  tmp = ldv_mutex_trylock_9(& b->bm_change);
#line 205
  trylock_failed = tmp == 0;
#line 207
  if (trylock_failed != 0) {
#line 208
    tmp___9 = get_current();
#line 208
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 208
      tmp___7 = get_current();
#line 208
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 208
        tmp___5 = get_current();
#line 208
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 208
          tmp___3 = get_current();
#line 208
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 208
          tmp___4 = (char *)"worker";
        }
#line 208
        tmp___6 = tmp___4;
      } else {
#line 208
        tmp___6 = (char *)"asender";
      }
#line 208
      tmp___8 = tmp___6;
    } else {
#line 208
      tmp___8 = (char *)"receiver";
    }
#line 208
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 216
    ldv_mutex_lock_10(& b->bm_change);
  } else {

  }
#line 218
  if (((unsigned int )b->bm_flags & 7U) != 0U) {
#line 219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 220
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 7U));
#line 222
  b->bm_why = why;
#line 223
  b->bm_task = get_current();
#line 224
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 228
  b = mdev->bitmap;
#line 229
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 231
    return;
  } else {

  }
#line 234
  if (((unsigned int )(mdev->bitmap)->bm_flags & 7U) == 0U) {
#line 235
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 237
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967288U);
#line 238
  b->bm_why = 0;
#line 239
  b->bm_task = 0;
#line 240
  ldv_mutex_unlock_11(& b->bm_change);
#line 241
  return;
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 271
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 271
  if (tmp != 0L) {
#line 271
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (271), "i" (12UL));
    ldv_49211: ;
#line 271
    goto ldv_49211;
  } else {

  }
#line 272
  page->ldv_13201.private = page->ldv_13201.private | idx;
#line 273
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 277
  return (page->ldv_13201.private & 16777215UL);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 285
  b = mdev->bitmap;
#line 286
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13201.private);
#line 287
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 287
  if (tmp == 0) {
#line 287
    goto ldv_49221;
  } else {

  }
#line 287
  tmp___0 = get_current();
#line 287
  __wait.flags = 0U;
#line 287
  __wait.private = (void *)tmp___0;
#line 287
  __wait.func = & autoremove_wake_function;
#line 287
  __wait.task_list.next = & __wait.task_list;
#line 287
  __wait.task_list.prev = & __wait.task_list;
  ldv_49224: 
#line 287
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 287
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 287
  if (tmp___1 == 0) {
#line 287
    goto ldv_49223;
  } else {

  }
#line 287
  schedule();
#line 287
  goto ldv_49224;
  ldv_49223: 
#line 287
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_49221: ;
#line 290
  return;
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 292
  b = mdev->bitmap;
#line 293
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13201.private);
#line 294
  clear_bit(31, (unsigned long volatile   *)addr);
#line 295
  __asm__  volatile   ("": : : "memory");
#line 296
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 297
  return;
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 304
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 305
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 306
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 310
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 311
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 315
  addr = (unsigned long const volatile   *)(& page->ldv_13201.private);
#line 316
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 321
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 322
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 326
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 327
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 331
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13201.private));
#line 332
  return;
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 336
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13201.private));
#line 336
  return (tmp);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 343
  page_nr = (unsigned int )(long_nr >> 9);
#line 344
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 344
  if (tmp != 0L) {
#line 344
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (344), "i" (12UL));
    ldv_49258: ;
#line 344
    goto ldv_49258;
  } else {

  }
#line 345
  return (page_nr);
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 351
  page_nr = (unsigned int )(bitnr >> 15);
#line 352
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 352
  if (tmp != 0L) {
#line 352
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (352), "i" (12UL));
    ldv_49264: ;
#line 352
    goto ldv_49264;
  } else {

  }
#line 353
  return (page_nr);
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 358
  page = *(b->bm_pages + (unsigned long )idx);
#line 359
  tmp = kmap_atomic(page);
#line 359
  return ((unsigned long *)tmp);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 364
  tmp = __bm_map_pidx(b, idx);
#line 364
  return (tmp);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 369
  __kunmap_atomic((void *)p_addr);
#line 370
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 374
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 400
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 401
    return;
  } else {

  }
#line 403
  i = 0UL;
#line 403
  goto ldv_49287;
  ldv_49286: ;
#line 404
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 405
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 408
    goto ldv_49285;
  } else {

  }
#line 410
  __free_pages(*(pages + i), 0U);
#line 411
  *(pages + i) = 0;
  ldv_49285: 
#line 403
  i = i + 1UL;
  ldv_49287: ;
#line 403
  if (i < number) {
#line 404
    goto ldv_49286;
  } else {

  }

#line 408
  return;
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 417
  if (v != 0) {
#line 418
    vfree((void const   *)ptr);
  } else {
#line 420
    kfree((void const   *)ptr);
  }
#line 421
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 428
  old_pages = b->bm_pages;
#line 430
  vmalloced = 0U;
#line 431
  have = b->bm_number_of_pages;
#line 433
  tmp = __builtin_expect(have == 0UL, 0L);
#line 433
  if (tmp != 0L) {
#line 433
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 433
    if (tmp___0 != 0L) {
#line 433
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (433), "i" (12UL));
      ldv_49304: ;
#line 433
      goto ldv_49304;
    } else {

    }
  } else {

  }
#line 434
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 434
  if (tmp___1 != 0L) {
#line 434
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 434
    if (tmp___2 != 0L) {
#line 434
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (434), "i" (12UL));
      ldv_49305: ;
#line 434
      goto ldv_49305;
    } else {

    }
  } else {

  }
#line 436
  if (have == want) {
#line 437
    return (old_pages);
  } else {

  }
#line 444
  bytes = (unsigned int )want * 8U;
#line 445
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 445
  new_pages = (struct page **)tmp___3;
#line 446
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 447
    tmp___4 = vzalloc((unsigned long )bytes);
#line 447
    new_pages = (struct page **)tmp___4;
#line 448
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 449
      return (0);
    } else {

    }
#line 450
    vmalloced = 1U;
  } else {

  }
#line 453
  if (want >= have) {
#line 454
    i = 0U;
#line 454
    goto ldv_49307;
    ldv_49306: 
#line 455
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 454
    i = i + 1U;
    ldv_49307: ;
#line 454
    if ((unsigned long )i < have) {
#line 455
      goto ldv_49306;
    } else {

    }

#line 456
    goto ldv_49310;
    ldv_49309: 
#line 457
    page = alloc_pages(131282U, 0U);
#line 458
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 459
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 460
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 461
      return (0);
    } else {

    }
#line 465
    bm_store_page_idx(page, (unsigned long )i);
#line 466
    *(new_pages + (unsigned long )i) = page;
#line 456
    i = i + 1U;
    ldv_49310: ;
#line 456
    if ((unsigned long )i < want) {
#line 457
      goto ldv_49309;
    } else {

    }

  } else {
#line 469
    i = 0U;
#line 469
    goto ldv_49313;
    ldv_49312: 
#line 470
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 469
    i = i + 1U;
    ldv_49313: ;
#line 469
    if ((unsigned long )i < want) {
#line 470
      goto ldv_49312;
    } else {

    }

  }
#line 476
  if (vmalloced != 0U) {
#line 477
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 479
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 481
  return (new_pages);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 490
  b = mdev->bitmap;
#line 491
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 491
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 491
  if (tmp != 0L) {
#line 491
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       491);
  } else {

  }
#line 491
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 492
  tmp___0 = kzalloc(400UL, 208U);
#line 492
  b = (struct drbd_bitmap *)tmp___0;
#line 493
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 494
    return (-12);
  } else {

  }
#line 495
  spinlock_check(& b->bm_lock);
#line 495
  __raw_spin_lock_init(& b->bm_lock.ldv_6020.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 496
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 497
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 499
  mdev->bitmap = b;
#line 501
  return (0);
}
}
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 506
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 506
  if (_b != 0) {
#line 506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            506);
  } else {

  }
#line 506
  if (_b != 0) {
#line 506
    return (0UL);
  } else {

  }
#line 507
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 514
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 514
  if (_b != 0) {
#line 514
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            514);
  } else {

  }
#line 514
  if (_b != 0) {
#line 514
    return;
  } else {

  }
#line 515
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 516
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 517
  kfree((void const   *)mdev->bitmap);
#line 518
  mdev->bitmap = 0;
#line 519
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 534
  cleared = 0;
#line 537
  tmp = (int )b->bm_bits & 32767;
#line 539
  mask = (1UL << (tmp & 63)) - 1UL;
#line 542
  mask = mask;
#line 544
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 545
  bm = p_addr + (unsigned long )(tmp / 64);
#line 546
  if (mask != 0UL) {
#line 551
    tmp___0 = hweight_long(*bm & ~ mask);
#line 551
    cleared = (int )tmp___0;
#line 552
    *bm = *bm & mask;
#line 553
    bm = bm + 1;
  } else {

  }
#line 562
  bm_unmap(p_addr);
#line 563
  return (cleared);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 573
  tmp = (int )b->bm_bits & 32767;
#line 575
  mask = (1UL << (tmp & 63)) - 1UL;
#line 578
  mask = mask;
#line 580
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 581
  bm = p_addr + (unsigned long )(tmp / 64);
#line 582
  if (mask != 0UL) {
#line 587
    *bm = *bm | ~ mask;
#line 588
    bm = bm + 1;
  } else {

  }
#line 596
  bm_unmap(p_addr);
#line 597
  return;
}
}
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 604
  bits = 0UL;
#line 605
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 609
  idx = 0;
#line 609
  goto ldv_49365;
  ldv_49364: 
#line 610
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 611
  i = 0;
#line 611
  goto ldv_49361;
  ldv_49360: 
#line 612
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 612
  bits = tmp + bits;
#line 611
  i = i + 1;
  ldv_49361: ;
#line 611
  if ((unsigned int )i <= 511U) {
#line 612
    goto ldv_49360;
  } else {

  }
#line 613
  __bm_unmap(p_addr);
#line 614
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                614, 0);
#line 614
  _cond_resched();
#line 609
  idx = idx + 1;
  ldv_49365: ;
#line 609
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 610
    goto ldv_49364;
  } else {

  }
#line 617
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 618
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 619
  i = 0;
#line 619
  goto ldv_49368;
  ldv_49367: 
#line 620
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 620
  bits = tmp___0 + bits;
#line 619
  i = i + 1;
  ldv_49368: ;
#line 619
  if (i < last_word) {
#line 620
    goto ldv_49367;
  } else {

  }
#line 621
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 622
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 622
  bits = tmp___1 + bits;
#line 626
  __bm_unmap(p_addr);
#line 627
  return (bits);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 637
  end = offset + len;
#line 639
  if (b->bm_words < end) {
#line 640
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 641
    return;
  } else {

  }
#line 644
  goto ldv_49385;
  ldv_49384: 
#line 645
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 645
  __min2 = end;
#line 645
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 646
  idx = bm_word_to_page_idx(b, offset);
#line 647
  p_addr = bm_map_pidx(b, idx);
#line 648
  bm = p_addr + (offset & 511UL);
#line 649
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 650
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 653
    memset((void *)bm, c, do_now * 8UL);
  }
#line 654
  bm_unmap(p_addr);
#line 655
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 656
  offset = offset + do_now;
  ldv_49385: ;
#line 644
  if (offset < end) {
#line 645
    goto ldv_49384;
  } else {

  }

#line 649
  return;
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 670
  b = mdev->bitmap;
#line 673
  opages = 0;
#line 674
  err = 0;
#line 677
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 677
  if (_b != 0) {
#line 677
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            677);
  } else {

  }
#line 677
  if (_b != 0) {
#line 677
    return (-12);
  } else {

  }
#line 679
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 681
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 684
  if (b->bm_dev_capacity == capacity) {
#line 685
    goto out;
  } else {

  }
#line 687
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 689
  if (capacity == 0UL) {
#line 690
    spin_lock_irq(& b->bm_lock);
#line 691
    opages = b->bm_pages;
#line 692
    onpages = b->bm_number_of_pages;
#line 693
    owords = b->bm_words;
#line 694
    b->bm_pages = 0;
#line 695
    tmp___2 = 0UL;
#line 695
    b->bm_dev_capacity = tmp___2;
#line 695
    tmp___1 = tmp___2;
#line 695
    b->bm_words = tmp___1;
#line 695
    tmp___0 = tmp___1;
#line 695
    b->bm_bits = tmp___0;
#line 695
    tmp = tmp___0;
#line 695
    b->bm_set = tmp;
#line 695
    b->bm_number_of_pages = tmp;
#line 700
    spin_unlock_irq(& b->bm_lock);
#line 701
    bm_free_pages(opages, onpages);
#line 702
    bm_vk_free((void *)opages, opages_vmalloced);
#line 703
    goto out;
  } else {

  }
#line 705
  bits = (capacity + 7UL) >> 3;
#line 712
  words = (bits + 63UL) >> 6;
#line 714
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 714
  if (tmp___3 != 0) {
#line 715
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 716
    put_ldev(mdev);
#line 717
    if ((unsigned long long )bits > bits_on_disk) {
#line 718
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 719
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 720
      err = -28;
#line 721
      goto out;
    } else {

    }
  } else {

  }
#line 725
  want = (words * 8UL + 4095UL) >> 12;
#line 726
  have = b->bm_number_of_pages;
#line 727
  if (want == have) {
#line 728
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 728
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              728);
    } else {

    }
#line 729
    npages = b->bm_pages;
  } else {
#line 731
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 731
    if (tmp___4 != 0) {
#line 732
      npages = 0;
    } else {
#line 734
      npages = bm_realloc_pages(b, want);
    }
  }
#line 737
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 738
    err = -12;
#line 739
    goto out;
  } else {

  }
#line 742
  spin_lock_irq(& b->bm_lock);
#line 743
  opages = b->bm_pages;
#line 744
  owords = b->bm_words;
#line 745
  obits = b->bm_bits;
#line 747
  growing = bits > obits;
#line 748
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 749
    bm_set_surplus(b);
  } else {

  }
#line 751
  b->bm_pages = npages;
#line 752
  b->bm_number_of_pages = want;
#line 753
  b->bm_bits = bits;
#line 754
  b->bm_words = words;
#line 755
  b->bm_dev_capacity = capacity;
#line 757
  if (growing != 0) {
#line 758
    if (set_new_bits != 0) {
#line 759
      bm_memset(b, owords, 255, words - owords);
#line 760
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 762
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 766
  if (want < have) {
#line 768
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 771
  bm_clear_surplus(b);
#line 773
  spin_unlock_irq(& b->bm_lock);
#line 774
  if ((unsigned long )opages != (unsigned long )npages) {
#line 775
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 776
  if (growing == 0) {
#line 777
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 778
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 781
  drbd_bm_unlock(mdev);
#line 782
  return (err);
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 795
  b = mdev->bitmap;
#line 799
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 799
  if (_b != 0) {
#line 799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            799);
  } else {

  }
#line 799
  if (_b != 0) {
#line 799
    return (0UL);
  } else {

  }
#line 800
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 800
  if (_b___0 != 0) {
#line 800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            800);
  } else {

  }
#line 800
  if (_b___0 != 0) {
#line 800
    return (0UL);
  } else {

  }
#line 802
  tmp = spinlock_check(& b->bm_lock);
#line 802
  flags = _raw_spin_lock_irqsave(tmp);
#line 803
  s = b->bm_set;
#line 804
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 806
  return (s);
}
}
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 813
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 813
  if (tmp == 0) {
#line 814
    return (0UL);
  } else {

  }
#line 815
  s = _drbd_bm_total_weight(mdev);
#line 816
  put_ldev(mdev);
#line 817
  return (s);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 822
  b = mdev->bitmap;
#line 823
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 823
  if (_b != 0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            823);
  } else {

  }
#line 823
  if (_b != 0) {
#line 823
    return (0UL);
  } else {

  }
#line 824
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 824
  if (_b___0 != 0) {
#line 824
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            824);
  } else {

  }
#line 824
  if (_b___0 != 0) {
#line 824
    return (0UL);
  } else {

  }
#line 826
  return (b->bm_words);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 831
  b = mdev->bitmap;
#line 832
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 832
  if (_b != 0) {
#line 832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            832);
  } else {

  }
#line 832
  if (_b != 0) {
#line 832
    return (0UL);
  } else {

  }
#line 834
  return (b->bm_bits);
}
}
#line 842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 845
  b = mdev->bitmap;
#line 851
  end = offset + number;
#line 853
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 853
  if (_b != 0) {
#line 853
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            853);
  } else {

  }
#line 853
  if (_b != 0) {
#line 853
    return;
  } else {

  }
#line 854
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 854
  if (_b___0 != 0) {
#line 854
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            854);
  } else {

  }
#line 854
  if (_b___0 != 0) {
#line 854
    return;
  } else {

  }
#line 855
  if (number == 0UL) {
#line 856
    return;
  } else {

  }
#line 857
  __ret_warn_on = b->bm_words <= offset;
#line 857
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 857
  if (tmp != 0L) {
#line 857
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       857);
  } else {

  }
#line 857
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 858
  __ret_warn_on___0 = b->bm_words < end;
#line 858
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 858
  if (tmp___0 != 0L) {
#line 858
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       858);
  } else {

  }
#line 858
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 860
  spin_lock_irq(& b->bm_lock);
#line 861
  goto ldv_49474;
  ldv_49473: 
#line 862
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 862
  __min2 = end;
#line 862
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 863
  idx = bm_word_to_page_idx(b, offset);
#line 864
  p_addr = bm_map_pidx(b, idx);
#line 865
  bm = p_addr + (offset & 511UL);
#line 866
  offset = offset + do_now;
#line 867
  goto ldv_49471;
  ldv_49470: 
#line 868
  bits = hweight_long(*bm);
#line 869
  tmp___1 = buffer;
#line 869
  buffer = buffer + 1;
#line 869
  word = *bm | *tmp___1;
#line 870
  tmp___2 = bm;
#line 870
  bm = bm + 1;
#line 870
  *tmp___2 = word;
#line 871
  tmp___3 = hweight_long(word);
#line 871
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_49471: 
#line 867
  tmp___4 = do_now;
#line 867
  do_now = do_now - (size_t )1;
#line 867
  if (tmp___4 != 0UL) {
#line 868
    goto ldv_49470;
  } else {

  }
#line 873
  bm_unmap(p_addr);
#line 874
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_49474: ;
#line 861
  if (offset < end) {
#line 862
    goto ldv_49473;
  } else {

  }

#line 881
  if (b->bm_words == end) {
#line 882
    tmp___5 = bm_clear_surplus(b);
#line 882
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 883
  spin_unlock_irq(& b->bm_lock);
#line 884
  return;
}
}
#line 889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 892
  b = mdev->bitmap;
#line 896
  end = offset + number;
#line 898
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 898
  if (_b != 0) {
#line 898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            898);
  } else {

  }
#line 898
  if (_b != 0) {
#line 898
    return;
  } else {

  }
#line 899
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 899
  if (_b___0 != 0) {
#line 899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            899);
  } else {

  }
#line 899
  if (_b___0 != 0) {
#line 899
    return;
  } else {

  }
#line 901
  spin_lock_irq(& b->bm_lock);
#line 902
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 910
    goto ldv_49499;
    ldv_49498: 
#line 911
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 911
    __min2 = end;
#line 911
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 912
    tmp = bm_word_to_page_idx(b, offset);
#line 912
    p_addr = bm_map_pidx(b, tmp);
#line 913
    bm = p_addr + (offset & 511UL);
#line 914
    offset = offset + do_now;
#line 915
    goto ldv_49496;
    ldv_49495: 
#line 916
    tmp___0 = buffer;
#line 916
    buffer = buffer + 1;
#line 916
    tmp___1 = bm;
#line 916
    bm = bm + 1;
#line 916
    *tmp___0 = *tmp___1;
    ldv_49496: 
#line 915
    tmp___2 = do_now;
#line 915
    do_now = do_now - (size_t )1;
#line 915
    if (tmp___2 != 0UL) {
#line 916
      goto ldv_49495;
    } else {

    }
#line 917
    bm_unmap(p_addr);
    ldv_49499: ;
#line 910
    if (offset < end) {
#line 911
      goto ldv_49498;
    } else {

    }

  }
#line 920
  spin_unlock_irq(& b->bm_lock);
#line 921
  return;
}
}
#line 924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 926
  b = mdev->bitmap;
#line 927
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 927
  if (_b != 0) {
#line 927
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            927);
  } else {

  }
#line 927
  if (_b != 0) {
#line 927
    return;
  } else {

  }
#line 928
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 928
  if (_b___0 != 0) {
#line 928
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            928);
  } else {

  }
#line 928
  if (_b___0 != 0) {
#line 928
    return;
  } else {

  }
#line 930
  spin_lock_irq(& b->bm_lock);
#line 931
  bm_memset(b, 0UL, 255, b->bm_words);
#line 932
  bm_clear_surplus(b);
#line 933
  b->bm_set = b->bm_bits;
#line 934
  spin_unlock_irq(& b->bm_lock);
#line 935
  return;
}
}
#line 938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 940
  b = mdev->bitmap;
#line 941
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 941
  if (_b != 0) {
#line 941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            941);
  } else {

  }
#line 941
  if (_b != 0) {
#line 941
    return;
  } else {

  }
#line 942
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 942
  if (_b___0 != 0) {
#line 942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            942);
  } else {

  }
#line 942
  if (_b___0 != 0) {
#line 942
    return;
  } else {

  }
#line 944
  spin_lock_irq(& b->bm_lock);
#line 945
  bm_memset(b, 0UL, 0, b->bm_words);
#line 946
  b->bm_set = 0UL;
#line 947
  spin_unlock_irq(& b->bm_lock);
#line 948
  return;
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 962
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 963
  mdev = ctx->mdev;
#line 964
  b = mdev->bitmap;
#line 965
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 965
  idx = (unsigned int )tmp;
#line 966
  uptodate = (int )bio->bi_flags & 1;
#line 973
  if (error == 0 && uptodate == 0) {
#line 974
    error = -5;
  } else {

  }
#line 976
  if ((ctx->flags & 1U) == 0U) {
#line 976
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 976
    if (tmp___0 == 0) {
#line 978
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 980
  if (error != 0) {
#line 983
    ctx->error = error;
#line 984
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 987
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 987
    if (tmp___1 != 0) {
#line 988
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 991
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 992
    descriptor.modname = "drbd";
#line 992
    descriptor.function = "bm_async_io_complete";
#line 992
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 992
    descriptor.format = "bitmap page idx %u completed\n";
#line 992
    descriptor.lineno = 992U;
#line 992
    descriptor.flags = 0U;
#line 992
    descriptor.enabled = 0;
#line 992
    tmp___2 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 992
    if (tmp___2 != 0L) {
#line 992
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 995
  bm_page_unlock_io(mdev, (int )idx);
#line 998
  if ((int )ctx->flags & 1) {
#line 999
    put_page((bio->bi_io_vec)->bv_page);
  } else {

  }
#line 1001
  bio_put(bio);
#line 1003
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 1003
  if (tmp___3 != 0) {
#line 1004
    complete(& ctx->done);
  } else {

  }
#line 1005
  return;
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;

  {
#line 1010
  tmp = bio_alloc(208U, 1U);
#line 1010
  bio = tmp;
#line 1011
  mdev = ctx->mdev;
#line 1012
  b = mdev->bitmap;
#line 1016
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1018
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1023
  __min1 = 4096U;
#line 1023
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1023
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1023
  len = __min1 < __min2 ? __min1 : __min2;
#line 1027
  bm_page_lock_io(mdev, page_nr);
#line 1030
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1032
  if ((int )ctx->flags & 1) {
#line 1036
    page = alloc_pages(18U, 0U);
#line 1037
    dest = kmap_atomic(page);
#line 1038
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1039
    __len = 4096UL;
#line 1039
    if (__len > 63UL) {
#line 1039
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1039
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1040
    __kunmap_atomic(src);
#line 1041
    __kunmap_atomic(dest);
#line 1042
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1044
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1046
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1047
  bio->bi_sector = on_disk_sector;
#line 1048
  bio_add_page(bio, page, len, 0U);
#line 1049
  bio->bi_private = (void *)ctx;
#line 1050
  bio->bi_end_io = & bm_async_io_complete;
#line 1052
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1052
  if (tmp___1 != 0) {
#line 1053
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1054
    bio_endio(bio, -5);
  } else {
#line 1056
    submit_bio(rw, bio);
#line 1059
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1061
  return;
}
}
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  long tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char *tmp___5 ;

  {
#line 1071
  init_completion(& ctx.done);
#line 1071
  ctx.mdev = mdev;
#line 1071
  ctx.in_flight.counter = 1;
#line 1071
  ctx.done = ctx.done;
#line 1071
  ctx.flags = lazy_writeout_upper_idx != 0U;
#line 1071
  ctx.error = 0;
#line 1074
  b = mdev->bitmap;
#line 1075
  count = 0;
#line 1078
  err = 0;
#line 1088
  if (ctx.flags == 0U) {
#line 1089
    __ret_warn_on = ((unsigned int )b->bm_flags & 7U) == 0U;
#line 1089
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1089
    if (tmp != 0L) {
#line 1089
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1089);
    } else {

    }
#line 1089
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1091
  num_pages = (int )b->bm_number_of_pages;
#line 1093
  now = jiffies;
#line 1096
  i = 0;
#line 1096
  goto ldv_49578;
  ldv_49577: ;
#line 1098
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1099
    goto ldv_49571;
  } else {

  }
#line 1100
  if (rw & 1) {
#line 1101
    tmp___1 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1101
    if (tmp___1 != 0) {
#line 1102
      descriptor.modname = "drbd";
#line 1102
      descriptor.function = "bm_rw";
#line 1102
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1102
      descriptor.format = "skipped bm write for idx %u\n";
#line 1102
      descriptor.lineno = 1102U;
#line 1102
      descriptor.flags = 0U;
#line 1102
      descriptor.enabled = 0;
#line 1102
      tmp___0 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1102
      if (tmp___0 != 0L) {
#line 1102
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                          "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1103
      goto ldv_49574;
    } else {

    }
#line 1107
    if (lazy_writeout_upper_idx != 0U) {
#line 1107
      tmp___3 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1107
      if (tmp___3 == 0) {
#line 1109
        descriptor___0.modname = "drbd";
#line 1109
        descriptor___0.function = "bm_rw";
#line 1109
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1109
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1109
        descriptor___0.lineno = 1109U;
#line 1109
        descriptor___0.flags = 0U;
#line 1109
        descriptor___0.enabled = 0;
#line 1109
        tmp___2 = __builtin_expect((int )((signed char )descriptor___0.enabled) != 0,
                                   0L);
#line 1109
        if (tmp___2 != 0L) {
#line 1109
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1110
        goto ldv_49574;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1113
  atomic_inc(& ctx.in_flight);
#line 1114
  bm_page_io_async(& ctx, i, rw);
#line 1115
  count = count + 1;
#line 1116
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1116, 0);
#line 1116
  _cond_resched();
  ldv_49574: 
#line 1096
  i = i + 1;
  ldv_49578: ;
#line 1096
  if (i < num_pages) {
#line 1097
    goto ldv_49577;
  } else {

  }
  ldv_49571: 
#line 1124
  tmp___4 = atomic_dec_and_test(& ctx.in_flight);
#line 1124
  if (tmp___4 == 0) {
#line 1125
    wait_for_completion(& ctx.done);
  } else {

  }
#line 1126
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1130
  if (ctx.error != 0) {
#line 1131
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1132
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 1133
    err = -5;
  } else {

  }
#line 1136
  now = jiffies;
#line 1137
  if (rw == 1) {
#line 1138
    drbd_md_flush(mdev);
  } else {
#line 1140
    b->bm_set = bm_count_bits(b);
#line 1141
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1144
  now = b->bm_set;
#line 1146
  tmp___5 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1146
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___5, now);
#line 1149
  return (err);
}
}
#line 1156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1158
  tmp = bm_rw(mdev, 0, 0U);
#line 1158
  return (tmp);
}
}
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1169
  tmp = bm_rw(mdev, 1, 0U);
#line 1169
  return (tmp);
}
}
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1179
  tmp = bm_rw(mdev, 1, upper_idx);
#line 1179
  return (tmp);
}
}
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 1200
  init_completion(& ctx.done);
#line 1200
  ctx.mdev = mdev;
#line 1200
  ctx.in_flight.counter = 1;
#line 1200
  ctx.done = ctx.done;
#line 1200
  ctx.flags = 1U;
#line 1200
  ctx.error = 0;
#line 1204
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1204
  if (tmp___0 != 0) {
#line 1205
    descriptor.modname = "drbd";
#line 1205
    descriptor.function = "drbd_bm_write_page";
#line 1205
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1205
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1205
    descriptor.lineno = 1205U;
#line 1205
    descriptor.flags = 0U;
#line 1205
    descriptor.enabled = 0;
#line 1205
    tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1205
    if (tmp != 0L) {
#line 1205
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1206
    return (0);
  } else {

  }
#line 1209
  bm_page_io_async(& ctx, (int )idx, 529);
#line 1210
  wait_for_completion(& ctx.done);
#line 1212
  if (ctx.error != 0) {
#line 1213
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_page");
  } else {

  }
#line 1217
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1218
  return (ctx.error);
}
}
#line 1229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1232
  b = mdev->bitmap;
#line 1238
  if (b->bm_bits < bm_fo) {
#line 1239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1240
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1242
    goto ldv_49609;
    ldv_49608: 
#line 1244
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1245
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1245
    p_addr = __bm_map_pidx(b, tmp);
#line 1247
    if ((int )find_zero_bit != 0) {
#line 1248
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1248
      i = (unsigned int )tmp___0;
    } else {
#line 1251
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1251
      i = (unsigned int )tmp___1;
    }
#line 1254
    __bm_unmap(p_addr);
#line 1255
    if (i <= 32767U) {
#line 1256
      bm_fo = (unsigned long )i + bit_offset;
#line 1257
      if (b->bm_bits <= bm_fo) {
#line 1258
        goto ldv_49606;
      } else {

      }
#line 1259
      goto found;
    } else {

    }
#line 1261
    bm_fo = bit_offset + 32768UL;
    ldv_49609: ;
#line 1242
    if (b->bm_bits > bm_fo) {
#line 1243
      goto ldv_49608;
    } else {

    }
    ldv_49606: 
#line 1263
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1266
  return (bm_fo);
}
}
#line 1269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1272
  b = mdev->bitmap;
#line 1273
  i = 0xffffffffffffffffUL;
#line 1275
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1275
  if (_b != 0) {
#line 1275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1275);
  } else {

  }
#line 1275
  if (_b != 0) {
#line 1275
    return (i);
  } else {

  }
#line 1276
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1276
  if (_b___0 != 0) {
#line 1276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1276);
  } else {

  }
#line 1276
  if (_b___0 != 0) {
#line 1276
    return (i);
  } else {

  }
#line 1278
  spin_lock_irq(& b->bm_lock);
#line 1279
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1280
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1282
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1284
  spin_unlock_irq(& b->bm_lock);
#line 1285
  return (i);
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1290
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1290
  return (tmp);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1306
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1306
  return (tmp);
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1312
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1312
  return (tmp);
}
}
#line 1321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1324
  b = mdev->bitmap;
#line 1325
  p_addr = 0;
#line 1327
  last_page_nr = 4294967295U;
#line 1328
  c = 0;
#line 1329
  changed_total = 0;
#line 1331
  if (b->bm_bits <= e) {
#line 1332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1334
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1336
  bitnr = s;
#line 1336
  goto ldv_49648;
  ldv_49647: 
#line 1337
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1337
  page_nr = tmp;
#line 1338
  if (page_nr != last_page_nr) {
#line 1339
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1340
      __bm_unmap(p_addr);
    } else {

    }
#line 1341
    if (c < 0) {
#line 1342
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1343
    if (c > 0) {
#line 1344
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1345
    changed_total = changed_total + c;
#line 1346
    c = 0;
#line 1347
    p_addr = __bm_map_pidx(b, page_nr);
#line 1348
    last_page_nr = page_nr;
  } else {

  }
#line 1350
  if (val != 0) {
#line 1351
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1351
    c = (tmp___0 == 0) + c;
  } else {
#line 1353
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1353
    c = c - (tmp___1 != 0);
  }
#line 1336
  bitnr = bitnr + 1UL;
  ldv_49648: ;
#line 1336
  if (bitnr <= e) {
#line 1337
    goto ldv_49647;
  } else {

  }

#line 1355
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1356
    __bm_unmap(p_addr);
  } else {

  }
#line 1357
  if (c < 0) {
#line 1358
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1359
  if (c > 0) {
#line 1360
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1361
  changed_total = changed_total + c;
#line 1362
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1363
  return (changed_total);
}
}
#line 1370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1374
  b = mdev->bitmap;
#line 1375
  c = 0;
#line 1377
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1377
  if (_b != 0) {
#line 1377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1377);
  } else {

  }
#line 1377
  if (_b != 0) {
#line 1377
    return (1);
  } else {

  }
#line 1378
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1378
  if (_b___0 != 0) {
#line 1378
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1378);
  } else {

  }
#line 1378
  if (_b___0 != 0) {
#line 1378
    return (0);
  } else {

  }
#line 1380
  tmp = spinlock_check(& b->bm_lock);
#line 1380
  flags = _raw_spin_lock_irqsave(tmp);
#line 1381
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1382
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1384
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1386
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1387
  return (c);
}
}
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1393
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1393
  return (tmp);
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1399
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1399
  return (- tmp);
}
}
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1409
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1409
  paddr = (unsigned long *)tmp;
#line 1410
  i = first_word;
#line 1410
  goto ldv_49687;
  ldv_49686: 
#line 1411
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1411
  bits = (int )tmp___0;
#line 1412
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1413
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1410
  i = i + 1;
  ldv_49687: ;
#line 1410
  if (i < last_word) {
#line 1411
    goto ldv_49686;
  } else {

  }
#line 1415
  __kunmap_atomic((void *)paddr);
#line 1416
  return;
}
}
#line 1423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1433
  b = mdev->bitmap;
#line 1434
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1435
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1442
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1444
    spin_lock_irq(& b->bm_lock);
#line 1445
    __bm_change_bits_to(mdev, s, e, 1);
#line 1446
    spin_unlock_irq(& b->bm_lock);
#line 1447
    return;
  } else {

  }
#line 1452
  spin_lock_irq(& b->bm_lock);
#line 1455
  if (sl != 0UL) {
#line 1456
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1458
  first_page = (int )(sl >> 15);
#line 1459
  last_page = (int )(el >> 15);
#line 1463
  first_word = (int )(sl >> 6) & 511;
#line 1464
  last_word = 512;
#line 1467
  page_nr = first_page;
#line 1467
  goto ldv_49704;
  ldv_49703: 
#line 1468
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1469
  spin_unlock_irq(& b->bm_lock);
#line 1470
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1470, 0);
#line 1470
  _cond_resched();
#line 1471
  first_word = 0;
#line 1472
  spin_lock_irq(& b->bm_lock);
#line 1467
  page_nr = page_nr + 1;
  ldv_49704: ;
#line 1467
  if (page_nr < last_page) {
#line 1468
    goto ldv_49703;
  } else {

  }
#line 1476
  last_word = (int )(el >> 6) & 511;
#line 1477
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1484
  if (el <= (unsigned long )e) {
#line 1485
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1486
  spin_unlock_irq(& b->bm_lock);
#line 1487
  return;
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1499
  b = mdev->bitmap;
#line 1503
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1503
  if (_b != 0) {
#line 1503
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1503);
  } else {

  }
#line 1503
  if (_b != 0) {
#line 1503
    return (0);
  } else {

  }
#line 1504
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1504
  if (_b___0 != 0) {
#line 1504
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1504);
  } else {

  }
#line 1504
  if (_b___0 != 0) {
#line 1504
    return (0);
  } else {

  }
#line 1506
  tmp = spinlock_check(& b->bm_lock);
#line 1506
  flags = _raw_spin_lock_irqsave(tmp);
#line 1507
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1508
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1509
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1510
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1510
    p_addr = bm_map_pidx(b, tmp___0);
#line 1511
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1511
    i = tmp___1 != 0;
#line 1512
    bm_unmap(p_addr);
  } else
#line 1513
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1514
    i = -1;
  } else {
#line 1516
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1517
    i = 0;
  }
#line 1520
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1521
  return (i);
}
}
#line 1525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1528
  b = mdev->bitmap;
#line 1529
  p_addr = 0;
#line 1531
  page_nr = 4294967295U;
#line 1532
  c = 0;
#line 1538
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1538
  if (_b != 0) {
#line 1538
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1538);
  } else {

  }
#line 1538
  if (_b != 0) {
#line 1538
    return (1);
  } else {

  }
#line 1539
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1539
  if (_b___0 != 0) {
#line 1539
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1539);
  } else {

  }
#line 1539
  if (_b___0 != 0) {
#line 1539
    return (1);
  } else {

  }
#line 1541
  tmp = spinlock_check(& b->bm_lock);
#line 1541
  flags = _raw_spin_lock_irqsave(tmp);
#line 1542
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1543
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1544
  bitnr = s;
#line 1544
  goto ldv_49745;
  ldv_49744: 
#line 1545
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1545
  idx = tmp___0;
#line 1546
  if (page_nr != idx) {
#line 1547
    page_nr = idx;
#line 1548
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1549
      bm_unmap(p_addr);
    } else {

    }
#line 1550
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1552
  _b___1 = b->bm_bits <= bitnr;
#line 1552
  if (_b___1 != 0) {
#line 1552
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1552);
  } else {

  }
#line 1552
  if (_b___1 != 0) {
#line 1553
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1555
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1555
    c = (tmp___1 != 0) + c;
  }
#line 1544
  bitnr = bitnr + 1UL;
  ldv_49745: ;
#line 1544
  if (bitnr <= (unsigned long )e) {
#line 1545
    goto ldv_49744;
  } else {

  }

#line 1558
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1559
    bm_unmap(p_addr);
  } else {

  }
#line 1560
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1561
  return (c);
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1581
  b = mdev->bitmap;
#line 1586
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1586
  if (_b != 0) {
#line 1586
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1586);
  } else {

  }
#line 1586
  if (_b != 0) {
#line 1586
    return (0);
  } else {

  }
#line 1587
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1587
  if (_b___0 != 0) {
#line 1587
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1587);
  } else {

  }
#line 1587
  if (_b___0 != 0) {
#line 1587
    return (0);
  } else {

  }
#line 1589
  tmp = spinlock_check(& b->bm_lock);
#line 1589
  flags = _raw_spin_lock_irqsave(tmp);
#line 1590
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1591
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1593
  s = (int )(enr << 6);
#line 1594
  _min1 = (enr + 1UL) << 6;
#line 1594
  _min2 = b->bm_words;
#line 1594
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1595
  count = 0;
#line 1596
  if ((size_t )s < b->bm_words) {
#line 1597
    n = e - s;
#line 1598
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1598
    p_addr = bm_map_pidx(b, tmp___0);
#line 1599
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1600
    goto ldv_49771;
    ldv_49770: 
#line 1601
    tmp___1 = bm;
#line 1601
    bm = bm + 1;
#line 1601
    tmp___2 = hweight_long(*tmp___1);
#line 1601
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_49771: 
#line 1600
    tmp___3 = n;
#line 1600
    n = n - 1;
#line 1600
    if (tmp___3 != 0) {
#line 1601
      goto ldv_49770;
    } else {

    }
#line 1602
    bm_unmap(p_addr);
  } else {
#line 1604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1606
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1607
  return (count);
}
}
#line 1612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1614
  b = mdev->bitmap;
#line 1619
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1619
  if (_b != 0) {
#line 1619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1619);
  } else {

  }
#line 1619
  if (_b != 0) {
#line 1619
    return (0UL);
  } else {

  }
#line 1620
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1620
  if (_b___0 != 0) {
#line 1620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1620);
  } else {

  }
#line 1620
  if (_b___0 != 0) {
#line 1620
    return (0UL);
  } else {

  }
#line 1622
  spin_lock_irq(& b->bm_lock);
#line 1623
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1624
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1625
  weight = b->bm_set;
#line 1627
  s = al_enr * 16UL;
#line 1628
  __min1 = s + 16UL;
#line 1628
  __min2 = b->bm_words;
#line 1628
  e = __min1 < __min2 ? __min1 : __min2;
#line 1630
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1630
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1631);
  } else {

  }
#line 1632
  count = 0;
#line 1633
  if (b->bm_words > s) {
#line 1634
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1634
    i = do_now;
#line 1635
    tmp = bm_word_to_page_idx(b, s);
#line 1635
    p_addr = bm_map_pidx(b, tmp);
#line 1636
    bm = p_addr + (s & 511UL);
#line 1637
    goto ldv_49795;
    ldv_49794: 
#line 1638
    tmp___0 = hweight_long(*bm);
#line 1638
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1639
    *bm = 0xffffffffffffffffUL;
#line 1640
    bm = bm + 1;
    ldv_49795: 
#line 1637
    tmp___1 = i;
#line 1637
    i = i - 1;
#line 1637
    if (tmp___1 != 0) {
#line 1638
      goto ldv_49794;
    } else {

    }
#line 1642
    bm_unmap(p_addr);
#line 1643
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1644
    if (b->bm_words == e) {
#line 1645
      tmp___2 = bm_clear_surplus(b);
#line 1645
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1647
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1649
  weight = b->bm_set - weight;
#line 1650
  spin_unlock_irq(& b->bm_lock);
#line 1651
  return (weight);
}
}
#line 1670
void ldv_check_final_state(void) ;
#line 1679
void ldv_initialize(void) ;
#line 1685
extern int nondet_int(void) ;
#line 1688 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1703
  LDV_IN_INTERRUPT = 1;
#line 1712
  ldv_initialize();
#line 1714
  goto ldv_49816;
  ldv_49815: 
#line 1717
  tmp = nondet_int();
#line 1717
  switch (tmp) {
  default: ;
#line 1719
  goto ldv_49814;
  }
  ldv_49814: ;
  ldv_49816: 
#line 1714
  tmp___0 = nondet_int();
#line 1714
  if (tmp___0 != 0) {
#line 1715
    goto ldv_49815;
  } else {

  }


#line 1728
  ldv_check_final_state();
#line 1731
  return;
}
}
#line 1735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1740
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1742
  mutex_lock(ldv_func_arg1);
#line 1743
  return;
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1750
  tmp = mutex_trylock(ldv_func_arg1);
#line 1750
  ldv_func_res = tmp;
#line 1752
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1752
  return (tmp___0);
#line 1754
  return (ldv_func_res);
}
}
#line 1757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1762
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1764
  mutex_unlock(ldv_func_arg1);
#line 1765
  return;
}
}
#line 1767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1772
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1774
  mutex_lock(ldv_func_arg1);
#line 1775
  return;
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1782
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1784
  mutex_unlock(ldv_func_arg1);
#line 1785
  return;
}
}
#line 1787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1792
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1794
  mutex_lock(ldv_func_arg1);
#line 1795
  return;
}
}
#line 1797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1802
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1804
  mutex_unlock(ldv_func_arg1);
#line 1805
  return;
}
}
#line 1807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1812
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1814
  mutex_unlock(ldv_func_arg1);
#line 1815
  return;
}
}
#line 1817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_9(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1822
  tmp = mutex_trylock(ldv_func_arg1);
#line 1822
  ldv_func_res = tmp;
#line 1824
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1824
  return (tmp___0);
#line 1826
  return (ldv_func_res);
}
}
#line 1829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1834
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1836
  mutex_lock(ldv_func_arg1);
#line 1837
  return;
}
}
#line 1839 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1844
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1846
  mutex_unlock(ldv_func_arg1);
#line 1847
  return;
}
}
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops ;
#line 860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
#line 862
  __edi = __edi;
#line 862
  __esi = __esi;
#line 862
  __edx = __edx;
#line 862
  __ecx = __ecx;
#line 862
  __eax = __eax;
#line 862
  tmp = __builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                         0L);
#line 862
  if (tmp != 0L) {
#line 862
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"),
                         "i" (862), "i" (12UL));
    ldv_4702: ;
#line 862
    goto ldv_4702;
  } else {

  }
#line 862
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (47UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 862
  __ret = __eax;
#line 862
  return (__ret);
}
}
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 157
  return ((flags & 512UL) == 0UL);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 10 "include/linux/debug_locks.h"
extern int debug_locks ;
#line 324 "include/linux/lockdep.h"
extern int lock_is_held(struct lockdep_map * ) ;
#line 555
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6315;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6315;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6315;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6315;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_6315: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 232 "include/linux/rcupdate.h"
extern int rcu_is_cpu_idle(void) ;
#line 254
extern struct lockdep_map rcu_sched_lock_map ;
#line 255
extern int debug_lockdep_rcu_enabled(void) ;
#line 318 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  int tmp___0 ;
  struct thread_info *tmp___1 ;
  unsigned long _flags ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 320
  lockdep_opinion = 0;
#line 322
  tmp = debug_lockdep_rcu_enabled();
#line 322
  if (tmp == 0) {
#line 323
    return (1);
  } else {

  }
#line 324
  tmp___0 = rcu_is_cpu_idle();
#line 324
  if (tmp___0 != 0) {
#line 325
    return (0);
  } else {

  }
#line 326
  if (debug_locks != 0) {
#line 327
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
  } else {

  }
#line 328
  if (lockdep_opinion != 0) {
#line 328
    tmp___3 = 1;
  } else {
#line 328
    tmp___1 = current_thread_info___0();
#line 328
    if (tmp___1->preempt_count != 0) {
#line 328
      tmp___3 = 1;
    } else {
#line 328
      _flags = arch_local_save_flags();
#line 328
      tmp___2 = arch_irqs_disabled_flags(_flags);
#line 328
      if (tmp___2 != 0) {
#line 328
        tmp___3 = 1;
      } else {
#line 328
        tmp___3 = 0;
      }
    }
  }
#line 328
  return (tmp___3);
}
}
#line 743 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 
  struct thread_info *tmp ;

  {
#line 745
  tmp = current_thread_info___0();
#line 745
  tmp->preempt_count = tmp->preempt_count + 1;
#line 745
  __asm__  volatile   ("": : : "memory");
#line 747
  return;
}
}
#line 762 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace(void) 
{ 
  struct thread_info *tmp ;

  {
#line 765
  __asm__  volatile   ("": : : "memory");
#line 765
  tmp = current_thread_info___0();
#line 765
  tmp->preempt_count = tmp->preempt_count + -1;
#line 765
  __asm__  volatile   ("": : : "memory");
#line 766
  return;
}
}
#line 227 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 85 "include/linux/jump_label.h"
__inline static bool static_branch(struct jump_label_key *key ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 87
  tmp = atomic_read((atomic_t const   *)(& key->enabled));
#line 87
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 87
  if (tmp___0 != 0L) {
#line 88
    return (1);
  } else {

  }
#line 89
  return (0);
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 94 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 89
  tmp___1 = static_branch(& __tracepoint_module_get.key);
#line 89
  if ((int )tmp___1) {
#line 89
    rcu_read_lock_sched_notrace();
#line 89
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
    tmp = debug_lockdep_rcu_enabled();
#line 89
    if (tmp != 0 && ! __warned) {
#line 89
      tmp___0 = rcu_read_lock_sched_held();
#line 89
      if (tmp___0 == 0 && 1) {
#line 89
        __warned = 1;
#line 89
        lockdep_rcu_suspicious("include/trace/events/module.h", 94, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 89
    it_func_ptr = _________p1;
#line 89
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13701: 
#line 89
      it_func = it_func_ptr->func;
#line 89
      __data = it_func_ptr->data;
#line 89
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 89
      it_func_ptr = it_func_ptr + 1;
#line 89
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
        goto ldv_13701;
      } else {

      }

    } else {

    }
#line 89
    rcu_read_unlock_sched_notrace();
  } else {

  }
#line 91
  return;
}
}
#line 382 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 384
  return ((unsigned int )mod->state != 2U);
}
}
#line 465 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  struct thread_info *tmp ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp___0 ;
  long tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 467
  ret = 1;
#line 469
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 470
    tmp = current_thread_info___0();
#line 470
    tmp->preempt_count = tmp->preempt_count + 1;
#line 470
    __asm__  volatile   ("": : : "memory");
#line 472
    tmp___0 = module_is_live(module);
#line 472
    tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
#line 472
    if (tmp___1 != 0L) {
#line 473
      __vpp_verify = 0;
#line 473
      switch (8UL) {
      case 1UL: 
#line 473
      pao_ID__ = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14070;
      case 2UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14070;
      case 4UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14070;
      case 8UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14070;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14070: ;
#line 473
      goto ldv_14075;
      case 2UL: 
#line 473
      pao_ID_____0 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14081;
      case 2UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14081;
      case 4UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14081;
      case 8UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14081;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14081: ;
#line 473
      goto ldv_14075;
      case 4UL: 
#line 473
      pao_ID_____1 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14091;
      case 2UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14091;
      case 4UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14091;
      case 8UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14091;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14091: ;
#line 473
      goto ldv_14075;
      case 8UL: 
#line 473
      pao_ID_____2 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14101;
      case 2UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14101;
      case 4UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14101;
      case 8UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14101;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14101: ;
#line 473
      goto ldv_14075;
      default: 
#line 473
      __bad_size_call_parameter();
#line 473
      goto ldv_14075;
      }
      ldv_14075: ;
#line 474
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 476
      ret = 0;
    }
#line 478
    __asm__  volatile   ("": : : "memory");
#line 478
    tmp___2 = current_thread_info___0();
#line 478
    tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 478
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 480
  return (ret);
}
}
#line 483
extern void module_put(struct module * ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 79 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 80
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 87
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1139
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1141
  return (mdev);
}
}
#line 1506
int proc_details ;
#line 1649 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1650
struct file_operations  const  drbd_proc_fops ;
#line 2195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2206
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2207
    *bits_left = mdev->ov_left;
  } else {
#line 2209
    tmp = drbd_bm_total_weight(mdev);
#line 2209
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2212
  if (*bits_left > mdev->rs_total) {
#line 2218
    __asm__  volatile   ("": : : "memory");
#line 2219
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38985.conn);
#line 2219
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2222
    *per_mil_done = 0U;
  } else {
#line 2233
    shift = (unsigned long long )mdev->rs_total > 4294967295ULL ? 16U : 10U;
#line 2234
    left = *bits_left >> (int )shift;
#line 2235
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2236
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2237
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2239
  return;
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2327
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 101
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 105
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 116
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 116
  if (tmp___0 != 0L) {
#line 118
    seq_printf(seq, "%ld,", v / 1000000L);
#line 119
    v = v / 1000000L;
#line 120
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 121
    tmp = __builtin_expect(v > 999L, 1L);
#line 121
    if (tmp != 0L) {
#line 122
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 124
      seq_printf(seq, "%ld", v);
    }
  }
#line 125
  return;
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 138
  stalled = 0;
#line 140
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 142
  x = (int )(res / 50U);
#line 143
  y = 20 - x;
#line 144
  seq_printf(seq, "\t[");
#line 145
  i = 1;
#line 145
  goto ldv_50254;
  ldv_50253: 
#line 146
  seq_printf(seq, "=");
#line 145
  i = i + 1;
  ldv_50254: ;
#line 145
  if (i < x) {
#line 146
    goto ldv_50253;
  } else {

  }
#line 147
  seq_printf(seq, ">");
#line 148
  i = 0;
#line 148
  goto ldv_50257;
  ldv_50256: 
#line 149
  seq_printf(seq, ".");
#line 148
  i = i + 1;
  ldv_50257: ;
#line 148
  if (i < y) {
#line 149
    goto ldv_50256;
  } else {

  }
#line 150
  seq_printf(seq, "] ");
#line 152
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 153
    seq_printf(seq, "verified:");
  } else {
#line 155
    seq_printf(seq, "sync\'ed:");
  }
#line 156
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 159
  if (mdev->rs_total > 1048576UL) {
#line 160
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 164
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 181
  i = (mdev->rs_last_mark + 2) % 8;
#line 182
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 183
  if (dt > 6000UL) {
#line 184
    stalled = 1;
  } else {

  }
#line 186
  if (dt == 0UL) {
#line 187
    dt = dt + 1UL;
  } else {

  }
#line 188
  db = mdev->rs_mark_left[i] - rs_left;
#line 189
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 191
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 194
  dbdt = db / dt << 2;
#line 195
  seq_printf(seq, " speed: ");
#line 196
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 197
  seq_printf(seq, " (");
#line 199
  if (proc_details > 0) {
#line 201
    i = (mdev->rs_last_mark + 7) % 8;
#line 202
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 203
    if (dt == 0UL) {
#line 204
      dt = dt + 1UL;
    } else {

    }
#line 205
    db = mdev->rs_mark_left[i] - rs_left;
#line 206
    dbdt = db / dt << 2;
#line 207
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 208
    seq_printf(seq, " -- ");
  } else {

  }
#line 214
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 215
  if (dt == 0UL) {
#line 216
    dt = 1UL;
  } else {

  }
#line 217
  db = mdev->rs_total - rs_left;
#line 218
  dbdt = db / dt << 2;
#line 219
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 220
  seq_printf(seq, ")");
#line 222
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 224
    seq_printf(seq, " want: ");
#line 225
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 227
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 229
  if (proc_details > 0) {
#line 232
    tmp = drbd_bm_bits(mdev);
#line 232
    bm_bits = tmp;
#line 234
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 236
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 238
      bit_pos = mdev->bm_resync_fo;
    }
#line 241
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 247
  return;
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 251
  __mptr = (struct lc_element  const  *)e;
#line 251
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 253
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 256
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 261
  hole = 0;
#line 265
  write_ordering_chars[0] = 110;
#line 265
  write_ordering_chars[1] = 100;
#line 265
  write_ordering_chars[2] = 102;
#line 271
  tmp = drbd_buildtag();
#line 271
  seq_printf(seq, "version: 8.3.11 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 294
  i = 0;
#line 294
  goto ldv_50279;
  ldv_50278: 
#line 295
  mdev = minor_to_mdev((unsigned int )i);
#line 296
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 297
    hole = 1;
#line 298
    goto ldv_50277;
  } else {

  }
#line 300
  if (hole != 0) {
#line 301
    hole = 0;
#line 302
    seq_printf(seq, "\n");
  } else {

  }
#line 305
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38985.conn);
#line 307
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 310
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 312
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 312
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 312
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 312
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 312
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 312
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 312
    tmp___6 = is_susp(mdev->state);
#line 312
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.pdsk);
#line 312
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.disk);
#line 312
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_38985.peer);
#line 312
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_38985.role);
#line 312
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 343
    tmp___11 = drbd_bm_total_weight(mdev);
#line 343
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 347
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 351
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 353
  if (proc_details > 0) {
#line 353
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 353
    if (tmp___12 != 0) {
#line 354
      lc_seq_printf_stats(seq, mdev->resync);
#line 355
      lc_seq_printf_stats(seq, mdev->act_log);
#line 356
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 359
  if (proc_details > 1) {
#line 360
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 361
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_50277: 
#line 294
  i = i + 1;
  ldv_50279: ;
#line 294
  if ((unsigned int )i < minor_count) {
#line 295
    goto ldv_50278;
  } else {

  }

#line 367
  return (0);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 372
  tmp___1 = try_module_get(& __this_module);
#line 372
  if (tmp___1 != 0) {
#line 373
    tmp = PDE((struct inode  const  *)inode);
#line 373
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 373
    return (tmp___0);
  } else {

  }
#line 374
  return (-19);
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 379
  module_put(& __this_module);
#line 380
  tmp = single_release(inode, file);
#line 380
  return (tmp);
}
}
#line 404
extern void ldv_check_return_value(int  ) ;
#line 413
extern void ldv_handler_precall(void) ;
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 456
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 446
  LDV_IN_INTERRUPT = 1;
#line 455
  ldv_initialize();
#line 459
  goto ldv_50315;
  ldv_50314: 
#line 463
  tmp = nondet_int();
#line 463
  switch (tmp) {
  case 0: ;
#line 468
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 473
    ldv_handler_precall();
#line 474
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 475
    ldv_check_return_value(res_drbd_proc_open_4);
#line 476
    if (res_drbd_proc_open_4 != 0) {
#line 477
      goto ldv_module_exit;
    } else {

    }
#line 478
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 484
  goto ldv_50311;
  case 1: ;
#line 488
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 493
    ldv_handler_precall();
#line 494
    drbd_proc_release(var_group1, var_group2);
#line 495
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 501
  goto ldv_50311;
  default: ;
#line 502
  goto ldv_50311;
  }
  ldv_50311: ;
  ldv_50315: 
#line 459
  tmp___0 = nondet_int();
#line 459
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 461
    goto ldv_50314;
  } else {

  }

  ldv_module_exit: ;
#line 511
  ldv_check_final_state();
#line 514
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 523
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 525
  mutex_lock(ldv_func_arg1);
#line 526
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 533
  tmp = mutex_trylock(ldv_func_arg1);
#line 533
  ldv_func_res = tmp;
#line 535
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 535
  return (tmp___0);
#line 537
  return (ldv_func_res);
}
}
#line 540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 545
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 547
  mutex_unlock(ldv_func_arg1);
#line 548
  return;
}
}
#line 550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 555
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 557
  mutex_lock(ldv_func_arg1);
#line 558
  return;
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 565
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 567
  mutex_unlock(ldv_func_arg1);
#line 568
  return;
}
}
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 575
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 577
  mutex_lock(ldv_func_arg1);
#line 578
  return;
}
}
#line 580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 585
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 587
  mutex_unlock(ldv_func_arg1);
#line 588
  return;
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 595
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 597
  mutex_unlock(ldv_func_arg1);
#line 598
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 304 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5576;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5576;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5576;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5576;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5576: ;
#line 216
  return (__ret);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_6020.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_6020.rlock);
#line 326
  return;
}
}
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 341 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 341
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 341
  return (tmp);
}
}
#line 353 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 355
  tmp = PageTail((struct page  const  *)page);
#line 355
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 355
  if (tmp___0 != 0L) {
#line 356
    return (page->ldv_13201.first_page);
  } else {

  }
#line 357
  return (page);
}
}
#line 375 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 377
  tmp = compound_head(page);
#line 377
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_13188.ldv_13187.ldv_13186._count));
#line 377
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_19666: ;
#line 63
    goto ldv_19666;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19667: ;
#line 65
    goto ldv_19667;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_19668: ;
#line 66
    goto ldv_19668;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_2029.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 882 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 901
  return ((loff_t )inode->i_size);
}
}
#line 360 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2171
extern void flush_signals(struct task_struct * ) ;
#line 2205
extern void force_sig(int  , struct task_struct * ) ;
#line 1364 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1126 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1128
  return (& tfm->base);
}
}
#line 1146 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1148
  tmp = crypto_hash_tfm(tfm);
#line 1148
  return (& tmp->crt_u.hash);
}
}
#line 1161 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1163
  tmp = crypto_hash_crt(tfm);
#line 1163
  return (tmp->digestsize);
}
}
#line 1181 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1183
  tmp = crypto_hash_crt(desc->tfm);
#line 1183
  tmp___0 = (*(tmp->init))(desc);
#line 1183
  return (tmp___0);
}
}
#line 1186 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1195
  tmp = crypto_hash_crt(desc->tfm);
#line 1195
  tmp___0 = (*(tmp->final))(desc, out);
#line 1195
  return (tmp___0);
}
}
#line 225 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 669 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1004 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1006
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1146
  return (mdev->minor);
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  ldv_mutex_lock_44(& mdev->data.mutex);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    ldv_mutex_unlock_45(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1198
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1210
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1212
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1229
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1233
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1238
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1246
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1252
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1254
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1255
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1257
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1258
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1260
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1264
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1270
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1271
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1273
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1275
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1276
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1279
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1499
wait_queue_head_t drbd_pp_wait ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1529
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1532
int drbd_worker(struct drbd_thread *thi ) ;
#line 1533
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1534
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1535
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1536
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1537
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1541
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1542
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1544 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1546
  if (mdev->ov_last_oos_size != 0UL) {
#line 1547
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1551
  mdev->ov_last_oos_size = 0UL;
#line 1552
  return;
}
}
#line 1555
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1556
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1559
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1560
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1561
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1562
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1563
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1564
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1565
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1566
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1568
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1569
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1570
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1571
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1572
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1574
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1575
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1576
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1578
void resync_timer_fn(unsigned long data ) ;
#line 1579
void start_resync_timer_fn(unsigned long data ) ;
#line 1582
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1583
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1586
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1591
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1606 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1610
  if (level == 1) {
#line 1611
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1613
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1615
  return (err);
}
}
#line 1618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1620
  val = 1;
#line 1621
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1623
  return;
}
}
#line 1625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1627
  val = 0;
#line 1628
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1630
  return;
}
}
#line 1655
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1656
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1657
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1659
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1660
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1661
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1662
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1665
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1666
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1670
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1747 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1749
  return ((struct page *)page->ldv_13201.private);
}
}
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_49968;
  ldv_49967: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_49968: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_49967;
    } else {
#line 1776
      goto ldv_49969;
    }
  } else {

  }
  ldv_49969: ;
#line 1777
  return (0);
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_49973;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_49976: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_49975;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_49976;
  ldv_49975: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49973: ;
#line 1786
  return;
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1789
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1790
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1791
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38985.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_50001;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38985.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38985.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_50001;
  }
  ldv_50001: ;
#line 1847
  return;
}
}
#line 1905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1908
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1908
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1908
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1908
    tmp___0 = 0UL;
  }
#line 1908
  return (tmp___0);
}
}
#line 1987 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1990
  tmp = spinlock_check(& q->q_lock);
#line 1990
  flags = _raw_spin_lock_irqsave(tmp);
#line 1991
  list_add_tail(& w->list, & q->q);
#line 1992
  up(& q->s);
#line 1994
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1995
  return;
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1999
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1999
  if (tmp != 0) {
#line 2000
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2001
  return;
}
}
#line 2003 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2005
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2006
  wake_asender(mdev);
#line 2007
  return;
}
}
#line 2009 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2013
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2013
  return (tmp);
}
}
#line 2028 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2030
  _drbd_thread_stop(thi, 0, 1);
#line 2031
  return;
}
}
#line 2088 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2090
  atomic_inc(& mdev->rs_pending_cnt);
#line 2091
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 271
  bio = bio_clone(bio_src, 16U);
#line 273
  req->private_bio = bio;
#line 275
  bio->bi_private = (void *)req;
#line 276
  bio->bi_end_io = & drbd_endio_pri;
#line 277
  bio->bi_next = 0;
#line 278
  return;
}
}
#line 321
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 323
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 332
  mdev = req->mdev;
#line 337
  rv = __req_mod(req, what, & m);
#line 338
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 339
    complete_master_bio(mdev, & m);
  } else {

  }
#line 341
  return (rv);
}
}
#line 348 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 352
  mdev = req->mdev;
#line 356
  tmp = spinlock_check(& mdev->req_lock);
#line 356
  flags = _raw_spin_lock_irqsave(tmp);
#line 357
  rv = __req_mod(req, what, & m);
#line 358
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 360
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 361
    complete_master_bio(mdev, & m);
  } else {

  }
#line 363
  return (rv);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 105
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 137
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 138
  md_io->error = error;
#line 140
  complete(& md_io->event);
#line 141
  return;
}
}
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 148
  flags = 0UL;
#line 149
  mdev = e->mdev;
#line 151
  if (e->ldv_47927.block_id == 0ULL) {
#line 151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            151);
  } else {

  }
#line 153
  tmp = spinlock_check(& mdev->req_lock);
#line 153
  flags = _raw_spin_lock_irqsave(tmp);
#line 154
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 155
  list_del(& e->w.list);
#line 156
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 156
  if (tmp___0 != 0) {
#line 157
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 158
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 158
  if (tmp___1 != 0) {
#line 159
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 160
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 162
  drbd_queue_work(& mdev->data.work, & e->w);
#line 163
  put_ldev(mdev);
#line 164
  return;
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 170
  flags = 0UL;
#line 171
  mdev = e->mdev;
#line 177
  if (e->ldv_47927.block_id == 0ULL) {
#line 177
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            177);
  } else {

  }
#line 183
  e_sector = e->sector;
#line 184
  do_al_complete_io = (int )e->flags & 1;
#line 185
  is_syncer_req = e->ldv_47927.block_id == 0xffffffffffffffffULL;
#line 187
  tmp = spinlock_check(& mdev->req_lock);
#line 187
  flags = _raw_spin_lock_irqsave(tmp);
#line 188
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 189
  list_del(& e->w.list);
#line 190
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 197
  if (is_syncer_req != 0) {
#line 197
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 197
    do_wake = tmp___0;
  } else {
#line 197
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 197
    do_wake = tmp___1;
  }
#line 201
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 201
  if (tmp___2 != 0) {
#line 202
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 203
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 205
  if (is_syncer_req != 0) {
#line 206
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 208
  if (do_wake != 0) {
#line 209
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 211
  if (do_al_complete_io != 0) {
#line 212
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 214
  wake_asender(mdev);
#line 215
  put_ldev(mdev);
#line 216
  return;
}
}
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 223
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 224
  mdev = e->mdev;
#line 225
  uptodate = (int )bio->bi_flags & 1;
#line 226
  is_write = (int )bio->bi_rw & 1;
#line 228
  if (error != 0) {
#line 228
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 228
    if (tmp != 0) {
#line 229
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 232
  if (error == 0 && uptodate == 0) {
#line 233
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 233
    if (tmp___0 != 0) {
#line 234
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 240
    error = -5;
  } else {

  }
#line 243
  if (error != 0) {
#line 244
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 246
  bio_put(bio);
#line 247
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 247
  if (tmp___1 != 0) {
#line 248
    if (is_write != 0) {
#line 249
      drbd_endio_write_sec_final(e);
    } else {
#line 251
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 252
  return;
}
}
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 260
  req = (struct drbd_request *)bio->bi_private;
#line 261
  mdev = req->mdev;
#line 264
  uptodate = (int )bio->bi_flags & 1;
#line 266
  if (error == 0 && uptodate == 0) {
#line 267
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 272
    error = -5;
  } else {

  }
#line 276
  tmp = __builtin_expect(error != 0, 0L);
#line 276
  if (tmp != 0L) {
#line 277
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 4097UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 283
    what = completed_ok;
  }
#line 285
  bio_put(req->private_bio);
#line 286
  tmp___0 = ERR_PTR((long )error);
#line 286
  req->private_bio = (struct bio *)tmp___0;
#line 289
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 289
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 290
  __req_mod(req, what, & m);
#line 291
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 293
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 294
    complete_master_bio(mdev, & m);
  } else {

  }
#line 295
  return;
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 299
  __mptr = (struct drbd_work  const  *)w;
#line 299
  req = (struct drbd_request *)__mptr;
#line 305
  spin_lock_irq(& mdev->req_lock);
#line 306
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 307
    _req_mod(req, read_retry_remote_canceled);
#line 308
    spin_unlock_irq(& mdev->req_lock);
#line 309
    return (1);
  } else {

  }
#line 311
  spin_unlock_irq(& mdev->req_lock);
#line 313
  tmp = w_send_read_req(mdev, w, 0);
#line 313
  return (tmp);
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 320
  page = e->pages;
#line 324
  desc.tfm = tfm;
#line 325
  desc.flags = 0U;
#line 327
  sg_init_table(& sg, 1U);
#line 328
  crypto_hash_init(& desc);
#line 330
  goto ldv_50479;
  ldv_50478: 
#line 332
  sg_set_page(& sg, page, 4096U, 0U);
#line 333
  crypto_hash_update(& desc, & sg, sg.length);
#line 334
  page = tmp;
  ldv_50479: 
#line 330
  tmp = page_chain_next(page);
#line 330
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 331
    goto ldv_50478;
  } else {

  }
#line 337
  len = e->size & 4095U;
#line 338
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 339
  crypto_hash_update(& desc, & sg, sg.length);
#line 340
  crypto_hash_final(& desc, (u8 *)digest);
#line 341
  return;
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 350
  desc.tfm = tfm;
#line 351
  desc.flags = 0U;
#line 353
  sg_init_table(& sg, 1U);
#line 354
  crypto_hash_init(& desc);
#line 356
  bvec = bio->bi_io_vec;
#line 356
  i = 0;
#line 356
  goto ldv_50492;
  ldv_50491: 
#line 357
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 358
  crypto_hash_update(& desc, & sg, sg.length);
#line 356
  bvec = bvec + 1;
#line 356
  i = i + 1;
  ldv_50492: ;
#line 356
  if ((int )bio->bi_vcnt > i) {
#line 357
    goto ldv_50491;
  } else {

  }
#line 360
  crypto_hash_final(& desc, (u8 *)digest);
#line 361
  return;
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 366
  __mptr = (struct drbd_work  const  *)w;
#line 366
  e = (struct drbd_epoch_entry *)__mptr;
#line 369
  ok = 1;
#line 371
  if (e->ldv_47927.block_id != 2205466966ULL) {
#line 371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            371);
  } else {

  }
#line 373
  tmp = __builtin_expect(cancel != 0, 0L);
#line 373
  if (tmp != 0L) {
#line 374
    goto out;
  } else {

  }
#line 376
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 376
  if (tmp___0 != 0L) {
#line 377
    goto out;
  } else {

  }
#line 379
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 379
  digest_size = (int )tmp___1;
#line 380
  digest = kmalloc((size_t )digest_size, 16U);
#line 381
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 382
    sector = e->sector;
#line 383
    size = e->size;
#line 384
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 390
    drbd_free_some_ee(mdev, e, 0);
#line 391
    e = 0;
#line 392
    inc_rs_pending(mdev);
#line 393
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 396
    kfree((void const   *)digest);
  } else {
#line 398
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 399
    ok = 0;
  }
  out: ;
#line 403
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 404
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 406
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 406
  if (tmp___2 != 0L) {
#line 407
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 408
  return (ok);
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 417
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 417
  if (tmp == 0) {
#line 418
    return (-5);
  } else {

  }
#line 420
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 420
  if (tmp___0 != 0) {
#line 421
    goto defer;
  } else {

  }
#line 425
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 426
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 427
    goto defer;
  } else {

  }
#line 429
  e->w.cb = & w_e_send_csum;
#line 430
  spin_lock_irq(& mdev->req_lock);
#line 431
  list_add(& e->w.list, & mdev->read_ee);
#line 432
  spin_unlock_irq(& mdev->req_lock);
#line 434
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 435
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 435
  if (tmp___1 == 0) {
#line 436
    return (0);
  } else {

  }
#line 442
  spin_lock_irq(& mdev->req_lock);
#line 443
  list_del(& e->w.list);
#line 444
  spin_unlock_irq(& mdev->req_lock);
#line 446
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 448
  put_ldev(mdev);
#line 449
  return (-11);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 454
  switch ((int )mdev->state.ldv_38985.conn) {
  case 18: 
#line 456
  w_make_ov_request(mdev, w, cancel);
#line 457
  goto ldv_50521;
  case 17: 
#line 459
  w_make_resync_request(mdev, w, cancel);
#line 460
  goto ldv_50521;
  }
  ldv_50521: ;
#line 463
  return (1);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 468
  mdev = (struct drbd_conf *)data;
#line 470
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 470
  if (tmp != 0) {
#line 471
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 472
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 478
  i = 0;
#line 478
  goto ldv_50533;
  ldv_50532: 
#line 479
  *(fb->values + (unsigned long )i) = value;
#line 478
  i = i + 1;
  ldv_50533: ;
#line 478
  if ((unsigned int )i < fb->size) {
#line 479
    goto ldv_50532;
  } else {

  }

#line 483
  return;
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 486
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 487
  tmp = fb->head_index;
#line 487
  fb->head_index = fb->head_index + 1U;
#line 487
  *(fb->values + (unsigned long )tmp) = value;
#line 489
  if (fb->head_index >= fb->size) {
#line 490
    fb->head_index = 0U;
  } else {

  }
#line 492
  return (ov);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 499
  i = 0;
#line 499
  goto ldv_50546;
  ldv_50545: 
#line 500
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 499
  i = i + 1;
  ldv_50546: ;
#line 499
  if ((unsigned int )i < fb->size) {
#line 500
    goto ldv_50545;
  } else {

  }

#line 504
  return;
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 514
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 514
  sect_in = (unsigned int )tmp;
#line 515
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 517
  spin_lock(& mdev->peer_seq_lock);
#line 519
  steps = (int )mdev->rs_plan_s.size;
#line 521
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 522
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 524
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 528
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 531
  cps = correction / steps;
#line 532
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 533
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 536
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 537
  spin_unlock(& mdev->peer_seq_lock);
#line 538
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 540
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 541
  if (req_sect < 0) {
#line 542
    req_sect = 0;
  } else {

  }
#line 544
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 545
  if (req_sect > max_sect) {
#line 546
    req_sect = max_sect;
  } else {

  }
#line 554
  return (req_sect);
}
}
#line 557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 560
  if (mdev->rs_plan_s.size != 0U) {
#line 561
    tmp = drbd_rs_controller(mdev);
#line 561
    number = tmp >> 3;
#line 562
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 564
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 565
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 570
  return (number);
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 578
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 578
  capacity = tmp;
#line 582
  i = 0;
#line 584
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 584
  if (tmp___0 != 0L) {
#line 585
    return (1);
  } else {

  }
#line 587
  if (mdev->rs_total == 0UL) {
#line 589
    drbd_resync_finished(mdev);
#line 590
    return (1);
  } else {

  }
#line 593
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 593
  if (tmp___1 == 0) {
#line 598
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 599
    return (1);
  } else {

  }
#line 602
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 602
  max_bio_size = (int )(tmp___2 << 9);
#line 603
  number = drbd_rs_number_requests(mdev);
#line 604
  if (number == 0) {
#line 605
    goto requeue;
  } else {

  }
#line 607
  i = 0;
#line 607
  goto ldv_50594;
  ldv_50593: 
#line 609
  ldv_mutex_lock_47(& mdev->data.mutex);
#line 610
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 611
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 612
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 614
    queued = 1;
#line 615
    sndbuf = 0;
  }
#line 617
  ldv_mutex_unlock_48(& mdev->data.mutex);
#line 618
  if (sndbuf / 2 < queued) {
#line 619
    goto requeue;
  } else {

  }
  next_sector: 
#line 622
  size = 4096;
#line 623
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 625
  if (bit == 0xffffffffffffffffUL) {
#line 626
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 627
    put_ldev(mdev);
#line 628
    return (1);
  } else {

  }
#line 631
  sector = bit << 3;
#line 633
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 633
  if (tmp___3 != 0) {
#line 635
    mdev->bm_resync_fo = bit;
#line 636
    goto requeue;
  } else {
#line 633
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 633
    if (tmp___4 != 0) {
#line 635
      mdev->bm_resync_fo = bit;
#line 636
      goto requeue;
    } else {

    }
  }
#line 638
  mdev->bm_resync_fo = bit + 1UL;
#line 640
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 640
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 640
  if (tmp___6 != 0L) {
#line 641
    drbd_rs_complete_io(mdev, sector);
#line 642
    goto next_sector;
  } else {

  }
#line 652
  align = 1;
#line 653
  rollback_i = i;
  ldv_50582: ;
#line 655
  if (size + 4096 > max_bio_size) {
#line 656
    goto ldv_50581;
  } else {

  }
#line 659
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 660
    goto ldv_50581;
  } else {

  }
#line 663
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 664
    goto ldv_50581;
  } else {

  }
#line 670
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 670
  if (tmp___7 != 1) {
#line 671
    goto ldv_50581;
  } else {

  }
#line 672
  bit = bit + 1UL;
#line 673
  size = size + 4096;
#line 674
  if (4096 << align <= size) {
#line 675
    align = align + 1;
  } else {

  }
#line 676
  i = i + 1;
#line 677
  goto ldv_50582;
  ldv_50581: ;
#line 680
  if (size > 4096) {
#line 681
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 685
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 686
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 687
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 688
    tmp___8 = read_for_csum(mdev, sector, size);
#line 688
    switch (tmp___8) {
    case -5: 
#line 690
    put_ldev(mdev);
#line 691
    return (0);
    case -11: 
#line 693
    drbd_rs_complete_io(mdev, sector);
#line 694
    mdev->bm_resync_fo = sector >> 3;
#line 695
    i = rollback_i;
#line 696
    goto requeue;
    case 0: ;
#line 699
    goto ldv_50586;
    default: 
#line 701
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (701), "i" (12UL));
    ldv_50588: ;
#line 701
    goto ldv_50588;
    }
    ldv_50586: ;
  } else {
#line 704
    inc_rs_pending(mdev);
#line 705
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 705
    if (tmp___11 == 0) {
#line 707
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 708
      atomic_dec(& mdev->rs_pending_cnt);
#line 708
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 708
      if (tmp___10 < 0) {
#line 708
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 708
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 708, tmp___9);
      } else {

      }
#line 709
      put_ldev(mdev);
#line 710
      return (0);
    } else {

    }
  }
#line 607
  i = i + 1;
  ldv_50594: ;
#line 607
  if (i < number) {
#line 608
    goto ldv_50593;
  } else {

  }
#line 715
  tmp___12 = drbd_bm_bits(mdev);
#line 715
  if (mdev->bm_resync_fo >= tmp___12) {
#line 722
    put_ldev(mdev);
#line 723
    return (1);
  } else {

  }
  requeue: 
#line 727
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 728
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 729
  put_ldev(mdev);
#line 730
  return (1);
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 737
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 737
  capacity = tmp;
#line 739
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 739
  if (tmp___0 != 0L) {
#line 740
    return (1);
  } else {

  }
#line 742
  number = drbd_rs_number_requests(mdev);
#line 744
  sector = mdev->ov_position;
#line 745
  i = 0;
#line 745
  goto ldv_50612;
  ldv_50611: ;
#line 746
  if (sector >= capacity) {
#line 747
    return (1);
  } else {

  }
#line 750
  size = 4096;
#line 752
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 752
  if (tmp___1 != 0) {
#line 754
    mdev->ov_position = sector;
#line 755
    goto requeue;
  } else {
#line 752
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 752
    if (tmp___2 != 0) {
#line 754
      mdev->ov_position = sector;
#line 755
      goto requeue;
    } else {

    }
  }
#line 758
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 759
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 761
  inc_rs_pending(mdev);
#line 762
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 762
  if (tmp___5 == 0) {
#line 763
    atomic_dec(& mdev->rs_pending_cnt);
#line 763
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 763
    if (tmp___4 < 0) {
#line 763
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 763
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 763, tmp___3);
    } else {

    }
#line 764
    return (0);
  } else {

  }
#line 766
  sector = sector + 8UL;
#line 745
  i = i + 1;
  ldv_50612: ;
#line 745
  if (i < number) {
#line 746
    goto ldv_50611;
  } else {

  }
#line 768
  mdev->ov_position = sector;
  requeue: 
#line 771
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 772
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 773
  return (1);
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 779
  mdev = (struct drbd_conf *)data;
#line 781
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 782
  return;
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 786
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 786
  if (tmp != 0) {
#line 787
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 788
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 789
    add_timer(& mdev->start_resync_timer);
#line 790
    return (1);
  } else {
#line 786
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 786
    if (tmp___0 != 0) {
#line 787
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 788
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 789
      add_timer(& mdev->start_resync_timer);
#line 790
      return (1);
    } else {

    }
  }
#line 793
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 794
  clear_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 795
  return (1);
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 800
  kfree((void const   *)w);
#line 801
  ov_oos_print(mdev);
#line 802
  drbd_resync_finished(mdev);
#line 804
  return (1);
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 809
  kfree((void const   *)w);
#line 811
  drbd_resync_finished(mdev);
#line 813
  return (1);
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 818
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 819
  request_ping(mdev);
#line 820
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 820
  if (tmp != 0 || (int )mdev->state.ldv_38985.conn <= 9) {
#line 820
    goto ldv_50636;
  } else {

  }
#line 820
  tmp___0 = get_current();
#line 820
  __wait.flags = 0U;
#line 820
  __wait.private = (void *)tmp___0;
#line 820
  __wait.func = & autoremove_wake_function;
#line 820
  __wait.task_list.next = & __wait.task_list;
#line 820
  __wait.task_list.prev = & __wait.task_list;
  ldv_50639: 
#line 820
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 820
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 820
  if (tmp___1 != 0 || (int )mdev->state.ldv_38985.conn <= 9) {
#line 820
    goto ldv_50638;
  } else {

  }
#line 820
  schedule();
#line 820
  goto ldv_50639;
  ldv_50638: 
#line 820
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50636: ;
#line 823
  return;
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 830
  khelper_cmd = 0;
#line 831
  verify_done = 0;
#line 836
  tmp___0 = drbd_rs_del_all(mdev);
#line 836
  if (tmp___0 != 0) {
#line 842
    schedule_timeout_interruptible(25L);
#line 843
    tmp = kmalloc(24UL, 32U);
#line 843
    w = (struct drbd_work *)tmp;
#line 844
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 845
      w->cb = & w_resync_finished;
#line 846
      drbd_queue_work(& mdev->data.work, w);
#line 847
      return (1);
    } else {

    }
#line 849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 852
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 853
  if (dt == 0UL) {
#line 854
    dt = 1UL;
  } else {

  }
#line 855
  db = mdev->rs_total;
#line 856
  dbdt = db / dt << 2;
#line 857
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 859
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 859
  if (tmp___1 == 0) {
#line 860
    goto out;
  } else {

  }
#line 862
  ping_peer(mdev);
#line 864
  spin_lock_irq(& mdev->req_lock);
#line 865
  os = mdev->state;
#line 867
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 871
  if ((int )os.ldv_38985.conn <= 10) {
#line 872
    goto out_unlock;
  } else {

  }
#line 874
  ns = os;
#line 875
  ns.ldv_38985.conn = 10U;
#line 877
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 881
  n_oos = drbd_bm_total_weight(mdev);
#line 883
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 884
    if (n_oos != 0UL) {
#line 885
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 887
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 890
      if (mdev->rs_failed != n_oos) {
#line 890
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                890);
      } else {

      }
#line 892
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 893
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 895
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 896
        s = mdev->rs_same_csum;
#line 897
        t = mdev->rs_total;
#line 898
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 901
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 910
  if (mdev->rs_failed != 0UL) {
#line 911
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 913
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 914
      ns.ldv_38985.disk = 4U;
#line 915
      ns.ldv_38985.pdsk = 8U;
    } else {
#line 917
      ns.ldv_38985.disk = 8U;
#line 918
      ns.ldv_38985.pdsk = 4U;
    }
  } else {
#line 921
    ns.ldv_38985.disk = 8U;
#line 922
    ns.ldv_38985.pdsk = 8U;
#line 924
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 925
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 927
        i = 1;
#line 927
        goto ldv_50659;
        ldv_50658: 
#line 928
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 927
        i = i + 1;
        ldv_50659: ;
#line 927
        if (i <= 3) {
#line 928
          goto ldv_50658;
        } else {

        }
#line 929
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 930
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 932
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 936
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 939
      drbd_uuid_set_bm(mdev, 0ULL);
#line 940
      drbd_print_uuids(mdev, "updated UUIDs");
#line 941
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 945
        i___0 = 0;
#line 945
        goto ldv_50663;
        ldv_50662: 
#line 946
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 945
        i___0 = i___0 + 1;
        ldv_50663: ;
#line 945
        if (i___0 <= 3) {
#line 946
          goto ldv_50662;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 951
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 953
  spin_unlock_irq(& mdev->req_lock);
#line 954
  put_ldev(mdev);
  out: 
#line 956
  mdev->rs_total = 0UL;
#line 957
  mdev->rs_failed = 0UL;
#line 958
  mdev->rs_paused = 0UL;
#line 959
  if (verify_done != 0) {
#line 960
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 962
  drbd_md_sync(mdev);
#line 964
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 965
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 967
  return (1);
}
}
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 973
  tmp = drbd_ee_has_active_page(e);
#line 973
  if (tmp != 0) {
#line 975
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 976
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 977
    atomic_sub(i, & mdev->pp_in_use);
#line 978
    spin_lock_irq(& mdev->req_lock);
#line 979
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 980
    spin_unlock_irq(& mdev->req_lock);
#line 981
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 983
    drbd_free_some_ee(mdev, e, 0);
  }
#line 984
  return;
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 994
  __mptr = (struct drbd_work  const  *)w;
#line 994
  e = (struct drbd_epoch_entry *)__mptr;
#line 997
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 997
  if (tmp___1 != 0L) {
#line 998
    drbd_free_some_ee(mdev, e, 0);
#line 999
    atomic_dec(& mdev->unacked_cnt);
#line 999
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 999
    if (tmp___0 < 0) {
#line 999
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 999
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 999, tmp);
    } else {

    }
#line 1000
    return (1);
  } else {

  }
#line 1003
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1003
  if (tmp___3 != 0L) {
#line 1004
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1006
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1006
    if (tmp___2 != 0) {
#line 1007
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1010
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1013
  atomic_dec(& mdev->unacked_cnt);
#line 1013
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1013
  if (tmp___5 < 0) {
#line 1013
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1013
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1013, tmp___4);
  } else {

  }
#line 1015
  move_to_net_ee_or_free(mdev, e);
#line 1017
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1017
  if (tmp___6 != 0L) {
#line 1018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1019
  return (ok);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1030
  __mptr = (struct drbd_work  const  *)w;
#line 1030
  e = (struct drbd_epoch_entry *)__mptr;
#line 1033
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1033
  if (tmp___1 != 0L) {
#line 1034
    drbd_free_some_ee(mdev, e, 0);
#line 1035
    atomic_dec(& mdev->unacked_cnt);
#line 1035
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
    if (tmp___0 < 0) {
#line 1035
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1035, tmp);
    } else {

    }
#line 1036
    return (1);
  } else {

  }
#line 1039
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1039
  if (tmp___2 != 0) {
#line 1040
    drbd_rs_complete_io(mdev, e->sector);
#line 1041
    put_ldev(mdev);
  } else {

  }
#line 1044
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1045
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1046
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1046
    if (tmp___6 != 0L) {
#line 1047
      tmp___4 = __builtin_expect((int )mdev->state.ldv_38985.pdsk > 3, 1L);
#line 1047
      if (tmp___4 != 0L) {
#line 1048
        inc_rs_pending(mdev);
#line 1049
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1051
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1051
        if (tmp___3 != 0) {
#line 1052
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1054
        ok = 1;
      }
    } else {
#line 1057
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1057
      if (tmp___5 != 0) {
#line 1058
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1061
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1064
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1067
  atomic_dec(& mdev->unacked_cnt);
#line 1067
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1067
  if (tmp___8 < 0) {
#line 1067
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1067
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1067, tmp___7);
  } else {

  }
#line 1069
  move_to_net_ee_or_free(mdev, e);
#line 1071
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1071
  if (tmp___9 != 0L) {
#line 1072
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1073
  return (ok);
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1078
  __mptr = (struct drbd_work  const  *)w;
#line 1078
  e = (struct drbd_epoch_entry *)__mptr;
#line 1081
  digest = 0;
#line 1082
  eq = 0;
#line 1084
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1084
  if (tmp___1 != 0L) {
#line 1085
    drbd_free_some_ee(mdev, e, 0);
#line 1086
    atomic_dec(& mdev->unacked_cnt);
#line 1086
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
    if (tmp___0 < 0) {
#line 1086
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1086, tmp);
    } else {

    }
#line 1087
    return (1);
  } else {

  }
#line 1090
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1090
  if (tmp___2 != 0) {
#line 1091
    drbd_rs_complete_io(mdev, e->sector);
#line 1092
    put_ldev(mdev);
  } else {

  }
#line 1095
  di = e->ldv_47927.digest;
#line 1097
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1097
  if (tmp___6 != 0L) {
#line 1101
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1102
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1102
      digest_size = (int )tmp___3;
#line 1103
      if (di->digest_size != digest_size) {
#line 1103
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1103);
      } else {

      }
#line 1104
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1106
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1107
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1108
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1108
      eq = tmp___4 == 0;
#line 1109
      kfree((void const   *)digest);
    } else {

    }
#line 1112
    if (eq != 0) {
#line 1113
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1113U);
#line 1115
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1116
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1118
      inc_rs_pending(mdev);
#line 1119
      e->ldv_47927.block_id = 0xffffffffffffffffULL;
#line 1120
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1121
      kfree((void const   *)di);
#line 1122
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1125
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1126
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1126
    if (tmp___5 != 0) {
#line 1127
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1130
  atomic_dec(& mdev->unacked_cnt);
#line 1130
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1130
  if (tmp___8 < 0) {
#line 1130
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1130
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1130, tmp___7);
  } else {

  }
#line 1131
  move_to_net_ee_or_free(mdev, e);
#line 1133
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1133
  if (tmp___9 != 0L) {
#line 1134
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1135
  return (ok);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1141
  __mptr = (struct drbd_work  const  *)w;
#line 1141
  e = (struct drbd_epoch_entry *)__mptr;
#line 1142
  sector = e->sector;
#line 1143
  size = e->size;
#line 1146
  ok = 1;
#line 1148
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1148
  if (tmp != 0L) {
#line 1149
    goto out;
  } else {

  }
#line 1151
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1151
  digest_size = (int )tmp___0;
#line 1152
  digest = kmalloc((size_t )digest_size, 16U);
#line 1153
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1154
    ok = 0;
#line 1155
    goto out;
  } else {

  }
#line 1158
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1158
  if (tmp___1 != 0L) {
#line 1159
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1161
    memset(digest, 0, (size_t )digest_size);
  }
#line 1168
  drbd_free_some_ee(mdev, e, 0);
#line 1169
  e = 0;
#line 1170
  inc_rs_pending(mdev);
#line 1171
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1174
  if (ok == 0) {
#line 1175
    atomic_dec(& mdev->rs_pending_cnt);
#line 1175
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1175
    if (tmp___3 < 0) {
#line 1175
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1175
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1175, tmp___2);
    } else {

    }
  } else {

  }
#line 1176
  kfree((void const   *)digest);
  out: ;
#line 1179
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1180
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1181
  atomic_dec(& mdev->unacked_cnt);
#line 1181
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1181
  if (tmp___5 < 0) {
#line 1181
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1181, tmp___4);
  } else {

  }
#line 1182
  return (ok);
}
}
#line 1185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1187
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1188
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1190
    mdev->ov_last_oos_start = sector;
#line 1191
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1193
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1193U);
#line 1194
  return;
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1198
  __mptr = (struct drbd_work  const  *)w;
#line 1198
  e = (struct drbd_epoch_entry *)__mptr;
#line 1201
  sector = e->sector;
#line 1202
  size = e->size;
#line 1204
  eq = 0;
#line 1206
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1206
  if (tmp___1 != 0L) {
#line 1207
    drbd_free_some_ee(mdev, e, 0);
#line 1208
    atomic_dec(& mdev->unacked_cnt);
#line 1208
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1208
    if (tmp___0 < 0) {
#line 1208
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1208
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1208, tmp);
    } else {

    }
#line 1209
    return (1);
  } else {

  }
#line 1214
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1214
  if (tmp___2 != 0) {
#line 1215
    drbd_rs_complete_io(mdev, e->sector);
#line 1216
    put_ldev(mdev);
  } else {

  }
#line 1219
  di = e->ldv_47927.digest;
#line 1221
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1221
  if (tmp___5 != 0L) {
#line 1222
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1222
    digest_size = (int )tmp___3;
#line 1223
    digest = kmalloc((size_t )digest_size, 16U);
#line 1224
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1225
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1227
      if (di->digest_size != digest_size) {
#line 1227
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1227);
      } else {

      }
#line 1228
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1228
      eq = tmp___4 == 0;
#line 1229
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1238
  drbd_free_some_ee(mdev, e, 0);
#line 1239
  if (eq == 0) {
#line 1240
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1242
    ov_oos_print(mdev);
  }
#line 1244
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1247
  atomic_dec(& mdev->unacked_cnt);
#line 1247
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1247
  if (tmp___7 < 0) {
#line 1247
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1247
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1247, tmp___6);
  } else {

  }
#line 1249
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1252
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1253
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1255
  if (mdev->ov_left == 0UL) {
#line 1256
    ov_oos_print(mdev);
#line 1257
    drbd_resync_finished(mdev);
  } else {

  }
#line 1260
  return (ok);
}
}
#line 1263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1265
  __mptr = (struct drbd_work  const  *)w;
#line 1265
  b = (struct drbd_wq_barrier *)__mptr;
#line 1266
  complete(& b->done);
#line 1267
  return (1);
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1272
  __mptr = (struct drbd_work  const  *)w;
#line 1272
  b = (struct drbd_tl_epoch *)__mptr;
#line 1273
  p = & mdev->data.sbuf.barrier;
#line 1274
  ok = 1;
#line 1281
  spin_lock_irq(& mdev->req_lock);
#line 1282
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_38985.conn <= 9) {
#line 1283
    cancel = 1;
  } else {

  }
#line 1284
  spin_unlock_irq(& mdev->req_lock);
#line 1285
  if (cancel != 0) {
#line 1286
    return (1);
  } else {

  }
#line 1288
  tmp = drbd_get_data_sock(mdev);
#line 1288
  if (tmp == 0) {
#line 1289
    return (0);
  } else {

  }
#line 1290
  p->barrier = b->br_number;
#line 1294
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1296
  drbd_put_data_sock(mdev);
#line 1298
  return (ok);
}
}
#line 1301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1303
  if (cancel != 0) {
#line 1304
    return (1);
  } else {

  }
#line 1305
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1305
  return (tmp);
}
}
#line 1308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1310
  __mptr = (struct drbd_work  const  *)w;
#line 1310
  req = (struct drbd_request *)__mptr;
#line 1313
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1313
  if (tmp != 0L) {
#line 1314
    req_mod(req, send_canceled);
#line 1315
    return (1);
  } else {

  }
#line 1318
  ok = drbd_send_oos(mdev, req);
#line 1319
  req_mod(req, oos_handed_to_network);
#line 1321
  return (ok);
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1332
  __mptr = (struct drbd_work  const  *)w;
#line 1332
  req = (struct drbd_request *)__mptr;
#line 1335
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1335
  if (tmp != 0L) {
#line 1336
    req_mod(req, send_canceled);
#line 1337
    return (1);
  } else {

  }
#line 1340
  ok = drbd_send_dblock(mdev, req);
#line 1341
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1343
  return (ok);
}
}
#line 1352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1354
  __mptr = (struct drbd_work  const  *)w;
#line 1354
  req = (struct drbd_request *)__mptr;
#line 1357
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1357
  if (tmp != 0L) {
#line 1358
    req_mod(req, send_canceled);
#line 1359
    return (1);
  } else {

  }
#line 1362
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1365
  if (ok == 0) {
#line 1368
    if ((int )mdev->state.ldv_38985.conn > 9) {
#line 1369
      val.i = 0U;
#line 1369
      val.ldv_38985.conn = 5U;
#line 1369
      mask.i = 0U;
#line 1369
      mask.ldv_38985.conn = 31U;
#line 1369
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1371
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1373
  return (ok);
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1378
  __mptr = (struct drbd_work  const  *)w;
#line 1378
  req = (struct drbd_request *)__mptr;
#line 1380
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1381
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1387
  drbd_req_make_private_bio(req, req->master_bio);
#line 1388
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1389
  generic_make_request(req->private_bio);
#line 1391
  return (1);
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1396
  odev = mdev;
  ldv_50839: ;
#line 1399
  if (odev->sync_conf.after == -1) {
#line 1400
    return (1);
  } else {

  }
#line 1401
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1402
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1402
  if (_b != 0) {
#line 1402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1402);
  } else {

  }
#line 1402
  if (_b != 0) {
#line 1402
    return (1);
  } else {

  }
#line 1403
  if (((((int )odev->state.ldv_38985.conn > 15 && (int )odev->state.ldv_38985.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1407
    return (0);
  } else {

  }
#line 1408
  goto ldv_50839;
}
}
#line 1417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1420
  rv = 0;
#line 1422
  i = 0;
#line 1422
  goto ldv_50850;
  ldv_50849: 
#line 1423
  odev = minor_to_mdev((unsigned int )i);
#line 1424
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1425
    goto ldv_50846;
  } else {

  }
#line 1426
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1427
    goto ldv_50846;
  } else {

  }
#line 1428
  tmp___0 = _drbd_may_sync_now(odev);
#line 1428
  if (tmp___0 == 0) {
#line 1429
    __ns.i = odev->state.i;
#line 1429
    __ns.ldv_38985.aftr_isp = 1U;
#line 1429
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1429
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_50846: 
#line 1422
  i = i + 1;
  ldv_50850: ;
#line 1422
  if ((unsigned int )i < minor_count) {
#line 1423
    goto ldv_50849;
  } else {

  }

#line 1433
  return (rv);
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1445
  rv = 0;
#line 1447
  i = 0;
#line 1447
  goto ldv_50862;
  ldv_50861: 
#line 1448
  odev = minor_to_mdev((unsigned int )i);
#line 1449
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1450
    goto ldv_50858;
  } else {

  }
#line 1451
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1452
    goto ldv_50858;
  } else {

  }
#line 1453
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1454
    tmp___0 = _drbd_may_sync_now(odev);
#line 1454
    if (tmp___0 != 0) {
#line 1455
      __ns.i = odev->state.i;
#line 1455
      __ns.ldv_38985.aftr_isp = 0U;
#line 1455
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1455
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_50858: 
#line 1447
  i = i + 1;
  ldv_50862: ;
#line 1447
  if ((unsigned int )i < minor_count) {
#line 1448
    goto ldv_50861;
  } else {

  }

#line 1460
  return (rv);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1465
  _raw_write_lock_irq(& global_state_lock);
#line 1466
  _drbd_resume_next(mdev);
#line 1467
  _raw_write_unlock_irq(& global_state_lock);
#line 1468
  return;
}
}
#line 1470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1472
  _raw_write_lock_irq(& global_state_lock);
#line 1473
  _drbd_pause_after(mdev);
#line 1474
  _raw_write_unlock_irq(& global_state_lock);
#line 1475
  return;
}
}
#line 1477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1481
  if (o_minor == -1) {
#line 1482
    return (101);
  } else {

  }
#line 1483
  if (o_minor < -1) {
#line 1484
    return (132);
  } else {
#line 1483
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1483
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1484
      return (132);
    } else {

    }
  }
#line 1487
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_50875: ;
#line 1489
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1490
    return (133);
  } else {

  }
#line 1493
  if (odev->sync_conf.after == -1) {
#line 1494
    return (101);
  } else {

  }
#line 1497
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1498
  goto ldv_50875;
}
}
#line 1501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1506
  _raw_write_lock_irq(& global_state_lock);
#line 1507
  retcode = sync_after_error(mdev, na);
#line 1508
  if (retcode == 101) {
#line 1509
    mdev->sync_conf.after = na;
    ldv_50882: 
#line 1511
    changes = _drbd_pause_after(mdev);
#line 1512
    tmp = _drbd_resume_next(mdev);
#line 1512
    changes = tmp | changes;
#line 1513
    if (changes != 0) {
#line 1514
      goto ldv_50882;
    } else {

    }

  } else {

  }
#line 1515
  _raw_write_unlock_irq(& global_state_lock);
#line 1516
  return (retcode);
}
}
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1521
  atomic_set(& mdev->rs_sect_in, 0);
#line 1522
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1523
  mdev->rs_in_flight = 0;
#line 1524
  mdev->rs_planed = 0;
#line 1525
  spin_lock(& mdev->peer_seq_lock);
#line 1526
  fifo_set(& mdev->rs_plan_s, 0);
#line 1527
  spin_unlock(& mdev->peer_seq_lock);
#line 1528
  return;
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1543
  if ((int )mdev->state.ldv_38985.conn > 15 && (int )mdev->state.ldv_38985.conn <= 21) {
#line 1544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1545
    return;
  } else {

  }
#line 1548
  if ((int )mdev->state.ldv_38985.conn <= 21) {
#line 1550
    drbd_rs_cancel_all(mdev);
  } else {

  }
#line 1556
  if ((unsigned int )side == 17U) {
#line 1560
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1561
    r = (r >> 8) & 255;
#line 1562
    if (r > 0) {
#line 1563
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1565
      val.i = 0U;
#line 1565
      val.ldv_38985.conn = 1U;
#line 1565
      mask.i = 0U;
#line 1565
      mask.ldv_38985.conn = 31U;
#line 1565
      drbd_force_state(mdev, mask, val);
#line 1566
      return;
    } else {

    }
  } else {
#line 1569
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1570
    r = (r >> 8) & 255;
#line 1571
    if (r > 0) {
#line 1572
      if (r == 3) {
#line 1573
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1576
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1578
        val___0.i = 0U;
#line 1578
        val___0.ldv_38985.conn = 1U;
#line 1578
        mask___0.i = 0U;
#line 1578
        mask___0.ldv_38985.conn = 31U;
#line 1578
        drbd_force_state(mdev, mask___0, val___0);
#line 1579
        return;
      }
    } else {

    }
  }
#line 1584
  drbd_state_lock(mdev);
#line 1586
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1586
  if (tmp == 0) {
#line 1587
    drbd_state_unlock(mdev);
#line 1588
    return;
  } else {

  }
#line 1591
  _raw_write_lock_irq(& global_state_lock);
#line 1592
  ns = mdev->state;
#line 1594
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1594
  ns.ldv_38985.aftr_isp = tmp___0 == 0;
#line 1596
  ns.ldv_38985.conn = (unsigned char )side;
#line 1598
  if ((unsigned int )side == 17U) {
#line 1599
    ns.ldv_38985.disk = 4U;
  } else {
#line 1601
    ns.ldv_38985.pdsk = 4U;
  }
#line 1603
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1603
  r = (int )tmp___1;
#line 1604
  ns = mdev->state;
#line 1606
  if ((int )ns.ldv_38985.conn <= 9) {
#line 1607
    r = 0;
  } else {

  }
#line 1609
  if (r == 1) {
#line 1610
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1610
    tw = tmp___2;
#line 1611
    now = jiffies;
#line 1614
    mdev->rs_failed = 0UL;
#line 1615
    mdev->rs_paused = 0UL;
#line 1616
    mdev->rs_same_csum = 0UL;
#line 1617
    mdev->rs_last_events = 0;
#line 1618
    mdev->rs_last_sect_ev = 0;
#line 1619
    mdev->rs_total = tw;
#line 1620
    mdev->rs_start = now;
#line 1621
    i = 0;
#line 1621
    goto ldv_50905;
    ldv_50904: 
#line 1622
    mdev->rs_mark_left[i] = tw;
#line 1623
    mdev->rs_mark_time[i] = now;
#line 1621
    i = i + 1;
    ldv_50905: ;
#line 1621
    if (i <= 7) {
#line 1622
      goto ldv_50904;
    } else {

    }
#line 1625
    _drbd_pause_after(mdev);
  } else {

  }
#line 1627
  _raw_write_unlock_irq(& global_state_lock);
#line 1629
  if (r == 1) {
#line 1630
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_38985.conn);
#line 1630
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1634
    if ((unsigned int )side == 17U) {
#line 1635
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1644
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1645
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1647
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1658
      if ((unsigned int )side == 16U) {
#line 1659
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1662
      drbd_resync_finished(mdev);
    } else {

    }
#line 1665
    drbd_rs_controller_reset(mdev);
#line 1670
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1671
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1673
    drbd_md_sync(mdev);
  } else {

  }
#line 1675
  put_ldev(mdev);
#line 1676
  drbd_state_unlock(mdev);
#line 1677
  return;
}
}
#line 1679 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1681
  mdev = thi->mdev;
#line 1682
  w = 0;
#line 1683
  work_list.next = & work_list;
#line 1683
  work_list.prev = & work_list;
#line 1684
  intr = 0;
#line 1686
  tmp = mdev_to_minor(mdev);
#line 1686
  tmp___0 = get_current();
#line 1686
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1688
  goto ldv_50918;
  ldv_50928: 
#line 1689
  drbd_thread_current_set_cpu(mdev);
#line 1691
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1691
  if (tmp___1 != 0) {
#line 1692
    ldv_mutex_lock_49(& mdev->data.mutex);
#line 1693
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1694
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1695
    ldv_mutex_unlock_50(& mdev->data.mutex);
#line 1697
    intr = down_interruptible(& mdev->data.work.s);
#line 1699
    ldv_mutex_lock_51(& mdev->data.mutex);
#line 1700
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1701
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1702
    ldv_mutex_unlock_52(& mdev->data.mutex);
  } else {

  }
#line 1705
  if (intr != 0) {
#line 1706
    if (intr != -4) {
#line 1706
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1706);
    } else {

    }
#line 1707
    tmp___2 = get_current();
#line 1707
    flush_signals(tmp___2);
#line 1708
    tmp___3 = get_t_state(thi);
#line 1708
    _b = (unsigned int )tmp___3 == 1U;
#line 1708
    if (_b != 0) {
#line 1708
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1708);
    } else {

    }
#line 1708
    if (_b != 0) {
#line 1709
      goto ldv_50918;
    } else {

    }
#line 1710
    goto ldv_50919;
  } else {

  }
#line 1713
  tmp___4 = get_t_state(thi);
#line 1713
  if ((unsigned int )tmp___4 != 1U) {
#line 1714
    goto ldv_50919;
  } else {

  }
#line 1719
  w = 0;
#line 1720
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1721
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1721
  _b___0 = tmp___5 != 0;
#line 1721
  if (_b___0 != 0) {
#line 1721
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1721);
  } else {

  }
#line 1721
  if (_b___0 != 0) {
#line 1733
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1734
    goto ldv_50918;
  } else {

  }
#line 1736
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1736
  w = (struct drbd_work *)__mptr;
#line 1737
  list_del_init(& w->list);
#line 1738
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1740
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_38985.conn <= 9);
#line 1740
  if (tmp___6 == 0) {
#line 1742
    if ((int )mdev->state.ldv_38985.conn > 9) {
#line 1744
      val.i = 0U;
#line 1744
      val.ldv_38985.conn = 5U;
#line 1744
      mask.i = 0U;
#line 1744
      mask.ldv_38985.conn = 31U;
#line 1744
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_50918: 
#line 1688
  tmp___7 = get_t_state(thi);
#line 1688
  if ((unsigned int )tmp___7 == 1U) {
#line 1689
    goto ldv_50928;
  } else {

  }
  ldv_50919: 
#line 1747
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1747
  if (tmp___8 == 0) {
#line 1747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1747);
  } else {

  }
#line 1748
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1748
  if (tmp___9 == 0) {
#line 1748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1748);
  } else {

  }
#line 1750
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1751
  i = 0;
#line 1752
  goto ldv_50935;
  ldv_50934: 
#line 1753
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1754
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1756
  goto ldv_50932;
  ldv_50931: 
#line 1757
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1757
  w = (struct drbd_work *)__mptr___0;
#line 1758
  list_del_init(& w->list);
#line 1759
  (*(w->cb))(mdev, w, 1);
#line 1760
  i = i + 1;
  ldv_50932: 
#line 1756
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1756
  if (tmp___10 == 0) {
#line 1757
    goto ldv_50931;
  } else {

  }
#line 1763
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_50935: 
#line 1752
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1752
  if (tmp___11 == 0) {
#line 1753
    goto ldv_50934;
  } else {

  }
#line 1765
  sema_init(& mdev->data.work.s, 0);
#line 1771
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1773
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1773);
  } else {

  }
#line 1776
  drbd_thread_stop(& mdev->receiver);
#line 1777
  drbd_mdev_cleanup(mdev);
#line 1779
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1781
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1782
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1785
  return (0);
}
}
#line 1788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1793
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1795
  mutex_lock(ldv_func_arg1);
#line 1796
  return;
}
}
#line 1798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_40(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1803
  tmp = mutex_trylock(ldv_func_arg1);
#line 1803
  ldv_func_res = tmp;
#line 1805
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1805
  return (tmp___0);
#line 1807
  return (ldv_func_res);
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1815
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1817
  mutex_unlock(ldv_func_arg1);
#line 1818
  return;
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1825
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1827
  mutex_lock(ldv_func_arg1);
#line 1828
  return;
}
}
#line 1830 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1835
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1837
  mutex_unlock(ldv_func_arg1);
#line 1838
  return;
}
}
#line 1840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1845
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1847
  mutex_lock(ldv_func_arg1);
#line 1848
  return;
}
}
#line 1850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1855
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1857
  mutex_unlock(ldv_func_arg1);
#line 1858
  return;
}
}
#line 1860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1865
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1867
  mutex_unlock(ldv_func_arg1);
#line 1868
  return;
}
}
#line 1870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1875
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1877
  mutex_lock(ldv_func_arg1);
#line 1878
  return;
}
}
#line 1880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1885
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1887
  mutex_unlock(ldv_func_arg1);
#line 1888
  return;
}
}
#line 1890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1895
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1897
  mutex_lock(ldv_func_arg1);
#line 1898
  return;
}
}
#line 1900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1905
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1907
  mutex_unlock(ldv_func_arg1);
#line 1908
  return;
}
}
#line 1910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_51(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1915
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1917
  mutex_lock(ldv_func_arg1);
#line 1918
  return;
}
}
#line 1920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1925
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1927
  mutex_unlock(ldv_func_arg1);
#line 1928
  return;
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 149 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) ;
#line 64
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6327;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6327;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6327;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6327;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_6327: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 210 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 280
extern int del_timer_sync(struct timer_list * ) ;
#line 346 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 361
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 67
extern u32 random32(void) ;
#line 238 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 240
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 242
extern void sock_release(struct socket * ) ;
#line 245
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_19644: ;
#line 63
    goto ldv_19644;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19645: ;
#line 65
    goto ldv_19645;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_19646: ;
#line 66
    goto ldv_19646;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 302 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 359
extern long schedule_timeout(long  ) ;
#line 362
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2526 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2528
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2528
  return (tmp);
}
}
#line 2552 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2554
  tmp = test_tsk_thread_flag(p, 2);
#line 2554
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2554
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 484 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 487 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 489
  return;
}
}
#line 512 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 514
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1103 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1105
  return ((struct crypto_hash *)tfm);
}
}
#line 1115 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1118
  type = type & 4294967280U;
#line 1119
  mask = mask & 4294967280U;
#line 1120
  type = type | 8U;
#line 1121
  mask = mask | 14U;
#line 1123
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1123
  tmp___0 = __crypto_hash_cast(tmp);
#line 1123
  return (tmp___0);
}
}
#line 1131 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1133
  tmp = crypto_hash_tfm(tfm);
#line 1133
  crypto_free_tfm(tmp);
#line 1134
  return;
}
}
#line 1198 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1202
  return (tmp___0);
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1208
  tmp = crypto_hash_crt(hash);
#line 1208
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1208
  return (tmp___0);
}
}
#line 440 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 442
  disk->part0.nr_sects = size;
#line 443
  return;
}
}
#line 48 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 50
  __might_sleep("include/linux/highmem.h", 50, 0);
#line 51
  tmp = lowmem_page_address((struct page  const  *)page);
#line 51
  return (tmp);
}
}
#line 54 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 56
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1194
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1200
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1209
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1219
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1221
void tl_clear(struct drbd_conf *mdev ) ;
#line 1223
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1226
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1227
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1230
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1232
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1241
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1243
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1244
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1248
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1250
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1266
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1268
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1277
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1294
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1297
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1298
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1494
mempool_t *drbd_ee_mempool ;
#line 1496
struct page *drbd_pp_pool ;
#line 1497
spinlock_t drbd_pp_lock ;
#line 1498
int drbd_pp_vacant ;
#line 1519
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1521
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1522
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1523
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1524
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1528
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1585
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1595
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1597
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1601
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1602
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1634
  val = 1;
#line 1635
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1637
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1641
  val = 2;
#line 1642
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1644
  return;
}
}
#line 1646
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1658
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1684
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_50339;
  ldv_50338: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_50339: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_50338;
    } else {
#line 1776
      goto ldv_50340;
    }
  } else {

  }
  ldv_50340: ;
#line 1777
  return (0);
}
}
#line 1816 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1820
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1820
  return ((int )tmp);
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1878
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1881
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1884
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_50413;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_50413;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50413: ;
#line 1942
  return (s);
}
}
#line 1976 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1979
  tmp = spinlock_check(& q->q_lock);
#line 1979
  flags = _raw_spin_lock_irqsave(tmp);
#line 1980
  list_add(& w->list, & q->q);
#line 1981
  up(& q->s);
#line 1983
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1984
  return;
}
}
#line 2016 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2019
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2019
  return (tmp);
}
}
#line 2022 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2025
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2025
  return (tmp);
}
}
#line 2107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2109
  atomic_inc(& mdev->unacked_cnt);
#line 2110
  return;
}
}
#line 2123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2125
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2125
  if (tmp != 0) {
#line 2126
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2127
  return;
}
}
#line 2135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2139
  atomic_inc(& mdev->net_cnt);
#line 2140
  have_net_conf = (int )mdev->state.ldv_38985.conn > 1;
#line 2141
  if (have_net_conf == 0) {
#line 2142
    put_net_conf(mdev);
  } else {

  }
#line 2143
  return (have_net_conf);
}
}
#line 2399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2401
  changed = mdev->ed_uuid != val;
#line 2402
  mdev->ed_uuid = val;
#line 2403
  return (changed);
}
}
#line 2406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2413
  return ((int )a - (int )b);
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2425
  spin_lock(& mdev->peer_seq_lock);
#line 2426
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2426
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2427
  mdev->peer_seq = m;
#line 2428
  spin_unlock(& mdev->peer_seq_lock);
#line 2429
  if (m == new_seq) {
#line 2430
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2431
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_50687: ;
#line 229
    goto ldv_50687;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_50692: ;
#line 238
    goto ldv_50692;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 255
  tmp = ar_hash_slot(mdev, sector);
#line 255
  slot = tmp;
#line 259
  n = slot->first;
#line 259
  goto ldv_50709;
  ldv_50708: ;
#line 260
  if ((unsigned long )req == (unsigned long )id) {
#line 261
    if (req->sector != sector) {
#line 261
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              261);
    } else {

    }
#line 262
    return (req);
  } else {

  }
#line 259
  n = n->next;
  ldv_50709: ;
#line 259
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 259
    __mptr = (struct hlist_node  const  *)n;
#line 259
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 259
    if (1 != 0) {
#line 260
      goto ldv_50708;
    } else {
#line 262
      goto ldv_50710;
    }
  } else {

  }
  ldv_50710: ;
#line 265
  return (0);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 308
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_50777: ;
#line 162
  goto ldv_50777;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 122
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 124
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 125
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 144
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 144
  if (tmp___0 != 0L) {
#line 144
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (144), "i" (12UL));
    ldv_50857: ;
#line 144
    goto ldv_50857;
  } else {

  }
#line 145
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 145
  if (tmp___1 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_50858: ;
#line 145
    goto ldv_50858;
  } else {

  }
#line 147
  page = *head;
#line 149
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 152
  goto ldv_50861;
  ldv_50860: 
#line 153
  tmp = page_chain_next(page);
#line 154
  n = n - 1;
#line 154
  if (n == 0) {
#line 155
    goto ldv_50859;
  } else {

  }
#line 156
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 159
  page = tmp;
  ldv_50861: ;
#line 152
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 153
    goto ldv_50860;
  } else {

  }
  ldv_50859: 
#line 163
  page->ldv_13201.private = 0UL;
#line 165
  page = *head;
#line 166
  *head = tmp;
#line 167
  return (page);
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 176
  i = 1;
#line 177
  goto ldv_50869;
  ldv_50868: 
#line 178
  i = i + 1;
#line 178
  page = tmp;
  ldv_50869: 
#line 177
  tmp = page_chain_next(page);
#line 177
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 178
    goto ldv_50868;
  } else {

  }

#line 179
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 180
    *len = i;
  } else {

  }
#line 181
  return (page);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 187
  i = 0;
#line 188
  goto ldv_50878;
  ldv_50877: 
#line 189
  put_page(page);
#line 190
  i = i + 1;
#line 188
  page = tmp;
  ldv_50878: ;
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 188
    tmp = page_chain_next(page);
#line 188
    if (1 != 0) {
#line 189
      goto ldv_50877;
    } else {
#line 191
      goto ldv_50879;
    }
  } else {

  }
  ldv_50879: ;
#line 192
  return (i);
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 200
  tmp = page_chain_tail(chain_first, 0);
#line 201
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 201
  if (tmp___0 != 0L) {
#line 201
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (201), "i" (12UL));
    ldv_50886: ;
#line 201
    goto ldv_50886;
  } else {

  }
#line 205
  chain_last->ldv_13201.private = (unsigned long )*head;
#line 206
  *head = chain_first;
#line 207
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 211
  page = 0;
#line 212
  tmp = 0;
#line 213
  i = 0;
#line 217
  if (drbd_pp_vacant >= number) {
#line 218
    spin_lock(& drbd_pp_lock);
#line 219
    page = page_chain_del(& drbd_pp_pool, number);
#line 220
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 221
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 222
    spin_unlock(& drbd_pp_lock);
#line 223
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 224
      return (page);
    } else {

    }
  } else {

  }
#line 230
  i = 0;
#line 230
  goto ldv_50896;
  ldv_50895: 
#line 231
  tmp = alloc_pages(514U, 0U);
#line 232
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 233
    goto ldv_50894;
  } else {

  }
#line 234
  tmp->ldv_13201.private = (unsigned long )page;
#line 235
  page = tmp;
#line 230
  i = i + 1;
  ldv_50896: ;
#line 230
  if (i < number) {
#line 231
    goto ldv_50895;
  } else {

  }
  ldv_50894: ;
#line 238
  if (i == number) {
#line 239
    return (page);
  } else {

  }
#line 244
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 245
    tmp = page_chain_tail(page, 0);
#line 246
    spin_lock(& drbd_pp_lock);
#line 247
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 248
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 249
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 251
  return (0);
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 264
  le = mdev->net_ee.next;
#line 264
  tle = le->next;
#line 264
  goto ldv_50908;
  ldv_50907: 
#line 265
  __mptr = (struct list_head  const  *)le;
#line 265
  e = (struct drbd_epoch_entry *)__mptr;
#line 266
  tmp = drbd_ee_has_active_page___0(e);
#line 266
  if (tmp != 0) {
#line 267
    goto ldv_50906;
  } else {

  }
#line 268
  list_move(le, to_be_freed);
#line 264
  le = tle;
#line 264
  tle = le->next;
  ldv_50908: ;
#line 264
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 265
    goto ldv_50907;
  } else {

  }
  ldv_50906: ;
#line 269
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 274
  reclaimed.next = & reclaimed;
#line 274
  reclaimed.prev = & reclaimed;
#line 277
  spin_lock_irq(& mdev->req_lock);
#line 278
  reclaim_net_ee(mdev, & reclaimed);
#line 279
  spin_unlock_irq(& mdev->req_lock);
#line 281
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 281
  e = (struct drbd_epoch_entry *)__mptr;
#line 281
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 281
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 281
  goto ldv_50922;
  ldv_50921: 
#line 282
  drbd_free_some_ee(mdev, e, 1);
#line 281
  e = t;
#line 281
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 281
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50922: ;
#line 281
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 282
    goto ldv_50921;
  } else {

  }

#line 286
  return;
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 299
  page = 0;
#line 300
  tmp = get_current();
#line 300
  wait.flags = 0U;
#line 300
  wait.private = (void *)tmp;
#line 300
  wait.func = & autoremove_wake_function;
#line 300
  wait.task_list.next = & wait.task_list;
#line 300
  wait.task_list.prev = & wait.task_list;
#line 304
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 307
  goto ldv_50933;
  ldv_50932: 
#line 308
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 310
  drbd_kick_lo_and_reclaim_net(mdev);
#line 312
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 312
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 313
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 314
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 315
      goto ldv_50931;
    } else {

    }
  } else {

  }
#line 318
  if (! retry) {
#line 319
    goto ldv_50931;
  } else {

  }
#line 321
  tmp___2 = get_current();
#line 321
  tmp___3 = signal_pending(tmp___2);
#line 321
  if (tmp___3 != 0) {
#line 322
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 323
    goto ldv_50931;
  } else {

  }
#line 326
  schedule();
  ldv_50933: ;
#line 307
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 308
    goto ldv_50932;
  } else {

  }
  ldv_50931: 
#line 328
  finish_wait(& drbd_pp_wait, & wait);
#line 330
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 331
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 332
  return (page);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 341
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 344
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 345
    i = page_chain_free(page);
  } else {
#line 348
    tmp = page_chain_tail(page, & i);
#line 349
    spin_lock(& drbd_pp_lock);
#line 350
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 351
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 352
    spin_unlock(& drbd_pp_lock);
  }
#line 354
  i = atomic_sub_return(i, a);
#line 355
  if (i < 0) {
#line 356
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 358
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 359
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 384
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 386
  tmp = drbd_insert_fault(mdev, 8U);
#line 386
  if (tmp != 0) {
#line 387
    return (0);
  } else {

  }
#line 389
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 389
  e = (struct drbd_epoch_entry *)tmp___0;
#line 390
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 391
    if ((gfp_mask & 512U) == 0U) {
#line 392
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 393
    return (0);
  } else {

  }
#line 396
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 397
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 398
    goto fail;
  } else {

  }
#line 400
  INIT_HLIST_NODE(& e->collision);
#line 401
  e->epoch = 0;
#line 402
  e->mdev = mdev;
#line 403
  e->pages = page;
#line 404
  atomic_set(& e->pending_bios, 0);
#line 405
  e->size = data_size;
#line 406
  e->flags = 0UL;
#line 407
  e->sector = sector;
#line 408
  e->ldv_47927.block_id = id;
#line 410
  return (e);
  fail: 
#line 413
  mempool_free((void *)e, drbd_ee_mempool);
#line 414
  return (0);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 419
  if ((e->flags & 16UL) != 0UL) {
#line 420
    kfree((void const   *)e->ldv_47927.digest);
  } else {

  }
#line 421
  drbd_pp_free(mdev, e->pages, is_net);
#line 422
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 422
  if (tmp != 0) {
#line 422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            422);
  } else {

  }
#line 423
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 423
  if (tmp___0 == 0) {
#line 423
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            423);
  } else {

  }
#line 424
  mempool_free((void *)e, drbd_ee_mempool);
#line 425
  return;
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 429
  work_list.next = & work_list;
#line 429
  work_list.prev = & work_list;
#line 431
  count = 0;
#line 432
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 434
  spin_lock_irq(& mdev->req_lock);
#line 435
  list_splice_init(list, & work_list);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 438
  __mptr = (struct list_head  const  *)work_list.next;
#line 438
  e = (struct drbd_epoch_entry *)__mptr;
#line 438
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 438
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 438
  goto ldv_50974;
  ldv_50973: 
#line 439
  drbd_free_some_ee(mdev, e, is_net);
#line 440
  count = count + 1;
#line 438
  e = t;
#line 438
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 438
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50974: ;
#line 438
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 439
    goto ldv_50973;
  } else {

  }

#line 442
  return (count);
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 457
  work_list.next = & work_list;
#line 457
  work_list.prev = & work_list;
#line 458
  reclaimed.next = & reclaimed;
#line 458
  reclaimed.prev = & reclaimed;
#line 460
  ok = (int )mdev->state.ldv_38985.conn > 8;
#line 462
  spin_lock_irq(& mdev->req_lock);
#line 463
  reclaim_net_ee(mdev, & reclaimed);
#line 464
  list_splice_init(& mdev->done_ee, & work_list);
#line 465
  spin_unlock_irq(& mdev->req_lock);
#line 467
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 467
  e = (struct drbd_epoch_entry *)__mptr;
#line 467
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 467
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 467
  goto ldv_50991;
  ldv_50990: 
#line 468
  drbd_free_some_ee(mdev, e, 1);
#line 467
  e = t;
#line 467
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 467
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_50991: ;
#line 467
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 468
    goto ldv_50990;
  } else {

  }
#line 474
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 474
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 474
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 474
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 474
  goto ldv_51000;
  ldv_50999: 
#line 476
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 476
  ok = tmp != 0 && ok != 0;
#line 477
  drbd_free_some_ee(mdev, e, 0);
#line 474
  e = t;
#line 474
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 474
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_51000: ;
#line 474
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 475
    goto ldv_50999;
  } else {

  }
#line 479
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 481
  return (ok);
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 486
  tmp = get_current();
#line 486
  wait.flags = 0U;
#line 486
  wait.private = (void *)tmp;
#line 486
  wait.func = & autoremove_wake_function;
#line 486
  wait.task_list.next = & wait.task_list;
#line 486
  wait.task_list.prev = & wait.task_list;
#line 490
  goto ldv_51008;
  ldv_51007: 
#line 491
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 492
  spin_unlock_irq(& mdev->req_lock);
#line 493
  io_schedule();
#line 494
  finish_wait(& mdev->ee_wait, & wait);
#line 495
  spin_lock_irq(& mdev->req_lock);
  ldv_51008: 
#line 490
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 490
  if (tmp___0 == 0) {
#line 491
    goto ldv_51007;
  } else {

  }

#line 495
  return;
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 501
  spin_lock_irq(& mdev->req_lock);
#line 502
  _drbd_wait_ee_list_empty(mdev, head);
#line 503
  spin_unlock_irq(& mdev->req_lock);
#line 504
  return;
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 511
  sk = sock->sk;
#line 512
  err = 0;
#line 514
  *what = "listen";
#line 515
  err = (*((sock->ops)->listen))(sock, 5);
#line 516
  if (err < 0) {
#line 517
    goto out;
  } else {

  }
#line 519
  *what = "sock_create_lite";
#line 520
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 522
  if (err < 0) {
#line 523
    goto out;
  } else {

  }
#line 525
  *what = "accept";
#line 526
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 527
  if (err < 0) {
#line 528
    sock_release(*newsock);
#line 529
    *newsock = 0;
#line 530
    goto out;
  } else {

  }
#line 532
  (*newsock)->ops = sock->ops;
  out: ;
#line 535
  return (err);
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 542
  iov.iov_base = buf;
#line 542
  iov.iov_len = size;
#line 546
  msg.msg_name = 0;
#line 546
  msg.msg_namelen = 0;
#line 546
  msg.msg_iov = (struct iovec *)(& iov);
#line 546
  msg.msg_iovlen = 1UL;
#line 546
  msg.msg_control = 0;
#line 546
  msg.msg_controllen = 0UL;
#line 546
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 553
  tmp = current_thread_info___1();
#line 553
  oldfs = tmp->addr_limit;
#line 554
  tmp___0 = current_thread_info___1();
#line 554
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 554
  tmp___0->addr_limit = __constr_expr_0;
#line 555
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 556
  tmp___1 = current_thread_info___1();
#line 556
  tmp___1->addr_limit = oldfs;
#line 558
  return (rv);
}
}
#line 561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 564
  iov.iov_base = buf;
#line 564
  iov.iov_len = size;
#line 568
  msg.msg_name = 0;
#line 568
  msg.msg_namelen = 0;
#line 568
  msg.msg_iov = (struct iovec *)(& iov);
#line 568
  msg.msg_iovlen = 1UL;
#line 568
  msg.msg_control = 0;
#line 568
  msg.msg_controllen = 0UL;
#line 568
  msg.msg_flags = 16640U;
#line 575
  tmp = current_thread_info___1();
#line 575
  oldfs = tmp->addr_limit;
#line 576
  tmp___0 = current_thread_info___1();
#line 576
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 576
  tmp___0->addr_limit = __constr_expr_0;
  ldv_51046: 
#line 579
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 580
  if ((size_t )rv == size) {
#line 581
    goto ldv_51045;
  } else {

  }
#line 588
  if (rv < 0) {
#line 589
    if (rv == -104) {
#line 590
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 591
    if (rv != -512) {
#line 592
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 593
    goto ldv_51045;
  } else
#line 594
  if (rv == 0) {
#line 595
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 596
    goto ldv_51045;
  } else {
#line 602
    goto ldv_51045;
  }
#line 604
  goto ldv_51046;
  ldv_51045: 
#line 606
  tmp___1 = current_thread_info___1();
#line 606
  tmp___1->addr_limit = oldfs;
#line 608
  if ((size_t )rv != size) {
#line 609
    val.i = 0U;
#line 609
    val.ldv_38985.conn = 4U;
#line 609
    mask.i = 0U;
#line 609
    mask.ldv_38985.conn = 31U;
#line 609
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 611
  return (rv);
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 623
  if (snd != 0U) {
#line 624
    (sock->sk)->sk_sndbuf = (int )snd;
#line 625
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 627
  if (rcv != 0U) {
#line 628
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 629
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 631
  return;
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 639
  disconnect_on_error = 1;
#line 641
  tmp = get_net_conf(mdev);
#line 641
  if (tmp == 0) {
#line 642
    return (0);
  } else {

  }
#line 644
  what = "sock_create_kern";
#line 645
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 647
  if (err < 0) {
#line 648
    sock = 0;
#line 649
    goto out;
  } else {

  }
#line 652
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 652
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 652
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 654
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 664
  __min1 = (mdev->net_conf)->my_addr_len;
#line 664
  __min2 = 28;
#line 664
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 664
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 666
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 667
    src_in6.sin6_port = 0U;
  } else {
#line 669
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 671
  what = "bind before connect";
#line 672
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 675
  if (err < 0) {
#line 676
    goto out;
  } else {

  }
#line 680
  disconnect_on_error = 0;
#line 681
  what = "connect";
#line 682
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 687
  if (err < 0) {
#line 688
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 689
      sock_release(sock);
#line 690
      sock = 0;
    } else {

    }
#line 692
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 699
    disconnect_on_error = 0;
#line 700
    goto ldv_51083;
    default: 
#line 702
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_51083: ;
#line 704
    if (disconnect_on_error != 0) {
#line 705
      val.i = 0U;
#line 705
      val.ldv_38985.conn = 1U;
#line 705
      mask.i = 0U;
#line 705
      mask.ldv_38985.conn = 31U;
#line 705
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 707
  put_net_conf(mdev);
#line 708
  return (sock);
}
}
#line 711 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 714
  s_estab = 0;
#line 717
  tmp = get_net_conf(mdev);
#line 717
  if (tmp == 0) {
#line 718
    return (0);
  } else {

  }
#line 720
  what = "sock_create_kern";
#line 721
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 723
  if (err != 0) {
#line 724
    s_listen = 0;
#line 725
    goto out;
  } else {

  }
#line 728
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 729
  tmp___0 = random32();
#line 729
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 731
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 732
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 733
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 734
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 737
  what = "bind before listen";
#line 738
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 741
  if (err < 0) {
#line 742
    goto out;
  } else {

  }
#line 744
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 747
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 748
    sock_release(s_listen);
  } else {

  }
#line 749
  if (err < 0) {
#line 750
    if ((err != -11 && err != -4) && err != -512) {
#line 751
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 752
      val.i = 0U;
#line 752
      val.ldv_38985.conn = 1U;
#line 752
      mask.i = 0U;
#line 752
      mask.ldv_38985.conn = 31U;
#line 752
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 755
  put_net_conf(mdev);
#line 757
  return (s_estab);
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 763
  h = & mdev->data.sbuf.header.h80;
#line 765
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 765
  return (tmp);
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 770
  h = & mdev->data.rbuf.header.h80;
#line 773
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 775
  if (rr == 8 && h->magic == 1728214147U) {
#line 776
    tmp = __fswab16((int )h->command);
#line 776
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 778
  return (65535);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 791
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 792
    return (0);
  } else {

  }
#line 794
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 796
  if (rr > 0 || rr == -11) {
#line 797
    return (1);
  } else {
#line 799
    sock_release(*sock);
#line 800
    *sock = 0;
#line 801
    return (0);
  }
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 818
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 818
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            818);
  } else {

  }
#line 820
  val.i = 0U;
#line 820
  val.ldv_38985.conn = 8U;
#line 820
  mask.i = 0U;
#line 820
  mask.ldv_38985.conn = 31U;
#line 820
  tmp = drbd_request_state(mdev, mask, val);
#line 820
  if (tmp <= 0) {
#line 821
    return (-2);
  } else {

  }
#line 823
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 825
  sock = 0;
#line 826
  msock = 0;
  ldv_51142: 
#line 829
  try = 0;
  ldv_51134: 
#line 831
  s = drbd_try_connect(mdev);
#line 832
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 833
    goto ldv_51133;
  } else {
#line 832
    try = try + 1;
#line 832
    if (try > 2) {
#line 833
      goto ldv_51133;
    } else {

    }
  }
#line 835
  schedule_timeout_interruptible(25L);
#line 836
  goto ldv_51134;
  ldv_51133: ;
#line 838
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 839
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 840
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 841
      sock = s;
#line 842
      s = 0;
    } else
#line 843
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 844
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 845
      msock = s;
#line 846
      s = 0;
    } else {
#line 848
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 849
      goto out_release_sockets;
    }
  } else {

  }
#line 853
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 854
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 855
    ok = drbd_socket_okay(mdev, & sock);
#line 856
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 856
    ok = tmp___0 != 0 && ok != 0;
#line 857
    if (ok != 0) {
#line 858
      goto ldv_51136;
    } else {

    }
  } else {

  }
  retry: 
#line 862
  s = drbd_wait_for_connect(mdev);
#line 863
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 864
    tmp___1 = drbd_recv_fp(mdev, s);
#line 864
    try = (int )tmp___1;
#line 865
    drbd_socket_okay(mdev, & sock);
#line 866
    drbd_socket_okay(mdev, & msock);
#line 867
    switch (try) {
    case 65522: ;
#line 869
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 870
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 871
      sock_release(sock);
    } else {

    }
#line 873
    sock = s;
#line 874
    goto ldv_51139;
    case 65521: ;
#line 876
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 877
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 878
      sock_release(msock);
    } else {

    }
#line 880
    msock = s;
#line 881
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 882
    goto ldv_51139;
    default: 
#line 884
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 885
    sock_release(s);
#line 886
    tmp___2 = random32();
#line 886
    if ((int )tmp___2 & 1) {
#line 887
      goto retry;
    } else {

    }
    }
    ldv_51139: ;
  } else {

  }
#line 891
  if ((int )mdev->state.ldv_38985.conn <= 1) {
#line 892
    goto out_release_sockets;
  } else {

  }
#line 893
  tmp___5 = get_current();
#line 893
  tmp___6 = signal_pending(tmp___5);
#line 893
  if (tmp___6 != 0) {
#line 894
    tmp___3 = get_current();
#line 894
    flush_signals(tmp___3);
#line 895
    __asm__  volatile   ("": : : "memory");
#line 896
    tmp___4 = get_t_state(& mdev->receiver);
#line 896
    if ((unsigned int )tmp___4 == 2U) {
#line 897
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 900
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 901
    ok = drbd_socket_okay(mdev, & sock);
#line 902
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 902
    ok = tmp___7 != 0 && ok != 0;
#line 903
    if (ok != 0) {
#line 904
      goto ldv_51136;
    } else {

    }
  } else {

  }
#line 906
  goto ldv_51142;
  ldv_51136: 
#line 908
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 909
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 911
  (sock->sk)->sk_allocation = 16U;
#line 912
  (msock->sk)->sk_allocation = 16U;
#line 914
  (sock->sk)->sk_priority = 4U;
#line 915
  (msock->sk)->sk_priority = 6U;
#line 922
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 922
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 922
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 925
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 926
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 930
  drbd_tcp_nodelay(sock);
#line 931
  drbd_tcp_nodelay(msock);
#line 933
  mdev->data.socket = sock;
#line 934
  mdev->meta.socket = msock;
#line 935
  mdev->last_received = jiffies;
#line 937
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            937);
  } else {

  }
#line 939
  h = drbd_do_handshake(mdev);
#line 940
  if (h <= 0) {
#line 941
    return (h);
  } else {

  }
#line 943
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 945
    tmp___9 = drbd_do_auth(mdev);
#line 945
    switch (tmp___9) {
    case -1: 
#line 947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 948
    return (-1);
    case 0: 
#line 950
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 951
    return (0);
    }
  } else {

  }
#line 955
  val___0.i = 0U;
#line 955
  val___0.ldv_38985.conn = 9U;
#line 955
  mask___0.i = 0U;
#line 955
  mask___0.ldv_38985.conn = 31U;
#line 955
  tmp___10 = drbd_request_state(mdev, mask___0, val___0);
#line 955
  if (tmp___10 <= 0) {
#line 956
    return (0);
  } else {

  }
#line 958
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 959
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 961
  atomic_set(& mdev->packet_seq, 0);
#line 962
  mdev->peer_seq = 0U;
#line 964
  drbd_thread_start(& mdev->asender);
#line 966
  tmp___11 = drbd_send_protocol(mdev);
#line 966
  if (tmp___11 == -1) {
#line 967
    return (-1);
  } else {

  }
#line 968
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 969
  drbd_send_sizes(mdev, 0, 0);
#line 970
  drbd_send_uuids(mdev);
#line 971
  drbd_send_state(mdev);
#line 972
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 973
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 974
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 976
  return (1);
  out_release_sockets: ;
#line 979
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 980
    sock_release(sock);
  } else {

  }
#line 981
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 982
    sock_release(msock);
  } else {

  }
#line 983
  return (-1);
}
}
#line 986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 988
  h = & mdev->data.rbuf.header;
#line 991
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 992
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 992
  if (tmp___1 != 0L) {
#line 993
    tmp = get_current();
#line 993
    tmp___0 = signal_pending(tmp);
#line 993
    if (tmp___0 == 0) {
#line 994
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 995
    return (0);
  } else {

  }
#line 998
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 998
  if (tmp___9 != 0L) {
#line 999
    tmp___2 = __fswab16((int )h->h80.command);
#line 999
    *cmd = (enum drbd_packets )tmp___2;
#line 1000
    tmp___3 = __fswab16((int )h->h80.length);
#line 1000
    *packet_size = (unsigned int )tmp___3;
  } else
#line 1001
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1002
    tmp___4 = __fswab16((int )h->h95.command);
#line 1002
    *cmd = (enum drbd_packets )tmp___4;
#line 1003
    tmp___5 = __fswab32(h->h95.length);
#line 1003
    *packet_size = tmp___5;
  } else {
#line 1005
    tmp___6 = __fswab16((int )h->h80.length);
#line 1005
    tmp___7 = __fswab16((int )h->h80.command);
#line 1005
    tmp___8 = __fswab32(h->h80.magic);
#line 1005
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1009
    return (0);
  }
#line 1011
  mdev->last_received = jiffies;
#line 1013
  return (1);
}
}
#line 1016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1020
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1020
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1020
    if (tmp != 0) {
#line 1021
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1023
      if (rv != 0) {
#line 1024
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1028
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1030
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1032
  return;
}
}
#line 1040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1046
  rv = FE_STILL_LIVE;
#line 1048
  spin_lock(& mdev->epoch_lock);
  ldv_51179: 
#line 1050
  next_epoch = 0;
#line 1052
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1054
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1056
  atomic_dec(& epoch->active);
#line 1057
  goto ldv_51169;
  case 1U: 
#line 1059
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1060
  goto ldv_51169;
  case 2U: ;
#line 1063
  goto ldv_51169;
  }
  ldv_51169: ;
#line 1066
  if (epoch_size != 0) {
#line 1066
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1066
    if (tmp___1 == 0) {
#line 1066
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1066
      if (tmp___2 != 0) {
#line 1069
        if (((unsigned int )ev & 32U) == 0U) {
#line 1070
          spin_unlock(& mdev->epoch_lock);
#line 1071
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1072
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1074
        atomic_dec(& mdev->unacked_cnt);
#line 1074
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
        if (tmp___0 < 0) {
#line 1074
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1074, tmp);
        } else {

        }
#line 1076
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1077
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1077
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1078
          list_del(& epoch->list);
#line 1079
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1080
          mdev->epochs = mdev->epochs - 1U;
#line 1081
          kfree((void const   *)epoch);
#line 1083
          if ((unsigned int )rv == 0U) {
#line 1084
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1086
          epoch->flags = 0UL;
#line 1087
          atomic_set(& epoch->epoch_size, 0);
#line 1089
          if ((unsigned int )rv == 0U) {
#line 1090
            rv = FE_RECYCLED;
          } else {

          }
#line 1091
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1095
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1096
    goto ldv_51178;
  } else {

  }
#line 1098
  epoch = next_epoch;
#line 1099
  goto ldv_51179;
  ldv_51178: 
#line 1101
  spin_unlock(& mdev->epoch_lock);
#line 1103
  return (rv);
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1114
  write_ordering_str[0] = (char *)"none";
#line 1114
  write_ordering_str[1] = (char *)"drain";
#line 1114
  write_ordering_str[2] = (char *)"flush";
#line 1120
  pwo = mdev->write_ordering;
#line 1121
  _min1 = pwo;
#line 1121
  _min2 = wo;
#line 1121
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1122
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1123
    wo = WO_drain_io;
  } else {

  }
#line 1124
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1125
    wo = WO_none;
  } else {

  }
#line 1126
  mdev->write_ordering = wo;
#line 1127
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1128
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1129
  return;
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1151
  bios = 0;
#line 1153
  page = e->pages;
#line 1154
  sector = e->sector;
#line 1155
  ds = e->size;
#line 1156
  n_bios = 0U;
#line 1157
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1158
  err = -12;
  next_bio: 
#line 1165
  bio = bio_alloc(16U, nr_pages);
#line 1166
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1168
    goto fail;
  } else {

  }
#line 1171
  bio->bi_sector = sector;
#line 1172
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1173
  bio->bi_rw = (unsigned long )rw;
#line 1174
  bio->bi_private = (void *)e;
#line 1175
  bio->bi_end_io = & drbd_endio_sec;
#line 1177
  bio->bi_next = bios;
#line 1178
  bios = bio;
#line 1179
  n_bios = n_bios + 1U;
#line 1181
  goto ldv_51211;
  ldv_51210: 
#line 1182
  __min1 = ds;
#line 1182
  __min2 = 4096U;
#line 1182
  len = __min1 < __min2 ? __min1 : __min2;
#line 1183
  tmp = bio_add_page(bio, page, len, 0U);
#line 1183
  if (tmp == 0) {
#line 1187
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1188
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1192
      err = -28;
#line 1193
      goto fail;
    } else {

    }
#line 1195
    goto next_bio;
  } else {

  }
#line 1197
  ds = ds - len;
#line 1198
  sector = (sector_t )(len >> 9) + sector;
#line 1199
  nr_pages = nr_pages - 1U;
#line 1181
  page = page_chain_next(page);
  ldv_51211: ;
#line 1181
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1181
    tmp___0 = page_chain_next(page);
#line 1181
    __builtin_prefetch((void const   *)tmp___0);
#line 1181
    if (1 != 0) {
#line 1182
      goto ldv_51210;
    } else {
#line 1184
      goto ldv_51212;
    }
  } else {

  }
  ldv_51212: ;
#line 1201
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1201
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1201);
  } else {

  }
#line 1202
  if (ds != 0U) {
#line 1202
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1202);
  } else {

  }
#line 1204
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_51213: 
#line 1206
  bio = bios;
#line 1207
  bios = bios->bi_next;
#line 1208
  bio->bi_next = 0;
#line 1210
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1211
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1212
    goto ldv_51213;
  } else {

  }

#line 1212
  return (0);
  fail: ;
#line 1215
  goto ldv_51216;
  ldv_51215: 
#line 1216
  bio = bios;
#line 1217
  bios = bios->bi_next;
#line 1218
  bio_put(bio);
  ldv_51216: ;
#line 1215
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1216
    goto ldv_51215;
  } else {

  }

#line 1220
  return (err);
}
}
#line 1223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1226
  p = & mdev->data.rbuf.barrier;
#line 1229
  inc_unacked(mdev);
#line 1231
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1232
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1232
  rv = (int )tmp;
#line 1239
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1241
  if (rv == 2) {
#line 1242
    return (1);
  } else {

  }
#line 1246
  tmp___0 = kmalloc(40UL, 16U);
#line 1246
  epoch = (struct drbd_epoch *)tmp___0;
#line 1247
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1248
    goto ldv_51227;
  } else {
#line 1250
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1255
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1256
  drbd_flush(mdev);
#line 1258
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1258
  if (tmp___2 != 0) {
#line 1259
    tmp___1 = kmalloc(40UL, 16U);
#line 1259
    epoch = (struct drbd_epoch *)tmp___1;
#line 1260
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1261
      goto ldv_51227;
    } else {

    }
  } else {

  }
#line 1264
  epoch = mdev->current_epoch;
#line 1265
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1265
  if (tmp___3 == 0) {
#line 1265
    goto ldv_51230;
  } else {

  }
#line 1265
  tmp___4 = get_current();
#line 1265
  __wait.flags = 0U;
#line 1265
  __wait.private = (void *)tmp___4;
#line 1265
  __wait.func = & autoremove_wake_function;
#line 1265
  __wait.task_list.next = & __wait.task_list;
#line 1265
  __wait.task_list.prev = & __wait.task_list;
  ldv_51233: 
#line 1265
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1265
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1265
  if (tmp___5 == 0) {
#line 1265
    goto ldv_51232;
  } else {

  }
#line 1265
  schedule();
#line 1265
  goto ldv_51233;
  ldv_51232: 
#line 1265
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_51230: 
#line 1267
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1267
  if (tmp___6 != 0) {
#line 1267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1267);
  } else {

  }
#line 1268
  if (epoch->flags != 0UL) {
#line 1268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1268);
  } else {

  }
#line 1270
  return (1);
  default: 
#line 1272
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1273
  return (0);
  }
  ldv_51227: 
#line 1276
  epoch->flags = 0UL;
#line 1277
  atomic_set(& epoch->epoch_size, 0);
#line 1278
  atomic_set(& epoch->active, 0);
#line 1280
  spin_lock(& mdev->epoch_lock);
#line 1281
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1281
  if (tmp___7 != 0) {
#line 1282
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1283
    mdev->current_epoch = epoch;
#line 1284
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1287
    kfree((void const   *)epoch);
  }
#line 1289
  spin_unlock(& mdev->epoch_lock);
#line 1291
  return (1);
}
}
#line 1297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  int _b___1 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1299
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1299
  capacity = tmp;
#line 1303
  dig_in = mdev->int_dig_in;
#line 1304
  dig_vv = mdev->int_dig_vv;
#line 1307
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1307
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1307
    dgs = (int )tmp___0;
  } else {
#line 1307
    dgs = 0;
  }
#line 1310
  if (dgs != 0) {
#line 1311
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1312
    if (rr != dgs) {
#line 1313
      tmp___1 = get_current();
#line 1313
      tmp___2 = signal_pending(tmp___1);
#line 1313
      if (tmp___2 == 0) {
#line 1314
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1317
      return (0);
    } else {

    }
  } else {

  }
#line 1321
  data_size = data_size - dgs;
#line 1323
  _b = data_size == 0;
#line 1323
  if (_b != 0) {
#line 1323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1323);
  } else {

  }
#line 1323
  if (_b != 0) {
#line 1323
    return (0);
  } else {

  }
#line 1324
  _b___0 = (data_size & 511) != 0;
#line 1324
  if (_b___0 != 0) {
#line 1324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1324);
  } else {

  }
#line 1324
  if (_b___0 != 0) {
#line 1324
    return (0);
  } else {

  }
#line 1325
  _b___1 = (unsigned int )data_size > 131072U;
#line 1325
  if (_b___1 != 0) {
#line 1325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1325);
  } else {

  }
#line 1325
  if (_b___1 != 0) {
#line 1325
    return (0);
  } else {

  }
#line 1329
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1334
    return (0);
  } else {

  }
#line 1340
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1341
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1342
    return (0);
  } else {

  }
#line 1344
  ds = data_size;
#line 1345
  page = e->pages;
#line 1346
  goto ldv_51263;
  ldv_51262: 
#line 1347
  __min1 = ds;
#line 1347
  __min2 = 4096;
#line 1347
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1348
  tmp___3 = kmap(page);
#line 1348
  data = (unsigned long *)tmp___3;
#line 1349
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1350
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1350
  if (tmp___4 != 0) {
#line 1351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1352
    *data = ~ *data;
  } else {

  }
#line 1354
  kunmap(page);
#line 1355
  if ((unsigned int )rr != len) {
#line 1356
    drbd_free_some_ee(mdev, e, 0);
#line 1357
    tmp___5 = get_current();
#line 1357
    tmp___6 = signal_pending(tmp___5);
#line 1357
    if (tmp___6 == 0) {
#line 1358
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1360
    return (0);
  } else {

  }
#line 1362
  ds = ds - rr;
#line 1346
  page = page_chain_next(page);
  ldv_51263: ;
#line 1346
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1346
    tmp___7 = page_chain_next(page);
#line 1346
    __builtin_prefetch((void const   *)tmp___7);
#line 1346
    if (1 != 0) {
#line 1347
      goto ldv_51262;
    } else {
#line 1349
      goto ldv_51264;
    }
  } else {

  }
  ldv_51264: ;
#line 1365
  if (dgs != 0) {
#line 1366
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1367
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1367
    if (tmp___8 != 0) {
#line 1368
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1370
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1372
      drbd_free_some_ee(mdev, e, 0);
#line 1373
      return (0);
    } else {

    }
  } else {

  }
#line 1376
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1377
  return (e);
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1386
  rv = 1;
#line 1389
  if (data_size == 0) {
#line 1390
    return (1);
  } else {

  }
#line 1392
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1394
  data = kmap(page);
#line 1395
  goto ldv_51284;
  ldv_51283: 
#line 1396
  __min1 = data_size;
#line 1396
  __min2 = 4096;
#line 1396
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1397
  __min1___1 = data_size;
#line 1397
  __min2___1 = 4096;
#line 1397
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1398
    rv = 0;
#line 1399
    tmp = get_current();
#line 1399
    tmp___0 = signal_pending(tmp);
#line 1399
    if (tmp___0 == 0) {
#line 1402
      __min1___0 = data_size;
#line 1402
      __min2___0 = 4096;
#line 1402
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1403
    goto ldv_51282;
  } else {

  }
#line 1405
  data_size = data_size - rr;
  ldv_51284: ;
#line 1395
  if (data_size != 0) {
#line 1396
    goto ldv_51283;
  } else {

  }
  ldv_51282: 
#line 1407
  kunmap(page);
#line 1408
  drbd_pp_free(mdev, page, 0);
#line 1409
  return (rv);
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1418
  dig_in = mdev->int_dig_in;
#line 1419
  dig_vv = mdev->int_dig_vv;
#line 1421
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1421
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1421
    dgs = (int )tmp;
  } else {
#line 1421
    dgs = 0;
  }
#line 1424
  if (dgs != 0) {
#line 1425
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1426
    if (rr != dgs) {
#line 1427
      tmp___0 = get_current();
#line 1427
      tmp___1 = signal_pending(tmp___0);
#line 1427
      if (tmp___1 == 0) {
#line 1428
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1431
      return (0);
    } else {

    }
  } else {

  }
#line 1435
  data_size = data_size - dgs;
#line 1439
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1441
  bio = req->master_bio;
#line 1442
  if (bio->bi_sector != sector) {
#line 1442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1442);
  } else {

  }
#line 1444
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1444
  i = (int )bio->bi_idx;
#line 1444
  goto ldv_51303;
  ldv_51302: 
#line 1445
  __min1 = data_size;
#line 1445
  __min2 = (int )bvec->bv_len;
#line 1445
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1446
  tmp___2 = kmap(bvec->bv_page);
#line 1446
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1449
  kunmap(bvec->bv_page);
#line 1450
  if (rr != expect) {
#line 1451
    tmp___3 = get_current();
#line 1451
    tmp___4 = signal_pending(tmp___3);
#line 1451
    if (tmp___4 == 0) {
#line 1452
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1455
    return (0);
  } else {

  }
#line 1457
  data_size = data_size - rr;
#line 1444
  bvec = bvec + 1;
#line 1444
  i = i + 1;
  ldv_51303: ;
#line 1444
  if ((int )bio->bi_vcnt > i) {
#line 1445
    goto ldv_51302;
  } else {

  }

#line 1460
  if (dgs != 0) {
#line 1461
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1462
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1462
    if (tmp___5 != 0) {
#line 1463
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1464
      return (0);
    } else {

    }
  } else {

  }
#line 1468
  if (data_size != 0) {
#line 1468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1468);
  } else {

  }
#line 1469
  return (1);
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1476
  e = (struct drbd_epoch_entry *)w;
#line 1477
  sector = e->sector;
#line 1480
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1480
  if (tmp == 0) {
#line 1480
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1480);
  } else {

  }
#line 1482
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1482
  if (tmp___0 != 0L) {
#line 1483
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1483U);
#line 1484
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1487
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1489
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1491
  atomic_dec(& mdev->unacked_cnt);
#line 1491
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1491
  if (tmp___2 < 0) {
#line 1491
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1491
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1491, tmp___1);
  } else {

  }
#line 1493
  return (ok);
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1500
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1501
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1502
    goto fail;
  } else {

  }
#line 1504
  atomic_dec(& mdev->rs_pending_cnt);
#line 1504
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1504
  if (tmp___0 < 0) {
#line 1504
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1504
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1504, tmp);
  } else {

  }
#line 1506
  inc_unacked(mdev);
#line 1510
  e->w.cb = & e_end_resync_block;
#line 1512
  spin_lock_irq(& mdev->req_lock);
#line 1513
  list_add(& e->w.list, & mdev->sync_ee);
#line 1514
  spin_unlock_irq(& mdev->req_lock);
#line 1516
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1517
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1517
  if (tmp___1 == 0) {
#line 1518
    return (1);
  } else {

  }
#line 1521
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1522
  spin_lock_irq(& mdev->req_lock);
#line 1523
  list_del(& e->w.list);
#line 1524
  spin_unlock_irq(& mdev->req_lock);
#line 1526
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1528
  put_ldev(mdev);
#line 1529
  return (0);
}
}
#line 1532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1537
  p = & mdev->data.rbuf.data;
#line 1539
  tmp = __fswab64(p->sector);
#line 1539
  sector = (sector_t )tmp;
#line 1541
  spin_lock_irq(& mdev->req_lock);
#line 1542
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1543
  spin_unlock_irq(& mdev->req_lock);
#line 1544
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1544
  if (tmp___0 != 0L) {
#line 1545
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1546
    return (0);
  } else {

  }
#line 1552
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1554
  if (ok != 0) {
#line 1555
    req_mod(req, data_received);
  } else {

  }
#line 1560
  return (ok);
}
}
#line 1563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1567
  p = & mdev->data.rbuf.data;
#line 1569
  tmp = __fswab64(p->sector);
#line 1569
  sector = (sector_t )tmp;
#line 1570
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1570);
  } else {

  }
#line 1572
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1572
  if (tmp___1 != 0) {
#line 1576
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1578
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1578
    if (tmp___0 != 0) {
#line 1579
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1581
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1583
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1586
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1588
  return (ok);
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1596
  e = (struct drbd_epoch_entry *)w;
#line 1597
  sector = e->sector;
#line 1598
  ok = 1;
#line 1600
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1601
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1601
    if (tmp___0 != 0L) {
#line 1602
      pcmd = ((int )mdev->state.ldv_38985.conn > 15 && (int )mdev->state.ldv_38985.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1606
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1606
      ok = tmp & ok;
#line 1607
      if (pcmd == 23) {
#line 1608
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1608U);
      } else {

      }
    } else {
#line 1610
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1614
    atomic_dec(& mdev->unacked_cnt);
#line 1614
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1614
    if (tmp___2 < 0) {
#line 1614
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1614
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1614, tmp___1);
    } else {

    }
  } else {

  }
#line 1618
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1619
    spin_lock_irq(& mdev->req_lock);
#line 1620
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1620
    if (tmp___3 != 0) {
#line 1620
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1620);
    } else {

    }
#line 1621
    hlist_del_init(& e->collision);
#line 1622
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1624
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1624
    if (tmp___4 == 0) {
#line 1624
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1624);
    } else {

    }
  }
#line 1627
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1629
  return (ok);
}
}
#line 1632 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1634
  e = (struct drbd_epoch_entry *)w;
#line 1635
  ok = 1;
#line 1637
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1637
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1637);
  } else {

  }
#line 1638
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1640
  spin_lock_irq(& mdev->req_lock);
#line 1641
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1641
  if (tmp != 0) {
#line 1641
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1641);
  } else {

  }
#line 1642
  hlist_del_init(& e->collision);
#line 1643
  spin_unlock_irq(& mdev->req_lock);
#line 1645
  atomic_dec(& mdev->unacked_cnt);
#line 1645
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1645
  if (tmp___1 < 0) {
#line 1645
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1645
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1645, tmp___0);
  } else {

  }
#line 1647
  return (ok);
}
}
#line 1671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1673
  tmp = get_current();
#line 1673
  wait.flags = 0U;
#line 1673
  wait.private = (void *)tmp;
#line 1673
  wait.func = & autoremove_wake_function;
#line 1673
  wait.task_list.next = & wait.task_list;
#line 1673
  wait.task_list.prev = & wait.task_list;
#line 1676
  ret = 0;
#line 1677
  spin_lock(& mdev->peer_seq_lock);
  ldv_51379: 
#line 1679
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1680
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1680
  if (tmp___0 <= 0) {
#line 1681
    goto ldv_51378;
  } else {

  }
#line 1682
  tmp___1 = get_current();
#line 1682
  tmp___2 = signal_pending(tmp___1);
#line 1682
  if (tmp___2 != 0) {
#line 1683
    ret = -512;
#line 1684
    goto ldv_51378;
  } else {

  }
#line 1686
  p_seq = mdev->peer_seq;
#line 1687
  spin_unlock(& mdev->peer_seq_lock);
#line 1688
  timeout = schedule_timeout(7500L);
#line 1689
  spin_lock(& mdev->peer_seq_lock);
#line 1690
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1691
    ret = -110;
#line 1692
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1693
    goto ldv_51378;
  } else {

  }
#line 1695
  goto ldv_51379;
  ldv_51378: 
#line 1696
  finish_wait(& mdev->seq_wait, & wait);
#line 1697
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1698
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1699
  spin_unlock(& mdev->peer_seq_lock);
#line 1700
  return (ret);
}
}
#line 1706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1708
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 1024 : 0)) | ((dpf & 32U) != 0U ? 2048 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1719
  p = & mdev->data.rbuf.data;
#line 1720
  rw = 1;
#line 1723
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1723
  if (tmp___1 == 0) {
#line 1724
    spin_lock(& mdev->peer_seq_lock);
#line 1725
    tmp = __fswab32(p->seq_num);
#line 1725
    if (mdev->peer_seq + 1U == tmp) {
#line 1726
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1727
    spin_unlock(& mdev->peer_seq_lock);
#line 1729
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1730
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1731
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1731
    return (tmp___0);
  } else {

  }
#line 1739
  tmp___2 = __fswab64(p->sector);
#line 1739
  sector = (sector_t )tmp___2;
#line 1740
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1741
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1742
    put_ldev(mdev);
#line 1743
    return (0);
  } else {

  }
#line 1746
  e->w.cb = & e_end_block;
#line 1748
  tmp___3 = __fswab32(p->dp_flags);
#line 1748
  dp_flags = tmp___3;
#line 1749
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1749
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1751
  if ((dp_flags & 4U) != 0U) {
#line 1752
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1754
  spin_lock(& mdev->epoch_lock);
#line 1755
  e->epoch = mdev->current_epoch;
#line 1756
  atomic_inc(& (e->epoch)->epoch_size);
#line 1757
  atomic_inc(& (e->epoch)->active);
#line 1758
  spin_unlock(& mdev->epoch_lock);
#line 1761
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1762
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1766
    size = (int const   )e->size;
#line 1767
    tmp___5 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1767
    discard = tmp___5;
#line 1768
    tmp___6 = get_current();
#line 1768
    wait.flags = 0U;
#line 1768
    wait.private = (void *)tmp___6;
#line 1768
    wait.func = & autoremove_wake_function;
#line 1768
    wait.task_list.next = & wait.task_list;
#line 1768
    wait.task_list.prev = & wait.task_list;
#line 1774
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1774
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1774);
    } else {

    }
#line 1775
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1775
    if (tmp___7 != 0L) {
#line 1775
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1775), "i" (12UL));
      ldv_51401: ;
#line 1775
      goto ldv_51401;
    } else {

    }
#line 1776
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1776
    if (tmp___8 != 0L) {
#line 1776
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1776), "i" (12UL));
      ldv_51402: ;
#line 1776
      goto ldv_51402;
    } else {

    }
#line 1812
    tmp___9 = __fswab32(p->seq_num);
#line 1812
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1812
    if (tmp___10 != 0) {
#line 1813
      goto out_interrupted;
    } else {

    }
#line 1815
    spin_lock_irq(& mdev->req_lock);
#line 1817
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1817
    hlist_add_head(& e->collision, tmp___11);
#line 1820
    slot = tl_hash_slot(mdev, sector);
#line 1821
    first = 1;
    ldv_51413: 
#line 1823
    have_unacked = 0;
#line 1824
    have_conflict = 0;
#line 1825
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1827
    n = slot->first;
#line 1827
    goto ldv_51410;
    ldv_51409: 
#line 1828
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1828
    if (tmp___14 != 0) {
#line 1831
      if (first != 0) {
#line 1832
        tmp___12 = get_current();
#line 1832
        tmp___13 = get_current();
#line 1832
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1837
      if ((i->rq_state & 8UL) != 0UL) {
#line 1838
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1839
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1827
    n = n->next;
    ldv_51410: ;
#line 1827
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1827
      __mptr = (struct hlist_node  const  *)n;
#line 1827
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1827
      if (1 != 0) {
#line 1828
        goto ldv_51409;
      } else {
#line 1830
        goto ldv_51411;
      }
    } else {

    }
    ldv_51411: ;
#line 1843
    if (have_conflict == 0) {
#line 1844
      goto ldv_51412;
    } else {

    }
#line 1847
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1848
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1850
      inc_unacked(mdev);
#line 1851
      e->w.cb = & e_send_discard_ack;
#line 1852
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1854
      spin_unlock_irq(& mdev->req_lock);
#line 1859
      put_ldev(mdev);
#line 1860
      wake_asender(mdev);
#line 1861
      finish_wait(& mdev->misc_wait, & wait);
#line 1862
      return (1);
    } else {

    }
#line 1865
    tmp___15 = get_current();
#line 1865
    tmp___16 = signal_pending(tmp___15);
#line 1865
    if (tmp___16 != 0) {
#line 1866
      hlist_del_init(& e->collision);
#line 1868
      spin_unlock_irq(& mdev->req_lock);
#line 1870
      finish_wait(& mdev->misc_wait, & wait);
#line 1871
      goto out_interrupted;
    } else {

    }
#line 1874
    spin_unlock_irq(& mdev->req_lock);
#line 1875
    if (first != 0) {
#line 1876
      first = 0;
#line 1877
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1879
    if (discard != 0) {
#line 1882
      if (have_unacked != 0) {
#line 1882
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1882);
      } else {

      }
    } else {

    }
#line 1884
    schedule();
#line 1885
    spin_lock_irq(& mdev->req_lock);
#line 1886
    goto ldv_51413;
    ldv_51412: 
#line 1887
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1890
  list_add(& e->w.list, & mdev->active_ee);
#line 1891
  spin_unlock_irq(& mdev->req_lock);
#line 1893
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1895
  inc_unacked(mdev);
#line 1898
  goto ldv_51415;
  case 2: 
#line 1902
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1903
  goto ldv_51415;
  case 1: ;
#line 1906
  goto ldv_51415;
  }
  ldv_51415: ;
#line 1909
  if ((int )mdev->state.ldv_38985.pdsk <= 3) {
#line 1911
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1911U);
#line 1912
    e->flags = e->flags | 1UL;
#line 1913
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1914
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1917
  tmp___17 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1917
  if (tmp___17 == 0) {
#line 1918
    return (1);
  } else {

  }
#line 1921
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1922
  spin_lock_irq(& mdev->req_lock);
#line 1923
  list_del(& e->w.list);
#line 1924
  hlist_del_init(& e->collision);
#line 1925
  spin_unlock_irq(& mdev->req_lock);
#line 1926
  if ((int )e->flags & 1) {
#line 1927
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1930
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1931
  put_ldev(mdev);
#line 1932
  drbd_free_some_ee(mdev, e, 0);
#line 1933
  return (0);
}
}
#line 1947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1949
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1953
  throttle = 0;
#line 1956
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1957
    return (0);
  } else {

  }
#line 1959
  spin_lock_irq(& mdev->al_lock);
#line 1960
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1961
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1962
    __mptr = (struct lc_element  const  *)tmp;
#line 1962
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1963
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1963
    if (tmp___0 != 0) {
#line 1964
      spin_unlock_irq(& mdev->al_lock);
#line 1965
      return (0);
    } else {

    }
  } else {

  }
#line 1969
  spin_unlock_irq(& mdev->al_lock);
#line 1971
  res = 0UL;
#line 1971
  _cpu = 4294967295U;
#line 1971
  goto ldv_51439;
  ldv_51438: 
#line 1971
  __vpp_verify = 0;
#line 1971
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1971
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_51439: 
#line 1971
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1971
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1972
    goto ldv_51438;
  } else {

  }
#line 1972
  res___0 = 0UL;
#line 1972
  _cpu___0 = 4294967295U;
#line 1972
  goto ldv_51449;
  ldv_51448: 
#line 1972
  __vpp_verify___0 = 0;
#line 1972
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1972
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_51449: 
#line 1972
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1972
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1973
    goto ldv_51448;
  } else {

  }
#line 1972
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1972
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 1975
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1979
    mdev->rs_last_events = curr_events;
#line 1983
    i = (mdev->rs_last_mark + 7) % 8;
#line 1985
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 1986
      rs_left = mdev->ov_left;
    } else {
#line 1988
      tmp___2 = drbd_bm_total_weight(mdev);
#line 1988
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 1990
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1991
    if (dt == 0UL) {
#line 1992
      dt = dt + 1UL;
    } else {

    }
#line 1993
    db = mdev->rs_mark_left[i] - rs_left;
#line 1994
    dbdt = db / dt << 2;
#line 1996
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1997
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1999
  return (throttle);
}
}
#line 2003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 2006
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2006
  capacity = tmp;
#line 2008
  di = 0;
#line 2011
  p = & mdev->data.rbuf.block_req;
#line 2013
  tmp___0 = __fswab64(p->sector);
#line 2013
  sector = (sector_t )tmp___0;
#line 2014
  tmp___1 = __fswab32(p->blksize);
#line 2014
  size = (int )tmp___1;
#line 2016
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2017
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2017, (unsigned long long )sector, size);
#line 2019
    return (0);
  } else {

  }
#line 2021
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2022
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2022, (unsigned long long )sector, size);
#line 2024
    return (0);
  } else {

  }
#line 2027
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2027
  if (tmp___7 == 0) {
#line 2028
    verb = 1;
#line 2029
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2031
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2032
    goto ldv_51468;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2036
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2037
    goto ldv_51468;
    case 31U: 
#line 2039
    verb = 0;
#line 2040
    atomic_dec(& mdev->rs_pending_cnt);
#line 2040
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2040
    if (tmp___3 < 0) {
#line 2040
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2040
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2040, tmp___2);
    } else {

    }
#line 2041
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2042
    goto ldv_51468;
    default: 
#line 2044
    tmp___4 = cmdname(cmd);
#line 2044
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_51468: ;
#line 2047
    if (verb != 0) {
#line 2047
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2047
      if (tmp___5 != 0) {
#line 2048
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2052
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2052
    return (tmp___6);
  } else {

  }
#line 2058
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2059
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2060
    put_ldev(mdev);
#line 2061
    return (0);
  } else {

  }
#line 2064
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2066
  e->w.cb = & w_e_end_data_req;
#line 2067
  fault_type = 5U;
#line 2069
  goto submit;
  case 9U: 
#line 2072
  e->w.cb = & w_e_end_rsdata_req;
#line 2073
  fault_type = 3U;
#line 2075
  mdev->bm_resync_fo = sector >> 3;
#line 2076
  goto ldv_51481;
  case 31U: ;
  case 33U: 
#line 2080
  fault_type = 3U;
#line 2081
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2081
  di = (struct digest_info *)tmp___8;
#line 2082
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2083
    goto out_free_e;
  } else {

  }
#line 2085
  di->digest_size = (int )digest_size;
#line 2086
  di->digest = (void *)di + 16U;
#line 2088
  e->ldv_47927.digest = di;
#line 2089
  e->flags = e->flags | 16UL;
#line 2091
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2091
  if ((unsigned int )tmp___9 != digest_size) {
#line 2092
    goto out_free_e;
  } else {

  }
#line 2094
  if ((unsigned int )cmd == 33U) {
#line 2095
    if (mdev->agreed_pro_version <= 88) {
#line 2095
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2095);
    } else {

    }
#line 2096
    e->w.cb = & w_e_end_csum_rs_req;
#line 2098
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2099
  if ((unsigned int )cmd == 31U) {
#line 2101
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2102
    e->w.cb = & w_e_end_ov_reply;
#line 2103
    atomic_dec(& mdev->rs_pending_cnt);
#line 2103
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2103
    if (tmp___11 < 0) {
#line 2103
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2103
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2103, tmp___10);
    } else {

    }
#line 2106
    goto submit_for_resync;
  } else {

  }
#line 2108
  goto ldv_51481;
  case 30U: ;
#line 2111
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2113
    now = jiffies;
#line 2115
    mdev->ov_start_sector = sector;
#line 2116
    mdev->ov_position = sector;
#line 2117
    tmp___12 = drbd_bm_bits(mdev);
#line 2117
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2118
    mdev->rs_total = mdev->ov_left;
#line 2119
    i = 0;
#line 2119
    goto ldv_51493;
    ldv_51492: 
#line 2120
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2121
    mdev->rs_mark_time[i] = now;
#line 2119
    i = i + 1;
    ldv_51493: ;
#line 2119
    if (i <= 7) {
#line 2120
      goto ldv_51492;
    } else {

    }
#line 2123
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2126
  e->w.cb = & w_e_end_ov_req;
#line 2127
  fault_type = 3U;
#line 2128
  goto ldv_51481;
  default: 
#line 2131
  tmp___13 = cmdname(cmd);
#line 2131
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2133
  fault_type = 10U;
#line 2134
  goto out_free_e;
  }
  ldv_51481: ;
#line 2159
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2159
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2159
    if (tmp___14 != 0) {
#line 2160
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2161
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2161
  if (tmp___15 != 0) {
#line 2162
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2165
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2168
  inc_unacked(mdev);
#line 2169
  spin_lock_irq(& mdev->req_lock);
#line 2170
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2171
  spin_unlock_irq(& mdev->req_lock);
#line 2173
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2173
  if (tmp___16 == 0) {
#line 2174
    return (1);
  } else {

  }
#line 2177
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2178
  spin_lock_irq(& mdev->req_lock);
#line 2179
  list_del(& e->w.list);
#line 2180
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2184
  put_ldev(mdev);
#line 2185
  drbd_free_some_ee(mdev, e, 0);
#line 2186
  return (0);
}
}
#line 2189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2191
  rv = -100;
#line 2194
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2195
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2197
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2198
  ch_self = mdev->comm_bm_set;
#line 2200
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2204
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2205
  goto ldv_51507;
  case 0: ;
#line 2207
  goto ldv_51507;
  case 1: ;
#line 2209
  if (self == 0 && peer == 1) {
#line 2210
    rv = -1;
#line 2211
    goto ldv_51507;
  } else {

  }
#line 2213
  if (self == 1 && peer == 0) {
#line 2214
    rv = 1;
#line 2215
    goto ldv_51507;
  } else {

  }
  case 2: ;
#line 2219
  if (self == 0 && peer == 1) {
#line 2220
    rv = 1;
#line 2221
    goto ldv_51507;
  } else {

  }
#line 2223
  if (self == 1 && peer == 0) {
#line 2224
    rv = -1;
#line 2225
    goto ldv_51507;
  } else {

  }
#line 2228
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2231
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2232
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2232
    rv = tmp != 0 ? -1 : 1;
#line 2234
    goto ldv_51507;
  } else {
#line 2236
    if (ch_peer == 0UL) {
#line 2236
      rv = 1;
#line 2236
      goto ldv_51507;
    } else {

    }
#line 2237
    if (ch_self == 0UL) {
#line 2237
      rv = -1;
#line 2237
      goto ldv_51507;
    } else {

    }
  }
#line 2239
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2240
    goto ldv_51507;
  } else {

  }
  case 4: ;
#line 2242
  if (ch_self < ch_peer) {
#line 2243
    rv = -1;
  } else
#line 2244
  if (ch_self > ch_peer) {
#line 2245
    rv = 1;
  } else {
#line 2248
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2248
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2250
  goto ldv_51507;
  case 5: 
#line 2252
  rv = -1;
#line 2253
  goto ldv_51507;
  case 6: 
#line 2255
  rv = 1;
  }
  ldv_51507: ;
#line 2258
  return (rv);
}
}
#line 2261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2263
  rv = -100;
#line 2265
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2271
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2272
  goto ldv_51525;
  case 0: ;
#line 2274
  goto ldv_51525;
  case 7: 
#line 2276
  hg = drbd_asb_recover_0p(mdev);
#line 2277
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2278
    rv = hg;
  } else {

  }
#line 2279
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2280
    rv = hg;
  } else {

  }
#line 2281
  goto ldv_51525;
  case 10: 
#line 2283
  rv = drbd_asb_recover_0p(mdev);
#line 2284
  goto ldv_51525;
  case 8: ;
#line 2286
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2288
  hg = drbd_asb_recover_0p(mdev);
#line 2289
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2292
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2296
    val.i = 0U;
#line 2296
    val.ldv_38985.role = 2U;
#line 2296
    mask.i = 0U;
#line 2296
    mask.ldv_38985.role = 3U;
#line 2296
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2297
    if ((int )rv2 != 1) {
#line 2298
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2300
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2301
      rv = hg;
    }
  } else {
#line 2304
    rv = hg;
  }
  }
  ldv_51525: ;
#line 2307
  return (rv);
}
}
#line 2310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2312
  rv = -100;
#line 2314
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2322
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2323
  goto ldv_51548;
  case 10: 
#line 2325
  rv = drbd_asb_recover_0p(mdev);
#line 2326
  goto ldv_51548;
  case 0: ;
#line 2328
  goto ldv_51548;
  case 9: 
#line 2330
  hg = drbd_asb_recover_0p(mdev);
#line 2331
  if (hg == -1) {
#line 2337
    val.i = 0U;
#line 2337
    val.ldv_38985.role = 2U;
#line 2337
    mask.i = 0U;
#line 2337
    mask.ldv_38985.role = 3U;
#line 2337
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2338
    if ((int )rv2 != 1) {
#line 2339
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2341
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2342
      rv = hg;
    }
  } else {
#line 2345
    rv = hg;
  }
  }
  ldv_51548: ;
#line 2348
  return (rv);
}
}
#line 2351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2354
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2355
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2356
    return;
  } else {

  }
#line 2358
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2359
  return;
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2385
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2386
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2388
  *rule_nr = 10;
#line 2389
  if (self == 4ULL && peer == 4ULL) {
#line 2390
    return (0);
  } else {

  }
#line 2392
  *rule_nr = 20;
#line 2393
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2395
    return (-2);
  } else {

  }
#line 2397
  *rule_nr = 30;
#line 2398
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2400
    return (2);
  } else {

  }
#line 2402
  if (self == peer) {
#line 2405
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2407
      if (mdev->agreed_pro_version <= 90) {
#line 2408
        return (-1091);
      } else {

      }
#line 2410
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2412
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2413
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2415
        if ((int )mdev->state.ldv_38985.disk > 2) {
#line 2415
          tmp = drbd_bm_total_weight(mdev);
#line 2415
          tmp___0 = (u64 )tmp;
        } else {
#line 2415
          tmp___0 = 0ULL;
        }
#line 2415
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2417
        *rule_nr = 34;
      } else {
#line 2419
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2420
        *rule_nr = 36;
      }
#line 2423
      return (1);
    } else {

    }
#line 2426
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2428
      if (mdev->agreed_pro_version <= 90) {
#line 2429
        return (-1091);
      } else {

      }
#line 2431
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2433
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2435
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2436
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2437
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2439
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2440
        *rule_nr = 35;
      } else {
#line 2442
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2443
        *rule_nr = 37;
      }
#line 2446
      return (-1);
    } else {

    }
#line 2450
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2450
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2454
    *rule_nr = 40;
#line 2456
    switch (rct) {
    case 0: ;
#line 2457
    return (0);
    case 1: ;
#line 2458
    return (1);
    case 2: ;
#line 2459
    return (-1);
    case 3: 
#line 2461
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2462
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2466
  *rule_nr = 50;
#line 2467
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2468
  if (self == peer) {
#line 2469
    return (-1);
  } else {

  }
#line 2471
  *rule_nr = 51;
#line 2472
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2473
  if (self == peer) {
#line 2474
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2481
      if (mdev->agreed_pro_version <= 90) {
#line 2482
        return (-1091);
      } else {

      }
#line 2484
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2485
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2487
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Did not got last syncUUID packet, corrected:\n");
#line 2488
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2490
      return (-1);
    } else {

    }
  } else {

  }
#line 2494
  *rule_nr = 60;
#line 2495
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2496
  i = 2;
#line 2496
  goto ldv_51579;
  ldv_51578: 
#line 2497
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2498
  if (self == peer) {
#line 2499
    return (-2);
  } else {

  }
#line 2496
  i = i + 1;
  ldv_51579: ;
#line 2496
  if (i <= 3) {
#line 2497
    goto ldv_51578;
  } else {

  }
#line 2502
  *rule_nr = 70;
#line 2503
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2504
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2505
  if (self == peer) {
#line 2506
    return (1);
  } else {

  }
#line 2508
  *rule_nr = 71;
#line 2509
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2510
  if (self == peer) {
#line 2511
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2518
      if (mdev->agreed_pro_version <= 90) {
#line 2519
        return (-1091);
      } else {

      }
#line 2521
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2522
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2524
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2525
      if ((int )mdev->state.ldv_38985.disk > 2) {
#line 2525
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2525
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2525
        tmp___3 = 0ULL;
      }
#line 2525
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2528
      return (1);
    } else {

    }
  } else {

  }
#line 2533
  *rule_nr = 80;
#line 2534
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2535
  i = 2;
#line 2535
  goto ldv_51582;
  ldv_51581: 
#line 2536
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2537
  if (self == peer) {
#line 2538
    return (2);
  } else {

  }
#line 2535
  i = i + 1;
  ldv_51582: ;
#line 2535
  if (i <= 3) {
#line 2536
    goto ldv_51581;
  } else {

  }
#line 2541
  *rule_nr = 90;
#line 2542
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2543
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2544
  if (self == peer && self != 0ULL) {
#line 2545
    return (100);
  } else {

  }
#line 2547
  *rule_nr = 100;
#line 2548
  i = 2;
#line 2548
  goto ldv_51588;
  ldv_51587: 
#line 2549
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2550
  j = 2;
#line 2550
  goto ldv_51585;
  ldv_51584: 
#line 2551
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2552
  if (self == peer) {
#line 2553
    return (-100);
  } else {

  }
#line 2550
  j = j + 1;
  ldv_51585: ;
#line 2550
  if (j <= 3) {
#line 2551
    goto ldv_51584;
  } else {

  }
#line 2548
  i = i + 1;
  ldv_51588: ;
#line 2548
  if (i <= 3) {
#line 2549
    goto ldv_51587;
  } else {

  }

#line 2557
  return (-1000);
}
}
#line 2563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2567
  rv = C_MASK;
#line 2570
  mydisk = (enum drbd_disk_state )mdev->state.ldv_38985.disk;
#line 2571
  if ((unsigned int )mydisk == 3U) {
#line 2572
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_38985.disk;
  } else {

  }
#line 2574
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2575
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2576
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2579
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2581
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2583
  if (hg == -1000) {
#line 2584
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2585
    return (C_MASK);
  } else {

  }
#line 2587
  if (hg < -1000) {
#line 2588
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2589
    return (C_MASK);
  } else {

  }
#line 2592
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2594
    if (hg == -100) {
#line 2594
      tmp = 1;
    } else {
#line 2594
      __x___0 = hg;
#line 2594
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2594
      if (ret == 2L) {
#line 2594
        tmp = 1;
      } else {
#line 2594
        tmp = 0;
      }
    }
#line 2594
    f = tmp;
#line 2595
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2596
    if (f != 0) {
#line 2597
      hg = hg * 2;
    } else {

    }
#line 2598
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2602
  __x___2 = hg;
#line 2602
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2602
  if (ret___0 == 100L) {
#line 2603
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2605
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2606
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2608
    forced = hg == -100;
#line 2610
    switch (pcount) {
    case 0: 
#line 2612
    hg = drbd_asb_recover_0p(mdev);
#line 2613
    goto ldv_51611;
    case 1: 
#line 2615
    hg = drbd_asb_recover_1p(mdev);
#line 2616
    goto ldv_51611;
    case 2: 
#line 2618
    hg = drbd_asb_recover_2p(mdev);
#line 2619
    goto ldv_51611;
    }
    ldv_51611: 
#line 2621
    __x___4 = hg;
#line 2621
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2621
    if (ret___1 <= 99L) {
#line 2622
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2625
      if (forced != 0) {
#line 2626
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2628
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2633
  if (hg == -100) {
#line 2634
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2635
      hg = -1;
    } else {

    }
#line 2636
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2637
      hg = 1;
    } else {

    }
#line 2639
    __x___6 = hg;
#line 2639
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2639
    if (ret___2 <= 99L) {
#line 2640
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2645
  if (hg == -100) {
#line 2650
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2651
    drbd_khelper(mdev, (char *)"split-brain");
#line 2652
    return (C_MASK);
  } else {

  }
#line 2655
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2656
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2657
    return (C_MASK);
  } else {

  }
#line 2660
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_38985.disk > 6) {
#line 2662
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2664
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2667
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2668
    return (C_MASK);
    case 10: 
#line 2670
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2675
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2675
    goto _L;
  } else {
#line 2675
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2675
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2676
      if (hg == 0) {
#line 2677
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2679
        __x___8 = hg;
#line 2679
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2679
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2679
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2682
      return (C_MASK);
    } else {

    }
  }
#line 2685
  __x___10 = hg;
#line 2685
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2685
  if (ret___4 > 1L) {
#line 2686
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2687
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_DONT_CLEAR);
#line 2687
    if (tmp___2 != 0) {
#line 2689
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2692
  if (hg > 0) {
#line 2693
    rv = C_WF_BITMAP_S;
  } else
#line 2694
  if (hg < 0) {
#line 2695
    rv = C_WF_BITMAP_T;
  } else {
#line 2697
    rv = C_CONNECTED;
#line 2698
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2698
    if (tmp___4 != 0UL) {
#line 2699
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2699
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2704
  return (rv);
}
}
#line 2708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2711
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2713
    return (0);
  } else {

  }
#line 2716
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2718
    return (1);
  } else {

  }
#line 2721
  if ((unsigned int )peer == (unsigned int )self) {
#line 2722
    return (0);
  } else {

  }
#line 2725
  return (1);
}
}
#line 2728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2730
  p = & mdev->data.rbuf.protocol;
#line 2733
  p_integrity_alg[0] = '\000';
#line 2733
  tmp = 1U;
#line 2733
  while (1) {
#line 2733
    if (tmp >= 64U) {
#line 2733
      break;
    } else {

    }
#line 2733
    p_integrity_alg[tmp] = (char)0;
#line 2733
    tmp = tmp + 1U;
  }
#line 2735
  tmp___0 = __fswab32(p->protocol);
#line 2735
  p_proto = (int )tmp___0;
#line 2736
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2736
  p_after_sb_0p = (int )tmp___1;
#line 2737
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2737
  p_after_sb_1p = (int )tmp___2;
#line 2738
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2738
  p_after_sb_2p = (int )tmp___3;
#line 2739
  tmp___4 = __fswab32(p->two_primaries);
#line 2739
  p_two_primaries = (int )tmp___4;
#line 2740
  tmp___5 = __fswab32(p->conn_flags);
#line 2740
  cf = (int )tmp___5;
#line 2741
  p_want_lose = cf & 1;
#line 2743
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2745
  if ((cf & 2) != 0) {
#line 2746
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2748
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2750
    goto disconnect;
  } else {

  }
#line 2753
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2753
  if (tmp___6 != 0) {
#line 2754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2755
    goto disconnect;
  } else {

  }
#line 2758
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2758
  if (tmp___7 != 0) {
#line 2759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2760
    goto disconnect;
  } else {

  }
#line 2763
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2763
  if (tmp___8 != 0) {
#line 2764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2765
    goto disconnect;
  } else {

  }
#line 2768
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2770
    goto disconnect;
  } else {

  }
#line 2773
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2775
    goto disconnect;
  } else {

  }
#line 2778
  if (mdev->agreed_pro_version > 86) {
#line 2779
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2781
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2781
    if ((unsigned int )tmp___9 != data_size) {
#line 2782
      return (0);
    } else {

    }
#line 2784
    p_integrity_alg[63] = 0;
#line 2785
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2785
    if (tmp___10 != 0) {
#line 2786
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2787
      goto disconnect;
    } else {

    }
#line 2789
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2793
  return (1);
  disconnect: 
#line 2796
  val.i = 0U;
#line 2796
  val.ldv_38985.conn = 1U;
#line 2796
  mask.i = 0U;
#line 2796
  mask.ldv_38985.conn = 31U;
#line 2796
  drbd_force_state(mdev, mask, val);
#line 2797
  return (0);
}
}
#line 2805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2810
  if ((int )((signed char )*alg) == 0) {
#line 2811
    return (0);
  } else {

  }
#line 2813
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2814
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2814
  if (tmp___0 != 0L) {
#line 2815
    tmp = PTR_ERR((void const   *)tfm);
#line 2815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2817
    return (tfm);
  } else {

  }
#line 2819
  tmp___2 = crypto_hash_tfm(tfm);
#line 2819
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2819
  if (tmp___3 == 0) {
#line 2820
    crypto_free_hash(tfm);
#line 2821
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2822
    tmp___1 = ERR_PTR(-22L);
#line 2822
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2824
  return (tfm);
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2829
  ok = 1;
#line 2830
  p = & mdev->data.rbuf.rs_param_95;
#line 2832
  verify_tfm = 0;
#line 2833
  csums_tfm = 0;
#line 2834
  apv = mdev->agreed_pro_version;
#line 2835
  rs_plan_s = 0;
#line 2836
  fifo_size = 0;
#line 2838
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2844
  if (packet_size > exp_max_sz) {
#line 2845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2847
    return (0);
  } else {

  }
#line 2850
  if (apv <= 88) {
#line 2851
    header_size = 4U;
#line 2852
    data_size = packet_size - header_size;
  } else
#line 2853
  if (apv <= 94) {
#line 2854
    header_size = 132U;
#line 2855
    data_size = packet_size - header_size;
#line 2856
    if (data_size != 0U) {
#line 2856
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2856);
    } else {

    }
  } else {
#line 2858
    header_size = 148U;
#line 2859
    data_size = packet_size - header_size;
#line 2860
    if (data_size != 0U) {
#line 2860
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2860);
    } else {

    }
  }
#line 2864
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2866
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2866
  if ((unsigned int )tmp != header_size) {
#line 2867
    return (0);
  } else {

  }
#line 2869
  tmp___0 = __fswab32(p->rate);
#line 2869
  mdev->sync_conf.rate = (int )tmp___0;
#line 2871
  if (apv > 87) {
#line 2872
    if (apv == 88) {
#line 2873
      if (data_size > 64U) {
#line 2874
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2877
        return (0);
      } else {

      }
#line 2880
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2880
      if ((unsigned int )tmp___1 != data_size) {
#line 2881
        return (0);
      } else {

      }
#line 2885
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2885
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2885);
      } else {

      }
#line 2886
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2891
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2891
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2891);
      } else {

      }
#line 2892
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2892
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2892);
      } else {

      }
#line 2893
      p->verify_alg[63] = 0;
#line 2894
      p->csums_alg[63] = 0;
    }
#line 2897
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2897
    if (tmp___3 != 0) {
#line 2898
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2899
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2901
        goto disconnect;
      } else {

      }
#line 2903
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2905
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2905
      if (tmp___2 != 0L) {
#line 2906
        verify_tfm = 0;
#line 2907
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2911
    if (apv > 88) {
#line 2911
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2911
      if (tmp___5 != 0) {
#line 2912
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2913
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2915
          goto disconnect;
        } else {

        }
#line 2917
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2919
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2919
        if (tmp___4 != 0L) {
#line 2920
          csums_tfm = 0;
#line 2921
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2925
    if (apv > 94) {
#line 2926
      tmp___6 = __fswab32(p->rate);
#line 2926
      mdev->sync_conf.rate = (int )tmp___6;
#line 2927
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2927
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2928
      tmp___8 = __fswab32(p->c_delay_target);
#line 2928
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2929
      tmp___9 = __fswab32(p->c_fill_target);
#line 2929
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2930
      tmp___10 = __fswab32(p->c_max_rate);
#line 2930
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2932
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2933
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2934
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2934
        rs_plan_s = (int *)tmp___11;
#line 2935
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2936
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2937
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2942
    spin_lock(& mdev->peer_seq_lock);
#line 2944
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2945
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2946
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2946
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2947
      crypto_free_hash(mdev->verify_tfm);
#line 2948
      mdev->verify_tfm = verify_tfm;
#line 2949
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2951
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2952
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2953
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2953
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2954
      crypto_free_hash(mdev->csums_tfm);
#line 2955
      mdev->csums_tfm = csums_tfm;
#line 2956
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2958
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2959
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2960
      mdev->rs_plan_s.values = rs_plan_s;
#line 2961
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2962
      mdev->rs_planed = 0;
    } else {

    }
#line 2964
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2967
  return (ok);
  disconnect: 
#line 2971
  crypto_free_hash(csums_tfm);
#line 2973
  crypto_free_hash(verify_tfm);
#line 2974
  val.i = 0U;
#line 2974
  val.ldv_38985.conn = 1U;
#line 2974
  mask.i = 0U;
#line 2974
  mask.ldv_38985.conn = 31U;
#line 2974
  drbd_force_state(mdev, mask, val);
#line 2975
  return (0);
}
}
#line 2979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2983
  if (a == 0UL || b == 0UL) {
#line 2984
    return;
  } else {

  }
#line 2985
  d = a > b ? a - b : b - a;
#line 2986
  if (a >> 3 < d || b >> 3 < d) {
#line 2987
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2989
  return;
}
}
#line 2991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 2993
  p = & mdev->data.rbuf.sizes;
#line 2994
  dd = 0;
#line 2996
  ldsc = 0;
#line 2999
  tmp = __fswab64(p->d_size);
#line 2999
  p_size = (sector_t )tmp;
#line 3000
  tmp___0 = __fswab64(p->u_size);
#line 3000
  p_usize = (sector_t )tmp___0;
#line 3002
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 3003
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3004
    val.i = 0U;
#line 3004
    val.ldv_38985.conn = 1U;
#line 3004
    mask.i = 0U;
#line 3004
    mask.ldv_38985.conn = 31U;
#line 3004
    drbd_force_state(mdev, mask, val);
#line 3005
    return (0);
  } else {

  }
#line 3010
  mdev->p_size = p_size;
#line 3012
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3012
  if (tmp___6 != 0) {
#line 3013
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3013
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3015
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3020
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3021
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3021
      __y = p_usize;
#line 3021
      if (__x != 0UL) {
#line 3021
        if (__y != 0UL) {
#line 3021
          _min1 = __x;
#line 3021
          _min2 = __y;
#line 3021
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3021
          tmp___2 = __x;
        }
#line 3021
        tmp___3 = tmp___2;
      } else {
#line 3021
        tmp___3 = __y;
      }
#line 3021
      p_usize = tmp___3;
    } else {

    }
#line 3024
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3026
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3027
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3028
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3034
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3034
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3034
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_38985.disk > 4) && (int )mdev->state.ldv_38985.conn <= 9) {
#line 3038
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3039
      val___0.i = 0U;
#line 3039
      val___0.ldv_38985.conn = 1U;
#line 3039
      mask___0.i = 0U;
#line 3039
      mask___0.ldv_38985.conn = 31U;
#line 3039
      drbd_force_state(mdev, mask___0, val___0);
#line 3040
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3041
      put_ldev(mdev);
#line 3042
      return (0);
    } else {

    }
#line 3044
    put_ldev(mdev);
  } else {

  }
#line 3047
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3047
  ddsf = (enum dds_flags )tmp___7;
#line 3048
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3048
  if (tmp___8 != 0) {
#line 3049
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3050
    put_ldev(mdev);
#line 3051
    if ((int )dd == -1) {
#line 3052
      return (0);
    } else {

    }
#line 3053
    drbd_md_sync(mdev);
  } else {
#line 3056
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3059
  tmp___9 = __fswab32(p->max_bio_size);
#line 3059
  mdev->peer_max_bio_size = (int )tmp___9;
#line 3060
  drbd_reconsider_max_bio_size(mdev);
#line 3062
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3062
  if (tmp___11 != 0) {
#line 3063
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3063
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3064
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3065
      ldsc = 1;
    } else {

    }
#line 3068
    put_ldev(mdev);
  } else {

  }
#line 3071
  if ((int )mdev->state.ldv_38985.conn > 9) {
#line 3072
    tmp___12 = __fswab64(p->c_size);
#line 3072
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3072
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3076
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3078
    tmp___14 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3078
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3080
      if ((int )mdev->state.ldv_38985.pdsk > 3 && (int )mdev->state.ldv_38985.disk > 3) {
#line 3082
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3083
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3085
          resync_after_online_grow(mdev);
        }
      } else {
#line 3087
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3091
  return (1);
}
}
#line 3094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3096
  p = & mdev->data.rbuf.uuids;
#line 3098
  updated_uuids = 0;
#line 3100
  tmp = kmalloc(48UL, 16U);
#line 3100
  p_uuid = (u64 *)tmp;
#line 3102
  i = 0;
#line 3102
  goto ldv_51726;
  ldv_51725: 
#line 3103
  tmp___0 = __fswab64(p->uuid[i]);
#line 3103
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3102
  i = i + 1;
  ldv_51726: ;
#line 3102
  if (i <= 5) {
#line 3103
    goto ldv_51725;
  } else {

  }
#line 3105
  kfree((void const   *)mdev->p_uuid);
#line 3106
  mdev->p_uuid = p_uuid;
#line 3108
  if ((((int )mdev->state.ldv_38985.conn <= 9 && (int )mdev->state.ldv_38985.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3112
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3114
    val.i = 0U;
#line 3114
    val.ldv_38985.conn = 1U;
#line 3114
    mask.i = 0U;
#line 3114
    mask.ldv_38985.conn = 31U;
#line 3114
    drbd_force_state(mdev, mask, val);
#line 3115
    return (0);
  } else {

  }
#line 3118
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3118
  if (tmp___1 != 0) {
#line 3119
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3124
    if (skip_initial_sync != 0) {
#line 3125
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3126
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3129
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3130
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3131
      __ns.i = mdev->state.i;
#line 3131
      __ns.ldv_38985.disk = 8U;
#line 3131
      __ns.ldv_38985.pdsk = 8U;
#line 3131
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3133
      drbd_md_sync(mdev);
#line 3134
      updated_uuids = 1;
    } else {

    }
#line 3136
    put_ldev(mdev);
  } else
#line 3137
  if ((int )mdev->state.ldv_38985.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3141
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3148
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3148
  if (tmp___2 == 0) {
#line 3148
    goto ldv_51735;
  } else {

  }
#line 3148
  tmp___3 = get_current();
#line 3148
  __wait.flags = 0U;
#line 3148
  __wait.private = (void *)tmp___3;
#line 3148
  __wait.func = & autoremove_wake_function;
#line 3148
  __wait.task_list.next = & __wait.task_list;
#line 3148
  __wait.task_list.prev = & __wait.task_list;
  ldv_51738: 
#line 3148
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3148
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3148
  if (tmp___4 == 0) {
#line 3148
    goto ldv_51737;
  } else {

  }
#line 3148
  schedule();
#line 3148
  goto ldv_51738;
  ldv_51737: 
#line 3148
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51735: ;
#line 3149
  if ((int )mdev->state.ldv_38985.conn > 9 && (int )mdev->state.ldv_38985.disk <= 3) {
#line 3150
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3150
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3152
  if (updated_uuids != 0) {
#line 3153
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3155
  return (1);
}
}
#line 3162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3166
  c_tab[0] = 0;
#line 3166
  c_tab[1] = C_TEAR_DOWN;
#line 3166
  c_tab[2] = 0;
#line 3166
  c_tab[3] = 0;
#line 3166
  c_tab[4] = 0;
#line 3166
  c_tab[5] = 0;
#line 3166
  c_tab[6] = 0;
#line 3166
  c_tab[7] = 0;
#line 3166
  c_tab[8] = 0;
#line 3166
  c_tab[9] = 0;
#line 3166
  c_tab[10] = C_CONNECTED;
#line 3166
  c_tab[11] = C_STARTING_SYNC_T;
#line 3166
  c_tab[12] = C_STARTING_SYNC_S;
#line 3166
  c_tab[13] = 0;
#line 3166
  c_tab[14] = 0;
#line 3166
  c_tab[15] = 0;
#line 3166
  c_tab[16] = 0;
#line 3166
  c_tab[17] = 0;
#line 3166
  c_tab[18] = C_VERIFY_T;
#line 3166
  c_tab[19] = 0;
#line 3166
  c_tab[20] = 0;
#line 3166
  c_tab[21] = 0;
#line 3166
  c_tab[22] = 0;
#line 3166
  c_tab[23] = 0;
#line 3166
  c_tab[24] = 0;
#line 3166
  c_tab[25] = 0;
#line 3166
  c_tab[26] = 0;
#line 3166
  c_tab[27] = 0;
#line 3166
  c_tab[28] = 0;
#line 3166
  c_tab[29] = 0;
#line 3166
  c_tab[30] = 0;
#line 3166
  c_tab[31] = C_MASK;
#line 3176
  ms.i = ps.i;
#line 3178
  ms.ldv_38985.conn = (unsigned char )c_tab[(int )ps.ldv_38985.conn];
#line 3179
  ms.ldv_38985.peer = ps.ldv_38985.role;
#line 3180
  ms.ldv_38985.role = ps.ldv_38985.peer;
#line 3181
  ms.ldv_38985.pdsk = ps.ldv_38985.disk;
#line 3182
  ms.ldv_38985.disk = ps.ldv_38985.pdsk;
#line 3183
  ms.ldv_38985.peer_isp = (unsigned char )((int )ps.ldv_38985.aftr_isp | (int )ps.ldv_38985.user_isp);
#line 3185
  return (ms);
}
}
#line 3188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3190
  p = & mdev->data.rbuf.req_state;
#line 3194
  tmp = __fswab32(p->mask);
#line 3194
  mask.i = tmp;
#line 3195
  tmp___0 = __fswab32(p->val);
#line 3195
  val.i = tmp___0;
#line 3197
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3197
  if (tmp___1 != 0) {
#line 3197
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3197
    if (tmp___2 != 0) {
#line 3199
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3200
      return (1);
    } else {

    }
  } else {

  }
#line 3203
  mask = convert_state(mask);
#line 3204
  val = convert_state(val);
#line 3206
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3208
  drbd_send_sr_reply(mdev, rv);
#line 3209
  drbd_md_sync(mdev);
#line 3211
  return (1);
}
}
#line 3214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3216
  p = & mdev->data.rbuf.state;
#line 3222
  tmp = __fswab32(p->state);
#line 3222
  peer_state.i = tmp;
#line 3224
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_38985.disk;
#line 3225
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3226
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3227
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3227
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3230
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3232
  ns = mdev->state;
#line 3232
  os = ns;
#line 3233
  spin_unlock_irq(& mdev->req_lock);
#line 3237
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_38985.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3245
    if ((int )peer_state.ldv_38985.conn > 10 && (int )peer_state.ldv_38985.conn <= 15) {
#line 3247
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3252
    if ((int )os.ldv_38985.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3254
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3254
      if (tmp___1 <= mdev->rs_failed) {
#line 3255
        drbd_resync_finished(mdev);
      } else {

      }
#line 3256
      return (1);
    } else {

    }
  } else {

  }
#line 3265
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_38985.conn > 16) {
#line 3267
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3269
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3270
    ns.ldv_38985.conn = 10U;
  } else {

  }
#line 3272
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3273
    ns.ldv_38985.conn = 23U;
  } else {

  }
#line 3275
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_38985.disk > 2) {
#line 3275
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3275
    if (tmp___5 != 0) {
#line 3280
      cr = (int )os.ldv_38985.conn <= 9;
#line 3283
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3288
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3288
      cr = tmp___2 | cr;
#line 3291
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_38985.conn > 10 && (int )peer_state.ldv_38985.conn <= 14)) | cr;
#line 3295
      if (cr != 0) {
#line 3296
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_38985.role,
                                      real_peer_disk);
#line 3296
        ns.ldv_38985.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3298
      put_ldev(mdev);
#line 3299
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3300
        ns.ldv_38985.conn = 10U;
#line 3301
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3302
          val.i = 0U;
#line 3302
          val.ldv_38985.disk = 2U;
#line 3302
          mask.i = 0U;
#line 3302
          mask.ldv_38985.disk = 15U;
#line 3302
          drbd_force_state(mdev, mask, val);
        } else
#line 3303
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3304
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3305
          peer_state.ldv_38985.disk = 0U;
#line 3306
          real_peer_disk = D_DISKLESS;
        } else {
#line 3308
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3308
          if (tmp___4 != 0) {
#line 3309
            return (0);
          } else {

          }
#line 3310
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3310
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3310);
          } else {

          }
#line 3311
          val___0.i = 0U;
#line 3311
          val___0.ldv_38985.conn = 1U;
#line 3311
          mask___0.i = 0U;
#line 3311
          mask___0.ldv_38985.conn = 31U;
#line 3311
          drbd_force_state(mdev, mask___0, val___0);
#line 3312
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3317
  spin_lock_irq(& mdev->req_lock);
#line 3318
  if (mdev->state.i != os.i) {
#line 3319
    goto retry;
  } else {

  }
#line 3320
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3321
  ns.ldv_38985.peer = peer_state.ldv_38985.role;
#line 3322
  ns.ldv_38985.pdsk = (unsigned char )real_peer_disk;
#line 3323
  ns.ldv_38985.peer_isp = (unsigned char )((int )peer_state.ldv_38985.aftr_isp | (int )peer_state.ldv_38985.user_isp);
#line 3324
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3325
    ns.ldv_38985.disk = mdev->new_state_tmp.ldv_38985.disk;
  } else {

  }
#line 3326
  cs_flags = (enum chg_state_flags )(((int )os.ldv_38985.conn > 9 || (int )ns.ldv_38985.conn <= 9) + 2);
#line 3327
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3327
    tmp___6 = is_susp(ns);
#line 3327
    if (tmp___6 != 0) {
#line 3327
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3327
        if ((int )os.ldv_38985.conn <= 9) {
#line 3327
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3327
          if (tmp___7 != 0) {
#line 3331
            spin_unlock_irq(& mdev->req_lock);
#line 3332
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3333
            tl_clear(mdev);
#line 3334
            drbd_uuid_new_current(mdev);
#line 3335
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3336
            val___1.i = 0U;
#line 3336
            val___1.ldv_38985.conn = 6U;
#line 3336
            val___1.ldv_38985.susp = 0U;
#line 3336
            mask___1.i = 0U;
#line 3336
            mask___1.ldv_38985.conn = 31U;
#line 3336
            mask___1.ldv_38985.susp = 1U;
#line 3336
            drbd_force_state(mdev, mask___1, val___1);
#line 3337
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3339
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3339
  rv = (int )tmp___8;
#line 3340
  ns = mdev->state;
#line 3341
  spin_unlock_irq(& mdev->req_lock);
#line 3343
  if (rv <= 0) {
#line 3344
    val___2.i = 0U;
#line 3344
    val___2.ldv_38985.conn = 1U;
#line 3344
    mask___2.i = 0U;
#line 3344
    mask___2.ldv_38985.conn = 31U;
#line 3344
    drbd_force_state(mdev, mask___2, val___2);
#line 3345
    return (0);
  } else {

  }
#line 3348
  if ((int )os.ldv_38985.conn > 9) {
#line 3349
    if (((int )ns.ldv_38985.conn > 10 && (int )peer_state.ldv_38985.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3354
      drbd_send_uuids(mdev);
#line 3355
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3359
  (mdev->net_conf)->want_lose = 0U;
#line 3361
  drbd_md_sync(mdev);
#line 3363
  return (1);
}
}
#line 3366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3368
  p = & mdev->data.rbuf.rs_uuid;
#line 3370
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38985.conn <= 9) || (int )mdev->state.ldv_38985.disk <= 2) {
#line 3370
    goto ldv_51789;
  } else {

  }
#line 3370
  tmp = get_current();
#line 3370
  __wait.flags = 0U;
#line 3370
  __wait.private = (void *)tmp;
#line 3370
  __wait.func = & autoremove_wake_function;
#line 3370
  __wait.task_list.next = & __wait.task_list;
#line 3370
  __wait.task_list.prev = & __wait.task_list;
  ldv_51792: 
#line 3370
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3370
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38985.conn <= 9) || (int )mdev->state.ldv_38985.disk <= 2) {
#line 3370
    goto ldv_51791;
  } else {

  }
#line 3370
  schedule();
#line 3370
  goto ldv_51792;
  ldv_51791: 
#line 3370
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51789: 
#line 3380
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3380
  if (tmp___1 != 0) {
#line 3381
    tmp___0 = __fswab64(p->uuid);
#line 3381
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3382
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3384
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3385
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3387
    put_ldev(mdev);
  } else {
#line 3389
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3391
  return (1);
}
}
#line 3401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3404
  __min1 = 511UL;
#line 3404
  __min2 = c->bm_words - c->word_offset;
#line 3404
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3405
  want = num_words * 8U;
#line 3408
  if (want != data_size) {
#line 3409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3410
    return (-5);
  } else {

  }
#line 3412
  if (want == 0U) {
#line 3413
    return (0);
  } else {

  }
#line 3414
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3415
  if ((unsigned int )err != want) {
#line 3416
    if (err >= 0) {
#line 3417
      err = -5;
    } else {

    }
#line 3418
    return (err);
  } else {

  }
#line 3421
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3423
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3424
  c->bit_offset = c->word_offset * 64UL;
#line 3425
  if (c->bit_offset > c->bm_bits) {
#line 3426
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3428
  return (1);
}
}
#line 3438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3446
  s = c->bit_offset;
#line 3448
  tmp___0 = __fswab16((int )p->head.length);
#line 3448
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3449
  tmp___1 = DCBP_get_start(p);
#line 3449
  toggle = tmp___1;
#line 3453
  tmp___2 = DCBP_get_pad_bits(p);
#line 3453
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3455
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3456
  if (bits < 0) {
#line 3457
    return (-5);
  } else {

  }
#line 3459
  have = bits;
#line 3459
  goto ldv_51822;
  ldv_51821: 
#line 3460
  bits = vli_decode_bits(& rl, look_ahead);
#line 3461
  if (bits <= 0) {
#line 3462
    return (-5);
  } else {

  }
#line 3464
  if (toggle != 0) {
#line 3465
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3466
    if (c->bm_bits <= e) {
#line 3467
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3468
      return (-5);
    } else {

    }
#line 3470
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3473
  if (have < bits) {
#line 3474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3478
    return (-5);
  } else {

  }
#line 3480
  look_ahead = look_ahead >> bits;
#line 3481
  have = have - bits;
#line 3483
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3484
  if (bits < 0) {
#line 3485
    return (-5);
  } else {

  }
#line 3486
  look_ahead = (tmp << have) | look_ahead;
#line 3487
  have = have + bits;
#line 3459
  s = (unsigned long )((unsigned long long )s + rl);
#line 3459
  toggle = toggle == 0;
  ldv_51822: ;
#line 3459
  if (have > 0) {
#line 3460
    goto ldv_51821;
  } else {

  }
#line 3490
  c->bit_offset = s;
#line 3491
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3493
  return (c->bm_bits != s);
}
}
#line 3503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3507
  tmp___0 = DCBP_get_code(p);
#line 3507
  if ((unsigned int )tmp___0 == 2U) {
#line 3508
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3508
    return (tmp);
  } else {

  }
#line 3514
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3515
  val.i = 0U;
#line 3515
  val.ldv_38985.conn = 6U;
#line 3515
  mask.i = 0U;
#line 3515
  mask.ldv_38985.conn = 31U;
#line 3515
  drbd_force_state(mdev, mask, val);
#line 3516
  return (-5);
}
}
#line 3519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3523
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3526
  total = c->bytes[0] + c->bytes[1];
#line 3530
  if (total == 0U) {
#line 3531
    return;
  } else {

  }
#line 3534
  if (total >= plain) {
#line 3535
    return;
  } else {

  }
#line 3538
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3541
  if (r > 1000U) {
#line 3542
    r = 1000U;
  } else {

  }
#line 3544
  r = 1000U - r;
#line 3545
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3546
  return;
}
}
#line 3561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3566
  ok = 0;
#line 3567
  h = & mdev->data.rbuf.header.h80;
#line 3569
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_DONT_CLEAR);
#line 3575
  tmp = __get_free_pages(16U, 0U);
#line 3575
  buffer = (void *)tmp;
#line 3576
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3577
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3578
    goto out;
  } else {

  }
#line 3581
  tmp___0 = drbd_bm_bits(mdev);
#line 3581
  tmp___1 = drbd_bm_words(mdev);
#line 3581
  __constr_expr_0.bm_bits = tmp___0;
#line 3581
  __constr_expr_0.bm_words = tmp___1;
#line 3581
  __constr_expr_0.bit_offset = 0UL;
#line 3581
  __constr_expr_0.word_offset = 0UL;
#line 3581
  __constr_expr_0.packets[0] = 0U;
#line 3581
  __constr_expr_0.packets[1] = 0U;
#line 3581
  __constr_expr_0.bytes[0] = 0U;
#line 3581
  __constr_expr_0.bytes[1] = 0U;
#line 3581
  c = __constr_expr_0;
  ldv_51859: ;
#line 3587
  if ((unsigned int )cmd == 4U) {
#line 3588
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3589
  if ((unsigned int )cmd == 36U) {
#line 3594
    if (data_size > 4088U) {
#line 3595
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3596
      goto out;
    } else {

    }
#line 3599
    p = (struct p_compressed_bm *)buffer;
#line 3600
    __len = 8UL;
#line 3600
    if (__len > 63UL) {
#line 3600
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3600
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3601
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3601
    if ((unsigned int )tmp___2 != data_size) {
#line 3602
      goto out;
    } else {

    }
#line 3603
    if (data_size <= 1U) {
#line 3604
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3605
      goto out;
    } else {

    }
#line 3607
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3609
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3610
    goto out;
  }
#line 3613
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3614
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3616
  if (err <= 0) {
#line 3617
    if (err < 0) {
#line 3618
      goto out;
    } else {

    }
#line 3619
    goto ldv_51858;
  } else {

  }
#line 3621
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3621
  if (tmp___3 == 0) {
#line 3622
    goto out;
  } else {

  }
#line 3623
  goto ldv_51859;
  ldv_51858: 
#line 3625
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3627
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3630
    tmp___4 = drbd_send_bitmap(mdev);
#line 3630
    ok = tmp___4 == 0;
#line 3631
    if (ok == 0) {
#line 3632
      goto out;
    } else {

    }
#line 3634
    val.i = 0U;
#line 3634
    val.ldv_38985.conn = 15U;
#line 3634
    mask.i = 0U;
#line 3634
    mask.ldv_38985.conn = 31U;
#line 3634
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3635
    if ((int )rv != 1) {
#line 3635
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3635);
    } else {

    }
  } else
#line 3636
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3639
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38985.conn);
#line 3639
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3643
  ok = 1;
  out: 
#line 3645
  drbd_bm_unlock(mdev);
#line 3646
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3647
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3648
  free_pages((unsigned long )buffer, 0U);
#line 3649
  return (ok);
}
}
#line 3652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3658
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3661
  size = (int )data_size;
#line 3662
  goto ldv_51882;
  ldv_51881: 
#line 3663
  __min1 = size;
#line 3663
  __min2 = 128;
#line 3663
  want = __min1 < __min2 ? __min1 : __min2;
#line 3664
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3665
  _b = r <= 0;
#line 3665
  if (_b != 0) {
#line 3665
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3665);
  } else {

  }
#line 3665
  if (_b != 0) {
#line 3665
    goto ldv_51880;
  } else {

  }
#line 3666
  size = size - r;
  ldv_51882: ;
#line 3662
  if (size > 0) {
#line 3663
    goto ldv_51881;
  } else {

  }
  ldv_51880: ;
#line 3668
  return (size == 0);
}
}
#line 3671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3675
  drbd_tcp_quickack(mdev->data.socket);
#line 3677
  return (1);
}
}
#line 3680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3682
  p = & mdev->data.rbuf.block_desc;
#line 3684
  switch ((int )mdev->state.ldv_38985.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3688
  goto ldv_51897;
  default: 
#line 3690
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38985.conn);
#line 3690
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_51897: 
#line 3694
  tmp___0 = __fswab32(p->blksize);
#line 3694
  tmp___1 = __fswab64(p->sector);
#line 3694
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3694U);
#line 3696
  return (1);
}
}
#line 3707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3707
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3744
  header = & mdev->data.rbuf.header;
#line 3750
  goto ldv_51918;
  ldv_51917: 
#line 3751
  drbd_thread_current_set_cpu(mdev);
#line 3752
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3752
  if (tmp == 0) {
#line 3753
    goto err_out;
  } else {

  }
#line 3755
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3755
  if (tmp___0 != 0L) {
#line 3756
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3757
    goto err_out;
  } else {
#line 3755
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3755
    if (tmp___1 != 0L) {
#line 3756
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3757
      goto err_out;
    } else {

    }
  }
#line 3760
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3761
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3762
    tmp___2 = cmdname(cmd);
#line 3762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3763
    goto err_out;
  } else {

  }
#line 3766
  if (shs != 0UL) {
#line 3767
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3768
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3768
    if (tmp___5 != 0L) {
#line 3769
      tmp___3 = get_current();
#line 3769
      tmp___4 = signal_pending(tmp___3);
#line 3769
      if (tmp___4 == 0) {
#line 3770
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3771
      goto err_out;
    } else {

    }
  } else {

  }
#line 3775
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3777
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3777
  if (tmp___7 != 0L) {
#line 3778
    tmp___6 = cmdname(cmd);
#line 3778
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3780
    goto err_out;
  } else {

  }
  ldv_51918: 
#line 3750
  tmp___8 = get_t_state(& mdev->receiver);
#line 3750
  if ((unsigned int )tmp___8 == 1U) {
#line 3751
    goto ldv_51917;
  } else {

  }

#line 3784
  if (0) {
    err_out: 
#line 3786
    val.i = 0U;
#line 3786
    val.ldv_38985.conn = 6U;
#line 3786
    mask.i = 0U;
#line 3786
    mask.ldv_38985.conn = 31U;
#line 3786
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3790
  drbd_md_sync(mdev);
#line 3791
  return;
}
}
#line 3793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3797
  barr.w.cb = & w_prev_work_done;
#line 3798
  init_completion(& barr.done);
#line 3799
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3800
  wait_for_completion(& barr.done);
#line 3801
  return;
}
}
#line 3803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3807
  spin_lock_irq(& mdev->req_lock);
#line 3809
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3810
    spin_unlock_irq(& mdev->req_lock);
#line 3811
    return;
  } else {

  }
#line 3814
  h = mdev->ee_hash;
#line 3814
  goto ldv_51933;
  ldv_51932: ;
#line 3815
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3816
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3814
  h = h + 1;
  ldv_51933: ;
#line 3814
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3815
    goto ldv_51932;
  } else {

  }
#line 3818
  kfree((void const   *)mdev->ee_hash);
#line 3819
  mdev->ee_hash = 0;
#line 3820
  mdev->ee_hash_s = 0U;
#line 3823
  h = mdev->tl_hash;
#line 3823
  goto ldv_51936;
  ldv_51935: ;
#line 3824
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3823
  h = h + 1;
  ldv_51936: ;
#line 3823
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3824
    goto ldv_51935;
  } else {

  }
#line 3827
  kfree((void const   *)mdev->tl_hash);
#line 3828
  mdev->tl_hash = 0;
#line 3829
  mdev->tl_hash_s = 0U;
#line 3830
  spin_unlock_irq(& mdev->req_lock);
#line 3831
  return;
}
}
#line 3833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3837
  rv = 0;
#line 3840
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3841
    return;
  } else {

  }
#line 3844
  drbd_thread_stop(& mdev->asender);
#line 3845
  drbd_free_sock(mdev);
#line 3848
  spin_lock_irq(& mdev->req_lock);
#line 3849
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3850
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3851
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3852
  spin_unlock_irq(& mdev->req_lock);
#line 3864
  drbd_rs_cancel_all(mdev);
#line 3865
  mdev->rs_total = 0UL;
#line 3866
  mdev->rs_failed = 0UL;
#line 3867
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3868
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3870
  del_timer(& mdev->request_timer);
#line 3873
  del_timer_sync(& mdev->resync_timer);
#line 3874
  resync_timer_fn((unsigned long )mdev);
#line 3879
  drbd_flush_workqueue(mdev);
#line 3883
  drbd_process_done_ee(mdev);
#line 3885
  kfree((void const   *)mdev->p_uuid);
#line 3886
  mdev->p_uuid = 0;
#line 3888
  tmp = is_susp(mdev->state);
#line 3888
  if (tmp == 0) {
#line 3889
    tl_clear(mdev);
  } else {

  }
#line 3891
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3893
  drbd_md_sync(mdev);
#line 3895
  fp = FP_DONT_CARE;
#line 3896
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3896
  if (tmp___0 != 0) {
#line 3897
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3898
    put_ldev(mdev);
  } else {

  }
#line 3901
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_38985.pdsk > 5) {
#line 3902
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3904
  spin_lock_irq(& mdev->req_lock);
#line 3905
  os = mdev->state;
#line 3906
  if ((int )os.ldv_38985.conn > 1) {
#line 3908
    ns = os;
#line 3909
    ns.ldv_38985.conn = 2U;
#line 3910
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3910
    rv = (int )tmp___1;
  } else {

  }
#line 3912
  spin_unlock_irq(& mdev->req_lock);
#line 3914
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3915
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3915
    if (tmp___2 == 0) {
#line 3915
      goto ldv_51946;
    } else {

    }
#line 3915
    tmp___3 = get_current();
#line 3915
    __wait.flags = 0U;
#line 3915
    __wait.private = (void *)tmp___3;
#line 3915
    __wait.func = & autoremove_wake_function;
#line 3915
    __wait.task_list.next = & __wait.task_list;
#line 3915
    __wait.task_list.prev = & __wait.task_list;
    ldv_51949: 
#line 3915
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3915
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3915
    if (tmp___4 == 0) {
#line 3915
      goto ldv_51948;
    } else {

    }
#line 3915
    schedule();
#line 3915
    goto ldv_51949;
    ldv_51948: 
#line 3915
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_51946: 
#line 3917
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3918
    mdev->cram_hmac_tfm = 0;
#line 3920
    kfree((void const   *)mdev->net_conf);
#line 3921
    mdev->net_conf = 0;
#line 3922
    val.i = 0U;
#line 3922
    val.ldv_38985.conn = 0U;
#line 3922
    mask.i = 0U;
#line 3922
    mask.ldv_38985.conn = 31U;
#line 3922
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3927
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3927
  if (tmp___5 == 0) {
#line 3927
    goto ldv_51954;
  } else {

  }
#line 3927
  tmp___6 = get_current();
#line 3927
  __wait___0.flags = 0U;
#line 3927
  __wait___0.private = (void *)tmp___6;
#line 3927
  __wait___0.func = & autoremove_wake_function;
#line 3927
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3927
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51957: 
#line 3927
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3927
  tmp___7 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3927
  if (tmp___7 == 0) {
#line 3927
    goto ldv_51956;
  } else {

  }
#line 3927
  schedule();
#line 3927
  goto ldv_51957;
  ldv_51956: 
#line 3927
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_51954: 
#line 3936
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3936
  i = (unsigned int )tmp___8;
#line 3937
  if (i != 0U) {
#line 3938
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3939
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3939
  i = (unsigned int )tmp___9;
#line 3940
  if (i != 0U) {
#line 3941
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3942
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3942
  i = (unsigned int )tmp___10;
#line 3943
  if (i != 0U) {
#line 3944
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3946
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3946
  if (tmp___11 == 0) {
#line 3946
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3946);
  } else {

  }
#line 3947
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3947
  if (tmp___12 == 0) {
#line 3947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3947);
  } else {

  }
#line 3948
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3948
  if (tmp___13 == 0) {
#line 3948
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3948);
  } else {

  }
#line 3949
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3949
  if (tmp___14 == 0) {
#line 3949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3949);
  } else {

  }
#line 3952
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3953
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3953
  if (tmp___15 == 0) {
#line 3953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3953);
  } else {

  }
#line 3954
  return;
}
}
#line 3965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3968
  p = & mdev->data.sbuf.handshake;
#line 3971
  tmp = ldv_mutex_lock_interruptible_75(& mdev->data.mutex);
#line 3971
  if (tmp != 0) {
#line 3972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3973
    return (0);
  } else {

  }
#line 3976
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3977
    ldv_mutex_unlock_76(& mdev->data.mutex);
#line 3978
    return (0);
  } else {

  }
#line 3981
  memset((void *)p, 0, 80UL);
#line 3982
  p->protocol_min = 1442840576U;
#line 3983
  p->protocol_max = 1610612736U;
#line 3984
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3986
  ldv_mutex_unlock_77(& mdev->data.mutex);
#line 3987
  return (ok);
}
}
#line 3997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4000
  p = & mdev->data.rbuf.handshake;
#line 4001
  expect = 72;
#line 4006
  rv = drbd_send_handshake(mdev);
#line 4007
  if (rv == 0) {
#line 4008
    return (0);
  } else {

  }
#line 4010
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4011
  if (rv == 0) {
#line 4012
    return (0);
  } else {

  }
#line 4014
  if ((unsigned int )cmd != 65534U) {
#line 4015
    tmp = cmdname(cmd);
#line 4015
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4017
    return (-1);
  } else {

  }
#line 4020
  if ((unsigned int )expect != length) {
#line 4021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4023
    return (-1);
  } else {

  }
#line 4026
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4028
  if (rv != expect) {
#line 4029
    tmp___0 = get_current();
#line 4029
    tmp___1 = signal_pending(tmp___0);
#line 4029
    if (tmp___1 == 0) {
#line 4030
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4031
    return (0);
  } else {

  }
#line 4034
  tmp___2 = __fswab32(p->protocol_min);
#line 4034
  p->protocol_min = tmp___2;
#line 4035
  tmp___3 = __fswab32(p->protocol_max);
#line 4035
  p->protocol_max = tmp___3;
#line 4036
  if (p->protocol_max == 0U) {
#line 4037
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4039
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 4041
    goto incompat;
  } else {

  }
#line 4043
  __min1 = 96;
#line 4043
  __min2 = (int )p->protocol_max;
#line 4043
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4045
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4048
  return (1);
  incompat: 
#line 4051
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4055
  return (-1);
}
}
#line 4074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4078
  response = 0;
#line 4079
  right_response = 0;
#line 4080
  peers_ch = 0;
#line 4081
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4081
  key_len = (unsigned int )tmp;
#line 4088
  desc.tfm = mdev->cram_hmac_tfm;
#line 4089
  desc.flags = 0U;
#line 4091
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4093
  if (rv != 0) {
#line 4094
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4095
    rv = -1;
#line 4096
    goto fail;
  } else {

  }
#line 4099
  get_random_bytes((void *)(& my_challenge), 64);
#line 4101
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4102
  if (rv == 0) {
#line 4103
    goto fail;
  } else {

  }
#line 4105
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4106
  if (rv == 0) {
#line 4107
    goto fail;
  } else {

  }
#line 4109
  if ((unsigned int )cmd != 16U) {
#line 4110
    tmp___0 = cmdname(cmd);
#line 4110
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4112
    rv = 0;
#line 4113
    goto fail;
  } else {

  }
#line 4116
  if (length > 128U) {
#line 4117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4118
    rv = -1;
#line 4119
    goto fail;
  } else {

  }
#line 4122
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4122
  peers_ch = (char *)tmp___1;
#line 4123
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4125
    rv = -1;
#line 4126
    goto fail;
  } else {

  }
#line 4129
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4131
  if ((unsigned int )rv != length) {
#line 4132
    tmp___2 = get_current();
#line 4132
    tmp___3 = signal_pending(tmp___2);
#line 4132
    if (tmp___3 == 0) {
#line 4133
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4134
    rv = 0;
#line 4135
    goto fail;
  } else {

  }
#line 4138
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4139
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4139
  response = (char *)tmp___4;
#line 4140
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4141
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4142
    rv = -1;
#line 4143
    goto fail;
  } else {

  }
#line 4146
  sg_init_table(& sg, 1U);
#line 4147
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4149
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4150
  if (rv != 0) {
#line 4151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4152
    rv = -1;
#line 4153
    goto fail;
  } else {

  }
#line 4156
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4157
  if (rv == 0) {
#line 4158
    goto fail;
  } else {

  }
#line 4160
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4161
  if (rv == 0) {
#line 4162
    goto fail;
  } else {

  }
#line 4164
  if ((unsigned int )cmd != 17U) {
#line 4165
    tmp___5 = cmdname(cmd);
#line 4165
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4167
    rv = 0;
#line 4168
    goto fail;
  } else {

  }
#line 4171
  if (length != resp_size) {
#line 4172
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4173
    rv = 0;
#line 4174
    goto fail;
  } else {

  }
#line 4177
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4179
  if ((unsigned int )rv != resp_size) {
#line 4180
    tmp___6 = get_current();
#line 4180
    tmp___7 = signal_pending(tmp___6);
#line 4180
    if (tmp___7 == 0) {
#line 4181
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4182
    rv = 0;
#line 4183
    goto fail;
  } else {

  }
#line 4186
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4186
  right_response = (char *)tmp___8;
#line 4187
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4188
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4189
    rv = -1;
#line 4190
    goto fail;
  } else {

  }
#line 4193
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4195
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4196
  if (rv != 0) {
#line 4197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4198
    rv = -1;
#line 4199
    goto fail;
  } else {

  }
#line 4202
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4202
  rv = tmp___9 == 0;
#line 4204
  if (rv != 0) {
#line 4205
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4208
    rv = -1;
  }
  fail: 
#line 4211
  kfree((void const   *)peers_ch);
#line 4212
  kfree((void const   *)response);
#line 4213
  kfree((void const   *)right_response);
#line 4215
  return (rv);
}
}
#line 4219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4221
  mdev = thi->mdev;
#line 4222
  tmp = mdev_to_minor(mdev);
#line 4222
  minor = tmp;
#line 4225
  tmp___0 = get_current();
#line 4225
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4227
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_52000: 
#line 4230
  h = drbd_connect(mdev);
#line 4231
  if (h == 0) {
#line 4232
    drbd_disconnect(mdev);
#line 4233
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4235
  if (h == -1) {
#line 4236
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4237
    val.i = 0U;
#line 4237
    val.ldv_38985.conn = 1U;
#line 4237
    mask.i = 0U;
#line 4237
    mask.ldv_38985.conn = 31U;
#line 4237
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4239
  if (h == 0) {
#line 4240
    goto ldv_52000;
  } else {

  }

#line 4241
  if (h > 0) {
#line 4242
    tmp___1 = get_net_conf(mdev);
#line 4242
    if (tmp___1 != 0) {
#line 4243
      drbdd(mdev);
#line 4244
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4248
  drbd_disconnect(mdev);
#line 4250
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4251
  return (0);
}
}
#line 4256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4258
  p = (struct p_req_state_reply *)h;
#line 4260
  tmp = __fswab32(p->retcode);
#line 4260
  retcode = (int )tmp;
#line 4262
  if (retcode > 0) {
#line 4263
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4265
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4266
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4269
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4271
  return (1);
}
}
#line 4274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4276
  tmp = drbd_send_ping_ack(mdev);
#line 4276
  return (tmp);
}
}
#line 4280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4283
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4284
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4284
  if (tmp == 0) {
#line 4285
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4287
  return (1);
}
}
#line 4290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4292
  p = (struct p_block_ack *)h;
#line 4293
  tmp = __fswab64(p->sector);
#line 4293
  sector = (sector_t )tmp;
#line 4294
  tmp___0 = __fswab32(p->blksize);
#line 4294
  blksize = (int )tmp___0;
#line 4296
  if (mdev->agreed_pro_version <= 88) {
#line 4296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4296);
  } else {

  }
#line 4298
  tmp___1 = __fswab32(p->seq_num);
#line 4298
  update_peer_seq(mdev, tmp___1);
#line 4300
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4300
  if (tmp___2 != 0) {
#line 4301
    drbd_rs_complete_io(mdev, sector);
#line 4302
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4302U);
#line 4304
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4305
    put_ldev(mdev);
  } else {

  }
#line 4307
  atomic_dec(& mdev->rs_pending_cnt);
#line 4307
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4307
  if (tmp___4 < 0) {
#line 4307
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4307
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4307, tmp___3);
  } else {

  }
#line 4308
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4310
  return (1);
}
}
#line 4315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4318
  tmp = tl_hash_slot(mdev, sector);
#line 4318
  slot = tmp;
#line 4322
  n = slot->first;
#line 4322
  goto ldv_52040;
  ldv_52039: ;
#line 4323
  if ((unsigned long )req == (unsigned long )id) {
#line 4324
    if (req->sector != sector) {
#line 4325
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4329
      goto ldv_52038;
    } else {

    }
#line 4331
    return (req);
  } else {

  }
#line 4322
  n = n->next;
  ldv_52040: ;
#line 4322
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4322
    __mptr = (struct hlist_node  const  *)n;
#line 4322
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4322
    if (1 != 0) {
#line 4323
      goto ldv_52039;
    } else {
#line 4325
      goto ldv_52038;
    }
  } else {

  }
  ldv_52038: ;
#line 4334
  return (0);
}
}
#line 4340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4347
  spin_lock_irq(& mdev->req_lock);
#line 4348
  req = (*validator)(mdev, id, sector);
#line 4349
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4349
  if (tmp != 0L) {
#line 4350
    spin_unlock_irq(& mdev->req_lock);
#line 4352
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4354
    return (0);
  } else {

  }
#line 4356
  __req_mod(req, what, & m);
#line 4357
  spin_unlock_irq(& mdev->req_lock);
#line 4359
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4360
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4361
  return (1);
}
}
#line 4364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4366
  p = (struct p_block_ack *)h;
#line 4367
  tmp = __fswab64(p->sector);
#line 4367
  sector = (sector_t )tmp;
#line 4368
  tmp___0 = __fswab32(p->blksize);
#line 4368
  blksize = (int )tmp___0;
#line 4371
  tmp___1 = __fswab32(p->seq_num);
#line 4371
  update_peer_seq(mdev, tmp___1);
#line 4373
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4374
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4374U);
#line 4375
    atomic_dec(& mdev->rs_pending_cnt);
#line 4375
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4375
    if (tmp___3 < 0) {
#line 4375
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4375
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4375, tmp___2);
    } else {

    }
#line 4376
    return (1);
  } else {

  }
#line 4378
  tmp___4 = __fswab16((int )h->command);
#line 4378
  switch ((int )tmp___4) {
  case 23: ;
#line 4380
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4380
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4380);
  } else {

  }
#line 4381
  what = write_acked_by_peer_and_sis;
#line 4382
  goto ldv_52068;
  case 22: ;
#line 4384
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4384);
  } else {

  }
#line 4385
  what = write_acked_by_peer;
#line 4386
  goto ldv_52068;
  case 21: ;
#line 4388
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4388
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4388);
  } else {

  }
#line 4389
  what = recv_acked_by_peer;
#line 4390
  goto ldv_52068;
  case 24: ;
#line 4392
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4392
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4392);
  } else {

  }
#line 4393
  what = conflict_discarded_by_peer;
#line 4394
  goto ldv_52068;
  default: 
#line 4396
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4396);
#line 4397
  return (0);
  }
  ldv_52068: 
#line 4400
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4400
  return (tmp___5);
}
}
#line 4404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4406
  p = (struct p_block_ack *)h;
#line 4407
  tmp = __fswab64(p->sector);
#line 4407
  sector = (sector_t )tmp;
#line 4408
  tmp___0 = __fswab32(p->blksize);
#line 4408
  size = (int )tmp___0;
#line 4412
  tmp___1 = __fswab32(p->seq_num);
#line 4412
  update_peer_seq(mdev, tmp___1);
#line 4414
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4415
    atomic_dec(& mdev->rs_pending_cnt);
#line 4415
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4415
    if (tmp___3 < 0) {
#line 4415
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4415
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4415, tmp___2);
    } else {

    }
#line 4416
    drbd_rs_failed_io(mdev, sector, size);
#line 4417
    return (1);
  } else {

  }
#line 4420
  spin_lock_irq(& mdev->req_lock);
#line 4421
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4422
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4423
    spin_unlock_irq(& mdev->req_lock);
#line 4424
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4432
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4432U);
#line 4433
      return (1);
    } else {
#line 4435
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4437
      return (0);
    }
  } else {

  }
#line 4440
  __req_mod(req, neg_acked, & m);
#line 4441
  spin_unlock_irq(& mdev->req_lock);
#line 4443
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4444
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4445
  return (1);
}
}
#line 4448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4450
  p = (struct p_block_ack *)h;
#line 4451
  tmp = __fswab64(p->sector);
#line 4451
  sector = (sector_t )tmp;
#line 4453
  tmp___0 = __fswab32(p->seq_num);
#line 4453
  update_peer_seq(mdev, tmp___0);
#line 4454
  tmp___1 = __fswab32(p->blksize);
#line 4454
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4457
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4457
  return (tmp___2);
}
}
#line 4461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4465
  p = (struct p_block_ack *)h;
#line 4467
  tmp = __fswab64(p->sector);
#line 4467
  sector = (sector_t )tmp;
#line 4468
  tmp___0 = __fswab32(p->blksize);
#line 4468
  size = (int )tmp___0;
#line 4470
  tmp___1 = __fswab32(p->seq_num);
#line 4470
  update_peer_seq(mdev, tmp___1);
#line 4472
  atomic_dec(& mdev->rs_pending_cnt);
#line 4472
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4472
  if (tmp___3 < 0) {
#line 4472
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4472
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4472, tmp___2);
  } else {

  }
#line 4474
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4474
  if (tmp___5 != 0) {
#line 4475
    drbd_rs_complete_io(mdev, sector);
#line 4476
    tmp___4 = __fswab16((int )h->command);
#line 4476
    switch ((int )tmp___4) {
    case 27: 
#line 4478
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4480
    goto ldv_52106;
    default: 
#line 4482
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4482);
#line 4483
    put_ldev(mdev);
#line 4484
    return (0);
    }
    ldv_52106: 
#line 4486
    put_ldev(mdev);
  } else {

  }
#line 4489
  return (1);
}
}
#line 4492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4494
  p = (struct p_barrier_ack *)h;
#line 4496
  tmp = __fswab32(p->set_size);
#line 4496
  tl_release(mdev, p->barrier, tmp);
#line 4498
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4498
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4498
    if (tmp___0 == 0) {
#line 4498
      tmp___1 = test_and_set_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 4498
      if (tmp___1 == 0) {
#line 4501
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4502
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4505
  return (1);
}
}
#line 4508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4510
  p = (struct p_block_ack *)h;
#line 4515
  tmp = __fswab64(p->sector);
#line 4515
  sector = (sector_t )tmp;
#line 4516
  tmp___0 = __fswab32(p->blksize);
#line 4516
  size = (int )tmp___0;
#line 4518
  tmp___1 = __fswab32(p->seq_num);
#line 4518
  update_peer_seq(mdev, tmp___1);
#line 4520
  tmp___2 = __fswab64(p->block_id);
#line 4520
  if (tmp___2 == 4712ULL) {
#line 4521
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4523
    ov_oos_print(mdev);
  }
#line 4525
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4525
  if (tmp___3 == 0) {
#line 4526
    return (1);
  } else {

  }
#line 4528
  drbd_rs_complete_io(mdev, sector);
#line 4529
  atomic_dec(& mdev->rs_pending_cnt);
#line 4529
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4529
  if (tmp___5 < 0) {
#line 4529
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4529
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4529, tmp___4);
  } else {

  }
#line 4531
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4534
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4535
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4537
  if (mdev->ov_left == 0UL) {
#line 4538
    tmp___6 = kmalloc(24UL, 16U);
#line 4538
    w = (struct drbd_work *)tmp___6;
#line 4539
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4540
      w->cb = & w_ov_finished;
#line 4541
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4543
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4544
      ov_oos_print(mdev);
#line 4545
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4548
  put_ldev(mdev);
#line 4549
  return (1);
}
}
#line 4552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4554
  return (1);
}
}
#line 4562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4564
  asender_tbl[0].pkt_size = 0UL;
#line 4564
  asender_tbl[0].process = 0;
#line 4564
  asender_tbl[1].pkt_size = 0UL;
#line 4564
  asender_tbl[1].process = 0;
#line 4564
  asender_tbl[2].pkt_size = 0UL;
#line 4564
  asender_tbl[2].process = 0;
#line 4564
  asender_tbl[3].pkt_size = 0UL;
#line 4564
  asender_tbl[3].process = 0;
#line 4564
  asender_tbl[4].pkt_size = 0UL;
#line 4564
  asender_tbl[4].process = 0;
#line 4564
  asender_tbl[5].pkt_size = 0UL;
#line 4564
  asender_tbl[5].process = 0;
#line 4564
  asender_tbl[6].pkt_size = 0UL;
#line 4564
  asender_tbl[6].process = 0;
#line 4564
  asender_tbl[7].pkt_size = 0UL;
#line 4564
  asender_tbl[7].process = 0;
#line 4564
  asender_tbl[8].pkt_size = 0UL;
#line 4564
  asender_tbl[8].process = 0;
#line 4564
  asender_tbl[9].pkt_size = 0UL;
#line 4564
  asender_tbl[9].process = 0;
#line 4564
  asender_tbl[10].pkt_size = 0UL;
#line 4564
  asender_tbl[10].process = 0;
#line 4564
  asender_tbl[11].pkt_size = 0UL;
#line 4564
  asender_tbl[11].process = 0;
#line 4564
  asender_tbl[12].pkt_size = 0UL;
#line 4564
  asender_tbl[12].process = 0;
#line 4564
  asender_tbl[13].pkt_size = 0UL;
#line 4564
  asender_tbl[13].process = 0;
#line 4564
  asender_tbl[14].pkt_size = 0UL;
#line 4564
  asender_tbl[14].process = 0;
#line 4564
  asender_tbl[15].pkt_size = 0UL;
#line 4564
  asender_tbl[15].process = 0;
#line 4564
  asender_tbl[16].pkt_size = 0UL;
#line 4564
  asender_tbl[16].process = 0;
#line 4564
  asender_tbl[17].pkt_size = 0UL;
#line 4564
  asender_tbl[17].process = 0;
#line 4564
  asender_tbl[18].pkt_size = 0UL;
#line 4564
  asender_tbl[18].process = 0;
#line 4564
  asender_tbl[19].pkt_size = 8UL;
#line 4564
  asender_tbl[19].process = & got_Ping;
#line 4564
  asender_tbl[20].pkt_size = 8UL;
#line 4564
  asender_tbl[20].process = & got_PingAck;
#line 4564
  asender_tbl[21].pkt_size = 32UL;
#line 4564
  asender_tbl[21].process = & got_BlockAck;
#line 4564
  asender_tbl[22].pkt_size = 32UL;
#line 4564
  asender_tbl[22].process = & got_BlockAck;
#line 4564
  asender_tbl[23].pkt_size = 32UL;
#line 4564
  asender_tbl[23].process = & got_BlockAck;
#line 4564
  asender_tbl[24].pkt_size = 32UL;
#line 4564
  asender_tbl[24].process = & got_BlockAck;
#line 4564
  asender_tbl[25].pkt_size = 32UL;
#line 4564
  asender_tbl[25].process = & got_NegAck;
#line 4564
  asender_tbl[26].pkt_size = 32UL;
#line 4564
  asender_tbl[26].process = & got_NegDReply;
#line 4564
  asender_tbl[27].pkt_size = 32UL;
#line 4564
  asender_tbl[27].process = & got_NegRSDReply;
#line 4564
  asender_tbl[28].pkt_size = 16UL;
#line 4564
  asender_tbl[28].process = & got_BarrierAck;
#line 4564
  asender_tbl[29].pkt_size = 12UL;
#line 4564
  asender_tbl[29].process = & got_RqSReply;
#line 4564
  asender_tbl[30].pkt_size = 0UL;
#line 4564
  asender_tbl[30].process = 0;
#line 4564
  asender_tbl[31].pkt_size = 0UL;
#line 4564
  asender_tbl[31].process = 0;
#line 4564
  asender_tbl[32].pkt_size = 32UL;
#line 4564
  asender_tbl[32].process = & got_OVResult;
#line 4564
  asender_tbl[33].pkt_size = 0UL;
#line 4564
  asender_tbl[33].process = 0;
#line 4564
  asender_tbl[34].pkt_size = 32UL;
#line 4564
  asender_tbl[34].process = & got_IsInSync;
#line 4564
  asender_tbl[35].pkt_size = 0UL;
#line 4564
  asender_tbl[35].process = 0;
#line 4564
  asender_tbl[36].pkt_size = 0UL;
#line 4564
  asender_tbl[36].process = 0;
#line 4564
  asender_tbl[37].pkt_size = 0UL;
#line 4564
  asender_tbl[37].process = 0;
#line 4564
  asender_tbl[38].pkt_size = 0UL;
#line 4564
  asender_tbl[38].process = 0;
#line 4564
  asender_tbl[39].pkt_size = 16UL;
#line 4564
  asender_tbl[39].process = & got_skip;
#line 4564
  asender_tbl[40].pkt_size = 0UL;
#line 4564
  asender_tbl[40].process = 0;
#line 4564
  asender_tbl[41].pkt_size = 32UL;
#line 4564
  asender_tbl[41].process = & got_NegRSDReply;
#line 4564
  asender_tbl[42].pkt_size = 0UL;
#line 4564
  asender_tbl[42].process = 0;
#line 4585
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4586
    return (0);
  } else {

  }
#line 4587
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4592
  mdev = thi->mdev;
#line 4593
  h = & mdev->meta.rbuf.header.h80;
#line 4594
  cmd = 0;
#line 4597
  buf = (void *)h;
#line 4598
  received = 0;
#line 4599
  expect = 8;
#line 4601
  ping_timeout_active = 0;
#line 4603
  tmp = mdev_to_minor(mdev);
#line 4603
  tmp___0 = get_current();
#line 4603
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4605
  tmp___1 = get_current();
#line 4605
  tmp___1->policy = 2U;
#line 4606
  tmp___2 = get_current();
#line 4606
  tmp___2->rt_priority = 2U;
#line 4608
  goto ldv_52157;
  ldv_52167: 
#line 4609
  drbd_thread_current_set_cpu(mdev);
#line 4610
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4610
  if (tmp___4 != 0) {
#line 4611
    tmp___3 = drbd_send_ping(mdev);
#line 4611
    _b = tmp___3 == 0;
#line 4611
    if (_b != 0) {
#line 4611
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4611);
    } else {

    }
#line 4611
    if (_b != 0) {
#line 4611
      goto reconnect;
    } else {

    }
#line 4612
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4614
    ping_timeout_active = 1;
  } else {

  }
#line 4619
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4619
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4619
    if (tmp___5 > 3) {
#line 4621
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_52156: 
#line 4623
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4624
  tmp___6 = get_current();
#line 4624
  flush_signals(tmp___6);
#line 4625
  tmp___7 = drbd_process_done_ee(mdev);
#line 4625
  if (tmp___7 == 0) {
#line 4626
    goto reconnect;
  } else {

  }
#line 4628
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4629
  spin_lock_irq(& mdev->req_lock);
#line 4630
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4631
  spin_unlock_irq(& mdev->req_lock);
#line 4635
  if (empty != 0) {
#line 4636
    goto ldv_52155;
  } else {

  }
#line 4637
  goto ldv_52156;
  ldv_52155: ;
#line 4639
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4640
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4643
  tmp___8 = get_current();
#line 4643
  tmp___9 = signal_pending(tmp___8);
#line 4643
  if (tmp___9 != 0) {
#line 4644
    goto ldv_52157;
  } else {

  }
#line 4646
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4648
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4650
  tmp___10 = get_current();
#line 4650
  flush_signals(tmp___10);
#line 4662
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4662
  if (tmp___11 != 0L) {
#line 4663
    received = received + rv;
#line 4664
    buf = buf + (unsigned long )rv;
  } else
#line 4665
  if (rv == 0) {
#line 4666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4667
    goto reconnect;
  } else
#line 4668
  if (rv == -11) {
#line 4671
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4673
      goto ldv_52157;
    } else {

    }
#line 4674
    if (ping_timeout_active != 0) {
#line 4675
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4676
      goto reconnect;
    } else {

    }
#line 4678
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4679
    goto ldv_52157;
  } else
#line 4680
  if (rv == -4) {
#line 4681
    goto ldv_52157;
  } else {
#line 4683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4684
    goto reconnect;
  }
#line 4687
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4688
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4688
    if (tmp___15 != 0L) {
#line 4689
      tmp___12 = __fswab16((int )h->length);
#line 4689
      tmp___13 = __fswab16((int )h->command);
#line 4689
      tmp___14 = __fswab32(h->magic);
#line 4689
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4693
      goto reconnect;
    } else {

    }
#line 4695
    tmp___16 = __fswab16((int )h->command);
#line 4695
    cmd = get_asender_cmd((int )tmp___16);
#line 4696
    tmp___17 = __fswab16((int )h->length);
#line 4696
    len = (int )tmp___17;
#line 4697
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4697
    if (tmp___21 != 0L) {
#line 4698
      tmp___18 = __fswab16((int )h->length);
#line 4698
      tmp___19 = __fswab16((int )h->command);
#line 4698
      tmp___20 = __fswab32(h->magic);
#line 4698
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4702
      goto disconnect;
    } else {

    }
#line 4704
    expect = (int )cmd->pkt_size;
#line 4705
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4705
    if (_b___0 != 0) {
#line 4705
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4705);
    } else {

    }
#line 4705
    if (_b___0 != 0) {
#line 4706
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4708
  if (received == expect) {
#line 4709
    mdev->last_received = jiffies;
#line 4710
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4710
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4710);
    } else {

    }
#line 4711
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4711
    if (tmp___22 == 0) {
#line 4712
      goto reconnect;
    } else {

    }
#line 4716
    tmp___23 = get_asender_cmd(20);
#line 4716
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4717
      ping_timeout_active = 0;
    } else {

    }
#line 4719
    buf = (void *)h;
#line 4720
    received = 0;
#line 4721
    expect = 8;
#line 4722
    cmd = 0;
  } else {

  }
  ldv_52157: 
#line 4608
  tmp___24 = get_t_state(thi);
#line 4608
  if ((unsigned int )tmp___24 == 1U) {
#line 4609
    goto ldv_52167;
  } else {

  }

#line 4726
  if (0) {
    reconnect: 
#line 4728
    val.i = 0U;
#line 4728
    val.ldv_38985.conn = 5U;
#line 4728
    mask.i = 0U;
#line 4728
    mask.ldv_38985.conn = 31U;
#line 4728
    drbd_force_state(mdev, mask, val);
#line 4729
    drbd_md_sync(mdev);
  } else {

  }
#line 4731
  if (0) {
    disconnect: 
#line 4733
    val___0.i = 0U;
#line 4733
    val___0.ldv_38985.conn = 1U;
#line 4733
    mask___0.i = 0U;
#line 4733
    mask___0.ldv_38985.conn = 31U;
#line 4733
    drbd_force_state(mdev, mask___0, val___0);
#line 4734
    drbd_md_sync(mdev);
  } else {

  }
#line 4736
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4738
  if ((int )mdev->state.ldv_38985.conn > 9) {
#line 4738
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4738);
  } else {

  }
#line 4739
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4741
  return (0);
}
}
#line 4781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4793
  LDV_IN_INTERRUPT = 1;
#line 4802
  ldv_initialize();
#line 4804
  goto ldv_52196;
  ldv_52195: 
#line 4807
  tmp = nondet_int();
#line 4807
  switch (tmp) {
  default: ;
#line 4809
  goto ldv_52194;
  }
  ldv_52194: ;
  ldv_52196: 
#line 4804
  tmp___0 = nondet_int();
#line 4804
  if (tmp___0 != 0) {
#line 4805
    goto ldv_52195;
  } else {

  }


#line 4818
  ldv_check_final_state();
#line 4821
  return;
}
}
#line 4825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4830
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4832
  mutex_lock(ldv_func_arg1);
#line 4833
  return;
}
}
#line 4835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_68(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4840
  tmp = mutex_trylock(ldv_func_arg1);
#line 4840
  ldv_func_res = tmp;
#line 4842
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4842
  return (tmp___0);
#line 4844
  return (ldv_func_res);
}
}
#line 4847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4852
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4854
  mutex_unlock(ldv_func_arg1);
#line 4855
  return;
}
}
#line 4857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4862
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4864
  mutex_lock(ldv_func_arg1);
#line 4865
  return;
}
}
#line 4867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4872
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4874
  mutex_unlock(ldv_func_arg1);
#line 4875
  return;
}
}
#line 4877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4882
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4884
  mutex_lock(ldv_func_arg1);
#line 4885
  return;
}
}
#line 4887 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4892
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4894
  mutex_unlock(ldv_func_arg1);
#line 4895
  return;
}
}
#line 4897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4902
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4904
  mutex_unlock(ldv_func_arg1);
#line 4905
  return;
}
}
#line 4907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_75(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4912
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4912
  ldv_func_res = tmp;
#line 4914
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4914
  return (tmp___0);
#line 4916
  return (ldv_func_res);
}
}
#line 4919 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4924
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4926
  mutex_unlock(ldv_func_arg1);
#line 4927
  return;
}
}
#line 4929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4934
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4936
  mutex_unlock(ldv_func_arg1);
#line 4937
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 240 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 242
  tmp = rcu_is_cpu_idle();
#line 242
  __ret_warn_once = tmp != 0;
#line 242
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 242
  if (tmp___2 != 0L) {
#line 242
    __ret_warn_on = ! __warned;
#line 242
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 242
    if (tmp___0 != 0L) {
#line 242
      warn_slowpath_null("include/linux/rcupdate.h", 242);
    } else {

    }
#line 242
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 242
    if (tmp___1 != 0L) {
#line 242
      __warned = 1;
    } else {

    }
  } else {

  }
#line 242
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 243
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 245
  return;
}
}
#line 246 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 248
  tmp = rcu_is_cpu_idle();
#line 248
  __ret_warn_once = tmp != 0;
#line 248
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 248
  if (tmp___2 != 0L) {
#line 248
    __ret_warn_on = ! __warned;
#line 248
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 248
    if (tmp___0 != 0L) {
#line 248
      warn_slowpath_null("include/linux/rcupdate.h", 248);
    } else {

    }
#line 248
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 248
    if (tmp___1 != 0L) {
#line 248
      __warned = 1;
    } else {

    }
  } else {

  }
#line 248
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 249
  lock_release(map, 1, (unsigned long )((void *)0));
#line 251
  return;
}
}
#line 252
extern struct lockdep_map rcu_lock_map ;
#line 657 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 659
  rcu_read_lock_sched_notrace();
#line 661
  rcu_lock_acquire(& rcu_lock_map);
#line 662
  return;
}
}
#line 679 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 681
  rcu_lock_release(& rcu_lock_map);
#line 683
  rcu_read_unlock_sched_notrace();
#line 684
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 196 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 198
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 198
  if (tmp != 0L) {
#line 199
    if (part->partno != 0) {
#line 200
      __mptr = (struct device  const  *)part->__dev.parent;
#line 200
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 202
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 202
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 204
  return (0);
}
}
#line 374 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 376
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 377
  if (part->partno != 0) {
#line 378
    tmp = part_to_disk(part);
#line 378
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 379
  return;
}
}
#line 381 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 383
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 384
  if (part->partno != 0) {
#line 385
    tmp = part_to_disk(part);
#line 385
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 386
  return;
}
}
#line 407
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 208 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 209
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1222
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1493
mempool_t *drbd_request_mempool ;
#line 1509
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1511
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38985.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_49952;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38985.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38985.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_49952;
  }
  ldv_49952: ;
#line 1847
  return;
}
}
#line 2065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2067
  atomic_inc(& mdev->ap_pending_cnt);
#line 2068
  return;
}
}
#line 2245 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2247
  mxb = 1000000;
#line 2248
  tmp = get_net_conf(mdev);
#line 2248
  if (tmp != 0) {
#line 2249
    mxb = (mdev->net_conf)->max_buffers;
#line 2250
    put_net_conf(mdev);
  } else {

  }
#line 2252
  return (mxb);
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_38985.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_50124;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_50124;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_50124: ;
#line 2303
  switch ((unsigned int )s.ldv_38985.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_50134;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_50134: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2358
  rv = 0;
#line 2360
  spin_lock_irq(& mdev->req_lock);
#line 2361
  rv = may_inc_ap_bio(mdev);
#line 2362
  if ((int )rv) {
#line 2363
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2364
  spin_unlock_irq(& mdev->req_lock);
#line 2366
  return (rv);
}
}
#line 2369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2379
  tmp = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp) {
#line 2379
    goto ldv_50156;
  } else {

  }
#line 2379
  tmp___0 = get_current();
#line 2379
  __wait.flags = 0U;
#line 2379
  __wait.private = (void *)tmp___0;
#line 2379
  __wait.func = & autoremove_wake_function;
#line 2379
  __wait.task_list.next = & __wait.task_list;
#line 2379
  __wait.task_list.prev = & __wait.task_list;
  ldv_50159: 
#line 2379
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2379
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp___1) {
#line 2379
    goto ldv_50158;
  } else {

  }
#line 2379
  schedule();
#line 2379
  goto ldv_50159;
  ldv_50158: 
#line 2379
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50156: ;
#line 2382
  return;
}
}
#line 2382 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2384
  tmp = drbd_get_max_buffers(mdev);
#line 2384
  mxb = tmp;
#line 2385
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2385
  ap_bio = tmp___0;
#line 2387
  if (ap_bio < 0) {
#line 2387
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2387);
  } else {

  }
#line 2391
  if (ap_bio < mxb) {
#line 2392
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2393
  if (ap_bio == 0) {
#line 2393
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2393
    if (tmp___2 != 0) {
#line 2394
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2394
      if (tmp___1 == 0) {
#line 2395
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2396
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_50267: ;
#line 229
    goto ldv_50267;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_50272: ;
#line 238
    goto ldv_50272;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 283
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 283
  req = (struct drbd_request *)tmp;
#line 285
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 285
  if (tmp___0 != 0L) {
#line 286
    drbd_req_make_private_bio(req, bio_src);
#line 288
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 289
    req->mdev = mdev;
#line 290
    req->master_bio = bio_src;
#line 291
    req->epoch = 0U;
#line 292
    req->sector = bio_src->bi_sector;
#line 293
    req->size = bio_src->bi_size;
#line 294
    INIT_HLIST_NODE(& req->collision);
#line 295
    INIT_LIST_HEAD(& req->tl_requests);
#line 296
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 298
  return (req);
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 303
  mempool_free((void *)req, drbd_request_mempool);
#line 304
  return;
}
}
#line 319
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 325
void request_timer_fn(unsigned long data ) ;
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 368
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_38985.pdsk > 3 && (int )s.ldv_38985.conn > 13) && (int )s.ldv_38985.conn <= 21)));
}
}
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 378
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 100
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 102
  rcu_read_lock();
#line 102
  tmp = current_thread_info___0();
#line 102
  tmp->preempt_count = tmp->preempt_count + 1;
#line 102
  __asm__  volatile   ("": : : "memory");
#line 102
  switch (4UL) {
  case 1UL: 
#line 102
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50361;
  case 2UL: 
#line 102
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50361;
  case 4UL: 
#line 102
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50361;
  case 8UL: 
#line 102
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50361;
  default: 
#line 102
  __bad_percpu_size();
  }
  ldv_50361: 
#line 102
  cpu = pfo_ret__;
#line 103
  __vpp_verify = 0;
#line 103
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 103
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 103
  if ((mdev->vdisk)->part0.partno != 0) {
#line 103
    __vpp_verify___0 = 0;
#line 103
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 103
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 103
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 104
  __vpp_verify___1 = 0;
#line 104
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 104
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 104
  if ((mdev->vdisk)->part0.partno != 0) {
#line 104
    __vpp_verify___2 = 0;
#line 104
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 104
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 104
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 105
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 106
  __asm__  volatile   ("": : : "memory");
#line 106
  tmp___2 = current_thread_info___0();
#line 106
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 106
  __asm__  volatile   ("": : : "memory");
#line 106
  rcu_read_unlock();
#line 107
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 112
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 113
  duration = (unsigned long )jiffies - req->start_time;
#line 115
  rcu_read_lock();
#line 115
  tmp = current_thread_info___0();
#line 115
  tmp->preempt_count = tmp->preempt_count + 1;
#line 115
  __asm__  volatile   ("": : : "memory");
#line 115
  switch (4UL) {
  case 1UL: 
#line 115
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 115
  goto ldv_50394;
  case 2UL: 
#line 115
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 115
  goto ldv_50394;
  case 4UL: 
#line 115
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 115
  goto ldv_50394;
  case 8UL: 
#line 115
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 115
  goto ldv_50394;
  default: 
#line 115
  __bad_percpu_size();
  }
  ldv_50394: 
#line 115
  cpu = pfo_ret__;
#line 116
  __vpp_verify = 0;
#line 116
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 116
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 116
  if ((mdev->vdisk)->part0.partno != 0) {
#line 116
    __vpp_verify___0 = 0;
#line 116
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 116
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 116
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 117
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 118
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 119
  __asm__  volatile   ("": : : "memory");
#line 119
  tmp___1 = current_thread_info___0();
#line 119
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 119
  __asm__  volatile   ("": : : "memory");
#line 119
  rcu_read_unlock();
#line 120
  return;
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 124
  s = req->rq_state;
#line 132
  list_del(& req->tl_requests);
#line 137
  if ((int )rw == 1) {
#line 142
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 143
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             143U);
    } else {

    }
#line 145
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 146
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         146U);
    } else {

    }
#line 158
    if ((s & 7UL) != 0UL) {
#line 159
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 159
      if (tmp___0 != 0) {
#line 160
        if ((s & 2048UL) != 0UL) {
#line 161
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 162
        put_ldev(mdev);
      } else {
#line 163
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 163
        if (tmp != 0) {
#line 164
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 171
  drbd_req_free(req);
#line 172
  return;
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 183
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 183
  if (tmp != 0) {
#line 184
    return;
  } else {

  }
#line 186
  b = mdev->newest_tle;
#line 187
  b->w.cb = & w_send_barrier;
#line 192
  inc_ap_pending(mdev);
#line 193
  drbd_queue_work(& mdev->data.work, & b->w);
#line 194
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 195
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 200
  s = req->rq_state;
#line 212
  if (((int )mdev->state.ldv_38985.conn > 9 && (s & 32UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 215
    queue_barrier(mdev);
  } else {

  }
#line 220
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 221
    sector = req->sector;
#line 222
    size = (int const   )req->size;
#line 228
    slot = tl_hash_slot___0(mdev, sector);
#line 229
    n = slot->first;
#line 229
    goto ldv_50436;
    ldv_50435: 
#line 230
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 230
    if (tmp != 0) {
#line 231
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 229
    n = n->next;
    ldv_50436: ;
#line 229
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 229
      __mptr = (struct hlist_node  const  *)n;
#line 229
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 229
      if (1 != 0) {
#line 230
        goto ldv_50435;
      } else {
#line 232
        goto ldv_50437;
      }
    } else {

    }
    ldv_50437: 
#line 252
    slot = ee_hash_slot___0(mdev, req->sector);
#line 253
    n = slot->first;
#line 253
    goto ldv_50443;
    ldv_50442: 
#line 254
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 254
    if (tmp___0 != 0) {
#line 255
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 256
      goto ldv_50441;
    } else {

    }
#line 253
    n = n->next;
    ldv_50443: ;
#line 253
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 253
      __mptr___0 = (struct hlist_node  const  *)n;
#line 253
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 253
      if (1 != 0) {
#line 254
        goto ldv_50442;
      } else {
#line 256
        goto ldv_50441;
      }
    } else {

    }
    ldv_50441: ;
  } else {

  }
#line 259
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 266
  bio_endio(m->bio, m->error);
#line 267
  dec_ap_bio(mdev);
#line 268
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 278
  s = req->rq_state;
#line 279
  mdev = req->mdev;
#line 281
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 292
  if ((s & 16UL) != 0UL) {
#line 293
    return;
  } else {

  }
#line 294
  if ((s & 8UL) != 0UL) {
#line 295
    return;
  } else {

  }
#line 296
  if ((int )s & 1) {
#line 297
    return;
  } else {

  }
#line 299
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 321
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 322
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 322
    error = (int )tmp;
#line 326
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 326
    if (tmp___0 == 0) {
#line 327
      hlist_del(& req->collision);
    } else
#line 329
    if ((s & 440UL) != 0UL) {
#line 329
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              329);
    } else {

    }
#line 332
    if (rw == 1) {
#line 333
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 336
    _drbd_end_io_acct(mdev, req);
#line 338
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 339
    m->bio = req->master_bio;
#line 340
    req->master_bio = 0;
  } else {

  }
#line 343
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 348
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 349
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 356
  mdev = req->mdev;
#line 358
  tmp = is_susp(mdev->state);
#line 358
  if (tmp == 0) {
#line 359
    _req_may_be_done(req, m);
  } else {

  }
#line 360
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 387
  mdev = req->mdev;
#line 388
  sector = req->sector;
#line 389
  size = (int const   )req->size;
#line 395
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 395
  if (tmp == 0) {
#line 395
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            395);
  } else {

  }
#line 397
  tmp___0 = get_net_conf(mdev);
#line 397
  if (tmp___0 == 0) {
#line 398
    return (0);
  } else {

  }
#line 401
  _b = mdev->tl_hash_s == 0U;
#line 401
  if (_b != 0) {
#line 401
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            401);
  } else {

  }
#line 401
  if (_b != 0) {
#line 402
    goto out_no_conflict;
  } else {

  }
#line 403
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 403
  if (tmp___1 != 0L) {
#line 403
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (403), "i" (12UL));
    ldv_50476: ;
#line 403
    goto ldv_50476;
  } else {

  }
#line 406
  slot = tl_hash_slot___0(mdev, sector);
#line 407
  n = slot->first;
#line 407
  goto ldv_50482;
  ldv_50481: 
#line 408
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 408
  if (tmp___4 != 0) {
#line 409
    tmp___2 = get_current();
#line 409
    tmp___3 = get_current();
#line 409
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 415
    goto out_conflict;
  } else {

  }
#line 407
  n = n->next;
  ldv_50482: ;
#line 407
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 407
    __mptr = (struct hlist_node  const  *)n;
#line 407
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 407
    if (1 != 0) {
#line 408
      goto ldv_50481;
    } else {
#line 410
      goto ldv_50483;
    }
  } else {

  }
  ldv_50483: ;
#line 419
  if (mdev->ee_hash_s != 0U) {
#line 421
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 421
    if (tmp___5 != 0L) {
#line 421
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (421), "i" (12UL));
      ldv_50484: ;
#line 421
      goto ldv_50484;
    } else {

    }
#line 424
    slot = ee_hash_slot___0(mdev, sector);
#line 425
    n = slot->first;
#line 425
    goto ldv_50489;
    ldv_50488: 
#line 426
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 426
    if (tmp___8 != 0) {
#line 427
      tmp___6 = get_current();
#line 427
      tmp___7 = get_current();
#line 427
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 433
      goto out_conflict;
    } else {

    }
#line 425
    n = n->next;
    ldv_50489: ;
#line 425
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 425
      __mptr___0 = (struct hlist_node  const  *)n;
#line 425
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 425
      if (1 != 0) {
#line 426
        goto ldv_50488;
      } else {
#line 428
        goto ldv_50490;
      }
    } else {

    }
    ldv_50490: ;
  } else {

  }
  out_no_conflict: 
#line 442
  put_net_conf(mdev);
#line 443
  return (0);
  out_conflict: 
#line 446
  put_net_conf(mdev);
#line 447
  return (1);
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 465
  mdev = req->mdev;
#line 466
  rv = 0;
#line 467
  m->bio = 0;
#line 469
  switch ((unsigned int )what) {
  default: 
#line 471
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          471);
#line 472
  goto ldv_50499;
  case 1U: ;
#line 483
  if ((req->rq_state & 504UL) != 0UL) {
#line 483
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            483);
  } else {

  }
#line 484
  req->rq_state = req->rq_state | 8UL;
#line 485
  inc_ap_pending(mdev);
#line 486
  goto ldv_50499;
  case 2U: ;
#line 490
  if ((req->rq_state & 7UL) != 0UL) {
#line 490
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            490);
  } else {

  }
#line 491
  req->rq_state = req->rq_state | 1UL;
#line 492
  goto ldv_50499;
  case 22U: ;
#line 495
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 496
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 498
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 500
  req->rq_state = req->rq_state | 6UL;
#line 501
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 503
  _req_may_be_done_not_susp(req, m);
#line 504
  put_ldev(mdev);
#line 505
  goto ldv_50499;
  case 21U: 
#line 508
  req->rq_state = req->rq_state | 2UL;
#line 509
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 511
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 512
  _req_may_be_done_not_susp(req, m);
#line 513
  put_ldev(mdev);
#line 514
  goto ldv_50499;
  case 20U: 
#line 518
  req->rq_state = req->rq_state | 2UL;
#line 519
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 520
  _req_may_be_done_not_susp(req, m);
#line 521
  put_ldev(mdev);
#line 522
  goto ldv_50499;
  case 19U: 
#line 525
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         525U);
#line 527
  req->rq_state = req->rq_state | 2UL;
#line 528
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 530
  if ((req->rq_state & 504UL) != 0UL) {
#line 530
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            530);
  } else {

  }
#line 532
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 533
  put_ldev(mdev);
#line 537
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 538
    _req_may_be_done_not_susp(req, m);
#line 539
    goto ldv_50499;
  } else {

  }
#line 543
  req->rq_state = req->rq_state | 8UL;
#line 544
  inc_ap_pending(mdev);
  case 4U: 
#line 557
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 557
  hlist_add_head(& req->collision, tmp);
#line 559
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 561
  if ((req->rq_state & 8UL) == 0UL) {
#line 561
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            561);
  } else {

  }
#line 562
  req->rq_state = req->rq_state | 16UL;
#line 563
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 566
  drbd_queue_work(& mdev->data.work, & req->w);
#line 567
  goto ldv_50499;
  case 3U: 
#line 573
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 573
  hlist_add_head(& req->collision, tmp___0);
#line 593
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 597
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 597
  if (tmp___1 != 0) {
#line 597
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            597);
  } else {

  }
#line 599
  req->epoch = (mdev->newest_tle)->br_number;
#line 602
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 605
  if ((req->rq_state & 8UL) == 0UL) {
#line 605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            605);
  } else {

  }
#line 606
  req->rq_state = req->rq_state | 16UL;
#line 607
  req->w.cb = & w_send_dblock;
#line 608
  drbd_queue_work(& mdev->data.work, & req->w);
#line 611
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 612
    queue_barrier(mdev);
  } else {

  }
#line 614
  goto ldv_50499;
  case 5U: 
#line 617
  req->rq_state = req->rq_state | 16UL;
#line 618
  req->w.cb = & w_send_oos;
#line 619
  drbd_queue_work(& mdev->data.work, & req->w);
#line 620
  goto ldv_50499;
  case 9U: ;
  case 6U: ;
  case 7U: 
#line 629
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 632
  _req_may_be_done_not_susp(req, m);
#line 633
  goto ldv_50499;
  case 8U: ;
#line 637
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 638
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 640
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 644
    if ((req->rq_state & 8UL) != 0UL) {
#line 645
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 645
      if (tmp___2 != 0) {
#line 645
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 645
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
      if (tmp___4 < 0) {
#line 645
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 645, tmp___3);
      } else {

      }
#line 646
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 647
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 653
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 654
  req->rq_state = req->rq_state | 32UL;
#line 660
  _req_may_be_done_not_susp(req, m);
#line 661
  goto ldv_50499;
  case 11U: 
#line 664
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 10U: ;
#line 669
  if ((req->rq_state & 8UL) != 0UL) {
#line 670
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 670
    if (tmp___5 != 0) {
#line 670
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 670
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 670
    if (tmp___7 < 0) {
#line 670
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 670
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 670, tmp___6);
    } else {

    }
  } else {

  }
#line 671
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 672
  req->rq_state = req->rq_state | 64UL;
#line 673
  if ((req->rq_state & 32UL) != 0UL && (req->rq_state & 1024UL) != 0UL) {
#line 674
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 678
  if ((req->rq_state & 16UL) == 0UL) {
#line 679
    _req_may_be_done(req, m);
  } else {

  }
#line 680
  goto ldv_50499;
  case 14U: 
#line 683
  req->rq_state = req->rq_state | 256UL;
  case 15U: ;
#line 688
  if ((unsigned int )what == 15U) {
#line 689
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 692
  req->rq_state = req->rq_state | 64UL;
  case 13U: ;
  case 12U: 
#line 710
  req->rq_state = req->rq_state | 128UL;
#line 711
  if ((req->rq_state & 8UL) == 0UL) {
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            711);
  } else {

  }
#line 712
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 712
  if (tmp___8 != 0) {
#line 712
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 712
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 712
  if (tmp___10 < 0) {
#line 712
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 712, tmp___9);
  } else {

  }
#line 713
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 714
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 715
  _req_may_be_done_not_susp(req, m);
#line 716
  goto ldv_50499;
  case 16U: ;
#line 720
  if ((req->rq_state & 8UL) != 0UL) {
#line 721
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 721
    if (tmp___11 != 0) {
#line 721
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 721
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 721
    if (tmp___13 < 0) {
#line 721
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 721
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 721, tmp___12);
    } else {

    }
#line 722
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 724
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 726
  req->rq_state = req->rq_state | 64UL;
#line 727
  _req_may_be_done_not_susp(req, m);
#line 729
  goto ldv_50499;
  case 24U: ;
#line 732
  if ((req->rq_state & 2UL) == 0UL) {
#line 733
    goto ldv_50499;
  } else {

  }
#line 735
  _req_may_be_done(req, m);
#line 736
  goto ldv_50499;
  case 25U: ;
#line 739
  if ((req->rq_state & 2UL) == 0UL) {
#line 740
    goto ldv_50499;
  } else {

  }
#line 742
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 744
  rv = 2;
#line 745
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 746
    rv = 1;
  } else {

  }
#line 748
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 749
  req->w.cb = & w_restart_disk_io;
#line 750
  drbd_queue_work(& mdev->data.work, & req->w);
#line 751
  goto ldv_50499;
  case 23U: ;
#line 758
  if ((req->rq_state & 128UL) == 0UL) {
#line 759
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 760
      drbd_queue_work(& mdev->data.work, & req->w);
#line 761
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 763
    goto ldv_50499;
  } else {

  }
  case 17U: ;
#line 768
  if ((req->rq_state & 1024UL) == 0UL) {
#line 769
    goto ldv_50499;
  } else {

  }
#line 771
  if ((req->rq_state & 8UL) != 0UL) {
#line 775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 776
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 778
  if ((req->rq_state & 504UL) != 0UL) {
#line 779
    req->rq_state = req->rq_state | 64UL;
#line 780
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 781
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 783
  _req_may_be_done(req, m);
#line 784
  goto ldv_50499;
  case 18U: ;
#line 787
  if ((req->rq_state & 8UL) == 0UL) {
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            787);
  } else {

  }
#line 788
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 788
  if (tmp___14 != 0) {
#line 788
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 788
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 788
  if (tmp___16 < 0) {
#line 788
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 788, tmp___15);
  } else {

  }
#line 789
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 790
  req->rq_state = req->rq_state | 192UL;
#line 791
  _req_may_be_done_not_susp(req, m);
#line 792
  goto ldv_50499;
  }
  ldv_50499: ;
#line 795
  return (rv);
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 810
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 811
    return (1);
  } else {

  }
#line 812
  if ((int )mdev->state.ldv_38985.disk > 4) {
#line 813
    return (0);
  } else {

  }
#line 814
  if ((int )mdev->state.ldv_38985.disk <= 3) {
#line 815
    return (0);
  } else {

  }
#line 817
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 818
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 820
  if (sector >= nr_sectors) {
#line 820
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            820);
  } else {

  }
#line 821
  if (esector >= nr_sectors) {
#line 821
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            821);
  } else {

  }
#line 823
  sbnr = sector >> 3;
#line 824
  ebnr = esector >> 3;
#line 826
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 826
  return (tmp == 0);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int congested ;
  int tmp___18 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 831
  rw = (int const   )bio->bi_rw & (int const   )4097;
#line 832
  size = (int const   )bio->bi_size;
#line 833
  sector = bio->bi_sector;
#line 834
  b = 0;
#line 836
  send_oos = 0;
#line 837
  err = -5;
#line 838
  ret = 0;
#line 841
  req = drbd_req_new(mdev, bio);
#line 842
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 843
    dec_ap_bio(mdev);
#line 846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 847
    bio_endio(bio, -12);
#line 848
    return (0);
  } else {

  }
#line 850
  req->start_time = start_time;
#line 852
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 853
  if (local == 0) {
#line 854
    bio_put(req->private_bio);
#line 855
    req->private_bio = 0;
  } else {

  }
#line 857
  if (rw == 1) {
#line 858
    remote = 1;
  } else {
#line 861
    if (local != 0) {
#line 862
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 862
      if (tmp == 0) {
#line 868
        local = 0;
#line 869
        bio_put(req->private_bio);
#line 870
        req->private_bio = 0;
#line 871
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 874
    remote = local == 0 && (int )mdev->state.ldv_38985.pdsk > 7;
  }
#line 885
  if ((rw == 4096 && (int )mdev->state.ldv_38985.disk > 3) && local == 0) {
#line 886
    err = -11;
#line 887
    goto fail_and_free_req;
  } else {

  }
#line 895
  if (rw == 1 && local != 0) {
#line 895
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 895
    if (tmp___0 == 0) {
#line 896
      req->rq_state = req->rq_state | 2048UL;
#line 897
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 900
  if (remote != 0) {
#line 900
    tmp___1 = drbd_should_do_remote(mdev->state);
#line 900
    if ((int )tmp___1) {
#line 900
      tmp___2 = 1;
    } else {
#line 900
      tmp___2 = 0;
    }
  } else {
#line 900
    tmp___2 = 0;
  }
#line 900
  remote = tmp___2;
#line 901
  if (rw == 1) {
#line 901
    tmp___3 = drbd_should_send_oos(mdev->state);
#line 901
    if ((int )tmp___3) {
#line 901
      tmp___4 = 1;
    } else {
#line 901
      tmp___4 = 0;
    }
  } else {
#line 901
    tmp___4 = 0;
  }
#line 901
  send_oos = tmp___4;
#line 902
  if (remote != 0 && send_oos != 0) {
#line 902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            902);
  } else {

  }
#line 904
  if (local == 0 && remote == 0) {
#line 904
    tmp___6 = is_susp(mdev->state);
#line 904
    if (tmp___6 == 0) {
#line 905
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 905
      if (tmp___5 != 0) {
#line 906
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 907
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 916
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 916
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 916
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 920
      tmp___7 = kmalloc(56UL, 16U);
#line 920
      b = (struct drbd_tl_epoch *)tmp___7;
#line 921
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 922
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 923
        err = -12;
#line 924
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 929
  spin_lock_irq(& mdev->req_lock);
#line 931
  tmp___9 = is_susp(mdev->state);
#line 931
  if (tmp___9 != 0) {
#line 936
    ret = 1;
#line 937
    spin_unlock_irq(& mdev->req_lock);
#line 938
    goto fail_free_complete;
  } else {

  }
#line 941
  if (remote != 0 || send_oos != 0) {
#line 942
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 942
    remote = (int )tmp___10;
#line 943
    if (rw == 1) {
#line 943
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 943
      if ((int )tmp___11) {
#line 943
        tmp___12 = 1;
      } else {
#line 943
        tmp___12 = 0;
      }
    } else {
#line 943
      tmp___12 = 0;
    }
#line 943
    send_oos = tmp___12;
#line 944
    if (remote != 0 && send_oos != 0) {
#line 944
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              944);
    } else {

    }
#line 946
    if (remote == 0 && send_oos == 0) {
#line 947
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 948
    if (local == 0 && remote == 0) {
#line 949
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 950
      spin_unlock_irq(& mdev->req_lock);
#line 951
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 955
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 956
    mdev->unused_spare_tle = b;
#line 957
    b = 0;
  } else {

  }
#line 959
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 959
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 959
    if (tmp___13 != 0) {
#line 964
      spin_unlock_irq(& mdev->req_lock);
#line 965
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 970
  _drbd_start_io_acct(mdev, req, bio);
#line 982
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 982
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 982
    if (tmp___15 != 0) {
#line 984
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 985
      mdev->unused_spare_tle = 0;
    } else {
#line 982
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 987
  if (remote != 0 && rw == 1) {
#line 987
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 987
    if (tmp___14 != 0) {
#line 987
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              988);
    } else {

    }
  } else {

  }
#line 1006
  if (remote != 0) {
#line 1007
    _req_mod(req, to_be_send);
  } else {

  }
#line 1008
  if (local != 0) {
#line 1009
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1014
  if (rw == 1) {
#line 1014
    tmp___16 = _req_conflicts(req);
#line 1014
    if (tmp___16 != 0) {
#line 1015
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1017
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 1021
  if (remote != 0) {
#line 1026
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1030
  if (send_oos != 0) {
#line 1030
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1030U);
#line 1030
    if (tmp___17 != 0) {
#line 1031
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1033
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1035
    congested = 0;
#line 1037
    if ((mdev->net_conf)->cong_fill != 0) {
#line 1037
      tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 1037
      if (tmp___18 >= (mdev->net_conf)->cong_fill) {
#line 1039
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 1040
        congested = 1;
      } else {

      }
    } else {

    }
#line 1043
    if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 1044
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 1045
      congested = 1;
    } else {

    }
#line 1048
    if (congested != 0) {
#line 1049
      queue_barrier(mdev);
#line 1051
      if ((mdev->net_conf)->on_congestion == 1) {
#line 1052
        __ns.i = mdev->state.i;
#line 1052
        __ns.ldv_38985.conn = 22U;
#line 1052
        _drbd_set_state(mdev, __ns, 0, 0);
      } else {
#line 1054
        __ns___0.i = mdev->state.i;
#line 1054
        __ns___0.ldv_38985.conn = 1U;
#line 1054
        _drbd_set_state(mdev, __ns___0, 0, 0);
      }
    } else {

    }
  } else {

  }
#line 1058
  spin_unlock_irq(& mdev->req_lock);
#line 1059
  kfree((void const   *)b);
#line 1061
  if (local != 0) {
#line 1062
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1069
    tmp___20 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1069
    if (tmp___20 != 0) {
#line 1070
      tmp___19 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1070
      if (tmp___19 != 0) {
#line 1073
        bio_endio(req->private_bio, -5);
      } else {
#line 1075
        generic_make_request(req->private_bio);
      }
#line 1076
      put_ldev(mdev);
    } else {
#line 1078
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1081
  return (0);
  fail_conflicting: 
#line 1090
  _drbd_end_io_acct(mdev, req);
#line 1091
  spin_unlock_irq(& mdev->req_lock);
#line 1092
  if (remote != 0) {
#line 1093
    tmp___21 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1093
    if (tmp___21 != 0) {
#line 1093
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1093
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1093
    if (tmp___23 < 0) {
#line 1093
      tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1093
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1093, tmp___22);
    } else {

    }
  } else {

  }
#line 1096
  err = 0;
  fail_free_complete: ;
#line 1099
  if ((req->rq_state & 2048UL) != 0UL) {
#line 1100
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1102
  if (local != 0) {
#line 1103
    bio_put(req->private_bio);
#line 1104
    req->private_bio = 0;
#line 1105
    put_ldev(mdev);
  } else {

  }
#line 1107
  if (ret == 0) {
#line 1108
    bio_endio(bio, err);
  } else {

  }
#line 1110
  drbd_req_free(req);
#line 1111
  dec_ap_bio(mdev);
#line 1112
  kfree((void const   *)b);
#line 1114
  return (ret);
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1124
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1126
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1126
    if (tmp___1 != 0) {
#line 1127
      tmp = get_current();
#line 1127
      tmp___0 = get_current();
#line 1127
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1133
    return (1);
  } else {

  }
#line 1136
  return (0);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  long tmp___0 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1142
  mdev = (struct drbd_conf *)q->queuedata;
#line 1145
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1145
  if (tmp != 0) {
#line 1146
    bio_endio(bio, -1);
#line 1147
    return;
  } else {

  }
#line 1150
  start_time = jiffies;
#line 1155
  if (bio->bi_size == 0U) {
#line 1155
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1155);
  } else {

  }
#line 1156
  if ((bio->bi_size & 511U) != 0U) {
#line 1156
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1156);
  } else {

  }
#line 1157
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1157);
  } else {

  }
#line 1161
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1162
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1164
  tmp___0 = __builtin_expect(s_enr == e_enr, 1L);
#line 1164
  if (tmp___0 != 0L) {
#line 1165
    inc_ap_bio(mdev, 1);
#line 1166
    drbd_make_request_common(mdev, bio, start_time);
#line 1167
    return;
  } else {

  }
#line 1172
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1174
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1178
    bio_endio(bio, -22);
  } else {
#line 1190
    sect = bio->bi_sector;
#line 1191
    sps = 256;
#line 1192
    mask = sps + -1;
#line 1193
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1194
    bp = bio_split(bio, (int )first_sectors);
#line 1201
    inc_ap_bio(mdev, 3);
#line 1203
    if (s_enr + 1U != e_enr) {
#line 1203
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1203);
    } else {

    }
#line 1205
    goto ldv_50597;
    ldv_50596: 
#line 1206
    inc_ap_bio(mdev, 1);
    ldv_50597: 
#line 1205
    tmp___1 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1205
    if (tmp___1 != 0) {
#line 1206
      goto ldv_50596;
    } else {

    }

#line 1208
    goto ldv_50600;
    ldv_50599: 
#line 1209
    inc_ap_bio(mdev, 1);
    ldv_50600: 
#line 1208
    tmp___2 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1208
    if (tmp___2 != 0) {
#line 1209
      goto ldv_50599;
    } else {

    }
#line 1211
    dec_ap_bio(mdev);
#line 1213
    bio_pair_release(bp);
  }
#line 1215
  return;
}
}
#line 1230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1232
  mdev = (struct drbd_conf *)q->queuedata;
#line 1233
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1235
  bio_size = bvm->bi_size;
#line 1238
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1240
  if (limit < 0) {
#line 1241
    limit = 0;
  } else {

  }
#line 1242
  if (bio_size == 0U) {
#line 1243
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1244
      limit = (int )bvec->bv_len;
    } else
#line 1245
    if (limit != 0) {
#line 1245
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1245
      if (tmp != 0) {
#line 1246
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1248
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1249
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1250
          _min1 = limit;
#line 1250
          _min2 = backing_limit;
#line 1250
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1252
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1254
  return (limit);
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long et ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1259
  mdev = (struct drbd_conf *)data;
#line 1262
  et = 0UL;
#line 1264
  tmp = get_net_conf(mdev);
#line 1264
  if (tmp != 0) {
#line 1265
    et = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
#line 1266
    put_net_conf(mdev);
  } else {

  }
#line 1268
  if (et == 0UL || (int )mdev->state.ldv_38985.conn <= 8) {
#line 1269
    return;
  } else {

  }
#line 1271
  spin_lock_irq(& mdev->req_lock);
#line 1272
  le = & (mdev->oldest_tle)->requests;
#line 1273
  tmp___0 = list_empty((struct list_head  const  *)le);
#line 1273
  if (tmp___0 != 0) {
#line 1274
    spin_unlock_irq(& mdev->req_lock);
#line 1275
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
#line 1276
    return;
  } else {

  }
#line 1279
  le = le->prev;
#line 1280
  __mptr = (struct list_head  const  *)le;
#line 1280
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1281
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )(req->start_time + et) >= 0L) {
#line 1282
    if ((req->rq_state & 8UL) != 0UL) {
#line 1283
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1284
      __ns.i = mdev->state.i;
#line 1284
      __ns.ldv_38985.conn = 3U;
#line 1284
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
    } else {
#line 1286
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing block device frozen?\n");
#line 1287
      mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
    }
  } else {
#line 1290
    mod_timer(& mdev->request_timer, req->start_time + et);
  }
#line 1293
  spin_unlock_irq(& mdev->req_lock);
#line 1294
  return;
}
}
#line 1296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1301
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1303
  mutex_lock(ldv_func_arg1);
#line 1304
  return;
}
}
#line 1306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_90(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1311
  tmp = mutex_trylock(ldv_func_arg1);
#line 1311
  ldv_func_res = tmp;
#line 1313
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1313
  return (tmp___0);
#line 1315
  return (ldv_func_res);
}
}
#line 1318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1323
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1325
  mutex_unlock(ldv_func_arg1);
#line 1326
  return;
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1333
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1335
  mutex_lock(ldv_func_arg1);
#line 1336
  return;
}
}
#line 1338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1343
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1345
  mutex_unlock(ldv_func_arg1);
#line 1346
  return;
}
}
#line 1348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1353
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1355
  mutex_lock(ldv_func_arg1);
#line 1356
  return;
}
}
#line 1358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1363
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1365
  mutex_unlock(ldv_func_arg1);
#line 1366
  return;
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1373
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1375
  mutex_unlock(ldv_func_arg1);
#line 1376
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 130
__inline static int ldv_mutex_is_locked_113(struct mutex *lock ) ;
#line 171
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_117(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_119(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_120(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_116(struct mutex *ldv_func_arg1 ) ;
#line 55
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 58
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 59
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 739 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 741
  return ((bdev->bd_disk)->queue);
}
}
#line 1019 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1021
  retval = 512;
#line 1023
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1024
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1026
  return ((unsigned short )retval);
}
}
#line 1029 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1031
  tmp = bdev_get_queue(bdev);
#line 1031
  tmp___0 = queue_logical_block_size(tmp);
#line 1031
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1539 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1664
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1674
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1675
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1683
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38985.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_48961;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38985.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38985.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_48961;
  }
  ldv_48961: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 140
  md_io.mdev = mdev;
#line 141
  init_completion(& md_io.event);
#line 142
  md_io.error = 0;
#line 144
  if (rw & 1) {
#line 144
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 144
    if (tmp == 0) {
#line 145
      rw = rw | 3072;
    } else {

    }
  } else {

  }
#line 146
  rw = rw | 16;
#line 148
  bio = bio_alloc(16U, 1U);
#line 149
  bio->bi_bdev = bdev->md_bdev;
#line 150
  bio->bi_sector = sector;
#line 151
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 151
  ok = tmp___0 == size;
#line 152
  if (ok == 0) {
#line 153
    goto out;
  } else {

  }
#line 154
  bio->bi_private = (void *)(& md_io);
#line 155
  bio->bi_end_io = & drbd_md_io_complete;
#line 156
  bio->bi_rw = (unsigned long )rw;
#line 158
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 158
  if (tmp___1 != 0) {
#line 159
    bio_endio(bio, -5);
  } else {
#line 161
    submit_bio(rw, bio);
  }
#line 162
  wait_for_completion(& md_io.event);
#line 163
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 166
  bio_put(bio);
#line 167
  return (ok);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 174
  offset = 0;
#line 175
  iop = mdev->md_io_page;
#line 177
  tmp = ldv_mutex_is_locked_113(& mdev->md_io_mutex);
#line 177
  if (tmp == 0) {
#line 177
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            177);
  } else {

  }
#line 179
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 179
  if (tmp___0 != 0L) {
#line 179
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (179), "i" (12UL));
    ldv_49280: ;
#line 179
    goto ldv_49280;
  } else {

  }
#line 181
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 181
  logical_block_size = (int )tmp___1;
#line 182
  if (logical_block_size == 0) {
#line 183
    logical_block_size = 512;
  } else {

  }
#line 186
  if (logical_block_size != 512) {
#line 187
    mask = logical_block_size / 512 + -1;
#line 188
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 188
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              188);
    } else {

    }
#line 189
    if ((mask + 1) * 512 != logical_block_size) {
#line 189
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              189);
    } else {

    }
#line 190
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 191
    sector = (sector_t )(~ mask) & sector;
#line 192
    iop = mdev->md_io_tmpp;
#line 194
    if (rw & 1) {
#line 197
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 197
      p = tmp___2;
#line 198
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 198
      hp = tmp___3;
#line 200
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 203
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 203
      if (tmp___4 != 0L) {
#line 204
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 207
        return (0);
      } else {

      }
#line 210
      __len = 512UL;
#line 210
      if (__len > 63UL) {
#line 210
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 210
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 214
  tmp___7 = drbd_md_first_sector(bdev);
#line 214
  if (tmp___7 > sector) {
#line 216
    tmp___5 = get_current();
#line 216
    tmp___6 = get_current();
#line 216
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 214
    tmp___8 = drbd_md_last_sector(bdev);
#line 214
    if (tmp___8 < sector) {
#line 216
      tmp___5 = get_current();
#line 216
      tmp___6 = get_current();
#line 216
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 220
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 221
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 221
  if (tmp___9 != 0L) {
#line 222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 224
    return (0);
  } else {

  }
#line 227
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 228
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 228
    p___0 = tmp___10;
#line 229
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 229
    hp___0 = tmp___11;
#line 231
    __len___0 = 512UL;
#line 231
    if (__len___0 > 63UL) {
#line 231
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 231
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 234
  return (ok);
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 241
  al_flags = 0UL;
#line 244
  spin_lock_irq(& mdev->al_lock);
#line 245
  tmp = lc_find(mdev->resync, enr / 4U);
#line 246
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 246
  if (tmp___2 != 0L) {
#line 247
    __mptr = (struct lc_element  const  *)tmp;
#line 247
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 248
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 248
    if (tmp___1 != 0) {
#line 249
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 249
      wake = tmp___0 == 0;
#line 250
      spin_unlock_irq(& mdev->al_lock);
#line 251
      if (wake != 0) {
#line 252
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 253
      return (0);
    } else {

    }
  } else {

  }
#line 256
  al_ext = lc_get(mdev->act_log, enr);
#line 257
  al_flags = (mdev->act_log)->flags;
#line 258
  spin_unlock_irq(& mdev->al_lock);
#line 269
  return (al_ext);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 274
  enr = (unsigned int )(sector >> 13);
#line 278
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 278
  if (tmp <= 0) {
#line 278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            278);
  } else {

  }
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_49310;
  } else {

  }
#line 280
  tmp___0 = get_current();
#line 280
  __wait.flags = 0U;
#line 280
  __wait.private = (void *)tmp___0;
#line 280
  __wait.func = & autoremove_wake_function;
#line 280
  __wait.task_list.next = & __wait.task_list;
#line 280
  __wait.task_list.prev = & __wait.task_list;
  ldv_49313: 
#line 280
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_49312;
  } else {

  }
#line 280
  schedule();
#line 280
  goto ldv_49313;
  ldv_49312: 
#line 280
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49310: ;
#line 282
  if (al_ext->lc_number != enr) {
#line 289
    init_completion(& al_work.event);
#line 290
    al_work.al_ext = al_ext;
#line 291
    al_work.enr = enr;
#line 292
    al_work.old_enr = al_ext->lc_number;
#line 293
    al_work.w.cb = & w_al_write_transaction;
#line 294
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 295
    wait_for_completion(& al_work.event);
#line 297
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 299
    spin_lock_irq(& mdev->al_lock);
#line 300
    lc_changed(mdev->act_log, al_ext);
#line 301
    spin_unlock_irq(& mdev->al_lock);
#line 302
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 308
  enr = (unsigned int )(sector >> 13);
#line 312
  tmp = spinlock_check(& mdev->al_lock);
#line 312
  flags = _raw_spin_lock_irqsave(tmp);
#line 314
  extent = lc_find(mdev->act_log, enr);
#line 316
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 317
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 319
    return;
  } else {

  }
#line 322
  tmp___0 = lc_put(mdev->act_log, extent);
#line 322
  if (tmp___0 == 0U) {
#line 323
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 325
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 326
  return;
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 339
  return (al_enr >> 5);
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 348
  return (rs_enr >> 3);
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 358
  __mptr = (struct drbd_work  const  *)w;
#line 358
  aw = (struct update_al_work *)__mptr;
#line 359
  updated = aw->al_ext;
#line 360
  new_enr = aw->enr;
#line 361
  evicted = aw->old_enr;
#line 366
  xor_sum = 0U;
#line 368
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 368
  if (tmp___0 == 0) {
#line 369
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.disk);
#line 369
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 372
    complete(& ((struct update_al_work *)w)->event);
#line 373
    return (1);
  } else {

  }
#line 381
  if ((int )mdev->state.ldv_38985.conn <= 9 && evicted != 4294967295U) {
#line 382
    tmp___1 = al_extent_to_bm_page(evicted);
#line 382
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 385
  if ((int )mdev->state.ldv_38985.disk <= 3) {
#line 386
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.disk);
#line 386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 389
    complete(& ((struct update_al_work *)w)->event);
#line 390
    put_ldev(mdev);
#line 391
    return (1);
  } else {

  }
#line 394
  ldv_mutex_lock_114(& mdev->md_io_mutex);
#line 395
  tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 395
  buffer = (struct al_transaction *)tmp___3;
#line 397
  buffer->magic = 1728214147U;
#line 398
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 398
  buffer->tr_number = tmp___4;
#line 400
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 400
  n = (int )tmp___5;
#line 402
  tmp___6 = __fswab32((__u32 )n);
#line 402
  buffer->updates[0].pos = tmp___6;
#line 403
  tmp___7 = __fswab32(new_enr);
#line 403
  buffer->updates[0].extent = tmp___7;
#line 405
  xor_sum = xor_sum ^ new_enr;
#line 407
  __min1 = 61;
#line 407
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 407
  mx = __min1 < __min2 ? __min1 : __min2;
#line 409
  i = 0;
#line 409
  goto ldv_49353;
  ldv_49352: 
#line 410
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 411
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 411
  extent_nr = tmp___8->lc_number;
#line 412
  tmp___9 = __fswab32(idx);
#line 412
  buffer->updates[i + 1].pos = tmp___9;
#line 413
  tmp___10 = __fswab32(extent_nr);
#line 413
  buffer->updates[i + 1].extent = tmp___10;
#line 414
  xor_sum = xor_sum ^ extent_nr;
#line 409
  i = i + 1;
  ldv_49353: ;
#line 409
  if (i < mx) {
#line 410
    goto ldv_49352;
  } else {

  }

#line 416
  goto ldv_49356;
  ldv_49355: 
#line 417
  buffer->updates[i + 1].pos = 4294967295U;
#line 418
  buffer->updates[i + 1].extent = 4294967295U;
#line 419
  xor_sum = ~ xor_sum;
#line 416
  i = i + 1;
  ldv_49356: ;
#line 416
  if (i <= 60) {
#line 417
    goto ldv_49355;
  } else {

  }
#line 421
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 422
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 423
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 425
  tmp___11 = __fswab32(xor_sum);
#line 425
  buffer->xor_sum = tmp___11;
#line 427
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 430
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 430
  if (tmp___12 == 0) {
#line 431
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 433
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 433
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 435
    mdev->al_tr_pos = 0;
  } else {

  }
#line 437
  if (mdev->al_tr_pos > 63) {
#line 437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            437);
  } else {

  }
#line 438
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 440
  ldv_mutex_unlock_115(& mdev->md_io_mutex);
#line 442
  complete(& ((struct update_al_work *)w)->event);
#line 443
  put_ldev(mdev);
#line 445
  return (1);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 464
  xor_sum = 0U;
#line 466
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 470
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 470
  if (tmp == 0) {
#line 471
    return (-1);
  } else {

  }
#line 473
  tmp___0 = __fswab32(b->magic);
#line 473
  rv = tmp___0 == 2205418087U;
#line 475
  i = 0;
#line 475
  goto ldv_49370;
  ldv_49369: 
#line 476
  tmp___1 = __fswab32(b->updates[i].extent);
#line 476
  xor_sum = tmp___1 ^ xor_sum;
#line 475
  i = i + 1;
  ldv_49370: ;
#line 475
  if (i <= 61) {
#line 476
    goto ldv_49369;
  } else {

  }
#line 477
  tmp___2 = __fswab32(b->xor_sum);
#line 477
  rv = (tmp___2 == xor_sum) & rv;
#line 479
  return (rv);
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 495
  active_extents = 0;
#line 496
  transactions = 0;
#line 497
  found_valid = 0;
#line 498
  from = 0;
#line 499
  to = 0;
#line 500
  from_tnr = 0U;
#line 501
  to_tnr = 0U;
#line 504
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 509
  ldv_mutex_lock_116(& mdev->md_io_mutex);
#line 510
  tmp = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 510
  buffer = (struct al_transaction *)tmp;
#line 513
  i = 0;
#line 513
  goto ldv_49390;
  ldv_49389: 
#line 514
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 515
  if (rv == 0) {
#line 516
    goto ldv_49388;
  } else {

  }
#line 517
  if (rv == -1) {
#line 518
    ldv_mutex_unlock_117(& mdev->md_io_mutex);
#line 519
    return (0);
  } else {

  }
#line 521
  tmp___0 = __fswab32(buffer->tr_number);
#line 521
  cnr = tmp___0;
#line 523
  found_valid = found_valid + 1;
#line 523
  if (found_valid == 1) {
#line 524
    from = i;
#line 525
    to = i;
#line 526
    from_tnr = cnr;
#line 527
    to_tnr = cnr;
#line 528
    goto ldv_49388;
  } else {

  }
#line 530
  if ((int )cnr - (int )from_tnr < 0) {
#line 531
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 531
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              531);
    } else {

    }
#line 532
    from = i;
#line 533
    from_tnr = cnr;
  } else {

  }
#line 535
  if ((int )cnr - (int )to_tnr > 0) {
#line 536
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 536
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              536);
    } else {

    }
#line 537
    to = i;
#line 538
    to_tnr = cnr;
  } else {

  }
  ldv_49388: 
#line 513
  i = i + 1;
  ldv_49390: ;
#line 513
  if (i <= mx) {
#line 514
    goto ldv_49389;
  } else {

  }

#line 542
  if (found_valid == 0) {
#line 543
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 544
    ldv_mutex_unlock_118(& mdev->md_io_mutex);
#line 545
    return (1);
  } else {

  }
#line 550
  i = from;
  ldv_49405: 
#line 556
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 557
  _b = rv == 0;
#line 557
  if (_b != 0) {
#line 557
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            557);
  } else {

  }
#line 557
  if (_b != 0) {
#line 557
    goto cancel;
  } else {

  }
#line 558
  if (rv == -1) {
#line 559
    ldv_mutex_unlock_119(& mdev->md_io_mutex);
#line 560
    return (0);
  } else {

  }
#line 563
  tmp___1 = __fswab32(buffer->tr_number);
#line 563
  trn = tmp___1;
#line 565
  spin_lock_irq(& mdev->al_lock);
#line 571
  j = 61;
#line 571
  goto ldv_49402;
  ldv_49401: 
#line 572
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 572
  pos = (int )tmp___2;
#line 573
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 573
  extent_nr = tmp___3;
#line 575
  if (extent_nr == 4294967295U) {
#line 576
    goto ldv_49400;
  } else {

  }
#line 578
  lc_set(mdev->act_log, extent_nr, pos);
#line 579
  active_extents = active_extents + 1;
  ldv_49400: 
#line 571
  j = j - 1;
  ldv_49402: ;
#line 571
  if (j >= 0) {
#line 572
    goto ldv_49401;
  } else {

  }
#line 581
  spin_unlock_irq(& mdev->al_lock);
#line 583
  transactions = transactions + 1;
  cancel: ;
#line 586
  if (i == to) {
#line 587
    goto ldv_49404;
  } else {

  }
#line 588
  i = i + 1;
#line 589
  if (i > mx) {
#line 590
    i = 0;
  } else {

  }
#line 591
  goto ldv_49405;
  ldv_49404: 
#line 593
  mdev->al_tr_number = to_tnr + 1U;
#line 594
  mdev->al_tr_pos = to;
#line 595
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 595
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 597
    mdev->al_tr_pos = 0;
  } else {

  }
#line 600
  ldv_mutex_unlock_120(& mdev->md_io_mutex);
#line 602
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 605
  return (1);
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 615
  add = 0UL;
#line 619
  tmp___0 = lc_try_lock(mdev->act_log);
#line 619
  if (tmp___0 != 0) {
#line 619
    goto ldv_49414;
  } else {

  }
#line 619
  tmp___1 = get_current();
#line 619
  __wait.flags = 0U;
#line 619
  __wait.private = (void *)tmp___1;
#line 619
  __wait.func = & autoremove_wake_function;
#line 619
  __wait.task_list.next = & __wait.task_list;
#line 619
  __wait.task_list.prev = & __wait.task_list;
  ldv_49417: 
#line 619
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 619
  tmp___2 = lc_try_lock(mdev->act_log);
#line 619
  if (tmp___2 != 0) {
#line 619
    goto ldv_49416;
  } else {

  }
#line 619
  schedule();
#line 619
  goto ldv_49417;
  ldv_49416: 
#line 619
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49414: 
#line 621
  i = 0;
#line 621
  goto ldv_49422;
  ldv_49421: 
#line 622
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 622
  enr = tmp___3->lc_number;
#line 623
  if (enr == 4294967295U) {
#line 624
    goto ldv_49418;
  } else {

  }
#line 625
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 625
  tmp = (int )tmp___4;
#line 626
  descriptor.modname = "drbd";
#line 626
  descriptor.function = "drbd_al_apply_to_bm";
#line 626
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 626
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 626
  descriptor.lineno = 626U;
#line 626
  descriptor.flags = 0U;
#line 626
  descriptor.enabled = 0;
#line 626
  tmp___5 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 626
  if (tmp___5 != 0L) {
#line 626
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 627
  add = (unsigned long )tmp + add;
  ldv_49418: 
#line 621
  i = i + 1;
  ldv_49422: ;
#line 621
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 622
    goto ldv_49421;
  } else {

  }
#line 630
  lc_unlock(mdev->act_log);
#line 631
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 633
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 633
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 634
  return;
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 641
  spin_lock_irq(& mdev->al_lock);
#line 642
  rv = al_ext->refcnt == 0U;
#line 643
  tmp = __builtin_expect(rv != 0, 1L);
#line 643
  if (tmp != 0L) {
#line 644
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 645
  spin_unlock_irq(& mdev->al_lock);
#line 647
  return (rv);
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 664
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 664
  if (tmp == 0) {
#line 664
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            664);
  } else {

  }
#line 666
  i = 0;
#line 666
  goto ldv_49440;
  ldv_49439: 
#line 667
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 668
  if (al_ext->lc_number == 4294967295U) {
#line 669
    goto ldv_49434;
  } else {

  }
#line 670
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 670
  if (tmp___0 != 0) {
#line 670
    goto ldv_49435;
  } else {

  }
#line 670
  tmp___1 = get_current();
#line 670
  __wait.flags = 0U;
#line 670
  __wait.private = (void *)tmp___1;
#line 670
  __wait.func = & autoremove_wake_function;
#line 670
  __wait.task_list.next = & __wait.task_list;
#line 670
  __wait.task_list.prev = & __wait.task_list;
  ldv_49438: 
#line 670
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 670
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 670
  if (tmp___2 != 0) {
#line 670
    goto ldv_49437;
  } else {

  }
#line 670
  schedule();
#line 670
  goto ldv_49438;
  ldv_49437: 
#line 670
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49435: ;
  ldv_49434: 
#line 666
  i = i + 1;
  ldv_49440: ;
#line 666
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 667
    goto ldv_49439;
  } else {

  }
#line 673
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 674
  return;
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 678
  __mptr = (struct drbd_work  const  *)w;
#line 678
  udw = (struct update_odbm_work *)__mptr;
#line 680
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 680
  if (tmp___0 == 0) {
#line 681
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 681
    if (tmp != 0) {
#line 682
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 683
    kfree((void const   *)udw);
#line 684
    return (1);
  } else {

  }
#line 687
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 687
  drbd_bm_write_page(mdev, tmp___1);
#line 688
  put_ldev(mdev);
#line 690
  kfree((void const   *)udw);
#line 692
  tmp___2 = drbd_bm_total_weight(mdev);
#line 692
  if (tmp___2 <= mdev->rs_failed) {
#line 693
    switch ((int )mdev->state.ldv_38985.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 696
    drbd_resync_finished(mdev);
    default: ;
#line 699
    goto ldv_49456;
    }
    ldv_49456: ;
  } else {

  }
#line 702
  drbd_bcast_sync_progress(mdev);
#line 704
  return (1);
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 722
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 722
  if (tmp == 0) {
#line 722
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            722);
  } else {

  }
#line 726
  enr = (unsigned int )(sector >> 15);
#line 728
  e = lc_get(mdev->resync, enr);
#line 729
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 730
    __mptr = (struct lc_element  const  *)e;
#line 730
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 731
    if (ext->lce.lc_number == enr) {
#line 732
      if (success != 0) {
#line 733
        ext->rs_left = ext->rs_left - count;
      } else {
#line 735
        ext->rs_failed = ext->rs_failed + count;
      }
#line 736
      if (ext->rs_left < ext->rs_failed) {
#line 737
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 742
        dump_stack();
#line 744
        lc_put(mdev->resync, & ext->lce);
#line 745
        val.i = 0U;
#line 745
        val.ldv_38985.conn = 1U;
#line 745
        mask.i = 0U;
#line 745
        mask.ldv_38985.conn = 31U;
#line 745
        drbd_force_state(mdev, mask, val);
#line 746
        return;
      } else {

      }
    } else {
#line 755
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 755
      rs_left = tmp___0;
#line 756
      if (ext->flags != 0UL) {
#line 757
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 761
        ext->flags = 0UL;
      } else {

      }
#line 763
      if (ext->rs_failed != 0) {
#line 764
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 768
      ext->rs_left = rs_left;
#line 769
      ext->rs_failed = success == 0 ? count : 0;
#line 770
      lc_changed(mdev->resync, & ext->lce);
    }
#line 772
    lc_put(mdev->resync, & ext->lce);
#line 775
    if (ext->rs_left == ext->rs_failed) {
#line 776
      ext->rs_failed = 0;
#line 778
      tmp___1 = kmalloc(32UL, 32U);
#line 778
      udw = (struct update_odbm_work *)tmp___1;
#line 779
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 780
        udw->enr = ext->lce.lc_number;
#line 781
        udw->w.cb = & w_update_odbm;
#line 782
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 784
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 792
  return;
}
}
#line 795 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 797
  now = jiffies;
#line 798
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 799
  next = (mdev->rs_last_mark + 1) % 8;
#line 800
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 801
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 804
      mdev->rs_mark_time[next] = now;
#line 805
      mdev->rs_mark_left[next] = still_to_go;
#line 806
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 808
  return;
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 823
  count = 0UL;
#line 825
  wake_up = 0;
#line 828
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 829
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 831
    return;
  } else {

  }
#line 833
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 834
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 836
  _b = sector >= nr_sectors;
#line 836
  if (_b != 0) {
#line 836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            836);
  } else {

  }
#line 836
  if (_b != 0) {
#line 836
    return;
  } else {

  }
#line 837
  _b___0 = esector >= nr_sectors;
#line 837
  if (_b___0 != 0) {
#line 837
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            837);
  } else {

  }
#line 837
  if (_b___0 != 0) {
#line 837
    esector = nr_sectors - 1UL;
  } else {

  }
#line 839
  lbnr = (nr_sectors - 1UL) >> 3;
#line 844
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 844
  if (tmp != 0L) {
#line 845
    return;
  } else {

  }
#line 846
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 846
  if (tmp___0 != 0L) {
#line 847
    ebnr = lbnr;
  } else {
#line 849
    ebnr = (esector - 7UL) >> 3;
  }
#line 850
  sbnr = (sector + 7UL) >> 3;
#line 852
  if (sbnr > ebnr) {
#line 853
    return;
  } else {

  }
#line 859
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 859
  count = (unsigned long )tmp___1;
#line 860
  if (count != 0UL) {
#line 860
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 860
    if (tmp___4 != 0) {
#line 861
      tmp___2 = drbd_bm_total_weight(mdev);
#line 861
      drbd_advance_rs_marks(mdev, tmp___2);
#line 862
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 862
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 863
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 864
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 868
      wake_up = 1;
#line 869
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 871
  if (wake_up != 0) {
#line 872
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 873
  return;
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 888
  count = 0U;
#line 891
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 892
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 894
    return (0);
  } else {

  }
#line 897
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 897
  if (tmp == 0) {
#line 898
    return (0);
  } else {

  }
#line 900
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 901
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 903
  _b = sector >= nr_sectors;
#line 903
  if (_b != 0) {
#line 903
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            903);
  } else {

  }
#line 903
  if (_b != 0) {
#line 904
    goto out;
  } else {

  }
#line 905
  _b___0 = esector >= nr_sectors;
#line 905
  if (_b___0 != 0) {
#line 905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            905);
  } else {

  }
#line 905
  if (_b___0 != 0) {
#line 906
    esector = nr_sectors - 1UL;
  } else {

  }
#line 908
  lbnr = (nr_sectors - 1UL) >> 3;
#line 912
  sbnr = sector >> 3;
#line 913
  ebnr = esector >> 3;
#line 917
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 917
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 918
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 918
  count = (unsigned int )tmp___1;
#line 920
  enr = (unsigned int )(sector >> 15);
#line 921
  e = lc_find(mdev->resync, enr);
#line 922
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 923
    __mptr = (struct lc_element  const  *)e;
#line 923
    __mptr___0 = (struct lc_element  const  *)e;
#line 923
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 924
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 927
  put_ldev(mdev);
#line 929
  return ((int )count);
}
}
#line 933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 937
  wakeup = 0;
#line 940
  spin_lock_irq(& mdev->al_lock);
#line 941
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 942
    spin_unlock_irq(& mdev->al_lock);
#line 943
    return (0);
  } else {

  }
#line 945
  e = lc_get(mdev->resync, enr);
#line 946
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 946
    __mptr = (struct lc_element  const  *)e;
#line 946
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 946
    bm_ext = 0;
  }
#line 947
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 948
    if (bm_ext->lce.lc_number != enr) {
#line 949
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 950
      bm_ext->rs_failed = 0;
#line 951
      lc_changed(mdev->resync, & bm_ext->lce);
#line 952
      wakeup = 1;
    } else {

    }
#line 954
    if (bm_ext->lce.refcnt == 1U) {
#line 955
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 956
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 958
  rs_flags = (mdev->resync)->flags;
#line 959
  spin_unlock_irq(& mdev->al_lock);
#line 960
  if (wakeup != 0) {
#line 961
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 963
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 964
    if ((rs_flags & 4UL) != 0UL) {
#line 965
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 967
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 967
    if (tmp != 0L) {
#line 967
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (967), "i" (12UL));
      ldv_49547: ;
#line 967
      goto ldv_49547;
    } else {

    }
  } else {

  }
#line 970
  return (bm_ext);
}
}
#line 973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 976
  rv = 0;
#line 978
  spin_lock_irq(& mdev->al_lock);
#line 979
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 979
  if (tmp != 0L) {
#line 980
    rv = 1;
  } else {
#line 982
    al_ext = lc_find(mdev->act_log, enr);
#line 983
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 984
      if (al_ext->refcnt != 0U) {
#line 985
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 988
  spin_unlock_irq(& mdev->al_lock);
#line 995
  return (rv);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1007
  enr = (unsigned int )(sector >> 15);
#line 1010
  sa = 200;
  retry: 
#line 1014
  __ret = 0;
#line 1014
  bm_ext = _bme_get(mdev, enr);
#line 1014
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1014
    tmp = get_current();
#line 1014
    __wait.flags = 0U;
#line 1014
    __wait.private = (void *)tmp;
#line 1014
    __wait.func = & autoremove_wake_function;
#line 1014
    __wait.task_list.next = & __wait.task_list;
#line 1014
    __wait.task_list.prev = & __wait.task_list;
    ldv_49568: 
#line 1014
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1014
    bm_ext = _bme_get(mdev, enr);
#line 1014
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1014
      goto ldv_49566;
    } else {

    }
#line 1014
    tmp___0 = get_current();
#line 1014
    tmp___1 = signal_pending(tmp___0);
#line 1014
    if (tmp___1 == 0) {
#line 1014
      schedule();
#line 1014
      goto ldv_49567;
    } else {

    }
#line 1014
    __ret = -512;
#line 1014
    goto ldv_49566;
    ldv_49567: ;
#line 1014
    goto ldv_49568;
    ldv_49566: 
#line 1014
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1014
  sig = __ret;
#line 1016
  if (sig != 0) {
#line 1017
    return (-4);
  } else {

  }
#line 1019
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1019
  if (tmp___2 != 0) {
#line 1020
    return (0);
  } else {

  }
#line 1022
  i = 0;
#line 1022
  goto ldv_49577;
  ldv_49576: 
#line 1023
  __ret___0 = 0;
#line 1023
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1023
  if (tmp___8 != 0) {
#line 1023
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1023
    if (tmp___9 == 0) {
#line 1023
      tmp___3 = get_current();
#line 1023
      __wait___0.flags = 0U;
#line 1023
      __wait___0.private = (void *)tmp___3;
#line 1023
      __wait___0.func = & autoremove_wake_function;
#line 1023
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1023
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49574: 
#line 1023
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1023
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1023
      if (tmp___4 == 0) {
#line 1023
        goto ldv_49572;
      } else {
#line 1023
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1023
        if (tmp___5 != 0) {
#line 1023
          goto ldv_49572;
        } else {

        }
      }
#line 1023
      tmp___6 = get_current();
#line 1023
      tmp___7 = signal_pending(tmp___6);
#line 1023
      if (tmp___7 == 0) {
#line 1023
        schedule();
#line 1023
        goto ldv_49573;
      } else {

      }
#line 1023
      __ret___0 = -512;
#line 1023
      goto ldv_49572;
      ldv_49573: ;
#line 1023
      goto ldv_49574;
      ldv_49572: 
#line 1023
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1023
  sig = __ret___0;
#line 1027
  if (sig != 0) {
#line 1027
    goto _L;
  } else {
#line 1027
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1027
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1028
      spin_lock_irq(& mdev->al_lock);
#line 1029
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1029
      if (tmp___10 == 0U) {
#line 1030
        bm_ext->flags = 0UL;
#line 1031
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1032
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1034
      spin_unlock_irq(& mdev->al_lock);
#line 1035
      if (sig != 0) {
#line 1036
        return (-4);
      } else {

      }
#line 1037
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1037
      if (tmp___11 != 0L) {
#line 1038
        return (-4);
      } else {

      }
#line 1039
      if (sa != 0) {
#line 1039
        sa = sa - 1;
#line 1039
        if (sa == 0) {
#line 1040
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1042
      goto retry;
    } else {

    }
  }
#line 1022
  i = i + 1;
  ldv_49577: ;
#line 1022
  if (i <= 3) {
#line 1023
    goto ldv_49576;
  } else {

  }
#line 1045
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1046
  return (0);
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1060
  enr = (unsigned int )(sector >> 15);
#line 1061
  al_enr = enr * 4U;
#line 1066
  spin_lock_irq(& mdev->al_lock);
#line 1067
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1081
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1082
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1082
      __mptr = (struct lc_element  const  *)e;
#line 1082
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1082
      bm_ext = 0;
    }
#line 1083
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1084
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1084
      if (tmp != 0) {
#line 1084
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1084);
      } else {

      }
#line 1085
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1085
      if (tmp___0 == 0) {
#line 1085
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1085);
      } else {

      }
#line 1086
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1087
      mdev->resync_wenr = 4294967295U;
#line 1088
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1088
      if (tmp___1 == 0U) {
#line 1089
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1090
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1092
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1096
  e = lc_try_get(mdev->resync, enr);
#line 1097
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1097
    __mptr___0 = (struct lc_element  const  *)e;
#line 1097
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1097
    bm_ext = 0;
  }
#line 1098
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1099
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1099
    if (tmp___2 != 0) {
#line 1100
      goto proceed;
    } else {

    }
#line 1101
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1101
    if (tmp___3 == 0) {
#line 1102
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1108
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1109
      if (bm_ext->lce.refcnt == 0U) {
#line 1109
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1109);
      } else {

      }
    }
#line 1111
    goto check_al;
  } else {
#line 1114
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1115
      goto try_again;
    } else {

    }
#line 1117
    e = lc_get(mdev->resync, enr);
#line 1118
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1118
      __mptr___1 = (struct lc_element  const  *)e;
#line 1118
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1118
      bm_ext = 0;
    }
#line 1119
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1120
      rs_flags = (mdev->resync)->flags;
#line 1121
      if ((rs_flags & 4UL) != 0UL) {
#line 1122
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1124
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1124
      if (tmp___4 != 0L) {
#line 1124
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1124), "i" (12UL));
        ldv_49598: ;
#line 1124
        goto ldv_49598;
      } else {

      }
#line 1125
      goto try_again;
    } else {

    }
#line 1127
    if (bm_ext->lce.lc_number != enr) {
#line 1128
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1129
      bm_ext->rs_failed = 0;
#line 1130
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1131
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1132
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1132
      if (tmp___5 != 0) {
#line 1132
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1132);
      } else {

      }
    } else {

    }
#line 1134
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1135
    if (bm_ext->lce.refcnt != 1U) {
#line 1135
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1135);
    } else {

    }
#line 1136
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1137
    goto check_al;
  }
  check_al: 
#line 1140
  i = 0;
#line 1140
  goto ldv_49600;
  ldv_49599: 
#line 1141
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1141
  if (tmp___6 != 0L) {
#line 1142
    goto try_again;
  } else {

  }
#line 1143
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1143
  if (tmp___7 != 0) {
#line 1144
    goto try_again;
  } else {

  }
#line 1140
  i = i + 1;
  ldv_49600: ;
#line 1140
  if (i <= 3) {
#line 1141
    goto ldv_49599;
  } else {

  }
#line 1146
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1148
  mdev->resync_wenr = 4294967295U;
#line 1149
  spin_unlock_irq(& mdev->al_lock);
#line 1150
  return (0);
  try_again: ;
#line 1153
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1154
    mdev->resync_wenr = enr;
  } else {

  }
#line 1155
  spin_unlock_irq(& mdev->al_lock);
#line 1156
  return (-11);
}
}
#line 1159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1161
  enr = (unsigned int )(sector >> 15);
#line 1166
  tmp = spinlock_check(& mdev->al_lock);
#line 1166
  flags = _raw_spin_lock_irqsave(tmp);
#line 1167
  e = lc_find(mdev->resync, enr);
#line 1168
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1168
    __mptr = (struct lc_element  const  *)e;
#line 1168
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1168
    bm_ext = 0;
  }
#line 1169
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1170
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1171
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1171
    if (tmp___0 != 0) {
#line 1172
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1173
    return;
  } else {

  }
#line 1176
  if (bm_ext->lce.refcnt == 0U) {
#line 1177
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1181
    return;
  } else {

  }
#line 1184
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1184
  if (tmp___1 == 0U) {
#line 1185
    bm_ext->flags = 0UL;
#line 1186
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1187
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1190
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1191
  return;
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1199
  spin_lock_irq(& mdev->al_lock);
#line 1201
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1201
  if (tmp != 0) {
#line 1202
    lc_reset(mdev->resync);
#line 1203
    put_ldev(mdev);
  } else {

  }
#line 1205
  mdev->resync_locked = 0U;
#line 1206
  mdev->resync_wenr = 4294967295U;
#line 1207
  spin_unlock_irq(& mdev->al_lock);
#line 1208
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1209
  return;
}
}
#line 1218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1224
  spin_lock_irq(& mdev->al_lock);
#line 1226
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1226
  if (tmp___3 != 0) {
#line 1228
    i = 0;
#line 1228
    goto ldv_49629;
    ldv_49628: 
#line 1229
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1230
    __mptr = (struct lc_element  const  *)e;
#line 1230
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1231
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1232
      goto ldv_49627;
    } else {

    }
#line 1233
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1234
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1237
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1237
      if (tmp != 0) {
#line 1237
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1237);
      } else {

      }
#line 1238
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1238
      if (tmp___0 == 0) {
#line 1238
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1238);
      } else {

      }
#line 1239
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1240
      mdev->resync_wenr = 4294967295U;
#line 1241
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1243
    if (bm_ext->lce.refcnt != 0U) {
#line 1244
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1246
      put_ldev(mdev);
#line 1247
      spin_unlock_irq(& mdev->al_lock);
#line 1248
      return (-11);
    } else {

    }
#line 1250
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1250
    if (tmp___1 != 0) {
#line 1250
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1250);
    } else {

    }
#line 1251
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1251
    if (tmp___2 != 0) {
#line 1251
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1251);
    } else {

    }
#line 1252
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_49627: 
#line 1228
    i = i + 1;
    ldv_49629: ;
#line 1228
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1229
      goto ldv_49628;
    } else {

    }

#line 1254
    if ((mdev->resync)->used != 0U) {
#line 1254
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1254);
    } else {

    }
#line 1255
    put_ldev(mdev);
  } else {

  }
#line 1257
  spin_unlock_irq(& mdev->al_lock);
#line 1259
  return (0);
}
}
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1274
  wake_up = 0;
#line 1276
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1279
    return;
  } else {

  }
#line 1281
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1282
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1284
  _b = sector >= nr_sectors;
#line 1284
  if (_b != 0) {
#line 1284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1284);
  } else {

  }
#line 1284
  if (_b != 0) {
#line 1284
    return;
  } else {

  }
#line 1285
  _b___0 = esector >= nr_sectors;
#line 1285
  if (_b___0 != 0) {
#line 1285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1285);
  } else {

  }
#line 1285
  if (_b___0 != 0) {
#line 1285
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1287
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1292
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1292
  if (tmp != 0L) {
#line 1293
    return;
  } else {

  }
#line 1294
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1294
  if (tmp___0 != 0L) {
#line 1295
    ebnr = lbnr;
  } else {
#line 1297
    ebnr = (esector - 7UL) >> 3;
  }
#line 1298
  sbnr = (sector + 7UL) >> 3;
#line 1300
  if (sbnr > ebnr) {
#line 1301
    return;
  } else {

  }
#line 1307
  spin_lock_irq(& mdev->al_lock);
#line 1308
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1308
  count = (unsigned long )tmp___1;
#line 1309
  if (count != 0UL) {
#line 1310
    mdev->rs_failed = mdev->rs_failed + count;
#line 1312
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1312
    if (tmp___2 != 0) {
#line 1313
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1314
      put_ldev(mdev);
    } else {

    }
#line 1319
    wake_up = 1;
  } else {

  }
#line 1321
  spin_unlock_irq(& mdev->al_lock);
#line 1322
  if (wake_up != 0) {
#line 1323
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1324
  return;
}
}
#line 1326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1331
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1333
  mutex_lock(ldv_func_arg1);
#line 1334
  return;
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1341
  tmp = mutex_trylock(ldv_func_arg1);
#line 1341
  ldv_func_res = tmp;
#line 1343
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1343
  return (tmp___0);
#line 1345
  return (ldv_func_res);
}
}
#line 1348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1353
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1355
  mutex_unlock(ldv_func_arg1);
#line 1356
  return;
}
}
#line 1358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1363
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1365
  mutex_lock(ldv_func_arg1);
#line 1366
  return;
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1373
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1375
  mutex_unlock(ldv_func_arg1);
#line 1376
  return;
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1383
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1385
  mutex_lock(ldv_func_arg1);
#line 1386
  return;
}
}
#line 1388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1393
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1395
  mutex_unlock(ldv_func_arg1);
#line 1396
  return;
}
}
#line 1398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_112(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1403
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1405
  mutex_unlock(ldv_func_arg1);
#line 1406
  return;
}
}
#line 1408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_113(struct mutex *lock ) 
{ 
  ldv_func_ret_type___7 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1413
  tmp = mutex_is_locked(lock);
#line 1413
  ldv_func_res = tmp;
#line 1415
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1415
  return (tmp___0);
#line 1417
  return (ldv_func_res);
}
}
#line 1420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1425
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1427
  mutex_lock(ldv_func_arg1);
#line 1428
  return;
}
}
#line 1430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1435
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1437
  mutex_unlock(ldv_func_arg1);
#line 1438
  return;
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_116(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1445
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1447
  mutex_lock(ldv_func_arg1);
#line 1448
  return;
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_117(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1455
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1457
  mutex_unlock(ldv_func_arg1);
#line 1458
  return;
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1465
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1467
  mutex_unlock(ldv_func_arg1);
#line 1468
  return;
}
}
#line 1470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_119(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1475
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1477
  mutex_unlock(ldv_func_arg1);
#line 1478
  return;
}
}
#line 1480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_120(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1485
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1487
  mutex_unlock(ldv_func_arg1);
#line 1488
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 641
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 643
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_138(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_139(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_152(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_154(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_158(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_160(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_162(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_164(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) ;
#line 236
void ldv_mutex_unlock_168(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_140(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_142(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_148(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_151(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_153(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_159(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_161(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_163(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) ;
#line 66
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) ;
#line 87
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 91
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 119
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 123
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___3(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6411;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6411;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6411;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6411;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_6411: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 318 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held___0(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  int tmp___0 ;
  struct thread_info *tmp___1 ;
  unsigned long _flags ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 320
  lockdep_opinion = 0;
#line 322
  tmp = debug_lockdep_rcu_enabled();
#line 322
  if (tmp == 0) {
#line 323
    return (1);
  } else {

  }
#line 324
  tmp___0 = rcu_is_cpu_idle();
#line 324
  if (tmp___0 != 0) {
#line 325
    return (0);
  } else {

  }
#line 326
  if (debug_locks != 0) {
#line 327
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
  } else {

  }
#line 328
  if (lockdep_opinion != 0) {
#line 328
    tmp___3 = 1;
  } else {
#line 328
    tmp___1 = current_thread_info___3();
#line 328
    if (tmp___1->preempt_count != 0) {
#line 328
      tmp___3 = 1;
    } else {
#line 328
      _flags = arch_local_save_flags();
#line 328
      tmp___2 = arch_irqs_disabled_flags(_flags);
#line 328
      if (tmp___2 != 0) {
#line 328
        tmp___3 = 1;
      } else {
#line 328
        tmp___3 = 0;
      }
    }
  }
#line 328
  return (tmp___3);
}
}
#line 743 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 745
  tmp = current_thread_info___3();
#line 745
  tmp->preempt_count = tmp->preempt_count + 1;
#line 745
  __asm__  volatile   ("": : : "memory");
#line 747
  return;
}
}
#line 762 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 765
  __asm__  volatile   ("": : : "memory");
#line 765
  tmp = current_thread_info___3();
#line 765
  tmp->preempt_count = tmp->preempt_count + -1;
#line 765
  __asm__  volatile   ("": : : "memory");
#line 766
  return;
}
}
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 89
  tmp___1 = static_branch(& __tracepoint_module_get.key);
#line 89
  if ((int )tmp___1) {
#line 89
    rcu_read_lock_sched_notrace___0();
#line 89
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
    tmp = debug_lockdep_rcu_enabled();
#line 89
    if (tmp != 0 && ! __warned) {
#line 89
      tmp___0 = rcu_read_lock_sched_held___0();
#line 89
      if (tmp___0 == 0 && 1) {
#line 89
        __warned = 1;
#line 89
        lockdep_rcu_suspicious("include/trace/events/module.h", 94, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 89
    it_func_ptr = _________p1;
#line 89
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13797: 
#line 89
      it_func = it_func_ptr->func;
#line 89
      __data = it_func_ptr->data;
#line 89
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 89
      it_func_ptr = it_func_ptr + 1;
#line 89
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
        goto ldv_13797;
      } else {

      }

    } else {

    }
#line 89
    rcu_read_unlock_sched_notrace___0();
  } else {

  }
#line 91
  return;
}
}
#line 465 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  struct thread_info *tmp ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp___0 ;
  long tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 467
  ret = 1;
#line 469
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 470
    tmp = current_thread_info___3();
#line 470
    tmp->preempt_count = tmp->preempt_count + 1;
#line 470
    __asm__  volatile   ("": : : "memory");
#line 472
    tmp___0 = module_is_live(module);
#line 472
    tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
#line 472
    if (tmp___1 != 0L) {
#line 473
      __vpp_verify = 0;
#line 473
      switch (8UL) {
      case 1UL: 
#line 473
      pao_ID__ = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14166;
      case 2UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14166;
      case 4UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14166;
      case 8UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14166;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14166: ;
#line 473
      goto ldv_14171;
      case 2UL: 
#line 473
      pao_ID_____0 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14177;
      case 2UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14177;
      case 4UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14177;
      case 8UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14177;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14177: ;
#line 473
      goto ldv_14171;
      case 4UL: 
#line 473
      pao_ID_____1 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14187;
      case 2UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14187;
      case 4UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14187;
      case 8UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14187;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14187: ;
#line 473
      goto ldv_14171;
      case 8UL: 
#line 473
      pao_ID_____2 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14197;
      case 2UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14197;
      case 4UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14197;
      case 8UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14197;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14197: ;
#line 473
      goto ldv_14171;
      default: 
#line 473
      __bad_size_call_parameter();
#line 473
      goto ldv_14171;
      }
      ldv_14171: ;
#line 474
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 476
      ret = 0;
    }
#line 478
    __asm__  volatile   ("": : : "memory");
#line 478
    tmp___2 = current_thread_info___3();
#line 478
    tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 478
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 480
  return (ret);
}
}
#line 255 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 279
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 203 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 203
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 203
  return (tmp);
}
}
#line 2051 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2052
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2053
extern struct block_device *bdget(dev_t  ) ;
#line 2057
extern void bdput(struct block_device * ) ;
#line 2095
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1894 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2160
extern int wake_up_process(struct task_struct * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 47 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 48
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 411 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 416
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 610
extern struct gendisk *alloc_disk(int  ) ;
#line 612
extern void put_disk(struct gendisk * ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 826 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 827
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 828
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 830
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 861
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 876
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_49085: ;
#line 593
    goto ldv_49085;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_49100: ;
#line 618
    goto ldv_49100;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  ldv_mutex_lock_142(& mdev->data.mutex);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    ldv_mutex_unlock_143(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  ldv_mutex_unlock_144(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1193
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1207
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1213
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1218
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1224
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1228
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1267
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1269
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1274
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1280
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1281
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1282
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1284
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1290
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1490 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1496 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1503
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1504
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1506 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1516
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1517
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1680
void drbd_nl_cleanup(void) ;
#line 1681
int drbd_nl_init(void) ;
#line 1682
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_50180;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_50183: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_50182;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_50183;
  ldv_50182: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50180: ;
#line 1786
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38985.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_50208;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38985.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38985.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_50208;
  }
  ldv_50208: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_50249;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_50249;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50249: ;
#line 1942
  return (s);
}
}
#line 1950 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1953
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1955
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1961
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1962
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1962
    if (tmp != 0) {
#line 1963
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1964
      dump_stack();
    } else {

    }
#line 1966
    return (0UL);
  } else {

  }
#line 1968
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1971
  return (0UL);
  }
}
}
#line 2033 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2035
  _drbd_thread_stop(thi, 0, 0);
#line 2036
  return;
}
}
#line 2038 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2040
  _drbd_thread_stop(thi, 1, 0);
#line 2041
  return;
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_38985.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_50380;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_50380;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_50380: ;
#line 2303
  switch ((unsigned int )s.ldv_38985.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_50390;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_50390: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2433 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2435
  sk = (mdev->data.socket)->sk;
#line 2436
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2437
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2438
  return;
}
}
#line 2440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2447
  return (0);
}
}
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_50643;
  ldv_50642: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_50643: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_50642;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 136
int drbd_init(void) ;
#line 137
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 138
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 139
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 140
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 142
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 143
static void md_sync_timer_fn(unsigned long data ) ;
#line 144
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 145
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 191
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 220
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 262
  tmp = kmalloc(56UL, 208U);
#line 262
  b = (struct drbd_tl_epoch *)tmp;
#line 263
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 264
    return (0);
  } else {

  }
#line 265
  INIT_LIST_HEAD(& b->requests);
#line 266
  INIT_LIST_HEAD(& b->w.list);
#line 267
  b->next = 0;
#line 268
  b->br_number = 4711U;
#line 269
  b->n_writes = 0;
#line 270
  b->w.cb = 0;
#line 272
  mdev->oldest_tle = b;
#line 273
  mdev->newest_tle = b;
#line 274
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 276
  mdev->tl_hash = 0;
#line 277
  mdev->tl_hash_s = 0U;
#line 279
  return (1);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 284
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            284);
  } else {

  }
#line 285
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 285
  if (tmp == 0) {
#line 285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            285);
  } else {

  }
#line 286
  kfree((void const   *)mdev->oldest_tle);
#line 287
  mdev->oldest_tle = 0;
#line 288
  kfree((void const   *)mdev->unused_spare_tle);
#line 289
  mdev->unused_spare_tle = 0;
#line 290
  kfree((void const   *)mdev->tl_hash);
#line 291
  mdev->tl_hash = 0;
#line 292
  mdev->tl_hash_s = 0U;
#line 293
  return;
}
}
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 306
  INIT_LIST_HEAD(& new->requests);
#line 307
  INIT_LIST_HEAD(& new->w.list);
#line 308
  new->w.cb = 0;
#line 309
  new->next = 0;
#line 310
  new->n_writes = 0;
#line 312
  newest_before = mdev->newest_tle;
#line 315
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 316
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 317
    (mdev->newest_tle)->next = new;
#line 318
    mdev->newest_tle = new;
  } else {

  }
#line 320
  return;
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 339
  spin_lock_irq(& mdev->req_lock);
#line 341
  b = mdev->oldest_tle;
#line 344
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 347
    goto bail;
  } else {

  }
#line 349
  if (b->br_number != barrier_nr) {
#line 350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 352
    goto bail;
  } else {

  }
#line 354
  if ((unsigned int )b->n_writes != set_size) {
#line 355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 357
    goto bail;
  } else {

  }
#line 361
  le = b->requests.next;
#line 361
  tle = le->next;
#line 361
  goto ldv_50871;
  ldv_50870: 
#line 362
  __mptr = (struct list_head  const  *)le;
#line 362
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 363
  _req_mod(r, barrier_acked);
#line 361
  le = tle;
#line 361
  tle = le->next;
  ldv_50871: ;
#line 361
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 362
    goto ldv_50870;
  } else {

  }
#line 378
  list_del_init(& b->requests);
#line 380
  nob = b->next;
#line 381
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 381
  if (tmp != 0) {
#line 382
    _tl_add_barrier(mdev, b);
#line 383
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 384
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 388
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 388
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              388);
    } else {

    }
#line 389
    mdev->oldest_tle = nob;
#line 390
    kfree((void const   *)b);
  }
#line 393
  spin_unlock_irq(& mdev->req_lock);
#line 394
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 394
  if (tmp___0 != 0) {
#line 394
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 394
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 394
  if (tmp___2 < 0) {
#line 394
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 394
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 394, tmp___1);
  } else {

  }
#line 396
  return;
  bail: 
#line 399
  spin_unlock_irq(& mdev->req_lock);
#line 400
  val.i = 0U;
#line 400
  val.ldv_38985.conn = 6U;
#line 400
  mask.i = 0U;
#line 400
  mask.ldv_38985.conn = 31U;
#line 400
  drbd_force_state(mdev, mask, val);
#line 402
  return;
}
}
#line 412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 419
  b = mdev->oldest_tle;
#line 420
  pn = & mdev->oldest_tle;
#line 421
  goto ldv_50906;
  ldv_50905: 
#line 422
  n_writes = 0;
#line 423
  n_reads = 0;
#line 424
  INIT_LIST_HEAD(& carry_reads);
#line 425
  le = b->requests.next;
#line 425
  tle = le->next;
#line 425
  goto ldv_50898;
  ldv_50897: 
#line 426
  __mptr = (struct list_head  const  *)le;
#line 426
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 427
  rv = _req_mod(req, what);
#line 429
  n_writes = (rv & 1) + n_writes;
#line 430
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 425
  le = tle;
#line 425
  tle = le->next;
  ldv_50898: ;
#line 425
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 426
    goto ldv_50897;
  } else {

  }
#line 432
  tmp = b->next;
#line 434
  if (n_writes != 0) {
#line 435
    if ((unsigned int )what == 23U) {
#line 436
      b->n_writes = n_writes;
#line 437
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 438
        b->w.cb = & w_send_barrier;
#line 439
        inc_ap_pending(mdev);
#line 440
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 443
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 445
    pn = & b->next;
  } else {
#line 447
    if (n_reads != 0) {
#line 448
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 451
    list_del(& b->requests);
#line 456
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 457
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 457
      if (tmp___0 != 0) {
#line 457
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 457
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 457
      if (tmp___2 < 0) {
#line 457
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 457
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 457, tmp___1);
      } else {

      }
    } else {

    }
#line 459
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 461
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 461
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                461);
      } else {

      }
#line 462
      INIT_LIST_HEAD(& b->requests);
#line 463
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 464
      INIT_LIST_HEAD(& b->w.list);
#line 465
      b->w.cb = 0;
#line 466
      b->br_number = random32();
#line 467
      b->n_writes = 0;
#line 469
      *pn = b;
#line 470
      goto ldv_50904;
    } else {

    }
#line 472
    *pn = tmp;
#line 473
    kfree((void const   *)b);
  }
#line 475
  b = tmp;
#line 476
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_50906: ;
#line 421
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 422
    goto ldv_50905;
  } else {

  }
  ldv_50904: ;
#line 426
  return;
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 494
  spin_lock_irq(& mdev->req_lock);
#line 496
  _tl_restart(mdev, connection_lost_while_pending);
#line 499
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 499
  if (tmp == 0) {
#line 499
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            499);
  } else {

  }
#line 502
  le = mdev->out_of_sequence_requests.next;
#line 502
  tle = le->next;
#line 502
  goto ldv_50916;
  ldv_50915: 
#line 503
  __mptr = (struct list_head  const  *)le;
#line 503
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 506
  _req_mod(r, connection_lost_while_pending);
#line 502
  le = tle;
#line 502
  tle = le->next;
  ldv_50916: ;
#line 502
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 503
    goto ldv_50915;
  } else {

  }
#line 510
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 512
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 514
  spin_unlock_irq(& mdev->req_lock);
#line 515
  return;
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 519
  spin_lock_irq(& mdev->req_lock);
#line 520
  _tl_restart(mdev, what);
#line 521
  spin_unlock_irq(& mdev->req_lock);
#line 522
  return;
}
}
#line 530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 533
  return (((((int )os.ldv_38985.conn > 9 && (int )ns.ldv_38985.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_38985.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 550
  tmp = spinlock_check(& mdev->req_lock);
#line 550
  flags = _raw_spin_lock_irqsave(tmp);
#line 551
  os = mdev->state;
#line 552
  ns.i = (os.i & ~ mask.i) | val.i;
#line 553
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 554
  ns = mdev->state;
#line 555
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 557
  return (rv);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 569
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 570
  return;
}
}
#line 572
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 573
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 576
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 578
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 589
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 589
  if (tmp != 0) {
#line 590
    return (SS_CW_SUCCESS);
  } else {

  }
#line 592
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 592
  if (tmp___0 != 0) {
#line 593
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 595
  rv = SS_UNKNOWN_ERROR;
#line 596
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 596
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 597
  os = mdev->state;
#line 598
  ns.i = (os.i & ~ mask.i) | val.i;
#line 599
  ns = sanitize_state(mdev, os, ns, 0);
#line 601
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 601
  if (tmp___2 == 0) {
#line 602
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 603
  if ((int )rv == 0) {
#line 604
    rv = is_valid_state(mdev, ns);
#line 605
    if ((int )rv == 1) {
#line 606
      rv = is_valid_state_transition(mdev, ns, os);
#line 607
      if ((int )rv == 1) {
#line 608
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 611
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 613
  return (rv);
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 635
  init_completion(& done);
#line 637
  if (((unsigned int )f & 8U) != 0U) {
#line 638
    ldv_mutex_lock_145(& mdev->state_mutex);
  } else {

  }
#line 640
  tmp = spinlock_check(& mdev->req_lock);
#line 640
  flags = _raw_spin_lock_irqsave(tmp);
#line 641
  os = mdev->state;
#line 642
  ns.i = (os.i & ~ mask.i) | val.i;
#line 643
  ns = sanitize_state(mdev, os, ns, 0);
#line 645
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 645
  if (tmp___3 != 0) {
#line 646
    rv = is_valid_state(mdev, ns);
#line 647
    if ((int )rv == 1) {
#line 648
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 649
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 651
    if ((int )rv <= 0) {
#line 652
      if (((unsigned int )f & 2U) != 0U) {
#line 653
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 654
      goto abort;
    } else {

    }
#line 657
    drbd_state_lock___0(mdev);
#line 658
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 658
    if (tmp___0 == 0) {
#line 659
      drbd_state_unlock(mdev);
#line 660
      rv = SS_CW_FAILED_BY_PEER;
#line 661
      if (((unsigned int )f & 2U) != 0U) {
#line 662
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 663
      goto abort;
    } else {

    }
#line 666
    rv = _req_st_cond(mdev, mask, val);
#line 666
    if ((int )rv != 0) {
#line 666
      goto ldv_50988;
    } else {

    }
#line 666
    tmp___1 = get_current();
#line 666
    __wait.flags = 0U;
#line 666
    __wait.private = (void *)tmp___1;
#line 666
    __wait.func = & autoremove_wake_function;
#line 666
    __wait.task_list.next = & __wait.task_list;
#line 666
    __wait.task_list.prev = & __wait.task_list;
    ldv_50991: 
#line 666
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 666
    rv = _req_st_cond(mdev, mask, val);
#line 666
    if ((int )rv != 0) {
#line 666
      goto ldv_50990;
    } else {

    }
#line 666
    schedule();
#line 666
    goto ldv_50991;
    ldv_50990: 
#line 666
    finish_wait(& mdev->state_wait, & __wait);
    ldv_50988: ;
#line 669
    if ((int )rv <= 0) {
#line 670
      drbd_state_unlock(mdev);
#line 671
      if (((unsigned int )f & 2U) != 0U) {
#line 672
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 673
      goto abort;
    } else {

    }
#line 675
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 675
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 676
    os = mdev->state;
#line 677
    ns.i = (os.i & ~ mask.i) | val.i;
#line 678
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 679
    drbd_state_unlock(mdev);
  } else {
#line 681
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 684
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 686
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 687
    tmp___4 = get_current();
#line 687
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 687
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              687);
    } else {

    }
#line 688
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 692
  if (((unsigned int )f & 8U) != 0U) {
#line 693
    ldv_mutex_unlock_146(& mdev->state_mutex);
  } else {

  }
#line 695
  return (rv);
}
}
#line 709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 714
  rv = drbd_req_state(mdev, mask, val, f);
#line 714
  if ((int )rv != -18) {
#line 714
    goto ldv_51002;
  } else {

  }
#line 714
  tmp = get_current();
#line 714
  __wait.flags = 0U;
#line 714
  __wait.private = (void *)tmp;
#line 714
  __wait.func = & autoremove_wake_function;
#line 714
  __wait.task_list.next = & __wait.task_list;
#line 714
  __wait.task_list.prev = & __wait.task_list;
  ldv_51005: 
#line 714
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 714
  rv = drbd_req_state(mdev, mask, val, f);
#line 714
  if ((int )rv != -18) {
#line 714
    goto ldv_51004;
  } else {

  }
#line 714
  schedule();
#line 714
  goto ldv_51005;
  ldv_51004: 
#line 714
  finish_wait(& mdev->state_wait, & __wait);
  ldv_51002: ;
#line 717
  return (rv);
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 722
  tmp = is_susp(ns);
#line 722
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.pdsk);
#line 722
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.disk);
#line 722
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_38985.peer);
#line 722
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38985.role);
#line 722
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_38985.conn);
#line 722
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 733
  return;
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 739
  if ((int )err == -18) {
#line 740
    return;
  } else {

  }
#line 741
  tmp = drbd_set_st_err_str(err);
#line 741
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 742
  print_st(mdev, (char *)" state", os);
#line 743
  print_st(mdev, (char *)"wanted", ns);
#line 744
  return;
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  rv = 1;
#line 760
  fp = FP_DONT_CARE;
#line 761
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 761
  if (tmp != 0) {
#line 762
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 763
    put_ldev(mdev);
  } else {

  }
#line 766
  tmp___0 = get_net_conf(mdev);
#line 766
  if (tmp___0 != 0) {
#line 767
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 769
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 770
    put_net_conf(mdev);
  } else {

  }
#line 773
  if ((int )rv <= 0) {

  } else
#line 775
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 776
    rv = SS_DEVICE_IN_USE;
  } else
#line 778
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38985.conn <= 9) && (int )ns.ldv_38985.disk <= 7) {
#line 779
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 781
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_38985.conn <= 9) && (int )ns.ldv_38985.pdsk > 5) {
#line 783
    rv = SS_PRIMARY_NOP;
  } else
#line 785
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38985.disk <= 4) && (int )ns.ldv_38985.pdsk <= 4) {
#line 786
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 788
  if ((int )ns.ldv_38985.conn > 10 && (int )ns.ldv_38985.disk <= 3) {
#line 789
    rv = SS_NO_LOCAL_DISK;
  } else
#line 791
  if ((int )ns.ldv_38985.conn > 10 && (int )ns.ldv_38985.pdsk <= 3) {
#line 792
    rv = SS_NO_REMOTE_DISK;
  } else
#line 794
  if (((int )ns.ldv_38985.conn > 10 && (int )ns.ldv_38985.disk <= 7) && (int )ns.ldv_38985.pdsk <= 7) {
#line 795
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 797
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 802
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 804
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 806
    rv = SS_NO_VERIFY_ALG;
  } else
#line 808
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 810
    rv = SS_NOT_SUPPORTED;
  } else
#line 812
  if ((int )ns.ldv_38985.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 813
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 815
  return (rv);
}
}
#line 825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 828
  rv = 1;
#line 830
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_38985.conn > 10) {
#line 832
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 834
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 835
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 837
  if ((int )ns.ldv_38985.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 838
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 840
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_38985.conn <= 1) {
#line 841
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 843
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_38985.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 844
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 846
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 847
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 849
  if ((int )ns.ldv_38985.conn == (int )os.ldv_38985.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 850
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 852
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_38985.conn <= 9) {
#line 853
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 855
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_38985.conn != (int )os.ldv_38985.conn) && (int )os.ldv_38985.conn > 10) {
#line 857
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 859
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_38985.conn <= 9) {
#line 861
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 863
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_38985.conn <= 8) {
#line 865
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 867
  return (rv);
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 886
  fp = FP_DONT_CARE;
#line 887
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 887
  if (tmp != 0) {
#line 888
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 889
    put_ldev(mdev);
  } else {

  }
#line 893
  if (((int )ns.ldv_38985.conn > 2 && (int )ns.ldv_38985.conn <= 7) && (int )os.ldv_38985.conn <= 1) {
#line 895
    ns.ldv_38985.conn = os.ldv_38985.conn;
  } else {

  }
#line 899
  if (((((int )os.ldv_38985.conn > 2 && (int )os.ldv_38985.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_38985.conn <= 7) {
#line 901
    ns.ldv_38985.conn = os.ldv_38985.conn;
  } else {

  }
#line 904
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 905
    ns.ldv_38985.disk = 0U;
  } else {

  }
#line 909
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 910
    ns.ldv_38985.disk = 0U;
  } else {

  }
#line 913
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 914
    ns.ldv_38985.conn = os.ldv_38985.conn;
  } else {

  }
#line 916
  if ((int )ns.ldv_38985.conn <= 9) {
#line 917
    ns.ldv_38985.peer_isp = 0U;
#line 918
    ns.ldv_38985.peer = 0U;
#line 919
    if ((int )ns.ldv_38985.pdsk > 6 || (int )ns.ldv_38985.pdsk <= 3) {
#line 920
      ns.ldv_38985.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 924
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 925
    ns.ldv_38985.aftr_isp = 0U;
  } else {

  }
#line 928
  if (((int )os.ldv_38985.conn > 10 && (int )ns.ldv_38985.conn > 10) && ((int )ns.ldv_38985.disk <= 2 || (int )ns.ldv_38985.pdsk <= 2)) {
#line 930
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 931
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 934
    ns.ldv_38985.conn = 10U;
  } else {

  }
#line 938
  if ((int )ns.ldv_38985.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 938
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 938
    if (tmp___0 != 0) {
#line 940
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 941
        ns.ldv_38985.disk = mdev->new_state_tmp.ldv_38985.disk;
#line 942
        ns.ldv_38985.pdsk = mdev->new_state_tmp.ldv_38985.pdsk;
      } else {
#line 944
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 945
        ns.ldv_38985.disk = 0U;
#line 946
        ns.ldv_38985.pdsk = 6U;
      }
#line 948
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 952
  if ((int )ns.ldv_38985.conn > 9 && (int )ns.ldv_38985.conn <= 21) {
#line 953
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 954
      ns.ldv_38985.disk = 8U;
    } else {

    }
#line 955
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 956
      ns.ldv_38985.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 960
  disk_min = D_DISKLESS;
#line 961
  disk_max = D_UP_TO_DATE;
#line 962
  pdsk_min = D_INCONSISTENT;
#line 963
  pdsk_max = D_UNKNOWN;
#line 964
  switch ((unsigned int )ns.ldv_38985.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 970
  disk_min = D_INCONSISTENT;
#line 971
  disk_max = D_OUTDATED;
#line 972
  pdsk_min = D_UP_TO_DATE;
#line 973
  pdsk_max = D_UP_TO_DATE;
#line 974
  goto ldv_51045;
  case 18U: ;
  case 19U: 
#line 977
  disk_min = D_UP_TO_DATE;
#line 978
  disk_max = D_UP_TO_DATE;
#line 979
  pdsk_min = D_UP_TO_DATE;
#line 980
  pdsk_max = D_UP_TO_DATE;
#line 981
  goto ldv_51045;
  case 10U: 
#line 983
  disk_min = D_DISKLESS;
#line 984
  disk_max = D_UP_TO_DATE;
#line 985
  pdsk_min = D_DISKLESS;
#line 986
  pdsk_max = D_UP_TO_DATE;
#line 987
  goto ldv_51045;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 992
  disk_min = D_UP_TO_DATE;
#line 993
  disk_max = D_UP_TO_DATE;
#line 994
  pdsk_min = D_INCONSISTENT;
#line 995
  pdsk_max = D_CONSISTENT;
#line 996
  goto ldv_51045;
  case 17U: 
#line 998
  disk_min = D_INCONSISTENT;
#line 999
  disk_max = D_INCONSISTENT;
#line 1000
  pdsk_min = D_UP_TO_DATE;
#line 1001
  pdsk_max = D_UP_TO_DATE;
#line 1002
  goto ldv_51045;
  case 16U: 
#line 1004
  disk_min = D_UP_TO_DATE;
#line 1005
  disk_max = D_UP_TO_DATE;
#line 1006
  pdsk_min = D_INCONSISTENT;
#line 1007
  pdsk_max = D_INCONSISTENT;
#line 1008
  goto ldv_51045;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1020
  goto ldv_51045;
  }
  ldv_51045: ;
#line 1022
  if ((unsigned int )ns.ldv_38985.disk > (unsigned int )disk_max) {
#line 1023
    ns.ldv_38985.disk = (unsigned char )disk_max;
  } else {

  }
#line 1025
  if ((unsigned int )ns.ldv_38985.disk < (unsigned int )disk_min) {
#line 1026
    tmp___1 = drbd_disk_str(disk_min);
#line 1026
    tmp___2 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.disk);
#line 1026
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from %s to %s\n",
             tmp___2, tmp___1);
#line 1028
    ns.ldv_38985.disk = (unsigned char )disk_min;
  } else {

  }
#line 1030
  if ((unsigned int )ns.ldv_38985.pdsk > (unsigned int )pdsk_max) {
#line 1031
    ns.ldv_38985.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1033
  if ((unsigned int )ns.ldv_38985.pdsk < (unsigned int )pdsk_min) {
#line 1034
    tmp___3 = drbd_disk_str(pdsk_min);
#line 1034
    tmp___4 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.pdsk);
#line 1034
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from %s to %s\n",
             tmp___4, tmp___3);
#line 1036
    ns.ldv_38985.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1039
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38985.conn <= 9) && (int )ns.ldv_38985.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38985.conn > 9) || (int )os.ldv_38985.pdsk <= 5)) {
#line 1042
    ns.ldv_38985.susp_fen = 1U;
  } else {

  }
#line 1044
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38985.disk <= 7) && (int )ns.ldv_38985.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38985.disk > 7) || (int )os.ldv_38985.pdsk > 7)) {
#line 1047
    ns.ldv_38985.susp_nod = 1U;
  } else {

  }
#line 1049
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1050
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1051
      ns.ldv_38985.conn = 20U;
    } else {

    }
#line 1052
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1053
      ns.ldv_38985.conn = 21U;
    } else {

    }
  } else {
#line 1055
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1056
      ns.ldv_38985.conn = 16U;
    } else {

    }
#line 1057
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1058
      ns.ldv_38985.conn = 17U;
    } else {

    }
  }
#line 1061
  return (ns);
}
}
#line 1065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1067
  if (mdev->agreed_pro_version <= 89) {
#line 1068
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1069
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1070
  mdev->ov_position = 0UL;
#line 1071
  if ((unsigned int )cs == 19U) {
#line 1077
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1079
    bit = mdev->ov_start_sector >> 3;
#line 1080
    if (mdev->rs_total <= bit) {
#line 1081
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1083
      mdev->rs_total = 1UL;
    } else {
#line 1085
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1086
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1088
  mdev->ov_left = mdev->rs_total;
#line 1089
  return;
}
}
#line 1091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1093
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1093
  if (tmp != 0) {
#line 1094
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1095
  return;
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1111
  rv = 1;
#line 1112
  warn_sync_abort = 0;
#line 1115
  os = mdev->state;
#line 1117
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1119
  if (ns.i == os.i) {
#line 1120
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1122
  if (((unsigned int )flags & 1U) == 0U) {
#line 1126
    rv = is_valid_state(mdev, ns);
#line 1127
    if ((int )rv <= 0) {
#line 1131
      tmp = is_valid_state(mdev, os);
#line 1131
      if ((int )tmp == (int )rv) {
#line 1132
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1134
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1137
  if ((int )rv <= 0) {
#line 1138
    if (((unsigned int )flags & 2U) != 0U) {
#line 1139
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1140
    return (rv);
  } else {

  }
#line 1143
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1144
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1148
  pbp = (char *)(& pb);
#line 1149
  *pbp = 0;
#line 1150
  if ((int )ns.ldv_38985.role != (int )os.ldv_38985.role) {
#line 1151
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_38985.role);
#line 1151
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_38985.role);
#line 1151
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1151
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1154
  if ((int )ns.ldv_38985.peer != (int )os.ldv_38985.peer) {
#line 1155
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38985.peer);
#line 1155
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_38985.peer);
#line 1155
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1155
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1158
  if ((int )ns.ldv_38985.conn != (int )os.ldv_38985.conn) {
#line 1159
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_38985.conn);
#line 1159
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_38985.conn);
#line 1159
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1159
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1162
  if ((int )ns.ldv_38985.disk != (int )os.ldv_38985.disk) {
#line 1163
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.disk);
#line 1163
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_38985.disk);
#line 1163
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1163
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1166
  if ((int )ns.ldv_38985.pdsk != (int )os.ldv_38985.pdsk) {
#line 1167
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38985.pdsk);
#line 1167
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_38985.pdsk);
#line 1167
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1167
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1170
  tmp___18 = is_susp(ns);
#line 1170
  tmp___19 = is_susp(os);
#line 1170
  if (tmp___18 != tmp___19) {
#line 1171
    tmp___15 = is_susp(ns);
#line 1171
    tmp___16 = is_susp(os);
#line 1171
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1171
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1174
  if ((int )ns.ldv_38985.aftr_isp != (int )os.ldv_38985.aftr_isp) {
#line 1175
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_38985.aftr_isp,
                       (int )ns.ldv_38985.aftr_isp);
#line 1175
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1178
  if ((int )ns.ldv_38985.peer_isp != (int )os.ldv_38985.peer_isp) {
#line 1179
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_38985.peer_isp,
                       (int )ns.ldv_38985.peer_isp);
#line 1179
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1182
  if ((int )ns.ldv_38985.user_isp != (int )os.ldv_38985.user_isp) {
#line 1183
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_38985.user_isp,
                       (int )ns.ldv_38985.user_isp);
#line 1183
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1186
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1197
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1197
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1197
    if (tmp___23 == 0) {
#line 1201
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1207
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1209
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1211
  mdev->state = ns;
#line 1213
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38985.disk > 2) {
#line 1214
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1216
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1217
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1220
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_38985.conn <= 9) {
#line 1222
    tmp___24 = drbd_bm_bits(mdev);
#line 1222
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1224
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1228
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1230
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1231
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1233
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1234
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1237
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1239
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1240
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1243
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1245
    now = jiffies;
#line 1248
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_38985.conn);
#line 1249
    mdev->rs_start = now;
#line 1250
    mdev->rs_last_events = 0;
#line 1251
    mdev->rs_last_sect_ev = 0;
#line 1252
    mdev->ov_last_oos_size = 0UL;
#line 1253
    mdev->ov_last_oos_start = 0UL;
#line 1255
    i = 0;
#line 1255
    goto ldv_51089;
    ldv_51088: 
#line 1256
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1257
    mdev->rs_mark_time[i] = now;
#line 1255
    i = i + 1;
    ldv_51089: ;
#line 1255
    if (i <= 7) {
#line 1256
      goto ldv_51088;
    } else {

    }
#line 1260
    drbd_rs_controller_reset(mdev);
#line 1262
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1263
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1265
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1269
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1269
  if (tmp___26 != 0) {
#line 1270
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1274
    tmp___25 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1274
    if (tmp___25 != 0) {
#line 1275
      mdf = mdf | 64U;
    } else {

    }
#line 1276
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_38985.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1278
      mdf = mdf | 2U;
    } else {

    }
#line 1279
    if ((int )mdev->state.ldv_38985.conn > 9) {
#line 1280
      mdf = mdf | 4U;
    } else {

    }
#line 1281
    if ((int )mdev->state.ldv_38985.disk > 4) {
#line 1282
      mdf = mdf | 1U;
    } else {

    }
#line 1283
    if ((int )mdev->state.ldv_38985.disk > 5) {
#line 1284
      mdf = mdf | 16U;
    } else {

    }
#line 1285
    if ((int )mdev->state.ldv_38985.pdsk <= 5 && (int )mdev->state.ldv_38985.pdsk > 3) {
#line 1286
      mdf = mdf | 32U;
    } else {

    }
#line 1287
    if ((mdev->ldev)->md.flags != mdf) {
#line 1288
      (mdev->ldev)->md.flags = mdf;
#line 1289
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1291
    if ((int )os.ldv_38985.disk <= 6 && (int )ns.ldv_38985.disk > 6) {
#line 1292
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1293
    put_ldev(mdev);
  } else {

  }
#line 1297
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1299
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1302
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1303
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1306
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1307
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1310
  if (((int )os.ldv_38985.conn > 7 && (int )ns.ldv_38985.conn <= 7) && (int )ns.ldv_38985.conn > 2) {
#line 1312
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1315
  if ((int )os.ldv_38985.conn <= 9 && (int )ns.ldv_38985.conn > 9) {
#line 1316
    drbd_resume_al(mdev);
  } else {

  }
#line 1318
  tmp___27 = kmalloc(48UL, 32U);
#line 1318
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1319
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1320
    ascw->os = os;
#line 1321
    ascw->ns = ns;
#line 1322
    ascw->flags = flags;
#line 1323
    ascw->w.cb = & w_after_state_ch;
#line 1324
    ascw->done = done;
#line 1325
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1327
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1330
  return (rv);
}
}
#line 1333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1336
  __mptr = (struct drbd_work  const  *)w;
#line 1336
  ascw = (struct after_state_chg_work *)__mptr;
#line 1337
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1338
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1339
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1339
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1339);
    } else {

    }
#line 1340
    complete(ascw->done);
  } else {

  }
#line 1342
  kfree((void const   *)ascw);
#line 1344
  return (1);
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1349
  if (rv != 0) {
#line 1350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1351
    val.i = 0U;
#line 1351
    val.ldv_38985.conn = 10U;
#line 1351
    mask.i = 0U;
#line 1351
    mask.ldv_38985.conn = 31U;
#line 1351
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1352
    return;
  } else {

  }
#line 1355
  switch ((int )mdev->state.ldv_38985.conn) {
  case 12: 
#line 1357
  val___0.i = 0U;
#line 1357
  val___0.ldv_38985.conn = 15U;
#line 1357
  mask___0.i = 0U;
#line 1357
  mask___0.ldv_38985.conn = 31U;
#line 1357
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1358
  goto ldv_51113;
  case 11: 
#line 1360
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1361
  goto ldv_51113;
  }
  ldv_51113: ;
#line 1364
  return;
}
}
#line 1365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1371
  tmp = get_current();
#line 1371
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1371);
  } else {

  }
#line 1374
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 1376
  drbd_bm_lock(mdev, why, flags);
#line 1377
  rv = (*io_fn)(mdev);
#line 1378
  drbd_bm_unlock(mdev);
#line 1380
  drbd_resume_io(mdev);
#line 1382
  return (rv);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 1396
  what = nothing;
#line 1397
  nsm.i = 4294967295U;
#line 1399
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1400
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1401
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1402
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1405
  fp = FP_DONT_CARE;
#line 1406
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1406
  if (tmp != 0) {
#line 1407
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1408
    put_ldev(mdev);
  } else {

  }
#line 1412
  drbd_bcast_state(mdev, ns);
#line 1414
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38985.disk > 7) || (int )os.ldv_38985.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38985.disk <= 7) && (int )ns.ldv_38985.pdsk <= 7)) {
#line 1416
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1421
  nsm.i = 4294967295U;
#line 1422
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1423
    if ((int )os.ldv_38985.conn <= 9 && (int )ns.ldv_38985.conn > 9) {
#line 1424
      what = resend;
    } else {

    }
#line 1426
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38985.disk > 1) {
#line 1427
      what = restart_frozen_disk_io;
    } else {

    }
#line 1429
    if ((unsigned int )what != 26U) {
#line 1430
      nsm.ldv_38985.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1433
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1435
    if ((int )os.ldv_38985.pdsk > 5 && (int )ns.ldv_38985.pdsk <= 5) {
#line 1436
      tl_clear(mdev);
#line 1437
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1437
      if (tmp___0 != 0) {
#line 1438
        drbd_uuid_new_current(mdev);
#line 1439
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1441
      spin_lock_irq(& mdev->req_lock);
#line 1442
      __ns.i = mdev->state.i;
#line 1442
      __ns.ldv_38985.susp_fen = 0U;
#line 1442
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1443
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1446
    if ((int )os.ldv_38985.conn <= 9 && (int )ns.ldv_38985.conn > 9) {
#line 1447
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1448
      what = resend;
#line 1449
      nsm.ldv_38985.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1453
  if ((unsigned int )what != 26U) {
#line 1454
    spin_lock_irq(& mdev->req_lock);
#line 1455
    _tl_restart(mdev, what);
#line 1456
    nsm.i = nsm.i & mdev->state.i;
#line 1457
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1458
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1465
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1465
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1465
    if (tmp___1 != 0) {
#line 1468
      drbd_gen_and_send_sync_uuid(mdev);
#line 1469
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1473
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_38985.pdsk > 0) {
#line 1474
    drbd_send_uuids(mdev);
#line 1475
    drbd_send_state(mdev);
  } else {

  }
#line 1480
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1482
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1487
  if ((((int )os.ldv_38985.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_38985.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1493
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1493
    if (tmp___3 != 0) {
#line 1494
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38985.disk > 7) {
#line 1496
        tmp___2 = is_susp(mdev->state);
#line 1496
        if (tmp___2 != 0) {
#line 1497
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1499
          drbd_uuid_new_current(mdev);
#line 1500
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1503
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1507
  if ((int )ns.ldv_38985.pdsk <= 3) {
#line 1507
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1507
    if (tmp___4 != 0) {
#line 1508
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1509
        drbd_uuid_new_current(mdev);
#line 1510
        drbd_send_uuids(mdev);
      } else {

      }
#line 1514
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1518
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_DONT_CLEAR);
      } else {

      }
#line 1520
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1526
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_38985.conn <= 10) {
#line 1526
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1526
    if (tmp___5 != 0) {
#line 1530
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1532
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1536
  if (((int )ns.ldv_38985.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1538
    drbd_send_sizes(mdev, 0, 0);
#line 1539
    drbd_send_uuids(mdev);
#line 1540
    drbd_send_state(mdev);
  } else {

  }
#line 1544
  if ((int )ns.ldv_38985.conn > 9 && ((int )os.ldv_38985.aftr_isp != (int )ns.ldv_38985.aftr_isp || (int )os.ldv_38985.user_isp != (int )ns.ldv_38985.user_isp)) {
#line 1547
    drbd_send_state(mdev);
  } else {

  }
#line 1550
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1552
    suspend_other_sg(mdev);
  } else {

  }
#line 1556
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_38985.conn > 9) {
#line 1557
    drbd_send_state(mdev);
  } else {

  }
#line 1559
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1560
    drbd_send_state(mdev);
  } else {

  }
#line 1563
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1566
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1571
  if ((((int )os.ldv_38985.conn <= 9 && (int )ns.ldv_38985.conn <= 9) && (int )os.ldv_38985.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1574
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1579
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1585
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1586
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1591
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1592
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.disk);
#line 1592
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___6);
    } else {

    }
#line 1596
    tmp___7 = drbd_send_state(mdev);
#line 1596
    if (tmp___7 != 0) {
#line 1597
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1599
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1601
    drbd_rs_cancel_all(mdev);
#line 1606
    drbd_md_sync(mdev);
#line 1607
    put_ldev(mdev);
#line 1609
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1610
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1616
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1619
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1620
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38985.disk);
#line 1620
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1624
    mdev->rs_total = 0UL;
#line 1625
    mdev->rs_failed = 0UL;
#line 1626
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1628
    tmp___9 = drbd_send_state(mdev);
#line 1628
    if (tmp___9 != 0) {
#line 1629
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {

    }
#line 1632
    put_ldev(mdev);
  } else {

  }
#line 1636
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1637
    drbd_send_state(mdev);
  } else {

  }
#line 1640
  if ((int )ns.ldv_38985.disk > 3 && (int )ns.ldv_38985.pdsk > 3) {
#line 1640
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1640
    if (tmp___10 != 0) {
#line 1642
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1643
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1647
  if ((((int )os.ldv_38985.conn > 10 && (int )ns.ldv_38985.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1650
    resume_next_sg(mdev);
  } else {

  }
#line 1654
  if (((int )os.ldv_38985.disk <= 7 && (int )os.ldv_38985.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1655
    drbd_send_state(mdev);
  } else {

  }
#line 1664
  if ((int )os.ldv_38985.conn > 10 && (int )ns.ldv_38985.conn <= 10) {
#line 1664
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1664
    if (tmp___11 != 0) {
#line 1665
      drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished",
                           BM_DONT_CLEAR);
#line 1667
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1671
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1671
    tmp___12 = is_susp(ns);
#line 1671
    if (tmp___12 == 0) {
#line 1671
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1672
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1675
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1676
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1680
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1683
    if ((int )os.ldv_38985.aftr_isp != (int )ns.ldv_38985.aftr_isp) {
#line 1684
      resume_next_sg(mdev);
    } else {

    }
#line 1686
    tmp___13 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1686
    if (tmp___13 != 0) {
#line 1687
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1690
  drbd_md_sync(mdev);
#line 1691
  return;
}
}
#line 1694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1696
  thi = (struct drbd_thread *)arg;
#line 1697
  mdev = thi->mdev;
  restart: 
#line 1702
  retval = (*(thi->function))(thi);
#line 1704
  tmp = spinlock_check(& thi->t_lock);
#line 1704
  flags = _raw_spin_lock_irqsave(tmp);
#line 1716
  if ((unsigned int )thi->t_state == 3U) {
#line 1717
    tmp___0 = get_current();
#line 1717
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1718
    thi->t_state = Running;
#line 1719
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1720
    goto restart;
  } else {

  }
#line 1723
  thi->task = 0;
#line 1724
  thi->t_state = None;
#line 1725
  __asm__  volatile   ("mfence": : : "memory");
#line 1726
  complete(& thi->stop);
#line 1727
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1729
  tmp___1 = get_current();
#line 1729
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1732
  module_put(& __this_module);
#line 1733
  return (retval);
}
}
#line 1736 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1739
  spinlock_check(& thi->t_lock);
#line 1739
  __raw_spin_lock_init(& thi->t_lock.ldv_6020.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1740
  thi->task = 0;
#line 1741
  thi->t_state = None;
#line 1742
  thi->function = func;
#line 1743
  thi->mdev = mdev;
#line 1744
  return;
}
}
#line 1746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1748
  mdev = thi->mdev;
#line 1752
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1759
  tmp = spinlock_check(& thi->t_lock);
#line 1759
  flags = _raw_spin_lock_irqsave(tmp);
#line 1761
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1763
  tmp___0 = get_current();
#line 1763
  tmp___1 = get_current();
#line 1763
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1767
  tmp___2 = try_module_get___0(& __this_module);
#line 1767
  if (tmp___2 == 0) {
#line 1768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1769
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1770
    return (0);
  } else {

  }
#line 1773
  init_completion(& thi->stop);
#line 1774
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1774);
  } else {

  }
#line 1775
  thi->reset_cpu_mask = 1;
#line 1776
  thi->t_state = Running;
#line 1777
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1778
  tmp___3 = get_current();
#line 1778
  flush_signals(tmp___3);
#line 1780
  tmp___4 = mdev_to_minor(mdev);
#line 1780
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___4,
                              me);
#line 1783
  tmp___5 = IS_ERR((void const   *)nt);
#line 1783
  if (tmp___5 != 0L) {
#line 1784
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1786
    module_put(& __this_module);
#line 1787
    return (0);
  } else {

  }
#line 1789
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1789
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1790
  thi->task = nt;
#line 1791
  thi->t_state = Running;
#line 1792
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1793
  wake_up_process(nt);
#line 1794
  goto ldv_51169;
  case 2U: 
#line 1796
  thi->t_state = Restarting;
#line 1797
  tmp___7 = get_current();
#line 1797
  tmp___8 = get_current();
#line 1797
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1803
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1804
  goto ldv_51169;
  }
  ldv_51169: ;
#line 1807
  return (1);
}
}
#line 1811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1815
  ns = restart != 0 ? Restarting : Exiting;
#line 1818
  tmp = spinlock_check(& thi->t_lock);
#line 1818
  flags = _raw_spin_lock_irqsave(tmp);
#line 1820
  if ((unsigned int )thi->t_state == 0U) {
#line 1821
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1822
    if (restart != 0) {
#line 1823
      drbd_thread_start(thi);
    } else {

    }
#line 1824
    return;
  } else {

  }
#line 1827
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1828
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1829
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1830
      return;
    } else {

    }
#line 1833
    thi->t_state = ns;
#line 1834
    __asm__  volatile   ("mfence": : : "memory");
#line 1835
    init_completion(& thi->stop);
#line 1836
    tmp___0 = get_current();
#line 1836
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1837
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1841
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1843
  if (wait != 0) {
#line 1844
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1845
  return;
}
}
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1860
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1860
  if (tmp != 0U) {
#line 1861
    return;
  } else {

  }
#line 1863
  tmp___0 = mdev_to_minor(mdev);
#line 1863
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1863
  ord = (int )(tmp___0 % tmp___1);
#line 1864
  cpu = -1;
#line 1864
  goto ldv_51190;
  ldv_51189: 
#line 1865
  tmp___2 = ord;
#line 1865
  ord = ord - 1;
#line 1865
  if (tmp___2 == 0) {
#line 1866
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1867
    return;
  } else {

  }
  ldv_51190: 
#line 1864
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1864
  cpu = (int )tmp___3;
#line 1864
  if (cpu < nr_cpu_ids) {
#line 1865
    goto ldv_51189;
  } else {

  }
#line 1871
  cpumask_setall(mdev->cpu_mask);
#line 1872
  return;
}
}
#line 1881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1883
  tmp = get_current();
#line 1883
  p = tmp;
#line 1884
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1889
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1889
  if (_b != 0) {
#line 1889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1889);
  } else {

  }
#line 1889
  if (_b != 0) {
#line 1890
    return;
  } else {

  }
#line 1891
  if (thi->reset_cpu_mask == 0) {
#line 1892
    return;
  } else {

  }
#line 1893
  thi->reset_cpu_mask = 0;
#line 1894
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1895
  return;
}
}
#line 1899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1905
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1905
  if (_b != 0) {
#line 1905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1905);
  } else {

  }
#line 1905
  if (_b != 0) {
#line 1905
    return (0);
  } else {

  }
#line 1906
  _b___0 = size == 0UL;
#line 1906
  if (_b___0 != 0) {
#line 1906
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1906);
  } else {

  }
#line 1906
  if (_b___0 != 0) {
#line 1906
    return (0);
  } else {

  }
#line 1908
  h->magic = 1728214147U;
#line 1909
  tmp = __fswab16((int )((__u16 )cmd));
#line 1909
  h->command = tmp;
#line 1910
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1910
  h->length = tmp___0;
#line 1912
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1914
  ok = (size_t )sent == size;
#line 1915
  if (ok == 0) {
#line 1915
    tmp___2 = get_current();
#line 1915
    tmp___3 = signal_pending(tmp___2);
#line 1915
    if (tmp___3 == 0) {
#line 1916
      tmp___1 = cmdname(cmd);
#line 1916
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 1918
  return (ok);
}
}
#line 1924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1927
  ok = 0;
#line 1930
  if (use_data_socket != 0) {
#line 1931
    ldv_mutex_lock_147(& mdev->data.mutex);
#line 1932
    sock = mdev->data.socket;
  } else {
#line 1934
    ldv_mutex_lock_148(& mdev->meta.mutex);
#line 1935
    sock = mdev->meta.socket;
  }
#line 1940
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1940
  if (tmp != 0L) {
#line 1941
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1943
  if (use_data_socket != 0) {
#line 1944
    ldv_mutex_unlock_149(& mdev->data.mutex);
  } else {
#line 1946
    ldv_mutex_unlock_150(& mdev->meta.mutex);
  }
#line 1947
  return (ok);
}
}
#line 1950 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1956
  h.magic = 1728214147U;
#line 1957
  tmp = __fswab16((int )((__u16 )cmd));
#line 1957
  h.command = tmp;
#line 1958
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1958
  h.length = tmp___0;
#line 1960
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1960
  if (tmp___1 == 0) {
#line 1961
    return (0);
  } else {

  }
#line 1963
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1963
  ok = tmp___2 == 8;
#line 1965
  if (ok != 0) {
#line 1965
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1965
    if ((size_t )tmp___3 == size) {
#line 1965
      tmp___4 = 1;
    } else {
#line 1965
      tmp___4 = 0;
    }
  } else {
#line 1965
    tmp___4 = 0;
  }
#line 1965
  ok = tmp___4;
#line 1968
  drbd_put_data_sock___0(mdev);
#line 1970
  return (ok);
}
}
#line 1973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1978
  apv = mdev->agreed_pro_version;
#line 1980
  if (apv > 87) {
#line 1980
    if (apv == 88) {
#line 1980
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1980
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1980
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1980
    size = tmp___0;
  } else {
#line 1980
    size = 12;
  }
#line 1989
  ldv_mutex_lock_151(& mdev->data.mutex);
#line 1990
  sock = mdev->data.socket;
#line 1992
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1992
  if (tmp___6 != 0L) {
#line 1993
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1995
    p = & mdev->data.sbuf.rs_param_95;
#line 1998
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2000
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2000
    p->rate = tmp___1;
#line 2001
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2001
    p->c_plan_ahead = tmp___2;
#line 2002
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2002
    p->c_delay_target = tmp___3;
#line 2003
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2003
    p->c_fill_target = tmp___4;
#line 2004
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2004
    p->c_max_rate = tmp___5;
#line 2006
    if (apv > 87) {
#line 2007
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2008
    if (apv > 88) {
#line 2009
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2011
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2013
    rv = 0;
  }
#line 2015
  ldv_mutex_unlock_152(& mdev->data.mutex);
#line 2017
  return (rv);
}
}
#line 2020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2025
  size = 32;
#line 2027
  if (mdev->agreed_pro_version > 86) {
#line 2028
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2028
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2032
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2032
  p = (struct p_protocol *)tmp___0;
#line 2033
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2034
    return (0);
  } else {

  }
#line 2036
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2036
  p->protocol = tmp___1;
#line 2037
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2037
  p->after_sb_0p = tmp___2;
#line 2038
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2038
  p->after_sb_1p = tmp___3;
#line 2039
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2039
  p->after_sb_2p = tmp___4;
#line 2040
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2040
  p->two_primaries = tmp___5;
#line 2042
  cf = 0;
#line 2043
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2044
    cf = cf | 1;
  } else {

  }
#line 2045
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2046
    if (mdev->agreed_pro_version > 91) {
#line 2047
      cf = cf | 2;
    } else {
#line 2049
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2050
      kfree((void const   *)p);
#line 2051
      return (-1);
    }
  } else {

  }
#line 2054
  tmp___6 = __fswab32((__u32 )cf);
#line 2054
  p->conn_flags = tmp___6;
#line 2056
  if (mdev->agreed_pro_version > 86) {
#line 2057
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2059
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2061
  kfree((void const   *)p);
#line 2062
  return (rv);
}
}
#line 2065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2070
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2070
  if (tmp == 0) {
#line 2071
    return (1);
  } else {

  }
#line 2073
  i = 0;
#line 2073
  goto ldv_51256;
  ldv_51255: ;
#line 2074
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2074
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2074
    p.uuid[i] = tmp___0;
  } else {
#line 2074
    p.uuid[i] = 0ULL;
  }
#line 2073
  i = i + 1;
  ldv_51256: ;
#line 2073
  if (i <= 3) {
#line 2074
    goto ldv_51255;
  } else {

  }
#line 2076
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2077
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2077
  p.uuid[4] = tmp___1;
#line 2078
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2079
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2079
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2080
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2081
  tmp___3 = __fswab64(uuid_flags);
#line 2081
  p.uuid[5] = tmp___3;
#line 2083
  put_ldev(mdev);
#line 2085
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2085
  return (tmp___4);
}
}
#line 2089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2091
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2091
  return (tmp);
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2096
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2096
  return (tmp);
}
}
#line 2099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2101
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2101
  if (tmp != 0) {
#line 2102
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2103
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2109
    put_ldev(mdev);
  } else {
#line 2111
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2112
  return;
}
}
#line 2117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2122
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2122);
  } else {

  }
#line 2124
  uuid = (mdev->ldev)->md.uuid[1] + 281474976710656ULL;
#line 2125
  drbd_uuid_set(mdev, 1, uuid);
#line 2126
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2127
  drbd_md_sync(mdev);
#line 2128
  tmp = __fswab64(uuid);
#line 2128
  p.uuid = tmp;
#line 2130
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2130
  return (tmp___0);
}
}
#line 2134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2141
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2141
  if (tmp___0 != 0) {
#line 2142
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2142
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2142);
    } else {

    }
#line 2143
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2144
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2145
    q_order_type = drbd_queue_order_type(mdev);
#line 2146
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2146
    max_bio_size = (int )(tmp << 9);
#line 2147
    __min1 = max_bio_size;
#line 2147
    __min2 = 131072;
#line 2147
    max_bio_size = __min1 < __min2 ? __min1 : __min2;
#line 2148
    put_ldev(mdev);
  } else {
#line 2150
    d_size = 0UL;
#line 2151
    u_size = 0UL;
#line 2152
    q_order_type = 0;
#line 2153
    max_bio_size = 131072;
  }
#line 2156
  tmp___1 = __fswab64((__u64 )d_size);
#line 2156
  p.d_size = tmp___1;
#line 2157
  tmp___2 = __fswab64((__u64 )u_size);
#line 2157
  p.u_size = tmp___2;
#line 2158
  if (trigger_reply == 0) {
#line 2158
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2158
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2158
    tmp___4 = 0ULL;
  }
#line 2158
  tmp___5 = __fswab64(tmp___4);
#line 2158
  p.c_size = tmp___5;
#line 2159
  tmp___6 = __fswab32((__u32 )max_bio_size);
#line 2159
  p.max_bio_size = tmp___6;
#line 2160
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2160
  p.queue_order_type = tmp___7;
#line 2161
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2161
  p.dds_flags = tmp___8;
#line 2163
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2165
  return (ok);
}
}
#line 2172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2176
  ok = 0;
#line 2180
  drbd_state_lock___0(mdev);
#line 2182
  ldv_mutex_lock_153(& mdev->data.mutex);
#line 2184
  tmp = __fswab32(mdev->state.i);
#line 2184
  p.state = tmp;
#line 2185
  sock = mdev->data.socket;
#line 2187
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2187
  if (tmp___0 != 0L) {
#line 2188
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2192
  ldv_mutex_unlock_154(& mdev->data.mutex);
#line 2194
  drbd_state_unlock(mdev);
#line 2195
  return (ok);
}
}
#line 2198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2203
  tmp = __fswab32(mask.i);
#line 2203
  p.mask = tmp;
#line 2204
  tmp___0 = __fswab32(val.i);
#line 2204
  p.val = tmp___0;
#line 2206
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2206
  return (tmp___1);
}
}
#line 2210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2214
  tmp = __fswab32((__u32 )retcode);
#line 2214
  p.retcode = tmp;
#line 2216
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2216
  return (tmp___0);
}
}
#line 2220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2233
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2235
    return (0);
  } else {

  }
#line 2237
  if (c->bit_offset >= c->bm_bits) {
#line 2238
    return (0);
  } else {

  }
#line 2241
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2242
  memset((void *)(& p->code), 0, 4087UL);
#line 2244
  plain_bits = 0UL;
#line 2249
  toggle = 2U;
  ldv_51319: ;
#line 2254
  if (toggle == 0U) {
#line 2254
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2254
    tmp = tmp___0;
  } else {
#line 2254
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2254
    tmp = tmp___1;
  }
#line 2256
  if (tmp == 0xffffffffffffffffUL) {
#line 2257
    tmp = c->bm_bits;
  } else {

  }
#line 2258
  rl = tmp - c->bit_offset;
#line 2260
  if (toggle == 2U) {
#line 2261
    if (rl == 0UL) {
#line 2264
      DCBP_set_start(p, 1);
#line 2266
      toggle = toggle == 0U;
#line 2267
      goto ldv_51317;
    } else {

    }
#line 2269
    DCBP_set_start(p, 0);
  } else {

  }
#line 2274
  if (rl == 0UL) {
#line 2275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2277
    return (-1);
  } else {

  }
#line 2280
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2281
  if (bits == -105) {
#line 2282
    goto ldv_51318;
  } else {

  }
#line 2283
  if (bits <= 0) {
#line 2284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2285
    return (0);
  } else {

  }
#line 2288
  toggle = toggle == 0U;
#line 2289
  plain_bits = plain_bits + rl;
#line 2290
  c->bit_offset = tmp;
  ldv_51317: ;
#line 2291
  if (c->bit_offset < c->bm_bits) {
#line 2292
    goto ldv_51319;
  } else {

  }
  ldv_51318: 
#line 2293
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2295
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2298
    c->bit_offset = c->bit_offset - plain_bits;
#line 2299
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2300
    c->bit_offset = c->word_offset * 64UL;
#line 2301
    return (0);
  } else {

  }
#line 2306
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2309
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2311
  return ((int )len);
}
}
#line 2321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2324
  p = (struct p_compressed_bm *)h;
#line 2329
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2331
  if (len < 0) {
#line 2332
    return (-5);
  } else {

  }
#line 2334
  if (len != 0) {
#line 2335
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2336
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2339
    c->packets[0] = c->packets[0] + 1U;
#line 2340
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2342
    if (c->bit_offset >= c->bm_bits) {
#line 2343
      len = 0;
    } else {

    }
  } else {
#line 2347
    __min1 = 511UL;
#line 2347
    __min2 = c->bm_words - c->word_offset;
#line 2347
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2348
    len = (int )((unsigned int )num_words * 8U);
#line 2349
    if (len != 0) {
#line 2350
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2351
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2353
    c->word_offset = c->word_offset + num_words;
#line 2354
    c->bit_offset = c->word_offset * 64UL;
#line 2356
    c->packets[1] = c->packets[1] + 1U;
#line 2357
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2359
    if (c->bit_offset > c->bm_bits) {
#line 2360
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2362
  if (ok != 0) {
#line 2363
    if (len == 0) {
#line 2364
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2365
      return (0);
    } else {
#line 2367
      return (1);
    }
  } else {

  }
#line 2369
  return (-5);
}
}
#line 2373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2379
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2379
  if (_b != 0) {
#line 2379
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2379);
  } else {

  }
#line 2379
  if (_b != 0) {
#line 2379
    return (0);
  } else {

  }
#line 2383
  tmp = __get_free_pages(16U, 0U);
#line 2383
  p = (struct p_header80 *)tmp;
#line 2384
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2386
    return (0);
  } else {

  }
#line 2389
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2389
  if (tmp___2 != 0) {
#line 2390
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2390
    if (tmp___1 != 0) {
#line 2391
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2392
      drbd_bm_set_all(mdev);
#line 2393
      tmp___0 = drbd_bm_write(mdev);
#line 2393
      if (tmp___0 != 0) {
#line 2397
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2399
        drbd_md_clear_flag(mdev, 8);
#line 2400
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2403
    put_ldev(mdev);
  } else {

  }
#line 2406
  tmp___3 = drbd_bm_bits(mdev);
#line 2406
  tmp___4 = drbd_bm_words(mdev);
#line 2406
  __constr_expr_0.bm_bits = tmp___3;
#line 2406
  __constr_expr_0.bm_words = tmp___4;
#line 2406
  __constr_expr_0.bit_offset = 0UL;
#line 2406
  __constr_expr_0.word_offset = 0UL;
#line 2406
  __constr_expr_0.packets[0] = 0U;
#line 2406
  __constr_expr_0.packets[1] = 0U;
#line 2406
  __constr_expr_0.bytes[0] = 0U;
#line 2406
  __constr_expr_0.bytes[1] = 0U;
#line 2406
  c = __constr_expr_0;
  ldv_51342: 
#line 2412
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2413
  if (err > 0) {
#line 2414
    goto ldv_51342;
  } else {

  }
#line 2415
  free_pages((unsigned long )p, 0U);
#line 2416
  return (err == 0);
}
}
#line 2419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2423
  tmp = drbd_get_data_sock___0(mdev);
#line 2423
  if (tmp == 0) {
#line 2424
    return (-1);
  } else {

  }
#line 2425
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2425
  err = tmp___0 == 0;
#line 2426
  drbd_put_data_sock___0(mdev);
#line 2427
  return (err);
}
}
#line 2430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2435
  p.barrier = barrier_nr;
#line 2436
  tmp = __fswab32(set_size);
#line 2436
  p.set_size = tmp;
#line 2438
  if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 2439
    return (0);
  } else {

  }
#line 2440
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2442
  return (ok);
}
}
#line 2453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2461
  p.sector = sector;
#line 2462
  p.block_id = block_id;
#line 2463
  p.blksize = blksize;
#line 2464
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2464
  tmp___0 = __fswab32((__u32 )tmp);
#line 2464
  p.seq_num = tmp___0;
#line 2466
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_38985.conn <= 9) {
#line 2467
    return (0);
  } else {

  }
#line 2468
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2470
  return (ok);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2479
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2479
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2479
    tmp___0 = tmp;
  } else {
#line 2479
    tmp___0 = 0U;
  }
#line 2479
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2481
  tmp___1 = __fswab32((__u32 )data_size);
#line 2481
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2481
  return (tmp___2);
}
}
#line 2485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2488
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2488
  return (tmp);
}
}
#line 2497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2500
  tmp = __fswab32(e->size);
#line 2500
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2500
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_47927.block_id);
#line 2500
  return (tmp___1);
}
}
#line 2508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2511
  tmp = __fswab64(block_id);
#line 2511
  tmp___0 = __fswab32((__u32 )blksize);
#line 2511
  tmp___1 = __fswab64((__u64 )sector);
#line 2511
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2511
  return (tmp___2);
}
}
#line 2517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2523
  tmp = __fswab64((__u64 )sector);
#line 2523
  p.sector = tmp;
#line 2524
  p.block_id = block_id;
#line 2525
  tmp___0 = __fswab32((__u32 )size);
#line 2525
  p.blksize = tmp___0;
#line 2527
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2529
  return (ok);
}
}
#line 2532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2540
  tmp = __fswab64((__u64 )sector);
#line 2540
  p.sector = tmp;
#line 2541
  p.block_id = 1728263026ULL;
#line 2542
  tmp___0 = __fswab32((__u32 )size);
#line 2542
  p.blksize = tmp___0;
#line 2544
  p.head.magic = 1728214147U;
#line 2545
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2545
  p.head.command = tmp___1;
#line 2546
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2546
  p.head.length = tmp___2;
#line 2548
  ldv_mutex_lock_155(& mdev->data.mutex);
#line 2550
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2550
  ok = tmp___3 == 32;
#line 2551
  if (ok != 0) {
#line 2551
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2551
    if (tmp___4 == digest_size) {
#line 2551
      tmp___5 = 1;
    } else {
#line 2551
      tmp___5 = 0;
    }
  } else {
#line 2551
    tmp___5 = 0;
  }
#line 2551
  ok = tmp___5;
#line 2553
  ldv_mutex_unlock_156(& mdev->data.mutex);
#line 2555
  return (ok);
}
}
#line 2558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2563
  tmp = __fswab64((__u64 )sector);
#line 2563
  p.sector = tmp;
#line 2564
  p.block_id = 1728261953ULL;
#line 2565
  tmp___0 = __fswab32((__u32 )size);
#line 2565
  p.blksize = tmp___0;
#line 2567
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2569
  return (ok);
}
}
#line 2576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2581
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2581
    tmp___0 = 1;
  } else {
#line 2581
    tmp = get_t_state(& mdev->asender);
#line 2581
    if ((unsigned int )tmp != 1U) {
#line 2581
      tmp___0 = 1;
    } else
#line 2581
    if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 2581
      tmp___0 = 1;
    } else {
#line 2581
      tmp___0 = 0;
    }
  }
#line 2581
  drop_it = tmp___0;
#line 2586
  if (drop_it != 0) {
#line 2587
    return (1);
  } else {

  }
#line 2589
  mdev->ko_count = mdev->ko_count - 1U;
#line 2589
  drop_it = mdev->ko_count == 0U;
#line 2590
  if (drop_it == 0) {
#line 2591
    tmp___1 = get_current();
#line 2591
    tmp___2 = get_current();
#line 2591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2593
    request_ping(mdev);
  } else {

  }
#line 2596
  return (drop_it);
}
}
#line 2620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2623
  tmp = kmap(page);
#line 2623
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2623
  sent = tmp___0;
#line 2624
  kunmap(page);
#line 2625
  if ((size_t )sent == size) {
#line 2626
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2627
  return ((size_t )sent == size);
}
}
#line 2630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2633
  tmp = current_thread_info___3();
#line 2633
  oldfs = tmp->addr_limit;
#line 2635
  len = (int )size;
#line 2643
  if ((int )disable_sendpage) {
#line 2644
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2644
    return (tmp___0);
  } else {
#line 2643
    tmp___1 = page_count(page);
#line 2643
    if (tmp___1 <= 0) {
#line 2644
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2644
      return (tmp___0);
    } else {
#line 2643
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2643
      if (tmp___2 != 0) {
#line 2644
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2644
        return (tmp___0);
      } else {

      }
    }
  }
#line 2646
  msg_flags = msg_flags | 16384U;
#line 2647
  drbd_update_congested(mdev);
#line 2648
  tmp___3 = current_thread_info___3();
#line 2648
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2648
  tmp___3->addr_limit = __constr_expr_0;
  ldv_51441: 
#line 2650
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2650
  sent = (int )tmp___4;
#line 2653
  if (sent == -11) {
#line 2654
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2654
    if (tmp___5 != 0) {
#line 2656
      goto ldv_51438;
    } else {
#line 2658
      goto ldv_51439;
    }
  } else {

  }
#line 2660
  if (sent <= 0) {
#line 2661
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2663
    goto ldv_51438;
  } else {

  }
#line 2665
  len = len - sent;
#line 2666
  offset = offset + sent;
  ldv_51439: ;
#line 2667
  if (len > 0) {
#line 2668
    goto ldv_51441;
  } else {

  }
  ldv_51438: 
#line 2668
  tmp___6 = current_thread_info___3();
#line 2668
  tmp___6->addr_limit = oldfs;
#line 2669
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2671
  ok = len == 0;
#line 2672
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2672
  if (tmp___7 != 0L) {
#line 2673
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2674
  return (ok);
}
}
#line 2677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2682
  bvec = bio->bi_io_vec;
#line 2682
  i = 0;
#line 2682
  goto ldv_51449;
  ldv_51448: 
#line 2683
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2683
  if (tmp == 0) {
#line 2686
    return (0);
  } else {

  }
#line 2682
  bvec = bvec + 1;
#line 2682
  i = i + 1;
  ldv_51449: ;
#line 2682
  if ((int )bio->bi_vcnt > i) {
#line 2683
    goto ldv_51448;
  } else {

  }

#line 2688
  return (1);
}
}
#line 2691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2696
  bvec = bio->bi_io_vec;
#line 2696
  i = 0;
#line 2696
  goto ldv_51458;
  ldv_51457: 
#line 2697
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2697
  if (tmp == 0) {
#line 2700
    return (0);
  } else {

  }
#line 2696
  bvec = bvec + 1;
#line 2696
  i = i + 1;
  ldv_51458: ;
#line 2696
  if ((int )bio->bi_vcnt > i) {
#line 2697
    goto ldv_51457;
  } else {

  }

#line 2702
  return (1);
}
}
#line 2705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2707
  page = e->pages;
#line 2708
  len = e->size;
#line 2710
  goto ldv_51472;
  ldv_51471: 
#line 2711
  __min1 = len;
#line 2711
  __min2 = 4096U;
#line 2711
  l = __min1 < __min2 ? __min1 : __min2;
#line 2712
  tmp = page_chain_next(page);
#line 2712
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2712
  if (tmp___0 == 0) {
#line 2714
    return (0);
  } else {

  }
#line 2715
  len = len - l;
#line 2710
  page = page_chain_next(page);
  ldv_51472: ;
#line 2710
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2710
    tmp___1 = page_chain_next(page);
#line 2710
    __builtin_prefetch((void const   *)tmp___1);
#line 2710
    if (1 != 0) {
#line 2711
      goto ldv_51471;
    } else {
#line 2713
      goto ldv_51473;
    }
  } else {

  }
  ldv_51473: ;
#line 2717
  return (1);
}
}
#line 2720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2722
  if (mdev->agreed_pro_version > 94) {
#line 2723
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 1024UL) != 0UL ? 16 : 0)) | ((bi_rw & 2048UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2728
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2736
  ok = 1;
#line 2738
  dp_flags = 0U;
#line 2742
  tmp = drbd_get_data_sock___0(mdev);
#line 2742
  if (tmp == 0) {
#line 2743
    return (0);
  } else {

  }
#line 2745
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2745
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2745
    dgs = (int )tmp___0;
  } else {
#line 2745
    dgs = 0;
  }
#line 2748
  if (req->size <= 32768U) {
#line 2749
    p.head.h80.magic = 1728214147U;
#line 2750
    p.head.h80.command = 0U;
#line 2751
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2751
    p.head.h80.length = tmp___1;
  } else {
#line 2754
    p.head.h95.magic = 23171U;
#line 2755
    p.head.h95.command = 0U;
#line 2756
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2756
    p.head.h95.length = tmp___2;
  }
#line 2760
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2760
  p.sector = tmp___3;
#line 2761
  p.block_id = (u64 )req;
#line 2762
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2762
  req->seq_num = tmp___4;
#line 2762
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2762
  p.seq_num = tmp___5;
#line 2765
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2767
  if ((int )mdev->state.ldv_38985.conn > 15 && (int )mdev->state.ldv_38985.conn <= 21) {
#line 2769
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2771
  tmp___6 = __fswab32(dp_flags);
#line 2771
  p.dp_flags = tmp___6;
#line 2772
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2773
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2773
  ok = tmp___7 == 32;
#line 2775
  if (ok != 0 && dgs != 0) {
#line 2776
    dgb = mdev->int_dig_out;
#line 2777
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2778
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2778
    ok = tmp___8 == dgs;
  } else {

  }
#line 2780
  if (ok != 0) {
#line 2792
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2793
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2795
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2798
    if (dgs > 0 && dgs <= 64) {
#line 2802
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2803
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2803
      if (tmp___9 != 0) {
#line 2804
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2813
  drbd_put_data_sock___0(mdev);
#line 2815
  return (ok);
}
}
#line 2822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2830
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2830
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2830
    dgs = (int )tmp;
  } else {
#line 2830
    dgs = 0;
  }
#line 2833
  if (e->size <= 32768U) {
#line 2834
    p.head.h80.magic = 1728214147U;
#line 2835
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2835
    p.head.h80.command = tmp___0;
#line 2836
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2836
    p.head.h80.length = tmp___1;
  } else {
#line 2839
    p.head.h95.magic = 23171U;
#line 2840
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2840
    p.head.h95.command = tmp___2;
#line 2841
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2841
    p.head.h95.length = tmp___3;
  }
#line 2845
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2845
  p.sector = tmp___4;
#line 2846
  p.block_id = e->ldv_47927.block_id;
#line 2853
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 2853
  if (tmp___5 == 0) {
#line 2854
    return (0);
  } else {

  }
#line 2856
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2856
  ok = tmp___6 == 32;
#line 2857
  if (ok != 0 && dgs != 0) {
#line 2858
    dgb = mdev->int_dig_out;
#line 2859
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2860
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2860
    ok = tmp___7 == dgs;
  } else {

  }
#line 2862
  if (ok != 0) {
#line 2863
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2865
  drbd_put_data_sock___0(mdev);
#line 2867
  return (ok);
}
}
#line 2870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2874
  tmp = __fswab64((__u64 )req->sector);
#line 2874
  p.sector = tmp;
#line 2875
  tmp___0 = __fswab32(req->size);
#line 2875
  p.blksize = tmp___0;
#line 2877
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 2877
  return (tmp___1);
}
}
#line 2896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2901
  sent = 0;
#line 2903
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2904
    return (-1000);
  } else {

  }
#line 2908
  iov.iov_base = buf;
#line 2909
  iov.iov_len = size;
#line 2911
  msg.msg_name = 0;
#line 2912
  msg.msg_namelen = 0;
#line 2913
  msg.msg_control = 0;
#line 2914
  msg.msg_controllen = 0UL;
#line 2915
  msg.msg_flags = msg_flags | 16384U;
#line 2917
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2918
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2919
    drbd_update_congested(mdev);
  } else {

  }
  ldv_51515: 
#line 2931
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2932
  if (rv == -11) {
#line 2933
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2933
    if (tmp != 0) {
#line 2934
      goto ldv_51513;
    } else {
#line 2936
      goto ldv_51514;
    }
  } else {

  }
#line 2938
  if (rv == 0) {
#line 2938
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2938);
  } else {

  }
#line 2939
  if (rv == -4) {
#line 2940
    tmp___0 = get_current();
#line 2940
    flush_signals(tmp___0);
#line 2941
    rv = 0;
  } else {

  }
#line 2943
  if (rv < 0) {
#line 2944
    goto ldv_51513;
  } else {

  }
#line 2945
  sent = sent + rv;
#line 2946
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2947
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_51514: ;
#line 2948
  if ((size_t )sent < size) {
#line 2949
    goto ldv_51515;
  } else {

  }
  ldv_51513: ;
#line 2950
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2951
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2953
  if (rv <= 0) {
#line 2954
    if (rv != -11) {
#line 2955
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2958
      val.i = 0U;
#line 2958
      val.ldv_38985.conn = 4U;
#line 2958
      mask.i = 0U;
#line 2958
      mask.ldv_38985.conn = 31U;
#line 2958
      drbd_force_state(mdev, mask, val);
    } else {
#line 2960
      val___0.i = 0U;
#line 2960
      val___0.ldv_38985.conn = 3U;
#line 2960
      mask___0.i = 0U;
#line 2960
      mask___0.ldv_38985.conn = 31U;
#line 2960
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2963
  return (sent);
}
}
#line 2966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2968
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2970
  rv = 0;
#line 2972
  ldv_mutex_lock_157(& drbd_main_mutex);
#line 2973
  tmp = spinlock_check(& mdev->req_lock);
#line 2973
  flags = _raw_spin_lock_irqsave(tmp);
#line 2977
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 2978
    if ((mode & 2U) != 0U) {
#line 2979
      rv = -30;
    } else
#line 2980
    if (! allow_oos) {
#line 2981
      rv = -124;
    } else {

    }
  } else {

  }
#line 2984
  if (rv == 0) {
#line 2985
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2986
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2987
  ldv_mutex_unlock_158(& drbd_main_mutex);
#line 2989
  return (rv);
}
}
#line 2992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2994
  mdev = (struct drbd_conf *)gd->private_data;
#line 2995
  ldv_mutex_lock_159(& drbd_main_mutex);
#line 2996
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2997
  ldv_mutex_unlock_160(& drbd_main_mutex);
#line 2998
  return (0);
}
}
#line 3001 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3005
  __constr_expr_0.rate = 250;
#line 3005
  __constr_expr_0.after = -1;
#line 3005
  __constr_expr_0.al_extents = 127;
#line 3005
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3005
  __constr_expr_0.verify_alg_len = 0;
#line 3005
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3005
  __constr_expr_0.cpu_mask_len = 0;
#line 3005
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3005
  __constr_expr_0.csums_alg_len = 0;
#line 3005
  __constr_expr_0.use_rle = 0U;
#line 3005
  __constr_expr_0.on_no_data = 0;
#line 3005
  __constr_expr_0.c_plan_ahead = 0;
#line 3005
  __constr_expr_0.c_delay_target = 10;
#line 3005
  __constr_expr_0.c_fill_target = 0;
#line 3005
  __constr_expr_0.c_max_rate = 102400;
#line 3005
  __constr_expr_0.c_min_rate = 4096;
#line 3005
  mdev->sync_conf = __constr_expr_0;
#line 3023
  __constr_expr_1.ldv_38985.role = 2U;
#line 3023
  __constr_expr_1.ldv_38985.peer = 0U;
#line 3023
  __constr_expr_1.ldv_38985.conn = 0U;
#line 3023
  __constr_expr_1.ldv_38985.disk = 0U;
#line 3023
  __constr_expr_1.ldv_38985.pdsk = 6U;
#line 3023
  __constr_expr_1.ldv_38985.susp = 0U;
#line 3023
  __constr_expr_1.ldv_38985.aftr_isp = (unsigned char)0;
#line 3023
  __constr_expr_1.ldv_38985.peer_isp = (unsigned char)0;
#line 3023
  __constr_expr_1.ldv_38985.user_isp = (unsigned char)0;
#line 3023
  __constr_expr_1.ldv_38985.susp_nod = 0U;
#line 3023
  __constr_expr_1.ldv_38985.susp_fen = 0U;
#line 3023
  __constr_expr_1.ldv_38985._pad = (unsigned short)0;
#line 3023
  mdev->state = __constr_expr_1;
#line 3024
  return;
}
}
#line 3035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;
  struct lock_class_key __key___18 ;

  {
#line 3040
  drbd_set_defaults(mdev);
#line 3042
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3043
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3044
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3045
  atomic_set(& mdev->unacked_cnt, 0);
#line 3046
  atomic_set(& mdev->local_cnt, 0);
#line 3047
  atomic_set(& mdev->net_cnt, 0);
#line 3048
  atomic_set(& mdev->packet_seq, 0);
#line 3049
  atomic_set(& mdev->pp_in_use, 0);
#line 3050
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3051
  atomic_set(& mdev->rs_sect_in, 0);
#line 3052
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3053
  atomic_set(& mdev->ap_in_flight, 0);
#line 3055
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 3056
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 3057
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 3058
  sema_init(& mdev->data.work.s, 0);
#line 3059
  sema_init(& mdev->meta.work.s, 0);
#line 3060
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 3062
  spinlock_check(& mdev->data.work.q_lock);
#line 3062
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_6020.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 3063
  spinlock_check(& mdev->meta.work.q_lock);
#line 3063
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_6020.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 3065
  spinlock_check(& mdev->al_lock);
#line 3065
  __raw_spin_lock_init(& mdev->al_lock.ldv_6020.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 3066
  spinlock_check(& mdev->req_lock);
#line 3066
  __raw_spin_lock_init(& mdev->req_lock.ldv_6020.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 3067
  spinlock_check(& mdev->peer_seq_lock);
#line 3067
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_6020.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 3068
  spinlock_check(& mdev->epoch_lock);
#line 3068
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_6020.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 3070
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3071
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3072
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3073
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3074
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3075
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3076
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3077
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3078
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3079
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3080
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3081
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3082
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3083
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3085
  mdev->resync_work.cb = & w_resync_timer;
#line 3086
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3087
  mdev->go_diskless.cb = & w_go_diskless;
#line 3088
  mdev->md_sync_work.cb = & w_md_sync;
#line 3089
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3090
  mdev->start_resync_work.cb = & w_start_resync;
#line 3091
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 3092
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 3093
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___11);
#line 3094
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___12);
#line 3095
  mdev->resync_timer.function = & resync_timer_fn;
#line 3096
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3097
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3098
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3099
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3100
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3101
  mdev->request_timer.function = & request_timer_fn;
#line 3102
  mdev->request_timer.data = (unsigned long )mdev;
#line 3104
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___13);
#line 3105
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___14);
#line 3106
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___15);
#line 3107
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___16);
#line 3108
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___17);
#line 3109
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___18);
#line 3111
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3112
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3113
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3115
  mdev->agreed_pro_version = 96;
#line 3116
  mdev->write_ordering = WO_bdev_flush;
#line 3117
  mdev->resync_wenr = 4294967295U;
#line 3118
  mdev->peer_max_bio_size = 4096;
#line 3119
  mdev->local_max_bio_size = 4096;
#line 3120
  return;
}
}
#line 3122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3125
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3126
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3130
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3130
  if (tmp___0 != 0) {
#line 3131
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3131
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3132
  tmp___9 = 0UL;
#line 3132
  mdev->rs_failed = tmp___9;
#line 3132
  tmp___8 = tmp___9;
#line 3132
  mdev->rs_total = tmp___8;
#line 3132
  tmp___7 = tmp___8;
#line 3132
  mdev->rs_start = tmp___7;
#line 3132
  tmp___6 = tmp___7;
#line 3132
  mdev->p_size = tmp___6;
#line 3132
  tmp___5 = (unsigned int )tmp___6;
#line 3132
  mdev->writ_cnt = tmp___5;
#line 3132
  tmp___4 = tmp___5;
#line 3132
  mdev->send_cnt = tmp___4;
#line 3132
  tmp___3 = tmp___4;
#line 3132
  mdev->recv_cnt = tmp___3;
#line 3132
  tmp___2 = tmp___3;
#line 3132
  mdev->read_cnt = tmp___2;
#line 3132
  tmp___1 = tmp___2;
#line 3132
  mdev->bm_writ_cnt = tmp___1;
#line 3132
  mdev->al_writ_cnt = tmp___1;
#line 3142
  mdev->rs_last_events = 0;
#line 3143
  mdev->rs_last_sect_ev = 0;
#line 3144
  i = 0;
#line 3144
  goto ldv_51572;
  ldv_51571: 
#line 3145
  mdev->rs_mark_left[i] = 0UL;
#line 3146
  mdev->rs_mark_time[i] = 0UL;
#line 3144
  i = i + 1;
  ldv_51572: ;
#line 3144
  if (i <= 7) {
#line 3145
    goto ldv_51571;
  } else {

  }

#line 3148
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3148
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3148);
  } else {

  }
#line 3150
  drbd_set_my_capacity(mdev, 0UL);
#line 3151
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3153
    drbd_bm_resize(mdev, 0UL, 1);
#line 3154
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3157
  drbd_free_resources(mdev);
#line 3158
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 3164
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3164
  if (tmp___10 == 0) {
#line 3164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3164);
  } else {

  }
#line 3165
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3165
  if (tmp___11 == 0) {
#line 3165
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3165);
  } else {

  }
#line 3166
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3166
  if (tmp___12 == 0) {
#line 3166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3166);
  } else {

  }
#line 3167
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3167
  if (tmp___13 == 0) {
#line 3167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3167);
  } else {

  }
#line 3168
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3168
  if (tmp___14 == 0) {
#line 3168
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3168);
  } else {

  }
#line 3169
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3169
  if (tmp___15 == 0) {
#line 3169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3169);
  } else {

  }
#line 3170
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3170
  if (tmp___16 == 0) {
#line 3170
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3170);
  } else {

  }
#line 3171
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3171
  if (tmp___17 == 0) {
#line 3171
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3171);
  } else {

  }
#line 3172
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3172
  if (tmp___18 == 0) {
#line 3172
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3172);
  } else {

  }
#line 3173
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3173
  if (tmp___19 == 0) {
#line 3173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3173);
  } else {

  }
#line 3174
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3174
  if (tmp___20 == 0) {
#line 3174
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3174);
  } else {

  }
#line 3176
  drbd_set_defaults(mdev);
#line 3177
  return;
}
}
#line 3180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3184
  goto ldv_51579;
  ldv_51578: 
#line 3185
  page = drbd_pp_pool;
#line 3186
  drbd_pp_pool = (struct page *)page->ldv_13201.private;
#line 3187
  __free_pages(page, 0U);
#line 3188
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_51579: ;
#line 3184
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3185
    goto ldv_51578;
  } else {

  }

#line 3193
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3194
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3195
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3196
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3197
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3198
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3199
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3200
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3201
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3202
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3203
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3204
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3206
  drbd_ee_mempool = 0;
#line 3207
  drbd_request_mempool = 0;
#line 3208
  drbd_ee_cache = 0;
#line 3209
  drbd_request_cache = 0;
#line 3210
  drbd_bm_ext_cache = 0;
#line 3211
  drbd_al_ext_cache = 0;
#line 3213
  return;
}
}
#line 3216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3219
  number = (int const   )(minor_count * 32U);
#line 3223
  drbd_request_mempool = 0;
#line 3224
  drbd_ee_cache = 0;
#line 3225
  drbd_request_cache = 0;
#line 3226
  drbd_bm_ext_cache = 0;
#line 3227
  drbd_al_ext_cache = 0;
#line 3228
  drbd_pp_pool = 0;
#line 3231
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 3233
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3234
    goto Enomem;
  } else {

  }
#line 3236
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3238
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3239
    goto Enomem;
  } else {

  }
#line 3241
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3243
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3244
    goto Enomem;
  } else {

  }
#line 3246
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3248
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3249
    goto Enomem;
  } else {

  }
#line 3252
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3254
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3255
    goto Enomem;
  } else {

  }
#line 3257
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3259
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3260
    goto Enomem;
  } else {

  }
#line 3263
  spinlock_check(& drbd_pp_lock);
#line 3263
  __raw_spin_lock_init(& drbd_pp_lock.ldv_6020.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3265
  i = 0;
#line 3265
  goto ldv_51590;
  ldv_51589: 
#line 3266
  page = alloc_pages(131282U, 0U);
#line 3267
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3268
    goto Enomem;
  } else {

  }
#line 3269
  page->ldv_13201.private = (unsigned long )drbd_pp_pool;
#line 3270
  drbd_pp_pool = page;
#line 3265
  i = i + 1;
  ldv_51590: ;
#line 3265
  if (i < number) {
#line 3266
    goto ldv_51589;
  } else {

  }
#line 3272
  drbd_pp_vacant = number;
#line 3274
  return (0);
  Enomem: 
#line 3277
  drbd_destroy_mempools();
#line 3278
  return (-12);
}
}
#line 3281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3288
  return (0);
}
}
#line 3291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3299
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3300
  if (rr != 0) {
#line 3301
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3303
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3304
  if (rr != 0) {
#line 3305
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3307
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3308
  if (rr != 0) {
#line 3309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3311
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3312
  if (rr != 0) {
#line 3313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3315
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3316
  if (rr != 0) {
#line 3317
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3318
  return;
}
}
#line 3322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3324
  tmp = minor_to_mdev(minor);
#line 3324
  mdev = tmp;
#line 3326
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3327
    return;
  } else {

  }
#line 3330
  if (mdev->open_cnt != 0) {
#line 3331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3332);
  } else {

  }
#line 3334
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3334
  _b = tmp___0 == 0;
#line 3334
  if (_b != 0) {
#line 3334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3334);
  } else {

  }
#line 3334
  if (_b != 0) {
#line 3336
    lp = mdev->data.work.q.next;
#line 3336
    goto ldv_51611;
    ldv_51610: 
#line 3337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3336
    lp = lp->next;
    ldv_51611: ;
#line 3336
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3337
      goto ldv_51610;
    } else {

    }

  } else {

  }
#line 3342
  del_gendisk(mdev->vdisk);
#line 3347
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3348
    bdput(mdev->this_bdev);
  } else {

  }
#line 3350
  drbd_free_resources(mdev);
#line 3352
  drbd_release_ee_lists(mdev);
#line 3355
  kfree((void const   *)mdev->ee_hash);
#line 3361
  lc_destroy(mdev->act_log);
#line 3362
  lc_destroy(mdev->resync);
#line 3364
  kfree((void const   *)mdev->p_uuid);
#line 3367
  kfree((void const   *)mdev->int_dig_out);
#line 3368
  kfree((void const   *)mdev->int_dig_in);
#line 3369
  kfree((void const   *)mdev->int_dig_vv);
#line 3374
  drbd_free_mdev(mdev);
#line 3375
  return;
}
}
#line 3377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3381
  unregister_reboot_notifier(& drbd_notifier);
#line 3391
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3392
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3394
  drbd_nl_cleanup();
#line 3396
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3397
    i = minor_count;
#line 3398
    goto ldv_51618;
    ldv_51617: 
#line 3399
    drbd_delete_device(i);
    ldv_51618: 
#line 3398
    tmp = i;
#line 3398
    i = i - 1U;
#line 3398
    if (tmp != 0U) {
#line 3399
      goto ldv_51617;
    } else {

    }
#line 3400
    drbd_destroy_mempools();
  } else {

  }
#line 3403
  kfree((void const   *)minor_table);
#line 3405
  unregister_blkdev(147U, "drbd");
#line 3407
  printk("<6>drbd: module cleanup done.\n");
#line 3408
  return;
}
}
#line 3417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3419
  mdev = (struct drbd_conf *)congested_data;
#line 3421
  reason = 45;
#line 3422
  r = 0;
#line 3424
  tmp = may_inc_ap_bio___0(mdev);
#line 3424
  if (tmp) {
#line 3424
    tmp___0 = 0;
  } else {
#line 3424
    tmp___0 = 1;
  }
#line 3424
  if (tmp___0) {
#line 3426
    r = bdi_bits;
#line 3427
    reason = 100;
#line 3428
    goto out;
  } else {

  }
#line 3431
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3431
  if (tmp___1 != 0) {
#line 3432
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3433
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3434
    put_ldev(mdev);
#line 3435
    if (r != 0) {
#line 3436
      reason = 98;
    } else {

    }
  } else {

  }
#line 3439
  if ((bdi_bits & 4) != 0) {
#line 3439
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3439
    if (tmp___2 != 0) {
#line 3440
      r = r | 4;
#line 3441
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3445
  mdev->congestion_reason = reason;
#line 3446
  return (r);
}
}
#line 3449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3456
  tmp = kzalloc(4848UL, 208U);
#line 3456
  mdev = (struct drbd_conf *)tmp;
#line 3457
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3458
    return (0);
  } else {

  }
#line 3459
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3459
  if (tmp___0) {
#line 3459
    tmp___1 = 0;
  } else {
#line 3459
    tmp___1 = 1;
  }
#line 3459
  if (tmp___1) {
#line 3460
    goto out_no_cpumask;
  } else {

  }
#line 3462
  mdev->minor = minor;
#line 3464
  drbd_init_set_defaults(mdev);
#line 3466
  q = blk_alloc_queue(208U);
#line 3467
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3468
    goto out_no_q;
  } else {

  }
#line 3469
  mdev->rq_queue = q;
#line 3470
  q->queuedata = (void *)mdev;
#line 3472
  disk = alloc_disk(1);
#line 3473
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3474
    goto out_no_disk;
  } else {

  }
#line 3475
  mdev->vdisk = disk;
#line 3477
  set_disk_ro(disk, 1);
#line 3479
  disk->queue = q;
#line 3480
  disk->major = 147;
#line 3481
  disk->first_minor = (int )minor;
#line 3482
  disk->fops = & drbd_ops;
#line 3483
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3484
  disk->private_data = (void *)mdev;
#line 3486
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3488
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3490
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3491
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3493
  blk_queue_make_request(q, & drbd_make_request);
#line 3496
  blk_queue_max_hw_sectors(q, 16U);
#line 3497
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3498
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3499
  q->queue_lock = & mdev->req_lock;
#line 3501
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3502
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3503
    goto out_no_io_page;
  } else {

  }
#line 3505
  tmp___2 = drbd_bm_init(mdev);
#line 3505
  if (tmp___2 != 0) {
#line 3506
    goto out_no_bitmap;
  } else {

  }
#line 3508
  tmp___3 = tl_init(mdev);
#line 3508
  if (tmp___3 == 0) {
#line 3509
    goto out_no_tl;
  } else {

  }
#line 3511
  tmp___4 = kzalloc(120UL, 208U);
#line 3511
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3512
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3513
    goto out_no_app_reads;
  } else {

  }
#line 3515
  tmp___5 = kzalloc(40UL, 208U);
#line 3515
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3516
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3517
    goto out_no_epoch;
  } else {

  }
#line 3519
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3520
  mdev->epochs = 1U;
#line 3522
  return (mdev);
  out_no_epoch: 
#line 3527
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3529
  tl_cleanup(mdev);
  out_no_tl: 
#line 3531
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3533
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3535
  put_disk(disk);
  out_no_disk: 
#line 3537
  blk_cleanup_queue(q);
  out_no_q: 
#line 3539
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3541
  kfree((void const   *)mdev);
#line 3542
  return (0);
}
}
#line 3547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3549
  kfree((void const   *)mdev->current_epoch);
#line 3550
  kfree((void const   *)mdev->app_reads_hash);
#line 3551
  tl_cleanup(mdev);
#line 3552
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3553
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3554
  __free_pages(mdev->md_io_page, 0U);
#line 3555
  put_disk(mdev->vdisk);
#line 3556
  blk_cleanup_queue(mdev->rq_queue);
#line 3557
  free_cpumask_var(mdev->cpu_mask);
#line 3558
  drbd_free_tl_hash(mdev);
#line 3559
  kfree((void const   *)mdev);
#line 3560
  return;
}
}
#line 3563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3574
  if (minor_count == 0U || minor_count > 256U) {
#line 3575
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3578
    return (-22);
  } else {

  }
#line 3584
  err = drbd_nl_init();
#line 3585
  if (err != 0) {
#line 3586
    return (err);
  } else {

  }
#line 3588
  err = register_blkdev(147U, "drbd");
#line 3589
  if (err != 0) {
#line 3590
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3593
    return (err);
  } else {

  }
#line 3596
  register_reboot_notifier(& drbd_notifier);
#line 3601
  err = -12;
#line 3603
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3605
  drbd_proc = 0;
#line 3606
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3606
  minor_table = (struct drbd_conf **)tmp;
#line 3608
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3609
    goto Enomem;
  } else {

  }
#line 3611
  err = drbd_create_mempools();
#line 3612
  if (err != 0) {
#line 3613
    goto Enomem;
  } else {

  }
#line 3615
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3616
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3617
    printk("<3>drbd: unable to register proc file\n");
#line 3618
    goto Enomem;
  } else {

  }
#line 3621
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3623
  printk("<6>drbd: initialized. Version: 8.3.11 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3626
  tmp___0 = drbd_buildtag();
#line 3626
  printk("<6>drbd: %s\n", tmp___0);
#line 3627
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3629
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3631
  return (0);
  Enomem: 
#line 3634
  drbd_cleanup();
#line 3635
  if (err == -12) {
#line 3637
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3639
    printk("<3>drbd: initialization failure\n");
  }
#line 3640
  return (err);
}
}
#line 3643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3645
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3646
    return;
  } else {

  }
#line 3648
  blkdev_put(ldev->backing_bdev, 131U);
#line 3649
  blkdev_put(ldev->md_bdev, 131U);
#line 3651
  kfree((void const   *)ldev);
#line 3652
  return;
}
}
#line 3654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3656
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3657
    ldv_mutex_lock_161(& mdev->data.mutex);
#line 3658
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3659
    sock_release(mdev->data.socket);
#line 3660
    mdev->data.socket = 0;
#line 3661
    ldv_mutex_unlock_162(& mdev->data.mutex);
  } else {

  }
#line 3663
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3664
    ldv_mutex_lock_163(& mdev->meta.mutex);
#line 3665
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3666
    sock_release(mdev->meta.socket);
#line 3667
    mdev->meta.socket = 0;
#line 3668
    ldv_mutex_unlock_164(& mdev->meta.mutex);
  } else {

  }
#line 3670
  return;
}
}
#line 3673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3675
  crypto_free_hash(mdev->csums_tfm);
#line 3676
  mdev->csums_tfm = 0;
#line 3677
  crypto_free_hash(mdev->verify_tfm);
#line 3678
  mdev->verify_tfm = 0;
#line 3679
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3680
  mdev->cram_hmac_tfm = 0;
#line 3681
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3682
  mdev->integrity_w_tfm = 0;
#line 3683
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3684
  mdev->integrity_r_tfm = 0;
#line 3686
  drbd_free_sock(mdev);
#line 3688
  drbd_free_bc(mdev->ldev);
#line 3688
  mdev->ldev = 0;
#line 3689
  return;
}
}
#line 3717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3723
  del_timer(& mdev->md_sync_timer);
#line 3725
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3725
  if (tmp == 0) {
#line 3726
    return;
  } else {

  }
#line 3730
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3730
  if (tmp___0 == 0) {
#line 3731
    return;
  } else {

  }
#line 3733
  ldv_mutex_lock_165(& mdev->md_io_mutex);
#line 3734
  tmp___1 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 3734
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3735
  memset((void *)buffer, 0, 512UL);
#line 3737
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3737
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3737
  buffer->la_size = tmp___3;
#line 3738
  i = 0;
#line 3738
  goto ldv_51683;
  ldv_51682: 
#line 3739
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3739
  buffer->uuid[i] = tmp___4;
#line 3738
  i = i + 1;
  ldv_51683: ;
#line 3738
  if (i <= 3) {
#line 3739
    goto ldv_51682;
  } else {

  }
#line 3740
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3740
  buffer->flags = tmp___5;
#line 3741
  buffer->magic = 1795323011U;
#line 3743
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3743
  buffer->md_size_sect = tmp___6;
#line 3744
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3744
  buffer->al_offset = tmp___7;
#line 3745
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3745
  buffer->al_nr_extents = tmp___8;
#line 3746
  buffer->bm_bytes_per_bit = 1048576U;
#line 3747
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3747
  buffer->device_uuid = tmp___9;
#line 3749
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3749
  buffer->bm_offset = tmp___10;
#line 3750
  tmp___11 = __fswab32((__u32 )mdev->peer_max_bio_size);
#line 3750
  buffer->la_peer_max_bio_size = tmp___11;
#line 3752
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3752
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3752);
  } else {

  }
#line 3753
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3755
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3755
  if (tmp___13 == 0) {
#line 3757
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3758
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3763
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3763
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3765
  ldv_mutex_unlock_166(& mdev->md_io_mutex);
#line 3766
  put_ldev(mdev);
#line 3767
  return;
}
}
#line 3777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  int peer ;
  __u32 tmp___16 ;
  int __max1 ;
  int __max2 ;

  {
#line 3780
  rv = 101;
#line 3782
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3782
  if (tmp == 0) {
#line 3783
    return (118);
  } else {

  }
#line 3785
  ldv_mutex_lock_167(& mdev->md_io_mutex);
#line 3786
  tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 3786
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3788
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3788
  if (tmp___1 == 0) {
#line 3791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3792
    rv = 118;
#line 3793
    goto err;
  } else {

  }
#line 3796
  tmp___2 = __fswab32(buffer->magic);
#line 3796
  if (tmp___2 != 2205418091U) {
#line 3797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3798
    rv = 119;
#line 3799
    goto err;
  } else {

  }
#line 3801
  tmp___4 = __fswab32(buffer->al_offset);
#line 3801
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3802
    tmp___3 = __fswab32(buffer->al_offset);
#line 3802
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3804
    rv = 119;
#line 3805
    goto err;
  } else {

  }
#line 3807
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3807
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3808
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3808
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3810
    rv = 119;
#line 3811
    goto err;
  } else {

  }
#line 3813
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3813
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3814
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3814
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3816
    rv = 119;
#line 3817
    goto err;
  } else {

  }
#line 3820
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3820
  if (tmp___10 != 4096U) {
#line 3821
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3821
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3823
    rv = 119;
#line 3824
    goto err;
  } else {

  }
#line 3827
  tmp___11 = __fswab64(buffer->la_size);
#line 3827
  bdev->md.la_size_sect = tmp___11;
#line 3828
  i = 0;
#line 3828
  goto ldv_51695;
  ldv_51694: 
#line 3829
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3829
  bdev->md.uuid[i] = tmp___12;
#line 3828
  i = i + 1;
  ldv_51695: ;
#line 3828
  if (i <= 3) {
#line 3829
    goto ldv_51694;
  } else {

  }
#line 3830
  tmp___13 = __fswab32(buffer->flags);
#line 3830
  bdev->md.flags = tmp___13;
#line 3831
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3831
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3832
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3832
  bdev->md.device_uuid = tmp___15;
#line 3834
  spin_lock_irq(& mdev->req_lock);
#line 3835
  if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 3837
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3837
    peer = (int )tmp___16;
#line 3838
    __max1 = peer;
#line 3838
    __max2 = 4096;
#line 3838
    peer = __max1 > __max2 ? __max1 : __max2;
#line 3839
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3841
  spin_unlock_irq(& mdev->req_lock);
#line 3843
  if (mdev->sync_conf.al_extents <= 6) {
#line 3844
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3847
  ldv_mutex_unlock_168(& mdev->md_io_mutex);
#line 3848
  put_ldev(mdev);
#line 3850
  return (rv);
}
}
#line 3871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3873
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3873
  if (tmp == 0) {
#line 3874
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3875
  return;
}
}
#line 3878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3882
  i = 2;
#line 3882
  goto ldv_51709;
  ldv_51708: 
#line 3883
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3882
  i = i + 1;
  ldv_51709: ;
#line 3882
  if (i <= 2) {
#line 3883
    goto ldv_51708;
  } else {

  }

#line 3887
  return;
}
}
#line 3886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3888
  if (idx == 0) {
#line 3889
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3890
      val = val | 1ULL;
    } else {
#line 3892
      val = val & 0xfffffffffffffffeULL;
    }
#line 3894
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3897
  (mdev->ldev)->md.uuid[idx] = val;
#line 3898
  drbd_md_mark_dirty(mdev);
#line 3899
  return;
}
}
#line 3902 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3904
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3905
    drbd_uuid_move_history(mdev);
#line 3906
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3908
  _drbd_uuid_set(mdev, idx, val);
#line 3909
  return;
}
}
#line 3918 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 3921
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3923
  if (bm_uuid != 0ULL) {
#line 3924
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 3926
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3928
  get_random_bytes((void *)(& val), 8);
#line 3929
  _drbd_uuid_set(mdev, 0, val);
#line 3930
  drbd_print_uuids(mdev, "new current UUID");
#line 3932
  drbd_md_sync(mdev);
#line 3933
  return;
}
}
#line 3935 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 3937
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3938
    return;
  } else {

  }
#line 3940
  if (val == 0ULL) {
#line 3941
    drbd_uuid_move_history(mdev);
#line 3942
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3943
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3945
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3946
    if (bm_uuid != 0ULL) {
#line 3947
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 3949
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 3951
  drbd_md_mark_dirty(mdev);
#line 3952
  return;
}
}
#line 3960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3962
  rv = -5;
#line 3964
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3964
  if (tmp != 0) {
#line 3965
    drbd_md_set_flag(mdev, 8);
#line 3966
    drbd_md_sync(mdev);
#line 3967
    drbd_bm_set_all(mdev);
#line 3969
    rv = drbd_bm_write(mdev);
#line 3971
    if (rv == 0) {
#line 3972
      drbd_md_clear_flag(mdev, 8);
#line 3973
      drbd_md_sync(mdev);
    } else {

    }
#line 3976
    put_ldev(mdev);
  } else {

  }
#line 3979
  return (rv);
}
}
#line 3988 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3990
  rv = -5;
#line 3992
  drbd_resume_al(mdev);
#line 3993
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3993
  if (tmp != 0) {
#line 3994
    drbd_bm_clear_all(mdev);
#line 3995
    rv = drbd_bm_write(mdev);
#line 3996
    put_ldev(mdev);
  } else {

  }
#line 3999
  return (rv);
}
}
#line 4002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4004
  __mptr = (struct drbd_work  const  *)w;
#line 4004
  work = (struct bm_io_work *)__mptr;
#line 4005
  rv = -5;
#line 4007
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4007
  if (tmp != 0) {
#line 4007
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4007);
  } else {

  }
#line 4009
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4009
  if (tmp___0 != 0) {
#line 4010
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4011
    rv = (*(work->io_fn))(mdev);
#line 4012
    drbd_bm_unlock(mdev);
#line 4013
    put_ldev(mdev);
  } else {

  }
#line 4016
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4017
  __asm__  volatile   ("": : : "memory");
#line 4018
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4020
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4021
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4023
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4024
  work->why = 0;
#line 4025
  work->flags = 0;
#line 4027
  return (1);
}
}
#line 4030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4032
  lc_destroy(mdev->resync);
#line 4033
  mdev->resync = 0;
#line 4034
  lc_destroy(mdev->act_log);
#line 4035
  mdev->act_log = 0;
#line 4036
  drbd_free_bc(mdev->ldev);
#line 4036
  mdev->ldev = 0;
#line 4040
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4041
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4042
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4044
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4045
  return;
}
}
#line 4047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4049
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4049);
  } else {

  }
#line 4054
  val.i = 0U;
#line 4054
  val.ldv_38985.disk = 0U;
#line 4054
  mask.i = 0U;
#line 4054
  mask.ldv_38985.disk = 15U;
#line 4054
  drbd_force_state(mdev, mask, val);
#line 4055
  return (1);
}
}
#line 4058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4060
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4060
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4060);
  } else {

  }
#line 4061
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4061
  if (tmp == 0) {
#line 4062
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4063
  return;
}
}
#line 4077 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4082
  tmp = get_current();
#line 4082
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4082);
  } else {

  }
#line 4084
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 4084
  if (tmp___0 != 0) {
#line 4084
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4084);
  } else {

  }
#line 4085
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 4085
  if (tmp___1 != 0) {
#line 4085
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4085);
  } else {

  }
#line 4086
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4086
  if (tmp___2 == 0) {
#line 4086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4086);
  } else {

  }
#line 4087
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4088
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4091
  mdev->bm_io_work.io_fn = io_fn;
#line 4092
  mdev->bm_io_work.done = done;
#line 4093
  mdev->bm_io_work.why = why;
#line 4094
  mdev->bm_io_work.flags = flags;
#line 4096
  spin_lock_irq(& mdev->req_lock);
#line 4097
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 4098
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4098
  if (tmp___4 == 0) {
#line 4099
    tmp___3 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4099
    if (tmp___3 == 0) {
#line 4100
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4102
  spin_unlock_irq(& mdev->req_lock);
#line 4103
  return;
}
}
#line 4114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4119
  tmp = get_current();
#line 4119
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4119
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4119);
  } else {

  }
#line 4121
  if (((unsigned int )flags & 1U) == 0U) {
#line 4122
    drbd_suspend_io(mdev);
  } else {

  }
#line 4124
  drbd_bm_lock(mdev, why, flags);
#line 4125
  rv = (*io_fn)(mdev);
#line 4126
  drbd_bm_unlock(mdev);
#line 4128
  if (((unsigned int )flags & 1U) == 0U) {
#line 4129
    drbd_resume_io(mdev);
  } else {

  }
#line 4131
  return (rv);
}
}
#line 4134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4136
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4137
    drbd_md_mark_dirty(mdev);
#line 4138
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4140
  return;
}
}
#line 4142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4144
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4145
    drbd_md_mark_dirty(mdev);
#line 4146
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4148
  return;
}
}
#line 4149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4151
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4156
  mdev = (struct drbd_conf *)data;
#line 4158
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4159
  return;
}
}
#line 4161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4163
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4168
  drbd_md_sync(mdev);
#line 4169
  return (1);
}
}
#line 4189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4193
  tmp = rsp->count;
#line 4193
  rsp->count = rsp->count - 1UL;
#line 4193
  if (tmp == 0UL) {
#line 4194
    get_random_bytes((void *)(& refresh), 8);
#line 4195
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4196
    rsp->count = 10000UL;
  } else {

  }
#line 4198
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4199
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4199
  return ((unsigned long )tmp___0);
}
}
#line 4203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4204
  _faults[0] = (char *)"Meta-data write";
#line 4204
  _faults[1] = (char *)"Meta-data read";
#line 4204
  _faults[2] = (char *)"Resync write";
#line 4204
  _faults[3] = (char *)"Resync read";
#line 4204
  _faults[4] = (char *)"Data write";
#line 4204
  _faults[5] = (char *)"Data read";
#line 4204
  _faults[6] = (char *)"Data read ahead";
#line 4204
  _faults[7] = (char *)"BM allocation";
#line 4204
  _faults[8] = (char *)"EE allocation";
#line 4204
  _faults[9] = (char *)"receive data corruption";
#line 4217
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4223
  rrs.state = 0UL;
#line 4223
  rrs.count = 0UL;
#line 4225
  if (fault_devs == 0) {
#line 4225
    goto _L;
  } else {
#line 4225
    tmp = mdev_to_minor(mdev);
#line 4225
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4225
      tmp___0 = _drbd_fault_random(& rrs);
#line 4225
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4225
        tmp___1 = 1;
      } else {
#line 4225
        tmp___1 = 0;
      }
    } else {
#line 4225
      tmp___1 = 0;
    }
  }
#line 4225
  ret = (unsigned int )tmp___1;
#line 4230
  if (ret != 0U) {
#line 4231
    fault_count = fault_count + 1;
#line 4233
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4233
    if (tmp___3 != 0) {
#line 4234
      tmp___2 = _drbd_fault_str(type);
#line 4234
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4238
  return (ret);
}
}
#line 4242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4247
  buildtag[0] = '\000';
#line 4247
  tmp = 1U;
#line 4247
  while (1) {
#line 4247
    if (tmp >= 38U) {
#line 4247
      break;
    } else {

    }
#line 4247
    buildtag[tmp] = (char)0;
#line 4247
    tmp = tmp + 1U;
  }
#line 4249
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4251
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4252
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4255
      buildtag[0] = 98;
    }
  } else {

  }
#line 4258
  return ((char const   *)(& buildtag));
}
}
#line 4306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_68_p1 ;
  int res_drbd_open_68 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_69_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_75_p1 ;
  void *var_drbd_notify_sys_75_p2 ;
  unsigned long var_md_sync_timer_fn_104_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4495
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4454
  LDV_IN_INTERRUPT = 1;
#line 4463
  ldv_initialize();
#line 4478
  ldv_handler_precall();
#line 4479
  tmp = drbd_init();
#line 4479
  if (tmp != 0) {
#line 4480
    goto ldv_final;
  } else {

  }
#line 4502
  goto ldv_51889;
  ldv_51888: 
#line 4506
  tmp___0 = nondet_int();
#line 4506
  switch (tmp___0) {
  case 0: ;
#line 4511
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4525
    ldv_handler_precall();
#line 4526
    res_drbd_open_68 = drbd_open(var_group1, var_drbd_open_68_p1);
#line 4527
    ldv_check_return_value(res_drbd_open_68);
#line 4528
    if (res_drbd_open_68 != 0) {
#line 4529
      goto ldv_module_exit;
    } else {

    }
#line 4547
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4553
  goto ldv_51883;
  case 1: ;
#line 4557
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4571
    ldv_handler_precall();
#line 4572
    drbd_release(var_group2, var_drbd_release_69_p1);
#line 4590
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4596
  goto ldv_51883;
  case 2: 
#line 4614
  ldv_handler_precall();
#line 4615
  drbd_notify_sys(var_group3, var_drbd_notify_sys_75_p1, var_drbd_notify_sys_75_p2);
#line 4639
  goto ldv_51883;
  case 3: 
#line 4663
  ldv_handler_precall();
#line 4664
  md_sync_timer_fn(var_md_sync_timer_fn_104_p0);
#line 4682
  goto ldv_51883;
  default: ;
#line 4683
  goto ldv_51883;
  }
  ldv_51883: ;
  ldv_51889: 
#line 4502
  tmp___1 = nondet_int();
#line 4502
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4504
    goto ldv_51888;
  } else {

  }

  ldv_module_exit: 
#line 4704
  ldv_handler_precall();
#line 4705
  drbd_cleanup();
  ldv_final: 
#line 4725
  ldv_check_final_state();
#line 4728
  return;
}
}
#line 4732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4737
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4739
  mutex_lock(ldv_func_arg1);
#line 4740
  return;
}
}
#line 4742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_138(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4747
  tmp = mutex_trylock(ldv_func_arg1);
#line 4747
  ldv_func_res = tmp;
#line 4749
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4749
  return (tmp___0);
#line 4751
  return (ldv_func_res);
}
}
#line 4754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4759
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4761
  mutex_unlock(ldv_func_arg1);
#line 4762
  return;
}
}
#line 4764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4769
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4771
  mutex_lock(ldv_func_arg1);
#line 4772
  return;
}
}
#line 4774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4779
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4781
  mutex_unlock(ldv_func_arg1);
#line 4782
  return;
}
}
#line 4784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4789
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4791
  mutex_lock(ldv_func_arg1);
#line 4792
  return;
}
}
#line 4794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4799
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4801
  mutex_unlock(ldv_func_arg1);
#line 4802
  return;
}
}
#line 4804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4809
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4811
  mutex_unlock(ldv_func_arg1);
#line 4812
  return;
}
}
#line 4814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4819
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4821
  mutex_lock(ldv_func_arg1);
#line 4822
  return;
}
}
#line 4824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4829
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4831
  mutex_unlock(ldv_func_arg1);
#line 4832
  return;
}
}
#line 4834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4839
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4841
  mutex_lock(ldv_func_arg1);
#line 4842
  return;
}
}
#line 4844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4849
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4851
  mutex_lock(ldv_func_arg1);
#line 4852
  return;
}
}
#line 4854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4859
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4861
  mutex_unlock(ldv_func_arg1);
#line 4862
  return;
}
}
#line 4864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4869
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4871
  mutex_unlock(ldv_func_arg1);
#line 4872
  return;
}
}
#line 4874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_151(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4879
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4881
  mutex_lock(ldv_func_arg1);
#line 4882
  return;
}
}
#line 4884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_152(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4889
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4891
  mutex_unlock(ldv_func_arg1);
#line 4892
  return;
}
}
#line 4894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_153(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4899
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4901
  mutex_lock(ldv_func_arg1);
#line 4902
  return;
}
}
#line 4904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_154(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4909
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4911
  mutex_unlock(ldv_func_arg1);
#line 4912
  return;
}
}
#line 4914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4919
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4921
  mutex_lock(ldv_func_arg1);
#line 4922
  return;
}
}
#line 4924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4929
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4931
  mutex_unlock(ldv_func_arg1);
#line 4932
  return;
}
}
#line 4934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4939
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4941
  mutex_lock(ldv_func_arg1);
#line 4942
  return;
}
}
#line 4944 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_158(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4949
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4951
  mutex_unlock(ldv_func_arg1);
#line 4952
  return;
}
}
#line 4954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_159(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4959
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4961
  mutex_lock(ldv_func_arg1);
#line 4962
  return;
}
}
#line 4964 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_160(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4969
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4971
  mutex_unlock(ldv_func_arg1);
#line 4972
  return;
}
}
#line 4974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_161(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4979
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4981
  mutex_lock(ldv_func_arg1);
#line 4982
  return;
}
}
#line 4984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_162(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4989
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4991
  mutex_unlock(ldv_func_arg1);
#line 4992
  return;
}
}
#line 4994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_163(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4999
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5001
  mutex_lock(ldv_func_arg1);
#line 5002
  return;
}
}
#line 5004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_164(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5009
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5011
  mutex_unlock(ldv_func_arg1);
#line 5012
  return;
}
}
#line 5014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5019
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5021
  mutex_lock(ldv_func_arg1);
#line 5022
  return;
}
}
#line 5024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5029
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5031
  mutex_unlock(ldv_func_arg1);
#line 5032
  return;
}
}
#line 5034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5039
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5041
  mutex_lock(ldv_func_arg1);
#line 5042
  return;
}
}
#line 5044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_168(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5049
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5051
  mutex_unlock(ldv_func_arg1);
#line 5052
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_202(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_204(struct mutex *ldv_func_arg1 ) ;
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 91
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 124
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 136
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 160
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 165
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 170
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 175
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_201(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 185
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 187
  mutex_lock(ldv_func_arg1);
#line 188
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_202(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 195
  tmp = mutex_trylock(ldv_func_arg1);
#line 195
  ldv_func_res = tmp;
#line 197
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 197
  return (tmp___0);
#line 199
  return (ldv_func_res);
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 207
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 209
  mutex_unlock(ldv_func_arg1);
#line 210
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_204(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 217
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 219
  mutex_lock(ldv_func_arg1);
#line 220
  return;
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 227
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 229
  mutex_unlock(ldv_func_arg1);
#line 230
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 307 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_212(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_213(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_215(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_217(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_218(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_220(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_222(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_211(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_214(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_216(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_219(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_221(struct mutex *ldv_func_arg1 ) ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___4(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6331;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6331;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6331;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_6331;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_6331: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 318 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held___1(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  int tmp___0 ;
  struct thread_info *tmp___1 ;
  unsigned long _flags ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 320
  lockdep_opinion = 0;
#line 322
  tmp = debug_lockdep_rcu_enabled();
#line 322
  if (tmp == 0) {
#line 323
    return (1);
  } else {

  }
#line 324
  tmp___0 = rcu_is_cpu_idle();
#line 324
  if (tmp___0 != 0) {
#line 325
    return (0);
  } else {

  }
#line 326
  if (debug_locks != 0) {
#line 327
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
  } else {

  }
#line 328
  if (lockdep_opinion != 0) {
#line 328
    tmp___3 = 1;
  } else {
#line 328
    tmp___1 = current_thread_info___4();
#line 328
    if (tmp___1->preempt_count != 0) {
#line 328
      tmp___3 = 1;
    } else {
#line 328
      _flags = arch_local_save_flags();
#line 328
      tmp___2 = arch_irqs_disabled_flags(_flags);
#line 328
      if (tmp___2 != 0) {
#line 328
        tmp___3 = 1;
      } else {
#line 328
        tmp___3 = 0;
      }
    }
  }
#line 328
  return (tmp___3);
}
}
#line 743 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace___1(void) 
{ 
  struct thread_info *tmp ;

  {
#line 745
  tmp = current_thread_info___4();
#line 745
  tmp->preempt_count = tmp->preempt_count + 1;
#line 745
  __asm__  volatile   ("": : : "memory");
#line 747
  return;
}
}
#line 762 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace___1(void) 
{ 
  struct thread_info *tmp ;

  {
#line 765
  __asm__  volatile   ("": : : "memory");
#line 765
  tmp = current_thread_info___4();
#line 765
  tmp->preempt_count = tmp->preempt_count + -1;
#line 765
  __asm__  volatile   ("": : : "memory");
#line 766
  return;
}
}
#line 71 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 75
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ,
                                                                          struct cred * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 81
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 88 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ,
                                                                             struct cred * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 94
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 96
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 98
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 99
    return (-12);
  } else {

  }
#line 101
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 103
  tmp = call_usermodehelper_exec(info, wait);
#line 103
  return (tmp);
}
}
#line 107 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 109
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 109
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___1(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 89
  tmp___1 = static_branch(& __tracepoint_module_get.key);
#line 89
  if ((int )tmp___1) {
#line 89
    rcu_read_lock_sched_notrace___1();
#line 89
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
    tmp = debug_lockdep_rcu_enabled();
#line 89
    if (tmp != 0 && ! __warned) {
#line 89
      tmp___0 = rcu_read_lock_sched_held___1();
#line 89
      if (tmp___0 == 0 && 1) {
#line 89
        __warned = 1;
#line 89
        lockdep_rcu_suspicious("include/trace/events/module.h", 94, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 89
    it_func_ptr = _________p1;
#line 89
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13717: 
#line 89
      it_func = it_func_ptr->func;
#line 89
      __data = it_func_ptr->data;
#line 89
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 89
      it_func_ptr = it_func_ptr + 1;
#line 89
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
        goto ldv_13717;
      } else {

      }

    } else {

    }
#line 89
    rcu_read_unlock_sched_notrace___1();
  } else {

  }
#line 91
  return;
}
}
#line 465 "include/linux/module.h"
__inline static int try_module_get___1(struct module *module ) 
{ 
  int ret ;
  struct thread_info *tmp ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp___0 ;
  long tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 467
  ret = 1;
#line 469
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 470
    tmp = current_thread_info___4();
#line 470
    tmp->preempt_count = tmp->preempt_count + 1;
#line 470
    __asm__  volatile   ("": : : "memory");
#line 472
    tmp___0 = module_is_live(module);
#line 472
    tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
#line 472
    if (tmp___1 != 0L) {
#line 473
      __vpp_verify = 0;
#line 473
      switch (8UL) {
      case 1UL: 
#line 473
      pao_ID__ = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14086;
      case 2UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14086;
      case 4UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14086;
      case 8UL: ;
#line 473
      if (pao_ID__ == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID__ == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14086;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14086: ;
#line 473
      goto ldv_14091;
      case 2UL: 
#line 473
      pao_ID_____0 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14097;
      case 2UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14097;
      case 4UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14097;
      case 8UL: ;
#line 473
      if (pao_ID_____0 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____0 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14097;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14097: ;
#line 473
      goto ldv_14091;
      case 4UL: 
#line 473
      pao_ID_____1 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14107;
      case 2UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14107;
      case 4UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14107;
      case 8UL: ;
#line 473
      if (pao_ID_____1 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____1 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14107;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14107: ;
#line 473
      goto ldv_14091;
      case 8UL: 
#line 473
      pao_ID_____2 = 1;
#line 473
      switch (8UL) {
      case 1UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1UL));
      }
#line 473
      goto ldv_14117;
      case 2UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14117;
      case 4UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1UL));
      }
#line 473
      goto ldv_14117;
      case 8UL: ;
#line 473
      if (pao_ID_____2 == 1) {
#line 473
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 473
      if (pao_ID_____2 == -1) {
#line 473
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 473
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1UL));
      }
#line 473
      goto ldv_14117;
      default: 
#line 473
      __bad_percpu_size();
      }
      ldv_14117: ;
#line 473
      goto ldv_14091;
      default: 
#line 473
      __bad_size_call_parameter();
#line 473
      goto ldv_14091;
      }
      ldv_14091: ;
#line 474
      trace_module_get___1(module, (unsigned long )((void *)0));
    } else {
#line 476
      ret = 0;
    }
#line 478
    __asm__  volatile   ("": : : "memory");
#line 478
    tmp___2 = current_thread_info___4();
#line 478
    tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 478
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 480
  return (ret);
}
}
#line 2091 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 123 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 125
extern void cn_del_callback(struct cb_id * ) ;
#line 126
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 410 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  rcu_read_lock_sched_notrace___1();
#line 61
  tmp = lowmem_page_address((struct page  const  *)page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 67
  rcu_read_unlock_sched_notrace___1();
#line 68
  return;
}
}
#line 124 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 126
  tmp = __kmap_atomic___0(page);
#line 126
  return (tmp);
}
}
#line 831 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 835
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 851
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 858
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_50057;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_50057;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50057: ;
#line 1942
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[85U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}};
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 108
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 109
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_50833;
  ldv_50832: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_50830;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_50830: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_50833: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_50832;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_50894;
  ldv_50893: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_50862;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_50862;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_50862;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_50862;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_50862;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_50862;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50862;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50862;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50862;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_50862;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50862;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50862;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_50862: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_50894: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_50893;
  } else {

  }

#line 20
  return (1);
}
}
#line 70
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 70 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 38
  goto ldv_51000;
  ldv_50999: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_50932;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_50932;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_50932;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_50932;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_50932;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_50932;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_50932;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_50932;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_50932;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_50932;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_50932;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_50932;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_50932;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_50932;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_50932;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_50932;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_50932;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_50932;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_50932;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_50932;
  case 81: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->on_congestion = (int )tmp___16;
#line 38
  goto ldv_50932;
  case 82: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_fill = (int )tmp___17;
#line 38
  goto ldv_50932;
  case 83: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_extents = (int )tmp___18;
#line 38
  goto ldv_50932;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_50932;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_50932: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_51000: 
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 38
  tag = (int )tmp___20;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_50999;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 72
  goto ldv_51017;
  ldv_51016: 
#line 72
  tmp = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 72
  dlen = (int )tmp___0;
#line 72
  switch (tag & 8191) {
  case 84: 
#line 72
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 72
  goto ldv_51014;
  default: ;
#line 72
  if ((tag & 8192) != 0) {
#line 72
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 72
    return (0);
  } else {

  }
  }
  ldv_51014: 
#line 72
  tags = tags + (unsigned long )dlen;
  ldv_51017: 
#line 72
  tmp___1 = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 72
  tag = (int )tmp___2;
#line 72
  if (tag != 0) {
#line 73
    goto ldv_51016;
  } else {

  }

#line 72
  return (1);
}
}
#line 80
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 80 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 76
  goto ldv_51036;
  ldv_51035: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 29: 
#line 76
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 76
  goto ldv_51031;
  case 68: 
#line 76
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_51031;
  case 69: 
#line 76
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_51031;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_51031: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_51036: 
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 76
  tag = (int )tmp___2;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_51035;
  } else {

  }

#line 76
  return (1);
}
}
#line 101
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 101 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 82
  goto ldv_51092;
  ldv_51091: 
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 82
  dlen = (int )tmp___0;
#line 82
  switch (tag & 8191) {
  case 30: 
#line 82
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->rate = (int )tmp___1;
#line 82
  goto ldv_51050;
  case 31: 
#line 82
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->after = (int )tmp___2;
#line 82
  goto ldv_51050;
  case 32: 
#line 82
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->al_extents = (int )tmp___3;
#line 82
  goto ldv_51050;
  case 52: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->verify_alg_len = dlen;
#line 82
  __min1 = (size_t )dlen;
#line 82
  __min2 = 64UL;
#line 82
  __len = __min1 < __min2 ? __min1 : __min2;
#line 82
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 82
  goto ldv_51050;
  case 51: ;
#line 82
  if (dlen > 32) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->cpu_mask_len = dlen;
#line 82
  __min1___0 = (size_t )dlen;
#line 82
  __min2___0 = 32UL;
#line 82
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 82
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 82
  goto ldv_51050;
  case 64: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->csums_alg_len = dlen;
#line 82
  __min1___1 = (size_t )dlen;
#line 82
  __min2___1 = 64UL;
#line 82
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 82
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 82
  goto ldv_51050;
  case 65: 
#line 82
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 82
  goto ldv_51050;
  case 75: 
#line 82
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->on_no_data = (int )tmp___4;
#line 82
  goto ldv_51050;
  case 76: 
#line 82
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_plan_ahead = (int )tmp___5;
#line 82
  goto ldv_51050;
  case 77: 
#line 82
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_delay_target = (int )tmp___6;
#line 82
  goto ldv_51050;
  case 78: 
#line 82
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_fill_target = (int )tmp___7;
#line 82
  goto ldv_51050;
  case 79: 
#line 82
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_max_rate = (int )tmp___8;
#line 82
  goto ldv_51050;
  case 80: 
#line 82
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_min_rate = (int )tmp___9;
#line 82
  goto ldv_51050;
  default: ;
#line 82
  if ((tag & 8192) != 0) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 82
    return (0);
  } else {

  }
  }
  ldv_51050: 
#line 82
  tags = tags + (unsigned long )dlen;
  ldv_51092: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 82
  tag = (int )tmp___11;
#line 82
  if (tag != 0) {
#line 83
    goto ldv_51091;
  } else {

  }

#line 82
  return (1);
}
}
#line 145
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 145 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 143
  goto ldv_51391;
  ldv_51390: 
#line 143
  tmp = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 143
  dlen = (int )tmp___0;
#line 143
  switch (tag & 8191) {
  case 66: 
#line 143
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 143
  goto ldv_51388;
  default: ;
#line 143
  if ((tag & 8192) != 0) {
#line 143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 143
    return (0);
  } else {

  }
  }
  ldv_51388: 
#line 143
  tags = tags + (unsigned long )dlen;
  ldv_51391: 
#line 143
  tmp___1 = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 143
  tag = (int )tmp___2;
#line 143
  if (tag != 0) {
#line 144
    goto ldv_51390;
  } else {

  }

#line 143
  return (1);
}
}
#line 149
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 147
  goto ldv_51408;
  ldv_51407: 
#line 147
  tmp = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 147
  dlen = (int )tmp___0;
#line 147
  switch (tag & 8191) {
  case 63: 
#line 147
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 147
  goto ldv_51405;
  default: ;
#line 147
  if ((tag & 8192) != 0) {
#line 147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 147
    return (0);
  } else {

  }
  }
  ldv_51405: 
#line 147
  tags = tags + (unsigned long )dlen;
  ldv_51408: 
#line 147
  tmp___1 = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 147
  tag = (int )tmp___2;
#line 147
  if (tag != 0) {
#line 148
    goto ldv_51407;
  } else {

  }

#line 147
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_51453;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_51453;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_51453;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_51453;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51453;
  }
  ldv_51453: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_51460;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_51460;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_51460;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_51460;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51460;
  }
  ldv_51460: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_51467;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_51467;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_51467;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_51467;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51467;
  }
  ldv_51467: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_51474;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_51474;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_51474;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_51474;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51474;
  }
  ldv_51474: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_51481;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_51481;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_51481;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_51481;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51481;
  }
  ldv_51481: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_51491;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_51491;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_51491;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_51491;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51491;
  }
  ldv_51491: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_51498;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_51498;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_51498;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_51498;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51498;
  }
  ldv_51498: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_51508;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_51508;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_51508;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_51508;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51508;
  }
  ldv_51508: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_51515;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_51515;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_51515;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_51515;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51515;
  }
  ldv_51515: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_51522;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_51522;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_51522;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_51522;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51522;
  }
  ldv_51522: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_51529;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_51529;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_51529;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_51529;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51529;
  }
  ldv_51529: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_51536;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_51536;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_51536;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_51536;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51536;
  }
  ldv_51536: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_51543;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_51543;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_51543;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_51543;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51543;
  }
  ldv_51543: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_51550;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_51550;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_51550;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_51550;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51550;
  }
  ldv_51550: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_51557;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_51557;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_51557;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_51557;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51557;
  }
  ldv_51557: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_51564;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_51564;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51564;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51564;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51564;
  }
  ldv_51564: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_51571;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_51571;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_51571;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_51571;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51571;
  }
  ldv_51571: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_51578;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_51578;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_51578;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_51578;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51578;
  }
  ldv_51578: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_51585;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_51585;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_51585;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_51585;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51585;
  }
  ldv_51585: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_51592;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_51592;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_51592;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_51592;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51592;
  }
  ldv_51592: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_51599;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_51599;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_51599;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_51599;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51599;
  }
  ldv_51599: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_51606;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_51606;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_51606;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_51606;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51606;
  }
  ldv_51606: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_51613;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_51613;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_51613;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_51613;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51613;
  }
  ldv_51613: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_51620;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_51620;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_51620;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_51620;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51620;
  }
  ldv_51620: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_51627;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_51627;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51627;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51627;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51627;
  }
  ldv_51627: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_51634;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_51634;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_51634;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_51634;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51634;
  }
  ldv_51634: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_51641;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_51641;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_51641;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_51641;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51641;
  }
  ldv_51641: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_51648;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_51648;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_51648;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_51648;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51648;
  }
  ldv_51648: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_51655;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_51655;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_51655;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_51655;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51655;
  }
  ldv_51655: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 70
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 70 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_51680;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_51680;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_51680;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_51680;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51680;
  }
  ldv_51680: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_51687;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_51687;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_51687;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_51687;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51687;
  }
  ldv_51687: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_51697;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_51697;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_51697;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_51697;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51697;
  }
  ldv_51697: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_51704;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_51704;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_51704;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_51704;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51704;
  }
  ldv_51704: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_51714;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_51714;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_51714;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_51714;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51714;
  }
  ldv_51714: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_51721;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_51721;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_51721;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_51721;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51721;
  }
  ldv_51721: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_51731;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_51731;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_51731;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_51731;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51731;
  }
  ldv_51731: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_51738;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_51738;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_51738;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_51738;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51738;
  }
  ldv_51738: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_51748;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_51748;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_51748;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_51748;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51748;
  }
  ldv_51748: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_51755;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_51755;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_51755;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_51755;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51755;
  }
  ldv_51755: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_51765;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_51765;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_51765;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_51765;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51765;
  }
  ldv_51765: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_51772;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_51772;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_51772;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_51772;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51772;
  }
  ldv_51772: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_51779;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_51779;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_51779;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_51779;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51779;
  }
  ldv_51779: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_51786;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_51786;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_51786;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_51786;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51786;
  }
  ldv_51786: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_51793;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_51793;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_51793;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_51793;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51793;
  }
  ldv_51793: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_51800;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_51800;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_51800;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_51800;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51800;
  }
  ldv_51800: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_51807;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_51807;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_51807;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_51807;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51807;
  }
  ldv_51807: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_51814;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_51814;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_51814;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_51814;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51814;
  }
  ldv_51814: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_51821;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_51821;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_51821;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_51821;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51821;
  }
  ldv_51821: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_51828;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_51828;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_51828;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_51828;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51828;
  }
  ldv_51828: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_51835;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_51835;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_51835;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_51835;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51835;
  }
  ldv_51835: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_51842;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_51842;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_51842;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_51842;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51842;
  }
  ldv_51842: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_51849;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_51849;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_51849;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_51849;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51849;
  }
  ldv_51849: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_51856;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_51856;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_51856;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_51856;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51856;
  }
  ldv_51856: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_51863;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_51863;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_51863;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_51863;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51863;
  }
  ldv_51863: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_51870;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_51870;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_51870;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_51870;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51870;
  }
  ldv_51870: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_51877;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_51877;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_51877;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_51877;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51877;
  }
  ldv_51877: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_51884;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_51884;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_51884;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_51884;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51884;
  }
  ldv_51884: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_51891;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_51891;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_51891;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_51891;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51891;
  }
  ldv_51891: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_51898;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_51898;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_51898;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_51898;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51898;
  }
  ldv_51898: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_51905;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_51905;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_51905;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_51905;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51905;
  }
  ldv_51905: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_51912;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_51912;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_51912;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_51912;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51912;
  }
  ldv_51912: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_51919;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_51919;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_51919;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_51919;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51919;
  }
  ldv_51919: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_51926;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_51926;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_51926;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_51926;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51926;
  }
  ldv_51926: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_51933;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_51933;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_51933;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_51933;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51933;
  }
  ldv_51933: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_51940;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_51940;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_51940;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_51940;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51940;
  }
  ldv_51940: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_51947;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_51947;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_51947;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_51947;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51947;
  }
  ldv_51947: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_51954;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_51954;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_51954;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_51954;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51954;
  }
  ldv_51954: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_51961;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_51961;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_51961;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_51961;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51961;
  }
  ldv_51961: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_51968;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_51968;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_51968;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_51968;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51968;
  }
  ldv_51968: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_51975;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_51975;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_51975;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_51975;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51975;
  }
  ldv_51975: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_51982;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_51982;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_51982;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_51982;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51982;
  }
  ldv_51982: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_51989;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_51989;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_51989;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_51989;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51989;
  }
  ldv_51989: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_51996;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_51996;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_51996;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_51996;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_51996;
  }
  ldv_51996: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_52003;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_52003;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_52003;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_52003;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52003;
  }
  ldv_52003: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_52010;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_52010;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_52010;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_52010;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52010;
  }
  ldv_52010: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_52017;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_52017;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_52017;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_52017;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52017;
  }
  ldv_52017: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_52024;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_52024;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_52024;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_52024;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52024;
  }
  ldv_52024: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_52031;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_52031;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_52031;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_52031;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52031;
  }
  ldv_52031: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_52038;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_52038;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_52038;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_52038;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52038;
  }
  ldv_52038: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_52045;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_52045;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_52045;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_52045;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52045;
  }
  ldv_52045: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_52052;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_52052;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_52052;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_52052;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52052;
  }
  ldv_52052: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_52059;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_52059;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_52059;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_52059;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52059;
  }
  ldv_52059: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_52066;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_52066;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_52066;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_52066;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52066;
  }
  ldv_52066: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_52073;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_52073;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_52073;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_52073;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52073;
  }
  ldv_52073: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 81U;
#line 38
  goto ldv_52080;
  case 2UL: 
#line 38
  put_unaligned_le16(81, __gu_p___54);
#line 38
  goto ldv_52080;
  case 4UL: 
#line 38
  put_unaligned_le32(81U, __gu_p___54);
#line 38
  goto ldv_52080;
  case 8UL: 
#line 38
  put_unaligned_le64(81ULL, __gu_p___54);
#line 38
  goto ldv_52080;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52080;
  }
  ldv_52080: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 4U;
#line 38
  goto ldv_52087;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___55);
#line 38
  goto ldv_52087;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___55);
#line 38
  goto ldv_52087;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___55);
#line 38
  goto ldv_52087;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52087;
  }
  ldv_52087: 
#line 38
  __gu_p___56 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 38
  goto ldv_52094;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 38
  goto ldv_52094;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_52094;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_52094;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52094;
  }
  ldv_52094: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 82U;
#line 38
  goto ldv_52101;
  case 2UL: 
#line 38
  put_unaligned_le16(82, __gu_p___57);
#line 38
  goto ldv_52101;
  case 4UL: 
#line 38
  put_unaligned_le32(82U, __gu_p___57);
#line 38
  goto ldv_52101;
  case 8UL: 
#line 38
  put_unaligned_le64(82ULL, __gu_p___57);
#line 38
  goto ldv_52101;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52101;
  }
  ldv_52101: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 4U;
#line 38
  goto ldv_52108;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___58);
#line 38
  goto ldv_52108;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___58);
#line 38
  goto ldv_52108;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___58);
#line 38
  goto ldv_52108;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52108;
  }
  ldv_52108: 
#line 38
  __gu_p___59 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 38
  goto ldv_52115;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 38
  goto ldv_52115;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_52115;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_52115;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52115;
  }
  ldv_52115: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 83U;
#line 38
  goto ldv_52122;
  case 2UL: 
#line 38
  put_unaligned_le16(83, __gu_p___60);
#line 38
  goto ldv_52122;
  case 4UL: 
#line 38
  put_unaligned_le32(83U, __gu_p___60);
#line 38
  goto ldv_52122;
  case 8UL: 
#line 38
  put_unaligned_le64(83ULL, __gu_p___60);
#line 38
  goto ldv_52122;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52122;
  }
  ldv_52122: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 4U;
#line 38
  goto ldv_52129;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___61);
#line 38
  goto ldv_52129;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___61);
#line 38
  goto ldv_52129;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___61);
#line 38
  goto ldv_52129;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52129;
  }
  ldv_52129: 
#line 38
  __gu_p___62 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 38
  goto ldv_52136;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 38
  goto ldv_52136;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_52136;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_52136;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52136;
  }
  ldv_52136: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 60U;
#line 38
  goto ldv_52143;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___63);
#line 38
  goto ldv_52143;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___63);
#line 38
  goto ldv_52143;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 38
  goto ldv_52143;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52143;
  }
  ldv_52143: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 1U;
#line 38
  goto ldv_52150;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___64);
#line 38
  goto ldv_52150;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___64);
#line 38
  goto ldv_52150;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___64);
#line 38
  goto ldv_52150;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52150;
  }
  ldv_52150: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 27U;
#line 38
  goto ldv_52157;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___65);
#line 38
  goto ldv_52157;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___65);
#line 38
  goto ldv_52157;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 38
  goto ldv_52157;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52157;
  }
  ldv_52157: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 1U;
#line 38
  goto ldv_52164;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___66);
#line 38
  goto ldv_52164;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___66);
#line 38
  goto ldv_52164;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___66);
#line 38
  goto ldv_52164;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52164;
  }
  ldv_52164: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 28U;
#line 38
  goto ldv_52171;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___67);
#line 38
  goto ldv_52171;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___67);
#line 38
  goto ldv_52171;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 38
  goto ldv_52171;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52171;
  }
  ldv_52171: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___68 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___68) = 1U;
#line 38
  goto ldv_52178;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___68);
#line 38
  goto ldv_52178;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___68);
#line 38
  goto ldv_52178;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___68);
#line 38
  goto ldv_52178;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52178;
  }
  ldv_52178: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___69 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___69) = 41U;
#line 38
  goto ldv_52185;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___69);
#line 38
  goto ldv_52185;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___69);
#line 38
  goto ldv_52185;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 38
  goto ldv_52185;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52185;
  }
  ldv_52185: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___70 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___70) = 1U;
#line 38
  goto ldv_52192;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___70);
#line 38
  goto ldv_52192;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___70);
#line 38
  goto ldv_52192;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___70);
#line 38
  goto ldv_52192;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52192;
  }
  ldv_52192: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___53 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___71 = (void *)tmp___53;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___71) = 61U;
#line 38
  goto ldv_52199;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___71);
#line 38
  goto ldv_52199;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___71);
#line 38
  goto ldv_52199;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 38
  goto ldv_52199;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52199;
  }
  ldv_52199: 
#line 38
  tmp___54 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___72 = (void *)tmp___54;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___72) = 1U;
#line 38
  goto ldv_52206;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___72);
#line 38
  goto ldv_52206;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___72);
#line 38
  goto ldv_52206;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___72);
#line 38
  goto ldv_52206;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52206;
  }
  ldv_52206: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___55 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___73 = (void *)tmp___55;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___73) = 62U;
#line 38
  goto ldv_52213;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___73);
#line 38
  goto ldv_52213;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___73);
#line 38
  goto ldv_52213;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 38
  goto ldv_52213;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52213;
  }
  ldv_52213: 
#line 38
  tmp___56 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___74 = (void *)tmp___56;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___74) = 1U;
#line 38
  goto ldv_52220;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___74);
#line 38
  goto ldv_52220;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___74);
#line 38
  goto ldv_52220;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___74);
#line 38
  goto ldv_52220;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52220;
  }
  ldv_52220: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___57 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___75 = (void *)tmp___57;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___75) = 70U;
#line 38
  goto ldv_52227;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___75);
#line 38
  goto ldv_52227;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___75);
#line 38
  goto ldv_52227;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 38
  goto ldv_52227;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52227;
  }
  ldv_52227: 
#line 38
  tmp___58 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___76 = (void *)tmp___58;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___76) = 1U;
#line 38
  goto ldv_52234;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___76);
#line 38
  goto ldv_52234;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___76);
#line 38
  goto ldv_52234;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___76);
#line 38
  goto ldv_52234;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_52234;
  }
  ldv_52234: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 101
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p = (void *)tmp;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p) = 30U;
#line 82
  goto ldv_52331;
  case 2UL: 
#line 82
  put_unaligned_le16(30, __gu_p);
#line 82
  goto ldv_52331;
  case 4UL: 
#line 82
  put_unaligned_le32(30U, __gu_p);
#line 82
  goto ldv_52331;
  case 8UL: 
#line 82
  put_unaligned_le64(30ULL, __gu_p);
#line 82
  goto ldv_52331;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52331;
  }
  ldv_52331: 
#line 82
  tmp___0 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___0 = (void *)tmp___0;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___0) = 4U;
#line 82
  goto ldv_52338;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___0);
#line 82
  goto ldv_52338;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___0);
#line 82
  goto ldv_52338;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___0);
#line 82
  goto ldv_52338;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52338;
  }
  ldv_52338: 
#line 82
  __gu_p___1 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 82
  goto ldv_52345;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 82
  goto ldv_52345;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 82
  goto ldv_52345;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 82
  goto ldv_52345;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52345;
  }
  ldv_52345: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___1 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___2 = (void *)tmp___1;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___2) = 31U;
#line 82
  goto ldv_52352;
  case 2UL: 
#line 82
  put_unaligned_le16(31, __gu_p___2);
#line 82
  goto ldv_52352;
  case 4UL: 
#line 82
  put_unaligned_le32(31U, __gu_p___2);
#line 82
  goto ldv_52352;
  case 8UL: 
#line 82
  put_unaligned_le64(31ULL, __gu_p___2);
#line 82
  goto ldv_52352;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52352;
  }
  ldv_52352: 
#line 82
  tmp___2 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___3 = (void *)tmp___2;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___3) = 4U;
#line 82
  goto ldv_52359;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___3);
#line 82
  goto ldv_52359;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___3);
#line 82
  goto ldv_52359;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___3);
#line 82
  goto ldv_52359;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52359;
  }
  ldv_52359: 
#line 82
  __gu_p___4 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 82
  goto ldv_52366;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 82
  goto ldv_52366;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 82
  goto ldv_52366;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 82
  goto ldv_52366;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52366;
  }
  ldv_52366: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___3 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___5 = (void *)tmp___3;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___5) = 32U;
#line 82
  goto ldv_52373;
  case 2UL: 
#line 82
  put_unaligned_le16(32, __gu_p___5);
#line 82
  goto ldv_52373;
  case 4UL: 
#line 82
  put_unaligned_le32(32U, __gu_p___5);
#line 82
  goto ldv_52373;
  case 8UL: 
#line 82
  put_unaligned_le64(32ULL, __gu_p___5);
#line 82
  goto ldv_52373;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52373;
  }
  ldv_52373: 
#line 82
  tmp___4 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___6 = (void *)tmp___4;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___6) = 4U;
#line 82
  goto ldv_52380;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___6);
#line 82
  goto ldv_52380;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___6);
#line 82
  goto ldv_52380;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___6);
#line 82
  goto ldv_52380;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52380;
  }
  ldv_52380: 
#line 82
  __gu_p___7 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 82
  goto ldv_52387;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 82
  goto ldv_52387;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_52387;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_52387;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52387;
  }
  ldv_52387: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___5 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___8 = (void *)tmp___5;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___8) = 52U;
#line 82
  goto ldv_52394;
  case 2UL: 
#line 82
  put_unaligned_le16(49204, __gu_p___8);
#line 82
  goto ldv_52394;
  case 4UL: 
#line 82
  put_unaligned_le32(49204U, __gu_p___8);
#line 82
  goto ldv_52394;
  case 8UL: 
#line 82
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 82
  goto ldv_52394;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52394;
  }
  ldv_52394: 
#line 82
  tmp___6 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___9 = (void *)tmp___6;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 82
  goto ldv_52401;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 82
  goto ldv_52401;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_52401;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_52401;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52401;
  }
  ldv_52401: 
#line 82
  __len = (size_t )arg->verify_alg_len;
#line 82
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 82
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 82
  tmp___7 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___10 = (void *)tmp___7;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___10) = 51U;
#line 82
  goto ldv_52411;
  case 2UL: 
#line 82
  put_unaligned_le16(49203, __gu_p___10);
#line 82
  goto ldv_52411;
  case 4UL: 
#line 82
  put_unaligned_le32(49203U, __gu_p___10);
#line 82
  goto ldv_52411;
  case 8UL: 
#line 82
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 82
  goto ldv_52411;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52411;
  }
  ldv_52411: 
#line 82
  tmp___8 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___11 = (void *)tmp___8;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 82
  goto ldv_52418;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 82
  goto ldv_52418;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_52418;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_52418;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52418;
  }
  ldv_52418: 
#line 82
  __len___0 = (size_t )arg->cpu_mask_len;
#line 82
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 82
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 82
  tmp___9 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___12 = (void *)tmp___9;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___12) = 64U;
#line 82
  goto ldv_52428;
  case 2UL: 
#line 82
  put_unaligned_le16(49216, __gu_p___12);
#line 82
  goto ldv_52428;
  case 4UL: 
#line 82
  put_unaligned_le32(49216U, __gu_p___12);
#line 82
  goto ldv_52428;
  case 8UL: 
#line 82
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 82
  goto ldv_52428;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52428;
  }
  ldv_52428: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___13 = (void *)tmp___10;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 82
  goto ldv_52435;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 82
  goto ldv_52435;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_52435;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_52435;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52435;
  }
  ldv_52435: 
#line 82
  __len___1 = (size_t )arg->csums_alg_len;
#line 82
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 82
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 82
  tmp___11 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___14 = (void *)tmp___11;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___14) = 65U;
#line 82
  goto ldv_52445;
  case 2UL: 
#line 82
  put_unaligned_le16(32833, __gu_p___14);
#line 82
  goto ldv_52445;
  case 4UL: 
#line 82
  put_unaligned_le32(32833U, __gu_p___14);
#line 82
  goto ldv_52445;
  case 8UL: 
#line 82
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 82
  goto ldv_52445;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52445;
  }
  ldv_52445: 
#line 82
  tmp___12 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___15 = (void *)tmp___12;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___15) = 1U;
#line 82
  goto ldv_52452;
  case 2UL: 
#line 82
  put_unaligned_le16(1, __gu_p___15);
#line 82
  goto ldv_52452;
  case 4UL: 
#line 82
  put_unaligned_le32(1U, __gu_p___15);
#line 82
  goto ldv_52452;
  case 8UL: 
#line 82
  put_unaligned_le64(1ULL, __gu_p___15);
#line 82
  goto ldv_52452;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52452;
  }
  ldv_52452: 
#line 82
  *((char *)tags) = (char )arg->use_rle;
#line 82
  tags = tags + 1U;
#line 82
  tmp___13 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___16 = (void *)tmp___13;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___16) = 75U;
#line 82
  goto ldv_52459;
  case 2UL: 
#line 82
  put_unaligned_le16(75, __gu_p___16);
#line 82
  goto ldv_52459;
  case 4UL: 
#line 82
  put_unaligned_le32(75U, __gu_p___16);
#line 82
  goto ldv_52459;
  case 8UL: 
#line 82
  put_unaligned_le64(75ULL, __gu_p___16);
#line 82
  goto ldv_52459;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52459;
  }
  ldv_52459: 
#line 82
  tmp___14 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___17 = (void *)tmp___14;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___17) = 4U;
#line 82
  goto ldv_52466;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___17);
#line 82
  goto ldv_52466;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___17);
#line 82
  goto ldv_52466;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___17);
#line 82
  goto ldv_52466;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52466;
  }
  ldv_52466: 
#line 82
  __gu_p___18 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 82
  goto ldv_52473;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 82
  goto ldv_52473;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_52473;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_52473;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52473;
  }
  ldv_52473: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___15 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___19 = (void *)tmp___15;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___19) = 76U;
#line 82
  goto ldv_52480;
  case 2UL: 
#line 82
  put_unaligned_le16(76, __gu_p___19);
#line 82
  goto ldv_52480;
  case 4UL: 
#line 82
  put_unaligned_le32(76U, __gu_p___19);
#line 82
  goto ldv_52480;
  case 8UL: 
#line 82
  put_unaligned_le64(76ULL, __gu_p___19);
#line 82
  goto ldv_52480;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52480;
  }
  ldv_52480: 
#line 82
  tmp___16 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___20 = (void *)tmp___16;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___20) = 4U;
#line 82
  goto ldv_52487;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___20);
#line 82
  goto ldv_52487;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___20);
#line 82
  goto ldv_52487;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___20);
#line 82
  goto ldv_52487;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52487;
  }
  ldv_52487: 
#line 82
  __gu_p___21 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 82
  goto ldv_52494;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 82
  goto ldv_52494;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_52494;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_52494;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52494;
  }
  ldv_52494: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___17 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___22 = (void *)tmp___17;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___22) = 77U;
#line 82
  goto ldv_52501;
  case 2UL: 
#line 82
  put_unaligned_le16(77, __gu_p___22);
#line 82
  goto ldv_52501;
  case 4UL: 
#line 82
  put_unaligned_le32(77U, __gu_p___22);
#line 82
  goto ldv_52501;
  case 8UL: 
#line 82
  put_unaligned_le64(77ULL, __gu_p___22);
#line 82
  goto ldv_52501;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52501;
  }
  ldv_52501: 
#line 82
  tmp___18 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___23 = (void *)tmp___18;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___23) = 4U;
#line 82
  goto ldv_52508;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___23);
#line 82
  goto ldv_52508;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___23);
#line 82
  goto ldv_52508;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___23);
#line 82
  goto ldv_52508;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52508;
  }
  ldv_52508: 
#line 82
  __gu_p___24 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 82
  goto ldv_52515;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 82
  goto ldv_52515;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_52515;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_52515;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52515;
  }
  ldv_52515: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___19 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___25 = (void *)tmp___19;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___25) = 78U;
#line 82
  goto ldv_52522;
  case 2UL: 
#line 82
  put_unaligned_le16(78, __gu_p___25);
#line 82
  goto ldv_52522;
  case 4UL: 
#line 82
  put_unaligned_le32(78U, __gu_p___25);
#line 82
  goto ldv_52522;
  case 8UL: 
#line 82
  put_unaligned_le64(78ULL, __gu_p___25);
#line 82
  goto ldv_52522;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52522;
  }
  ldv_52522: 
#line 82
  tmp___20 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___26 = (void *)tmp___20;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___26) = 4U;
#line 82
  goto ldv_52529;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___26);
#line 82
  goto ldv_52529;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___26);
#line 82
  goto ldv_52529;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___26);
#line 82
  goto ldv_52529;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52529;
  }
  ldv_52529: 
#line 82
  __gu_p___27 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 82
  goto ldv_52536;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 82
  goto ldv_52536;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_52536;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_52536;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52536;
  }
  ldv_52536: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___21 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___28 = (void *)tmp___21;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___28) = 79U;
#line 82
  goto ldv_52543;
  case 2UL: 
#line 82
  put_unaligned_le16(79, __gu_p___28);
#line 82
  goto ldv_52543;
  case 4UL: 
#line 82
  put_unaligned_le32(79U, __gu_p___28);
#line 82
  goto ldv_52543;
  case 8UL: 
#line 82
  put_unaligned_le64(79ULL, __gu_p___28);
#line 82
  goto ldv_52543;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52543;
  }
  ldv_52543: 
#line 82
  tmp___22 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___29 = (void *)tmp___22;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___29) = 4U;
#line 82
  goto ldv_52550;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___29);
#line 82
  goto ldv_52550;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___29);
#line 82
  goto ldv_52550;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___29);
#line 82
  goto ldv_52550;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52550;
  }
  ldv_52550: 
#line 82
  __gu_p___30 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 82
  goto ldv_52557;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 82
  goto ldv_52557;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_52557;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_52557;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52557;
  }
  ldv_52557: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___23 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___31 = (void *)tmp___23;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___31) = 80U;
#line 82
  goto ldv_52564;
  case 2UL: 
#line 82
  put_unaligned_le16(80, __gu_p___31);
#line 82
  goto ldv_52564;
  case 4UL: 
#line 82
  put_unaligned_le32(80U, __gu_p___31);
#line 82
  goto ldv_52564;
  case 8UL: 
#line 82
  put_unaligned_le64(80ULL, __gu_p___31);
#line 82
  goto ldv_52564;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52564;
  }
  ldv_52564: 
#line 82
  tmp___24 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___32 = (void *)tmp___24;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___32) = 4U;
#line 82
  goto ldv_52571;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___32);
#line 82
  goto ldv_52571;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___32);
#line 82
  goto ldv_52571;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___32);
#line 82
  goto ldv_52571;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52571;
  }
  ldv_52571: 
#line 82
  __gu_p___33 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 82
  goto ldv_52578;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 82
  goto ldv_52578;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_52578;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_52578;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_52578;
  }
  ldv_52578: 
#line 82
  tags = tags + 4U;
#line 82
  return (tags);
}
}
#line 113
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 113 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 111
  tmp = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p = (void *)tmp;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p) = 33U;
#line 111
  goto ldv_52666;
  case 2UL: 
#line 111
  put_unaligned_le16(33, __gu_p);
#line 111
  goto ldv_52666;
  case 4UL: 
#line 111
  put_unaligned_le32(33U, __gu_p);
#line 111
  goto ldv_52666;
  case 8UL: 
#line 111
  put_unaligned_le64(33ULL, __gu_p);
#line 111
  goto ldv_52666;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_52666;
  }
  ldv_52666: 
#line 111
  tmp___0 = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p___0 = (void *)tmp___0;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___0) = 4U;
#line 111
  goto ldv_52673;
  case 2UL: 
#line 111
  put_unaligned_le16(4, __gu_p___0);
#line 111
  goto ldv_52673;
  case 4UL: 
#line 111
  put_unaligned_le32(4U, __gu_p___0);
#line 111
  goto ldv_52673;
  case 8UL: 
#line 111
  put_unaligned_le64(4ULL, __gu_p___0);
#line 111
  goto ldv_52673;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_52673;
  }
  ldv_52673: 
#line 111
  __gu_p___1 = (void *)tags;
#line 111
  switch (4UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 111
  goto ldv_52680;
  case 2UL: 
#line 111
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 111
  goto ldv_52680;
  case 4UL: 
#line 111
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 111
  goto ldv_52680;
  case 8UL: 
#line 111
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 111
  goto ldv_52680;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_52680;
  }
  ldv_52680: 
#line 111
  tags = tags + 4U;
#line 111
  return (tags);
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 198
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 202
  envp[0] = (char *)"HOME=/";
#line 202
  envp[1] = (char *)"TERM=linux";
#line 202
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 202
  envp[3] = 0;
#line 202
  envp[4] = 0;
#line 202
  envp[5] = 0;
#line 210
  argv[0] = (char *)(& usermode_helper);
#line 210
  argv[1] = cmd;
#line 210
  argv[2] = (char *)(& mb);
#line 210
  argv[3] = 0;
#line 213
  tmp = mdev_to_minor(mdev);
#line 213
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 215
  tmp___0 = get_net_conf(mdev);
#line 215
  if (tmp___0 != 0) {
#line 216
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 218
    afs = (char *)"ipv6";
#line 219
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 221
    goto ldv_53001;
    case 2: 
#line 223
    afs = (char *)"ipv4";
#line 224
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 226
    goto ldv_53001;
    default: 
#line 228
    afs = (char *)"ssocks";
#line 229
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_53001: 
#line 232
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 233
    envp[3] = (char *)(& af);
#line 234
    envp[4] = (char *)(& ad);
#line 235
    put_net_conf(mdev);
  } else {

  }
#line 240
  drbd_md_sync(mdev);
#line 242
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 244
  drbd_bcast_ev_helper(mdev, cmd);
#line 245
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 246
  if (ret != 0) {
#line 247
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 251
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 255
  if (ret < 0) {
#line 256
    ret = 0;
  } else {

  }
#line 258
  return (ret);
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 268
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            268);
  } else {

  }
#line 270
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 270
  if (tmp != 0) {
#line 271
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 272
    put_ldev(mdev);
  } else {
#line 274
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 275
    nps = (enum drbd_disk_state )mdev->state.ldv_38985.pdsk;
#line 276
    goto out;
  }
#line 279
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 281
  switch ((r >> 8) & 255) {
  case 3: 
#line 283
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 284
  nps = D_INCONSISTENT;
#line 285
  goto ldv_53013;
  case 4: 
#line 287
  ex_to_string = (char *)"peer was fenced";
#line 288
  nps = D_OUTDATED;
#line 289
  goto ldv_53013;
  case 5: ;
#line 291
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 293
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 294
    nps = D_OUTDATED;
  } else {
#line 296
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 297
    nps = (enum drbd_disk_state )mdev->state.ldv_38985.pdsk;
  }
#line 299
  goto ldv_53013;
  case 6: 
#line 303
  ex_to_string = (char *)"peer is active";
#line 304
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 305
  nps = D_UNKNOWN;
#line 306
  val.i = 0U;
#line 306
  val.ldv_38985.disk = 5U;
#line 306
  mask.i = 0U;
#line 306
  mask.ldv_38985.disk = 15U;
#line 306
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 307
  goto ldv_53013;
  case 7: ;
#line 309
  if ((unsigned int )fp != 2U) {
#line 310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 311
  ex_to_string = (char *)"peer was stonithed";
#line 312
  nps = D_OUTDATED;
#line 313
  goto ldv_53013;
  default: 
#line 316
  nps = D_UNKNOWN;
#line 317
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 318
  return (nps);
  }
  ldv_53013: 
#line 321
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 325
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 328
    val___0.i = 0U;
#line 328
    val___0.ldv_38985.susp_fen = 0U;
#line 328
    mask___0.i = 0U;
#line 328
    mask___0.ldv_38985.susp_fen = 1U;
#line 328
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 331
  return (nps);
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;

  {
#line 336
  mdev = (struct drbd_conf *)data;
#line 340
  nps = drbd_try_outdate_peer(mdev);
#line 353
  spin_lock_irq(& mdev->req_lock);
#line 354
  ns = mdev->state;
#line 355
  if ((int )ns.ldv_38985.conn <= 8) {
#line 356
    ns.ldv_38985.pdsk = (unsigned char )nps;
#line 357
    _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 359
  spin_unlock_irq(& mdev->req_lock);
#line 361
  return (0);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 368
  tmp = mdev_to_minor(mdev);
#line 368
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 368
  __k = tmp___0;
#line 368
  tmp___1 = IS_ERR((void const   *)__k);
#line 368
  if (tmp___1 == 0L) {
#line 368
    wake_up_process(__k);
  } else {

  }
#line 368
  opa = __k;
#line 369
  tmp___2 = IS_ERR((void const   *)opa);
#line 369
  if (tmp___2 != 0L) {
#line 370
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 371
  return;
}
}
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 376
  max_tries = 4;
#line 377
  rv = 0;
#line 378
  try = 0;
#line 379
  forced = 0;
#line 383
  if ((unsigned int )new_role == 1U) {
#line 384
    request_ping(mdev);
  } else {

  }
#line 386
  ldv_mutex_lock_219(& mdev->state_mutex);
#line 388
  mask.i = 0U;
#line 388
  mask.ldv_38985.role = 3U;
#line 389
  val.i = 0U;
#line 389
  val.ldv_38985.role = (unsigned char )new_role;
#line 391
  goto ldv_53051;
  ldv_53054: 
#line 392
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 396
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 397
    val.ldv_38985.pdsk = 0U;
#line 398
    mask.ldv_38985.pdsk = 0U;
#line 399
    goto ldv_53051;
  } else {

  }
#line 402
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_38985.disk <= 7 && (int )mdev->state.ldv_38985.disk > 3)) {
#line 405
    mask.ldv_38985.disk = 15U;
#line 406
    val.ldv_38985.disk = 8U;
#line 407
    forced = 1;
#line 408
    goto ldv_53051;
  } else {

  }
#line 411
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 413
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 413
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              413);
    } else {

    }
#line 414
    nps = drbd_try_outdate_peer(mdev);
#line 416
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 417
      val.ldv_38985.disk = 8U;
#line 418
      mask.ldv_38985.disk = 15U;
    } else {

    }
#line 421
    val.ldv_38985.pdsk = (unsigned char )nps;
#line 422
    mask.ldv_38985.pdsk = 15U;
#line 424
    goto ldv_53051;
  } else {

  }
#line 427
  if ((int )rv == 2) {
#line 428
    goto fail;
  } else {

  }
#line 429
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 430
    nps = drbd_try_outdate_peer(mdev);
#line 432
    if (force != 0 && (unsigned int )nps > 5U) {
#line 433
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 434
      nps = D_OUTDATED;
    } else {

    }
#line 437
    mask.ldv_38985.pdsk = 15U;
#line 438
    val.ldv_38985.pdsk = (unsigned char )nps;
#line 440
    goto ldv_53051;
  } else {

  }
#line 442
  if ((int )rv == -1) {
#line 445
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 446
    if (try < max_tries) {
#line 447
      try = max_tries + -1;
    } else {

    }
#line 448
    goto ldv_53051;
  } else {

  }
#line 450
  if ((int )rv <= 0) {
#line 451
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 453
    if ((int )rv <= 0) {
#line 454
      goto fail;
    } else {

    }
  } else {

  }
#line 456
  goto ldv_53053;
  ldv_53051: 
#line 391
  tmp = try;
#line 391
  try = try + 1;
#line 391
  if (tmp < max_tries) {
#line 392
    goto ldv_53054;
  } else {

  }
  ldv_53053: ;
#line 459
  if ((int )rv <= 0) {
#line 460
    goto fail;
  } else {

  }
#line 462
  if (forced != 0) {
#line 463
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 466
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 466
  if (tmp___0 == 0) {
#line 466
    goto ldv_53055;
  } else {

  }
#line 466
  tmp___1 = get_current();
#line 466
  __wait.flags = 0U;
#line 466
  __wait.private = (void *)tmp___1;
#line 466
  __wait.func = & autoremove_wake_function;
#line 466
  __wait.task_list.next = & __wait.task_list;
#line 466
  __wait.task_list.prev = & __wait.task_list;
  ldv_53058: 
#line 466
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 466
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 466
  if (tmp___2 == 0) {
#line 466
    goto ldv_53057;
  } else {

  }
#line 466
  schedule();
#line 466
  goto ldv_53058;
  ldv_53057: 
#line 466
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53055: ;
#line 468
  if ((unsigned int )new_role == 2U) {
#line 469
    set_disk_ro(mdev->vdisk, 1);
#line 470
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 470
    if (tmp___3 != 0) {
#line 471
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 472
      put_ldev(mdev);
    } else {

    }
  } else {
#line 475
    tmp___4 = get_net_conf(mdev);
#line 475
    if (tmp___4 != 0) {
#line 476
      (mdev->net_conf)->want_lose = 0U;
#line 477
      put_net_conf(mdev);
    } else {

    }
#line 479
    set_disk_ro(mdev->vdisk, 0);
#line 480
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 480
    if (tmp___5 != 0) {
#line 481
      if ((((int )mdev->state.ldv_38985.conn <= 9 || (int )mdev->state.ldv_38985.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 484
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 486
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 487
      put_ldev(mdev);
    } else {

    }
  }
#line 494
  if ((int )mdev->state.ldv_38985.conn > 8) {
#line 496
    if (forced != 0) {
#line 497
      drbd_send_uuids(mdev);
    } else {

    }
#line 498
    drbd_send_state(mdev);
  } else {

  }
#line 501
  drbd_md_sync(mdev);
#line 503
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 505
  ldv_mutex_unlock_220(& mdev->state_mutex);
#line 506
  return (rv);
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 513
  if ((unsigned int )minor >= minor_count) {
#line 514
    return (0);
  } else {

  }
#line 516
  mdev = minor_to_mdev((unsigned int )minor);
#line 518
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 519
    disk = 0;
#line 520
    mdev = drbd_new_device((unsigned int )minor);
#line 522
    spin_lock_irq(& drbd_pp_lock);
#line 523
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 524
      *(minor_table + (unsigned long )minor) = mdev;
#line 525
      disk = mdev->vdisk;
#line 526
      mdev = 0;
    } else {

    }
#line 528
    spin_unlock_irq(& drbd_pp_lock);
#line 530
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 533
      add_disk(disk);
    } else {
#line 535
      drbd_free_mdev(mdev);
    }
#line 537
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 540
  return (mdev);
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 548
  memset((void *)(& primary_args), 0, 4UL);
#line 549
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 549
  if (tmp == 0) {
#line 550
    reply->ret_code = 126;
#line 551
    return (0);
  } else {

  }
#line 554
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 554
  reply->ret_code = (int )tmp___0;
#line 557
  return (0);
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 563
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 563
  reply->ret_code = (int )tmp;
#line 565
  return (0);
}
}
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 573
  md_size_sect = 0UL;
#line 574
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 577
  bdev->md.md_size_sect = 262144U;
#line 578
  tmp = drbd_md_ss__(mdev, bdev);
#line 578
  bdev->md.md_offset = (u64 )tmp;
#line 579
  bdev->md.al_offset = 8;
#line 580
  bdev->md.bm_offset = 72;
#line 581
  goto ldv_53082;
  case -2: 
#line 584
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 584
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 585
  bdev->md.md_offset = 0ULL;
#line 586
  bdev->md.al_offset = 8;
#line 587
  bdev->md.bm_offset = 72;
#line 588
  goto ldv_53082;
  case -1: ;
  case -3: 
#line 591
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 591
  bdev->md.md_offset = (u64 )tmp___1;
#line 593
  bdev->md.al_offset = -64;
#line 595
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 596
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 597
  md_size_sect = md_size_sect >> 15;
#line 598
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 602
  md_size_sect = md_size_sect + 72UL;
#line 604
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 606
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 607
  goto ldv_53082;
  }
  ldv_53082: ;
#line 610
  return;
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 616
  units[0] = 75;
#line 616
  units[1] = 77;
#line 616
  units[2] = 71;
#line 616
  units[3] = 84;
#line 616
  units[4] = 80;
#line 616
  units[5] = 69;
#line 617
  base = 0;
#line 618
  goto ldv_53093;
  ldv_53092: 
#line 620
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 621
  base = base + 1;
  ldv_53093: ;
#line 618
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 619
    goto ldv_53092;
  } else {

  }
#line 623
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 625
  return (buf);
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 643
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 644
  tmp = is_susp(mdev->state);
#line 644
  if (tmp != 0) {
#line 645
    return;
  } else {

  }
#line 646
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 646
  if (tmp___0 == 0) {
#line 646
    goto ldv_53098;
  } else {

  }
#line 646
  tmp___1 = get_current();
#line 646
  __wait.flags = 0U;
#line 646
  __wait.private = (void *)tmp___1;
#line 646
  __wait.func = & autoremove_wake_function;
#line 646
  __wait.task_list.next = & __wait.task_list;
#line 646
  __wait.task_list.prev = & __wait.task_list;
  ldv_53101: 
#line 646
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 646
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 646
  if (tmp___2 == 0) {
#line 646
    goto ldv_53100;
  } else {

  }
#line 646
  schedule();
#line 646
  goto ldv_53101;
  ldv_53100: 
#line 646
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53098: ;
#line 649
  return;
}
}
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 651
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 652
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 653
  return;
}
}
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 670
  rv = 0;
#line 681
  drbd_suspend_io(mdev);
#line 684
  tmp = lc_try_lock(mdev->act_log);
#line 684
  if (tmp != 0) {
#line 684
    goto ldv_53117;
  } else {

  }
#line 684
  tmp___0 = get_current();
#line 684
  __wait.flags = 0U;
#line 684
  __wait.private = (void *)tmp___0;
#line 684
  __wait.func = & autoremove_wake_function;
#line 684
  __wait.task_list.next = & __wait.task_list;
#line 684
  __wait.task_list.prev = & __wait.task_list;
  ldv_53120: 
#line 684
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 684
  tmp___1 = lc_try_lock(mdev->act_log);
#line 684
  if (tmp___1 != 0) {
#line 684
    goto ldv_53119;
  } else {

  }
#line 684
  schedule();
#line 684
  goto ldv_53120;
  ldv_53119: 
#line 684
  finish_wait(& mdev->al_wait, & __wait);
  ldv_53117: 
#line 686
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 687
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 688
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 691
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 693
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 695
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 695
  if (tmp___5 != size) {
#line 695
    goto _L;
  } else {
#line 695
    tmp___6 = drbd_bm_capacity(mdev);
#line 695
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 698
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 699
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 699
      if (tmp___3 != 0L) {
#line 701
        tmp___2 = drbd_bm_capacity(mdev);
#line 701
        size = tmp___2 >> 1;
#line 702
        if (size == 0UL) {
#line 703
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 706
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 710
        rv = dev_size_error;
      } else {

      }
#line 713
      drbd_set_my_capacity(mdev, size);
#line 714
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 715
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 715
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 718
  if ((int )rv == -1) {
#line 719
    goto out;
  } else {

  }
#line 721
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 723
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 723
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 726
  if (la_size_changed != 0 || md_moved != 0) {
#line 729
    drbd_al_shrink(mdev);
#line 730
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 734
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 736
    if (err___0 != 0) {
#line 737
      rv = dev_size_error;
#line 738
      goto out;
    } else {

    }
#line 740
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 743
  if (size > la_size) {
#line 744
    rv = grew;
  } else {

  }
#line 745
  if (size < la_size) {
#line 746
    rv = shrunk;
  } else {

  }
  out: 
#line 748
  lc_unlock(mdev->act_log);
#line 749
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 750
  drbd_resume_io(mdev);
#line 752
  return (rv);
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 758
  p_size = mdev->p_size;
#line 759
  la_size = (sector_t )bdev->md.la_size_sect;
#line 761
  u_size = (sector_t )bdev->dc.disk_size;
#line 762
  size = 0UL;
#line 764
  m_size = drbd_get_max_capacity___1(bdev);
#line 766
  if ((int )mdev->state.ldv_38985.conn <= 9 && assume_peer_has_space != 0) {
#line 767
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 768
    p_size = m_size;
  } else {

  }
#line 771
  if (p_size != 0UL && m_size != 0UL) {
#line 772
    __min1 = p_size;
#line 772
    __min2 = m_size;
#line 772
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 774
  if (la_size != 0UL) {
#line 775
    size = la_size;
#line 776
    if (m_size != 0UL && m_size < size) {
#line 777
      size = m_size;
    } else {

    }
#line 778
    if (p_size != 0UL && p_size < size) {
#line 779
      size = p_size;
    } else {

    }
  } else {
#line 781
    if (m_size != 0UL) {
#line 782
      size = m_size;
    } else {

    }
#line 783
    if (p_size != 0UL) {
#line 784
      size = p_size;
    } else {

    }
  }
#line 788
  if (size == 0UL) {
#line 789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 791
  if (u_size != 0UL) {
#line 792
    if (u_size > size) {
#line 793
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 796
      size = u_size;
    }
  } else {

  }
#line 799
  return (size);
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 817
  _b = mdev->sync_conf.al_extents <= 6;
#line 817
  if (_b != 0) {
#line 817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            817);
  } else {

  }
#line 817
  if (_b != 0) {
#line 818
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 820
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 822
    return (0);
  } else {

  }
#line 824
  in_use = 0U;
#line 825
  t = mdev->act_log;
#line 826
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 829
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 830
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 831
    return (-12);
  } else {

  }
#line 833
  spin_lock_irq(& mdev->al_lock);
#line 834
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 835
    i = 0;
#line 835
    goto ldv_53149;
    ldv_53148: 
#line 836
    e = lc_element_by_index(t, (unsigned int )i);
#line 837
    if (e->refcnt != 0U) {
#line 838
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 840
    in_use = e->refcnt + in_use;
#line 835
    i = i + 1;
    ldv_53149: ;
#line 835
    if ((unsigned int )i < t->nr_elements) {
#line 836
      goto ldv_53148;
    } else {

    }

  } else {

  }
#line 843
  if (in_use == 0U) {
#line 844
    mdev->act_log = n;
  } else {

  }
#line 845
  spin_unlock_irq(& mdev->al_lock);
#line 846
  if (in_use != 0U) {
#line 847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 848
    lc_destroy(n);
#line 849
    return (-16);
  } else
#line 851
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 852
    lc_destroy(t);
  } else {

  }
#line 854
  drbd_md_mark_dirty(mdev);
#line 855
  return (0);
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  int max_hw_sectors ;
  int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 860
  q = mdev->rq_queue;
#line 861
  max_hw_sectors = (int )(max_bio_size >> 9);
#line 862
  max_segments = 0;
#line 864
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 864
  if (tmp___0 != 0) {
#line 865
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 867
    tmp = queue_max_hw_sectors(b);
#line 867
    _min1 = tmp;
#line 867
    _min2 = max_bio_size >> 9;
#line 867
    max_hw_sectors = (int )(_min1 < _min2 ? _min1 : _min2);
#line 868
    max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 869
    put_ldev(mdev);
  } else {

  }
#line 872
  blk_queue_logical_block_size(q, 512);
#line 873
  blk_queue_max_hw_sectors(q, (unsigned int )max_hw_sectors);
#line 875
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 876
  blk_queue_segment_boundary(q, 4095UL);
#line 878
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 878
  if (tmp___1 != 0) {
#line 879
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 881
    blk_queue_stack_limits(q, b___0);
#line 883
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 884
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 887
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 889
    put_ldev(mdev);
  } else {

  }
#line 891
  return;
}
}
#line 893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  int now ;
  int new ;
  int local ;
  int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 897
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 897
  now = (int )(tmp << 9);
#line 898
  local = mdev->local_max_bio_size;
#line 899
  peer = mdev->peer_max_bio_size;
#line 901
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 901
  if (tmp___1 != 0) {
#line 902
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 902
    local = (int )(tmp___0 << 9);
#line 903
    mdev->local_max_bio_size = local;
#line 904
    put_ldev(mdev);
  } else {

  }
#line 910
  if ((int )mdev->state.ldv_38985.conn > 9) {
#line 911
    if (mdev->agreed_pro_version <= 93) {
#line 912
      peer = mdev->peer_max_bio_size;
    } else
#line 913
    if (mdev->agreed_pro_version == 94) {
#line 914
      peer = 32768;
    } else {
#line 916
      peer = 131072;
    }
  } else {

  }
#line 919
  __min1 = local;
#line 919
  __min2 = peer;
#line 919
  new = __min1 < __min2 ? __min1 : __min2;
#line 921
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%d < %d)\n",
            new, now);
  } else {

  }
#line 924
  if (new != now) {
#line 925
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 927
  drbd_setup_queue_param(mdev, (unsigned int )new);
#line 928
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 939
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 939
  if (tmp == 0) {
#line 939
    goto ldv_53176;
  } else {

  }
#line 939
  tmp___0 = get_current();
#line 939
  __wait.flags = 0U;
#line 939
  __wait.private = (void *)tmp___0;
#line 939
  __wait.func = & autoremove_wake_function;
#line 939
  __wait.task_list.next = & __wait.task_list;
#line 939
  __wait.task_list.prev = & __wait.task_list;
  ldv_53179: 
#line 939
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 939
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 939
  if (tmp___1 == 0) {
#line 939
    goto ldv_53178;
  } else {

  }
#line 939
  schedule();
#line 939
  goto ldv_53179;
  ldv_53178: 
#line 939
  finish_wait(& mdev->state_wait, & __wait);
  ldv_53176: 
#line 940
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 940
  if (tmp___2 == 0) {
#line 940
    goto ldv_53180;
  } else {

  }
#line 940
  tmp___3 = get_current();
#line 940
  __wait___0.flags = 0U;
#line 940
  __wait___0.private = (void *)tmp___3;
#line 940
  __wait___0.func = & autoremove_wake_function;
#line 940
  __wait___0.task_list.next = & __wait___0.task_list;
#line 940
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53183: 
#line 940
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 940
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 940
  if (tmp___4 == 0) {
#line 940
    goto ldv_53182;
  } else {

  }
#line 940
  schedule();
#line 940
  goto ldv_53183;
  ldv_53182: 
#line 940
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_53180: 
#line 941
  drbd_thread_start(& mdev->worker);
#line 942
  drbd_flush_workqueue(mdev);
#line 943
  return;
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 950
  spin_lock_irq(& mdev->req_lock);
#line 951
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 954
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 955
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 957
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 958
  spin_unlock_irq(& mdev->req_lock);
#line 959
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 960
  return;
}
}
#line 963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 965
  s = 0;
#line 967
  tmp = lc_try_lock(mdev->act_log);
#line 967
  if (tmp != 0) {
#line 968
    drbd_al_shrink(mdev);
#line 969
    lc_unlock(mdev->act_log);
  } else {
#line 971
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 972
    return;
  }
#line 975
  spin_lock_irq(& mdev->req_lock);
#line 976
  if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 977
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 977
    s = tmp___0 == 0;
  } else {

  }
#line 979
  spin_unlock_irq(& mdev->req_lock);
#line 981
  if (s != 0) {
#line 982
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 983
  return;
}
}
#line 987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 994
  nbc = 0;
#line 996
  resync_lru = 0;
#line 999
  cp_discovered = 0;
#line 1002
  drbd_reconfig_start(mdev);
#line 1005
  if ((int )mdev->state.ldv_38985.disk > 0) {
#line 1006
    retcode = ERR_DISK_CONFIGURED;
#line 1007
    goto fail;
  } else {

  }
#line 1013
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1013
  if (tmp == 0) {
#line 1013
    goto ldv_53209;
  } else {

  }
#line 1013
  tmp___0 = get_current();
#line 1013
  __wait.flags = 0U;
#line 1013
  __wait.private = (void *)tmp___0;
#line 1013
  __wait.func = & autoremove_wake_function;
#line 1013
  __wait.task_list.next = & __wait.task_list;
#line 1013
  __wait.task_list.prev = & __wait.task_list;
  ldv_53212: 
#line 1013
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1013
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1013
  if (tmp___1 == 0) {
#line 1013
    goto ldv_53211;
  } else {

  }
#line 1013
  schedule();
#line 1013
  goto ldv_53212;
  ldv_53211: 
#line 1013
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53209: 
#line 1016
  tmp___2 = kzalloc(392UL, 208U);
#line 1016
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1017
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1018
    retcode = ERR_NOMEM;
#line 1019
    goto fail;
  } else {

  }
#line 1022
  nbc->dc.disk_size = 0ULL;
#line 1023
  nbc->dc.on_io_error = 0;
#line 1024
  nbc->dc.fencing = 0;
#line 1025
  nbc->dc.max_bio_bvecs = 0;
#line 1027
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1027
  if (tmp___3 == 0) {
#line 1028
    retcode = ERR_MANDATORY_TAG;
#line 1029
    goto fail;
  } else {

  }
#line 1032
  if (nbc->dc.meta_dev_idx < -3) {
#line 1033
    retcode = ERR_MD_IDX_INVALID;
#line 1034
    goto fail;
  } else {

  }
#line 1037
  tmp___4 = get_net_conf(mdev);
#line 1037
  if (tmp___4 != 0) {
#line 1038
    prot = (mdev->net_conf)->wire_protocol;
#line 1039
    put_net_conf(mdev);
#line 1040
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1041
      retcode = ERR_STONITH_AND_PROT_A;
#line 1042
      goto fail;
    } else {

    }
  } else {

  }
#line 1046
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1048
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1048
  if (tmp___6 != 0L) {
#line 1049
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1051
    retcode = ERR_OPEN_DISK;
#line 1052
    goto fail;
  } else {

  }
#line 1054
  nbc->backing_bdev = bdev;
#line 1064
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1068
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1068
  if (tmp___8 != 0L) {
#line 1069
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1069
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1071
    retcode = ERR_OPEN_MD_DISK;
#line 1072
    goto fail;
  } else {

  }
#line 1074
  nbc->md_bdev = bdev;
#line 1076
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1079
    retcode = ERR_MD_IDX_INVALID;
#line 1080
    goto fail;
  } else {

  }
#line 1083
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1086
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1087
    retcode = ERR_NOMEM;
#line 1088
    goto fail;
  } else {

  }
#line 1092
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1094
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1094
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1095
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1095
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1098
    retcode = ERR_DISK_TO_SMALL;
#line 1099
    goto fail;
  } else {

  }
#line 1102
  if (nbc->dc.meta_dev_idx < 0) {
#line 1103
    max_possible_sectors = 2251799813685248UL;
#line 1105
    min_md_device_sectors = 2048UL;
  } else {
#line 1107
    max_possible_sectors = 8587575296UL;
#line 1108
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1111
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1111
  if (tmp___11 < min_md_device_sectors) {
#line 1112
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1113
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1116
    goto fail;
  } else {

  }
#line 1121
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1121
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1121
  if (tmp___12 < tmp___13) {
#line 1123
    retcode = ERR_DISK_TO_SMALL;
#line 1124
    goto fail;
  } else {

  }
#line 1127
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1129
  if (nbc->known_size > max_possible_sectors) {
#line 1130
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1133
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1134
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1138
  drbd_suspend_io(mdev);
#line 1140
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1140
  if (tmp___14 == 0) {
#line 1140
    goto ldv_53214;
  } else {
#line 1140
    tmp___15 = is_susp(mdev->state);
#line 1140
    if (tmp___15 != 0) {
#line 1140
      goto ldv_53214;
    } else {

    }
  }
#line 1140
  tmp___16 = get_current();
#line 1140
  __wait___0.flags = 0U;
#line 1140
  __wait___0.private = (void *)tmp___16;
#line 1140
  __wait___0.func = & autoremove_wake_function;
#line 1140
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1140
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53217: 
#line 1140
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1140
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1140
  if (tmp___17 == 0) {
#line 1140
    goto ldv_53216;
  } else {
#line 1140
    tmp___18 = is_susp(mdev->state);
#line 1140
    if (tmp___18 != 0) {
#line 1140
      goto ldv_53216;
    } else {

    }
  }
#line 1140
  schedule();
#line 1140
  goto ldv_53217;
  ldv_53216: 
#line 1140
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_53214: 
#line 1142
  drbd_flush_workqueue(mdev);
#line 1144
  val.i = 0U;
#line 1144
  val.ldv_38985.disk = 1U;
#line 1144
  mask.i = 0U;
#line 1144
  mask.ldv_38985.disk = 15U;
#line 1144
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1145
  retcode = (enum drbd_ret_code )rv;
#line 1146
  drbd_resume_io(mdev);
#line 1147
  if ((int )rv <= 0) {
#line 1148
    goto fail;
  } else {

  }
#line 1150
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1150
  if (tmp___19 == 0) {
#line 1151
    goto force_diskless;
  } else {

  }
#line 1153
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1156
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1156
  logical_block_size = (int )tmp___20;
#line 1157
  if (logical_block_size == 0) {
#line 1158
    logical_block_size = 512;
  } else {

  }
#line 1160
  if (logical_block_size != 512) {
#line 1161
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1162
      tmp___21 = alloc_pages(16U, 0U);
#line 1162
      page = tmp___21;
#line 1163
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1164
        goto force_diskless_dec;
      } else {

      }
#line 1166
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1168
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1170
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1174
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1175
    tmp___22 = drbd_bm_init(mdev);
#line 1175
    if (tmp___22 != 0) {
#line 1176
      retcode = ERR_NOMEM;
#line 1177
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1181
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1181
  retcode = (enum drbd_ret_code )tmp___23;
#line 1182
  if ((unsigned int )retcode != 101U) {
#line 1183
    goto force_diskless_dec;
  } else {

  }
#line 1185
  if (((int )mdev->state.ldv_38985.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1188
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1190
    retcode = ERR_DATA_NOT_CURRENT;
#line 1191
    goto force_diskless_dec;
  } else {

  }
#line 1195
  tmp___24 = drbd_check_al_size(mdev);
#line 1195
  if (tmp___24 != 0) {
#line 1196
    retcode = ERR_NOMEM;
#line 1197
    goto force_diskless_dec;
  } else {

  }
#line 1201
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1201
  if (tmp___25 != 0) {
#line 1201
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1201
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1203
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1204
      retcode = ERR_DISK_TO_SMALL;
#line 1205
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1208
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1208
  if (tmp___27 == 0) {
#line 1209
    retcode = ERR_IO_MD_DISK;
#line 1210
    goto force_diskless_dec;
  } else {

  }
#line 1215
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1216
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1218
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1224
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1224);
  } else {

  }
#line 1225
  mdev->ldev = nbc;
#line 1226
  mdev->resync = resync_lru;
#line 1227
  nbc = 0;
#line 1228
  resync_lru = 0;
#line 1230
  mdev->write_ordering = WO_bdev_flush;
#line 1231
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1233
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1233
  if (tmp___28 != 0) {
#line 1234
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1236
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1238
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1238
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1240
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1241
    cp_discovered = 1;
  } else {

  }
#line 1244
  mdev->send_cnt = 0U;
#line 1245
  mdev->recv_cnt = 0U;
#line 1246
  mdev->read_cnt = 0U;
#line 1247
  mdev->writ_cnt = 0U;
#line 1249
  drbd_reconsider_max_bio_size(mdev);
#line 1265
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1266
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1266
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1266
    if (tmp___30 != 0) {
#line 1266
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1266
      if (tmp___31 == 0) {
#line 1269
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1271
  dd = drbd_determine_dev_size(mdev, 0);
#line 1272
  if ((int )dd == -1) {
#line 1273
    retcode = ERR_NOMEM_BITMAP;
#line 1274
    goto force_diskless_dec;
  } else
#line 1275
  if ((int )dd == 2) {
#line 1276
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1278
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1278
  if (tmp___34 != 0) {
#line 1279
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1281
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1281
    if (tmp___32 != 0) {
#line 1283
      retcode = ERR_IO_MD_DISK;
#line 1284
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1287
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1287
    if (tmp___33 < 0) {
#line 1289
      retcode = ERR_IO_MD_DISK;
#line 1290
      goto force_diskless_dec;
    } else {

    }
  }
#line 1294
  if (cp_discovered != 0) {
#line 1295
    drbd_al_apply_to_bm(mdev);
#line 1296
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1296
    if (tmp___35 != 0) {
#line 1298
      retcode = ERR_IO_MD_DISK;
#line 1299
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1303
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1303
  tmp___37 = drbd_bm_bits(mdev);
#line 1303
  if (tmp___36 == tmp___37) {
#line 1304
    drbd_suspend_al(mdev);
  } else {

  }
#line 1306
  spin_lock_irq(& mdev->req_lock);
#line 1307
  os = mdev->state;
#line 1308
  ns.i = os.i;
#line 1314
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1314
  if (tmp___39 != 0) {
#line 1315
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1315
    if (tmp___38 != 0) {
#line 1316
      ns.ldv_38985.disk = 7U;
    } else {
#line 1318
      ns.ldv_38985.disk = 5U;
    }
  } else {
#line 1320
    ns.ldv_38985.disk = 4U;
  }
#line 1323
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1323
  if (tmp___40 != 0) {
#line 1324
    ns.ldv_38985.pdsk = 5U;
  } else {

  }
#line 1326
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1328
    ns.ldv_38985.disk = 8U;
  } else {

  }
#line 1337
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1338
    mdev->new_state_tmp.i = ns.i;
#line 1339
    ns.i = os.i;
#line 1340
    ns.ldv_38985.disk = 3U;
#line 1345
    kfree((void const   *)mdev->p_uuid);
#line 1346
    mdev->p_uuid = 0;
  } else {

  }
#line 1349
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1350
  ns = mdev->state;
#line 1351
  spin_unlock_irq(& mdev->req_lock);
#line 1353
  if ((int )rv <= 0) {
#line 1354
    goto force_diskless_dec;
  } else {

  }
#line 1356
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1357
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1359
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1361
  drbd_md_mark_dirty(mdev);
#line 1362
  drbd_md_sync(mdev);
#line 1364
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1365
  put_ldev(mdev);
#line 1366
  reply->ret_code = (int )retcode;
#line 1367
  drbd_reconfig_done(mdev);
#line 1368
  return (0);
  force_diskless_dec: 
#line 1371
  put_ldev(mdev);
  force_diskless: 
#line 1373
  val___0.i = 0U;
#line 1373
  val___0.ldv_38985.disk = 2U;
#line 1373
  mask___0.i = 0U;
#line 1373
  mask___0.ldv_38985.disk = 15U;
#line 1373
  drbd_force_state(mdev, mask___0, val___0);
#line 1374
  drbd_md_sync(mdev);
  fail: ;
#line 1376
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1377
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1378
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1380
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1381
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1383
    kfree((void const   *)nbc);
  } else {

  }
#line 1385
  lc_destroy(resync_lru);
#line 1387
  reply->ret_code = (int )retcode;
#line 1388
  drbd_reconfig_done(mdev);
#line 1389
  return (0);
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1402
  drbd_suspend_io(mdev);
#line 1403
  val.i = 0U;
#line 1403
  val.ldv_38985.disk = 2U;
#line 1403
  mask.i = 0U;
#line 1403
  mask.ldv_38985.disk = 15U;
#line 1403
  tmp = drbd_request_state(mdev, mask, val);
#line 1403
  retcode = (enum drbd_ret_code )tmp;
#line 1405
  __ret = 0;
#line 1405
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1405
    tmp___0 = get_current();
#line 1405
    __wait.flags = 0U;
#line 1405
    __wait.private = (void *)tmp___0;
#line 1405
    __wait.func = & autoremove_wake_function;
#line 1405
    __wait.task_list.next = & __wait.task_list;
#line 1405
    __wait.task_list.prev = & __wait.task_list;
    ldv_53244: 
#line 1405
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1405
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1405
      goto ldv_53242;
    } else {

    }
#line 1405
    tmp___1 = get_current();
#line 1405
    tmp___2 = signal_pending(tmp___1);
#line 1405
    if (tmp___2 == 0) {
#line 1405
      schedule();
#line 1405
      goto ldv_53243;
    } else {

    }
#line 1405
    __ret = -512;
#line 1405
    goto ldv_53242;
    ldv_53243: ;
#line 1405
    goto ldv_53244;
    ldv_53242: 
#line 1405
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1405
  ret = __ret;
#line 1407
  drbd_resume_io(mdev);
#line 1408
  if ((long )retcode == 4294967285L) {
#line 1409
    retcode = 2;
  } else {

  }
#line 1410
  if (ret != 0) {
#line 1411
    retcode = ERR_INTR;
  } else {

  }
#line 1412
  reply->ret_code = (int )retcode;
#line 1413
  return (0);
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1421
  new_conf = 0;
#line 1422
  tfm = 0;
#line 1423
  integrity_w_tfm = 0;
#line 1424
  integrity_r_tfm = 0;
#line 1425
  new_tl_hash = 0;
#line 1426
  new_ee_hash = 0;
#line 1429
  int_dig_out = 0;
#line 1430
  int_dig_in = 0;
#line 1431
  int_dig_vv = 0;
#line 1434
  drbd_reconfig_start(mdev);
#line 1436
  if ((int )mdev->state.ldv_38985.conn > 0) {
#line 1437
    retcode = ERR_NET_CONFIGURED;
#line 1438
    goto fail;
  } else {

  }
#line 1442
  tmp = kzalloc(544UL, 208U);
#line 1442
  new_conf = (struct net_conf *)tmp;
#line 1443
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1444
    retcode = ERR_NOMEM;
#line 1445
    goto fail;
  } else {

  }
#line 1448
  new_conf->timeout = 60;
#line 1449
  new_conf->try_connect_int = 10;
#line 1450
  new_conf->ping_int = 10;
#line 1451
  new_conf->max_epoch_size = 2048;
#line 1452
  new_conf->max_buffers = 2048;
#line 1453
  new_conf->unplug_watermark = 128;
#line 1454
  new_conf->sndbuf_size = 0;
#line 1455
  new_conf->rcvbuf_size = 0;
#line 1456
  new_conf->ko_count = 0;
#line 1457
  new_conf->after_sb_0p = 0;
#line 1458
  new_conf->after_sb_1p = 0;
#line 1459
  new_conf->after_sb_2p = 0;
#line 1460
  new_conf->want_lose = 0U;
#line 1461
  new_conf->two_primaries = 0U;
#line 1462
  new_conf->wire_protocol = 3;
#line 1463
  new_conf->ping_timeo = 5;
#line 1464
  new_conf->rr_conflict = 0;
#line 1465
  new_conf->on_congestion = 0;
#line 1466
  new_conf->cong_extents = 127;
#line 1468
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1468
  if (tmp___0 == 0) {
#line 1469
    retcode = ERR_MANDATORY_TAG;
#line 1470
    goto fail;
  } else {

  }
#line 1473
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1475
    retcode = ERR_NOT_PROTO_C;
#line 1476
    goto fail;
  } else {

  }
#line 1479
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1479
  if (tmp___1 != 0) {
#line 1480
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1481
    put_ldev(mdev);
#line 1482
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1483
      retcode = ERR_STONITH_AND_PROT_A;
#line 1484
      goto fail;
    } else {

    }
  } else {

  }
#line 1488
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1489
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1490
    goto fail;
  } else {

  }
#line 1493
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1494
    retcode = ERR_DISCARD;
#line 1495
    goto fail;
  } else {

  }
#line 1498
  retcode = NO_ERROR;
#line 1500
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1501
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1502
  i = 0;
#line 1502
  goto ldv_53272;
  ldv_53271: 
#line 1503
  odev = minor_to_mdev((unsigned int )i);
#line 1504
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1505
    goto ldv_53270;
  } else {

  }
#line 1506
  tmp___4 = get_net_conf(odev);
#line 1506
  if (tmp___4 != 0) {
#line 1507
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1508
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1508
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1508
      if (tmp___2 == 0) {
#line 1510
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1512
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1513
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1513
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1513
      if (tmp___3 == 0) {
#line 1515
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1517
    put_net_conf(odev);
#line 1518
    if ((unsigned int )retcode != 101U) {
#line 1519
      goto fail;
    } else {

    }
  } else {

  }
  ldv_53270: 
#line 1502
  i = i + 1;
  ldv_53272: ;
#line 1502
  if ((unsigned int )i < minor_count) {
#line 1503
    goto ldv_53271;
  } else {

  }

#line 1523
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1524
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1526
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1527
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1527
    if (tmp___5 != 0L) {
#line 1528
      tfm = 0;
#line 1529
      retcode = ERR_AUTH_ALG;
#line 1530
      goto fail;
    } else {

    }
#line 1533
    tmp___6 = crypto_hash_tfm(tfm);
#line 1533
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1533
    if (tmp___7 == 0) {
#line 1534
      retcode = ERR_AUTH_ALG_ND;
#line 1535
      goto fail;
    } else {

    }
  } else {

  }
#line 1539
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1540
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1541
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1541
    if (tmp___8 != 0L) {
#line 1542
      integrity_w_tfm = 0;
#line 1543
      retcode = ERR_INTEGRITY_ALG;
#line 1544
      goto fail;
    } else {

    }
#line 1547
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1547
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1547
    if (tmp___10 == 0) {
#line 1548
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1549
      goto fail;
    } else {

    }
#line 1552
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1553
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1553
    if (tmp___11 != 0L) {
#line 1554
      integrity_r_tfm = 0;
#line 1555
      retcode = ERR_INTEGRITY_ALG;
#line 1556
      goto fail;
    } else {

    }
  } else {

  }
#line 1560
  ns = new_conf->max_epoch_size / 8;
#line 1561
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1562
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1562
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1563
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1564
      retcode = ERR_NOMEM;
#line 1565
      goto fail;
    } else {

    }
  } else {

  }
#line 1569
  ns = new_conf->max_buffers / 8;
#line 1570
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1571
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1571
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1572
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1573
      retcode = ERR_NOMEM;
#line 1574
      goto fail;
    } else {

    }
  } else {

  }
#line 1578
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1580
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1581
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1581
    i = (int )tmp___14;
#line 1582
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1583
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1584
      retcode = ERR_NOMEM;
#line 1585
      goto fail;
    } else {

    }
#line 1587
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1588
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1589
      retcode = ERR_NOMEM;
#line 1590
      goto fail;
    } else {

    }
#line 1592
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1593
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1594
      retcode = ERR_NOMEM;
#line 1595
      goto fail;
    } else {

    }
  } else {

  }
#line 1599
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1600
    tmp___15 = drbd_bm_init(mdev);
#line 1600
    if (tmp___15 != 0) {
#line 1601
      retcode = ERR_NOMEM;
#line 1602
      goto fail;
    } else {

    }
  } else {

  }
#line 1606
  drbd_flush_workqueue(mdev);
#line 1607
  spin_lock_irq(& mdev->req_lock);
#line 1608
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1609
    retcode = ERR_NET_CONFIGURED;
#line 1610
    spin_unlock_irq(& mdev->req_lock);
#line 1611
    goto fail;
  } else {

  }
#line 1613
  mdev->net_conf = new_conf;
#line 1615
  mdev->send_cnt = 0U;
#line 1616
  mdev->recv_cnt = 0U;
#line 1618
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1619
    kfree((void const   *)mdev->tl_hash);
#line 1620
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1621
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1624
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1625
    kfree((void const   *)mdev->ee_hash);
#line 1626
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1627
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1630
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1631
  mdev->cram_hmac_tfm = tfm;
#line 1633
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1634
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1636
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1637
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1639
  kfree((void const   *)mdev->int_dig_out);
#line 1640
  kfree((void const   *)mdev->int_dig_in);
#line 1641
  kfree((void const   *)mdev->int_dig_vv);
#line 1642
  mdev->int_dig_out = int_dig_out;
#line 1643
  mdev->int_dig_in = int_dig_in;
#line 1644
  mdev->int_dig_vv = int_dig_vv;
#line 1645
  __ns.i = mdev->state.i;
#line 1645
  __ns.ldv_38985.conn = 2U;
#line 1645
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1645
  retcode = (enum drbd_ret_code )tmp___16;
#line 1646
  spin_unlock_irq(& mdev->req_lock);
#line 1648
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1649
  reply->ret_code = (int )retcode;
#line 1650
  drbd_reconfig_done(mdev);
#line 1651
  return (0);
  fail: 
#line 1654
  kfree((void const   *)int_dig_out);
#line 1655
  kfree((void const   *)int_dig_in);
#line 1656
  kfree((void const   *)int_dig_vv);
#line 1657
  crypto_free_hash(tfm);
#line 1658
  crypto_free_hash(integrity_w_tfm);
#line 1659
  crypto_free_hash(integrity_r_tfm);
#line 1660
  kfree((void const   *)new_tl_hash);
#line 1661
  kfree((void const   *)new_ee_hash);
#line 1662
  kfree((void const   *)new_conf);
#line 1664
  reply->ret_code = (int )retcode;
#line 1665
  drbd_reconfig_done(mdev);
#line 1666
  return (0);
}
}
#line 1669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1675
  memset((void *)(& dc), 0, 4UL);
#line 1676
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1676
  if (tmp == 0) {
#line 1677
    retcode = 126;
#line 1678
    goto fail;
  } else {

  }
#line 1681
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1682
    spin_lock_irq(& mdev->req_lock);
#line 1683
    if ((int )mdev->state.ldv_38985.conn > 7) {
#line 1684
      __ns.i = mdev->state.i;
#line 1684
      __ns.ldv_38985.conn = 1U;
#line 1684
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1685
    spin_unlock_irq(& mdev->req_lock);
#line 1686
    goto done;
  } else {

  }
#line 1689
  val.i = 0U;
#line 1689
  val.ldv_38985.conn = 1U;
#line 1689
  mask.i = 0U;
#line 1689
  mask.ldv_38985.conn = 31U;
#line 1689
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1689
  retcode = (int )tmp___0;
#line 1691
  if (retcode == 2) {
#line 1692
    goto done;
  } else
#line 1693
  if (retcode == -9) {
#line 1694
    goto done;
  } else
#line 1695
  if (retcode == -7) {
#line 1698
    val___0.i = 0U;
#line 1698
    val___0.ldv_38985.conn = 1U;
#line 1698
    val___0.ldv_38985.pdsk = 5U;
#line 1697
    mask___0.i = 0U;
#line 1697
    mask___0.ldv_38985.conn = 31U;
#line 1698
    mask___0.ldv_38985.pdsk = 15U;
#line 1698
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1699
  if (retcode == -10) {
#line 1702
    val___1.i = 0U;
#line 1702
    val___1.ldv_38985.conn = 1U;
#line 1702
    val___1.ldv_38985.disk = 5U;
#line 1701
    mask___1.i = 0U;
#line 1701
    mask___1.ldv_38985.conn = 31U;
#line 1702
    mask___1.ldv_38985.disk = 15U;
#line 1702
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1702
    retcode = (int )tmp___1;
#line 1704
    if (retcode == -11 || retcode == -16) {
#line 1705
      val___2.i = 0U;
#line 1705
      val___2.ldv_38985.conn = 1U;
#line 1705
      mask___2.i = 0U;
#line 1705
      mask___2.ldv_38985.conn = 31U;
#line 1705
      drbd_force_state(mdev, mask___2, val___2);
#line 1706
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1710
  if (retcode <= 0) {
#line 1711
    goto fail;
  } else {

  }
#line 1713
  __ret = 0;
#line 1713
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1713
    tmp___2 = get_current();
#line 1713
    __wait.flags = 0U;
#line 1713
    __wait.private = (void *)tmp___2;
#line 1713
    __wait.func = & autoremove_wake_function;
#line 1713
    __wait.task_list.next = & __wait.task_list;
#line 1713
    __wait.task_list.prev = & __wait.task_list;
    ldv_53307: 
#line 1713
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1713
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1713
      goto ldv_53305;
    } else {

    }
#line 1713
    tmp___3 = get_current();
#line 1713
    tmp___4 = signal_pending(tmp___3);
#line 1713
    if (tmp___4 == 0) {
#line 1713
      schedule();
#line 1713
      goto ldv_53306;
    } else {

    }
#line 1713
    __ret = -512;
#line 1713
    goto ldv_53305;
    ldv_53306: ;
#line 1713
    goto ldv_53307;
    ldv_53305: 
#line 1713
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1713
  if (__ret != 0) {
#line 1717
    retcode = 129;
#line 1718
    goto fail;
  } else {

  }
  done: 
#line 1722
  retcode = 101;
  fail: 
#line 1724
  drbd_md_sync(mdev);
#line 1725
  reply->ret_code = retcode;
#line 1726
  return (0);
}
}
#line 1729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1733
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1734
  if ((int )mdev->state.ldv_38985.role != (int )mdev->state.ldv_38985.peer) {
#line 1735
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1737
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1739
  if (iass != 0) {
#line 1740
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1742
    val.i = 0U;
#line 1742
    val.ldv_38985.conn = 15U;
#line 1742
    mask.i = 0U;
#line 1742
    mask.ldv_38985.conn = 31U;
#line 1742
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1744
  return;
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1749
  retcode = 101;
#line 1753
  memset((void *)(& rs), 0, 16UL);
#line 1754
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1754
  if (tmp == 0) {
#line 1755
    retcode = 126;
#line 1756
    goto fail;
  } else {

  }
#line 1759
  if ((int )mdev->state.ldv_38985.conn > 10) {
#line 1760
    retcode = 130;
#line 1761
    goto fail;
  } else {

  }
#line 1764
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1766
    retcode = 131;
#line 1767
    goto fail;
  } else {

  }
#line 1770
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1770
  if (tmp___0 == 0) {
#line 1771
    retcode = 138;
#line 1772
    goto fail;
  } else {

  }
#line 1775
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1776
    retcode = 153;
#line 1777
    goto fail;
  } else {

  }
#line 1780
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1780
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1781
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1783
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1784
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1785
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1786
  drbd_md_sync(mdev);
#line 1787
  put_ldev(mdev);
#line 1788
  if ((int )dd == -1) {
#line 1789
    retcode = 140;
#line 1790
    goto fail;
  } else {

  }
#line 1793
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1794
    if ((int )dd == 2) {
#line 1795
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1797
    drbd_send_uuids(mdev);
#line 1798
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1802
  reply->ret_code = retcode;
#line 1803
  return (0);
}
}
#line 1806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1809
  retcode = 101;
#line 1813
  verify_tfm = 0;
#line 1814
  csums_tfm = 0;
#line 1817
  rs_plan_s = 0;
#line 1820
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1820
  if (tmp) {
#line 1820
    tmp___0 = 0;
  } else {
#line 1820
    tmp___0 = 1;
  }
#line 1820
  if (tmp___0) {
#line 1821
    retcode = 122;
#line 1822
    goto fail;
  } else {

  }
#line 1825
  if ((nlp->flags & 2) != 0) {
#line 1826
    memset((void *)(& sc), 0, 212UL);
#line 1827
    sc.rate = 250;
#line 1828
    sc.after = -1;
#line 1829
    sc.al_extents = 127;
#line 1830
    sc.on_no_data = 0;
#line 1831
    sc.c_plan_ahead = 0;
#line 1832
    sc.c_delay_target = 10;
#line 1833
    sc.c_fill_target = 0;
#line 1834
    sc.c_max_rate = 102400;
#line 1835
    sc.c_min_rate = 4096;
  } else {
#line 1837
    __len = 212UL;
#line 1837
    if (__len > 63UL) {
#line 1837
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1837
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1839
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1839
  if (tmp___1 == 0) {
#line 1840
    retcode = 126;
#line 1841
    goto fail;
  } else {

  }
#line 1845
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1850
  if (rsr != 0) {
#line 1850
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1850
    if (tmp___2 != 0) {
#line 1851
      retcode = 148;
#line 1852
      goto fail;
    } else {

    }
  } else {

  }
#line 1855
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1856
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1857
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1857
    if (tmp___3 != 0L) {
#line 1858
      csums_tfm = 0;
#line 1859
      retcode = 144;
#line 1860
      goto fail;
    } else {

    }
#line 1863
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1863
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1863
    if (tmp___5 == 0) {
#line 1864
      retcode = 145;
#line 1865
      goto fail;
    } else {

    }
  } else {

  }
#line 1870
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1872
  if (ovr != 0) {
#line 1873
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1873
    if (tmp___6 != 0) {
#line 1874
      retcode = 149;
#line 1875
      goto fail;
    } else {

    }
  } else {

  }
#line 1879
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1880
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1881
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1881
    if (tmp___7 != 0L) {
#line 1882
      verify_tfm = 0;
#line 1883
      retcode = 146;
#line 1884
      goto fail;
    } else {

    }
#line 1887
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1887
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1887
    if (tmp___9 == 0) {
#line 1888
      retcode = 147;
#line 1889
      goto fail;
    } else {

    }
  } else {

  }
#line 1894
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1895
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1897
    if (err != 0) {
#line 1898
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1899
      retcode = 143;
#line 1900
      goto fail;
    } else {

    }
  } else {

  }
#line 1904
  _b = sc.rate <= 0;
#line 1904
  if (_b != 0) {
#line 1904
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1904);
  } else {

  }
#line 1904
  if (_b != 0) {
#line 1904
    sc.rate = 1;
  } else {

  }
#line 1905
  _b___0 = sc.al_extents <= 6;
#line 1905
  if (_b___0 != 0) {
#line 1905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1905);
  } else {

  }
#line 1905
  if (_b___0 != 0) {
#line 1905
    sc.al_extents = 127;
  } else {

  }
#line 1907
  if (sc.al_extents > 3843) {
#line 1908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1909
    sc.al_extents = 3843;
  } else {

  }
#line 1916
  if (sc.after >= 0) {
#line 1917
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1922
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1923
  if (retcode != 101) {
#line 1924
    goto fail;
  } else {

  }
#line 1926
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1927
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1928
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1928
    rs_plan_s = (int *)tmp___10;
#line 1929
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1930
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1931
      retcode = 122;
#line 1932
      goto fail;
    } else {

    }
  } else {

  }
#line 1938
  spin_lock(& mdev->peer_seq_lock);
#line 1939
  mdev->sync_conf = sc;
#line 1941
  if (rsr == 0) {
#line 1942
    crypto_free_hash(mdev->csums_tfm);
#line 1943
    mdev->csums_tfm = csums_tfm;
#line 1944
    csums_tfm = 0;
  } else {

  }
#line 1947
  if (ovr == 0) {
#line 1948
    crypto_free_hash(mdev->verify_tfm);
#line 1949
    mdev->verify_tfm = verify_tfm;
#line 1950
    verify_tfm = 0;
  } else {

  }
#line 1953
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1954
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1955
    mdev->rs_plan_s.values = rs_plan_s;
#line 1956
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1957
    mdev->rs_planed = 0;
#line 1958
    rs_plan_s = 0;
  } else {

  }
#line 1961
  spin_unlock(& mdev->peer_seq_lock);
#line 1963
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1963
  if (tmp___14 != 0) {
#line 1964
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1964
    if (tmp___11 != 0) {
#line 1964
      goto ldv_53351;
    } else {

    }
#line 1964
    tmp___12 = get_current();
#line 1964
    __wait.flags = 0U;
#line 1964
    __wait.private = (void *)tmp___12;
#line 1964
    __wait.func = & autoremove_wake_function;
#line 1964
    __wait.task_list.next = & __wait.task_list;
#line 1964
    __wait.task_list.prev = & __wait.task_list;
    ldv_53354: 
#line 1964
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1964
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1964
    if (tmp___13 != 0) {
#line 1964
      goto ldv_53353;
    } else {

    }
#line 1964
    schedule();
#line 1964
    goto ldv_53354;
    ldv_53353: 
#line 1964
    finish_wait(& mdev->al_wait, & __wait);
    ldv_53351: 
#line 1965
    drbd_al_shrink(mdev);
#line 1966
    err = drbd_check_al_size(mdev);
#line 1967
    lc_unlock(mdev->act_log);
#line 1968
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1970
    put_ldev(mdev);
#line 1971
    drbd_md_sync(mdev);
#line 1973
    if (err != 0) {
#line 1974
      retcode = 122;
#line 1975
      goto fail;
    } else {

    }
  } else {

  }
#line 1979
  if ((int )mdev->state.ldv_38985.conn > 9) {
#line 1980
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1982
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1982
  if (tmp___15) {
#line 1982
    tmp___16 = 0;
  } else {
#line 1982
    tmp___16 = 1;
  }
#line 1982
  if (tmp___16) {
#line 1983
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1984
    drbd_calc_cpu_mask(mdev);
#line 1985
    mdev->receiver.reset_cpu_mask = 1;
#line 1986
    mdev->asender.reset_cpu_mask = 1;
#line 1987
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1990
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1992
  kfree((void const   *)rs_plan_s);
#line 1993
  free_cpumask_var(new_cpu_mask);
#line 1994
  crypto_free_hash(csums_tfm);
#line 1995
  crypto_free_hash(verify_tfm);
#line 1996
  reply->ret_code = retcode;
#line 1997
  return (0);
}
}
#line 2000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2007
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2007
  if (tmp == 0) {
#line 2007
    goto ldv_53361;
  } else {

  }
#line 2007
  tmp___0 = get_current();
#line 2007
  __wait.flags = 0U;
#line 2007
  __wait.private = (void *)tmp___0;
#line 2007
  __wait.func = & autoremove_wake_function;
#line 2007
  __wait.task_list.next = & __wait.task_list;
#line 2007
  __wait.task_list.prev = & __wait.task_list;
  ldv_53364: 
#line 2007
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2007
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2007
  if (tmp___1 == 0) {
#line 2007
    goto ldv_53363;
  } else {

  }
#line 2007
  schedule();
#line 2007
  goto ldv_53364;
  ldv_53363: 
#line 2007
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53361: 
#line 2009
  val.i = 0U;
#line 2009
  val.ldv_38985.conn = 12U;
#line 2009
  mask.i = 0U;
#line 2009
  mask.ldv_38985.conn = 31U;
#line 2009
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2009
  retcode = (int )tmp___2;
#line 2011
  if (retcode <= 0 && retcode != -15) {
#line 2012
    val___0.i = 0U;
#line 2012
    val___0.ldv_38985.conn = 12U;
#line 2012
    mask___0.i = 0U;
#line 2012
    mask___0.ldv_38985.conn = 31U;
#line 2012
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2014
  goto ldv_53381;
  ldv_53380: 
#line 2015
  spin_lock_irq(& mdev->req_lock);
#line 2016
  if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 2017
    __ns.i = mdev->state.i;
#line 2017
    __ns.ldv_38985.disk = 4U;
#line 2017
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2017
    retcode = (int )tmp___3;
  } else {

  }
#line 2018
  spin_unlock_irq(& mdev->req_lock);
#line 2020
  if (retcode != -15) {
#line 2021
    goto ldv_53375;
  } else {

  }
#line 2023
  val___1.i = 0U;
#line 2023
  val___1.ldv_38985.conn = 12U;
#line 2023
  mask___1.i = 0U;
#line 2023
  mask___1.ldv_38985.conn = 31U;
#line 2023
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_53381: ;
#line 2014
  if (retcode == -15) {
#line 2015
    goto ldv_53380;
  } else {

  }
  ldv_53375: 
#line 2026
  reply->ret_code = retcode;
#line 2027
  return (0);
}
}
#line 2030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2034
  rv = drbd_bmio_set_n_write(mdev);
#line 2035
  drbd_suspend_al(mdev);
#line 2036
  return (rv);
}
}
#line 2039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2046
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2046
  if (tmp == 0) {
#line 2046
    goto ldv_53392;
  } else {

  }
#line 2046
  tmp___0 = get_current();
#line 2046
  __wait.flags = 0U;
#line 2046
  __wait.private = (void *)tmp___0;
#line 2046
  __wait.func = & autoremove_wake_function;
#line 2046
  __wait.task_list.next = & __wait.task_list;
#line 2046
  __wait.task_list.prev = & __wait.task_list;
  ldv_53395: 
#line 2046
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2046
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2046
  if (tmp___1 == 0) {
#line 2046
    goto ldv_53394;
  } else {

  }
#line 2046
  schedule();
#line 2046
  goto ldv_53395;
  ldv_53394: 
#line 2046
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53392: 
#line 2048
  val.i = 0U;
#line 2048
  val.ldv_38985.conn = 11U;
#line 2048
  mask.i = 0U;
#line 2048
  mask.ldv_38985.conn = 31U;
#line 2048
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2048
  retcode = (int )tmp___2;
#line 2050
  if (retcode <= 0) {
#line 2051
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2054
      val___0.i = 0U;
#line 2054
      val___0.ldv_38985.pdsk = 4U;
#line 2054
      mask___0.i = 0U;
#line 2054
      mask___0.ldv_38985.pdsk = 15U;
#line 2054
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2055
      if (retcode > 0) {
#line 2056
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_DONT_CLEAR);
#line 2056
        if (tmp___3 != 0) {
#line 2059
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2062
      val___1.i = 0U;
#line 2062
      val___1.ldv_38985.conn = 11U;
#line 2062
      mask___1.i = 0U;
#line 2062
      mask___1.ldv_38985.conn = 31U;
#line 2062
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2065
  reply->ret_code = retcode;
#line 2066
  return (0);
}
}
#line 2069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2072
  retcode = 101;
#line 2074
  val.i = 0U;
#line 2074
  val.ldv_38985.user_isp = 1U;
#line 2074
  mask.i = 0U;
#line 2074
  mask.ldv_38985.user_isp = 1U;
#line 2074
  tmp = drbd_request_state(mdev, mask, val);
#line 2074
  if (tmp == 2) {
#line 2075
    retcode = 134;
  } else {

  }
#line 2077
  reply->ret_code = retcode;
#line 2078
  return (0);
}
}
#line 2081 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2084
  retcode = 101;
#line 2087
  val.i = 0U;
#line 2087
  val.ldv_38985.user_isp = 0U;
#line 2087
  mask.i = 0U;
#line 2087
  mask.ldv_38985.user_isp = 1U;
#line 2087
  tmp = drbd_request_state(mdev, mask, val);
#line 2087
  if (tmp == 2) {
#line 2088
    s = mdev->state;
#line 2089
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2090
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2093
      retcode = 135;
    }
  } else {

  }
#line 2097
  reply->ret_code = retcode;
#line 2098
  return (0);
}
}
#line 2101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2104
  val.i = 0U;
#line 2104
  val.ldv_38985.susp = 1U;
#line 2104
  mask.i = 0U;
#line 2104
  mask.ldv_38985.susp = 1U;
#line 2104
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2106
  return (0);
}
}
#line 2109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2112
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2112
  if (tmp != 0) {
#line 2113
    drbd_uuid_new_current(mdev);
#line 2114
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2116
  drbd_suspend_io(mdev);
#line 2117
  val.i = 0U;
#line 2117
  val.ldv_38985.susp = 0U;
#line 2117
  val.ldv_38985.susp_nod = 0U;
#line 2117
  val.ldv_38985.susp_fen = 0U;
#line 2117
  mask.i = 0U;
#line 2117
  mask.ldv_38985.susp = 1U;
#line 2117
  mask.ldv_38985.susp_nod = 1U;
#line 2117
  mask.ldv_38985.susp_fen = 1U;
#line 2117
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2118
  if (reply->ret_code == 1) {
#line 2119
    if ((int )mdev->state.ldv_38985.conn <= 9) {
#line 2120
      tl_clear(mdev);
    } else {

    }
#line 2121
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2122
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2124
  drbd_resume_io(mdev);
#line 2126
  return (0);
}
}
#line 2129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2132
  val.i = 0U;
#line 2132
  val.ldv_38985.disk = 5U;
#line 2132
  mask.i = 0U;
#line 2132
  mask.ldv_38985.disk = 15U;
#line 2132
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2133
  return (0);
}
}
#line 2136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2141
  tl = (unsigned short *)(& reply->tag_list);
#line 2143
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2143
  if (tmp != 0) {
#line 2144
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2145
    put_ldev(mdev);
  } else {

  }
#line 2148
  tmp___0 = get_net_conf(mdev);
#line 2148
  if (tmp___0 != 0) {
#line 2149
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2150
    put_net_conf(mdev);
  } else {

  }
#line 2152
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2154
  tmp___1 = tl;
#line 2154
  tl = tl + 1;
#line 2154
  __gu_p = (void *)tmp___1;
#line 2154
  switch (2UL) {
  case 1UL: 
#line 2154
  *((u8 *)__gu_p) = 0U;
#line 2154
  goto ldv_53464;
  case 2UL: 
#line 2154
  put_unaligned_le16(0, __gu_p);
#line 2154
  goto ldv_53464;
  case 4UL: 
#line 2154
  put_unaligned_le32(0U, __gu_p);
#line 2154
  goto ldv_53464;
  case 8UL: 
#line 2154
  put_unaligned_le64(0ULL, __gu_p);
#line 2154
  goto ldv_53464;
  default: 
#line 2154
  __bad_unaligned_access_size();
#line 2154
  goto ldv_53464;
  }
  ldv_53464: ;
#line 2156
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2162
  tl = (unsigned short *)(& reply->tag_list);
#line 2163
  s = mdev->state;
#line 2167
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2170
  if ((int )s.ldv_38985.conn > 15 && (int )s.ldv_38985.conn <= 21) {
#line 2171
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2171
    if (tmp != 0) {
#line 2172
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2173
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2174
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2177
  tmp___0 = tl;
#line 2177
  tl = tl + 1;
#line 2177
  __gu_p = (void *)tmp___0;
#line 2177
  switch (2UL) {
  case 1UL: 
#line 2177
  *((u8 *)__gu_p) = 0U;
#line 2177
  goto ldv_53480;
  case 2UL: 
#line 2177
  put_unaligned_le16(0, __gu_p);
#line 2177
  goto ldv_53480;
  case 4UL: 
#line 2177
  put_unaligned_le32(0U, __gu_p);
#line 2177
  goto ldv_53480;
  case 8UL: 
#line 2177
  put_unaligned_le64(0ULL, __gu_p);
#line 2177
  goto ldv_53480;
  default: 
#line 2177
  __bad_unaligned_access_size();
#line 2177
  goto ldv_53480;
  }
  ldv_53480: ;
#line 2179
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2187
  tl = (unsigned short *)(& reply->tag_list);
#line 2189
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2189
  if (tmp != 0) {
#line 2190
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2191
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2192
    put_ldev(mdev);
  } else {

  }
#line 2194
  tmp___0 = tl;
#line 2194
  tl = tl + 1;
#line 2194
  __gu_p = (void *)tmp___0;
#line 2194
  switch (2UL) {
  case 1UL: 
#line 2194
  *((u8 *)__gu_p) = 0U;
#line 2194
  goto ldv_53493;
  case 2UL: 
#line 2194
  put_unaligned_le16(0, __gu_p);
#line 2194
  goto ldv_53493;
  case 4UL: 
#line 2194
  put_unaligned_le32(0U, __gu_p);
#line 2194
  goto ldv_53493;
  case 8UL: 
#line 2194
  put_unaligned_le64(0ULL, __gu_p);
#line 2194
  goto ldv_53493;
  default: 
#line 2194
  __bad_unaligned_access_size();
#line 2194
  goto ldv_53493;
  }
  ldv_53493: ;
#line 2196
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2211
  tl = (unsigned short *)(& reply->tag_list);
#line 2213
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2213
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2213
    rv = tmp != 0;
  } else {
#line 2213
    rv = 2;
  }
#line 2216
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2217
  tmp___0 = tl;
#line 2217
  tl = tl + 1;
#line 2217
  __gu_p = (void *)tmp___0;
#line 2217
  switch (2UL) {
  case 1UL: 
#line 2217
  *((u8 *)__gu_p) = 0U;
#line 2217
  goto ldv_53507;
  case 2UL: 
#line 2217
  put_unaligned_le16(0, __gu_p);
#line 2217
  goto ldv_53507;
  case 4UL: 
#line 2217
  put_unaligned_le32(0U, __gu_p);
#line 2217
  goto ldv_53507;
  case 8UL: 
#line 2217
  put_unaligned_le64(0ULL, __gu_p);
#line 2217
  goto ldv_53507;
  default: 
#line 2217
  __bad_unaligned_access_size();
#line 2217
  goto ldv_53507;
  }
  ldv_53507: ;
#line 2219
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2226
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2229
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2229
  if (tmp == 0) {
#line 2230
    reply->ret_code = 126;
#line 2231
    return (0);
  } else {

  }
#line 2236
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2236
  if (tmp___0 == 0) {
#line 2236
    goto ldv_53518;
  } else {

  }
#line 2236
  tmp___1 = get_current();
#line 2236
  __wait.flags = 0U;
#line 2236
  __wait.private = (void *)tmp___1;
#line 2236
  __wait.func = & autoremove_wake_function;
#line 2236
  __wait.task_list.next = & __wait.task_list;
#line 2236
  __wait.task_list.prev = & __wait.task_list;
  ldv_53521: 
#line 2236
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2236
  tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2236
  if (tmp___2 == 0) {
#line 2236
    goto ldv_53520;
  } else {

  }
#line 2236
  schedule();
#line 2236
  goto ldv_53521;
  ldv_53520: 
#line 2236
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53518: 
#line 2239
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2240
  val.i = 0U;
#line 2240
  val.ldv_38985.conn = 18U;
#line 2240
  mask.i = 0U;
#line 2240
  mask.ldv_38985.conn = 31U;
#line 2240
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2241
  return (0);
}
}
#line 2245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2248
  retcode = 101;
#line 2249
  skip_initial_sync = 0;
#line 2254
  memset((void *)(& args), 0, 4UL);
#line 2255
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2255
  if (tmp == 0) {
#line 2256
    reply->ret_code = 126;
#line 2257
    return (0);
  } else {

  }
#line 2260
  ldv_mutex_lock_221(& mdev->state_mutex);
#line 2262
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2262
  if (tmp___0 == 0) {
#line 2263
    retcode = 138;
#line 2264
    goto out;
  } else {

  }
#line 2268
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2270
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2271
    skip_initial_sync = 1;
  } else
#line 2272
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2273
    retcode = 151;
#line 2274
    goto out_dec;
  } else {

  }
#line 2277
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2278
  drbd_uuid_new_current(mdev);
#line 2280
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2281
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2283
    if (err != 0) {
#line 2284
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2285
      retcode = 118;
    } else {

    }
#line 2287
    if (skip_initial_sync != 0) {
#line 2288
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2289
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2290
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2291
      spin_lock_irq(& mdev->req_lock);
#line 2292
      __ns.i = mdev->state.i;
#line 2292
      __ns.ldv_38985.disk = 8U;
#line 2292
      __ns.ldv_38985.pdsk = 8U;
#line 2292
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2294
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2298
  drbd_md_sync(mdev);
  out_dec: 
#line 2300
  put_ldev(mdev);
  out: 
#line 2302
  ldv_mutex_unlock_222(& mdev->state_mutex);
#line 2304
  reply->ret_code = retcode;
#line 2305
  return (0);
}
}
#line 2315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2315
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1312}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  void *tmp___2 ;

  {
#line 2348
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2354
  reply_size = 34;
#line 2358
  tmp = try_module_get___1(& __this_module);
#line 2358
  if (tmp == 0) {
#line 2359
    printk("<3>drbd: try_module_get() failed!\n");
#line 2360
    return;
  } else {

  }
#line 2363
  tmp___0 = debug_lockdep_rcu_enabled();
#line 2363
  tmp___1 = get_current();
#line 2363
  if (((tmp___1->cred)->cap_effective.cap[0] & 2097152U) == 0U) {
#line 2364
    retcode = 152;
#line 2365
    goto fail;
  } else {

  }
#line 2368
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2370
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2371
    retcode = 127;
#line 2372
    goto fail;
  } else {

  }
#line 2375
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2377
    retcode = 137;
#line 2378
    goto fail;
  } else {

  }
#line 2381
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2384
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2385
    retcode = 137;
#line 2386
    goto fail;
  } else {

  }
#line 2389
  reply_size = cm->reply_body_size + reply_size;
#line 2392
  tmp___2 = kzalloc((size_t )reply_size, 208U);
#line 2392
  cn_reply = (struct cn_msg *)tmp___2;
#line 2393
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2394
    retcode = 122;
#line 2395
    goto fail;
  } else {

  }
#line 2397
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2399
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2401
  reply->minor = nlp->drbd_minor;
#line 2402
  reply->ret_code = 101;
#line 2405
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2407
  cn_reply->id = req->id;
#line 2408
  cn_reply->seq = req->seq;
#line 2409
  cn_reply->ack = req->ack + 1U;
#line 2410
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2411
  cn_reply->flags = 0U;
#line 2413
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2414
  if (rr != 0 && rr != -3) {
#line 2415
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2417
  kfree((void const   *)cn_reply);
#line 2418
  module_put(& __this_module);
#line 2419
  return;
  fail: 
#line 2421
  drbd_nl_send_reply(req, retcode);
#line 2422
  module_put(& __this_module);
#line 2423
  return;
}
}
#line 2425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2431
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2432
  len = (int )len < (int )l ? len : l;
#line 2433
  tmp = tl;
#line 2433
  tl = tl + 1;
#line 2433
  __gu_p = (void *)tmp;
#line 2433
  switch (2UL) {
  case 1UL: 
#line 2433
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2433
  goto ldv_53572;
  case 2UL: 
#line 2433
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2433
  goto ldv_53572;
  case 4UL: 
#line 2433
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2433
  goto ldv_53572;
  case 8UL: 
#line 2433
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2433
  goto ldv_53572;
  default: 
#line 2433
  __bad_unaligned_access_size();
#line 2433
  goto ldv_53572;
  }
  ldv_53572: 
#line 2434
  tmp___0 = tl;
#line 2434
  tl = tl + 1;
#line 2434
  __gu_p___0 = (void *)tmp___0;
#line 2434
  switch (2UL) {
  case 1UL: 
#line 2434
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2434
  goto ldv_53579;
  case 2UL: 
#line 2434
  put_unaligned_le16((int )len, __gu_p___0);
#line 2434
  goto ldv_53579;
  case 4UL: 
#line 2434
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2434
  goto ldv_53579;
  case 8UL: 
#line 2434
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2434
  goto ldv_53579;
  default: 
#line 2434
  __bad_unaligned_access_size();
#line 2434
  goto ldv_53579;
  }
  ldv_53579: 
#line 2435
  __len = (size_t )len;
#line 2435
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2436
  tl = tl + (unsigned long )len;
#line 2437
  if (nul_terminated != 0) {
#line 2438
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2439
  return (tl);
}
}
#line 2443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2445
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2445
  return (tmp);
}
}
#line 2449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2451
  tmp = strlen(str);
#line 2451
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2451
  return (tmp___0);
}
}
#line 2455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2457
  tmp = tl;
#line 2457
  tl = tl + 1;
#line 2457
  __gu_p = (void *)tmp;
#line 2457
  switch (2UL) {
  case 1UL: 
#line 2457
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2457
  goto ldv_53605;
  case 2UL: 
#line 2457
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2457
  goto ldv_53605;
  case 4UL: 
#line 2457
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2457
  goto ldv_53605;
  case 8UL: 
#line 2457
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2457
  goto ldv_53605;
  default: 
#line 2457
  __bad_unaligned_access_size();
#line 2457
  goto ldv_53605;
  }
  ldv_53605: ;
#line 2458
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2460
  tmp___0 = tl;
#line 2460
  tl = tl + 1;
#line 2460
  __gu_p___0 = (void *)tmp___0;
#line 2460
  switch (2UL) {
  case 1UL: 
#line 2460
  *((u8 *)__gu_p___0) = 4U;
#line 2460
  goto ldv_53613;
  case 2UL: 
#line 2460
  put_unaligned_le16(4, __gu_p___0);
#line 2460
  goto ldv_53613;
  case 4UL: 
#line 2460
  put_unaligned_le32(4U, __gu_p___0);
#line 2460
  goto ldv_53613;
  case 8UL: 
#line 2460
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2460
  goto ldv_53613;
  default: 
#line 2460
  __bad_unaligned_access_size();
#line 2460
  goto ldv_53613;
  }
  ldv_53613: 
#line 2461
  __gu_p___1 = (void *)tl;
#line 2461
  switch (4UL) {
  case 1UL: 
#line 2461
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2461
  goto ldv_53620;
  case 2UL: 
#line 2461
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2461
  goto ldv_53620;
  case 4UL: 
#line 2461
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2461
  goto ldv_53620;
  case 8UL: 
#line 2461
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2461
  goto ldv_53620;
  default: 
#line 2461
  __bad_unaligned_access_size();
#line 2461
  goto ldv_53620;
  }
  ldv_53620: 
#line 2462
  tl = tl + 4U;
#line 2463
  goto ldv_53625;
  case 16384U: 
#line 2465
  tmp___1 = tl;
#line 2465
  tl = tl + 1;
#line 2465
  __gu_p___2 = (void *)tmp___1;
#line 2465
  switch (2UL) {
  case 1UL: 
#line 2465
  *((u8 *)__gu_p___2) = 8U;
#line 2465
  goto ldv_53629;
  case 2UL: 
#line 2465
  put_unaligned_le16(8, __gu_p___2);
#line 2465
  goto ldv_53629;
  case 4UL: 
#line 2465
  put_unaligned_le32(8U, __gu_p___2);
#line 2465
  goto ldv_53629;
  case 8UL: 
#line 2465
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2465
  goto ldv_53629;
  default: 
#line 2465
  __bad_unaligned_access_size();
#line 2465
  goto ldv_53629;
  }
  ldv_53629: 
#line 2466
  __gu_p___3 = (void *)tl;
#line 2466
  switch (8UL) {
  case 1UL: 
#line 2466
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2466
  goto ldv_53636;
  case 2UL: 
#line 2466
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2466
  goto ldv_53636;
  case 4UL: 
#line 2466
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2466
  goto ldv_53636;
  case 8UL: 
#line 2466
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2466
  goto ldv_53636;
  default: 
#line 2466
  __bad_unaligned_access_size();
#line 2466
  goto ldv_53636;
  }
  ldv_53636: 
#line 2467
  tl = tl + 8U;
#line 2468
  goto ldv_53625;
  default: ;
  }
  ldv_53625: ;
#line 2473
  return (tl);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2482
  cn_reply = (struct cn_msg *)(& buffer);
#line 2483
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2485
  tl = (unsigned short *)(& reply->tag_list);
#line 2489
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2491
  tmp = tl;
#line 2491
  tl = tl + 1;
#line 2491
  __gu_p = (void *)tmp;
#line 2491
  switch (2UL) {
  case 1UL: 
#line 2491
  *((u8 *)__gu_p) = 0U;
#line 2491
  goto ldv_53652;
  case 2UL: 
#line 2491
  put_unaligned_le16(0, __gu_p);
#line 2491
  goto ldv_53652;
  case 4UL: 
#line 2491
  put_unaligned_le32(0U, __gu_p);
#line 2491
  goto ldv_53652;
  case 8UL: 
#line 2491
  put_unaligned_le64(0ULL, __gu_p);
#line 2491
  goto ldv_53652;
  default: 
#line 2491
  __bad_unaligned_access_size();
#line 2491
  goto ldv_53652;
  }
  ldv_53652: 
#line 2493
  cn_reply->id.idx = 8U;
#line 2494
  cn_reply->id.val = 1U;
#line 2496
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2496
  cn_reply->seq = (__u32 )tmp___0;
#line 2497
  cn_reply->ack = 0U;
#line 2498
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2500
  cn_reply->flags = 0U;
#line 2502
  reply->packet_type = 17;
#line 2503
  reply->minor = mdev_to_minor(mdev);
#line 2504
  reply->ret_code = 101;
#line 2506
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2507
  return;
}
}
#line 2509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2515
  cn_reply = (struct cn_msg *)(& buffer);
#line 2516
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2518
  tl = (unsigned short *)(& reply->tag_list);
#line 2522
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2523
  tmp = tl;
#line 2523
  tl = tl + 1;
#line 2523
  __gu_p = (void *)tmp;
#line 2523
  switch (2UL) {
  case 1UL: 
#line 2523
  *((u8 *)__gu_p) = 0U;
#line 2523
  goto ldv_53667;
  case 2UL: 
#line 2523
  put_unaligned_le16(0, __gu_p);
#line 2523
  goto ldv_53667;
  case 4UL: 
#line 2523
  put_unaligned_le32(0U, __gu_p);
#line 2523
  goto ldv_53667;
  case 8UL: 
#line 2523
  put_unaligned_le64(0ULL, __gu_p);
#line 2523
  goto ldv_53667;
  default: 
#line 2523
  __bad_unaligned_access_size();
#line 2523
  goto ldv_53667;
  }
  ldv_53667: 
#line 2525
  cn_reply->id.idx = 8U;
#line 2526
  cn_reply->id.val = 1U;
#line 2528
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2528
  cn_reply->seq = (__u32 )tmp___0;
#line 2529
  cn_reply->ack = 0U;
#line 2530
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2532
  cn_reply->flags = 0U;
#line 2534
  reply->packet_type = 20;
#line 2535
  reply->minor = mdev_to_minor(mdev);
#line 2536
  reply->ret_code = 101;
#line 2538
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2539
  return;
}
}
#line 2541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2552
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2553
    return;
  } else {

  }
#line 2554
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2555
    return;
  } else {

  }
#line 2563
  tmp = kzalloc(33026UL, 16U);
#line 2563
  cn_reply = (struct cn_msg *)tmp;
#line 2570
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2571
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2573
    return;
  } else {

  }
#line 2576
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2577
  tl = (unsigned short *)(& reply->tag_list);
#line 2579
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2580
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2581
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2582
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2583
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_47927.block_id));
#line 2586
  __min1 = e->size;
#line 2586
  __min2 = 32768U;
#line 2586
  len = __min1 < __min2 ? __min1 : __min2;
#line 2587
  tmp___0 = tl;
#line 2587
  tl = tl + 1;
#line 2587
  __gu_p = (void *)tmp___0;
#line 2587
  switch (2UL) {
  case 1UL: 
#line 2587
  *((u8 *)__gu_p) = 50U;
#line 2587
  goto ldv_53690;
  case 2UL: 
#line 2587
  put_unaligned_le16(49202, __gu_p);
#line 2587
  goto ldv_53690;
  case 4UL: 
#line 2587
  put_unaligned_le32(49202U, __gu_p);
#line 2587
  goto ldv_53690;
  case 8UL: 
#line 2587
  put_unaligned_le64(49202ULL, __gu_p);
#line 2587
  goto ldv_53690;
  default: 
#line 2587
  __bad_unaligned_access_size();
#line 2587
  goto ldv_53690;
  }
  ldv_53690: 
#line 2588
  tmp___1 = tl;
#line 2588
  tl = tl + 1;
#line 2588
  __gu_p___0 = (void *)tmp___1;
#line 2588
  switch (2UL) {
  case 1UL: 
#line 2588
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2588
  goto ldv_53697;
  case 2UL: 
#line 2588
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2588
  goto ldv_53697;
  case 4UL: 
#line 2588
  put_unaligned_le32(len, __gu_p___0);
#line 2588
  goto ldv_53697;
  case 8UL: 
#line 2588
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2588
  goto ldv_53697;
  default: 
#line 2588
  __bad_unaligned_access_size();
#line 2588
  goto ldv_53697;
  }
  ldv_53697: 
#line 2590
  page = e->pages;
#line 2591
  goto ldv_53713;
  ldv_53712: 
#line 2592
  tmp___2 = kmap_atomic___0(page);
#line 2592
  d = tmp___2;
#line 2593
  __min1___0 = len;
#line 2593
  __min2___0 = 4096U;
#line 2593
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2594
  __len = (size_t )l;
#line 2594
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2595
  __kunmap_atomic___0(d);
#line 2596
  tl = tl + (unsigned long )l;
#line 2597
  len = len - l;
#line 2598
  if (len == 0U) {
#line 2599
    goto ldv_53711;
  } else {

  }
#line 2591
  page = page_chain_next(page);
  ldv_53713: ;
#line 2591
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2591
    tmp___3 = page_chain_next(page);
#line 2591
    __builtin_prefetch((void const   *)tmp___3);
#line 2591
    if (1 != 0) {
#line 2592
      goto ldv_53712;
    } else {
#line 2594
      goto ldv_53711;
    }
  } else {

  }
  ldv_53711: 
#line 2601
  tmp___4 = tl;
#line 2601
  tl = tl + 1;
#line 2601
  __gu_p___1 = (void *)tmp___4;
#line 2601
  switch (2UL) {
  case 1UL: 
#line 2601
  *((u8 *)__gu_p___1) = 0U;
#line 2601
  goto ldv_53716;
  case 2UL: 
#line 2601
  put_unaligned_le16(0, __gu_p___1);
#line 2601
  goto ldv_53716;
  case 4UL: 
#line 2601
  put_unaligned_le32(0U, __gu_p___1);
#line 2601
  goto ldv_53716;
  case 8UL: 
#line 2601
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2601
  goto ldv_53716;
  default: 
#line 2601
  __bad_unaligned_access_size();
#line 2601
  goto ldv_53716;
  }
  ldv_53716: 
#line 2603
  cn_reply->id.idx = 8U;
#line 2604
  cn_reply->id.val = 1U;
#line 2606
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2606
  cn_reply->seq = (__u32 )tmp___5;
#line 2607
  cn_reply->ack = 0U;
#line 2608
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2610
  cn_reply->flags = 0U;
#line 2612
  reply->packet_type = 24;
#line 2613
  reply->minor = mdev_to_minor(mdev);
#line 2614
  reply->ret_code = 101;
#line 2616
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2617
  kfree((void const   *)cn_reply);
#line 2618
  return;
}
}
#line 2620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2626
  cn_reply = (struct cn_msg *)(& buffer);
#line 2627
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2629
  tl = (unsigned short *)(& reply->tag_list);
#line 2634
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2634
  if (tmp == 0) {
#line 2635
    return;
  } else {

  }
#line 2636
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2637
  put_ldev(mdev);
#line 2639
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2640
  tmp___0 = tl;
#line 2640
  tl = tl + 1;
#line 2640
  __gu_p = (void *)tmp___0;
#line 2640
  switch (2UL) {
  case 1UL: 
#line 2640
  *((u8 *)__gu_p) = 0U;
#line 2640
  goto ldv_53732;
  case 2UL: 
#line 2640
  put_unaligned_le16(0, __gu_p);
#line 2640
  goto ldv_53732;
  case 4UL: 
#line 2640
  put_unaligned_le32(0U, __gu_p);
#line 2640
  goto ldv_53732;
  case 8UL: 
#line 2640
  put_unaligned_le64(0ULL, __gu_p);
#line 2640
  goto ldv_53732;
  default: 
#line 2640
  __bad_unaligned_access_size();
#line 2640
  goto ldv_53732;
  }
  ldv_53732: 
#line 2642
  cn_reply->id.idx = 8U;
#line 2643
  cn_reply->id.val = 1U;
#line 2645
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2645
  cn_reply->seq = (__u32 )tmp___1;
#line 2646
  cn_reply->ack = 0U;
#line 2647
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2649
  cn_reply->flags = 0U;
#line 2651
  reply->packet_type = 23;
#line 2652
  reply->minor = mdev_to_minor(mdev);
#line 2653
  reply->ret_code = 101;
#line 2655
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2656
  return;
}
}
#line 2658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2661
  try = 10;
#line 2663
  cn_id_drbd.val = 1U;
  ldv_53744: 
#line 2665
  cn_id_drbd.idx = cn_idx;
#line 2666
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2667
  if (err == 0) {
#line 2668
    goto ldv_53743;
  } else {

  }
#line 2669
  cn_idx = cn_idx + 6977U;
#line 2670
  tmp = try;
#line 2670
  try = try - 1;
#line 2670
  if (tmp != 0) {
#line 2671
    goto ldv_53744;
  } else {

  }
  ldv_53743: ;
#line 2672
  if (err != 0) {
#line 2673
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2674
    return (err);
  } else {

  }
#line 2677
  return (0);
}
}
#line 2680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2684
  cn_id_drbd.idx = cn_idx;
#line 2685
  cn_id_drbd.val = 1U;
#line 2687
  cn_del_callback(& cn_id_drbd);
#line 2688
  return;
}
}
#line 2690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2693
  cn_reply = (struct cn_msg *)(& buffer);
#line 2694
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2698
  memset((void *)(& buffer), 0, 32UL);
#line 2699
  cn_reply->id = req->id;
#line 2701
  cn_reply->seq = req->seq;
#line 2702
  cn_reply->ack = req->ack + 1U;
#line 2703
  cn_reply->len = 12U;
#line 2704
  cn_reply->flags = 0U;
#line 2706
  reply->packet_type = 27;
#line 2707
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2708
  reply->ret_code = ret_code;
#line 2710
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2711
  if (rr != 0 && rr != -3) {
#line 2712
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2713
  return;
}
}
#line 2715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_211(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2720
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2722
  mutex_lock(ldv_func_arg1);
#line 2723
  return;
}
}
#line 2725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_212(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2730
  tmp = mutex_trylock(ldv_func_arg1);
#line 2730
  ldv_func_res = tmp;
#line 2732
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2732
  return (tmp___0);
#line 2734
  return (ldv_func_res);
}
}
#line 2737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_213(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2742
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2744
  mutex_unlock(ldv_func_arg1);
#line 2745
  return;
}
}
#line 2747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_214(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2752
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2754
  mutex_lock(ldv_func_arg1);
#line 2755
  return;
}
}
#line 2757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_215(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2762
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2764
  mutex_unlock(ldv_func_arg1);
#line 2765
  return;
}
}
#line 2767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_216(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2772
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2774
  mutex_lock(ldv_func_arg1);
#line 2775
  return;
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_217(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2782
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2784
  mutex_unlock(ldv_func_arg1);
#line 2785
  return;
}
}
#line 2787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_218(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2792
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2794
  mutex_unlock(ldv_func_arg1);
#line 2795
  return;
}
}
#line 2797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_219(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2802
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2804
  mutex_lock(ldv_func_arg1);
#line 2805
  return;
}
}
#line 2807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_220(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2812
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2814
  mutex_unlock(ldv_func_arg1);
#line 2815
  return;
}
}
#line 2817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_221(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2822
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2824
  mutex_lock(ldv_func_arg1);
#line 2825
  return;
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_222(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2832
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2834
  mutex_unlock(ldv_func_arg1);
#line 2835
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_drbd_main_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_drbd_main_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_drbd_main_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_drbd_main_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_drbd_main_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_drbd_main_mutex = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_device = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_device = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_device = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_device = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_device = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_device == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_device = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 918
  return;
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 928
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 928
    ldv_error();
  }
#line 931
  nondetermined = ldv_undef_int();
#line 934
  if (nondetermined) {
#line 937
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 939
    return (0);
  } else {
#line 944
    return (-4);
  }
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 954
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 954
    ldv_error();
  }
#line 957
  nondetermined = ldv_undef_int();
#line 960
  if (nondetermined) {
#line 963
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 965
    return (0);
  } else {
#line 970
    return (-4);
  }
}
}
#line 975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 978
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 978
    ldv_error();
  }
#line 980
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 981
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 989
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 989
    ldv_error();
  }
#line 992
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 995
  if (is_mutex_held_by_another_thread) {
#line 998
    return (0);
  } else {
#line 1003
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1005
    return (1);
  }
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 1015
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1015
    ldv_error();
  }
#line 1018
  atomic_value_after_dec = ldv_undef_int();
#line 1021
  if (atomic_value_after_dec == 0) {
#line 1024
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1026
    return (1);
  } else {

  }
#line 1030
  return (0);
}
}
#line 1035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1039
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 1042
    nondetermined = ldv_undef_int();
#line 1045
    if (nondetermined) {
#line 1048
      return (0);
    } else {
#line 1053
      return (1);
    }
  } else {
#line 1059
    return (1);
  }
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 1067
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 1067
    ldv_error();
  }
#line 1069
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1070
  return;
}
}
#line 1074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 1077
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 1079
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 1081
  ldv_mutex_drbd_main_mutex = 1;
#line 1083
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 1085
  ldv_mutex_mutex_of_device = 1;
#line 1087
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 1089
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1090
  return;
}
}
#line 1093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 1096
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 1096
    ldv_error();
  }
#line 1098
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 1098
    ldv_error();
  }
#line 1100
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 1100
    ldv_error();
  }
#line 1102
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 1102
    ldv_error();
  }
#line 1104
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 1104
    ldv_error();
  }
#line 1106
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 1106
    ldv_error();
  }
#line 1108
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1108
    ldv_error();
  }
#line 1109
  return;
}
}
